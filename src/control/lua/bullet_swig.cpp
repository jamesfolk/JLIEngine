/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif

/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif


/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

// Can be used to create namespaces. Currently used to
// wrap class static methods/variables/constants
typedef struct {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    cls_static;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1)); /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
  return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1));  /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) 
    else {
      return 0; // Exits stoically if an invalid key is initialized.
    }
#endif
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* registering a module in lua. Pushes the module table on the stack. */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
#ifdef SWIG_LUA_MODULE_GLOBAL
  /* If requested, install the module directly into the global namespace. */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
#else
  /* Do not install the module table as global name. The stack top has
     the module table with the name below. We pop the top and replace
     the name with it. */
  lua_replace(L,-2);
#endif
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}
#endif

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: namespaces
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  return 0;
}

SWIGINTERN void SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]); // forward declaration
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn); // forward declaration

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State* L, swig_lua_namespace* ns)
{
  int i = 0;
  assert(lua_istable(L,-1));
  /* There must be table at the top of the stack */
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].method);
  }
  lua_pop(L,1);

  /* clear stack - remove metatble */
  lua_pop(L,1);

}

/* helper function. creates namespace table and add it to module table */
SWIGINTERN int SWIG_Lua_namespace_register(lua_State* L, swig_lua_namespace* ns)
{
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table */
  lua_checkstack(L,5);
  lua_pushstring(L, ns->name);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */
  lua_rawset(L,-3); /* add namespace to module table */
}
/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State* L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  assert(lua_isuserdata(L,1));  /* just in case */
  unsigned long userData = (unsigned long)lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  
  lua_getfield(L, -1, ".type");
  const char* className = lua_tostring(L, -1);
  
  char output[256];
  sprintf(output, "<%s userdata: %lX>", className, userData);
  
  lua_pushstring(L, (const char*)output);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* Constructor proxy. Used when class name entry in module is not class constructor,
but special table instead. */
SWIGINTERN int SWIG_Lua_constructor_proxy(lua_State* L)
{
  /* unlimited number of parameters
     First one is our proxy table and we should remove it
     Other we should pass to real constructor
   */
   assert(lua_istable(L,1));
   lua_pushstring(L,".constructor");
   lua_rawget(L,1);
   assert(!lua_isnil(L,-1));
   lua_replace(L,1); /* replace our table with real constructor */
   lua_call(L,lua_gettop(L)-1,1);
   return 1;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State* L, swig_lua_class* clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, &clss->cls_static);
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State* L, swig_lua_class* clss)
{
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static.name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,&clss->cls_static);

  SWIG_Lua_get_table(L,clss->name); // Get namespace table back
  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    SWIG_Lua_add_function(L,".constructor", clss->constructor);
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", SWIG_Lua_constructor_proxy);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  SWIG_Lua_class_register_static(L,clss);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add tostring method for better output */
  SWIG_Lua_add_function(L,"__tostring",SWIG_Lua_class_tostring);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CProfileIterator swig_types[0]
#define SWIGTYPE_p_CProfileManager swig_types[1]
#define SWIGTYPE_p_CProfileNode swig_types[2]
#define SWIGTYPE_p_CProfileSample swig_types[3]
#define SWIGTYPE_p_PHY_ScalarType swig_types[4]
#define SWIGTYPE_p_SphereTriangleDetector swig_types[5]
#define SWIGTYPE_p_bool swig_types[6]
#define SWIGTYPE_p_btActionInterface swig_types[7]
#define SWIGTYPE_p_btActivatingCollisionAlgorithm swig_types[8]
#define SWIGTYPE_p_btAlignedObjectArrayT_btBroadphasePair_t swig_types[9]
#define SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t swig_types[10]
#define SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_p_t swig_types[11]
#define SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t swig_types[12]
#define SWIGTYPE_p_btAlignedObjectArrayT_btOptimizedBvhNode_t swig_types[13]
#define SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t swig_types[14]
#define SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t swig_types[15]
#define SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t swig_types[16]
#define SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t swig_types[17]
#define SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t swig_types[18]
#define SWIGTYPE_p_btAngularLimit swig_types[19]
#define SWIGTYPE_p_btBU_Simplex1to4 swig_types[20]
#define SWIGTYPE_p_btBlock swig_types[21]
#define SWIGTYPE_p_btBoxShape swig_types[22]
#define SWIGTYPE_p_btBroadphaseAabbCallback swig_types[23]
#define SWIGTYPE_p_btBroadphaseInterface swig_types[24]
#define SWIGTYPE_p_btBroadphasePair swig_types[25]
#define SWIGTYPE_p_btBroadphasePairSortPredicate swig_types[26]
#define SWIGTYPE_p_btBroadphaseProxy swig_types[27]
#define SWIGTYPE_p_btBroadphaseRayCallback swig_types[28]
#define SWIGTYPE_p_btBvhSubtreeInfo swig_types[29]
#define SWIGTYPE_p_btBvhSubtreeInfoData swig_types[30]
#define SWIGTYPE_p_btBvhTriangleMeshShape swig_types[31]
#define SWIGTYPE_p_btCapsuleShape swig_types[32]
#define SWIGTYPE_p_btCapsuleShapeData swig_types[33]
#define SWIGTYPE_p_btCapsuleShapeX swig_types[34]
#define SWIGTYPE_p_btCapsuleShapeZ swig_types[35]
#define SWIGTYPE_p_btCharIndexTripletData swig_types[36]
#define SWIGTYPE_p_btChunk swig_types[37]
#define SWIGTYPE_p_btClock swig_types[38]
#define SWIGTYPE_p_btCollisionAlgorithm swig_types[39]
#define SWIGTYPE_p_btCollisionAlgorithmConstructionInfo swig_types[40]
#define SWIGTYPE_p_btCollisionAlgorithmCreateFunc swig_types[41]
#define SWIGTYPE_p_btCollisionConfiguration swig_types[42]
#define SWIGTYPE_p_btCollisionDispatcher swig_types[43]
#define SWIGTYPE_p_btCollisionObject swig_types[44]
#define SWIGTYPE_p_btCollisionObjectDoubleData swig_types[45]
#define SWIGTYPE_p_btCollisionObjectFloatData swig_types[46]
#define SWIGTYPE_p_btCollisionObjectWrapper swig_types[47]
#define SWIGTYPE_p_btCollisionShape swig_types[48]
#define SWIGTYPE_p_btCollisionShapeData swig_types[49]
#define SWIGTYPE_p_btCollisionWorld swig_types[50]
#define SWIGTYPE_p_btCompoundCollisionAlgorithm swig_types[51]
#define SWIGTYPE_p_btCompoundShape swig_types[52]
#define SWIGTYPE_p_btCompoundShapeChild swig_types[53]
#define SWIGTYPE_p_btCompoundShapeChildData swig_types[54]
#define SWIGTYPE_p_btCompoundShapeData swig_types[55]
#define SWIGTYPE_p_btConcaveShape swig_types[56]
#define SWIGTYPE_p_btConeShape swig_types[57]
#define SWIGTYPE_p_btConeShapeX swig_types[58]
#define SWIGTYPE_p_btConeShapeZ swig_types[59]
#define SWIGTYPE_p_btConstraintRow swig_types[60]
#define SWIGTYPE_p_btConstraintSetting swig_types[61]
#define SWIGTYPE_p_btConstraintSolver swig_types[62]
#define SWIGTYPE_p_btContactConstraint swig_types[63]
#define SWIGTYPE_p_btContactSolverInfo swig_types[64]
#define SWIGTYPE_p_btContactSolverInfoData swig_types[65]
#define SWIGTYPE_p_btContactSolverInfoDoubleData swig_types[66]
#define SWIGTYPE_p_btContactSolverInfoFloatData swig_types[67]
#define SWIGTYPE_p_btConvexConcaveCollisionAlgorithm swig_types[68]
#define SWIGTYPE_p_btConvexConvexAlgorithm swig_types[69]
#define SWIGTYPE_p_btConvexHullShape swig_types[70]
#define SWIGTYPE_p_btConvexHullShapeData swig_types[71]
#define SWIGTYPE_p_btConvexInternalAabbCachingShape swig_types[72]
#define SWIGTYPE_p_btConvexInternalShape swig_types[73]
#define SWIGTYPE_p_btConvexInternalShapeData swig_types[74]
#define SWIGTYPE_p_btConvexPenetrationDepthSolver swig_types[75]
#define SWIGTYPE_p_btConvexPolyhedron swig_types[76]
#define SWIGTYPE_p_btConvexSeparatingDistanceUtil swig_types[77]
#define SWIGTYPE_p_btConvexShape swig_types[78]
#define SWIGTYPE_p_btConvexTriangleCallback swig_types[79]
#define SWIGTYPE_p_btCylinderShape swig_types[80]
#define SWIGTYPE_p_btCylinderShapeData swig_types[81]
#define SWIGTYPE_p_btCylinderShapeX swig_types[82]
#define SWIGTYPE_p_btCylinderShapeZ swig_types[83]
#define SWIGTYPE_p_btDbvtNode swig_types[84]
#define SWIGTYPE_p_btDefaultMotionState swig_types[85]
#define SWIGTYPE_p_btDefaultSerializer swig_types[86]
#define SWIGTYPE_p_btDefaultVehicleRaycaster swig_types[87]
#define SWIGTYPE_p_btDiscreteCollisionDetectorInterface swig_types[88]
#define SWIGTYPE_p_btDiscreteCollisionDetectorInterface__ClosestPointInput swig_types[89]
#define SWIGTYPE_p_btDiscreteCollisionDetectorInterface__Result swig_types[90]
#define SWIGTYPE_p_btDiscreteDynamicsWorld swig_types[91]
#define SWIGTYPE_p_btDispatcher swig_types[92]
#define SWIGTYPE_p_btDispatcherInfo swig_types[93]
#define SWIGTYPE_p_btDynamicsWorld swig_types[94]
#define SWIGTYPE_p_btDynamicsWorldDoubleData swig_types[95]
#define SWIGTYPE_p_btDynamicsWorldFloatData swig_types[96]
#define SWIGTYPE_p_btElement swig_types[97]
#define SWIGTYPE_p_btEmptyAlgorithm swig_types[98]
#define SWIGTYPE_p_btEmptyShape swig_types[99]
#define SWIGTYPE_p_btGEN_Link swig_types[100]
#define SWIGTYPE_p_btGEN_List swig_types[101]
#define SWIGTYPE_p_btGeneric6DofConstraint swig_types[102]
#define SWIGTYPE_p_btGeneric6DofConstraintData swig_types[103]
#define SWIGTYPE_p_btGeometryUtil swig_types[104]
#define SWIGTYPE_p_btGjkConvexCast swig_types[105]
#define SWIGTYPE_p_btGjkEpaPenetrationDepthSolver swig_types[106]
#define SWIGTYPE_p_btGjkEpaSolver swig_types[107]
#define SWIGTYPE_p_btGjkPairDetector swig_types[108]
#define SWIGTYPE_p_btHashInt swig_types[109]
#define SWIGTYPE_p_btHashMapT_btHashInt_btTriangleInfo_t swig_types[110]
#define SWIGTYPE_p_btHashPtr swig_types[111]
#define SWIGTYPE_p_btHashString swig_types[112]
#define SWIGTYPE_p_btHashedOverlappingPairCache swig_types[113]
#define SWIGTYPE_p_btHeightfieldTerrainShape swig_types[114]
#define SWIGTYPE_p_btHingeConstraint swig_types[115]
#define SWIGTYPE_p_btHingeConstraintDoubleData swig_types[116]
#define SWIGTYPE_p_btHingeConstraintFloatData swig_types[117]
#define SWIGTYPE_p_btIDebugDraw swig_types[118]
#define SWIGTYPE_p_btIndexedMesh swig_types[119]
#define SWIGTYPE_p_btIntIndexData swig_types[120]
#define SWIGTYPE_p_btInternalTriangleIndexCallback swig_types[121]
#define SWIGTYPE_p_btJacobianEntry swig_types[122]
#define SWIGTYPE_p_btJointFeedback swig_types[123]
#define SWIGTYPE_p_btManifoldPoint swig_types[124]
#define SWIGTYPE_p_btManifoldResult swig_types[125]
#define SWIGTYPE_p_btMatrix3x3 swig_types[126]
#define SWIGTYPE_p_btMatrix3x3DoubleData swig_types[127]
#define SWIGTYPE_p_btMatrix3x3FloatData swig_types[128]
#define SWIGTYPE_p_btMeshPartData swig_types[129]
#define SWIGTYPE_p_btMinkowskiPenetrationDepthSolver swig_types[130]
#define SWIGTYPE_p_btMinkowskiSumShape swig_types[131]
#define SWIGTYPE_p_btMotionState swig_types[132]
#define SWIGTYPE_p_btMultiSphereShape swig_types[133]
#define SWIGTYPE_p_btMultiSphereShapeData swig_types[134]
#define SWIGTYPE_p_btNodeOverlapCallback swig_types[135]
#define SWIGTYPE_p_btNullPairCache swig_types[136]
#define SWIGTYPE_p_btOptimizedBvh swig_types[137]
#define SWIGTYPE_p_btOptimizedBvhNode swig_types[138]
#define SWIGTYPE_p_btOptimizedBvhNodeDoubleData swig_types[139]
#define SWIGTYPE_p_btOptimizedBvhNodeFloatData swig_types[140]
#define SWIGTYPE_p_btOverlapCallback swig_types[141]
#define SWIGTYPE_p_btOverlapFilterCallback swig_types[142]
#define SWIGTYPE_p_btOverlappingPairCache swig_types[143]
#define SWIGTYPE_p_btOverlappingPairCallback swig_types[144]
#define SWIGTYPE_p_btPersistentManifold swig_types[145]
#define SWIGTYPE_p_btPoint2PointConstraint swig_types[146]
#define SWIGTYPE_p_btPoint2PointConstraintDoubleData swig_types[147]
#define SWIGTYPE_p_btPoint2PointConstraintFloatData swig_types[148]
#define SWIGTYPE_p_btPointCollector swig_types[149]
#define SWIGTYPE_p_btPointerUid swig_types[150]
#define SWIGTYPE_p_btPolyhedralConvexAabbCachingShape swig_types[151]
#define SWIGTYPE_p_btPolyhedralConvexShape swig_types[152]
#define SWIGTYPE_p_btPoolAllocator swig_types[153]
#define SWIGTYPE_p_btPositionAndRadius swig_types[154]
#define SWIGTYPE_p_btQuadWord swig_types[155]
#define SWIGTYPE_p_btQuantizedBvh swig_types[156]
#define SWIGTYPE_p_btQuantizedBvhDoubleData swig_types[157]
#define SWIGTYPE_p_btQuantizedBvhFloatData swig_types[158]
#define SWIGTYPE_p_btQuantizedBvhNode swig_types[159]
#define SWIGTYPE_p_btQuantizedBvhNodeData swig_types[160]
#define SWIGTYPE_p_btQuaternion swig_types[161]
#define SWIGTYPE_p_btRaycastVehicle swig_types[162]
#define SWIGTYPE_p_btRaycastVehicle__btVehicleTuning swig_types[163]
#define SWIGTYPE_p_btRigidBody swig_types[164]
#define SWIGTYPE_p_btRigidBodyDoubleData swig_types[165]
#define SWIGTYPE_p_btRigidBodyFloatData swig_types[166]
#define SWIGTYPE_p_btRigidBody__btRigidBodyConstructionInfo swig_types[167]
#define SWIGTYPE_p_btRotationalLimitMotor swig_types[168]
#define SWIGTYPE_p_btSequentialImpulseConstraintSolver swig_types[169]
#define SWIGTYPE_p_btSerializer swig_types[170]
#define SWIGTYPE_p_btShortIntIndexData swig_types[171]
#define SWIGTYPE_p_btShortIntIndexTripletData swig_types[172]
#define SWIGTYPE_p_btSimpleBroadphase swig_types[173]
#define SWIGTYPE_p_btSimpleBroadphaseProxy swig_types[174]
#define SWIGTYPE_p_btSimpleDynamicsWorld swig_types[175]
#define SWIGTYPE_p_btSimulationIslandManager swig_types[176]
#define SWIGTYPE_p_btSolve2LinearConstraint swig_types[177]
#define SWIGTYPE_p_btSolverBody swig_types[178]
#define SWIGTYPE_p_btSolverConstraint swig_types[179]
#define SWIGTYPE_p_btSortedOverlappingPairCache swig_types[180]
#define SWIGTYPE_p_btSphereBoxCollisionAlgorithm swig_types[181]
#define SWIGTYPE_p_btSphereShape swig_types[182]
#define SWIGTYPE_p_btSphereSphereCollisionAlgorithm swig_types[183]
#define SWIGTYPE_p_btSphereTriangleCollisionAlgorithm swig_types[184]
#define SWIGTYPE_p_btStackAlloc swig_types[185]
#define SWIGTYPE_p_btStorageResult swig_types[186]
#define SWIGTYPE_p_btStridingMeshInterface swig_types[187]
#define SWIGTYPE_p_btStridingMeshInterfaceData swig_types[188]
#define SWIGTYPE_p_btSubSimplexClosestResult swig_types[189]
#define SWIGTYPE_p_btSubsimplexConvexCast swig_types[190]
#define SWIGTYPE_p_btTransform swig_types[191]
#define SWIGTYPE_p_btTransformDoubleData swig_types[192]
#define SWIGTYPE_p_btTransformFloatData swig_types[193]
#define SWIGTYPE_p_btTransformUtil swig_types[194]
#define SWIGTYPE_p_btTranslationalLimitMotor swig_types[195]
#define SWIGTYPE_p_btTriangle swig_types[196]
#define SWIGTYPE_p_btTriangleBuffer swig_types[197]
#define SWIGTYPE_p_btTriangleCallback swig_types[198]
#define SWIGTYPE_p_btTriangleConvexcastCallback swig_types[199]
#define SWIGTYPE_p_btTriangleIndexVertexArray swig_types[200]
#define SWIGTYPE_p_btTriangleInfo swig_types[201]
#define SWIGTYPE_p_btTriangleInfoData swig_types[202]
#define SWIGTYPE_p_btTriangleInfoMap swig_types[203]
#define SWIGTYPE_p_btTriangleInfoMapData swig_types[204]
#define SWIGTYPE_p_btTriangleMeshShape swig_types[205]
#define SWIGTYPE_p_btTriangleMeshShapeData swig_types[206]
#define SWIGTYPE_p_btTriangleRaycastCallback swig_types[207]
#define SWIGTYPE_p_btTriangleShape swig_types[208]
#define SWIGTYPE_p_btTypedConstraint swig_types[209]
#define SWIGTYPE_p_btTypedConstraintData swig_types[210]
#define SWIGTYPE_p_btTypedConstraint__btConstraintInfo1 swig_types[211]
#define SWIGTYPE_p_btTypedConstraint__btConstraintInfo2 swig_types[212]
#define SWIGTYPE_p_btTypedObject swig_types[213]
#define SWIGTYPE_p_btUnionFind swig_types[214]
#define SWIGTYPE_p_btUsageBitfield swig_types[215]
#define SWIGTYPE_p_btVector3 swig_types[216]
#define SWIGTYPE_p_btVector3DoubleData swig_types[217]
#define SWIGTYPE_p_btVector3FloatData swig_types[218]
#define SWIGTYPE_p_btVector4 swig_types[219]
#define SWIGTYPE_p_btVoronoiSimplexSolver swig_types[220]
#define SWIGTYPE_p_btWheelInfo swig_types[221]
#define SWIGTYPE_p_btWheelInfoConstructionInfo swig_types[222]
#define SWIGTYPE_p_char swig_types[223]
#define SWIGTYPE_p_double swig_types[224]
#define SWIGTYPE_p_f_p_btDynamicsWorld_float__void swig_types[225]
#define SWIGTYPE_p_f_p_void__bool swig_types[226]
#define SWIGTYPE_p_f_p_void__void swig_types[227]
#define SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void swig_types[228]
#define SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool swig_types[229]
#define SWIGTYPE_p_f_r_btManifoldPoint_p_void_p_void__bool swig_types[230]
#define SWIGTYPE_p_f_size_t__p_void swig_types[231]
#define SWIGTYPE_p_f_size_t_int__p_void swig_types[232]
#define SWIGTYPE_p_float swig_types[233]
#define SWIGTYPE_p_int swig_types[234]
#define SWIGTYPE_p_p_btCollisionObject swig_types[235]
#define SWIGTYPE_p_p_btContactConstraint swig_types[236]
#define SWIGTYPE_p_p_btGeneric6DofConstraint swig_types[237]
#define SWIGTYPE_p_p_btHingeConstraint swig_types[238]
#define SWIGTYPE_p_p_btPersistentManifold swig_types[239]
#define SWIGTYPE_p_p_btPoint2PointConstraint swig_types[240]
#define SWIGTYPE_p_p_btRaycastVehicle swig_types[241]
#define SWIGTYPE_p_p_btRigidBody swig_types[242]
#define SWIGTYPE_p_p_btTypedConstraint swig_types[243]
#define SWIGTYPE_p_p_unsigned_char swig_types[244]
#define SWIGTYPE_p_short swig_types[245]
#define SWIGTYPE_p_unsigned_char swig_types[246]
#define SWIGTYPE_p_unsigned_int swig_types[247]
#define SWIGTYPE_p_unsigned_short swig_types[248]
#define SWIGTYPE_p_void swig_types[249]
static swig_type_info *swig_types[251];
static swig_module_info swig_module = {swig_types, 250, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "bullet"
#define SWIG_init      luaopen_bullet
#define SWIG_init_user luaopen_bullet_user

#define SWIG_LUACODE   luaopen_bullet_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "LinearMath/btScalar.h"
    

#include "LinearMath/btScalar.h"
    

#include "LinearMath/btMinMax.h"
    

#include "LinearMath/btSimdMinMax.h"
    

#include "LinearMath/btVector3.h"
    

#include "LinearMath/btQuaternion.h"
    

#include "LinearMath/btQuadWord.h"
    

#include "LinearMath/btAabbUtil2.h"
    

#include "LinearMath/btAlignedAllocator.h"
    

#include "LinearMath/btAlignedObjectArray.h"
    

#include "LinearMath/btMotionState.h"
    

#include "LinearMath/btDefaultMotionState.h"
    

#include "LinearMath/btGeometryUtil.h"
    

#include "LinearMath/btIDebugDraw.h"
    

SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include "LinearMath/btList.h"
    

#include "LinearMath/btMatrix3x3.h"
    

#include "LinearMath/btTransform.h"
    

#include "LinearMath/btPoint3.h"
    

#include "LinearMath/btQuickprof.h"
    

#include "LinearMath/btRandom.h"
    

#include "LinearMath/btStackAlloc.h"
    

#include "LinearMath/btTransform.h"
    

#include "LinearMath/btTransformUtil.h"
    

#include "BulletCollision/BroadphaseCollision/btBroadphaseInterface.h"
    

#include "BulletCollision/BroadphaseCollision/btBroadphaseProxy.h"
    

#include "BulletCollision/BroadphaseCollision/btOverlappingPairCache.h"
    

#include "BulletCollision/BroadphaseCollision/btAxisSweep3.h"
    

#include "BulletCollision/BroadphaseCollision/btCollisionAlgorithm.h"
    

#include "BulletCollision/BroadphaseCollision/btDispatcher.h"
    

#include "BulletCollision/BroadphaseCollision/btSimpleBroadphase.h"
    

#include "BulletCollision/CollisionShapes/btCollisionShape.h"
    

#include "BulletCollision/CollisionShapes/btConvexShape.h"
    

#include "BulletCollision/CollisionShapes/btPolyhedralConvexShape.h"
    

#include "BulletCollision/CollisionShapes/btCollisionMargin.h"
    

#include "BulletCollision/CollisionShapes/btBoxShape.h"
    

#include "BulletCollision/CollisionShapes/btTriangleCallback.h"
    

#include "BulletCollision/CollisionShapes/btStridingMeshInterface.h"
    

#include "BulletCollision/CollisionShapes/btTriangleMeshShape.h"
    

#include "BulletCollision/CollisionShapes/btOptimizedBvh.h"
    

#include "BulletCollision/CollisionShapes/btOptimizedBvh.h"
    

#include "BulletCollision/CollisionShapes/btBvhTriangleMeshShape.h"
    

#include "BulletCollision/CollisionShapes/btCollisionMargin.h"
    

#include "BulletCollision/CollisionShapes/btBoxShape.h"
    

#include "BulletCollision/CollisionShapes/btCapsuleShape.h"
    

#include "BulletCollision/CollisionShapes/btCompoundShape.h"
    

#include "BulletCollision/CollisionShapes/btCompoundShape.h"
    

#include "BulletCollision/CollisionShapes/btConcaveShape.h"
    

#include "BulletCollision/CollisionShapes/btConeShape.h"
    

#include "BulletCollision/CollisionShapes/btConvexHullShape.h"
    

#include "BulletCollision/CollisionShapes/btCylinderShape.h"
    

#include "BulletCollision/CollisionShapes/btEmptyShape.h"
    

#include "BulletCollision/CollisionShapes/btHeightfieldTerrainShape.h"
    

#include "BulletCollision/CollisionShapes/btMinkowskiSumShape.h"
    

#include "BulletCollision/CollisionShapes/btMultiSphereShape.h"
    

#include "BulletCollision/CollisionShapes/btSphereShape.h"
    

#include "BulletCollision/CollisionShapes/btTetrahedronShape.h"
    

#include "BulletCollision/CollisionShapes/btTriangleBuffer.h"
    

#include "BulletCollision/CollisionShapes/btTriangleCallback.h"
    

#include "BulletCollision/CollisionShapes/btTriangleIndexVertexArray.h"
    

#include "BulletCollision/CollisionShapes/btTriangleShape.h"
    

#include "BulletCollision/NarrowPhaseCollision/btConvexCast.h"
    

#include "BulletCollision/NarrowPhaseCollision/btContinuousConvexCollision.h"
    

#include "BulletCollision/NarrowPhaseCollision/btVoronoiSimplexSolver.h"
    

#include "BulletCollision/NarrowPhaseCollision/btSimplexSolverInterface.h"
    

#include "BulletCollision/NarrowPhaseCollision/btConvexPenetrationDepthSolver.h"
    

#include "BulletCollision/NarrowPhaseCollision/btDiscreteCollisionDetectorInterface.h"
    

#include "BulletCollision/NarrowPhaseCollision/btGjkConvexCast.h"
    

#include "BulletCollision/NarrowPhaseCollision/btGjkEpa.h"
    

#include "BulletCollision/NarrowPhaseCollision/btGjkEpaPenetrationDepthSolver.h"
    

#include "BulletCollision/NarrowPhaseCollision/btGjkPairDetector.h"
    

#include "BulletCollision/NarrowPhaseCollision/btManifoldPoint.h"
    

#include "BulletCollision/NarrowPhaseCollision/btMinkowskiPenetrationDepthSolver.h"
    

#include "BulletCollision/NarrowPhaseCollision/btPersistentManifold.h"
    

#include "BulletCollision/NarrowPhaseCollision/btPointCollector.h"
    

#include "BulletCollision/NarrowPhaseCollision/btRaycastCallback.h"
    

#include "BulletCollision/NarrowPhaseCollision/btSimplexSolverInterface.h"
    

#include "BulletCollision/NarrowPhaseCollision/btSimplexSolverInterface.h"
    

#include "BulletCollision/NarrowPhaseCollision/btSubSimplexConvexCast.h"
    

#include "BulletCollision/NarrowPhaseCollision/btVoronoiSimplexSolver.h"
    

#include "BulletCollision/CollisionDispatch/btCollisionCreateFunc.h"
    

#include "BulletCollision/CollisionDispatch/btCollisionDispatcher.h"
    

#include "BulletCollision/CollisionDispatch/btCollisionObject.h"
    

#include "BulletCollision/CollisionDispatch/btCollisionWorld.h"
    

#include "BulletCollision/CollisionDispatch/btCompoundCollisionAlgorithm.h"
    

#include "BulletCollision/CollisionDispatch/btConvexConcaveCollisionAlgorithm.h"
    

#include "BulletCollision/CollisionDispatch/btConvexConvexAlgorithm.h"
    

#include "BulletCollision/CollisionDispatch/btEmptyCollisionAlgorithm.h"
    

#include "BulletCollision/CollisionDispatch/btManifoldResult.h"
    

#include "BulletCollision/CollisionDispatch/btSimulationIslandManager.h"
    

#include "BulletCollision/CollisionDispatch/btSphereBoxCollisionAlgorithm.h"
    

#include "BulletCollision/CollisionDispatch/btSphereSphereCollisionAlgorithm.h"
    

#include "BulletCollision/CollisionDispatch/btSphereTriangleCollisionAlgorithm.h"
    

#include "BulletCollision/CollisionDispatch/btUnionFind.h"
    

#include "BulletCollision/CollisionDispatch/SphereTriangleDetector.h"
    

#include "BulletDynamics/ConstraintSolver/btConstraintSolver.h"
    

#include "BulletDynamics/ConstraintSolver/btContactConstraint.h"
    

#include "BulletDynamics/ConstraintSolver/btContactSolverInfo.h"
    

#include "BulletDynamics/ConstraintSolver/btGeneric6DofConstraint.h"
    

#include "BulletDynamics/ConstraintSolver/btHingeConstraint.h"
    

#include "BulletDynamics/ConstraintSolver/btJacobianEntry.h"
    

#include "BulletDynamics/ConstraintSolver/btPoint2PointConstraint.h"
    

#include "BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.h"
    

#include "BulletDynamics/ConstraintSolver/btSolve2LinearConstraint.h"
    

#include "BulletDynamics/ConstraintSolver/btSolverBody.h"
    

#include "BulletDynamics/ConstraintSolver/btSolverConstraint.h"
    

#include "BulletDynamics/ConstraintSolver/btTypedConstraint.h"
    

#include "BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h"
    

#include "BulletDynamics/Dynamics/btDynamicsWorld.h"
    

#include "BulletDynamics/Dynamics/btRigidBody.h"
    

#include "BulletDynamics/Dynamics/btSimpleDynamicsWorld.h"
    

#include "BulletDynamics/Vehicle/btRaycastVehicle.h"
    

#include "BulletDynamics/Vehicle/btVehicleRaycaster.h"
    

#include "BulletDynamics/Vehicle/btWheelInfo.h"
    
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_btGetVersion(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("btGetVersion",0,0)
  result = (int)btGetVersion();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSqrt(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar result;
  
  SWIG_check_num_args("btSqrt",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btSqrt",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (btScalar)btSqrt(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btFabs(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar result;
  
  SWIG_check_num_args("btFabs",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btFabs",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (btScalar)btFabs(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCos(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar result;
  
  SWIG_check_num_args("btCos",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btCos",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (btScalar)btCos(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSin(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar result;
  
  SWIG_check_num_args("btSin",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btSin",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (btScalar)btSin(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTan(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar result;
  
  SWIG_check_num_args("btTan",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btTan",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (btScalar)btTan(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAcos(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar result;
  
  SWIG_check_num_args("btAcos",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btAcos",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (btScalar)btAcos(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAsin(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar result;
  
  SWIG_check_num_args("btAsin",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btAsin",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (btScalar)btAsin(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAtan(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar result;
  
  SWIG_check_num_args("btAtan",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btAtan",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (btScalar)btAtan(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAtan2(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar result;
  
  SWIG_check_num_args("btAtan2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btAtan2",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btAtan2",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (btScalar)btAtan2(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btExp(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar result;
  
  SWIG_check_num_args("btExp",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btExp",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (btScalar)btExp(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btLog(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar result;
  
  SWIG_check_num_args("btLog",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btLog",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (btScalar)btLog(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPow(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar result;
  
  SWIG_check_num_args("btPow",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btPow",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPow",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (btScalar)btPow(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btFmod(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar result;
  
  SWIG_check_num_args("btFmod",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btFmod",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btFmod",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (btScalar)btFmod(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAtan2Fast(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar result;
  
  SWIG_check_num_args("btAtan2Fast",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btAtan2Fast",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btAtan2Fast",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (btScalar)btAtan2Fast(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btFuzzyZero(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  bool result;
  
  SWIG_check_num_args("btFuzzyZero",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btFuzzyZero",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (bool)btFuzzyZero(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btEqual(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  bool result;
  
  SWIG_check_num_args("btEqual",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btEqual",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btEqual",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (bool)btEqual(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGreaterEqual(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  bool result;
  
  SWIG_check_num_args("btGreaterEqual",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btGreaterEqual",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGreaterEqual",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (bool)btGreaterEqual(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIsNegative(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  int result;
  
  SWIG_check_num_args("btIsNegative",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btIsNegative",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (int)btIsNegative(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRadians(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar result;
  
  SWIG_check_num_args("btRadians",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btRadians",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (btScalar)btRadians(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDegrees(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar result;
  
  SWIG_check_num_args("btDegrees",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btDegrees",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (btScalar)btDegrees(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btFsel(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar result;
  
  SWIG_check_num_args("btFsel",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btFsel",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btFsel",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btFsel",3,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  result = (btScalar)btFsel(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMachineIsLittleEndian(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("btMachineIsLittleEndian",0,0)
  result = (bool)btMachineIsLittleEndian();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSelect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("btSelect",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btSelect",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSelect",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSelect",3,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)btSelect(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSelect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("btSelect",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btSelect",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSelect",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSelect",3,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)btSelect(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSelect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("btSelect",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btSelect",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSelect",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSelect",3,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)btSelect(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSelect(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btSelect__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btSelect__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btSelect__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSelect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSelect(unsigned int,unsigned int,unsigned int)\n"
    "    btSelect(unsigned int,int,int)\n"
    "    btSelect(unsigned int,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_btSwapEndian__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int result;
  
  SWIG_check_num_args("btSwapEndian",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btSwapEndian",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (unsigned int)btSwapEndian(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSwapEndian__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned short arg1 ;
  unsigned short result;
  
  SWIG_check_num_args("btSwapEndian",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btSwapEndian",1,"unsigned short");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned short)lua_tonumber(L, 1);
  result = (unsigned short)btSwapEndian(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSwapEndian__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  unsigned int result;
  
  SWIG_check_num_args("btSwapEndian",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btSwapEndian",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (unsigned int)btSwapEndian(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSwapEndian__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  short arg1 ;
  unsigned short result;
  
  SWIG_check_num_args("btSwapEndian",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btSwapEndian",1,"short");
  arg1 = (short)lua_tonumber(L, 1);
  result = (unsigned short)btSwapEndian(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSwapEndian(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_btSwapEndian__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_btSwapEndian__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_btSwapEndian__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_btSwapEndian__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSwapEndian'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSwapEndian(unsigned int)\n"
    "    btSwapEndian(unsigned short)\n"
    "    btSwapEndian(int)\n"
    "    btSwapEndian(short)\n");
  lua_error(L);return 0;
}


static int _wrap_btSwapEndianFloat(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  unsigned int result;
  
  SWIG_check_num_args("btSwapEndianFloat",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btSwapEndianFloat",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (unsigned int)btSwapEndianFloat(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUnswapEndianFloat(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float result;
  
  SWIG_check_num_args("btUnswapEndianFloat",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btUnswapEndianFloat",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (float)btUnswapEndianFloat(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSwapEndianDouble(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  SWIG_check_num_args("btSwapEndianDouble",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btSwapEndianDouble",1,"double");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSwapEndianDouble",2,"unsigned char *");
  arg1 = (double)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("btSwapEndianDouble",2,SWIGTYPE_p_unsigned_char);
  }
  
  btSwapEndianDouble(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUnswapEndianDouble(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char *arg1 = (unsigned char *) 0 ;
  double result;
  
  SWIG_check_num_args("btUnswapEndianDouble",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUnswapEndianDouble",1,"unsigned char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("btUnswapEndianDouble",1,SWIGTYPE_p_unsigned_char);
  }
  
  result = (double)btUnswapEndianDouble((unsigned char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btNormalizeAngle(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar result;
  
  SWIG_check_num_args("btNormalizeAngle",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btNormalizeAngle",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (btScalar)btNormalizeAngle(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTypedObject(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  btTypedObject *result = 0 ;
  
  SWIG_check_num_args("btTypedObject::btTypedObject",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btTypedObject::btTypedObject",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (btTypedObject *)new btTypedObject(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedObject_m_objectType_set(lua_State* L) {
  int SWIG_arg = 0;
  btTypedObject *arg1 = (btTypedObject *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTypedObject::m_objectType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedObject::m_objectType",1,"btTypedObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedObject::m_objectType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedObject,0))){
    SWIG_fail_ptr("btTypedObject_m_objectType_set",1,SWIGTYPE_p_btTypedObject);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_objectType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedObject_m_objectType_get(lua_State* L) {
  int SWIG_arg = 0;
  btTypedObject *arg1 = (btTypedObject *) 0 ;
  int result;
  
  SWIG_check_num_args("btTypedObject::m_objectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedObject::m_objectType",1,"btTypedObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedObject,0))){
    SWIG_fail_ptr("btTypedObject_m_objectType_get",1,SWIGTYPE_p_btTypedObject);
  }
  
  result = (int) ((arg1)->m_objectType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedObject_getObjectType(lua_State* L) {
  int SWIG_arg = 0;
  btTypedObject *arg1 = (btTypedObject *) 0 ;
  int result;
  
  SWIG_check_num_args("btTypedObject::getObjectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedObject::getObjectType",1,"btTypedObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedObject,0))){
    SWIG_fail_ptr("btTypedObject_getObjectType",1,SWIGTYPE_p_btTypedObject);
  }
  
  result = (int)((btTypedObject const *)arg1)->getObjectType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTypedObject(void *obj) {
btTypedObject *arg1 = (btTypedObject *) obj;
delete arg1;
}
static swig_lua_method swig_btTypedObject_methods[] = {
    {"getObjectType", _wrap_btTypedObject_getObjectType}, 
    {0,0}
};
static swig_lua_attribute swig_btTypedObject_attributes[] = {
    { "m_objectType", _wrap_btTypedObject_m_objectType_get, _wrap_btTypedObject_m_objectType_set},
    {0,0,0}
};
static swig_lua_attribute swig_btTypedObject_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTypedObject_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTypedObject_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTypedObject_bases[] = {0};
static const char *swig_btTypedObject_base_names[] = {0};
static swig_lua_class _wrap_class_btTypedObject = { "btTypedObject", &SWIGTYPE_p_btTypedObject,_wrap_new_btTypedObject, swig_delete_btTypedObject, swig_btTypedObject_methods, swig_btTypedObject_attributes, { "btTypedObject", swig_btTypedObject_cls_methods, swig_btTypedObject_cls_attributes, swig_btTypedObject_cls_constants }, swig_btTypedObject_bases, swig_btTypedObject_base_names };

static int _wrap_btAlignedAllocInternal(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  int arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btAlignedAllocInternal",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btAlignedAllocInternal",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btAlignedAllocInternal",2,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (void *)btAlignedAllocInternal(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAlignedFreeInternal(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  
  SWIG_check_num_args("btAlignedFreeInternal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAlignedFreeInternal",1,"void *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"btAlignedFreeInternal");
  btAlignedFreeInternal(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAlignedAllocSetCustom(lua_State* L) {
  int SWIG_arg = 0;
  btAllocFunc *arg1 = (btAllocFunc *) 0 ;
  btFreeFunc *arg2 = (btFreeFunc *) 0 ;
  
  SWIG_check_num_args("btAlignedAllocSetCustom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAlignedAllocSetCustom",1,"btAllocFunc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btAlignedAllocSetCustom",2,"btFreeFunc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_f_size_t__p_void,0))){
    SWIG_fail_ptr("btAlignedAllocSetCustom",1,SWIGTYPE_p_f_size_t__p_void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void__void,0))){
    SWIG_fail_ptr("btAlignedAllocSetCustom",2,SWIGTYPE_p_f_p_void__void);
  }
  
  btAlignedAllocSetCustom(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAlignedAllocSetCustomAligned(lua_State* L) {
  int SWIG_arg = 0;
  btAlignedAllocFunc *arg1 = (btAlignedAllocFunc *) 0 ;
  btAlignedFreeFunc *arg2 = (btAlignedFreeFunc *) 0 ;
  
  SWIG_check_num_args("btAlignedAllocSetCustomAligned",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAlignedAllocSetCustomAligned",1,"btAlignedAllocFunc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btAlignedAllocSetCustomAligned",2,"btAlignedFreeFunc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_f_size_t_int__p_void,0))){
    SWIG_fail_ptr("btAlignedAllocSetCustomAligned",1,SWIGTYPE_p_f_size_t_int__p_void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void__void,0))){
    SWIG_fail_ptr("btAlignedAllocSetCustomAligned",2,SWIGTYPE_p_f_p_void__void);
  }
  
  btAlignedAllocSetCustomAligned(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_m_floats_set(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *arg2 ;
  
  SWIG_check_num_args("btVector3::m_floats",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::m_floats",1,"btVector3 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btVector3::m_floats",2,"btScalar [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_m_floats_set",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btVector3_m_floats_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    btScalar *b = (btScalar *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((btScalar *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_m_floats_get(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btVector3::m_floats",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::m_floats",1,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_m_floats_get",1,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar *)(btScalar *) ((arg1)->m_floats);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btVector3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btVector3::btVector3",0,0)
  result = (btVector3 *)new btVector3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btVector3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btVector3::btVector3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btVector3::btVector3",1,"btScalar const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btVector3::btVector3",2,"btScalar const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btVector3::btVector3",3,"btScalar const &");
  temp1=(btScalar)lua_tonumber(L,1); arg1=&temp1;
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  result = (btVector3 *)new btVector3((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btVector3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btVector3__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_btVector3__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btVector3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btVector3::btVector3()\n"
    "    btVector3::btVector3(btScalar const &,btScalar const &,btScalar const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btVector3_dot(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btVector3::dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::dot",1,"btVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::dot",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_dot",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_dot",2,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)((btVector3 const *)arg1)->dot((btVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_length2(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btVector3::length2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::length2",1,"btVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_length2",1,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)((btVector3 const *)arg1)->length2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_length(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btVector3::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::length",1,"btVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_length",1,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)((btVector3 const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_distance2(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btVector3::distance2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::distance2",1,"btVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::distance2",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_distance2",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_distance2",2,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)((btVector3 const *)arg1)->distance2((btVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_distance(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btVector3::distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::distance",1,"btVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::distance",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_distance",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_distance",2,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)((btVector3 const *)arg1)->distance((btVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_safeNormalize(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btVector3::safeNormalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::safeNormalize",1,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_safeNormalize",1,SWIGTYPE_p_btVector3);
  }
  
  result = (btVector3 *) &(arg1)->safeNormalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_normalize(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btVector3::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::normalize",1,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_normalize",1,SWIGTYPE_p_btVector3);
  }
  
  result = (btVector3 *) &(arg1)->normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_normalized(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btVector3::normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::normalized",1,"btVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_normalized",1,SWIGTYPE_p_btVector3);
  }
  
  result = ((btVector3 const *)arg1)->normalized();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_rotate(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btVector3 result;
  
  SWIG_check_num_args("btVector3::rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::rotate",1,"btVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::rotate",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btVector3::rotate",3,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_rotate",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_rotate",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (btScalar const)lua_tonumber(L, 3);
  result = ((btVector3 const *)arg1)->rotate((btVector3 const &)*arg2,arg3);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_angle(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btVector3::angle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::angle",1,"btVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::angle",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_angle",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_angle",2,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)((btVector3 const *)arg1)->angle((btVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_absolute(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btVector3::absolute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::absolute",1,"btVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_absolute",1,SWIGTYPE_p_btVector3);
  }
  
  result = ((btVector3 const *)arg1)->absolute();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_cross(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btVector3::cross",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::cross",1,"btVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::cross",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_cross",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_cross",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btVector3 const *)arg1)->cross((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_triple(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btVector3::triple",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::triple",1,"btVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::triple",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btVector3::triple",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_triple",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_triple",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_triple",3,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)((btVector3 const *)arg1)->triple((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_minAxis(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  SWIG_check_num_args("btVector3::minAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::minAxis",1,"btVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_minAxis",1,SWIGTYPE_p_btVector3);
  }
  
  result = (int)((btVector3 const *)arg1)->minAxis();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_maxAxis(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  SWIG_check_num_args("btVector3::maxAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::maxAxis",1,"btVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_maxAxis",1,SWIGTYPE_p_btVector3);
  }
  
  result = (int)((btVector3 const *)arg1)->maxAxis();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_furthestAxis(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  SWIG_check_num_args("btVector3::furthestAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::furthestAxis",1,"btVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_furthestAxis",1,SWIGTYPE_p_btVector3);
  }
  
  result = (int)((btVector3 const *)arg1)->furthestAxis();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_closestAxis(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  SWIG_check_num_args("btVector3::closestAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::closestAxis",1,"btVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_closestAxis",1,SWIGTYPE_p_btVector3);
  }
  
  result = (int)((btVector3 const *)arg1)->closestAxis();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_setInterpolate3(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  SWIG_check_num_args("btVector3::setInterpolate3",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::setInterpolate3",1,"btVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::setInterpolate3",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btVector3::setInterpolate3",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btVector3::setInterpolate3",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_setInterpolate3",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_setInterpolate3",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_setInterpolate3",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  (arg1)->setInterpolate3((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_lerp(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp3 ;
  btVector3 result;
  
  SWIG_check_num_args("btVector3::lerp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::lerp",1,"btVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::lerp",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btVector3::lerp",3,"btScalar const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_lerp",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_lerp",2,SWIGTYPE_p_btVector3);
  }
  
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  result = ((btVector3 const *)arg1)->lerp((btVector3 const &)*arg2,(btScalar const &)*arg3);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_getX(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btVector3::getX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::getX",1,"btVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_getX",1,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar *) &((btVector3 const *)arg1)->getX();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_getY(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btVector3::getY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::getY",1,"btVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_getY",1,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar *) &((btVector3 const *)arg1)->getY();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_getZ(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btVector3::getZ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::getZ",1,"btVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_getZ",1,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar *) &((btVector3 const *)arg1)->getZ();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_setX(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btVector3::setX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::setX",1,"btVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btVector3::setX",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_setX",1,SWIGTYPE_p_btVector3);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_setY(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btVector3::setY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::setY",1,"btVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btVector3::setY",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_setY",1,SWIGTYPE_p_btVector3);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_setZ(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btVector3::setZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::setZ",1,"btVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btVector3::setZ",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_setZ",1,SWIGTYPE_p_btVector3);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setZ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_setW(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btVector3::setW",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::setW",1,"btVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btVector3::setW",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_setW",1,SWIGTYPE_p_btVector3);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setW(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_x(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btVector3::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::x",1,"btVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_x",1,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar *) &((btVector3 const *)arg1)->x();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_y(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btVector3::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::y",1,"btVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_y",1,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar *) &((btVector3 const *)arg1)->y();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_z(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btVector3::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::z",1,"btVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_z",1,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar *) &((btVector3 const *)arg1)->z();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_w(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btVector3::w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::w",1,"btVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_w",1,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar *) &((btVector3 const *)arg1)->w();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3___eq(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("btVector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::operator ==",1,"btVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::operator ==",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3___eq",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3___eq",2,SWIGTYPE_p_btVector3);
  }
  
  result = (bool)((btVector3 const *)arg1)->operator ==((btVector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_setMax(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btVector3::setMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::setMax",1,"btVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::setMax",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_setMax",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_setMax",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setMax((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_setMin(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btVector3::setMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::setMin",1,"btVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::setMin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_setMin",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_setMin",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setMin((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_setValue(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  
  SWIG_check_num_args("btVector3::setValue",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::setValue",1,"btVector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btVector3::setValue",2,"btScalar const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btVector3::setValue",3,"btScalar const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btVector3::setValue",4,"btScalar const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_setValue",1,SWIGTYPE_p_btVector3);
  }
  
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  temp4=(btScalar)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_getSkewSymmetricMatrix(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  btVector3 *arg4 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btVector3::getSkewSymmetricMatrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::getSkewSymmetricMatrix",1,"btVector3 const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btVector3::getSkewSymmetricMatrix",2,"btVector3 *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btVector3::getSkewSymmetricMatrix",3,"btVector3 *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btVector3::getSkewSymmetricMatrix",4,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_getSkewSymmetricMatrix",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_getSkewSymmetricMatrix",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_getSkewSymmetricMatrix",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_getSkewSymmetricMatrix",4,SWIGTYPE_p_btVector3);
  }
  
  ((btVector3 const *)arg1)->getSkewSymmetricMatrix(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_setZero(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btVector3::setZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::setZero",1,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_setZero",1,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setZero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_isZero(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("btVector3::isZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::isZero",1,"btVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_isZero",1,SWIGTYPE_p_btVector3);
  }
  
  result = (bool)((btVector3 const *)arg1)->isZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_fuzzyZero(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("btVector3::fuzzyZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::fuzzyZero",1,"btVector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_fuzzyZero",1,SWIGTYPE_p_btVector3);
  }
  
  result = (bool)((btVector3 const *)arg1)->fuzzyZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  SWIG_check_num_args("btVector3::serialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::serialize",1,"btVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::serialize",2,"btVector3FloatData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_serialize",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btVector3_serialize",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  ((btVector3 const *)arg1)->serialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_deSerialize(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  SWIG_check_num_args("btVector3::deSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::deSerialize",1,"btVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::deSerialize",2,"btVector3FloatData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_deSerialize",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btVector3_deSerialize",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  (arg1)->deSerialize((btVector3FloatData const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_serializeFloat(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  SWIG_check_num_args("btVector3::serializeFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::serializeFloat",1,"btVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::serializeFloat",2,"btVector3FloatData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_serializeFloat",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btVector3_serializeFloat",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  ((btVector3 const *)arg1)->serializeFloat(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_deSerializeFloat(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  SWIG_check_num_args("btVector3::deSerializeFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::deSerializeFloat",1,"btVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::deSerializeFloat",2,"btVector3FloatData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_deSerializeFloat",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btVector3_deSerializeFloat",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  (arg1)->deSerializeFloat((btVector3FloatData const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_serializeDouble(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3DoubleData *arg2 = 0 ;
  
  SWIG_check_num_args("btVector3::serializeDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::serializeDouble",1,"btVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::serializeDouble",2,"btVector3DoubleData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_serializeDouble",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btVector3_serializeDouble",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  ((btVector3 const *)arg1)->serializeDouble(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_deSerializeDouble(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3DoubleData *arg2 = 0 ;
  
  SWIG_check_num_args("btVector3::deSerializeDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::deSerializeDouble",1,"btVector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::deSerializeDouble",2,"btVector3DoubleData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_deSerializeDouble",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btVector3_deSerializeDouble",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  (arg1)->deSerializeDouble((btVector3DoubleData const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_maxDot(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  long arg3 ;
  btScalar *arg4 = 0 ;
  long result;
  
  SWIG_check_num_args("btVector3::maxDot",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::maxDot",1,"btVector3 const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btVector3::maxDot",2,"btVector3 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btVector3::maxDot",3,"long");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btVector3::maxDot",4,"btScalar &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_maxDot",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_maxDot",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (long)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btVector3_maxDot",4,SWIGTYPE_p_float);
  }
  
  result = (long)((btVector3 const *)arg1)->maxDot((btVector3 const *)arg2,arg3,*arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_minDot(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  long arg3 ;
  btScalar *arg4 = 0 ;
  long result;
  
  SWIG_check_num_args("btVector3::minDot",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::minDot",1,"btVector3 const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btVector3::minDot",2,"btVector3 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btVector3::minDot",3,"long");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btVector3::minDot",4,"btScalar &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_minDot",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_minDot",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (long)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btVector3_minDot",4,SWIGTYPE_p_float);
  }
  
  result = (long)((btVector3 const *)arg1)->minDot((btVector3 const *)arg2,arg3,*arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3_dot3(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btVector3::dot3",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3::dot3",1,"btVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVector3::dot3",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btVector3::dot3",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btVector3::dot3",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_dot3",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_dot3",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_dot3",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVector3_dot3",4,SWIGTYPE_p_btVector3);
  }
  
  result = ((btVector3 const *)arg1)->dot3((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btVector3(void *obj) {
btVector3 *arg1 = (btVector3 *) obj;
delete arg1;
}
static swig_lua_method swig_btVector3_methods[] = {
    {"dot", _wrap_btVector3_dot}, 
    {"length2", _wrap_btVector3_length2}, 
    {"length", _wrap_btVector3_length}, 
    {"distance2", _wrap_btVector3_distance2}, 
    {"distance", _wrap_btVector3_distance}, 
    {"safeNormalize", _wrap_btVector3_safeNormalize}, 
    {"normalize", _wrap_btVector3_normalize}, 
    {"normalized", _wrap_btVector3_normalized}, 
    {"rotate", _wrap_btVector3_rotate}, 
    {"angle", _wrap_btVector3_angle}, 
    {"absolute", _wrap_btVector3_absolute}, 
    {"cross", _wrap_btVector3_cross}, 
    {"triple", _wrap_btVector3_triple}, 
    {"minAxis", _wrap_btVector3_minAxis}, 
    {"maxAxis", _wrap_btVector3_maxAxis}, 
    {"furthestAxis", _wrap_btVector3_furthestAxis}, 
    {"closestAxis", _wrap_btVector3_closestAxis}, 
    {"setInterpolate3", _wrap_btVector3_setInterpolate3}, 
    {"lerp", _wrap_btVector3_lerp}, 
    {"getX", _wrap_btVector3_getX}, 
    {"getY", _wrap_btVector3_getY}, 
    {"getZ", _wrap_btVector3_getZ}, 
    {"setX", _wrap_btVector3_setX}, 
    {"setY", _wrap_btVector3_setY}, 
    {"setZ", _wrap_btVector3_setZ}, 
    {"setW", _wrap_btVector3_setW}, 
    {"x", _wrap_btVector3_x}, 
    {"y", _wrap_btVector3_y}, 
    {"z", _wrap_btVector3_z}, 
    {"w", _wrap_btVector3_w}, 
    {"__eq", _wrap_btVector3___eq}, 
    {"setMax", _wrap_btVector3_setMax}, 
    {"setMin", _wrap_btVector3_setMin}, 
    {"setValue", _wrap_btVector3_setValue}, 
    {"getSkewSymmetricMatrix", _wrap_btVector3_getSkewSymmetricMatrix}, 
    {"setZero", _wrap_btVector3_setZero}, 
    {"isZero", _wrap_btVector3_isZero}, 
    {"fuzzyZero", _wrap_btVector3_fuzzyZero}, 
    {"serialize", _wrap_btVector3_serialize}, 
    {"deSerialize", _wrap_btVector3_deSerialize}, 
    {"serializeFloat", _wrap_btVector3_serializeFloat}, 
    {"deSerializeFloat", _wrap_btVector3_deSerializeFloat}, 
    {"serializeDouble", _wrap_btVector3_serializeDouble}, 
    {"deSerializeDouble", _wrap_btVector3_deSerializeDouble}, 
    {"maxDot", _wrap_btVector3_maxDot}, 
    {"minDot", _wrap_btVector3_minDot}, 
    {"dot3", _wrap_btVector3_dot3}, 
    {0,0}
};
static swig_lua_attribute swig_btVector3_attributes[] = {
    { "m_floats", _wrap_btVector3_m_floats_get, _wrap_btVector3_m_floats_set},
    {0,0,0}
};
static swig_lua_attribute swig_btVector3_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btVector3_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btVector3_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btVector3_bases[] = {0};
static const char *swig_btVector3_base_names[] = {0};
static swig_lua_class _wrap_class_btVector3 = { "btVector3", &SWIGTYPE_p_btVector3,_wrap_new_btVector3, swig_delete_btVector3, swig_btVector3_methods, swig_btVector3_attributes, { "btVector3", swig_btVector3_cls_methods, swig_btVector3_cls_attributes, swig_btVector3_cls_constants }, swig_btVector3_bases, swig_btVector3_base_names };

static int _wrap_btDot(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btDot",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btDot",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btDot",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btDot",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btDot",2,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)btDot((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDistance2(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btDistance2",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btDistance2",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btDistance2",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btDistance2",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btDistance2",2,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)btDistance2((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDistance(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btDistance",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btDistance",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btDistance",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btDistance",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btDistance",2,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)btDistance((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btAngle",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btAngle",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btAngle",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btAngle",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btAngle",2,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)btAngle((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCross(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btCross",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btCross",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCross",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCross",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCross",2,SWIGTYPE_p_btVector3);
  }
  
  result = btCross((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriple(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTriple",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btTriple",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTriple",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriple",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriple",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriple",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriple",3,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)btTriple((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lerp(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp3 ;
  btVector3 result;
  
  SWIG_check_num_args("lerp",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("lerp",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("lerp",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("lerp",3,"btScalar const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("lerp",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("lerp",2,SWIGTYPE_p_btVector3);
  }
  
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  result = lerp((btVector3 const &)*arg1,(btVector3 const &)*arg2,(float const &)*arg3);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btVector4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector4 *result = 0 ;
  
  SWIG_check_num_args("btVector4::btVector4",0,0)
  result = (btVector4 *)new btVector4();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btVector4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btVector4 *result = 0 ;
  
  SWIG_check_num_args("btVector4::btVector4",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btVector4::btVector4",1,"btScalar const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btVector4::btVector4",2,"btScalar const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btVector4::btVector4",3,"btScalar const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btVector4::btVector4",4,"btScalar const &");
  temp1=(btScalar)lua_tonumber(L,1); arg1=&temp1;
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  temp4=(btScalar)lua_tonumber(L,4); arg4=&temp4;
  result = (btVector4 *)new btVector4((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btVector4(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btVector4__SWIG_0(L);
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_btVector4__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btVector4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btVector4::btVector4()\n"
    "    btVector4::btVector4(btScalar const &,btScalar const &,btScalar const &,btScalar const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btVector4_absolute4(lua_State* L) {
  int SWIG_arg = 0;
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector4 result;
  
  SWIG_check_num_args("btVector4::absolute4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector4::absolute4",1,"btVector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector4,0))){
    SWIG_fail_ptr("btVector4_absolute4",1,SWIGTYPE_p_btVector4);
  }
  
  result = ((btVector4 const *)arg1)->absolute4();
  {
    btVector4 * resultptr = new btVector4((const btVector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector4_getW(lua_State* L) {
  int SWIG_arg = 0;
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btVector4::getW",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector4::getW",1,"btVector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector4,0))){
    SWIG_fail_ptr("btVector4_getW",1,SWIGTYPE_p_btVector4);
  }
  
  result = (btScalar)((btVector4 const *)arg1)->getW();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector4_maxAxis4(lua_State* L) {
  int SWIG_arg = 0;
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  SWIG_check_num_args("btVector4::maxAxis4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector4::maxAxis4",1,"btVector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector4,0))){
    SWIG_fail_ptr("btVector4_maxAxis4",1,SWIGTYPE_p_btVector4);
  }
  
  result = (int)((btVector4 const *)arg1)->maxAxis4();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector4_minAxis4(lua_State* L) {
  int SWIG_arg = 0;
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  SWIG_check_num_args("btVector4::minAxis4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector4::minAxis4",1,"btVector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector4,0))){
    SWIG_fail_ptr("btVector4_minAxis4",1,SWIGTYPE_p_btVector4);
  }
  
  result = (int)((btVector4 const *)arg1)->minAxis4();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector4_closestAxis4(lua_State* L) {
  int SWIG_arg = 0;
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  SWIG_check_num_args("btVector4::closestAxis4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector4::closestAxis4",1,"btVector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector4,0))){
    SWIG_fail_ptr("btVector4_closestAxis4",1,SWIGTYPE_p_btVector4);
  }
  
  result = (int)((btVector4 const *)arg1)->closestAxis4();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector4_setValue(lua_State* L) {
  int SWIG_arg = 0;
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btScalar temp5 ;
  
  SWIG_check_num_args("btVector4::setValue",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector4::setValue",1,"btVector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btVector4::setValue",2,"btScalar const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btVector4::setValue",3,"btScalar const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btVector4::setValue",4,"btScalar const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btVector4::setValue",5,"btScalar const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector4,0))){
    SWIG_fail_ptr("btVector4_setValue",1,SWIGTYPE_p_btVector4);
  }
  
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  temp4=(btScalar)lua_tonumber(L,4); arg4=&temp4;
  temp5=(btScalar)lua_tonumber(L,5); arg5=&temp5;
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btVector4(void *obj) {
btVector4 *arg1 = (btVector4 *) obj;
delete arg1;
}
static swig_lua_method swig_btVector4_methods[] = {
    {"absolute4", _wrap_btVector4_absolute4}, 
    {"getW", _wrap_btVector4_getW}, 
    {"maxAxis4", _wrap_btVector4_maxAxis4}, 
    {"minAxis4", _wrap_btVector4_minAxis4}, 
    {"closestAxis4", _wrap_btVector4_closestAxis4}, 
    {"setValue", _wrap_btVector4_setValue}, 
    {0,0}
};
static swig_lua_attribute swig_btVector4_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btVector4_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btVector4_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btVector4_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btVector4_bases[] = {0,0};
static const char *swig_btVector4_base_names[] = {"btVector3 *",0};
static swig_lua_class _wrap_class_btVector4 = { "btVector4", &SWIGTYPE_p_btVector4,_wrap_new_btVector4, swig_delete_btVector4, swig_btVector4_methods, swig_btVector4_attributes, { "btVector4", swig_btVector4_cls_methods, swig_btVector4_cls_attributes, swig_btVector4_cls_constants }, swig_btVector4_bases, swig_btVector4_base_names };

static int _wrap_btSwapScalarEndian(lua_State* L) {
  int SWIG_arg = 0;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar temp1 ;
  
  SWIG_check_num_args("btSwapScalarEndian",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btSwapScalarEndian",1,"btScalar const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSwapScalarEndian",2,"btScalar &");
  temp1=(btScalar)lua_tonumber(L,1); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btSwapScalarEndian",2,SWIGTYPE_p_float);
  }
  
  btSwapScalarEndian((float const &)*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSwapVector3Endian(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btSwapVector3Endian",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btSwapVector3Endian",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSwapVector3Endian",2,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSwapVector3Endian",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSwapVector3Endian",2,SWIGTYPE_p_btVector3);
  }
  
  btSwapVector3Endian((btVector3 const &)*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUnSwapVector3Endian(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  
  SWIG_check_num_args("btUnSwapVector3Endian",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btUnSwapVector3Endian",1,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btUnSwapVector3Endian",1,SWIGTYPE_p_btVector3);
  }
  
  btUnSwapVector3Endian(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3FloatData_m_floats_set(lua_State* L) {
  int SWIG_arg = 0;
  btVector3FloatData *arg1 = (btVector3FloatData *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("btVector3FloatData::m_floats",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3FloatData::m_floats",1,"btVector3FloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btVector3FloatData::m_floats",2,"float [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btVector3FloatData_m_floats_set",1,SWIGTYPE_p_btVector3FloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btVector3FloatData_m_floats_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3FloatData_m_floats_get(lua_State* L) {
  int SWIG_arg = 0;
  btVector3FloatData *arg1 = (btVector3FloatData *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("btVector3FloatData::m_floats",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3FloatData::m_floats",1,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btVector3FloatData_m_floats_get",1,SWIGTYPE_p_btVector3FloatData);
  }
  
  result = (float *)(float *) ((arg1)->m_floats);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btVector3FloatData(lua_State* L) {
  int SWIG_arg = 0;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btVector3FloatData::btVector3FloatData",0,0)
  result = (btVector3FloatData *)new btVector3FloatData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btVector3FloatData(void *obj) {
btVector3FloatData *arg1 = (btVector3FloatData *) obj;
delete arg1;
}
static swig_lua_method swig_btVector3FloatData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btVector3FloatData_attributes[] = {
    { "m_floats", _wrap_btVector3FloatData_m_floats_get, _wrap_btVector3FloatData_m_floats_set},
    {0,0,0}
};
static swig_lua_attribute swig_btVector3FloatData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btVector3FloatData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btVector3FloatData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btVector3FloatData_bases[] = {0};
static const char *swig_btVector3FloatData_base_names[] = {0};
static swig_lua_class _wrap_class_btVector3FloatData = { "btVector3FloatData", &SWIGTYPE_p_btVector3FloatData,_wrap_new_btVector3FloatData, swig_delete_btVector3FloatData, swig_btVector3FloatData_methods, swig_btVector3FloatData_attributes, { "btVector3FloatData", swig_btVector3FloatData_cls_methods, swig_btVector3FloatData_cls_attributes, swig_btVector3FloatData_cls_constants }, swig_btVector3FloatData_bases, swig_btVector3FloatData_base_names };

static int _wrap_btVector3DoubleData_m_floats_set(lua_State* L) {
  int SWIG_arg = 0;
  btVector3DoubleData *arg1 = (btVector3DoubleData *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("btVector3DoubleData::m_floats",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3DoubleData::m_floats",1,"btVector3DoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btVector3DoubleData::m_floats",2,"double [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btVector3DoubleData_m_floats_set",1,SWIGTYPE_p_btVector3DoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("btVector3DoubleData_m_floats_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVector3DoubleData_m_floats_get(lua_State* L) {
  int SWIG_arg = 0;
  btVector3DoubleData *arg1 = (btVector3DoubleData *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("btVector3DoubleData::m_floats",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVector3DoubleData::m_floats",1,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btVector3DoubleData_m_floats_get",1,SWIGTYPE_p_btVector3DoubleData);
  }
  
  result = (double *)(double *) ((arg1)->m_floats);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btVector3DoubleData(lua_State* L) {
  int SWIG_arg = 0;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btVector3DoubleData::btVector3DoubleData",0,0)
  result = (btVector3DoubleData *)new btVector3DoubleData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btVector3DoubleData(void *obj) {
btVector3DoubleData *arg1 = (btVector3DoubleData *) obj;
delete arg1;
}
static swig_lua_method swig_btVector3DoubleData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btVector3DoubleData_attributes[] = {
    { "m_floats", _wrap_btVector3DoubleData_m_floats_get, _wrap_btVector3DoubleData_m_floats_set},
    {0,0,0}
};
static swig_lua_attribute swig_btVector3DoubleData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btVector3DoubleData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btVector3DoubleData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btVector3DoubleData_bases[] = {0};
static const char *swig_btVector3DoubleData_base_names[] = {0};
static swig_lua_class _wrap_class_btVector3DoubleData = { "btVector3DoubleData", &SWIGTYPE_p_btVector3DoubleData,_wrap_new_btVector3DoubleData, swig_delete_btVector3DoubleData, swig_btVector3DoubleData_methods, swig_btVector3DoubleData_attributes, { "btVector3DoubleData", swig_btVector3DoubleData_cls_methods, swig_btVector3DoubleData_cls_attributes, swig_btVector3DoubleData_cls_constants }, swig_btVector3DoubleData_bases, swig_btVector3DoubleData_base_names };

static int _wrap_btQuadWord_getX(lua_State* L) {
  int SWIG_arg = 0;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btQuadWord::getX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuadWord::getX",1,"btQuadWord const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord_getX",1,SWIGTYPE_p_btQuadWord);
  }
  
  result = (btScalar *) &((btQuadWord const *)arg1)->getX();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuadWord_getY(lua_State* L) {
  int SWIG_arg = 0;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btQuadWord::getY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuadWord::getY",1,"btQuadWord const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord_getY",1,SWIGTYPE_p_btQuadWord);
  }
  
  result = (btScalar *) &((btQuadWord const *)arg1)->getY();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuadWord_getZ(lua_State* L) {
  int SWIG_arg = 0;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btQuadWord::getZ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuadWord::getZ",1,"btQuadWord const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord_getZ",1,SWIGTYPE_p_btQuadWord);
  }
  
  result = (btScalar *) &((btQuadWord const *)arg1)->getZ();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuadWord_setX(lua_State* L) {
  int SWIG_arg = 0;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btQuadWord::setX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuadWord::setX",1,"btQuadWord *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuadWord::setX",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord_setX",1,SWIGTYPE_p_btQuadWord);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuadWord_setY(lua_State* L) {
  int SWIG_arg = 0;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btQuadWord::setY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuadWord::setY",1,"btQuadWord *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuadWord::setY",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord_setY",1,SWIGTYPE_p_btQuadWord);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuadWord_setZ(lua_State* L) {
  int SWIG_arg = 0;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btQuadWord::setZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuadWord::setZ",1,"btQuadWord *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuadWord::setZ",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord_setZ",1,SWIGTYPE_p_btQuadWord);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setZ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuadWord_setW(lua_State* L) {
  int SWIG_arg = 0;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btQuadWord::setW",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuadWord::setW",1,"btQuadWord *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuadWord::setW",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord_setW",1,SWIGTYPE_p_btQuadWord);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setW(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuadWord_x(lua_State* L) {
  int SWIG_arg = 0;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btQuadWord::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuadWord::x",1,"btQuadWord const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord_x",1,SWIGTYPE_p_btQuadWord);
  }
  
  result = (btScalar *) &((btQuadWord const *)arg1)->x();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuadWord_y(lua_State* L) {
  int SWIG_arg = 0;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btQuadWord::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuadWord::y",1,"btQuadWord const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord_y",1,SWIGTYPE_p_btQuadWord);
  }
  
  result = (btScalar *) &((btQuadWord const *)arg1)->y();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuadWord_z(lua_State* L) {
  int SWIG_arg = 0;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btQuadWord::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuadWord::z",1,"btQuadWord const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord_z",1,SWIGTYPE_p_btQuadWord);
  }
  
  result = (btScalar *) &((btQuadWord const *)arg1)->z();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuadWord_w(lua_State* L) {
  int SWIG_arg = 0;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btQuadWord::w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuadWord::w",1,"btQuadWord const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord_w",1,SWIGTYPE_p_btQuadWord);
  }
  
  result = (btScalar *) &((btQuadWord const *)arg1)->w();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuadWord___eq(lua_State* L) {
  int SWIG_arg = 0;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btQuadWord *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("btQuadWord::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuadWord::operator ==",1,"btQuadWord const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btQuadWord::operator ==",2,"btQuadWord const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord___eq",1,SWIGTYPE_p_btQuadWord);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord___eq",2,SWIGTYPE_p_btQuadWord);
  }
  
  result = (bool)((btQuadWord const *)arg1)->operator ==((btQuadWord const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuadWord_setValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  
  SWIG_check_num_args("btQuadWord::setValue",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuadWord::setValue",1,"btQuadWord *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuadWord::setValue",2,"btScalar const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btQuadWord::setValue",3,"btScalar const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btQuadWord::setValue",4,"btScalar const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord_setValue",1,SWIGTYPE_p_btQuadWord);
  }
  
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  temp4=(btScalar)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuadWord_setValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btScalar temp5 ;
  
  SWIG_check_num_args("btQuadWord::setValue",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuadWord::setValue",1,"btQuadWord *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuadWord::setValue",2,"btScalar const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btQuadWord::setValue",3,"btScalar const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btQuadWord::setValue",4,"btScalar const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btQuadWord::setValue",5,"btScalar const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord_setValue",1,SWIGTYPE_p_btQuadWord);
  }
  
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  temp4=(btScalar)lua_tonumber(L,4); arg4=&temp4;
  temp5=(btScalar)lua_tonumber(L,5); arg5=&temp5;
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuadWord_setValue(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btQuadWord, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btQuadWord_setValue__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btQuadWord, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_btQuadWord_setValue__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btQuadWord_setValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btQuadWord::setValue(btScalar const &,btScalar const &,btScalar const &)\n"
    "    btQuadWord::setValue(btScalar const &,btScalar const &,btScalar const &,btScalar const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_btQuadWord__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btQuadWord *result = 0 ;
  
  SWIG_check_num_args("btQuadWord::btQuadWord",0,0)
  result = (btQuadWord *)new btQuadWord();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuadWord,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btQuadWord__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btQuadWord *result = 0 ;
  
  SWIG_check_num_args("btQuadWord::btQuadWord",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btQuadWord::btQuadWord",1,"btScalar const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuadWord::btQuadWord",2,"btScalar const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btQuadWord::btQuadWord",3,"btScalar const &");
  temp1=(btScalar)lua_tonumber(L,1); arg1=&temp1;
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  result = (btQuadWord *)new btQuadWord((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuadWord,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btQuadWord__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btQuadWord *result = 0 ;
  
  SWIG_check_num_args("btQuadWord::btQuadWord",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btQuadWord::btQuadWord",1,"btScalar const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuadWord::btQuadWord",2,"btScalar const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btQuadWord::btQuadWord",3,"btScalar const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btQuadWord::btQuadWord",4,"btScalar const &");
  temp1=(btScalar)lua_tonumber(L,1); arg1=&temp1;
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  temp4=(btScalar)lua_tonumber(L,4); arg4=&temp4;
  result = (btQuadWord *)new btQuadWord((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuadWord,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btQuadWord(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btQuadWord__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_btQuadWord__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_btQuadWord__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btQuadWord'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btQuadWord::btQuadWord()\n"
    "    btQuadWord::btQuadWord(btScalar const &,btScalar const &,btScalar const &)\n"
    "    btQuadWord::btQuadWord(btScalar const &,btScalar const &,btScalar const &,btScalar const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btQuadWord_setMax(lua_State* L) {
  int SWIG_arg = 0;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btQuadWord *arg2 = 0 ;
  
  SWIG_check_num_args("btQuadWord::setMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuadWord::setMax",1,"btQuadWord *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btQuadWord::setMax",2,"btQuadWord const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord_setMax",1,SWIGTYPE_p_btQuadWord);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord_setMax",2,SWIGTYPE_p_btQuadWord);
  }
  
  (arg1)->setMax((btQuadWord const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuadWord_setMin(lua_State* L) {
  int SWIG_arg = 0;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btQuadWord *arg2 = 0 ;
  
  SWIG_check_num_args("btQuadWord::setMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuadWord::setMin",1,"btQuadWord *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btQuadWord::setMin",2,"btQuadWord const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord_setMin",1,SWIGTYPE_p_btQuadWord);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuadWord,0))){
    SWIG_fail_ptr("btQuadWord_setMin",2,SWIGTYPE_p_btQuadWord);
  }
  
  (arg1)->setMin((btQuadWord const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btQuadWord(void *obj) {
btQuadWord *arg1 = (btQuadWord *) obj;
delete arg1;
}
static swig_lua_method swig_btQuadWord_methods[] = {
    {"getX", _wrap_btQuadWord_getX}, 
    {"getY", _wrap_btQuadWord_getY}, 
    {"getZ", _wrap_btQuadWord_getZ}, 
    {"setX", _wrap_btQuadWord_setX}, 
    {"setY", _wrap_btQuadWord_setY}, 
    {"setZ", _wrap_btQuadWord_setZ}, 
    {"setW", _wrap_btQuadWord_setW}, 
    {"x", _wrap_btQuadWord_x}, 
    {"y", _wrap_btQuadWord_y}, 
    {"z", _wrap_btQuadWord_z}, 
    {"w", _wrap_btQuadWord_w}, 
    {"__eq", _wrap_btQuadWord___eq}, 
    {"setValue", _wrap_btQuadWord_setValue}, 
    {"setMax", _wrap_btQuadWord_setMax}, 
    {"setMin", _wrap_btQuadWord_setMin}, 
    {0,0}
};
static swig_lua_attribute swig_btQuadWord_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btQuadWord_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btQuadWord_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btQuadWord_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btQuadWord_bases[] = {0};
static const char *swig_btQuadWord_base_names[] = {0};
static swig_lua_class _wrap_class_btQuadWord = { "btQuadWord", &SWIGTYPE_p_btQuadWord,_wrap_new_btQuadWord, swig_delete_btQuadWord, swig_btQuadWord_methods, swig_btQuadWord_attributes, { "btQuadWord", swig_btQuadWord_cls_methods, swig_btQuadWord_cls_attributes, swig_btQuadWord_cls_constants }, swig_btQuadWord_bases, swig_btQuadWord_base_names };

static int _wrap_new_btQuaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *result = 0 ;
  
  SWIG_check_num_args("btQuaternion::btQuaternion",0,0)
  result = (btQuaternion *)new btQuaternion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btQuaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btQuaternion *result = 0 ;
  
  SWIG_check_num_args("btQuaternion::btQuaternion",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btQuaternion::btQuaternion",1,"btScalar const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuaternion::btQuaternion",2,"btScalar const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btQuaternion::btQuaternion",3,"btScalar const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btQuaternion::btQuaternion",4,"btScalar const &");
  temp1=(btScalar)lua_tonumber(L,1); arg1=&temp1;
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  temp4=(btScalar)lua_tonumber(L,4); arg4=&temp4;
  result = (btQuaternion *)new btQuaternion((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btQuaternion__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar temp2 ;
  btQuaternion *result = 0 ;
  
  SWIG_check_num_args("btQuaternion::btQuaternion",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btQuaternion::btQuaternion",1,"btVector3 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuaternion::btQuaternion",2,"btScalar const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btQuaternion",1,SWIGTYPE_p_btVector3);
  }
  
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  result = (btQuaternion *)new btQuaternion((btVector3 const &)*arg1,(btScalar const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btQuaternion__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btQuaternion *result = 0 ;
  
  SWIG_check_num_args("btQuaternion::btQuaternion",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btQuaternion::btQuaternion",1,"btScalar const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuaternion::btQuaternion",2,"btScalar const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btQuaternion::btQuaternion",3,"btScalar const &");
  temp1=(btScalar)lua_tonumber(L,1); arg1=&temp1;
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  result = (btQuaternion *)new btQuaternion((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btQuaternion(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btQuaternion__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_btQuaternion__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_btQuaternion__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_btQuaternion__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btQuaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btQuaternion::btQuaternion()\n"
    "    btQuaternion::btQuaternion(btScalar const &,btScalar const &,btScalar const &,btScalar const &)\n"
    "    btQuaternion::btQuaternion(btVector3 const &,btScalar const &)\n"
    "    btQuaternion::btQuaternion(btScalar const &,btScalar const &,btScalar const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btQuaternion_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp3 ;
  
  SWIG_check_num_args("btQuaternion::setRotation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::setRotation",1,"btQuaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btQuaternion::setRotation",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btQuaternion::setRotation",3,"btScalar const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_setRotation",1,SWIGTYPE_p_btQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btQuaternion_setRotation",2,SWIGTYPE_p_btVector3);
  }
  
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->setRotation((btVector3 const &)*arg2,(btScalar const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion_setEuler(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  
  SWIG_check_num_args("btQuaternion::setEuler",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::setEuler",1,"btQuaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuaternion::setEuler",2,"btScalar const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btQuaternion::setEuler",3,"btScalar const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btQuaternion::setEuler",4,"btScalar const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_setEuler",1,SWIGTYPE_p_btQuaternion);
  }
  
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  temp4=(btScalar)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->setEuler((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion_setEulerZYX(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  
  SWIG_check_num_args("btQuaternion::setEulerZYX",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::setEulerZYX",1,"btQuaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuaternion::setEulerZYX",2,"btScalar const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btQuaternion::setEulerZYX",3,"btScalar const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btQuaternion::setEulerZYX",4,"btScalar const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_setEulerZYX",1,SWIGTYPE_p_btQuaternion);
  }
  
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  temp4=(btScalar)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->setEulerZYX((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion_dot(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btQuaternion::dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::dot",1,"btQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btQuaternion::dot",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_dot",1,SWIGTYPE_p_btQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_dot",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = (btScalar)((btQuaternion const *)arg1)->dot((btQuaternion const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion_length2(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btQuaternion::length2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::length2",1,"btQuaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_length2",1,SWIGTYPE_p_btQuaternion);
  }
  
  result = (btScalar)((btQuaternion const *)arg1)->length2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion_length(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btQuaternion::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::length",1,"btQuaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_length",1,SWIGTYPE_p_btQuaternion);
  }
  
  result = (btScalar)((btQuaternion const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion_normalize(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *result = 0 ;
  
  SWIG_check_num_args("btQuaternion::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::normalize",1,"btQuaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_normalize",1,SWIGTYPE_p_btQuaternion);
  }
  
  result = (btQuaternion *) &(arg1)->normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuaternion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion___mul(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar temp2 ;
  btQuaternion result;
  
  SWIG_check_num_args("btQuaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::operator *",1,"btQuaternion const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuaternion::operator *",2,"btScalar const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion___mul",1,SWIGTYPE_p_btQuaternion);
  }
  
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  result = ((btQuaternion const *)arg1)->operator *((btScalar const &)*arg2);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion___div(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar temp2 ;
  btQuaternion result;
  
  SWIG_check_num_args("btQuaternion::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::operator /",1,"btQuaternion const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuaternion::operator /",2,"btScalar const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion___div",1,SWIGTYPE_p_btQuaternion);
  }
  
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  result = ((btQuaternion const *)arg1)->operator /((btScalar const &)*arg2);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion_normalized(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("btQuaternion::normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::normalized",1,"btQuaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_normalized",1,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((btQuaternion const *)arg1)->normalized();
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion_angle(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btQuaternion::angle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::angle",1,"btQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btQuaternion::angle",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_angle",1,SWIGTYPE_p_btQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_angle",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = (btScalar)((btQuaternion const *)arg1)->angle((btQuaternion const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion_getAngle(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btQuaternion::getAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::getAngle",1,"btQuaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_getAngle",1,SWIGTYPE_p_btQuaternion);
  }
  
  result = (btScalar)((btQuaternion const *)arg1)->getAngle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion_getAxis(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btQuaternion::getAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::getAxis",1,"btQuaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_getAxis",1,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((btQuaternion const *)arg1)->getAxis();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion_inverse(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("btQuaternion::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::inverse",1,"btQuaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_inverse",1,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((btQuaternion const *)arg1)->inverse();
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion___add(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("btQuaternion::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::operator +",1,"btQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btQuaternion::operator +",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion___add",1,SWIGTYPE_p_btQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion___add",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((btQuaternion const *)arg1)->operator +((btQuaternion const &)*arg2);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion___sub(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("btQuaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::operator -",1,"btQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btQuaternion::operator -",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion___sub",1,SWIGTYPE_p_btQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion___sub",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((btQuaternion const *)arg1)->operator -((btQuaternion const &)*arg2);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion___unm(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("btQuaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::operator -",1,"btQuaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion___unm",1,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((btQuaternion const *)arg1)->operator -();
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion_farthest(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("btQuaternion::farthest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::farthest",1,"btQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btQuaternion::farthest",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_farthest",1,SWIGTYPE_p_btQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_farthest",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((btQuaternion const *)arg1)->farthest((btQuaternion const &)*arg2);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion_nearest(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("btQuaternion::nearest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::nearest",1,"btQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btQuaternion::nearest",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_nearest",1,SWIGTYPE_p_btQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_nearest",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((btQuaternion const *)arg1)->nearest((btQuaternion const &)*arg2);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion_slerp(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp3 ;
  btQuaternion result;
  
  SWIG_check_num_args("btQuaternion::slerp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::slerp",1,"btQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btQuaternion::slerp",2,"btQuaternion const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btQuaternion::slerp",3,"btScalar const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_slerp",1,SWIGTYPE_p_btQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_slerp",2,SWIGTYPE_p_btQuaternion);
  }
  
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  result = ((btQuaternion const *)arg1)->slerp((btQuaternion const &)*arg2,(btScalar const &)*arg3);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion_getIdentity(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *result = 0 ;
  
  SWIG_check_num_args("btQuaternion::getIdentity",0,0)
  result = (btQuaternion *) &btQuaternion::getIdentity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuaternion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuaternion_getW(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btQuaternion::getW",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuaternion::getW",1,"btQuaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btQuaternion_getW",1,SWIGTYPE_p_btQuaternion);
  }
  
  result = (btScalar *) &((btQuaternion const *)arg1)->getW();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btQuaternion(void *obj) {
btQuaternion *arg1 = (btQuaternion *) obj;
delete arg1;
}
static swig_lua_method swig_btQuaternion_methods[] = {
    {"setRotation", _wrap_btQuaternion_setRotation}, 
    {"setEuler", _wrap_btQuaternion_setEuler}, 
    {"setEulerZYX", _wrap_btQuaternion_setEulerZYX}, 
    {"dot", _wrap_btQuaternion_dot}, 
    {"length2", _wrap_btQuaternion_length2}, 
    {"length", _wrap_btQuaternion_length}, 
    {"normalize", _wrap_btQuaternion_normalize}, 
    {"__mul", _wrap_btQuaternion___mul}, 
    {"__div", _wrap_btQuaternion___div}, 
    {"normalized", _wrap_btQuaternion_normalized}, 
    {"angle", _wrap_btQuaternion_angle}, 
    {"getAngle", _wrap_btQuaternion_getAngle}, 
    {"getAxis", _wrap_btQuaternion_getAxis}, 
    {"inverse", _wrap_btQuaternion_inverse}, 
    {"__add", _wrap_btQuaternion___add}, 
    {"__sub", _wrap_btQuaternion___sub}, 
    {"__unm", _wrap_btQuaternion___unm}, 
    {"farthest", _wrap_btQuaternion_farthest}, 
    {"nearest", _wrap_btQuaternion_nearest}, 
    {"slerp", _wrap_btQuaternion_slerp}, 
    {"getW", _wrap_btQuaternion_getW}, 
    {0,0}
};
static swig_lua_attribute swig_btQuaternion_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btQuaternion_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btQuaternion_cls_methods[] = {
    {"getIdentity", _wrap_btQuaternion_getIdentity}, 
    {0,0}
};
static swig_lua_const_info swig_btQuaternion_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btQuaternion_bases[] = {0,0};
static const char *swig_btQuaternion_base_names[] = {"btQuadWord *",0};
static swig_lua_class _wrap_class_btQuaternion = { "btQuaternion", &SWIGTYPE_p_btQuaternion,_wrap_new_btQuaternion, swig_delete_btQuaternion, swig_btQuaternion_methods, swig_btQuaternion_attributes, { "btQuaternion", swig_btQuaternion_cls_methods, swig_btQuaternion_cls_attributes, swig_btQuaternion_cls_constants }, swig_btQuaternion_bases, swig_btQuaternion_base_names };

static int _wrap_dot(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("dot",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dot",1,"btQuaternion const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dot",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("dot",1,SWIGTYPE_p_btQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("dot",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = (btScalar)dot((btQuaternion const &)*arg1,(btQuaternion const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_length(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("length",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("length",1,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("length",1,SWIGTYPE_p_btQuaternion);
  }
  
  result = (btScalar)length((btQuaternion const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btAngle",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btAngle",1,"btQuaternion const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btAngle",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btAngle",1,SWIGTYPE_p_btQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btAngle",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = (btScalar)btAngle((btQuaternion const &)*arg1,(btQuaternion const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngle(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btAngle__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btAngle__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btAngle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btAngle(btVector3 const &,btVector3 const &)\n"
    "    btAngle(btQuaternion const &,btQuaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_inverse(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("inverse",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inverse",1,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("inverse",1,SWIGTYPE_p_btQuaternion);
  }
  
  result = inverse((btQuaternion const &)*arg1);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_slerp(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp3 ;
  btQuaternion result;
  
  SWIG_check_num_args("slerp",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("slerp",1,"btQuaternion const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("slerp",2,"btQuaternion const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("slerp",3,"btScalar const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("slerp",1,SWIGTYPE_p_btQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("slerp",2,SWIGTYPE_p_btQuaternion);
  }
  
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  result = slerp((btQuaternion const &)*arg1,(btQuaternion const &)*arg2,(float const &)*arg3);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_quatRotate(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("quatRotate",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("quatRotate",1,"btQuaternion const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("quatRotate",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("quatRotate",1,SWIGTYPE_p_btQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("quatRotate",2,SWIGTYPE_p_btVector3);
  }
  
  result = quatRotate((btQuaternion const &)*arg1,(btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_shortestArcQuat(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("shortestArcQuat",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("shortestArcQuat",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("shortestArcQuat",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("shortestArcQuat",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("shortestArcQuat",2,SWIGTYPE_p_btVector3);
  }
  
  result = shortestArcQuat((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_shortestArcQuatNormalize2(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("shortestArcQuatNormalize2",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("shortestArcQuatNormalize2",1,"btVector3 &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("shortestArcQuatNormalize2",2,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("shortestArcQuatNormalize2",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("shortestArcQuatNormalize2",2,SWIGTYPE_p_btVector3);
  }
  
  result = shortestArcQuatNormalize2(*arg1,*arg2);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btMatrix3x3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *result = 0 ;
  
  SWIG_check_num_args("btMatrix3x3::btMatrix3x3",0,0)
  result = (btMatrix3x3 *)new btMatrix3x3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMatrix3x3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btMatrix3x3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = 0 ;
  btMatrix3x3 *result = 0 ;
  
  SWIG_check_num_args("btMatrix3x3::btMatrix3x3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btMatrix3x3::btMatrix3x3",1,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("new_btMatrix3x3",1,SWIGTYPE_p_btQuaternion);
  }
  
  result = (btMatrix3x3 *)new btMatrix3x3((btQuaternion const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMatrix3x3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btMatrix3x3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btScalar *arg6 = 0 ;
  btScalar *arg7 = 0 ;
  btScalar *arg8 = 0 ;
  btScalar *arg9 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btScalar temp5 ;
  btScalar temp6 ;
  btScalar temp7 ;
  btScalar temp8 ;
  btScalar temp9 ;
  btMatrix3x3 *result = 0 ;
  
  SWIG_check_num_args("btMatrix3x3::btMatrix3x3",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btMatrix3x3::btMatrix3x3",1,"btScalar const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btMatrix3x3::btMatrix3x3",2,"btScalar const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btMatrix3x3::btMatrix3x3",3,"btScalar const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btMatrix3x3::btMatrix3x3",4,"btScalar const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btMatrix3x3::btMatrix3x3",5,"btScalar const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btMatrix3x3::btMatrix3x3",6,"btScalar const &");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("btMatrix3x3::btMatrix3x3",7,"btScalar const &");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("btMatrix3x3::btMatrix3x3",8,"btScalar const &");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("btMatrix3x3::btMatrix3x3",9,"btScalar const &");
  temp1=(btScalar)lua_tonumber(L,1); arg1=&temp1;
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  temp4=(btScalar)lua_tonumber(L,4); arg4=&temp4;
  temp5=(btScalar)lua_tonumber(L,5); arg5=&temp5;
  temp6=(btScalar)lua_tonumber(L,6); arg6=&temp6;
  temp7=(btScalar)lua_tonumber(L,7); arg7=&temp7;
  temp8=(btScalar)lua_tonumber(L,8); arg8=&temp8;
  temp9=(btScalar)lua_tonumber(L,9); arg9=&temp9;
  result = (btMatrix3x3 *)new btMatrix3x3((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5,(btScalar const &)*arg6,(btScalar const &)*arg7,(btScalar const &)*arg8,(btScalar const &)*arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMatrix3x3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btMatrix3x3__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = 0 ;
  btMatrix3x3 *result = 0 ;
  
  SWIG_check_num_args("btMatrix3x3::btMatrix3x3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btMatrix3x3::btMatrix3x3",1,"btMatrix3x3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("new_btMatrix3x3",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  result = (btMatrix3x3 *)new btMatrix3x3((btMatrix3x3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMatrix3x3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btMatrix3x3(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btMatrix3x3__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_btMatrix3x3__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btMatrix3x3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_btMatrix3x3__SWIG_3(L);
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_new_btMatrix3x3__SWIG_2(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btMatrix3x3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btMatrix3x3::btMatrix3x3()\n"
    "    btMatrix3x3::btMatrix3x3(btQuaternion const &)\n"
    "    btMatrix3x3::btMatrix3x3(btScalar const &,btScalar const &,btScalar const &,btScalar const &,btScalar const &,btScalar const &,btScalar const &,btScalar const &,btScalar const &)\n"
    "    btMatrix3x3::btMatrix3x3(btMatrix3x3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btMatrix3x3_getColumn(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  int arg2 ;
  btVector3 result;
  
  SWIG_check_num_args("btMatrix3x3::getColumn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::getColumn",1,"btMatrix3x3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btMatrix3x3::getColumn",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_getColumn",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((btMatrix3x3 const *)arg1)->getColumn(arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_getRow(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  int arg2 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btMatrix3x3::getRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::getRow",1,"btMatrix3x3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btMatrix3x3::getRow",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_getRow",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btVector3 *) &((btMatrix3x3 const *)arg1)->getRow(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_setFromOpenGLSubMatrix(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  SWIG_check_num_args("btMatrix3x3::setFromOpenGLSubMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::setFromOpenGLSubMatrix",1,"btMatrix3x3 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btMatrix3x3::setFromOpenGLSubMatrix",2,"btScalar const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_setFromOpenGLSubMatrix",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btMatrix3x3_setFromOpenGLSubMatrix",2,SWIGTYPE_p_float);
  }
  
  (arg1)->setFromOpenGLSubMatrix((btScalar const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_setValue(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btScalar *arg6 = 0 ;
  btScalar *arg7 = 0 ;
  btScalar *arg8 = 0 ;
  btScalar *arg9 = 0 ;
  btScalar *arg10 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btScalar temp5 ;
  btScalar temp6 ;
  btScalar temp7 ;
  btScalar temp8 ;
  btScalar temp9 ;
  btScalar temp10 ;
  
  SWIG_check_num_args("btMatrix3x3::setValue",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::setValue",1,"btMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btMatrix3x3::setValue",2,"btScalar const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btMatrix3x3::setValue",3,"btScalar const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btMatrix3x3::setValue",4,"btScalar const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btMatrix3x3::setValue",5,"btScalar const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btMatrix3x3::setValue",6,"btScalar const &");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("btMatrix3x3::setValue",7,"btScalar const &");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("btMatrix3x3::setValue",8,"btScalar const &");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("btMatrix3x3::setValue",9,"btScalar const &");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("btMatrix3x3::setValue",10,"btScalar const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_setValue",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  temp4=(btScalar)lua_tonumber(L,4); arg4=&temp4;
  temp5=(btScalar)lua_tonumber(L,5); arg5=&temp5;
  temp6=(btScalar)lua_tonumber(L,6); arg6=&temp6;
  temp7=(btScalar)lua_tonumber(L,7); arg7=&temp7;
  temp8=(btScalar)lua_tonumber(L,8); arg8=&temp8;
  temp9=(btScalar)lua_tonumber(L,9); arg9=&temp9;
  temp10=(btScalar)lua_tonumber(L,10); arg10=&temp10;
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5,(btScalar const &)*arg6,(btScalar const &)*arg7,(btScalar const &)*arg8,(btScalar const &)*arg9,(btScalar const &)*arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("btMatrix3x3::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::setRotation",1,"btMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMatrix3x3::setRotation",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_setRotation",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btMatrix3x3_setRotation",2,SWIGTYPE_p_btQuaternion);
  }
  
  (arg1)->setRotation((btQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_setEulerYPR(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  
  SWIG_check_num_args("btMatrix3x3::setEulerYPR",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::setEulerYPR",1,"btMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btMatrix3x3::setEulerYPR",2,"btScalar const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btMatrix3x3::setEulerYPR",3,"btScalar const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btMatrix3x3::setEulerYPR",4,"btScalar const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_setEulerYPR",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  temp2=(btScalar)lua_tonumber(L,2); arg2=&temp2;
  temp3=(btScalar)lua_tonumber(L,3); arg3=&temp3;
  temp4=(btScalar)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->setEulerYPR((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_setEulerZYX(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  SWIG_check_num_args("btMatrix3x3::setEulerZYX",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::setEulerZYX",1,"btMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btMatrix3x3::setEulerZYX",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btMatrix3x3::setEulerZYX",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btMatrix3x3::setEulerZYX",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_setEulerZYX",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  (arg1)->setEulerZYX(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_setIdentity(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  
  SWIG_check_num_args("btMatrix3x3::setIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::setIdentity",1,"btMatrix3x3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_setIdentity",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  (arg1)->setIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_getIdentity(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *result = 0 ;
  
  SWIG_check_num_args("btMatrix3x3::getIdentity",0,0)
  result = (btMatrix3x3 *) &btMatrix3x3::getIdentity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMatrix3x3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_getOpenGLSubMatrix(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  SWIG_check_num_args("btMatrix3x3::getOpenGLSubMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::getOpenGLSubMatrix",1,"btMatrix3x3 const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btMatrix3x3::getOpenGLSubMatrix",2,"btScalar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_getOpenGLSubMatrix",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btMatrix3x3_getOpenGLSubMatrix",2,SWIGTYPE_p_float);
  }
  
  ((btMatrix3x3 const *)arg1)->getOpenGLSubMatrix(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("btMatrix3x3::getRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::getRotation",1,"btMatrix3x3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMatrix3x3::getRotation",2,"btQuaternion &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_getRotation",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btMatrix3x3_getRotation",2,SWIGTYPE_p_btQuaternion);
  }
  
  ((btMatrix3x3 const *)arg1)->getRotation(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_getEulerYPR(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  SWIG_check_num_args("btMatrix3x3::getEulerYPR",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::getEulerYPR",1,"btMatrix3x3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMatrix3x3::getEulerYPR",2,"btScalar &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btMatrix3x3::getEulerYPR",3,"btScalar &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btMatrix3x3::getEulerYPR",4,"btScalar &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_getEulerYPR",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btMatrix3x3_getEulerYPR",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btMatrix3x3_getEulerYPR",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btMatrix3x3_getEulerYPR",4,SWIGTYPE_p_float);
  }
  
  ((btMatrix3x3 const *)arg1)->getEulerYPR(*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_getEulerZYX__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  unsigned int arg5 ;
  
  SWIG_check_num_args("btMatrix3x3::getEulerZYX",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::getEulerZYX",1,"btMatrix3x3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMatrix3x3::getEulerZYX",2,"btScalar &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btMatrix3x3::getEulerZYX",3,"btScalar &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btMatrix3x3::getEulerZYX",4,"btScalar &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btMatrix3x3::getEulerZYX",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_getEulerZYX",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btMatrix3x3_getEulerZYX",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btMatrix3x3_getEulerZYX",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btMatrix3x3_getEulerZYX",4,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  ((btMatrix3x3 const *)arg1)->getEulerZYX(*arg2,*arg3,*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_getEulerZYX__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  SWIG_check_num_args("btMatrix3x3::getEulerZYX",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::getEulerZYX",1,"btMatrix3x3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMatrix3x3::getEulerZYX",2,"btScalar &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btMatrix3x3::getEulerZYX",3,"btScalar &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btMatrix3x3::getEulerZYX",4,"btScalar &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_getEulerZYX",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btMatrix3x3_getEulerZYX",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btMatrix3x3_getEulerZYX",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btMatrix3x3_getEulerZYX",4,SWIGTYPE_p_float);
  }
  
  ((btMatrix3x3 const *)arg1)->getEulerZYX(*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_getEulerZYX(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btMatrix3x3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btMatrix3x3_getEulerZYX__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btMatrix3x3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_btMatrix3x3_getEulerZYX__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btMatrix3x3_getEulerZYX'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btMatrix3x3::getEulerZYX(btScalar &,btScalar &,btScalar &,unsigned int) const\n"
    "    btMatrix3x3::getEulerZYX(btScalar &,btScalar &,btScalar &) const\n");
  lua_error(L);return 0;
}


static int _wrap_btMatrix3x3_scaled(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btMatrix3x3 result;
  
  SWIG_check_num_args("btMatrix3x3::scaled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::scaled",1,"btMatrix3x3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMatrix3x3::scaled",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_scaled",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btMatrix3x3_scaled",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btMatrix3x3 const *)arg1)->scaled((btVector3 const &)*arg2);
  {
    btMatrix3x3 * resultptr = new btMatrix3x3((const btMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btMatrix3x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_determinant(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btMatrix3x3::determinant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::determinant",1,"btMatrix3x3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_determinant",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  result = (btScalar)((btMatrix3x3 const *)arg1)->determinant();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_adjoint(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 result;
  
  SWIG_check_num_args("btMatrix3x3::adjoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::adjoint",1,"btMatrix3x3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_adjoint",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  result = ((btMatrix3x3 const *)arg1)->adjoint();
  {
    btMatrix3x3 * resultptr = new btMatrix3x3((const btMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btMatrix3x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_absolute(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 result;
  
  SWIG_check_num_args("btMatrix3x3::absolute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::absolute",1,"btMatrix3x3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_absolute",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  result = ((btMatrix3x3 const *)arg1)->absolute();
  {
    btMatrix3x3 * resultptr = new btMatrix3x3((const btMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btMatrix3x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_transpose(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 result;
  
  SWIG_check_num_args("btMatrix3x3::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::transpose",1,"btMatrix3x3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_transpose",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  result = ((btMatrix3x3 const *)arg1)->transpose();
  {
    btMatrix3x3 * resultptr = new btMatrix3x3((const btMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btMatrix3x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_inverse(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 result;
  
  SWIG_check_num_args("btMatrix3x3::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::inverse",1,"btMatrix3x3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_inverse",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  result = ((btMatrix3x3 const *)arg1)->inverse();
  {
    btMatrix3x3 * resultptr = new btMatrix3x3((const btMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btMatrix3x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_transposeTimes(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btMatrix3x3 result;
  
  SWIG_check_num_args("btMatrix3x3::transposeTimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::transposeTimes",1,"btMatrix3x3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMatrix3x3::transposeTimes",2,"btMatrix3x3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_transposeTimes",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_transposeTimes",2,SWIGTYPE_p_btMatrix3x3);
  }
  
  result = ((btMatrix3x3 const *)arg1)->transposeTimes((btMatrix3x3 const &)*arg2);
  {
    btMatrix3x3 * resultptr = new btMatrix3x3((const btMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btMatrix3x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_timesTranspose(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btMatrix3x3 result;
  
  SWIG_check_num_args("btMatrix3x3::timesTranspose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::timesTranspose",1,"btMatrix3x3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMatrix3x3::timesTranspose",2,"btMatrix3x3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_timesTranspose",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_timesTranspose",2,SWIGTYPE_p_btMatrix3x3);
  }
  
  result = ((btMatrix3x3 const *)arg1)->timesTranspose((btMatrix3x3 const &)*arg2);
  {
    btMatrix3x3 * resultptr = new btMatrix3x3((const btMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btMatrix3x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_tdotx(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btMatrix3x3::tdotx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::tdotx",1,"btMatrix3x3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMatrix3x3::tdotx",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_tdotx",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btMatrix3x3_tdotx",2,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)((btMatrix3x3 const *)arg1)->tdotx((btVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_tdoty(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btMatrix3x3::tdoty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::tdoty",1,"btMatrix3x3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMatrix3x3::tdoty",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_tdoty",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btMatrix3x3_tdoty",2,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)((btMatrix3x3 const *)arg1)->tdoty((btVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_tdotz(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btMatrix3x3::tdotz",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::tdotz",1,"btMatrix3x3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMatrix3x3::tdotz",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_tdotz",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btMatrix3x3_tdotz",2,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)((btMatrix3x3 const *)arg1)->tdotz((btVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_diagonalize(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btScalar arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("btMatrix3x3::diagonalize",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::diagonalize",1,"btMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMatrix3x3::diagonalize",2,"btMatrix3x3 &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btMatrix3x3::diagonalize",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btMatrix3x3::diagonalize",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_diagonalize",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_diagonalize",2,SWIGTYPE_p_btMatrix3x3);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->diagonalize(*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_cofac(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  btScalar result;
  
  SWIG_check_num_args("btMatrix3x3::cofac",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::cofac",1,"btMatrix3x3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btMatrix3x3::cofac",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btMatrix3x3::cofac",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btMatrix3x3::cofac",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btMatrix3x3::cofac",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_cofac",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (btScalar)((btMatrix3x3 const *)arg1)->cofac(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3FloatData *arg2 = 0 ;
  
  SWIG_check_num_args("btMatrix3x3::serialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::serialize",1,"btMatrix3x3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMatrix3x3::serialize",2,"btMatrix3x3FloatData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_serialize",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMatrix3x3FloatData,0))){
    SWIG_fail_ptr("btMatrix3x3_serialize",2,SWIGTYPE_p_btMatrix3x3FloatData);
  }
  
  ((btMatrix3x3 const *)arg1)->serialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_serializeFloat(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3FloatData *arg2 = 0 ;
  
  SWIG_check_num_args("btMatrix3x3::serializeFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::serializeFloat",1,"btMatrix3x3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMatrix3x3::serializeFloat",2,"btMatrix3x3FloatData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_serializeFloat",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMatrix3x3FloatData,0))){
    SWIG_fail_ptr("btMatrix3x3_serializeFloat",2,SWIGTYPE_p_btMatrix3x3FloatData);
  }
  
  ((btMatrix3x3 const *)arg1)->serializeFloat(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_deSerialize(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3FloatData *arg2 = 0 ;
  
  SWIG_check_num_args("btMatrix3x3::deSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::deSerialize",1,"btMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMatrix3x3::deSerialize",2,"btMatrix3x3FloatData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_deSerialize",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMatrix3x3FloatData,0))){
    SWIG_fail_ptr("btMatrix3x3_deSerialize",2,SWIGTYPE_p_btMatrix3x3FloatData);
  }
  
  (arg1)->deSerialize((btMatrix3x3FloatData const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_deSerializeFloat(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3FloatData *arg2 = 0 ;
  
  SWIG_check_num_args("btMatrix3x3::deSerializeFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::deSerializeFloat",1,"btMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMatrix3x3::deSerializeFloat",2,"btMatrix3x3FloatData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_deSerializeFloat",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMatrix3x3FloatData,0))){
    SWIG_fail_ptr("btMatrix3x3_deSerializeFloat",2,SWIGTYPE_p_btMatrix3x3FloatData);
  }
  
  (arg1)->deSerializeFloat((btMatrix3x3FloatData const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3_deSerializeDouble(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3DoubleData *arg2 = 0 ;
  
  SWIG_check_num_args("btMatrix3x3::deSerializeDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3::deSerializeDouble",1,"btMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMatrix3x3::deSerializeDouble",2,"btMatrix3x3DoubleData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3_deSerializeDouble",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMatrix3x3DoubleData,0))){
    SWIG_fail_ptr("btMatrix3x3_deSerializeDouble",2,SWIGTYPE_p_btMatrix3x3DoubleData);
  }
  
  (arg1)->deSerializeDouble((btMatrix3x3DoubleData const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btMatrix3x3(void *obj) {
btMatrix3x3 *arg1 = (btMatrix3x3 *) obj;
delete arg1;
}
static swig_lua_method swig_btMatrix3x3_methods[] = {
    {"getColumn", _wrap_btMatrix3x3_getColumn}, 
    {"getRow", _wrap_btMatrix3x3_getRow}, 
    {"setFromOpenGLSubMatrix", _wrap_btMatrix3x3_setFromOpenGLSubMatrix}, 
    {"setValue", _wrap_btMatrix3x3_setValue}, 
    {"setRotation", _wrap_btMatrix3x3_setRotation}, 
    {"setEulerYPR", _wrap_btMatrix3x3_setEulerYPR}, 
    {"setEulerZYX", _wrap_btMatrix3x3_setEulerZYX}, 
    {"setIdentity", _wrap_btMatrix3x3_setIdentity}, 
    {"getOpenGLSubMatrix", _wrap_btMatrix3x3_getOpenGLSubMatrix}, 
    {"getRotation", _wrap_btMatrix3x3_getRotation}, 
    {"getEulerYPR", _wrap_btMatrix3x3_getEulerYPR}, 
    {"getEulerZYX", _wrap_btMatrix3x3_getEulerZYX}, 
    {"scaled", _wrap_btMatrix3x3_scaled}, 
    {"determinant", _wrap_btMatrix3x3_determinant}, 
    {"adjoint", _wrap_btMatrix3x3_adjoint}, 
    {"absolute", _wrap_btMatrix3x3_absolute}, 
    {"transpose", _wrap_btMatrix3x3_transpose}, 
    {"inverse", _wrap_btMatrix3x3_inverse}, 
    {"transposeTimes", _wrap_btMatrix3x3_transposeTimes}, 
    {"timesTranspose", _wrap_btMatrix3x3_timesTranspose}, 
    {"tdotx", _wrap_btMatrix3x3_tdotx}, 
    {"tdoty", _wrap_btMatrix3x3_tdoty}, 
    {"tdotz", _wrap_btMatrix3x3_tdotz}, 
    {"diagonalize", _wrap_btMatrix3x3_diagonalize}, 
    {"cofac", _wrap_btMatrix3x3_cofac}, 
    {"serialize", _wrap_btMatrix3x3_serialize}, 
    {"serializeFloat", _wrap_btMatrix3x3_serializeFloat}, 
    {"deSerialize", _wrap_btMatrix3x3_deSerialize}, 
    {"deSerializeFloat", _wrap_btMatrix3x3_deSerializeFloat}, 
    {"deSerializeDouble", _wrap_btMatrix3x3_deSerializeDouble}, 
    {0,0}
};
static swig_lua_attribute swig_btMatrix3x3_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btMatrix3x3_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btMatrix3x3_cls_methods[] = {
    {"getIdentity", _wrap_btMatrix3x3_getIdentity}, 
    {0,0}
};
static swig_lua_const_info swig_btMatrix3x3_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btMatrix3x3_bases[] = {0};
static const char *swig_btMatrix3x3_base_names[] = {0};
static swig_lua_class _wrap_class_btMatrix3x3 = { "btMatrix3x3", &SWIGTYPE_p_btMatrix3x3,_wrap_new_btMatrix3x3, swig_delete_btMatrix3x3, swig_btMatrix3x3_methods, swig_btMatrix3x3_attributes, { "btMatrix3x3", swig_btMatrix3x3_cls_methods, swig_btMatrix3x3_cls_attributes, swig_btMatrix3x3_cls_constants }, swig_btMatrix3x3_bases, swig_btMatrix3x3_base_names };

static int _wrap_btMatrix3x3FloatData_m_el_set(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3FloatData *arg1 = (btMatrix3x3FloatData *) 0 ;
  btVector3FloatData *arg2 ;
  
  SWIG_check_num_args("btMatrix3x3FloatData::m_el",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3FloatData::m_el",1,"btMatrix3x3FloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btMatrix3x3FloatData::m_el",2,"btVector3FloatData [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3FloatData,0))){
    SWIG_fail_ptr("btMatrix3x3FloatData_m_el_set",1,SWIGTYPE_p_btMatrix3x3FloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btMatrix3x3FloatData_m_el_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  {
    size_t ii;
    btVector3FloatData *b = (btVector3FloatData *) arg1->m_el;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((btVector3FloatData *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3FloatData_m_el_get(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3FloatData *arg1 = (btMatrix3x3FloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btMatrix3x3FloatData::m_el",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3FloatData::m_el",1,"btMatrix3x3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3FloatData,0))){
    SWIG_fail_ptr("btMatrix3x3FloatData_m_el_get",1,SWIGTYPE_p_btMatrix3x3FloatData);
  }
  
  result = (btVector3FloatData *)(btVector3FloatData *) ((arg1)->m_el);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btMatrix3x3FloatData(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3FloatData *result = 0 ;
  
  SWIG_check_num_args("btMatrix3x3FloatData::btMatrix3x3FloatData",0,0)
  result = (btMatrix3x3FloatData *)new btMatrix3x3FloatData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMatrix3x3FloatData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btMatrix3x3FloatData(void *obj) {
btMatrix3x3FloatData *arg1 = (btMatrix3x3FloatData *) obj;
delete arg1;
}
static swig_lua_method swig_btMatrix3x3FloatData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btMatrix3x3FloatData_attributes[] = {
    { "m_el", _wrap_btMatrix3x3FloatData_m_el_get, _wrap_btMatrix3x3FloatData_m_el_set},
    {0,0,0}
};
static swig_lua_attribute swig_btMatrix3x3FloatData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btMatrix3x3FloatData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btMatrix3x3FloatData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btMatrix3x3FloatData_bases[] = {0};
static const char *swig_btMatrix3x3FloatData_base_names[] = {0};
static swig_lua_class _wrap_class_btMatrix3x3FloatData = { "btMatrix3x3FloatData", &SWIGTYPE_p_btMatrix3x3FloatData,_wrap_new_btMatrix3x3FloatData, swig_delete_btMatrix3x3FloatData, swig_btMatrix3x3FloatData_methods, swig_btMatrix3x3FloatData_attributes, { "btMatrix3x3FloatData", swig_btMatrix3x3FloatData_cls_methods, swig_btMatrix3x3FloatData_cls_attributes, swig_btMatrix3x3FloatData_cls_constants }, swig_btMatrix3x3FloatData_bases, swig_btMatrix3x3FloatData_base_names };

static int _wrap_btMatrix3x3DoubleData_m_el_set(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3DoubleData *arg1 = (btMatrix3x3DoubleData *) 0 ;
  btVector3DoubleData *arg2 ;
  
  SWIG_check_num_args("btMatrix3x3DoubleData::m_el",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3DoubleData::m_el",1,"btMatrix3x3DoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btMatrix3x3DoubleData::m_el",2,"btVector3DoubleData [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3DoubleData,0))){
    SWIG_fail_ptr("btMatrix3x3DoubleData_m_el_set",1,SWIGTYPE_p_btMatrix3x3DoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btMatrix3x3DoubleData_m_el_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  {
    size_t ii;
    btVector3DoubleData *b = (btVector3DoubleData *) arg1->m_el;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((btVector3DoubleData *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3DoubleData_m_el_get(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3DoubleData *arg1 = (btMatrix3x3DoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btMatrix3x3DoubleData::m_el",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMatrix3x3DoubleData::m_el",1,"btMatrix3x3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3DoubleData,0))){
    SWIG_fail_ptr("btMatrix3x3DoubleData_m_el_get",1,SWIGTYPE_p_btMatrix3x3DoubleData);
  }
  
  result = (btVector3DoubleData *)(btVector3DoubleData *) ((arg1)->m_el);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btMatrix3x3DoubleData(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btMatrix3x3DoubleData::btMatrix3x3DoubleData",0,0)
  result = (btMatrix3x3DoubleData *)new btMatrix3x3DoubleData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMatrix3x3DoubleData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btMatrix3x3DoubleData(void *obj) {
btMatrix3x3DoubleData *arg1 = (btMatrix3x3DoubleData *) obj;
delete arg1;
}
static swig_lua_method swig_btMatrix3x3DoubleData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btMatrix3x3DoubleData_attributes[] = {
    { "m_el", _wrap_btMatrix3x3DoubleData_m_el_get, _wrap_btMatrix3x3DoubleData_m_el_set},
    {0,0,0}
};
static swig_lua_attribute swig_btMatrix3x3DoubleData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btMatrix3x3DoubleData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btMatrix3x3DoubleData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btMatrix3x3DoubleData_bases[] = {0};
static const char *swig_btMatrix3x3DoubleData_base_names[] = {0};
static swig_lua_class _wrap_class_btMatrix3x3DoubleData = { "btMatrix3x3DoubleData", &SWIGTYPE_p_btMatrix3x3DoubleData,_wrap_new_btMatrix3x3DoubleData, swig_delete_btMatrix3x3DoubleData, swig_btMatrix3x3DoubleData_methods, swig_btMatrix3x3DoubleData_attributes, { "btMatrix3x3DoubleData", swig_btMatrix3x3DoubleData_cls_methods, swig_btMatrix3x3DoubleData_cls_attributes, swig_btMatrix3x3DoubleData_cls_constants }, swig_btMatrix3x3DoubleData_bases, swig_btMatrix3x3DoubleData_base_names };

static int _wrap_new_btTransform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btTransform::btTransform",0,0)
  result = (btTransform *)new btTransform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTransform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btTransform::btTransform",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btTransform::btTransform",1,"btQuaternion const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransform::btTransform",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("new_btTransform",1,SWIGTYPE_p_btQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btTransform",2,SWIGTYPE_p_btVector3);
  }
  
  result = (btTransform *)new btTransform((btQuaternion const &)*arg1,(btVector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTransform__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btTransform::btTransform",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btTransform::btTransform",1,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("new_btTransform",1,SWIGTYPE_p_btQuaternion);
  }
  
  result = (btTransform *)new btTransform((btQuaternion const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTransform__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btTransform::btTransform",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btTransform::btTransform",1,"btMatrix3x3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransform::btTransform",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("new_btTransform",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btTransform",2,SWIGTYPE_p_btVector3);
  }
  
  result = (btTransform *)new btTransform((btMatrix3x3 const &)*arg1,(btVector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTransform__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btTransform::btTransform",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btTransform::btTransform",1,"btMatrix3x3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("new_btTransform",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  result = (btTransform *)new btTransform((btMatrix3x3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTransform__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btTransform::btTransform",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btTransform::btTransform",1,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("new_btTransform",1,SWIGTYPE_p_btTransform);
  }
  
  result = (btTransform *)new btTransform((btTransform const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTransform(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btTransform__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_btTransform__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btMatrix3x3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_btTransform__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_btTransform__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_btTransform__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btMatrix3x3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_btTransform__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btTransform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTransform::btTransform()\n"
    "    btTransform::btTransform(btQuaternion const &,btVector3 const &)\n"
    "    btTransform::btTransform(btQuaternion const &)\n"
    "    btTransform::btTransform(btMatrix3x3 const &,btVector3 const &)\n"
    "    btTransform::btTransform(btMatrix3x3 const &)\n"
    "    btTransform::btTransform(btTransform const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btTransform_mult(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  SWIG_check_num_args("btTransform::mult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::mult",1,"btTransform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransform::mult",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTransform::mult",3,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_mult",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_mult",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_mult",3,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->mult((btTransform const &)*arg2,(btTransform const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform___call(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btTransform::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::operator ()",1,"btTransform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransform::operator ()",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform___call",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransform___call",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btTransform const *)arg1)->operator ()((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btTransform::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::operator *",1,"btTransform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransform::operator *",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform___mul",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransform___mul",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btTransform const *)arg1)->operator *((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btQuaternion *arg2 = 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("btTransform::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::operator *",1,"btTransform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransform::operator *",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform___mul",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btTransform___mul",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((btTransform const *)arg1)->operator *((btQuaternion const &)*arg2);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_getBasis__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btMatrix3x3 *result = 0 ;
  
  SWIG_check_num_args("btTransform::getBasis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::getBasis",1,"btTransform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_getBasis",1,SWIGTYPE_p_btTransform);
  }
  
  result = (btMatrix3x3 *) &(arg1)->getBasis();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMatrix3x3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_getBasis__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btMatrix3x3 *result = 0 ;
  
  SWIG_check_num_args("btTransform::getBasis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::getBasis",1,"btTransform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_getBasis",1,SWIGTYPE_p_btTransform);
  }
  
  result = (btMatrix3x3 *) &((btTransform const *)arg1)->getBasis();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMatrix3x3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_getBasis(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btTransform_getBasis__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btTransform_getBasis__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btTransform_getBasis'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTransform::getBasis()\n"
    "    btTransform::getBasis() const\n");
  lua_error(L);return 0;
}


static int _wrap_btTransform_getOrigin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTransform::getOrigin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::getOrigin",1,"btTransform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_getOrigin",1,SWIGTYPE_p_btTransform);
  }
  
  result = (btVector3 *) &(arg1)->getOrigin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_getOrigin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTransform::getOrigin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::getOrigin",1,"btTransform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_getOrigin",1,SWIGTYPE_p_btTransform);
  }
  
  result = (btVector3 *) &((btTransform const *)arg1)->getOrigin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_getOrigin(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btTransform_getOrigin__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btTransform_getOrigin__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btTransform_getOrigin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTransform::getOrigin()\n"
    "    btTransform::getOrigin() const\n");
  lua_error(L);return 0;
}


static int _wrap_btTransform_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("btTransform::getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::getRotation",1,"btTransform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_getRotation",1,SWIGTYPE_p_btTransform);
  }
  
  result = ((btTransform const *)arg1)->getRotation();
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_setFromOpenGLMatrix(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  SWIG_check_num_args("btTransform::setFromOpenGLMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::setFromOpenGLMatrix",1,"btTransform *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTransform::setFromOpenGLMatrix",2,"btScalar const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_setFromOpenGLMatrix",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btTransform_setFromOpenGLMatrix",2,SWIGTYPE_p_float);
  }
  
  (arg1)->setFromOpenGLMatrix((btScalar const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_getOpenGLMatrix(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  SWIG_check_num_args("btTransform::getOpenGLMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::getOpenGLMatrix",1,"btTransform const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTransform::getOpenGLMatrix",2,"btScalar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_getOpenGLMatrix",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btTransform_getOpenGLMatrix",2,SWIGTYPE_p_float);
  }
  
  ((btTransform const *)arg1)->getOpenGLMatrix(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_setOrigin(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btTransform::setOrigin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::setOrigin",1,"btTransform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransform::setOrigin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_setOrigin",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransform_setOrigin",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setOrigin((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_invXform(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btTransform::invXform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::invXform",1,"btTransform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransform::invXform",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_invXform",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransform_invXform",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btTransform const *)arg1)->invXform((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_setBasis(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btMatrix3x3 *arg2 = 0 ;
  
  SWIG_check_num_args("btTransform::setBasis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::setBasis",1,"btTransform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransform::setBasis",2,"btMatrix3x3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_setBasis",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btTransform_setBasis",2,SWIGTYPE_p_btMatrix3x3);
  }
  
  (arg1)->setBasis((btMatrix3x3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("btTransform::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::setRotation",1,"btTransform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransform::setRotation",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_setRotation",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btTransform_setRotation",2,SWIGTYPE_p_btQuaternion);
  }
  
  (arg1)->setRotation((btQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_setIdentity(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  
  SWIG_check_num_args("btTransform::setIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::setIdentity",1,"btTransform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_setIdentity",1,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_inverse(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btTransform result;
  
  SWIG_check_num_args("btTransform::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::inverse",1,"btTransform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_inverse",1,SWIGTYPE_p_btTransform);
  }
  
  result = ((btTransform const *)arg1)->inverse();
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_inverseTimes(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform result;
  
  SWIG_check_num_args("btTransform::inverseTimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::inverseTimes",1,"btTransform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransform::inverseTimes",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_inverseTimes",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_inverseTimes",2,SWIGTYPE_p_btTransform);
  }
  
  result = ((btTransform const *)arg1)->inverseTimes((btTransform const &)*arg2);
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform result;
  
  SWIG_check_num_args("btTransform::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::operator *",1,"btTransform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransform::operator *",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform___mul",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform___mul",2,SWIGTYPE_p_btTransform);
  }
  
  result = ((btTransform const *)arg1)->operator *((btTransform const &)*arg2);
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btTransform___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btTransform___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btTransform___mul__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btTransform___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTransform::operator *(btVector3 const &) const\n"
    "    btTransform::operator *(btQuaternion const &) const\n"
    "    btTransform::operator *(btTransform const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_btTransform_getIdentity(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btTransform::getIdentity",0,0)
  result = (btTransform *) &btTransform::getIdentity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformFloatData *arg2 = 0 ;
  
  SWIG_check_num_args("btTransform::serialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::serialize",1,"btTransform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransform::serialize",2,"btTransformFloatData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_serialize",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransformFloatData,0))){
    SWIG_fail_ptr("btTransform_serialize",2,SWIGTYPE_p_btTransformFloatData);
  }
  
  ((btTransform const *)arg1)->serialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_serializeFloat(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformFloatData *arg2 = 0 ;
  
  SWIG_check_num_args("btTransform::serializeFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::serializeFloat",1,"btTransform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransform::serializeFloat",2,"btTransformFloatData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_serializeFloat",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransformFloatData,0))){
    SWIG_fail_ptr("btTransform_serializeFloat",2,SWIGTYPE_p_btTransformFloatData);
  }
  
  ((btTransform const *)arg1)->serializeFloat(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_deSerialize(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformFloatData *arg2 = 0 ;
  
  SWIG_check_num_args("btTransform::deSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::deSerialize",1,"btTransform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransform::deSerialize",2,"btTransformFloatData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_deSerialize",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransformFloatData,0))){
    SWIG_fail_ptr("btTransform_deSerialize",2,SWIGTYPE_p_btTransformFloatData);
  }
  
  (arg1)->deSerialize((btTransformFloatData const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_deSerializeDouble(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformDoubleData *arg2 = 0 ;
  
  SWIG_check_num_args("btTransform::deSerializeDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::deSerializeDouble",1,"btTransform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransform::deSerializeDouble",2,"btTransformDoubleData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_deSerializeDouble",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransformDoubleData,0))){
    SWIG_fail_ptr("btTransform_deSerializeDouble",2,SWIGTYPE_p_btTransformDoubleData);
  }
  
  (arg1)->deSerializeDouble((btTransformDoubleData const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransform_deSerializeFloat(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformFloatData *arg2 = 0 ;
  
  SWIG_check_num_args("btTransform::deSerializeFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransform::deSerializeFloat",1,"btTransform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransform::deSerializeFloat",2,"btTransformFloatData const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransform_deSerializeFloat",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransformFloatData,0))){
    SWIG_fail_ptr("btTransform_deSerializeFloat",2,SWIGTYPE_p_btTransformFloatData);
  }
  
  (arg1)->deSerializeFloat((btTransformFloatData const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTransform(void *obj) {
btTransform *arg1 = (btTransform *) obj;
delete arg1;
}
static swig_lua_method swig_btTransform_methods[] = {
    {"mult", _wrap_btTransform_mult}, 
    {"__call", _wrap_btTransform___call}, 
    {"getBasis", _wrap_btTransform_getBasis}, 
    {"getOrigin", _wrap_btTransform_getOrigin}, 
    {"getRotation", _wrap_btTransform_getRotation}, 
    {"setFromOpenGLMatrix", _wrap_btTransform_setFromOpenGLMatrix}, 
    {"getOpenGLMatrix", _wrap_btTransform_getOpenGLMatrix}, 
    {"setOrigin", _wrap_btTransform_setOrigin}, 
    {"invXform", _wrap_btTransform_invXform}, 
    {"setBasis", _wrap_btTransform_setBasis}, 
    {"setRotation", _wrap_btTransform_setRotation}, 
    {"setIdentity", _wrap_btTransform_setIdentity}, 
    {"inverse", _wrap_btTransform_inverse}, 
    {"inverseTimes", _wrap_btTransform_inverseTimes}, 
    {"__mul", _wrap_btTransform___mul}, 
    {"serialize", _wrap_btTransform_serialize}, 
    {"serializeFloat", _wrap_btTransform_serializeFloat}, 
    {"deSerialize", _wrap_btTransform_deSerialize}, 
    {"deSerializeDouble", _wrap_btTransform_deSerializeDouble}, 
    {"deSerializeFloat", _wrap_btTransform_deSerializeFloat}, 
    {0,0}
};
static swig_lua_attribute swig_btTransform_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btTransform_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTransform_cls_methods[] = {
    {"getIdentity", _wrap_btTransform_getIdentity}, 
    {0,0}
};
static swig_lua_const_info swig_btTransform_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTransform_bases[] = {0};
static const char *swig_btTransform_base_names[] = {0};
static swig_lua_class _wrap_class_btTransform = { "btTransform", &SWIGTYPE_p_btTransform,_wrap_new_btTransform, swig_delete_btTransform, swig_btTransform_methods, swig_btTransform_attributes, { "btTransform", swig_btTransform_cls_methods, swig_btTransform_cls_attributes, swig_btTransform_cls_constants }, swig_btTransform_bases, swig_btTransform_base_names };

static int _wrap_btTransformFloatData_m_basis_set(lua_State* L) {
  int SWIG_arg = 0;
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  btMatrix3x3FloatData *arg2 = (btMatrix3x3FloatData *) 0 ;
  
  SWIG_check_num_args("btTransformFloatData::m_basis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransformFloatData::m_basis",1,"btTransformFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTransformFloatData::m_basis",2,"btMatrix3x3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransformFloatData,0))){
    SWIG_fail_ptr("btTransformFloatData_m_basis_set",1,SWIGTYPE_p_btTransformFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMatrix3x3FloatData,0))){
    SWIG_fail_ptr("btTransformFloatData_m_basis_set",2,SWIGTYPE_p_btMatrix3x3FloatData);
  }
  
  if (arg1) (arg1)->m_basis = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransformFloatData_m_basis_get(lua_State* L) {
  int SWIG_arg = 0;
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  btMatrix3x3FloatData *result = 0 ;
  
  SWIG_check_num_args("btTransformFloatData::m_basis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransformFloatData::m_basis",1,"btTransformFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransformFloatData,0))){
    SWIG_fail_ptr("btTransformFloatData_m_basis_get",1,SWIGTYPE_p_btTransformFloatData);
  }
  
  result = (btMatrix3x3FloatData *)& ((arg1)->m_basis);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMatrix3x3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransformFloatData_m_origin_set(lua_State* L) {
  int SWIG_arg = 0;
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btTransformFloatData::m_origin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransformFloatData::m_origin",1,"btTransformFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTransformFloatData::m_origin",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransformFloatData,0))){
    SWIG_fail_ptr("btTransformFloatData_m_origin_set",1,SWIGTYPE_p_btTransformFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btTransformFloatData_m_origin_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_origin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransformFloatData_m_origin_get(lua_State* L) {
  int SWIG_arg = 0;
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btTransformFloatData::m_origin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransformFloatData::m_origin",1,"btTransformFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransformFloatData,0))){
    SWIG_fail_ptr("btTransformFloatData_m_origin_get",1,SWIGTYPE_p_btTransformFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_origin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTransformFloatData(lua_State* L) {
  int SWIG_arg = 0;
  btTransformFloatData *result = 0 ;
  
  SWIG_check_num_args("btTransformFloatData::btTransformFloatData",0,0)
  result = (btTransformFloatData *)new btTransformFloatData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransformFloatData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTransformFloatData(void *obj) {
btTransformFloatData *arg1 = (btTransformFloatData *) obj;
delete arg1;
}
static swig_lua_method swig_btTransformFloatData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btTransformFloatData_attributes[] = {
    { "m_basis", _wrap_btTransformFloatData_m_basis_get, _wrap_btTransformFloatData_m_basis_set},
    { "m_origin", _wrap_btTransformFloatData_m_origin_get, _wrap_btTransformFloatData_m_origin_set},
    {0,0,0}
};
static swig_lua_attribute swig_btTransformFloatData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTransformFloatData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTransformFloatData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTransformFloatData_bases[] = {0};
static const char *swig_btTransformFloatData_base_names[] = {0};
static swig_lua_class _wrap_class_btTransformFloatData = { "btTransformFloatData", &SWIGTYPE_p_btTransformFloatData,_wrap_new_btTransformFloatData, swig_delete_btTransformFloatData, swig_btTransformFloatData_methods, swig_btTransformFloatData_attributes, { "btTransformFloatData", swig_btTransformFloatData_cls_methods, swig_btTransformFloatData_cls_attributes, swig_btTransformFloatData_cls_constants }, swig_btTransformFloatData_bases, swig_btTransformFloatData_base_names };

static int _wrap_btTransformDoubleData_m_basis_set(lua_State* L) {
  int SWIG_arg = 0;
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  btMatrix3x3DoubleData *arg2 = (btMatrix3x3DoubleData *) 0 ;
  
  SWIG_check_num_args("btTransformDoubleData::m_basis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransformDoubleData::m_basis",1,"btTransformDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTransformDoubleData::m_basis",2,"btMatrix3x3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransformDoubleData,0))){
    SWIG_fail_ptr("btTransformDoubleData_m_basis_set",1,SWIGTYPE_p_btTransformDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMatrix3x3DoubleData,0))){
    SWIG_fail_ptr("btTransformDoubleData_m_basis_set",2,SWIGTYPE_p_btMatrix3x3DoubleData);
  }
  
  if (arg1) (arg1)->m_basis = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransformDoubleData_m_basis_get(lua_State* L) {
  int SWIG_arg = 0;
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  btMatrix3x3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btTransformDoubleData::m_basis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransformDoubleData::m_basis",1,"btTransformDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransformDoubleData,0))){
    SWIG_fail_ptr("btTransformDoubleData_m_basis_get",1,SWIGTYPE_p_btTransformDoubleData);
  }
  
  result = (btMatrix3x3DoubleData *)& ((arg1)->m_basis);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMatrix3x3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransformDoubleData_m_origin_set(lua_State* L) {
  int SWIG_arg = 0;
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btTransformDoubleData::m_origin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransformDoubleData::m_origin",1,"btTransformDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTransformDoubleData::m_origin",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransformDoubleData,0))){
    SWIG_fail_ptr("btTransformDoubleData_m_origin_set",1,SWIGTYPE_p_btTransformDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btTransformDoubleData_m_origin_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_origin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransformDoubleData_m_origin_get(lua_State* L) {
  int SWIG_arg = 0;
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btTransformDoubleData::m_origin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTransformDoubleData::m_origin",1,"btTransformDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransformDoubleData,0))){
    SWIG_fail_ptr("btTransformDoubleData_m_origin_get",1,SWIGTYPE_p_btTransformDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_origin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTransformDoubleData(lua_State* L) {
  int SWIG_arg = 0;
  btTransformDoubleData *result = 0 ;
  
  SWIG_check_num_args("btTransformDoubleData::btTransformDoubleData",0,0)
  result = (btTransformDoubleData *)new btTransformDoubleData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransformDoubleData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTransformDoubleData(void *obj) {
btTransformDoubleData *arg1 = (btTransformDoubleData *) obj;
delete arg1;
}
static swig_lua_method swig_btTransformDoubleData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btTransformDoubleData_attributes[] = {
    { "m_basis", _wrap_btTransformDoubleData_m_basis_get, _wrap_btTransformDoubleData_m_basis_set},
    { "m_origin", _wrap_btTransformDoubleData_m_origin_get, _wrap_btTransformDoubleData_m_origin_set},
    {0,0,0}
};
static swig_lua_attribute swig_btTransformDoubleData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTransformDoubleData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTransformDoubleData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTransformDoubleData_bases[] = {0};
static const char *swig_btTransformDoubleData_base_names[] = {0};
static swig_lua_class _wrap_class_btTransformDoubleData = { "btTransformDoubleData", &SWIGTYPE_p_btTransformDoubleData,_wrap_new_btTransformDoubleData, swig_delete_btTransformDoubleData, swig_btTransformDoubleData_methods, swig_btTransformDoubleData_attributes, { "btTransformDoubleData", swig_btTransformDoubleData_cls_methods, swig_btTransformDoubleData_cls_attributes, swig_btTransformDoubleData_cls_constants }, swig_btTransformDoubleData_bases, swig_btTransformDoubleData_base_names };

static int _wrap_AabbExpand(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("AabbExpand",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AabbExpand",1,"btVector3 &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AabbExpand",2,"btVector3 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AabbExpand",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("AabbExpand",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("AabbExpand",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("AabbExpand",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("AabbExpand",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("AabbExpand",4,SWIGTYPE_p_btVector3);
  }
  
  AabbExpand(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TestPointAgainstAabb2(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("TestPointAgainstAabb2",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TestPointAgainstAabb2",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TestPointAgainstAabb2",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TestPointAgainstAabb2",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TestPointAgainstAabb2",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TestPointAgainstAabb2",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TestPointAgainstAabb2",3,SWIGTYPE_p_btVector3);
  }
  
  result = (bool)TestPointAgainstAabb2((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TestAabbAgainstAabb2(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("TestAabbAgainstAabb2",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TestAabbAgainstAabb2",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TestAabbAgainstAabb2",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TestAabbAgainstAabb2",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("TestAabbAgainstAabb2",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TestAabbAgainstAabb2",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TestAabbAgainstAabb2",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TestAabbAgainstAabb2",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TestAabbAgainstAabb2",4,SWIGTYPE_p_btVector3);
  }
  
  result = (bool)TestAabbAgainstAabb2((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TestTriangleAgainstAabb2(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("TestTriangleAgainstAabb2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TestTriangleAgainstAabb2",1,"btVector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TestTriangleAgainstAabb2",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TestTriangleAgainstAabb2",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TestTriangleAgainstAabb2",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TestTriangleAgainstAabb2",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TestTriangleAgainstAabb2",3,SWIGTYPE_p_btVector3);
  }
  
  result = (bool)TestTriangleAgainstAabb2((btVector3 const *)arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOutcode(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("btOutcode",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btOutcode",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btOutcode",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btOutcode",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btOutcode",2,SWIGTYPE_p_btVector3);
  }
  
  result = (int)btOutcode((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRayAabb2(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned int *arg3 ;
  btVector3 *arg4 ;
  btScalar *arg5 = 0 ;
  btScalar arg6 ;
  btScalar arg7 ;
  bool result;
  
  SWIG_check_num_args("btRayAabb2",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btRayAabb2",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRayAabb2",2,"btVector3 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btRayAabb2",3,"unsigned int const [3]");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btRayAabb2",4,"btVector3 const [2]");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btRayAabb2",5,"btScalar &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btRayAabb2",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("btRayAabb2",7,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRayAabb2",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRayAabb2",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("btRayAabb2",3,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRayAabb2",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btRayAabb2",5,SWIGTYPE_p_float);
  }
  
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  result = (bool)btRayAabb2((btVector3 const &)*arg1,(btVector3 const &)*arg2,(unsigned int const (*))arg3,(btVector3 const (*))arg4,*arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRayAabb(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  bool result;
  
  SWIG_check_num_args("btRayAabb",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btRayAabb",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRayAabb",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btRayAabb",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btRayAabb",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btRayAabb",5,"btScalar &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btRayAabb",6,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRayAabb",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRayAabb",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRayAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRayAabb",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btRayAabb",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRayAabb",6,SWIGTYPE_p_btVector3);
  }
  
  result = (bool)btRayAabb((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,*arg5,*arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransformAabb__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btScalar arg2 ;
  btTransform *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  SWIG_check_num_args("btTransformAabb",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btTransformAabb",1,"btVector3 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTransformAabb",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTransformAabb",3,"btTransform const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btTransformAabb",4,"btVector3 &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btTransformAabb",5,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransformAabb",1,SWIGTYPE_p_btVector3);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransformAabb",3,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransformAabb",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransformAabb",5,SWIGTYPE_p_btVector3);
  }
  
  btTransformAabb((btVector3 const &)*arg1,arg2,(btTransform const &)*arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransformAabb__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  SWIG_check_num_args("btTransformAabb",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btTransformAabb",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransformAabb",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btTransformAabb",3,"btScalar");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btTransformAabb",4,"btTransform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btTransformAabb",5,"btVector3 &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btTransformAabb",6,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransformAabb",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransformAabb",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransformAabb",4,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransformAabb",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransformAabb",6,SWIGTYPE_p_btVector3);
  }
  
  btTransformAabb((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,(btTransform const &)*arg4,*arg5,*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransformAabb(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_btTransformAabb__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_btTransformAabb__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btTransformAabb'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTransformAabb(btVector3 const &,btScalar,btTransform const &,btVector3 &,btVector3 &)\n"
    "    btTransformAabb(btVector3 const &,btVector3 const &,btScalar,btTransform const &,btVector3 &,btVector3 &)\n");
  lua_error(L);return 0;
}


static int _wrap_testQuantizedAabbAgainstQuantizedAabb(lua_State* L) {
  int SWIG_arg = 0;
  unsigned short *arg1 = (unsigned short *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  unsigned short *arg4 = (unsigned short *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("testQuantizedAabbAgainstQuantizedAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("testQuantizedAabbAgainstQuantizedAabb",1,"unsigned short const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("testQuantizedAabbAgainstQuantizedAabb",2,"unsigned short const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("testQuantizedAabbAgainstQuantizedAabb",3,"unsigned short const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("testQuantizedAabbAgainstQuantizedAabb",4,"unsigned short const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("testQuantizedAabbAgainstQuantizedAabb",1,SWIGTYPE_p_unsigned_short);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("testQuantizedAabbAgainstQuantizedAabb",2,SWIGTYPE_p_unsigned_short);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("testQuantizedAabbAgainstQuantizedAabb",3,SWIGTYPE_p_unsigned_short);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("testQuantizedAabbAgainstQuantizedAabb",4,SWIGTYPE_p_unsigned_short);
  }
  
  result = (unsigned int)testQuantizedAabbAgainstQuantizedAabb((unsigned short const *)arg1,(unsigned short const *)arg2,(unsigned short const *)arg3,(unsigned short const *)arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMotionState_getWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  btMotionState *arg1 = (btMotionState *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("btMotionState::getWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMotionState::getWorldTransform",1,"btMotionState const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMotionState::getWorldTransform",2,"btTransform &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMotionState,0))){
    SWIG_fail_ptr("btMotionState_getWorldTransform",1,SWIGTYPE_p_btMotionState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btMotionState_getWorldTransform",2,SWIGTYPE_p_btTransform);
  }
  
  ((btMotionState const *)arg1)->getWorldTransform(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMotionState_setWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  btMotionState *arg1 = (btMotionState *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("btMotionState::setWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMotionState::setWorldTransform",1,"btMotionState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMotionState::setWorldTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMotionState,0))){
    SWIG_fail_ptr("btMotionState_setWorldTransform",1,SWIGTYPE_p_btMotionState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btMotionState_setWorldTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btMotionState(void *obj) {
btMotionState *arg1 = (btMotionState *) obj;
delete arg1;
}
static swig_lua_method swig_btMotionState_methods[] = {
    {"getWorldTransform", _wrap_btMotionState_getWorldTransform}, 
    {"setWorldTransform", _wrap_btMotionState_setWorldTransform}, 
    {0,0}
};
static swig_lua_attribute swig_btMotionState_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btMotionState_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btMotionState_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btMotionState_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btMotionState_bases[] = {0};
static const char *swig_btMotionState_base_names[] = {0};
static swig_lua_class _wrap_class_btMotionState = { "btMotionState", &SWIGTYPE_p_btMotionState,0, swig_delete_btMotionState, swig_btMotionState_methods, swig_btMotionState_attributes, { "btMotionState", swig_btMotionState_cls_methods, swig_btMotionState_cls_attributes, swig_btMotionState_cls_constants }, swig_btMotionState_bases, swig_btMotionState_base_names };

static int _wrap_btDefaultMotionState_m_graphicsWorldTrans_set(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  SWIG_check_num_args("btDefaultMotionState::m_graphicsWorldTrans",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultMotionState::m_graphicsWorldTrans",1,"btDefaultMotionState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDefaultMotionState::m_graphicsWorldTrans",2,"btTransform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultMotionState,0))){
    SWIG_fail_ptr("btDefaultMotionState_m_graphicsWorldTrans_set",1,SWIGTYPE_p_btDefaultMotionState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btDefaultMotionState_m_graphicsWorldTrans_set",2,SWIGTYPE_p_btTransform);
  }
  
  if (arg1) (arg1)->m_graphicsWorldTrans = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultMotionState_m_graphicsWorldTrans_get(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btDefaultMotionState::m_graphicsWorldTrans",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultMotionState::m_graphicsWorldTrans",1,"btDefaultMotionState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultMotionState,0))){
    SWIG_fail_ptr("btDefaultMotionState_m_graphicsWorldTrans_get",1,SWIGTYPE_p_btDefaultMotionState);
  }
  
  result = (btTransform *)& ((arg1)->m_graphicsWorldTrans);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultMotionState_m_centerOfMassOffset_set(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  SWIG_check_num_args("btDefaultMotionState::m_centerOfMassOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultMotionState::m_centerOfMassOffset",1,"btDefaultMotionState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDefaultMotionState::m_centerOfMassOffset",2,"btTransform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultMotionState,0))){
    SWIG_fail_ptr("btDefaultMotionState_m_centerOfMassOffset_set",1,SWIGTYPE_p_btDefaultMotionState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btDefaultMotionState_m_centerOfMassOffset_set",2,SWIGTYPE_p_btTransform);
  }
  
  if (arg1) (arg1)->m_centerOfMassOffset = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultMotionState_m_centerOfMassOffset_get(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btDefaultMotionState::m_centerOfMassOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultMotionState::m_centerOfMassOffset",1,"btDefaultMotionState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultMotionState,0))){
    SWIG_fail_ptr("btDefaultMotionState_m_centerOfMassOffset_get",1,SWIGTYPE_p_btDefaultMotionState);
  }
  
  result = (btTransform *)& ((arg1)->m_centerOfMassOffset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultMotionState_m_startWorldTrans_set(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  SWIG_check_num_args("btDefaultMotionState::m_startWorldTrans",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultMotionState::m_startWorldTrans",1,"btDefaultMotionState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDefaultMotionState::m_startWorldTrans",2,"btTransform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultMotionState,0))){
    SWIG_fail_ptr("btDefaultMotionState_m_startWorldTrans_set",1,SWIGTYPE_p_btDefaultMotionState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btDefaultMotionState_m_startWorldTrans_set",2,SWIGTYPE_p_btTransform);
  }
  
  if (arg1) (arg1)->m_startWorldTrans = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultMotionState_m_startWorldTrans_get(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btDefaultMotionState::m_startWorldTrans",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultMotionState::m_startWorldTrans",1,"btDefaultMotionState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultMotionState,0))){
    SWIG_fail_ptr("btDefaultMotionState_m_startWorldTrans_get",1,SWIGTYPE_p_btDefaultMotionState);
  }
  
  result = (btTransform *)& ((arg1)->m_startWorldTrans);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultMotionState_m_userPointer_set(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btDefaultMotionState::m_userPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultMotionState::m_userPointer",1,"btDefaultMotionState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDefaultMotionState::m_userPointer",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultMotionState,0))){
    SWIG_fail_ptr("btDefaultMotionState_m_userPointer_set",1,SWIGTYPE_p_btDefaultMotionState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btDefaultMotionState_m_userPointer_set");
  if (arg1) (arg1)->m_userPointer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultMotionState_m_userPointer_get(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btDefaultMotionState::m_userPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultMotionState::m_userPointer",1,"btDefaultMotionState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultMotionState,0))){
    SWIG_fail_ptr("btDefaultMotionState_m_userPointer_get",1,SWIGTYPE_p_btDefaultMotionState);
  }
  
  result = (void *) ((arg1)->m_userPointer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btDefaultMotionState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btDefaultMotionState *result = 0 ;
  
  SWIG_check_num_args("btDefaultMotionState::btDefaultMotionState",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btDefaultMotionState::btDefaultMotionState",1,"btTransform const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btDefaultMotionState::btDefaultMotionState",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("new_btDefaultMotionState",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("new_btDefaultMotionState",2,SWIGTYPE_p_btTransform);
  }
  
  result = (btDefaultMotionState *)new btDefaultMotionState((btTransform const &)*arg1,(btTransform const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDefaultMotionState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btDefaultMotionState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = 0 ;
  btDefaultMotionState *result = 0 ;
  
  SWIG_check_num_args("btDefaultMotionState::btDefaultMotionState",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btDefaultMotionState::btDefaultMotionState",1,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("new_btDefaultMotionState",1,SWIGTYPE_p_btTransform);
  }
  
  result = (btDefaultMotionState *)new btDefaultMotionState((btTransform const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDefaultMotionState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btDefaultMotionState__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultMotionState *result = 0 ;
  
  SWIG_check_num_args("btDefaultMotionState::btDefaultMotionState",0,0)
  result = (btDefaultMotionState *)new btDefaultMotionState();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDefaultMotionState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btDefaultMotionState(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btDefaultMotionState__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_btDefaultMotionState__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_btDefaultMotionState__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btDefaultMotionState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btDefaultMotionState::btDefaultMotionState(btTransform const &,btTransform const &)\n"
    "    btDefaultMotionState::btDefaultMotionState(btTransform const &)\n"
    "    btDefaultMotionState::btDefaultMotionState()\n");
  lua_error(L);return 0;
}


static int _wrap_btDefaultMotionState_getWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("btDefaultMotionState::getWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultMotionState::getWorldTransform",1,"btDefaultMotionState const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btDefaultMotionState::getWorldTransform",2,"btTransform &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultMotionState,0))){
    SWIG_fail_ptr("btDefaultMotionState_getWorldTransform",1,SWIGTYPE_p_btDefaultMotionState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btDefaultMotionState_getWorldTransform",2,SWIGTYPE_p_btTransform);
  }
  
  ((btDefaultMotionState const *)arg1)->getWorldTransform(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultMotionState_setWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("btDefaultMotionState::setWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultMotionState::setWorldTransform",1,"btDefaultMotionState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btDefaultMotionState::setWorldTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultMotionState,0))){
    SWIG_fail_ptr("btDefaultMotionState_setWorldTransform",1,SWIGTYPE_p_btDefaultMotionState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btDefaultMotionState_setWorldTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btDefaultMotionState(void *obj) {
btDefaultMotionState *arg1 = (btDefaultMotionState *) obj;
delete arg1;
}
static swig_lua_method swig_btDefaultMotionState_methods[] = {
    {"getWorldTransform", _wrap_btDefaultMotionState_getWorldTransform}, 
    {"setWorldTransform", _wrap_btDefaultMotionState_setWorldTransform}, 
    {0,0}
};
static swig_lua_attribute swig_btDefaultMotionState_attributes[] = {
    { "m_graphicsWorldTrans", _wrap_btDefaultMotionState_m_graphicsWorldTrans_get, _wrap_btDefaultMotionState_m_graphicsWorldTrans_set},
    { "m_centerOfMassOffset", _wrap_btDefaultMotionState_m_centerOfMassOffset_get, _wrap_btDefaultMotionState_m_centerOfMassOffset_set},
    { "m_startWorldTrans", _wrap_btDefaultMotionState_m_startWorldTrans_get, _wrap_btDefaultMotionState_m_startWorldTrans_set},
    { "m_userPointer", _wrap_btDefaultMotionState_m_userPointer_get, _wrap_btDefaultMotionState_m_userPointer_set},
    {0,0,0}
};
static swig_lua_attribute swig_btDefaultMotionState_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btDefaultMotionState_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btDefaultMotionState_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btDefaultMotionState_bases[] = {0,0};
static const char *swig_btDefaultMotionState_base_names[] = {"btMotionState *",0};
static swig_lua_class _wrap_class_btDefaultMotionState = { "btDefaultMotionState", &SWIGTYPE_p_btDefaultMotionState,_wrap_new_btDefaultMotionState, swig_delete_btDefaultMotionState, swig_btDefaultMotionState_methods, swig_btDefaultMotionState_attributes, { "btDefaultMotionState", swig_btDefaultMotionState_cls_methods, swig_btDefaultMotionState_cls_attributes, swig_btDefaultMotionState_cls_constants }, swig_btDefaultMotionState_bases, swig_btDefaultMotionState_base_names };

static int _wrap_btGeometryUtil_getPlaneEquationsFromVertices(lua_State* L) {
  int SWIG_arg = 0;
  btAlignedObjectArray< btVector3 > *arg1 = 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = 0 ;
  
  SWIG_check_num_args("btGeometryUtil::getPlaneEquationsFromVertices",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btGeometryUtil::getPlaneEquationsFromVertices",1,"btAlignedObjectArray< btVector3 > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGeometryUtil::getPlaneEquationsFromVertices",2,"btAlignedObjectArray< btVector3 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t,0))){
    SWIG_fail_ptr("btGeometryUtil_getPlaneEquationsFromVertices",1,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t,0))){
    SWIG_fail_ptr("btGeometryUtil_getPlaneEquationsFromVertices",2,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t);
  }
  
  btGeometryUtil::getPlaneEquationsFromVertices(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeometryUtil_getVerticesFromPlaneEquations(lua_State* L) {
  int SWIG_arg = 0;
  btAlignedObjectArray< btVector3 > *arg1 = 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = 0 ;
  
  SWIG_check_num_args("btGeometryUtil::getVerticesFromPlaneEquations",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btGeometryUtil::getVerticesFromPlaneEquations",1,"btAlignedObjectArray< btVector3 > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGeometryUtil::getVerticesFromPlaneEquations",2,"btAlignedObjectArray< btVector3 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t,0))){
    SWIG_fail_ptr("btGeometryUtil_getVerticesFromPlaneEquations",1,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t,0))){
    SWIG_fail_ptr("btGeometryUtil_getVerticesFromPlaneEquations",2,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t);
  }
  
  btGeometryUtil::getVerticesFromPlaneEquations((btAlignedObjectArray< btVector3 > const &)*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeometryUtil_isPointInsidePlanes(lua_State* L) {
  int SWIG_arg = 0;
  btAlignedObjectArray< btVector3 > *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  SWIG_check_num_args("btGeometryUtil::isPointInsidePlanes",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btGeometryUtil::isPointInsidePlanes",1,"btAlignedObjectArray< btVector3 > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGeometryUtil::isPointInsidePlanes",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btGeometryUtil::isPointInsidePlanes",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t,0))){
    SWIG_fail_ptr("btGeometryUtil_isPointInsidePlanes",1,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeometryUtil_isPointInsidePlanes",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  result = (bool)btGeometryUtil::isPointInsidePlanes((btAlignedObjectArray< btVector3 > const &)*arg1,(btVector3 const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeometryUtil_areVerticesBehindPlane(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  SWIG_check_num_args("btGeometryUtil::areVerticesBehindPlane",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btGeometryUtil::areVerticesBehindPlane",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGeometryUtil::areVerticesBehindPlane",2,"btAlignedObjectArray< btVector3 > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btGeometryUtil::areVerticesBehindPlane",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeometryUtil_areVerticesBehindPlane",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t,0))){
    SWIG_fail_ptr("btGeometryUtil_areVerticesBehindPlane",2,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  result = (bool)btGeometryUtil::areVerticesBehindPlane((btVector3 const &)*arg1,(btAlignedObjectArray< btVector3 > const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btGeometryUtil(lua_State* L) {
  int SWIG_arg = 0;
  btGeometryUtil *result = 0 ;
  
  SWIG_check_num_args("btGeometryUtil::btGeometryUtil",0,0)
  result = (btGeometryUtil *)new btGeometryUtil();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGeometryUtil,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btGeometryUtil(void *obj) {
btGeometryUtil *arg1 = (btGeometryUtil *) obj;
delete arg1;
}
static swig_lua_method swig_btGeometryUtil_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btGeometryUtil_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btGeometryUtil_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btGeometryUtil_cls_methods[] = {
    {"getPlaneEquationsFromVertices", _wrap_btGeometryUtil_getPlaneEquationsFromVertices}, 
    {"getVerticesFromPlaneEquations", _wrap_btGeometryUtil_getVerticesFromPlaneEquations}, 
    {"isPointInsidePlanes", _wrap_btGeometryUtil_isPointInsidePlanes}, 
    {"areVerticesBehindPlane", _wrap_btGeometryUtil_areVerticesBehindPlane}, 
    {0,0}
};
static swig_lua_const_info swig_btGeometryUtil_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btGeometryUtil_bases[] = {0};
static const char *swig_btGeometryUtil_base_names[] = {0};
static swig_lua_class _wrap_class_btGeometryUtil = { "btGeometryUtil", &SWIGTYPE_p_btGeometryUtil,_wrap_new_btGeometryUtil, swig_delete_btGeometryUtil, swig_btGeometryUtil_methods, swig_btGeometryUtil_attributes, { "btGeometryUtil", swig_btGeometryUtil_cls_methods, swig_btGeometryUtil_cls_attributes, swig_btGeometryUtil_cls_constants }, swig_btGeometryUtil_bases, swig_btGeometryUtil_base_names };

static int _wrap_btIDebugDraw_drawLine__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btIDebugDraw::drawLine",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawLine",1,"btIDebugDraw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btIDebugDraw::drawLine",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btIDebugDraw::drawLine",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btIDebugDraw::drawLine",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawLine",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawLine",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawLine",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawLine",4,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->drawLine((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawLine__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  SWIG_check_num_args("btIDebugDraw::drawLine",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawLine",1,"btIDebugDraw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btIDebugDraw::drawLine",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btIDebugDraw::drawLine",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btIDebugDraw::drawLine",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btIDebugDraw::drawLine",5,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawLine",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawLine",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawLine",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawLine",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawLine",5,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->drawLine((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawLine(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btIDebugDraw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btIDebugDraw_drawLine__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btIDebugDraw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_btIDebugDraw_drawLine__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btIDebugDraw_drawLine'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btIDebugDraw::drawLine(btVector3 const &,btVector3 const &,btVector3 const &)\n"
    "    btIDebugDraw::drawLine(btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btIDebugDraw_drawSphere__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btTransform *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btIDebugDraw::drawSphere",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawSphere",1,"btIDebugDraw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btIDebugDraw::drawSphere",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btIDebugDraw::drawSphere",3,"btTransform const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btIDebugDraw::drawSphere",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawSphere",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btIDebugDraw_drawSphere",3,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawSphere",4,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->drawSphere(arg2,(btTransform const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawSphere__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btIDebugDraw::drawSphere",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawSphere",1,"btIDebugDraw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btIDebugDraw::drawSphere",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btIDebugDraw::drawSphere",3,"btScalar");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btIDebugDraw::drawSphere",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawSphere",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawSphere",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawSphere",4,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->drawSphere((btVector3 const &)*arg2,arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawSphere(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btIDebugDraw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btIDebugDraw_drawSphere__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btIDebugDraw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btIDebugDraw_drawSphere__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btIDebugDraw_drawSphere'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btIDebugDraw::drawSphere(btScalar,btTransform const &,btVector3 const &)\n"
    "    btIDebugDraw::drawSphere(btVector3 const &,btScalar,btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btIDebugDraw_drawTriangle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  btScalar arg9 ;
  
  SWIG_check_num_args("btIDebugDraw::drawTriangle",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawTriangle",1,"btIDebugDraw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btIDebugDraw::drawTriangle",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btIDebugDraw::drawTriangle",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btIDebugDraw::drawTriangle",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btIDebugDraw::drawTriangle",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btIDebugDraw::drawTriangle",6,"btVector3 const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btIDebugDraw::drawTriangle",7,"btVector3 const &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btIDebugDraw::drawTriangle",8,"btVector3 const &");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("btIDebugDraw::drawTriangle",9,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawTriangle",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawTriangle",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawTriangle",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawTriangle",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawTriangle",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawTriangle",6,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawTriangle",7,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawTriangle",8,SWIGTYPE_p_btVector3);
  }
  
  arg9 = (btScalar)lua_tonumber(L, 9);
  (arg1)->drawTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawTriangle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btScalar arg6 ;
  
  SWIG_check_num_args("btIDebugDraw::drawTriangle",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawTriangle",1,"btIDebugDraw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btIDebugDraw::drawTriangle",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btIDebugDraw::drawTriangle",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btIDebugDraw::drawTriangle",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btIDebugDraw::drawTriangle",5,"btVector3 const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btIDebugDraw::drawTriangle",6,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawTriangle",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawTriangle",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawTriangle",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawTriangle",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawTriangle",5,SWIGTYPE_p_btVector3);
  }
  
  arg6 = (btScalar)lua_tonumber(L, 6);
  (arg1)->drawTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawTriangle(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btIDebugDraw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_btIDebugDraw_drawTriangle__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btIDebugDraw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_btIDebugDraw_drawTriangle__SWIG_0(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btIDebugDraw_drawTriangle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btIDebugDraw::drawTriangle(btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &,btScalar)\n"
    "    btIDebugDraw::drawTriangle(btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &,btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btIDebugDraw_drawContactPoint(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  int arg5 ;
  btVector3 *arg6 = 0 ;
  
  SWIG_check_num_args("btIDebugDraw::drawContactPoint",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawContactPoint",1,"btIDebugDraw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btIDebugDraw::drawContactPoint",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btIDebugDraw::drawContactPoint",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btIDebugDraw::drawContactPoint",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btIDebugDraw::drawContactPoint",5,"int");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btIDebugDraw::drawContactPoint",6,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawContactPoint",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawContactPoint",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawContactPoint",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawContactPoint",6,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->drawContactPoint((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,(btVector3 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_reportErrorWarning(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("btIDebugDraw::reportErrorWarning",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::reportErrorWarning",1,"btIDebugDraw *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btIDebugDraw::reportErrorWarning",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_reportErrorWarning",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->reportErrorWarning((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_draw3dText(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("btIDebugDraw::draw3dText",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::draw3dText",1,"btIDebugDraw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btIDebugDraw::draw3dText",2,"btVector3 const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("btIDebugDraw::draw3dText",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_draw3dText",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_draw3dText",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->draw3dText((btVector3 const &)*arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_setDebugMode(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btIDebugDraw::setDebugMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::setDebugMode",1,"btIDebugDraw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btIDebugDraw::setDebugMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_setDebugMode",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDebugMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_getDebugMode(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  int result;
  
  SWIG_check_num_args("btIDebugDraw::getDebugMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::getDebugMode",1,"btIDebugDraw const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_getDebugMode",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  result = (int)((btIDebugDraw const *)arg1)->getDebugMode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawAabb(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btIDebugDraw::drawAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawAabb",1,"btIDebugDraw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btIDebugDraw::drawAabb",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btIDebugDraw::drawAabb",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btIDebugDraw::drawAabb",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawAabb",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawAabb",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawAabb",4,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->drawAabb((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawTransform(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btTransform *arg2 = 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btIDebugDraw::drawTransform",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawTransform",1,"btIDebugDraw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btIDebugDraw::drawTransform",2,"btTransform const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btIDebugDraw::drawTransform",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawTransform",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btIDebugDraw_drawTransform",2,SWIGTYPE_p_btTransform);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->drawTransform((btTransform const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawArc__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btVector3 *arg9 = 0 ;
  bool arg10 ;
  btScalar arg11 ;
  
  SWIG_check_num_args("btIDebugDraw::drawArc",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawArc",1,"btIDebugDraw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btIDebugDraw::drawArc",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btIDebugDraw::drawArc",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btIDebugDraw::drawArc",4,"btVector3 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btIDebugDraw::drawArc",5,"btScalar");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btIDebugDraw::drawArc",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("btIDebugDraw::drawArc",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("btIDebugDraw::drawArc",8,"btScalar");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("btIDebugDraw::drawArc",9,"btVector3 const &");
  if(!lua_isboolean(L,10)) SWIG_fail_arg("btIDebugDraw::drawArc",10,"bool");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("btIDebugDraw::drawArc",11,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawArc",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawArc",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawArc",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawArc",4,SWIGTYPE_p_btVector3);
  }
  
  arg5 = (btScalar)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (btScalar)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawArc",9,SWIGTYPE_p_btVector3);
  }
  
  arg10 = (lua_toboolean(L, 10)!=0);
  arg11 = (btScalar)lua_tonumber(L, 11);
  (arg1)->drawArc((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,(btVector3 const &)*arg9,arg10,arg11);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawArc__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btVector3 *arg9 = 0 ;
  bool arg10 ;
  
  SWIG_check_num_args("btIDebugDraw::drawArc",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawArc",1,"btIDebugDraw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btIDebugDraw::drawArc",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btIDebugDraw::drawArc",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btIDebugDraw::drawArc",4,"btVector3 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btIDebugDraw::drawArc",5,"btScalar");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btIDebugDraw::drawArc",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("btIDebugDraw::drawArc",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("btIDebugDraw::drawArc",8,"btScalar");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("btIDebugDraw::drawArc",9,"btVector3 const &");
  if(!lua_isboolean(L,10)) SWIG_fail_arg("btIDebugDraw::drawArc",10,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawArc",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawArc",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawArc",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawArc",4,SWIGTYPE_p_btVector3);
  }
  
  arg5 = (btScalar)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (btScalar)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawArc",9,SWIGTYPE_p_btVector3);
  }
  
  arg10 = (lua_toboolean(L, 10)!=0);
  (arg1)->drawArc((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,(btVector3 const &)*arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawArc(lua_State* L) {
  int argc;
  int argv[12]={
    1,2,3,4,5,6,7,8,9,10,11,12
  };
  
  argc = lua_gettop(L);
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btIDebugDraw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isboolean(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_btIDebugDraw_drawArc__SWIG_1(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btIDebugDraw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isboolean(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          return _wrap_btIDebugDraw_drawArc__SWIG_0(L);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btIDebugDraw_drawArc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btIDebugDraw::drawArc(btVector3 const &,btVector3 const &,btVector3 const &,btScalar,btScalar,btScalar,btScalar,btVector3 const &,bool,btScalar)\n"
    "    btIDebugDraw::drawArc(btVector3 const &,btVector3 const &,btVector3 const &,btScalar,btScalar,btScalar,btScalar,btVector3 const &,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_btIDebugDraw_drawSpherePatch__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btVector3 *arg10 = 0 ;
  btScalar arg11 ;
  
  SWIG_check_num_args("btIDebugDraw::drawSpherePatch",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",1,"btIDebugDraw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",4,"btVector3 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",5,"btScalar");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",8,"btScalar");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",9,"btScalar");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",10,"btVector3 const &");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",11,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawSpherePatch",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawSpherePatch",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawSpherePatch",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawSpherePatch",4,SWIGTYPE_p_btVector3);
  }
  
  arg5 = (btScalar)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (btScalar)lua_tonumber(L, 8);
  arg9 = (btScalar)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawSpherePatch",10,SWIGTYPE_p_btVector3);
  }
  
  arg11 = (btScalar)lua_tonumber(L, 11);
  (arg1)->drawSpherePatch((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,arg9,(btVector3 const &)*arg10,arg11);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawSpherePatch__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btVector3 *arg10 = 0 ;
  
  SWIG_check_num_args("btIDebugDraw::drawSpherePatch",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",1,"btIDebugDraw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",4,"btVector3 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",5,"btScalar");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",8,"btScalar");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",9,"btScalar");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("btIDebugDraw::drawSpherePatch",10,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawSpherePatch",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawSpherePatch",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawSpherePatch",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawSpherePatch",4,SWIGTYPE_p_btVector3);
  }
  
  arg5 = (btScalar)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (btScalar)lua_tonumber(L, 8);
  arg9 = (btScalar)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawSpherePatch",10,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->drawSpherePatch((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,arg9,(btVector3 const &)*arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawSpherePatch(lua_State* L) {
  int argc;
  int argv[12]={
    1,2,3,4,5,6,7,8,9,10,11,12
  };
  
  argc = lua_gettop(L);
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btIDebugDraw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        void *ptr;
                        if (lua_isuserdata(L,argv[9])==0 || SWIG_ConvertPtr(L,argv[9], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                          _v = 0;
                        } else {
                          _v = 1;
                        }
                      }
                      if (_v) {
                        return _wrap_btIDebugDraw_drawSpherePatch__SWIG_1(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btIDebugDraw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        void *ptr;
                        if (lua_isuserdata(L,argv[9])==0 || SWIG_ConvertPtr(L,argv[9], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                          _v = 0;
                        } else {
                          _v = 1;
                        }
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          return _wrap_btIDebugDraw_drawSpherePatch__SWIG_0(L);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btIDebugDraw_drawSpherePatch'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btIDebugDraw::drawSpherePatch(btVector3 const &,btVector3 const &,btVector3 const &,btScalar,btScalar,btScalar,btScalar,btScalar,btVector3 const &,btScalar)\n"
    "    btIDebugDraw::drawSpherePatch(btVector3 const &,btVector3 const &,btVector3 const &,btScalar,btScalar,btScalar,btScalar,btScalar,btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btIDebugDraw_drawBox__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btIDebugDraw::drawBox",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawBox",1,"btIDebugDraw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btIDebugDraw::drawBox",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btIDebugDraw::drawBox",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btIDebugDraw::drawBox",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawBox",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawBox",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawBox",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawBox",4,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->drawBox((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawBox__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  SWIG_check_num_args("btIDebugDraw::drawBox",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawBox",1,"btIDebugDraw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btIDebugDraw::drawBox",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btIDebugDraw::drawBox",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btIDebugDraw::drawBox",4,"btTransform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btIDebugDraw::drawBox",5,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawBox",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawBox",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawBox",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btIDebugDraw_drawBox",4,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawBox",5,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->drawBox((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawBox(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btIDebugDraw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btIDebugDraw_drawBox__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btIDebugDraw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_btIDebugDraw_drawBox__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btIDebugDraw_drawBox'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btIDebugDraw::drawBox(btVector3 const &,btVector3 const &,btVector3 const &)\n"
    "    btIDebugDraw::drawBox(btVector3 const &,btVector3 const &,btTransform const &,btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btIDebugDraw_drawCapsule(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  int arg4 ;
  btTransform *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  SWIG_check_num_args("btIDebugDraw::drawCapsule",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawCapsule",1,"btIDebugDraw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btIDebugDraw::drawCapsule",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btIDebugDraw::drawCapsule",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btIDebugDraw::drawCapsule",4,"int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btIDebugDraw::drawCapsule",5,"btTransform const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btIDebugDraw::drawCapsule",6,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawCapsule",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btIDebugDraw_drawCapsule",5,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawCapsule",6,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->drawCapsule(arg2,arg3,arg4,(btTransform const &)*arg5,(btVector3 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawCylinder(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  int arg4 ;
  btTransform *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  SWIG_check_num_args("btIDebugDraw::drawCylinder",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawCylinder",1,"btIDebugDraw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btIDebugDraw::drawCylinder",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btIDebugDraw::drawCylinder",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btIDebugDraw::drawCylinder",4,"int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btIDebugDraw::drawCylinder",5,"btTransform const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btIDebugDraw::drawCylinder",6,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawCylinder",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btIDebugDraw_drawCylinder",5,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawCylinder",6,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->drawCylinder(arg2,arg3,arg4,(btTransform const &)*arg5,(btVector3 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawCone(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  int arg4 ;
  btTransform *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  SWIG_check_num_args("btIDebugDraw::drawCone",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawCone",1,"btIDebugDraw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btIDebugDraw::drawCone",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btIDebugDraw::drawCone",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btIDebugDraw::drawCone",4,"int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btIDebugDraw::drawCone",5,"btTransform const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btIDebugDraw::drawCone",6,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawCone",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btIDebugDraw_drawCone",5,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawCone",6,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->drawCone(arg2,arg3,arg4,(btTransform const &)*arg5,(btVector3 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIDebugDraw_drawPlane(lua_State* L) {
  int SWIG_arg = 0;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  SWIG_check_num_args("btIDebugDraw::drawPlane",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIDebugDraw::drawPlane",1,"btIDebugDraw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btIDebugDraw::drawPlane",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btIDebugDraw::drawPlane",3,"btScalar");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btIDebugDraw::drawPlane",4,"btTransform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btIDebugDraw::drawPlane",5,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btIDebugDraw_drawPlane",1,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawPlane",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btIDebugDraw_drawPlane",4,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btIDebugDraw_drawPlane",5,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->drawPlane((btVector3 const &)*arg2,arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btIDebugDraw(void *obj) {
btIDebugDraw *arg1 = (btIDebugDraw *) obj;
delete arg1;
}
static swig_lua_method swig_btIDebugDraw_methods[] = {
    {"drawLine", _wrap_btIDebugDraw_drawLine}, 
    {"drawSphere", _wrap_btIDebugDraw_drawSphere}, 
    {"drawTriangle", _wrap_btIDebugDraw_drawTriangle}, 
    {"drawContactPoint", _wrap_btIDebugDraw_drawContactPoint}, 
    {"reportErrorWarning", _wrap_btIDebugDraw_reportErrorWarning}, 
    {"draw3dText", _wrap_btIDebugDraw_draw3dText}, 
    {"setDebugMode", _wrap_btIDebugDraw_setDebugMode}, 
    {"getDebugMode", _wrap_btIDebugDraw_getDebugMode}, 
    {"drawAabb", _wrap_btIDebugDraw_drawAabb}, 
    {"drawTransform", _wrap_btIDebugDraw_drawTransform}, 
    {"drawArc", _wrap_btIDebugDraw_drawArc}, 
    {"drawSpherePatch", _wrap_btIDebugDraw_drawSpherePatch}, 
    {"drawBox", _wrap_btIDebugDraw_drawBox}, 
    {"drawCapsule", _wrap_btIDebugDraw_drawCapsule}, 
    {"drawCylinder", _wrap_btIDebugDraw_drawCylinder}, 
    {"drawCone", _wrap_btIDebugDraw_drawCone}, 
    {"drawPlane", _wrap_btIDebugDraw_drawPlane}, 
    {0,0}
};
static swig_lua_attribute swig_btIDebugDraw_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btIDebugDraw_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btIDebugDraw_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btIDebugDraw_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("DBG_NoDebug", btIDebugDraw::DBG_NoDebug)},
    {SWIG_LUA_CONSTTAB_INT("DBG_DrawWireframe", btIDebugDraw::DBG_DrawWireframe)},
    {SWIG_LUA_CONSTTAB_INT("DBG_DrawAabb", btIDebugDraw::DBG_DrawAabb)},
    {SWIG_LUA_CONSTTAB_INT("DBG_DrawFeaturesText", btIDebugDraw::DBG_DrawFeaturesText)},
    {SWIG_LUA_CONSTTAB_INT("DBG_DrawContactPoints", btIDebugDraw::DBG_DrawContactPoints)},
    {SWIG_LUA_CONSTTAB_INT("DBG_NoDeactivation", btIDebugDraw::DBG_NoDeactivation)},
    {SWIG_LUA_CONSTTAB_INT("DBG_NoHelpText", btIDebugDraw::DBG_NoHelpText)},
    {SWIG_LUA_CONSTTAB_INT("DBG_DrawText", btIDebugDraw::DBG_DrawText)},
    {SWIG_LUA_CONSTTAB_INT("DBG_ProfileTimings", btIDebugDraw::DBG_ProfileTimings)},
    {SWIG_LUA_CONSTTAB_INT("DBG_EnableSatComparison", btIDebugDraw::DBG_EnableSatComparison)},
    {SWIG_LUA_CONSTTAB_INT("DBG_DisableBulletLCP", btIDebugDraw::DBG_DisableBulletLCP)},
    {SWIG_LUA_CONSTTAB_INT("DBG_EnableCCD", btIDebugDraw::DBG_EnableCCD)},
    {SWIG_LUA_CONSTTAB_INT("DBG_DrawConstraints", btIDebugDraw::DBG_DrawConstraints)},
    {SWIG_LUA_CONSTTAB_INT("DBG_DrawConstraintLimits", btIDebugDraw::DBG_DrawConstraintLimits)},
    {SWIG_LUA_CONSTTAB_INT("DBG_FastWireframe", btIDebugDraw::DBG_FastWireframe)},
    {SWIG_LUA_CONSTTAB_INT("DBG_DrawNormals", btIDebugDraw::DBG_DrawNormals)},
    {SWIG_LUA_CONSTTAB_INT("DBG_MAX_DEBUG_DRAW_MODE", btIDebugDraw::DBG_MAX_DEBUG_DRAW_MODE)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btIDebugDraw_bases[] = {0};
static const char *swig_btIDebugDraw_base_names[] = {0};
static swig_lua_class _wrap_class_btIDebugDraw = { "btIDebugDraw", &SWIGTYPE_p_btIDebugDraw,0, swig_delete_btIDebugDraw, swig_btIDebugDraw_methods, swig_btIDebugDraw_attributes, { "btIDebugDraw", swig_btIDebugDraw_cls_methods, swig_btIDebugDraw_cls_attributes, swig_btIDebugDraw_cls_constants }, swig_btIDebugDraw_bases, swig_btIDebugDraw_base_names };

static int _wrap_new_btGEN_Link__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btGEN_Link *result = 0 ;
  
  SWIG_check_num_args("btGEN_Link::btGEN_Link",0,0)
  result = (btGEN_Link *)new btGEN_Link();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGEN_Link,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btGEN_Link__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btGEN_Link *arg1 = (btGEN_Link *) 0 ;
  btGEN_Link *arg2 = (btGEN_Link *) 0 ;
  btGEN_Link *result = 0 ;
  
  SWIG_check_num_args("btGEN_Link::btGEN_Link",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGEN_Link::btGEN_Link",1,"btGEN_Link *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGEN_Link::btGEN_Link",2,"btGEN_Link *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGEN_Link,0))){
    SWIG_fail_ptr("new_btGEN_Link",1,SWIGTYPE_p_btGEN_Link);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btGEN_Link,0))){
    SWIG_fail_ptr("new_btGEN_Link",2,SWIGTYPE_p_btGEN_Link);
  }
  
  result = (btGEN_Link *)new btGEN_Link(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGEN_Link,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btGEN_Link(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btGEN_Link__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGEN_Link, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btGEN_Link, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_btGEN_Link__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btGEN_Link'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btGEN_Link::btGEN_Link()\n"
    "    btGEN_Link::btGEN_Link(btGEN_Link *,btGEN_Link *)\n");
  lua_error(L);return 0;
}


static int _wrap_btGEN_Link_getNext(lua_State* L) {
  int SWIG_arg = 0;
  btGEN_Link *arg1 = (btGEN_Link *) 0 ;
  btGEN_Link *result = 0 ;
  
  SWIG_check_num_args("btGEN_Link::getNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGEN_Link::getNext",1,"btGEN_Link const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGEN_Link,0))){
    SWIG_fail_ptr("btGEN_Link_getNext",1,SWIGTYPE_p_btGEN_Link);
  }
  
  result = (btGEN_Link *)((btGEN_Link const *)arg1)->getNext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGEN_Link,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGEN_Link_getPrev(lua_State* L) {
  int SWIG_arg = 0;
  btGEN_Link *arg1 = (btGEN_Link *) 0 ;
  btGEN_Link *result = 0 ;
  
  SWIG_check_num_args("btGEN_Link::getPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGEN_Link::getPrev",1,"btGEN_Link const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGEN_Link,0))){
    SWIG_fail_ptr("btGEN_Link_getPrev",1,SWIGTYPE_p_btGEN_Link);
  }
  
  result = (btGEN_Link *)((btGEN_Link const *)arg1)->getPrev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGEN_Link,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGEN_Link_isHead(lua_State* L) {
  int SWIG_arg = 0;
  btGEN_Link *arg1 = (btGEN_Link *) 0 ;
  bool result;
  
  SWIG_check_num_args("btGEN_Link::isHead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGEN_Link::isHead",1,"btGEN_Link const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGEN_Link,0))){
    SWIG_fail_ptr("btGEN_Link_isHead",1,SWIGTYPE_p_btGEN_Link);
  }
  
  result = (bool)((btGEN_Link const *)arg1)->isHead();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGEN_Link_isTail(lua_State* L) {
  int SWIG_arg = 0;
  btGEN_Link *arg1 = (btGEN_Link *) 0 ;
  bool result;
  
  SWIG_check_num_args("btGEN_Link::isTail",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGEN_Link::isTail",1,"btGEN_Link const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGEN_Link,0))){
    SWIG_fail_ptr("btGEN_Link_isTail",1,SWIGTYPE_p_btGEN_Link);
  }
  
  result = (bool)((btGEN_Link const *)arg1)->isTail();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGEN_Link_insertBefore(lua_State* L) {
  int SWIG_arg = 0;
  btGEN_Link *arg1 = (btGEN_Link *) 0 ;
  btGEN_Link *arg2 = (btGEN_Link *) 0 ;
  
  SWIG_check_num_args("btGEN_Link::insertBefore",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGEN_Link::insertBefore",1,"btGEN_Link *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGEN_Link::insertBefore",2,"btGEN_Link *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGEN_Link,0))){
    SWIG_fail_ptr("btGEN_Link_insertBefore",1,SWIGTYPE_p_btGEN_Link);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btGEN_Link,0))){
    SWIG_fail_ptr("btGEN_Link_insertBefore",2,SWIGTYPE_p_btGEN_Link);
  }
  
  (arg1)->insertBefore(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGEN_Link_insertAfter(lua_State* L) {
  int SWIG_arg = 0;
  btGEN_Link *arg1 = (btGEN_Link *) 0 ;
  btGEN_Link *arg2 = (btGEN_Link *) 0 ;
  
  SWIG_check_num_args("btGEN_Link::insertAfter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGEN_Link::insertAfter",1,"btGEN_Link *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGEN_Link::insertAfter",2,"btGEN_Link *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGEN_Link,0))){
    SWIG_fail_ptr("btGEN_Link_insertAfter",1,SWIGTYPE_p_btGEN_Link);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btGEN_Link,0))){
    SWIG_fail_ptr("btGEN_Link_insertAfter",2,SWIGTYPE_p_btGEN_Link);
  }
  
  (arg1)->insertAfter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGEN_Link_remove(lua_State* L) {
  int SWIG_arg = 0;
  btGEN_Link *arg1 = (btGEN_Link *) 0 ;
  
  SWIG_check_num_args("btGEN_Link::remove",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGEN_Link::remove",1,"btGEN_Link *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGEN_Link,0))){
    SWIG_fail_ptr("btGEN_Link_remove",1,SWIGTYPE_p_btGEN_Link);
  }
  
  (arg1)->remove();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btGEN_Link(void *obj) {
btGEN_Link *arg1 = (btGEN_Link *) obj;
delete arg1;
}
static swig_lua_method swig_btGEN_Link_methods[] = {
    {"getNext", _wrap_btGEN_Link_getNext}, 
    {"getPrev", _wrap_btGEN_Link_getPrev}, 
    {"isHead", _wrap_btGEN_Link_isHead}, 
    {"isTail", _wrap_btGEN_Link_isTail}, 
    {"insertBefore", _wrap_btGEN_Link_insertBefore}, 
    {"insertAfter", _wrap_btGEN_Link_insertAfter}, 
    {"remove", _wrap_btGEN_Link_remove}, 
    {0,0}
};
static swig_lua_attribute swig_btGEN_Link_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btGEN_Link_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btGEN_Link_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btGEN_Link_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btGEN_Link_bases[] = {0};
static const char *swig_btGEN_Link_base_names[] = {0};
static swig_lua_class _wrap_class_btGEN_Link = { "btGEN_Link", &SWIGTYPE_p_btGEN_Link,_wrap_new_btGEN_Link, swig_delete_btGEN_Link, swig_btGEN_Link_methods, swig_btGEN_Link_attributes, { "btGEN_Link", swig_btGEN_Link_cls_methods, swig_btGEN_Link_cls_attributes, swig_btGEN_Link_cls_constants }, swig_btGEN_Link_bases, swig_btGEN_Link_base_names };

static int _wrap_new_btGEN_List(lua_State* L) {
  int SWIG_arg = 0;
  btGEN_List *result = 0 ;
  
  SWIG_check_num_args("btGEN_List::btGEN_List",0,0)
  result = (btGEN_List *)new btGEN_List();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGEN_List,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGEN_List_getHead(lua_State* L) {
  int SWIG_arg = 0;
  btGEN_List *arg1 = (btGEN_List *) 0 ;
  btGEN_Link *result = 0 ;
  
  SWIG_check_num_args("btGEN_List::getHead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGEN_List::getHead",1,"btGEN_List const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGEN_List,0))){
    SWIG_fail_ptr("btGEN_List_getHead",1,SWIGTYPE_p_btGEN_List);
  }
  
  result = (btGEN_Link *)((btGEN_List const *)arg1)->getHead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGEN_Link,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGEN_List_getTail(lua_State* L) {
  int SWIG_arg = 0;
  btGEN_List *arg1 = (btGEN_List *) 0 ;
  btGEN_Link *result = 0 ;
  
  SWIG_check_num_args("btGEN_List::getTail",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGEN_List::getTail",1,"btGEN_List const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGEN_List,0))){
    SWIG_fail_ptr("btGEN_List_getTail",1,SWIGTYPE_p_btGEN_List);
  }
  
  result = (btGEN_Link *)((btGEN_List const *)arg1)->getTail();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGEN_Link,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGEN_List_addHead(lua_State* L) {
  int SWIG_arg = 0;
  btGEN_List *arg1 = (btGEN_List *) 0 ;
  btGEN_Link *arg2 = (btGEN_Link *) 0 ;
  
  SWIG_check_num_args("btGEN_List::addHead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGEN_List::addHead",1,"btGEN_List *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGEN_List::addHead",2,"btGEN_Link *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGEN_List,0))){
    SWIG_fail_ptr("btGEN_List_addHead",1,SWIGTYPE_p_btGEN_List);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btGEN_Link,0))){
    SWIG_fail_ptr("btGEN_List_addHead",2,SWIGTYPE_p_btGEN_Link);
  }
  
  (arg1)->addHead(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGEN_List_addTail(lua_State* L) {
  int SWIG_arg = 0;
  btGEN_List *arg1 = (btGEN_List *) 0 ;
  btGEN_Link *arg2 = (btGEN_Link *) 0 ;
  
  SWIG_check_num_args("btGEN_List::addTail",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGEN_List::addTail",1,"btGEN_List *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGEN_List::addTail",2,"btGEN_Link *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGEN_List,0))){
    SWIG_fail_ptr("btGEN_List_addTail",1,SWIGTYPE_p_btGEN_List);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btGEN_Link,0))){
    SWIG_fail_ptr("btGEN_List_addTail",2,SWIGTYPE_p_btGEN_Link);
  }
  
  (arg1)->addTail(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btGEN_List(void *obj) {
btGEN_List *arg1 = (btGEN_List *) obj;
delete arg1;
}
static swig_lua_method swig_btGEN_List_methods[] = {
    {"getHead", _wrap_btGEN_List_getHead}, 
    {"getTail", _wrap_btGEN_List_getTail}, 
    {"addHead", _wrap_btGEN_List_addHead}, 
    {"addTail", _wrap_btGEN_List_addTail}, 
    {0,0}
};
static swig_lua_attribute swig_btGEN_List_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btGEN_List_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btGEN_List_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btGEN_List_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btGEN_List_bases[] = {0};
static const char *swig_btGEN_List_base_names[] = {0};
static swig_lua_class _wrap_class_btGEN_List = { "btGEN_List", &SWIGTYPE_p_btGEN_List,_wrap_new_btGEN_List, swig_delete_btGEN_List, swig_btGEN_List_methods, swig_btGEN_List_attributes, { "btGEN_List", swig_btGEN_List_cls_methods, swig_btGEN_List_cls_attributes, swig_btGEN_List_cls_constants }, swig_btGEN_List_bases, swig_btGEN_List_base_names };

static int _wrap_new_btClock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btClock *result = 0 ;
  
  SWIG_check_num_args("btClock::btClock",0,0)
  result = (btClock *)new btClock();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btClock,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btClock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btClock *arg1 = 0 ;
  btClock *result = 0 ;
  
  SWIG_check_num_args("btClock::btClock",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btClock::btClock",1,"btClock const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btClock,0))){
    SWIG_fail_ptr("new_btClock",1,SWIGTYPE_p_btClock);
  }
  
  result = (btClock *)new btClock((btClock const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btClock,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btClock(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btClock__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btClock, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_btClock__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btClock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btClock::btClock()\n"
    "    btClock::btClock(btClock const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btClock_reset(lua_State* L) {
  int SWIG_arg = 0;
  btClock *arg1 = (btClock *) 0 ;
  
  SWIG_check_num_args("btClock::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btClock::reset",1,"btClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btClock,0))){
    SWIG_fail_ptr("btClock_reset",1,SWIGTYPE_p_btClock);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btClock_getTimeMilliseconds(lua_State* L) {
  int SWIG_arg = 0;
  btClock *arg1 = (btClock *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("btClock::getTimeMilliseconds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btClock::getTimeMilliseconds",1,"btClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btClock,0))){
    SWIG_fail_ptr("btClock_getTimeMilliseconds",1,SWIGTYPE_p_btClock);
  }
  
  result = (unsigned long)(arg1)->getTimeMilliseconds();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btClock_getTimeMicroseconds(lua_State* L) {
  int SWIG_arg = 0;
  btClock *arg1 = (btClock *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("btClock::getTimeMicroseconds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btClock::getTimeMicroseconds",1,"btClock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btClock,0))){
    SWIG_fail_ptr("btClock_getTimeMicroseconds",1,SWIGTYPE_p_btClock);
  }
  
  result = (unsigned long)(arg1)->getTimeMicroseconds();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btClock(void *obj) {
btClock *arg1 = (btClock *) obj;
delete arg1;
}
static swig_lua_method swig_btClock_methods[] = {
    {"reset", _wrap_btClock_reset}, 
    {"getTimeMilliseconds", _wrap_btClock_getTimeMilliseconds}, 
    {"getTimeMicroseconds", _wrap_btClock_getTimeMicroseconds}, 
    {0,0}
};
static swig_lua_attribute swig_btClock_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btClock_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btClock_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btClock_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btClock_bases[] = {0};
static const char *swig_btClock_base_names[] = {0};
static swig_lua_class _wrap_class_btClock = { "btClock", &SWIGTYPE_p_btClock,_wrap_new_btClock, swig_delete_btClock, swig_btClock_methods, swig_btClock_attributes, { "btClock", swig_btClock_cls_methods, swig_btClock_cls_attributes, swig_btClock_cls_constants }, swig_btClock_bases, swig_btClock_base_names };

static int _wrap_new_CProfileNode(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  CProfileNode *arg2 = (CProfileNode *) 0 ;
  CProfileNode *result = 0 ;
  
  SWIG_check_num_args("CProfileNode::CProfileNode",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("CProfileNode::CProfileNode",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CProfileNode::CProfileNode",2,"CProfileNode *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CProfileNode,0))){
    SWIG_fail_ptr("new_CProfileNode",2,SWIGTYPE_p_CProfileNode);
  }
  
  result = (CProfileNode *)new CProfileNode((char const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CProfileNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileNode_Get_Sub_Node(lua_State* L) {
  int SWIG_arg = 0;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  char *arg2 = (char *) 0 ;
  CProfileNode *result = 0 ;
  
  SWIG_check_num_args("CProfileNode::Get_Sub_Node",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileNode::Get_Sub_Node",1,"CProfileNode *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("CProfileNode::Get_Sub_Node",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileNode,0))){
    SWIG_fail_ptr("CProfileNode_Get_Sub_Node",1,SWIGTYPE_p_CProfileNode);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (CProfileNode *)(arg1)->Get_Sub_Node((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CProfileNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileNode_Get_Parent(lua_State* L) {
  int SWIG_arg = 0;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  CProfileNode *result = 0 ;
  
  SWIG_check_num_args("CProfileNode::Get_Parent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileNode::Get_Parent",1,"CProfileNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileNode,0))){
    SWIG_fail_ptr("CProfileNode_Get_Parent",1,SWIGTYPE_p_CProfileNode);
  }
  
  result = (CProfileNode *)(arg1)->Get_Parent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CProfileNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileNode_Get_Sibling(lua_State* L) {
  int SWIG_arg = 0;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  CProfileNode *result = 0 ;
  
  SWIG_check_num_args("CProfileNode::Get_Sibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileNode::Get_Sibling",1,"CProfileNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileNode,0))){
    SWIG_fail_ptr("CProfileNode_Get_Sibling",1,SWIGTYPE_p_CProfileNode);
  }
  
  result = (CProfileNode *)(arg1)->Get_Sibling();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CProfileNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileNode_Get_Child(lua_State* L) {
  int SWIG_arg = 0;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  CProfileNode *result = 0 ;
  
  SWIG_check_num_args("CProfileNode::Get_Child",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileNode::Get_Child",1,"CProfileNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileNode,0))){
    SWIG_fail_ptr("CProfileNode_Get_Child",1,SWIGTYPE_p_CProfileNode);
  }
  
  result = (CProfileNode *)(arg1)->Get_Child();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CProfileNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileNode_CleanupMemory(lua_State* L) {
  int SWIG_arg = 0;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  
  SWIG_check_num_args("CProfileNode::CleanupMemory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileNode::CleanupMemory",1,"CProfileNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileNode,0))){
    SWIG_fail_ptr("CProfileNode_CleanupMemory",1,SWIGTYPE_p_CProfileNode);
  }
  
  (arg1)->CleanupMemory();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileNode_Reset(lua_State* L) {
  int SWIG_arg = 0;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  
  SWIG_check_num_args("CProfileNode::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileNode::Reset",1,"CProfileNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileNode,0))){
    SWIG_fail_ptr("CProfileNode_Reset",1,SWIGTYPE_p_CProfileNode);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileNode_Call(lua_State* L) {
  int SWIG_arg = 0;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  
  SWIG_check_num_args("CProfileNode::Call",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileNode::Call",1,"CProfileNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileNode,0))){
    SWIG_fail_ptr("CProfileNode_Call",1,SWIGTYPE_p_CProfileNode);
  }
  
  (arg1)->Call();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileNode_Return(lua_State* L) {
  int SWIG_arg = 0;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("CProfileNode::Return",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileNode::Return",1,"CProfileNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileNode,0))){
    SWIG_fail_ptr("CProfileNode_Return",1,SWIGTYPE_p_CProfileNode);
  }
  
  result = (bool)(arg1)->Return();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileNode_Get_Name(lua_State* L) {
  int SWIG_arg = 0;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CProfileNode::Get_Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileNode::Get_Name",1,"CProfileNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileNode,0))){
    SWIG_fail_ptr("CProfileNode_Get_Name",1,SWIGTYPE_p_CProfileNode);
  }
  
  result = (char *)(arg1)->Get_Name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileNode_Get_Total_Calls(lua_State* L) {
  int SWIG_arg = 0;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  int result;
  
  SWIG_check_num_args("CProfileNode::Get_Total_Calls",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileNode::Get_Total_Calls",1,"CProfileNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileNode,0))){
    SWIG_fail_ptr("CProfileNode_Get_Total_Calls",1,SWIGTYPE_p_CProfileNode);
  }
  
  result = (int)(arg1)->Get_Total_Calls();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileNode_Get_Total_Time(lua_State* L) {
  int SWIG_arg = 0;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  float result;
  
  SWIG_check_num_args("CProfileNode::Get_Total_Time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileNode::Get_Total_Time",1,"CProfileNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileNode,0))){
    SWIG_fail_ptr("CProfileNode_Get_Total_Time",1,SWIGTYPE_p_CProfileNode);
  }
  
  result = (float)(arg1)->Get_Total_Time();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileNode_GetUserPointer(lua_State* L) {
  int SWIG_arg = 0;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("CProfileNode::GetUserPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileNode::GetUserPointer",1,"CProfileNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileNode,0))){
    SWIG_fail_ptr("CProfileNode_GetUserPointer",1,SWIGTYPE_p_CProfileNode);
  }
  
  result = (void *)((CProfileNode const *)arg1)->GetUserPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileNode_SetUserPointer(lua_State* L) {
  int SWIG_arg = 0;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("CProfileNode::SetUserPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileNode::SetUserPointer",1,"CProfileNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CProfileNode::SetUserPointer",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileNode,0))){
    SWIG_fail_ptr("CProfileNode_SetUserPointer",1,SWIGTYPE_p_CProfileNode);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CProfileNode_SetUserPointer");
  (arg1)->SetUserPointer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CProfileNode(void *obj) {
CProfileNode *arg1 = (CProfileNode *) obj;
delete arg1;
}
static swig_lua_method swig_CProfileNode_methods[] = {
    {"Get_Sub_Node", _wrap_CProfileNode_Get_Sub_Node}, 
    {"Get_Parent", _wrap_CProfileNode_Get_Parent}, 
    {"Get_Sibling", _wrap_CProfileNode_Get_Sibling}, 
    {"Get_Child", _wrap_CProfileNode_Get_Child}, 
    {"CleanupMemory", _wrap_CProfileNode_CleanupMemory}, 
    {"Reset", _wrap_CProfileNode_Reset}, 
    {"Call", _wrap_CProfileNode_Call}, 
    {"Return", _wrap_CProfileNode_Return}, 
    {"Get_Name", _wrap_CProfileNode_Get_Name}, 
    {"Get_Total_Calls", _wrap_CProfileNode_Get_Total_Calls}, 
    {"Get_Total_Time", _wrap_CProfileNode_Get_Total_Time}, 
    {"GetUserPointer", _wrap_CProfileNode_GetUserPointer}, 
    {"SetUserPointer", _wrap_CProfileNode_SetUserPointer}, 
    {0,0}
};
static swig_lua_attribute swig_CProfileNode_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_CProfileNode_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CProfileNode_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CProfileNode_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CProfileNode_bases[] = {0};
static const char *swig_CProfileNode_base_names[] = {0};
static swig_lua_class _wrap_class_CProfileNode = { "CProfileNode", &SWIGTYPE_p_CProfileNode,_wrap_new_CProfileNode, swig_delete_CProfileNode, swig_CProfileNode_methods, swig_CProfileNode_attributes, { "CProfileNode", swig_CProfileNode_cls_methods, swig_CProfileNode_cls_attributes, swig_CProfileNode_cls_constants }, swig_CProfileNode_bases, swig_CProfileNode_base_names };

static int _wrap_CProfileIterator_First(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  
  SWIG_check_num_args("CProfileIterator::First",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileIterator::First",1,"CProfileIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileIterator,0))){
    SWIG_fail_ptr("CProfileIterator_First",1,SWIGTYPE_p_CProfileIterator);
  }
  
  (arg1)->First();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileIterator_Next(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  
  SWIG_check_num_args("CProfileIterator::Next",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileIterator::Next",1,"CProfileIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileIterator,0))){
    SWIG_fail_ptr("CProfileIterator_Next",1,SWIGTYPE_p_CProfileIterator);
  }
  
  (arg1)->Next();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileIterator_Is_Done(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  bool result;
  
  SWIG_check_num_args("CProfileIterator::Is_Done",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileIterator::Is_Done",1,"CProfileIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileIterator,0))){
    SWIG_fail_ptr("CProfileIterator_Is_Done",1,SWIGTYPE_p_CProfileIterator);
  }
  
  result = (bool)(arg1)->Is_Done();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileIterator_Is_Root(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  bool result;
  
  SWIG_check_num_args("CProfileIterator::Is_Root",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileIterator::Is_Root",1,"CProfileIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileIterator,0))){
    SWIG_fail_ptr("CProfileIterator_Is_Root",1,SWIGTYPE_p_CProfileIterator);
  }
  
  result = (bool)(arg1)->Is_Root();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileIterator_Enter_Child(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("CProfileIterator::Enter_Child",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileIterator::Enter_Child",1,"CProfileIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CProfileIterator::Enter_Child",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileIterator,0))){
    SWIG_fail_ptr("CProfileIterator_Enter_Child",1,SWIGTYPE_p_CProfileIterator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->Enter_Child(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileIterator_Enter_Largest_Child(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  
  SWIG_check_num_args("CProfileIterator::Enter_Largest_Child",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileIterator::Enter_Largest_Child",1,"CProfileIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileIterator,0))){
    SWIG_fail_ptr("CProfileIterator_Enter_Largest_Child",1,SWIGTYPE_p_CProfileIterator);
  }
  
  (arg1)->Enter_Largest_Child();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileIterator_Enter_Parent(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  
  SWIG_check_num_args("CProfileIterator::Enter_Parent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileIterator::Enter_Parent",1,"CProfileIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileIterator,0))){
    SWIG_fail_ptr("CProfileIterator_Enter_Parent",1,SWIGTYPE_p_CProfileIterator);
  }
  
  (arg1)->Enter_Parent();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileIterator_Get_Current_Name(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CProfileIterator::Get_Current_Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileIterator::Get_Current_Name",1,"CProfileIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileIterator,0))){
    SWIG_fail_ptr("CProfileIterator_Get_Current_Name",1,SWIGTYPE_p_CProfileIterator);
  }
  
  result = (char *)(arg1)->Get_Current_Name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileIterator_Get_Current_Total_Calls(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  int result;
  
  SWIG_check_num_args("CProfileIterator::Get_Current_Total_Calls",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileIterator::Get_Current_Total_Calls",1,"CProfileIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileIterator,0))){
    SWIG_fail_ptr("CProfileIterator_Get_Current_Total_Calls",1,SWIGTYPE_p_CProfileIterator);
  }
  
  result = (int)(arg1)->Get_Current_Total_Calls();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileIterator_Get_Current_Total_Time(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  float result;
  
  SWIG_check_num_args("CProfileIterator::Get_Current_Total_Time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileIterator::Get_Current_Total_Time",1,"CProfileIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileIterator,0))){
    SWIG_fail_ptr("CProfileIterator_Get_Current_Total_Time",1,SWIGTYPE_p_CProfileIterator);
  }
  
  result = (float)(arg1)->Get_Current_Total_Time();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileIterator_Get_Current_UserPointer(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("CProfileIterator::Get_Current_UserPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileIterator::Get_Current_UserPointer",1,"CProfileIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileIterator,0))){
    SWIG_fail_ptr("CProfileIterator_Get_Current_UserPointer",1,SWIGTYPE_p_CProfileIterator);
  }
  
  result = (void *)(arg1)->Get_Current_UserPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileIterator_Set_Current_UserPointer(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("CProfileIterator::Set_Current_UserPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileIterator::Set_Current_UserPointer",1,"CProfileIterator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CProfileIterator::Set_Current_UserPointer",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileIterator,0))){
    SWIG_fail_ptr("CProfileIterator_Set_Current_UserPointer",1,SWIGTYPE_p_CProfileIterator);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"CProfileIterator_Set_Current_UserPointer");
  (arg1)->Set_Current_UserPointer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileIterator_Get_Current_Parent_Name(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("CProfileIterator::Get_Current_Parent_Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileIterator::Get_Current_Parent_Name",1,"CProfileIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileIterator,0))){
    SWIG_fail_ptr("CProfileIterator_Get_Current_Parent_Name",1,SWIGTYPE_p_CProfileIterator);
  }
  
  result = (char *)(arg1)->Get_Current_Parent_Name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileIterator_Get_Current_Parent_Total_Calls(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  int result;
  
  SWIG_check_num_args("CProfileIterator::Get_Current_Parent_Total_Calls",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileIterator::Get_Current_Parent_Total_Calls",1,"CProfileIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileIterator,0))){
    SWIG_fail_ptr("CProfileIterator_Get_Current_Parent_Total_Calls",1,SWIGTYPE_p_CProfileIterator);
  }
  
  result = (int)(arg1)->Get_Current_Parent_Total_Calls();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileIterator_Get_Current_Parent_Total_Time(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  float result;
  
  SWIG_check_num_args("CProfileIterator::Get_Current_Parent_Total_Time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileIterator::Get_Current_Parent_Total_Time",1,"CProfileIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileIterator,0))){
    SWIG_fail_ptr("CProfileIterator_Get_Current_Parent_Total_Time",1,SWIGTYPE_p_CProfileIterator);
  }
  
  result = (float)(arg1)->Get_Current_Parent_Total_Time();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CProfileIterator(void *obj) {
CProfileIterator *arg1 = (CProfileIterator *) obj;
delete arg1;
}
static swig_lua_method swig_CProfileIterator_methods[] = {
    {"First", _wrap_CProfileIterator_First}, 
    {"Next", _wrap_CProfileIterator_Next}, 
    {"Is_Done", _wrap_CProfileIterator_Is_Done}, 
    {"Is_Root", _wrap_CProfileIterator_Is_Root}, 
    {"Enter_Child", _wrap_CProfileIterator_Enter_Child}, 
    {"Enter_Largest_Child", _wrap_CProfileIterator_Enter_Largest_Child}, 
    {"Enter_Parent", _wrap_CProfileIterator_Enter_Parent}, 
    {"Get_Current_Name", _wrap_CProfileIterator_Get_Current_Name}, 
    {"Get_Current_Total_Calls", _wrap_CProfileIterator_Get_Current_Total_Calls}, 
    {"Get_Current_Total_Time", _wrap_CProfileIterator_Get_Current_Total_Time}, 
    {"Get_Current_UserPointer", _wrap_CProfileIterator_Get_Current_UserPointer}, 
    {"Set_Current_UserPointer", _wrap_CProfileIterator_Set_Current_UserPointer}, 
    {"Get_Current_Parent_Name", _wrap_CProfileIterator_Get_Current_Parent_Name}, 
    {"Get_Current_Parent_Total_Calls", _wrap_CProfileIterator_Get_Current_Parent_Total_Calls}, 
    {"Get_Current_Parent_Total_Time", _wrap_CProfileIterator_Get_Current_Parent_Total_Time}, 
    {0,0}
};
static swig_lua_attribute swig_CProfileIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_CProfileIterator_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CProfileIterator_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CProfileIterator_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CProfileIterator_bases[] = {0};
static const char *swig_CProfileIterator_base_names[] = {0};
static swig_lua_class _wrap_class_CProfileIterator = { "CProfileIterator", &SWIGTYPE_p_CProfileIterator,0, swig_delete_CProfileIterator, swig_CProfileIterator_methods, swig_CProfileIterator_attributes, { "CProfileIterator", swig_CProfileIterator_cls_methods, swig_CProfileIterator_cls_attributes, swig_CProfileIterator_cls_constants }, swig_CProfileIterator_bases, swig_CProfileIterator_base_names };

static int _wrap_CProfileManager_Start_Profile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("CProfileManager::Start_Profile",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("CProfileManager::Start_Profile",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  CProfileManager::Start_Profile((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileManager_Stop_Profile(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("CProfileManager::Stop_Profile",0,0)
  CProfileManager::Stop_Profile();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileManager_CleanupMemory(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("CProfileManager::CleanupMemory",0,0)
  CProfileManager::CleanupMemory();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileManager_Reset(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("CProfileManager::Reset",0,0)
  CProfileManager::Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileManager_Increment_Frame_Counter(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("CProfileManager::Increment_Frame_Counter",0,0)
  CProfileManager::Increment_Frame_Counter();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileManager_Get_Frame_Count_Since_Reset(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("CProfileManager::Get_Frame_Count_Since_Reset",0,0)
  result = (int)CProfileManager::Get_Frame_Count_Since_Reset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileManager_Get_Time_Since_Reset(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("CProfileManager::Get_Time_Since_Reset",0,0)
  result = (float)CProfileManager::Get_Time_Since_Reset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileManager_Get_Iterator(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *result = 0 ;
  
  SWIG_check_num_args("CProfileManager::Get_Iterator",0,0)
  result = (CProfileIterator *)CProfileManager::Get_Iterator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CProfileIterator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileManager_Release_Iterator(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  
  SWIG_check_num_args("CProfileManager::Release_Iterator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileManager::Release_Iterator",1,"CProfileIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileIterator,0))){
    SWIG_fail_ptr("CProfileManager_Release_Iterator",1,SWIGTYPE_p_CProfileIterator);
  }
  
  CProfileManager::Release_Iterator(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileManager_dumpRecursive(lua_State* L) {
  int SWIG_arg = 0;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("CProfileManager::dumpRecursive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CProfileManager::dumpRecursive",1,"CProfileIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CProfileManager::dumpRecursive",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CProfileIterator,0))){
    SWIG_fail_ptr("CProfileManager_dumpRecursive",1,SWIGTYPE_p_CProfileIterator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  CProfileManager::dumpRecursive(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CProfileManager_dumpAll(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("CProfileManager::dumpAll",0,0)
  CProfileManager::dumpAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CProfileManager(lua_State* L) {
  int SWIG_arg = 0;
  CProfileManager *result = 0 ;
  
  SWIG_check_num_args("CProfileManager::CProfileManager",0,0)
  result = (CProfileManager *)new CProfileManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CProfileManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CProfileManager(void *obj) {
CProfileManager *arg1 = (CProfileManager *) obj;
delete arg1;
}
static swig_lua_method swig_CProfileManager_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CProfileManager_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_CProfileManager_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CProfileManager_cls_methods[] = {
    {"Start_Profile", _wrap_CProfileManager_Start_Profile}, 
    {"Stop_Profile", _wrap_CProfileManager_Stop_Profile}, 
    {"CleanupMemory", _wrap_CProfileManager_CleanupMemory}, 
    {"Reset", _wrap_CProfileManager_Reset}, 
    {"Increment_Frame_Counter", _wrap_CProfileManager_Increment_Frame_Counter}, 
    {"Get_Frame_Count_Since_Reset", _wrap_CProfileManager_Get_Frame_Count_Since_Reset}, 
    {"Get_Time_Since_Reset", _wrap_CProfileManager_Get_Time_Since_Reset}, 
    {"Get_Iterator", _wrap_CProfileManager_Get_Iterator}, 
    {"Release_Iterator", _wrap_CProfileManager_Release_Iterator}, 
    {"dumpRecursive", _wrap_CProfileManager_dumpRecursive}, 
    {"dumpAll", _wrap_CProfileManager_dumpAll}, 
    {0,0}
};
static swig_lua_const_info swig_CProfileManager_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CProfileManager_bases[] = {0};
static const char *swig_CProfileManager_base_names[] = {0};
static swig_lua_class _wrap_class_CProfileManager = { "CProfileManager", &SWIGTYPE_p_CProfileManager,_wrap_new_CProfileManager, swig_delete_CProfileManager, swig_CProfileManager_methods, swig_CProfileManager_attributes, { "CProfileManager", swig_CProfileManager_cls_methods, swig_CProfileManager_cls_attributes, swig_CProfileManager_cls_constants }, swig_CProfileManager_bases, swig_CProfileManager_base_names };

static int _wrap_new_CProfileSample(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  CProfileSample *result = 0 ;
  
  SWIG_check_num_args("CProfileSample::CProfileSample",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("CProfileSample::CProfileSample",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (CProfileSample *)new CProfileSample((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CProfileSample,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CProfileSample(void *obj) {
CProfileSample *arg1 = (CProfileSample *) obj;
delete arg1;
}
static swig_lua_method swig_CProfileSample_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CProfileSample_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_CProfileSample_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CProfileSample_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CProfileSample_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CProfileSample_bases[] = {0};
static const char *swig_CProfileSample_base_names[] = {0};
static swig_lua_class _wrap_class_CProfileSample = { "CProfileSample", &SWIGTYPE_p_CProfileSample,_wrap_new_CProfileSample, swig_delete_CProfileSample, swig_CProfileSample_methods, swig_CProfileSample_attributes, { "CProfileSample", swig_CProfileSample_cls_methods, swig_CProfileSample_cls_attributes, swig_CProfileSample_cls_constants }, swig_CProfileSample_bases, swig_CProfileSample_base_names };

static int _wrap_GEN_srand(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  
  SWIG_check_num_args("GEN_srand",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GEN_srand",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  GEN_srand(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GEN_rand(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("GEN_rand",0,0)
  result = (unsigned int)GEN_rand();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBlock_previous_set(lua_State* L) {
  int SWIG_arg = 0;
  btBlock *arg1 = (btBlock *) 0 ;
  btBlock *arg2 = (btBlock *) 0 ;
  
  SWIG_check_num_args("btBlock::previous",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBlock::previous",1,"btBlock *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBlock::previous",2,"btBlock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBlock,0))){
    SWIG_fail_ptr("btBlock_previous_set",1,SWIGTYPE_p_btBlock);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBlock,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btBlock_previous_set",2,SWIGTYPE_p_btBlock);
  }
  
  if (arg1) (arg1)->previous = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBlock_previous_get(lua_State* L) {
  int SWIG_arg = 0;
  btBlock *arg1 = (btBlock *) 0 ;
  btBlock *result = 0 ;
  
  SWIG_check_num_args("btBlock::previous",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBlock::previous",1,"btBlock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBlock,0))){
    SWIG_fail_ptr("btBlock_previous_get",1,SWIGTYPE_p_btBlock);
  }
  
  result = (btBlock *) ((arg1)->previous);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBlock,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBlock_address_set(lua_State* L) {
  int SWIG_arg = 0;
  btBlock *arg1 = (btBlock *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  SWIG_check_num_args("btBlock::address",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBlock::address",1,"btBlock *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBlock::address",2,"unsigned char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBlock,0))){
    SWIG_fail_ptr("btBlock_address_set",1,SWIGTYPE_p_btBlock);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btBlock_address_set",2,SWIGTYPE_p_unsigned_char);
  }
  
  if (arg1) (arg1)->address = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBlock_address_get(lua_State* L) {
  int SWIG_arg = 0;
  btBlock *arg1 = (btBlock *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("btBlock::address",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBlock::address",1,"btBlock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBlock,0))){
    SWIG_fail_ptr("btBlock_address_get",1,SWIGTYPE_p_btBlock);
  }
  
  result = (unsigned char *) ((arg1)->address);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBlock(lua_State* L) {
  int SWIG_arg = 0;
  btBlock *result = 0 ;
  
  SWIG_check_num_args("btBlock::btBlock",0,0)
  result = (btBlock *)new btBlock();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBlock,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btBlock(void *obj) {
btBlock *arg1 = (btBlock *) obj;
delete arg1;
}
static swig_lua_method swig_btBlock_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btBlock_attributes[] = {
    { "previous", _wrap_btBlock_previous_get, _wrap_btBlock_previous_set},
    { "address", _wrap_btBlock_address_get, _wrap_btBlock_address_set},
    {0,0,0}
};
static swig_lua_attribute swig_btBlock_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btBlock_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btBlock_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btBlock_bases[] = {0};
static const char *swig_btBlock_base_names[] = {0};
static swig_lua_class _wrap_class_btBlock = { "btBlock", &SWIGTYPE_p_btBlock,_wrap_new_btBlock, swig_delete_btBlock, swig_btBlock_methods, swig_btBlock_attributes, { "btBlock", swig_btBlock_cls_methods, swig_btBlock_cls_attributes, swig_btBlock_cls_constants }, swig_btBlock_bases, swig_btBlock_base_names };

static int _wrap_new_btStackAlloc(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  btStackAlloc *result = 0 ;
  
  SWIG_check_num_args("btStackAlloc::btStackAlloc",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btStackAlloc::btStackAlloc",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (btStackAlloc *)new btStackAlloc(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btStackAlloc,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStackAlloc_create(lua_State* L) {
  int SWIG_arg = 0;
  btStackAlloc *arg1 = (btStackAlloc *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("btStackAlloc::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStackAlloc::create",1,"btStackAlloc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btStackAlloc::create",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStackAlloc,0))){
    SWIG_fail_ptr("btStackAlloc_create",1,SWIGTYPE_p_btStackAlloc);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->create(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStackAlloc_destroy(lua_State* L) {
  int SWIG_arg = 0;
  btStackAlloc *arg1 = (btStackAlloc *) 0 ;
  
  SWIG_check_num_args("btStackAlloc::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStackAlloc::destroy",1,"btStackAlloc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStackAlloc,0))){
    SWIG_fail_ptr("btStackAlloc_destroy",1,SWIGTYPE_p_btStackAlloc);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStackAlloc_getAvailableMemory(lua_State* L) {
  int SWIG_arg = 0;
  btStackAlloc *arg1 = (btStackAlloc *) 0 ;
  int result;
  
  SWIG_check_num_args("btStackAlloc::getAvailableMemory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStackAlloc::getAvailableMemory",1,"btStackAlloc const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStackAlloc,0))){
    SWIG_fail_ptr("btStackAlloc_getAvailableMemory",1,SWIGTYPE_p_btStackAlloc);
  }
  
  result = (int)((btStackAlloc const *)arg1)->getAvailableMemory();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStackAlloc_allocate(lua_State* L) {
  int SWIG_arg = 0;
  btStackAlloc *arg1 = (btStackAlloc *) 0 ;
  unsigned int arg2 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("btStackAlloc::allocate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStackAlloc::allocate",1,"btStackAlloc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btStackAlloc::allocate",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStackAlloc,0))){
    SWIG_fail_ptr("btStackAlloc_allocate",1,SWIGTYPE_p_btStackAlloc);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned char *)(arg1)->allocate(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStackAlloc_beginBlock(lua_State* L) {
  int SWIG_arg = 0;
  btStackAlloc *arg1 = (btStackAlloc *) 0 ;
  btBlock *result = 0 ;
  
  SWIG_check_num_args("btStackAlloc::beginBlock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStackAlloc::beginBlock",1,"btStackAlloc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStackAlloc,0))){
    SWIG_fail_ptr("btStackAlloc_beginBlock",1,SWIGTYPE_p_btStackAlloc);
  }
  
  result = (btBlock *)(arg1)->beginBlock();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBlock,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStackAlloc_endBlock(lua_State* L) {
  int SWIG_arg = 0;
  btStackAlloc *arg1 = (btStackAlloc *) 0 ;
  btBlock *arg2 = (btBlock *) 0 ;
  
  SWIG_check_num_args("btStackAlloc::endBlock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStackAlloc::endBlock",1,"btStackAlloc *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btStackAlloc::endBlock",2,"btBlock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStackAlloc,0))){
    SWIG_fail_ptr("btStackAlloc_endBlock",1,SWIGTYPE_p_btStackAlloc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBlock,0))){
    SWIG_fail_ptr("btStackAlloc_endBlock",2,SWIGTYPE_p_btBlock);
  }
  
  (arg1)->endBlock(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btStackAlloc(void *obj) {
btStackAlloc *arg1 = (btStackAlloc *) obj;
delete arg1;
}
static swig_lua_method swig_btStackAlloc_methods[] = {
    {"create", _wrap_btStackAlloc_create}, 
    {"destroy", _wrap_btStackAlloc_destroy}, 
    {"getAvailableMemory", _wrap_btStackAlloc_getAvailableMemory}, 
    {"allocate", _wrap_btStackAlloc_allocate}, 
    {"beginBlock", _wrap_btStackAlloc_beginBlock}, 
    {"endBlock", _wrap_btStackAlloc_endBlock}, 
    {0,0}
};
static swig_lua_attribute swig_btStackAlloc_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btStackAlloc_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btStackAlloc_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btStackAlloc_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btStackAlloc_bases[] = {0};
static const char *swig_btStackAlloc_base_names[] = {0};
static swig_lua_class _wrap_class_btStackAlloc = { "btStackAlloc", &SWIGTYPE_p_btStackAlloc,_wrap_new_btStackAlloc, swig_delete_btStackAlloc, swig_btStackAlloc_methods, swig_btStackAlloc_attributes, { "btStackAlloc", swig_btStackAlloc_cls_methods, swig_btStackAlloc_cls_attributes, swig_btStackAlloc_cls_constants }, swig_btStackAlloc_bases, swig_btStackAlloc_base_names };

static int _wrap_btAabbSupport(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btAabbSupport",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btAabbSupport",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btAabbSupport",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btAabbSupport",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btAabbSupport",2,SWIGTYPE_p_btVector3);
  }
  
  result = btAabbSupport((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransformUtil_integrateTransform(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  btTransform *arg5 = 0 ;
  
  SWIG_check_num_args("btTransformUtil::integrateTransform",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btTransformUtil::integrateTransform",1,"btTransform const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransformUtil::integrateTransform",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTransformUtil::integrateTransform",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btTransformUtil::integrateTransform",4,"btScalar");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btTransformUtil::integrateTransform",5,"btTransform &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransformUtil_integrateTransform",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransformUtil_integrateTransform",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransformUtil_integrateTransform",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransformUtil_integrateTransform",5,SWIGTYPE_p_btTransform);
  }
  
  btTransformUtil::integrateTransform((btTransform const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransformUtil_calculateVelocityQuaternion(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btQuaternion *arg3 = 0 ;
  btQuaternion *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  SWIG_check_num_args("btTransformUtil::calculateVelocityQuaternion",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btTransformUtil::calculateVelocityQuaternion",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransformUtil::calculateVelocityQuaternion",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTransformUtil::calculateVelocityQuaternion",3,"btQuaternion const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btTransformUtil::calculateVelocityQuaternion",4,"btQuaternion const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btTransformUtil::calculateVelocityQuaternion",5,"btScalar");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btTransformUtil::calculateVelocityQuaternion",6,"btVector3 &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btTransformUtil::calculateVelocityQuaternion",7,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransformUtil_calculateVelocityQuaternion",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransformUtil_calculateVelocityQuaternion",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btTransformUtil_calculateVelocityQuaternion",3,SWIGTYPE_p_btQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btTransformUtil_calculateVelocityQuaternion",4,SWIGTYPE_p_btQuaternion);
  }
  
  arg5 = (btScalar)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransformUtil_calculateVelocityQuaternion",6,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransformUtil_calculateVelocityQuaternion",7,SWIGTYPE_p_btVector3);
  }
  
  btTransformUtil::calculateVelocityQuaternion((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btQuaternion const &)*arg3,(btQuaternion const &)*arg4,arg5,*arg6,*arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransformUtil_calculateDiffAxisAngleQuaternion(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = 0 ;
  btQuaternion *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  SWIG_check_num_args("btTransformUtil::calculateDiffAxisAngleQuaternion",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btTransformUtil::calculateDiffAxisAngleQuaternion",1,"btQuaternion const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransformUtil::calculateDiffAxisAngleQuaternion",2,"btQuaternion const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTransformUtil::calculateDiffAxisAngleQuaternion",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btTransformUtil::calculateDiffAxisAngleQuaternion",4,"btScalar &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btTransformUtil_calculateDiffAxisAngleQuaternion",1,SWIGTYPE_p_btQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btTransformUtil_calculateDiffAxisAngleQuaternion",2,SWIGTYPE_p_btQuaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransformUtil_calculateDiffAxisAngleQuaternion",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btTransformUtil_calculateDiffAxisAngleQuaternion",4,SWIGTYPE_p_float);
  }
  
  btTransformUtil::calculateDiffAxisAngleQuaternion((btQuaternion const &)*arg1,(btQuaternion const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransformUtil_calculateVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btScalar arg3 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  SWIG_check_num_args("btTransformUtil::calculateVelocity",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btTransformUtil::calculateVelocity",1,"btTransform const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransformUtil::calculateVelocity",2,"btTransform const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btTransformUtil::calculateVelocity",3,"btScalar");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btTransformUtil::calculateVelocity",4,"btVector3 &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btTransformUtil::calculateVelocity",5,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransformUtil_calculateVelocity",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransformUtil_calculateVelocity",2,SWIGTYPE_p_btTransform);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransformUtil_calculateVelocity",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransformUtil_calculateVelocity",5,SWIGTYPE_p_btVector3);
  }
  
  btTransformUtil::calculateVelocity((btTransform const &)*arg1,(btTransform const &)*arg2,arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransformUtil_calculateDiffAxisAngle(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  SWIG_check_num_args("btTransformUtil::calculateDiffAxisAngle",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btTransformUtil::calculateDiffAxisAngle",1,"btTransform const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTransformUtil::calculateDiffAxisAngle",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTransformUtil::calculateDiffAxisAngle",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btTransformUtil::calculateDiffAxisAngle",4,"btScalar &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransformUtil_calculateDiffAxisAngle",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransformUtil_calculateDiffAxisAngle",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTransformUtil_calculateDiffAxisAngle",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btTransformUtil_calculateDiffAxisAngle",4,SWIGTYPE_p_float);
  }
  
  btTransformUtil::calculateDiffAxisAngle((btTransform const &)*arg1,(btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTransformUtil(lua_State* L) {
  int SWIG_arg = 0;
  btTransformUtil *result = 0 ;
  
  SWIG_check_num_args("btTransformUtil::btTransformUtil",0,0)
  result = (btTransformUtil *)new btTransformUtil();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransformUtil,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTransformUtil(void *obj) {
btTransformUtil *arg1 = (btTransformUtil *) obj;
delete arg1;
}
static swig_lua_method swig_btTransformUtil_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btTransformUtil_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btTransformUtil_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTransformUtil_cls_methods[] = {
    {"integrateTransform", _wrap_btTransformUtil_integrateTransform}, 
    {"calculateVelocityQuaternion", _wrap_btTransformUtil_calculateVelocityQuaternion}, 
    {"calculateDiffAxisAngleQuaternion", _wrap_btTransformUtil_calculateDiffAxisAngleQuaternion}, 
    {"calculateVelocity", _wrap_btTransformUtil_calculateVelocity}, 
    {"calculateDiffAxisAngle", _wrap_btTransformUtil_calculateDiffAxisAngle}, 
    {0,0}
};
static swig_lua_const_info swig_btTransformUtil_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTransformUtil_bases[] = {0};
static const char *swig_btTransformUtil_base_names[] = {0};
static swig_lua_class _wrap_class_btTransformUtil = { "btTransformUtil", &SWIGTYPE_p_btTransformUtil,_wrap_new_btTransformUtil, swig_delete_btTransformUtil, swig_btTransformUtil_methods, swig_btTransformUtil_attributes, { "btTransformUtil", swig_btTransformUtil_cls_methods, swig_btTransformUtil_cls_attributes, swig_btTransformUtil_cls_constants }, swig_btTransformUtil_bases, swig_btTransformUtil_base_names };

static int _wrap_new_btConvexSeparatingDistanceUtil(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btConvexSeparatingDistanceUtil *result = 0 ;
  
  SWIG_check_num_args("btConvexSeparatingDistanceUtil::btConvexSeparatingDistanceUtil",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btConvexSeparatingDistanceUtil::btConvexSeparatingDistanceUtil",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConvexSeparatingDistanceUtil::btConvexSeparatingDistanceUtil",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (btConvexSeparatingDistanceUtil *)new btConvexSeparatingDistanceUtil(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexSeparatingDistanceUtil,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexSeparatingDistanceUtil_getConservativeSeparatingDistance(lua_State* L) {
  int SWIG_arg = 0;
  btConvexSeparatingDistanceUtil *arg1 = (btConvexSeparatingDistanceUtil *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConvexSeparatingDistanceUtil::getConservativeSeparatingDistance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexSeparatingDistanceUtil::getConservativeSeparatingDistance",1,"btConvexSeparatingDistanceUtil *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexSeparatingDistanceUtil,0))){
    SWIG_fail_ptr("btConvexSeparatingDistanceUtil_getConservativeSeparatingDistance",1,SWIGTYPE_p_btConvexSeparatingDistanceUtil);
  }
  
  result = (btScalar)(arg1)->getConservativeSeparatingDistance();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexSeparatingDistanceUtil_updateSeparatingDistance(lua_State* L) {
  int SWIG_arg = 0;
  btConvexSeparatingDistanceUtil *arg1 = (btConvexSeparatingDistanceUtil *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  SWIG_check_num_args("btConvexSeparatingDistanceUtil::updateSeparatingDistance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexSeparatingDistanceUtil::updateSeparatingDistance",1,"btConvexSeparatingDistanceUtil *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexSeparatingDistanceUtil::updateSeparatingDistance",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btConvexSeparatingDistanceUtil::updateSeparatingDistance",3,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexSeparatingDistanceUtil,0))){
    SWIG_fail_ptr("btConvexSeparatingDistanceUtil_updateSeparatingDistance",1,SWIGTYPE_p_btConvexSeparatingDistanceUtil);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btConvexSeparatingDistanceUtil_updateSeparatingDistance",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btConvexSeparatingDistanceUtil_updateSeparatingDistance",3,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->updateSeparatingDistance((btTransform const &)*arg2,(btTransform const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexSeparatingDistanceUtil_initSeparatingDistance(lua_State* L) {
  int SWIG_arg = 0;
  btConvexSeparatingDistanceUtil *arg1 = (btConvexSeparatingDistanceUtil *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btTransform *arg4 = 0 ;
  btTransform *arg5 = 0 ;
  
  SWIG_check_num_args("btConvexSeparatingDistanceUtil::initSeparatingDistance",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexSeparatingDistanceUtil::initSeparatingDistance",1,"btConvexSeparatingDistanceUtil *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexSeparatingDistanceUtil::initSeparatingDistance",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btConvexSeparatingDistanceUtil::initSeparatingDistance",3,"btScalar");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btConvexSeparatingDistanceUtil::initSeparatingDistance",4,"btTransform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btConvexSeparatingDistanceUtil::initSeparatingDistance",5,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexSeparatingDistanceUtil,0))){
    SWIG_fail_ptr("btConvexSeparatingDistanceUtil_initSeparatingDistance",1,SWIGTYPE_p_btConvexSeparatingDistanceUtil);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexSeparatingDistanceUtil_initSeparatingDistance",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btConvexSeparatingDistanceUtil_initSeparatingDistance",4,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btConvexSeparatingDistanceUtil_initSeparatingDistance",5,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->initSeparatingDistance((btVector3 const &)*arg2,arg3,(btTransform const &)*arg4,(btTransform const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConvexSeparatingDistanceUtil(void *obj) {
btConvexSeparatingDistanceUtil *arg1 = (btConvexSeparatingDistanceUtil *) obj;
delete arg1;
}
static swig_lua_method swig_btConvexSeparatingDistanceUtil_methods[] = {
    {"getConservativeSeparatingDistance", _wrap_btConvexSeparatingDistanceUtil_getConservativeSeparatingDistance}, 
    {"updateSeparatingDistance", _wrap_btConvexSeparatingDistanceUtil_updateSeparatingDistance}, 
    {"initSeparatingDistance", _wrap_btConvexSeparatingDistanceUtil_initSeparatingDistance}, 
    {0,0}
};
static swig_lua_attribute swig_btConvexSeparatingDistanceUtil_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btConvexSeparatingDistanceUtil_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConvexSeparatingDistanceUtil_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConvexSeparatingDistanceUtil_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConvexSeparatingDistanceUtil_bases[] = {0};
static const char *swig_btConvexSeparatingDistanceUtil_base_names[] = {0};
static swig_lua_class _wrap_class_btConvexSeparatingDistanceUtil = { "btConvexSeparatingDistanceUtil", &SWIGTYPE_p_btConvexSeparatingDistanceUtil,_wrap_new_btConvexSeparatingDistanceUtil, swig_delete_btConvexSeparatingDistanceUtil, swig_btConvexSeparatingDistanceUtil_methods, swig_btConvexSeparatingDistanceUtil_attributes, { "btConvexSeparatingDistanceUtil", swig_btConvexSeparatingDistanceUtil_cls_methods, swig_btConvexSeparatingDistanceUtil_cls_attributes, swig_btConvexSeparatingDistanceUtil_cls_constants }, swig_btConvexSeparatingDistanceUtil_bases, swig_btConvexSeparatingDistanceUtil_base_names };

static int _wrap_btBroadphaseProxy_m_clientObject_set(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btBroadphaseProxy::m_clientObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseProxy::m_clientObject",1,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBroadphaseProxy::m_clientObject",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseProxy_m_clientObject_set",1,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btBroadphaseProxy_m_clientObject_set");
  if (arg1) (arg1)->m_clientObject = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_m_clientObject_get(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btBroadphaseProxy::m_clientObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseProxy::m_clientObject",1,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseProxy_m_clientObject_get",1,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (void *) ((arg1)->m_clientObject);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_m_collisionFilterGroup_set(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("btBroadphaseProxy::m_collisionFilterGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseProxy::m_collisionFilterGroup",1,"btBroadphaseProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btBroadphaseProxy::m_collisionFilterGroup",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseProxy_m_collisionFilterGroup_set",1,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_collisionFilterGroup = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_m_collisionFilterGroup_get(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  short result;
  
  SWIG_check_num_args("btBroadphaseProxy::m_collisionFilterGroup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseProxy::m_collisionFilterGroup",1,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseProxy_m_collisionFilterGroup_get",1,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (short) ((arg1)->m_collisionFilterGroup);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_m_collisionFilterMask_set(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("btBroadphaseProxy::m_collisionFilterMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseProxy::m_collisionFilterMask",1,"btBroadphaseProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btBroadphaseProxy::m_collisionFilterMask",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseProxy_m_collisionFilterMask_set",1,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_collisionFilterMask = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_m_collisionFilterMask_get(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  short result;
  
  SWIG_check_num_args("btBroadphaseProxy::m_collisionFilterMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseProxy::m_collisionFilterMask",1,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseProxy_m_collisionFilterMask_get",1,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (short) ((arg1)->m_collisionFilterMask);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_m_multiSapParentProxy_set(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btBroadphaseProxy::m_multiSapParentProxy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseProxy::m_multiSapParentProxy",1,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBroadphaseProxy::m_multiSapParentProxy",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseProxy_m_multiSapParentProxy_set",1,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btBroadphaseProxy_m_multiSapParentProxy_set");
  if (arg1) (arg1)->m_multiSapParentProxy = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_m_multiSapParentProxy_get(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btBroadphaseProxy::m_multiSapParentProxy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseProxy::m_multiSapParentProxy",1,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseProxy_m_multiSapParentProxy_get",1,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (void *) ((arg1)->m_multiSapParentProxy);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_m_uniqueId_set(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btBroadphaseProxy::m_uniqueId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseProxy::m_uniqueId",1,"btBroadphaseProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btBroadphaseProxy::m_uniqueId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseProxy_m_uniqueId_set",1,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_uniqueId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_m_uniqueId_get(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  int result;
  
  SWIG_check_num_args("btBroadphaseProxy::m_uniqueId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseProxy::m_uniqueId",1,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseProxy_m_uniqueId_get",1,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (int) ((arg1)->m_uniqueId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_m_aabbMin_set(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btBroadphaseProxy::m_aabbMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseProxy::m_aabbMin",1,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBroadphaseProxy::m_aabbMin",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseProxy_m_aabbMin_set",1,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseProxy_m_aabbMin_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_aabbMin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_m_aabbMin_get(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btBroadphaseProxy::m_aabbMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseProxy::m_aabbMin",1,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseProxy_m_aabbMin_get",1,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (btVector3 *)& ((arg1)->m_aabbMin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_m_aabbMax_set(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btBroadphaseProxy::m_aabbMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseProxy::m_aabbMax",1,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBroadphaseProxy::m_aabbMax",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseProxy_m_aabbMax_set",1,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseProxy_m_aabbMax_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_aabbMax = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_m_aabbMax_get(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btBroadphaseProxy::m_aabbMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseProxy::m_aabbMax",1,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseProxy_m_aabbMax_get",1,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (btVector3 *)& ((arg1)->m_aabbMax);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_getUid(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  int result;
  
  SWIG_check_num_args("btBroadphaseProxy::getUid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseProxy::getUid",1,"btBroadphaseProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseProxy_getUid",1,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (int)((btBroadphaseProxy const *)arg1)->getUid();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBroadphaseProxy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseProxy *result = 0 ;
  
  SWIG_check_num_args("btBroadphaseProxy::btBroadphaseProxy",0,0)
  result = (btBroadphaseProxy *)new btBroadphaseProxy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphaseProxy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBroadphaseProxy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  short arg4 ;
  short arg5 ;
  void *arg6 = (void *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  SWIG_check_num_args("btBroadphaseProxy::btBroadphaseProxy",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btBroadphaseProxy::btBroadphaseProxy",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBroadphaseProxy::btBroadphaseProxy",2,"btVector3 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btBroadphaseProxy::btBroadphaseProxy",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btBroadphaseProxy::btBroadphaseProxy",4,"short");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btBroadphaseProxy::btBroadphaseProxy",5,"short");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("btBroadphaseProxy::btBroadphaseProxy",6,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBroadphaseProxy",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBroadphaseProxy",2,SWIGTYPE_p_btVector3);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"new_btBroadphaseProxy");
  arg4 = (short)lua_tonumber(L, 4);
  arg5 = (short)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"new_btBroadphaseProxy");
  result = (btBroadphaseProxy *)new btBroadphaseProxy((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphaseProxy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBroadphaseProxy__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  short arg4 ;
  short arg5 ;
  btBroadphaseProxy *result = 0 ;
  
  SWIG_check_num_args("btBroadphaseProxy::btBroadphaseProxy",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btBroadphaseProxy::btBroadphaseProxy",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBroadphaseProxy::btBroadphaseProxy",2,"btVector3 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btBroadphaseProxy::btBroadphaseProxy",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btBroadphaseProxy::btBroadphaseProxy",4,"short");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btBroadphaseProxy::btBroadphaseProxy",5,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBroadphaseProxy",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBroadphaseProxy",2,SWIGTYPE_p_btVector3);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"new_btBroadphaseProxy");
  arg4 = (short)lua_tonumber(L, 4);
  arg5 = (short)lua_tonumber(L, 5);
  result = (btBroadphaseProxy *)new btBroadphaseProxy((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphaseProxy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBroadphaseProxy(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btBroadphaseProxy__SWIG_0(L);
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_btBroadphaseProxy__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, 0, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_new_btBroadphaseProxy__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btBroadphaseProxy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btBroadphaseProxy::btBroadphaseProxy()\n"
    "    btBroadphaseProxy::btBroadphaseProxy(btVector3 const &,btVector3 const &,void *,short,short,void *)\n"
    "    btBroadphaseProxy::btBroadphaseProxy(btVector3 const &,btVector3 const &,void *,short,short)\n");
  lua_error(L);return 0;
}


static int _wrap_btBroadphaseProxy_isPolyhedral(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool result;
  
  SWIG_check_num_args("btBroadphaseProxy::isPolyhedral",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btBroadphaseProxy::isPolyhedral",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (bool)btBroadphaseProxy::isPolyhedral(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_isConvex(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool result;
  
  SWIG_check_num_args("btBroadphaseProxy::isConvex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btBroadphaseProxy::isConvex",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (bool)btBroadphaseProxy::isConvex(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_isNonMoving(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool result;
  
  SWIG_check_num_args("btBroadphaseProxy::isNonMoving",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btBroadphaseProxy::isNonMoving",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (bool)btBroadphaseProxy::isNonMoving(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_isConcave(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool result;
  
  SWIG_check_num_args("btBroadphaseProxy::isConcave",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btBroadphaseProxy::isConcave",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (bool)btBroadphaseProxy::isConcave(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_isCompound(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool result;
  
  SWIG_check_num_args("btBroadphaseProxy::isCompound",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btBroadphaseProxy::isCompound",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (bool)btBroadphaseProxy::isCompound(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_isSoftBody(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool result;
  
  SWIG_check_num_args("btBroadphaseProxy::isSoftBody",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btBroadphaseProxy::isSoftBody",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (bool)btBroadphaseProxy::isSoftBody(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_isInfinite(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool result;
  
  SWIG_check_num_args("btBroadphaseProxy::isInfinite",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btBroadphaseProxy::isInfinite",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (bool)btBroadphaseProxy::isInfinite(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseProxy_isConvex2d(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool result;
  
  SWIG_check_num_args("btBroadphaseProxy::isConvex2d",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btBroadphaseProxy::isConvex2d",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (bool)btBroadphaseProxy::isConvex2d(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btBroadphaseProxy(void *obj) {
btBroadphaseProxy *arg1 = (btBroadphaseProxy *) obj;
delete arg1;
}
static swig_lua_method swig_btBroadphaseProxy_methods[] = {
    {"getUid", _wrap_btBroadphaseProxy_getUid}, 
    {0,0}
};
static swig_lua_attribute swig_btBroadphaseProxy_attributes[] = {
    { "m_clientObject", _wrap_btBroadphaseProxy_m_clientObject_get, _wrap_btBroadphaseProxy_m_clientObject_set},
    { "m_collisionFilterGroup", _wrap_btBroadphaseProxy_m_collisionFilterGroup_get, _wrap_btBroadphaseProxy_m_collisionFilterGroup_set},
    { "m_collisionFilterMask", _wrap_btBroadphaseProxy_m_collisionFilterMask_get, _wrap_btBroadphaseProxy_m_collisionFilterMask_set},
    { "m_multiSapParentProxy", _wrap_btBroadphaseProxy_m_multiSapParentProxy_get, _wrap_btBroadphaseProxy_m_multiSapParentProxy_set},
    { "m_uniqueId", _wrap_btBroadphaseProxy_m_uniqueId_get, _wrap_btBroadphaseProxy_m_uniqueId_set},
    { "m_aabbMin", _wrap_btBroadphaseProxy_m_aabbMin_get, _wrap_btBroadphaseProxy_m_aabbMin_set},
    { "m_aabbMax", _wrap_btBroadphaseProxy_m_aabbMax_get, _wrap_btBroadphaseProxy_m_aabbMax_set},
    {0,0,0}
};
static swig_lua_attribute swig_btBroadphaseProxy_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btBroadphaseProxy_cls_methods[] = {
    {"isPolyhedral", _wrap_btBroadphaseProxy_isPolyhedral}, 
    {"isConvex", _wrap_btBroadphaseProxy_isConvex}, 
    {"isNonMoving", _wrap_btBroadphaseProxy_isNonMoving}, 
    {"isConcave", _wrap_btBroadphaseProxy_isConcave}, 
    {"isCompound", _wrap_btBroadphaseProxy_isCompound}, 
    {"isSoftBody", _wrap_btBroadphaseProxy_isSoftBody}, 
    {"isInfinite", _wrap_btBroadphaseProxy_isInfinite}, 
    {"isConvex2d", _wrap_btBroadphaseProxy_isConvex2d}, 
    {0,0}
};
static swig_lua_const_info swig_btBroadphaseProxy_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("DefaultFilter", btBroadphaseProxy::DefaultFilter)},
    {SWIG_LUA_CONSTTAB_INT("StaticFilter", btBroadphaseProxy::StaticFilter)},
    {SWIG_LUA_CONSTTAB_INT("KinematicFilter", btBroadphaseProxy::KinematicFilter)},
    {SWIG_LUA_CONSTTAB_INT("DebrisFilter", btBroadphaseProxy::DebrisFilter)},
    {SWIG_LUA_CONSTTAB_INT("SensorTrigger", btBroadphaseProxy::SensorTrigger)},
    {SWIG_LUA_CONSTTAB_INT("CharacterFilter", btBroadphaseProxy::CharacterFilter)},
    {SWIG_LUA_CONSTTAB_INT("AllFilter", btBroadphaseProxy::AllFilter)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btBroadphaseProxy_bases[] = {0};
static const char *swig_btBroadphaseProxy_base_names[] = {0};
static swig_lua_class _wrap_class_btBroadphaseProxy = { "btBroadphaseProxy", &SWIGTYPE_p_btBroadphaseProxy,_wrap_new_btBroadphaseProxy, swig_delete_btBroadphaseProxy, swig_btBroadphaseProxy_methods, swig_btBroadphaseProxy_attributes, { "btBroadphaseProxy", swig_btBroadphaseProxy_cls_methods, swig_btBroadphaseProxy_cls_attributes, swig_btBroadphaseProxy_cls_constants }, swig_btBroadphaseProxy_bases, swig_btBroadphaseProxy_base_names };

static int _wrap_new_btBroadphasePair__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btBroadphasePair::btBroadphasePair",0,0)
  result = (btBroadphasePair *)new btBroadphasePair();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBroadphasePair__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphasePair *arg1 = 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btBroadphasePair::btBroadphasePair",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btBroadphasePair::btBroadphasePair",1,"btBroadphasePair const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphasePair,0))){
    SWIG_fail_ptr("new_btBroadphasePair",1,SWIGTYPE_p_btBroadphasePair);
  }
  
  result = (btBroadphasePair *)new btBroadphasePair((btBroadphasePair const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBroadphasePair__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseProxy *arg1 = 0 ;
  btBroadphaseProxy *arg2 = 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btBroadphasePair::btBroadphasePair",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btBroadphasePair::btBroadphasePair",1,"btBroadphaseProxy &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBroadphasePair::btBroadphasePair",2,"btBroadphaseProxy &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("new_btBroadphasePair",1,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("new_btBroadphasePair",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (btBroadphasePair *)new btBroadphasePair(*arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBroadphasePair(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btBroadphasePair__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btBroadphasePair, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_btBroadphasePair__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btBroadphaseProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btBroadphaseProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_btBroadphasePair__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btBroadphasePair'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btBroadphasePair::btBroadphasePair()\n"
    "    btBroadphasePair::btBroadphasePair(btBroadphasePair const &)\n"
    "    btBroadphasePair::btBroadphasePair(btBroadphaseProxy &,btBroadphaseProxy &)\n");
  lua_error(L);return 0;
}


static int _wrap_btBroadphasePair_m_pProxy0_set(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  SWIG_check_num_args("btBroadphasePair::m_pProxy0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphasePair::m_pProxy0",1,"btBroadphasePair *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBroadphasePair::m_pProxy0",2,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphasePair,0))){
    SWIG_fail_ptr("btBroadphasePair_m_pProxy0_set",1,SWIGTYPE_p_btBroadphasePair);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btBroadphasePair_m_pProxy0_set",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  if (arg1) (arg1)->m_pProxy0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphasePair_m_pProxy0_get(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  SWIG_check_num_args("btBroadphasePair::m_pProxy0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphasePair::m_pProxy0",1,"btBroadphasePair *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphasePair,0))){
    SWIG_fail_ptr("btBroadphasePair_m_pProxy0_get",1,SWIGTYPE_p_btBroadphasePair);
  }
  
  result = (btBroadphaseProxy *) ((arg1)->m_pProxy0);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphaseProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphasePair_m_pProxy1_set(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  SWIG_check_num_args("btBroadphasePair::m_pProxy1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphasePair::m_pProxy1",1,"btBroadphasePair *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBroadphasePair::m_pProxy1",2,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphasePair,0))){
    SWIG_fail_ptr("btBroadphasePair_m_pProxy1_set",1,SWIGTYPE_p_btBroadphasePair);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btBroadphasePair_m_pProxy1_set",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  if (arg1) (arg1)->m_pProxy1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphasePair_m_pProxy1_get(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  SWIG_check_num_args("btBroadphasePair::m_pProxy1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphasePair::m_pProxy1",1,"btBroadphasePair *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphasePair,0))){
    SWIG_fail_ptr("btBroadphasePair_m_pProxy1_get",1,SWIGTYPE_p_btBroadphasePair);
  }
  
  result = (btBroadphaseProxy *) ((arg1)->m_pProxy1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphaseProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphasePair_m_algorithm_set(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btCollisionAlgorithm *arg2 = (btCollisionAlgorithm *) 0 ;
  
  SWIG_check_num_args("btBroadphasePair::m_algorithm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphasePair::m_algorithm",1,"btBroadphasePair *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBroadphasePair::m_algorithm",2,"btCollisionAlgorithm *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphasePair,0))){
    SWIG_fail_ptr("btBroadphasePair_m_algorithm_set",1,SWIGTYPE_p_btBroadphasePair);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionAlgorithm,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btBroadphasePair_m_algorithm_set",2,SWIGTYPE_p_btCollisionAlgorithm);
  }
  
  if (arg1) (arg1)->m_algorithm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphasePair_m_algorithm_get(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  SWIG_check_num_args("btBroadphasePair::m_algorithm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphasePair::m_algorithm",1,"btBroadphasePair *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphasePair,0))){
    SWIG_fail_ptr("btBroadphasePair_m_algorithm_get",1,SWIGTYPE_p_btBroadphasePair);
  }
  
  result = (btCollisionAlgorithm *) ((arg1)->m_algorithm);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionAlgorithm,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btBroadphasePair(void *obj) {
btBroadphasePair *arg1 = (btBroadphasePair *) obj;
delete arg1;
}
static swig_lua_method swig_btBroadphasePair_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btBroadphasePair_attributes[] = {
    { "m_pProxy0", _wrap_btBroadphasePair_m_pProxy0_get, _wrap_btBroadphasePair_m_pProxy0_set},
    { "m_pProxy1", _wrap_btBroadphasePair_m_pProxy1_get, _wrap_btBroadphasePair_m_pProxy1_set},
    { "m_algorithm", _wrap_btBroadphasePair_m_algorithm_get, _wrap_btBroadphasePair_m_algorithm_set},
    {0,0,0}
};
static swig_lua_attribute swig_btBroadphasePair_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btBroadphasePair_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btBroadphasePair_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btBroadphasePair_bases[] = {0};
static const char *swig_btBroadphasePair_base_names[] = {0};
static swig_lua_class _wrap_class_btBroadphasePair = { "btBroadphasePair", &SWIGTYPE_p_btBroadphasePair,_wrap_new_btBroadphasePair, swig_delete_btBroadphasePair, swig_btBroadphasePair_methods, swig_btBroadphasePair_attributes, { "btBroadphasePair", swig_btBroadphasePair_cls_methods, swig_btBroadphasePair_cls_attributes, swig_btBroadphasePair_cls_constants }, swig_btBroadphasePair_bases, swig_btBroadphasePair_base_names };

static int _wrap_btBroadphasePairSortPredicate___call(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphasePairSortPredicate *arg1 = (btBroadphasePairSortPredicate *) 0 ;
  btBroadphasePair *arg2 = 0 ;
  btBroadphasePair *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("btBroadphasePairSortPredicate::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphasePairSortPredicate::operator ()",1,"btBroadphasePairSortPredicate const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBroadphasePairSortPredicate::operator ()",2,"btBroadphasePair const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBroadphasePairSortPredicate::operator ()",3,"btBroadphasePair const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphasePairSortPredicate,0))){
    SWIG_fail_ptr("btBroadphasePairSortPredicate___call",1,SWIGTYPE_p_btBroadphasePairSortPredicate);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphasePair,0))){
    SWIG_fail_ptr("btBroadphasePairSortPredicate___call",2,SWIGTYPE_p_btBroadphasePair);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphasePair,0))){
    SWIG_fail_ptr("btBroadphasePairSortPredicate___call",3,SWIGTYPE_p_btBroadphasePair);
  }
  
  result = (bool)((btBroadphasePairSortPredicate const *)arg1)->operator ()((btBroadphasePair const &)*arg2,(btBroadphasePair const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBroadphasePairSortPredicate(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphasePairSortPredicate *result = 0 ;
  
  SWIG_check_num_args("btBroadphasePairSortPredicate::btBroadphasePairSortPredicate",0,0)
  result = (btBroadphasePairSortPredicate *)new btBroadphasePairSortPredicate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePairSortPredicate,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btBroadphasePairSortPredicate(void *obj) {
btBroadphasePairSortPredicate *arg1 = (btBroadphasePairSortPredicate *) obj;
delete arg1;
}
static swig_lua_method swig_btBroadphasePairSortPredicate_methods[] = {
    {"__call", _wrap_btBroadphasePairSortPredicate___call}, 
    {0,0}
};
static swig_lua_attribute swig_btBroadphasePairSortPredicate_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btBroadphasePairSortPredicate_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btBroadphasePairSortPredicate_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btBroadphasePairSortPredicate_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btBroadphasePairSortPredicate_bases[] = {0};
static const char *swig_btBroadphasePairSortPredicate_base_names[] = {0};
static swig_lua_class _wrap_class_btBroadphasePairSortPredicate = { "btBroadphasePairSortPredicate", &SWIGTYPE_p_btBroadphasePairSortPredicate,_wrap_new_btBroadphasePairSortPredicate, swig_delete_btBroadphasePairSortPredicate, swig_btBroadphasePairSortPredicate_methods, swig_btBroadphasePairSortPredicate_attributes, { "btBroadphasePairSortPredicate", swig_btBroadphasePairSortPredicate_cls_methods, swig_btBroadphasePairSortPredicate_cls_attributes, swig_btBroadphasePairSortPredicate_cls_constants }, swig_btBroadphasePairSortPredicate_bases, swig_btBroadphasePairSortPredicate_base_names };

static int _wrap_btBroadphaseAabbCallback_process(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseAabbCallback *arg1 = (btBroadphaseAabbCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  SWIG_check_num_args("btBroadphaseAabbCallback::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseAabbCallback::process",1,"btBroadphaseAabbCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBroadphaseAabbCallback::process",2,"btBroadphaseProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseAabbCallback,0))){
    SWIG_fail_ptr("btBroadphaseAabbCallback_process",1,SWIGTYPE_p_btBroadphaseAabbCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseAabbCallback_process",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (bool)(arg1)->process((btBroadphaseProxy const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btBroadphaseAabbCallback(void *obj) {
btBroadphaseAabbCallback *arg1 = (btBroadphaseAabbCallback *) obj;
delete arg1;
}
static swig_lua_method swig_btBroadphaseAabbCallback_methods[] = {
    {"process", _wrap_btBroadphaseAabbCallback_process}, 
    {0,0}
};
static swig_lua_attribute swig_btBroadphaseAabbCallback_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btBroadphaseAabbCallback_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btBroadphaseAabbCallback_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btBroadphaseAabbCallback_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btBroadphaseAabbCallback_bases[] = {0};
static const char *swig_btBroadphaseAabbCallback_base_names[] = {0};
static swig_lua_class _wrap_class_btBroadphaseAabbCallback = { "btBroadphaseAabbCallback", &SWIGTYPE_p_btBroadphaseAabbCallback,0, swig_delete_btBroadphaseAabbCallback, swig_btBroadphaseAabbCallback_methods, swig_btBroadphaseAabbCallback_attributes, { "btBroadphaseAabbCallback", swig_btBroadphaseAabbCallback_cls_methods, swig_btBroadphaseAabbCallback_cls_attributes, swig_btBroadphaseAabbCallback_cls_constants }, swig_btBroadphaseAabbCallback_bases, swig_btBroadphaseAabbCallback_base_names };

static int _wrap_btBroadphaseRayCallback_m_rayDirectionInverse_set(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btBroadphaseRayCallback::m_rayDirectionInverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseRayCallback::m_rayDirectionInverse",1,"btBroadphaseRayCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBroadphaseRayCallback::m_rayDirectionInverse",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseRayCallback,0))){
    SWIG_fail_ptr("btBroadphaseRayCallback_m_rayDirectionInverse_set",1,SWIGTYPE_p_btBroadphaseRayCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseRayCallback_m_rayDirectionInverse_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_rayDirectionInverse = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseRayCallback_m_rayDirectionInverse_get(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btBroadphaseRayCallback::m_rayDirectionInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseRayCallback::m_rayDirectionInverse",1,"btBroadphaseRayCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseRayCallback,0))){
    SWIG_fail_ptr("btBroadphaseRayCallback_m_rayDirectionInverse_get",1,SWIGTYPE_p_btBroadphaseRayCallback);
  }
  
  result = (btVector3 *)& ((arg1)->m_rayDirectionInverse);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseRayCallback_m_signs_set(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  unsigned int *arg2 ;
  
  SWIG_check_num_args("btBroadphaseRayCallback::m_signs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseRayCallback::m_signs",1,"btBroadphaseRayCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBroadphaseRayCallback::m_signs",2,"unsigned int [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseRayCallback,0))){
    SWIG_fail_ptr("btBroadphaseRayCallback_m_signs_set",1,SWIGTYPE_p_btBroadphaseRayCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("btBroadphaseRayCallback_m_signs_set",2,SWIGTYPE_p_unsigned_int);
  }
  
  {
    size_t ii;
    unsigned int *b = (unsigned int *) arg1->m_signs;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned int *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseRayCallback_m_signs_get(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("btBroadphaseRayCallback::m_signs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseRayCallback::m_signs",1,"btBroadphaseRayCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseRayCallback,0))){
    SWIG_fail_ptr("btBroadphaseRayCallback_m_signs_get",1,SWIGTYPE_p_btBroadphaseRayCallback);
  }
  
  result = (unsigned int *)(unsigned int *) ((arg1)->m_signs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseRayCallback_m_lambda_max_set(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btBroadphaseRayCallback::m_lambda_max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseRayCallback::m_lambda_max",1,"btBroadphaseRayCallback *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btBroadphaseRayCallback::m_lambda_max",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseRayCallback,0))){
    SWIG_fail_ptr("btBroadphaseRayCallback_m_lambda_max_set",1,SWIGTYPE_p_btBroadphaseRayCallback);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_lambda_max = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseRayCallback_m_lambda_max_get(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btBroadphaseRayCallback::m_lambda_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseRayCallback::m_lambda_max",1,"btBroadphaseRayCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseRayCallback,0))){
    SWIG_fail_ptr("btBroadphaseRayCallback_m_lambda_max_get",1,SWIGTYPE_p_btBroadphaseRayCallback);
  }
  
  result = (btScalar) ((arg1)->m_lambda_max);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btBroadphaseRayCallback(void *obj) {
btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) obj;
delete arg1;
}
static swig_lua_method swig_btBroadphaseRayCallback_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btBroadphaseRayCallback_attributes[] = {
    { "m_rayDirectionInverse", _wrap_btBroadphaseRayCallback_m_rayDirectionInverse_get, _wrap_btBroadphaseRayCallback_m_rayDirectionInverse_set},
    { "m_signs", _wrap_btBroadphaseRayCallback_m_signs_get, _wrap_btBroadphaseRayCallback_m_signs_set},
    { "m_lambda_max", _wrap_btBroadphaseRayCallback_m_lambda_max_get, _wrap_btBroadphaseRayCallback_m_lambda_max_set},
    {0,0,0}
};
static swig_lua_attribute swig_btBroadphaseRayCallback_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btBroadphaseRayCallback_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btBroadphaseRayCallback_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btBroadphaseRayCallback_bases[] = {0,0};
static const char *swig_btBroadphaseRayCallback_base_names[] = {"btBroadphaseAabbCallback *",0};
static swig_lua_class _wrap_class_btBroadphaseRayCallback = { "btBroadphaseRayCallback", &SWIGTYPE_p_btBroadphaseRayCallback,0, swig_delete_btBroadphaseRayCallback, swig_btBroadphaseRayCallback_methods, swig_btBroadphaseRayCallback_attributes, { "btBroadphaseRayCallback", swig_btBroadphaseRayCallback_cls_methods, swig_btBroadphaseRayCallback_cls_attributes, swig_btBroadphaseRayCallback_cls_constants }, swig_btBroadphaseRayCallback_bases, swig_btBroadphaseRayCallback_base_names };

static int _wrap_btBroadphaseInterface_createProxy(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  short arg6 ;
  short arg7 ;
  btDispatcher *arg8 = (btDispatcher *) 0 ;
  void *arg9 = (void *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  SWIG_check_num_args("btBroadphaseInterface::createProxy",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseInterface::createProxy",1,"btBroadphaseInterface *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBroadphaseInterface::createProxy",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBroadphaseInterface::createProxy",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btBroadphaseInterface::createProxy",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btBroadphaseInterface::createProxy",5,"void *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btBroadphaseInterface::createProxy",6,"short");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("btBroadphaseInterface::createProxy",7,"short");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("btBroadphaseInterface::createProxy",8,"btDispatcher *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("btBroadphaseInterface::createProxy",9,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("btBroadphaseInterface_createProxy",1,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_createProxy",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_createProxy",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"btBroadphaseInterface_createProxy");
  arg6 = (short)lua_tonumber(L, 6);
  arg7 = (short)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btBroadphaseInterface_createProxy",8,SWIGTYPE_p_btDispatcher);
  }
  
  arg9=(void *)SWIG_MustGetPtr(L,9,0,0,9,"btBroadphaseInterface_createProxy");
  result = (btBroadphaseProxy *)(arg1)->createProxy((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphaseProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseInterface_destroyProxy(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btBroadphaseInterface::destroyProxy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseInterface::destroyProxy",1,"btBroadphaseInterface *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBroadphaseInterface::destroyProxy",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btBroadphaseInterface::destroyProxy",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("btBroadphaseInterface_destroyProxy",1,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseInterface_destroyProxy",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btBroadphaseInterface_destroyProxy",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->destroyProxy(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseInterface_setAabb(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btDispatcher *arg5 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btBroadphaseInterface::setAabb",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseInterface::setAabb",1,"btBroadphaseInterface *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBroadphaseInterface::setAabb",2,"btBroadphaseProxy *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBroadphaseInterface::setAabb",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btBroadphaseInterface::setAabb",4,"btVector3 const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btBroadphaseInterface::setAabb",5,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("btBroadphaseInterface_setAabb",1,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseInterface_setAabb",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_setAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_setAabb",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btBroadphaseInterface_setAabb",5,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->setAabb(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseInterface_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btBroadphaseInterface::getAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseInterface::getAabb",1,"btBroadphaseInterface const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBroadphaseInterface::getAabb",2,"btBroadphaseProxy *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBroadphaseInterface::getAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btBroadphaseInterface::getAabb",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("btBroadphaseInterface_getAabb",1,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btBroadphaseInterface_getAabb",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_getAabb",4,SWIGTYPE_p_btVector3);
  }
  
  ((btBroadphaseInterface const *)arg1)->getAabb(arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseInterface_rayTest__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  SWIG_check_num_args("btBroadphaseInterface::rayTest",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseInterface::rayTest",1,"btBroadphaseInterface *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBroadphaseInterface::rayTest",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBroadphaseInterface::rayTest",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btBroadphaseInterface::rayTest",4,"btBroadphaseRayCallback &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btBroadphaseInterface::rayTest",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btBroadphaseInterface::rayTest",6,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("btBroadphaseInterface_rayTest",1,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_rayTest",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_rayTest",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btBroadphaseRayCallback,0))){
    SWIG_fail_ptr("btBroadphaseInterface_rayTest",4,SWIGTYPE_p_btBroadphaseRayCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_rayTest",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_rayTest",6,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseInterface_rayTest__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  SWIG_check_num_args("btBroadphaseInterface::rayTest",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseInterface::rayTest",1,"btBroadphaseInterface *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBroadphaseInterface::rayTest",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBroadphaseInterface::rayTest",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btBroadphaseInterface::rayTest",4,"btBroadphaseRayCallback &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btBroadphaseInterface::rayTest",5,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("btBroadphaseInterface_rayTest",1,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_rayTest",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_rayTest",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btBroadphaseRayCallback,0))){
    SWIG_fail_ptr("btBroadphaseInterface_rayTest",4,SWIGTYPE_p_btBroadphaseRayCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_rayTest",5,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseInterface_rayTest__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  
  SWIG_check_num_args("btBroadphaseInterface::rayTest",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseInterface::rayTest",1,"btBroadphaseInterface *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBroadphaseInterface::rayTest",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBroadphaseInterface::rayTest",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btBroadphaseInterface::rayTest",4,"btBroadphaseRayCallback &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("btBroadphaseInterface_rayTest",1,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_rayTest",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_rayTest",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btBroadphaseRayCallback,0))){
    SWIG_fail_ptr("btBroadphaseInterface_rayTest",4,SWIGTYPE_p_btBroadphaseRayCallback);
  }
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseInterface_rayTest(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btBroadphaseInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btBroadphaseRayCallback, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btBroadphaseInterface_rayTest__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btBroadphaseInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btBroadphaseRayCallback, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_btBroadphaseInterface_rayTest__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btBroadphaseInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btBroadphaseRayCallback, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_btBroadphaseInterface_rayTest__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btBroadphaseInterface_rayTest'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btBroadphaseInterface::rayTest(btVector3 const &,btVector3 const &,btBroadphaseRayCallback &,btVector3 const &,btVector3 const &)\n"
    "    btBroadphaseInterface::rayTest(btVector3 const &,btVector3 const &,btBroadphaseRayCallback &,btVector3 const &)\n"
    "    btBroadphaseInterface::rayTest(btVector3 const &,btVector3 const &,btBroadphaseRayCallback &)\n");
  lua_error(L);return 0;
}


static int _wrap_btBroadphaseInterface_aabbTest(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseAabbCallback *arg4 = 0 ;
  
  SWIG_check_num_args("btBroadphaseInterface::aabbTest",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseInterface::aabbTest",1,"btBroadphaseInterface *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBroadphaseInterface::aabbTest",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBroadphaseInterface::aabbTest",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btBroadphaseInterface::aabbTest",4,"btBroadphaseAabbCallback &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("btBroadphaseInterface_aabbTest",1,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_aabbTest",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_aabbTest",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btBroadphaseAabbCallback,0))){
    SWIG_fail_ptr("btBroadphaseInterface_aabbTest",4,SWIGTYPE_p_btBroadphaseAabbCallback);
  }
  
  (arg1)->aabbTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseInterface_calculateOverlappingPairs(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btBroadphaseInterface::calculateOverlappingPairs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseInterface::calculateOverlappingPairs",1,"btBroadphaseInterface *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBroadphaseInterface::calculateOverlappingPairs",2,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("btBroadphaseInterface_calculateOverlappingPairs",1,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btBroadphaseInterface_calculateOverlappingPairs",2,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->calculateOverlappingPairs(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseInterface_getOverlappingPairCache__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  SWIG_check_num_args("btBroadphaseInterface::getOverlappingPairCache",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseInterface::getOverlappingPairCache",1,"btBroadphaseInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("btBroadphaseInterface_getOverlappingPairCache",1,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  result = (btOverlappingPairCache *)(arg1)->getOverlappingPairCache();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btOverlappingPairCache,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseInterface_getOverlappingPairCache__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  SWIG_check_num_args("btBroadphaseInterface::getOverlappingPairCache",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseInterface::getOverlappingPairCache",1,"btBroadphaseInterface const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("btBroadphaseInterface_getOverlappingPairCache",1,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  result = (btOverlappingPairCache *)((btBroadphaseInterface const *)arg1)->getOverlappingPairCache();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btOverlappingPairCache,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseInterface_getOverlappingPairCache(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btBroadphaseInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btBroadphaseInterface_getOverlappingPairCache__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btBroadphaseInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btBroadphaseInterface_getOverlappingPairCache__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btBroadphaseInterface_getOverlappingPairCache'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btBroadphaseInterface::getOverlappingPairCache()\n"
    "    btBroadphaseInterface::getOverlappingPairCache() const\n");
  lua_error(L);return 0;
}


static int _wrap_btBroadphaseInterface_getBroadphaseAabb(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btBroadphaseInterface::getBroadphaseAabb",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseInterface::getBroadphaseAabb",1,"btBroadphaseInterface const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBroadphaseInterface::getBroadphaseAabb",2,"btVector3 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBroadphaseInterface::getBroadphaseAabb",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("btBroadphaseInterface_getBroadphaseAabb",1,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_getBroadphaseAabb",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBroadphaseInterface_getBroadphaseAabb",3,SWIGTYPE_p_btVector3);
  }
  
  ((btBroadphaseInterface const *)arg1)->getBroadphaseAabb(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseInterface_resetPool(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btBroadphaseInterface::resetPool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseInterface::resetPool",1,"btBroadphaseInterface *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBroadphaseInterface::resetPool",2,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("btBroadphaseInterface_resetPool",1,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btBroadphaseInterface_resetPool",2,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->resetPool(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBroadphaseInterface_printStats(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  
  SWIG_check_num_args("btBroadphaseInterface::printStats",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBroadphaseInterface::printStats",1,"btBroadphaseInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("btBroadphaseInterface_printStats",1,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  (arg1)->printStats();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btBroadphaseInterface(void *obj) {
btBroadphaseInterface *arg1 = (btBroadphaseInterface *) obj;
delete arg1;
}
static swig_lua_method swig_btBroadphaseInterface_methods[] = {
    {"createProxy", _wrap_btBroadphaseInterface_createProxy}, 
    {"destroyProxy", _wrap_btBroadphaseInterface_destroyProxy}, 
    {"setAabb", _wrap_btBroadphaseInterface_setAabb}, 
    {"getAabb", _wrap_btBroadphaseInterface_getAabb}, 
    {"rayTest", _wrap_btBroadphaseInterface_rayTest}, 
    {"aabbTest", _wrap_btBroadphaseInterface_aabbTest}, 
    {"calculateOverlappingPairs", _wrap_btBroadphaseInterface_calculateOverlappingPairs}, 
    {"getOverlappingPairCache", _wrap_btBroadphaseInterface_getOverlappingPairCache}, 
    {"getBroadphaseAabb", _wrap_btBroadphaseInterface_getBroadphaseAabb}, 
    {"resetPool", _wrap_btBroadphaseInterface_resetPool}, 
    {"printStats", _wrap_btBroadphaseInterface_printStats}, 
    {0,0}
};
static swig_lua_attribute swig_btBroadphaseInterface_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btBroadphaseInterface_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btBroadphaseInterface_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btBroadphaseInterface_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btBroadphaseInterface_bases[] = {0};
static const char *swig_btBroadphaseInterface_base_names[] = {0};
static swig_lua_class _wrap_class_btBroadphaseInterface = { "btBroadphaseInterface", &SWIGTYPE_p_btBroadphaseInterface,0, swig_delete_btBroadphaseInterface, swig_btBroadphaseInterface_methods, swig_btBroadphaseInterface_attributes, { "btBroadphaseInterface", swig_btBroadphaseInterface_cls_methods, swig_btBroadphaseInterface_cls_attributes, swig_btBroadphaseInterface_cls_constants }, swig_btBroadphaseInterface_bases, swig_btBroadphaseInterface_base_names };

static int _wrap_btOverlappingPairCallback_addOverlappingPair(lua_State* L) {
  int SWIG_arg = 0;
  btOverlappingPairCallback *arg1 = (btOverlappingPairCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btOverlappingPairCallback::addOverlappingPair",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOverlappingPairCallback::addOverlappingPair",1,"btOverlappingPairCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOverlappingPairCallback::addOverlappingPair",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btOverlappingPairCallback::addOverlappingPair",3,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOverlappingPairCallback,0))){
    SWIG_fail_ptr("btOverlappingPairCallback_addOverlappingPair",1,SWIGTYPE_p_btOverlappingPairCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btOverlappingPairCallback_addOverlappingPair",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btOverlappingPairCallback_addOverlappingPair",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (btBroadphasePair *)(arg1)->addOverlappingPair(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOverlappingPairCallback_removeOverlappingPair(lua_State* L) {
  int SWIG_arg = 0;
  btOverlappingPairCallback *arg1 = (btOverlappingPairCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btOverlappingPairCallback::removeOverlappingPair",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOverlappingPairCallback::removeOverlappingPair",1,"btOverlappingPairCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOverlappingPairCallback::removeOverlappingPair",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btOverlappingPairCallback::removeOverlappingPair",3,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btOverlappingPairCallback::removeOverlappingPair",4,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOverlappingPairCallback,0))){
    SWIG_fail_ptr("btOverlappingPairCallback_removeOverlappingPair",1,SWIGTYPE_p_btOverlappingPairCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btOverlappingPairCallback_removeOverlappingPair",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btOverlappingPairCallback_removeOverlappingPair",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btOverlappingPairCallback_removeOverlappingPair",4,SWIGTYPE_p_btDispatcher);
  }
  
  result = (void *)(arg1)->removeOverlappingPair(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOverlappingPairCallback_removeOverlappingPairsContainingProxy(lua_State* L) {
  int SWIG_arg = 0;
  btOverlappingPairCallback *arg1 = (btOverlappingPairCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btOverlappingPairCallback::removeOverlappingPairsContainingProxy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOverlappingPairCallback::removeOverlappingPairsContainingProxy",1,"btOverlappingPairCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOverlappingPairCallback::removeOverlappingPairsContainingProxy",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btOverlappingPairCallback::removeOverlappingPairsContainingProxy",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOverlappingPairCallback,0))){
    SWIG_fail_ptr("btOverlappingPairCallback_removeOverlappingPairsContainingProxy",1,SWIGTYPE_p_btOverlappingPairCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btOverlappingPairCallback_removeOverlappingPairsContainingProxy",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btOverlappingPairCallback_removeOverlappingPairsContainingProxy",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->removeOverlappingPairsContainingProxy(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btOverlappingPairCallback(void *obj) {
btOverlappingPairCallback *arg1 = (btOverlappingPairCallback *) obj;
delete arg1;
}
static swig_lua_method swig_btOverlappingPairCallback_methods[] = {
    {"addOverlappingPair", _wrap_btOverlappingPairCallback_addOverlappingPair}, 
    {"removeOverlappingPair", _wrap_btOverlappingPairCallback_removeOverlappingPair}, 
    {"removeOverlappingPairsContainingProxy", _wrap_btOverlappingPairCallback_removeOverlappingPairsContainingProxy}, 
    {0,0}
};
static swig_lua_attribute swig_btOverlappingPairCallback_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btOverlappingPairCallback_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btOverlappingPairCallback_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btOverlappingPairCallback_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btOverlappingPairCallback_bases[] = {0};
static const char *swig_btOverlappingPairCallback_base_names[] = {0};
static swig_lua_class _wrap_class_btOverlappingPairCallback = { "btOverlappingPairCallback", &SWIGTYPE_p_btOverlappingPairCallback,0, swig_delete_btOverlappingPairCallback, swig_btOverlappingPairCallback_methods, swig_btOverlappingPairCallback_attributes, { "btOverlappingPairCallback", swig_btOverlappingPairCallback_cls_methods, swig_btOverlappingPairCallback_cls_attributes, swig_btOverlappingPairCallback_cls_constants }, swig_btOverlappingPairCallback_bases, swig_btOverlappingPairCallback_base_names };

static int _wrap_btOverlapCallback_processOverlap(lua_State* L) {
  int SWIG_arg = 0;
  btOverlapCallback *arg1 = (btOverlapCallback *) 0 ;
  btBroadphasePair *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("btOverlapCallback::processOverlap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOverlapCallback::processOverlap",1,"btOverlapCallback *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btOverlapCallback::processOverlap",2,"btBroadphasePair &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOverlapCallback,0))){
    SWIG_fail_ptr("btOverlapCallback_processOverlap",1,SWIGTYPE_p_btOverlapCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphasePair,0))){
    SWIG_fail_ptr("btOverlapCallback_processOverlap",2,SWIGTYPE_p_btBroadphasePair);
  }
  
  result = (bool)(arg1)->processOverlap(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btOverlapCallback(void *obj) {
btOverlapCallback *arg1 = (btOverlapCallback *) obj;
delete arg1;
}
static swig_lua_method swig_btOverlapCallback_methods[] = {
    {"processOverlap", _wrap_btOverlapCallback_processOverlap}, 
    {0,0}
};
static swig_lua_attribute swig_btOverlapCallback_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btOverlapCallback_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btOverlapCallback_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btOverlapCallback_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btOverlapCallback_bases[] = {0};
static const char *swig_btOverlapCallback_base_names[] = {0};
static swig_lua_class _wrap_class_btOverlapCallback = { "btOverlapCallback", &SWIGTYPE_p_btOverlapCallback,0, swig_delete_btOverlapCallback, swig_btOverlapCallback_methods, swig_btOverlapCallback_attributes, { "btOverlapCallback", swig_btOverlapCallback_cls_methods, swig_btOverlapCallback_cls_attributes, swig_btOverlapCallback_cls_constants }, swig_btOverlapCallback_bases, swig_btOverlapCallback_base_names };

static int _wrap_btOverlapFilterCallback_needBroadphaseCollision(lua_State* L) {
  int SWIG_arg = 0;
  btOverlapFilterCallback *arg1 = (btOverlapFilterCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  SWIG_check_num_args("btOverlapFilterCallback::needBroadphaseCollision",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOverlapFilterCallback::needBroadphaseCollision",1,"btOverlapFilterCallback const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOverlapFilterCallback::needBroadphaseCollision",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btOverlapFilterCallback::needBroadphaseCollision",3,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOverlapFilterCallback,0))){
    SWIG_fail_ptr("btOverlapFilterCallback_needBroadphaseCollision",1,SWIGTYPE_p_btOverlapFilterCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btOverlapFilterCallback_needBroadphaseCollision",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btOverlapFilterCallback_needBroadphaseCollision",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (bool)((btOverlapFilterCallback const *)arg1)->needBroadphaseCollision(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btOverlapFilterCallback(void *obj) {
btOverlapFilterCallback *arg1 = (btOverlapFilterCallback *) obj;
delete arg1;
}
static swig_lua_method swig_btOverlapFilterCallback_methods[] = {
    {"needBroadphaseCollision", _wrap_btOverlapFilterCallback_needBroadphaseCollision}, 
    {0,0}
};
static swig_lua_attribute swig_btOverlapFilterCallback_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btOverlapFilterCallback_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btOverlapFilterCallback_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btOverlapFilterCallback_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btOverlapFilterCallback_bases[] = {0};
static const char *swig_btOverlapFilterCallback_base_names[] = {0};
static swig_lua_class _wrap_class_btOverlapFilterCallback = { "btOverlapFilterCallback", &SWIGTYPE_p_btOverlapFilterCallback,0, swig_delete_btOverlapFilterCallback, swig_btOverlapFilterCallback_methods, swig_btOverlapFilterCallback_attributes, { "btOverlapFilterCallback", swig_btOverlapFilterCallback_cls_methods, swig_btOverlapFilterCallback_cls_attributes, swig_btOverlapFilterCallback_cls_constants }, swig_btOverlapFilterCallback_bases, swig_btOverlapFilterCallback_base_names };

static int _wrap_gRemovePairs_set(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("gRemovePairs",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gRemovePairs",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  gRemovePairs = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gRemovePairs_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("gRemovePairs",0,0)
  result = (int)gRemovePairs;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gAddedPairs_set(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("gAddedPairs",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gAddedPairs",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  gAddedPairs = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gAddedPairs_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("gAddedPairs",0,0)
  result = (int)gAddedPairs;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gFindPairs_set(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("gFindPairs",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gFindPairs",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  gFindPairs = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gFindPairs_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("gFindPairs",0,0)
  result = (int)gFindPairs;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BT_NULL_PAIR_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("BT_NULL_PAIR",0,0)
  result = (int)(int)BT_NULL_PAIR;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btOverlappingPairCache::getOverlappingPairArrayPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOverlappingPairCache::getOverlappingPairArrayPtr",1,"btOverlappingPairCache *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOverlappingPairCache,0))){
    SWIG_fail_ptr("btOverlappingPairCache_getOverlappingPairArrayPtr",1,SWIGTYPE_p_btOverlappingPairCache);
  }
  
  result = (btBroadphasePair *)(arg1)->getOverlappingPairArrayPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btOverlappingPairCache::getOverlappingPairArrayPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOverlappingPairCache::getOverlappingPairArrayPtr",1,"btOverlappingPairCache const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOverlappingPairCache,0))){
    SWIG_fail_ptr("btOverlappingPairCache_getOverlappingPairArrayPtr",1,SWIGTYPE_p_btOverlappingPairCache);
  }
  
  result = (btBroadphasePair *)((btOverlappingPairCache const *)arg1)->getOverlappingPairArrayPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOverlappingPairCache_getOverlappingPairArrayPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btOverlappingPairCache, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btOverlappingPairCache, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btOverlappingPairCache_getOverlappingPairArrayPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btOverlappingPairCache::getOverlappingPairArrayPtr()\n"
    "    btOverlappingPairCache::getOverlappingPairArrayPtr() const\n");
  lua_error(L);return 0;
}


static int _wrap_btOverlappingPairCache_getOverlappingPairArray(lua_State* L) {
  int SWIG_arg = 0;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphasePairArray *result = 0 ;
  
  SWIG_check_num_args("btOverlappingPairCache::getOverlappingPairArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOverlappingPairCache::getOverlappingPairArray",1,"btOverlappingPairCache *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOverlappingPairCache,0))){
    SWIG_fail_ptr("btOverlappingPairCache_getOverlappingPairArray",1,SWIGTYPE_p_btOverlappingPairCache);
  }
  
  result = (btBroadphasePairArray *) &(arg1)->getOverlappingPairArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btBroadphasePair_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOverlappingPairCache_cleanOverlappingPair(lua_State* L) {
  int SWIG_arg = 0;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphasePair *arg2 = 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btOverlappingPairCache::cleanOverlappingPair",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOverlappingPairCache::cleanOverlappingPair",1,"btOverlappingPairCache *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btOverlappingPairCache::cleanOverlappingPair",2,"btBroadphasePair &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btOverlappingPairCache::cleanOverlappingPair",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOverlappingPairCache,0))){
    SWIG_fail_ptr("btOverlappingPairCache_cleanOverlappingPair",1,SWIGTYPE_p_btOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphasePair,0))){
    SWIG_fail_ptr("btOverlappingPairCache_cleanOverlappingPair",2,SWIGTYPE_p_btBroadphasePair);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btOverlappingPairCache_cleanOverlappingPair",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->cleanOverlappingPair(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOverlappingPairCache_getNumOverlappingPairs(lua_State* L) {
  int SWIG_arg = 0;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  int result;
  
  SWIG_check_num_args("btOverlappingPairCache::getNumOverlappingPairs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOverlappingPairCache::getNumOverlappingPairs",1,"btOverlappingPairCache const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOverlappingPairCache,0))){
    SWIG_fail_ptr("btOverlappingPairCache_getNumOverlappingPairs",1,SWIGTYPE_p_btOverlappingPairCache);
  }
  
  result = (int)((btOverlappingPairCache const *)arg1)->getNumOverlappingPairs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOverlappingPairCache_cleanProxyFromPairs(lua_State* L) {
  int SWIG_arg = 0;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btOverlappingPairCache::cleanProxyFromPairs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOverlappingPairCache::cleanProxyFromPairs",1,"btOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOverlappingPairCache::cleanProxyFromPairs",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btOverlappingPairCache::cleanProxyFromPairs",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOverlappingPairCache,0))){
    SWIG_fail_ptr("btOverlappingPairCache_cleanProxyFromPairs",1,SWIGTYPE_p_btOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btOverlappingPairCache_cleanProxyFromPairs",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btOverlappingPairCache_cleanProxyFromPairs",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->cleanProxyFromPairs(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOverlappingPairCache_setOverlapFilterCallback(lua_State* L) {
  int SWIG_arg = 0;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btOverlapFilterCallback *arg2 = (btOverlapFilterCallback *) 0 ;
  
  SWIG_check_num_args("btOverlappingPairCache::setOverlapFilterCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOverlappingPairCache::setOverlapFilterCallback",1,"btOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOverlappingPairCache::setOverlapFilterCallback",2,"btOverlapFilterCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOverlappingPairCache,0))){
    SWIG_fail_ptr("btOverlappingPairCache_setOverlapFilterCallback",1,SWIGTYPE_p_btOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOverlapFilterCallback,0))){
    SWIG_fail_ptr("btOverlappingPairCache_setOverlapFilterCallback",2,SWIGTYPE_p_btOverlapFilterCallback);
  }
  
  (arg1)->setOverlapFilterCallback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOverlappingPairCache_processAllOverlappingPairs(lua_State* L) {
  int SWIG_arg = 0;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btOverlapCallback *arg2 = (btOverlapCallback *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btOverlappingPairCache::processAllOverlappingPairs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOverlappingPairCache::processAllOverlappingPairs",1,"btOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOverlappingPairCache::processAllOverlappingPairs",2,"btOverlapCallback *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btOverlappingPairCache::processAllOverlappingPairs",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOverlappingPairCache,0))){
    SWIG_fail_ptr("btOverlappingPairCache_processAllOverlappingPairs",1,SWIGTYPE_p_btOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOverlapCallback,0))){
    SWIG_fail_ptr("btOverlappingPairCache_processAllOverlappingPairs",2,SWIGTYPE_p_btOverlapCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btOverlappingPairCache_processAllOverlappingPairs",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->processAllOverlappingPairs(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOverlappingPairCache_findPair(lua_State* L) {
  int SWIG_arg = 0;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btOverlappingPairCache::findPair",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOverlappingPairCache::findPair",1,"btOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOverlappingPairCache::findPair",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btOverlappingPairCache::findPair",3,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOverlappingPairCache,0))){
    SWIG_fail_ptr("btOverlappingPairCache_findPair",1,SWIGTYPE_p_btOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btOverlappingPairCache_findPair",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btOverlappingPairCache_findPair",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (btBroadphasePair *)(arg1)->findPair(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOverlappingPairCache_hasDeferredRemoval(lua_State* L) {
  int SWIG_arg = 0;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  bool result;
  
  SWIG_check_num_args("btOverlappingPairCache::hasDeferredRemoval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOverlappingPairCache::hasDeferredRemoval",1,"btOverlappingPairCache *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOverlappingPairCache,0))){
    SWIG_fail_ptr("btOverlappingPairCache_hasDeferredRemoval",1,SWIGTYPE_p_btOverlappingPairCache);
  }
  
  result = (bool)(arg1)->hasDeferredRemoval();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOverlappingPairCache_setInternalGhostPairCallback(lua_State* L) {
  int SWIG_arg = 0;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btOverlappingPairCallback *arg2 = (btOverlappingPairCallback *) 0 ;
  
  SWIG_check_num_args("btOverlappingPairCache::setInternalGhostPairCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOverlappingPairCache::setInternalGhostPairCallback",1,"btOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOverlappingPairCache::setInternalGhostPairCallback",2,"btOverlappingPairCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOverlappingPairCache,0))){
    SWIG_fail_ptr("btOverlappingPairCache_setInternalGhostPairCallback",1,SWIGTYPE_p_btOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOverlappingPairCallback,0))){
    SWIG_fail_ptr("btOverlappingPairCache_setInternalGhostPairCallback",2,SWIGTYPE_p_btOverlappingPairCallback);
  }
  
  (arg1)->setInternalGhostPairCallback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOverlappingPairCache_sortOverlappingPairs(lua_State* L) {
  int SWIG_arg = 0;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btOverlappingPairCache::sortOverlappingPairs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOverlappingPairCache::sortOverlappingPairs",1,"btOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOverlappingPairCache::sortOverlappingPairs",2,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOverlappingPairCache,0))){
    SWIG_fail_ptr("btOverlappingPairCache_sortOverlappingPairs",1,SWIGTYPE_p_btOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btOverlappingPairCache_sortOverlappingPairs",2,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->sortOverlappingPairs(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btOverlappingPairCache(void *obj) {
btOverlappingPairCache *arg1 = (btOverlappingPairCache *) obj;
delete arg1;
}
static swig_lua_method swig_btOverlappingPairCache_methods[] = {
    {"getOverlappingPairArrayPtr", _wrap_btOverlappingPairCache_getOverlappingPairArrayPtr}, 
    {"getOverlappingPairArray", _wrap_btOverlappingPairCache_getOverlappingPairArray}, 
    {"cleanOverlappingPair", _wrap_btOverlappingPairCache_cleanOverlappingPair}, 
    {"getNumOverlappingPairs", _wrap_btOverlappingPairCache_getNumOverlappingPairs}, 
    {"cleanProxyFromPairs", _wrap_btOverlappingPairCache_cleanProxyFromPairs}, 
    {"setOverlapFilterCallback", _wrap_btOverlappingPairCache_setOverlapFilterCallback}, 
    {"processAllOverlappingPairs", _wrap_btOverlappingPairCache_processAllOverlappingPairs}, 
    {"findPair", _wrap_btOverlappingPairCache_findPair}, 
    {"hasDeferredRemoval", _wrap_btOverlappingPairCache_hasDeferredRemoval}, 
    {"setInternalGhostPairCallback", _wrap_btOverlappingPairCache_setInternalGhostPairCallback}, 
    {"sortOverlappingPairs", _wrap_btOverlappingPairCache_sortOverlappingPairs}, 
    {0,0}
};
static swig_lua_attribute swig_btOverlappingPairCache_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btOverlappingPairCache_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btOverlappingPairCache_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btOverlappingPairCache_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btOverlappingPairCache_bases[] = {0,0};
static const char *swig_btOverlappingPairCache_base_names[] = {"btOverlappingPairCallback *",0};
static swig_lua_class _wrap_class_btOverlappingPairCache = { "btOverlappingPairCache", &SWIGTYPE_p_btOverlappingPairCache,0, swig_delete_btOverlappingPairCache, swig_btOverlappingPairCache_methods, swig_btOverlappingPairCache_attributes, { "btOverlappingPairCache", swig_btOverlappingPairCache_cls_methods, swig_btOverlappingPairCache_cls_attributes, swig_btOverlappingPairCache_cls_constants }, swig_btOverlappingPairCache_bases, swig_btOverlappingPairCache_base_names };

static int _wrap_new_btHashedOverlappingPairCache(lua_State* L) {
  int SWIG_arg = 0;
  btHashedOverlappingPairCache *result = 0 ;
  
  SWIG_check_num_args("btHashedOverlappingPairCache::btHashedOverlappingPairCache",0,0)
  result = (btHashedOverlappingPairCache *)new btHashedOverlappingPairCache();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHashedOverlappingPairCache,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashedOverlappingPairCache_removeOverlappingPairsContainingProxy(lua_State* L) {
  int SWIG_arg = 0;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btHashedOverlappingPairCache::removeOverlappingPairsContainingProxy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashedOverlappingPairCache::removeOverlappingPairsContainingProxy",1,"btHashedOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHashedOverlappingPairCache::removeOverlappingPairsContainingProxy",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btHashedOverlappingPairCache::removeOverlappingPairsContainingProxy",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashedOverlappingPairCache,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_removeOverlappingPairsContainingProxy",1,SWIGTYPE_p_btHashedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_removeOverlappingPairsContainingProxy",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_removeOverlappingPairsContainingProxy",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->removeOverlappingPairsContainingProxy(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashedOverlappingPairCache_removeOverlappingPair(lua_State* L) {
  int SWIG_arg = 0;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btHashedOverlappingPairCache::removeOverlappingPair",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashedOverlappingPairCache::removeOverlappingPair",1,"btHashedOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHashedOverlappingPairCache::removeOverlappingPair",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btHashedOverlappingPairCache::removeOverlappingPair",3,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btHashedOverlappingPairCache::removeOverlappingPair",4,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashedOverlappingPairCache,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_removeOverlappingPair",1,SWIGTYPE_p_btHashedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_removeOverlappingPair",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_removeOverlappingPair",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_removeOverlappingPair",4,SWIGTYPE_p_btDispatcher);
  }
  
  result = (void *)(arg1)->removeOverlappingPair(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashedOverlappingPairCache_needsBroadphaseCollision(lua_State* L) {
  int SWIG_arg = 0;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  SWIG_check_num_args("btHashedOverlappingPairCache::needsBroadphaseCollision",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashedOverlappingPairCache::needsBroadphaseCollision",1,"btHashedOverlappingPairCache const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHashedOverlappingPairCache::needsBroadphaseCollision",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btHashedOverlappingPairCache::needsBroadphaseCollision",3,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashedOverlappingPairCache,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_needsBroadphaseCollision",1,SWIGTYPE_p_btHashedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_needsBroadphaseCollision",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_needsBroadphaseCollision",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (bool)((btHashedOverlappingPairCache const *)arg1)->needsBroadphaseCollision(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashedOverlappingPairCache_addOverlappingPair(lua_State* L) {
  int SWIG_arg = 0;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btHashedOverlappingPairCache::addOverlappingPair",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashedOverlappingPairCache::addOverlappingPair",1,"btHashedOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHashedOverlappingPairCache::addOverlappingPair",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btHashedOverlappingPairCache::addOverlappingPair",3,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashedOverlappingPairCache,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_addOverlappingPair",1,SWIGTYPE_p_btHashedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_addOverlappingPair",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_addOverlappingPair",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (btBroadphasePair *)(arg1)->addOverlappingPair(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashedOverlappingPairCache_cleanProxyFromPairs(lua_State* L) {
  int SWIG_arg = 0;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btHashedOverlappingPairCache::cleanProxyFromPairs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashedOverlappingPairCache::cleanProxyFromPairs",1,"btHashedOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHashedOverlappingPairCache::cleanProxyFromPairs",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btHashedOverlappingPairCache::cleanProxyFromPairs",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashedOverlappingPairCache,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_cleanProxyFromPairs",1,SWIGTYPE_p_btHashedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_cleanProxyFromPairs",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_cleanProxyFromPairs",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->cleanProxyFromPairs(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashedOverlappingPairCache_processAllOverlappingPairs(lua_State* L) {
  int SWIG_arg = 0;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btOverlapCallback *arg2 = (btOverlapCallback *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btHashedOverlappingPairCache::processAllOverlappingPairs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashedOverlappingPairCache::processAllOverlappingPairs",1,"btHashedOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHashedOverlappingPairCache::processAllOverlappingPairs",2,"btOverlapCallback *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btHashedOverlappingPairCache::processAllOverlappingPairs",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashedOverlappingPairCache,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_processAllOverlappingPairs",1,SWIGTYPE_p_btHashedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOverlapCallback,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_processAllOverlappingPairs",2,SWIGTYPE_p_btOverlapCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_processAllOverlappingPairs",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->processAllOverlappingPairs(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btHashedOverlappingPairCache::getOverlappingPairArrayPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashedOverlappingPairCache::getOverlappingPairArrayPtr",1,"btHashedOverlappingPairCache *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashedOverlappingPairCache,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_getOverlappingPairArrayPtr",1,SWIGTYPE_p_btHashedOverlappingPairCache);
  }
  
  result = (btBroadphasePair *)(arg1)->getOverlappingPairArrayPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btHashedOverlappingPairCache::getOverlappingPairArrayPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashedOverlappingPairCache::getOverlappingPairArrayPtr",1,"btHashedOverlappingPairCache const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashedOverlappingPairCache,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_getOverlappingPairArrayPtr",1,SWIGTYPE_p_btHashedOverlappingPairCache);
  }
  
  result = (btBroadphasePair *)((btHashedOverlappingPairCache const *)arg1)->getOverlappingPairArrayPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashedOverlappingPairCache_getOverlappingPairArrayPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHashedOverlappingPairCache, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btHashedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHashedOverlappingPairCache, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btHashedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btHashedOverlappingPairCache_getOverlappingPairArrayPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btHashedOverlappingPairCache::getOverlappingPairArrayPtr()\n"
    "    btHashedOverlappingPairCache::getOverlappingPairArrayPtr() const\n");
  lua_error(L);return 0;
}


static int _wrap_btHashedOverlappingPairCache_getOverlappingPairArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphasePairArray *result = 0 ;
  
  SWIG_check_num_args("btHashedOverlappingPairCache::getOverlappingPairArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashedOverlappingPairCache::getOverlappingPairArray",1,"btHashedOverlappingPairCache *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashedOverlappingPairCache,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_getOverlappingPairArray",1,SWIGTYPE_p_btHashedOverlappingPairCache);
  }
  
  result = (btBroadphasePairArray *) &(arg1)->getOverlappingPairArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btBroadphasePair_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashedOverlappingPairCache_getOverlappingPairArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphasePairArray *result = 0 ;
  
  SWIG_check_num_args("btHashedOverlappingPairCache::getOverlappingPairArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashedOverlappingPairCache::getOverlappingPairArray",1,"btHashedOverlappingPairCache const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashedOverlappingPairCache,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_getOverlappingPairArray",1,SWIGTYPE_p_btHashedOverlappingPairCache);
  }
  
  result = (btBroadphasePairArray *) &((btHashedOverlappingPairCache const *)arg1)->getOverlappingPairArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btBroadphasePair_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashedOverlappingPairCache_getOverlappingPairArray(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHashedOverlappingPairCache, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btHashedOverlappingPairCache_getOverlappingPairArray__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHashedOverlappingPairCache, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btHashedOverlappingPairCache_getOverlappingPairArray__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btHashedOverlappingPairCache_getOverlappingPairArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btHashedOverlappingPairCache::getOverlappingPairArray()\n"
    "    btHashedOverlappingPairCache::getOverlappingPairArray() const\n");
  lua_error(L);return 0;
}


static int _wrap_btHashedOverlappingPairCache_cleanOverlappingPair(lua_State* L) {
  int SWIG_arg = 0;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphasePair *arg2 = 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btHashedOverlappingPairCache::cleanOverlappingPair",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashedOverlappingPairCache::cleanOverlappingPair",1,"btHashedOverlappingPairCache *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHashedOverlappingPairCache::cleanOverlappingPair",2,"btBroadphasePair &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btHashedOverlappingPairCache::cleanOverlappingPair",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashedOverlappingPairCache,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_cleanOverlappingPair",1,SWIGTYPE_p_btHashedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphasePair,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_cleanOverlappingPair",2,SWIGTYPE_p_btBroadphasePair);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_cleanOverlappingPair",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->cleanOverlappingPair(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashedOverlappingPairCache_findPair(lua_State* L) {
  int SWIG_arg = 0;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btHashedOverlappingPairCache::findPair",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashedOverlappingPairCache::findPair",1,"btHashedOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHashedOverlappingPairCache::findPair",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btHashedOverlappingPairCache::findPair",3,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashedOverlappingPairCache,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_findPair",1,SWIGTYPE_p_btHashedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_findPair",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_findPair",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (btBroadphasePair *)(arg1)->findPair(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashedOverlappingPairCache_GetCount(lua_State* L) {
  int SWIG_arg = 0;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  int result;
  
  SWIG_check_num_args("btHashedOverlappingPairCache::GetCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashedOverlappingPairCache::GetCount",1,"btHashedOverlappingPairCache const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashedOverlappingPairCache,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_GetCount",1,SWIGTYPE_p_btHashedOverlappingPairCache);
  }
  
  result = (int)((btHashedOverlappingPairCache const *)arg1)->GetCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashedOverlappingPairCache_getOverlapFilterCallback(lua_State* L) {
  int SWIG_arg = 0;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btOverlapFilterCallback *result = 0 ;
  
  SWIG_check_num_args("btHashedOverlappingPairCache::getOverlapFilterCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashedOverlappingPairCache::getOverlapFilterCallback",1,"btHashedOverlappingPairCache *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashedOverlappingPairCache,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_getOverlapFilterCallback",1,SWIGTYPE_p_btHashedOverlappingPairCache);
  }
  
  result = (btOverlapFilterCallback *)(arg1)->getOverlapFilterCallback();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btOverlapFilterCallback,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashedOverlappingPairCache_setOverlapFilterCallback(lua_State* L) {
  int SWIG_arg = 0;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btOverlapFilterCallback *arg2 = (btOverlapFilterCallback *) 0 ;
  
  SWIG_check_num_args("btHashedOverlappingPairCache::setOverlapFilterCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashedOverlappingPairCache::setOverlapFilterCallback",1,"btHashedOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHashedOverlappingPairCache::setOverlapFilterCallback",2,"btOverlapFilterCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashedOverlappingPairCache,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_setOverlapFilterCallback",1,SWIGTYPE_p_btHashedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOverlapFilterCallback,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_setOverlapFilterCallback",2,SWIGTYPE_p_btOverlapFilterCallback);
  }
  
  (arg1)->setOverlapFilterCallback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashedOverlappingPairCache_getNumOverlappingPairs(lua_State* L) {
  int SWIG_arg = 0;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  int result;
  
  SWIG_check_num_args("btHashedOverlappingPairCache::getNumOverlappingPairs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashedOverlappingPairCache::getNumOverlappingPairs",1,"btHashedOverlappingPairCache const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashedOverlappingPairCache,0))){
    SWIG_fail_ptr("btHashedOverlappingPairCache_getNumOverlappingPairs",1,SWIGTYPE_p_btHashedOverlappingPairCache);
  }
  
  result = (int)((btHashedOverlappingPairCache const *)arg1)->getNumOverlappingPairs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btHashedOverlappingPairCache(void *obj) {
btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) obj;
delete arg1;
}
static swig_lua_method swig_btHashedOverlappingPairCache_methods[] = {
    {"removeOverlappingPairsContainingProxy", _wrap_btHashedOverlappingPairCache_removeOverlappingPairsContainingProxy}, 
    {"removeOverlappingPair", _wrap_btHashedOverlappingPairCache_removeOverlappingPair}, 
    {"needsBroadphaseCollision", _wrap_btHashedOverlappingPairCache_needsBroadphaseCollision}, 
    {"addOverlappingPair", _wrap_btHashedOverlappingPairCache_addOverlappingPair}, 
    {"cleanProxyFromPairs", _wrap_btHashedOverlappingPairCache_cleanProxyFromPairs}, 
    {"processAllOverlappingPairs", _wrap_btHashedOverlappingPairCache_processAllOverlappingPairs}, 
    {"getOverlappingPairArrayPtr", _wrap_btHashedOverlappingPairCache_getOverlappingPairArrayPtr}, 
    {"getOverlappingPairArray", _wrap_btHashedOverlappingPairCache_getOverlappingPairArray}, 
    {"cleanOverlappingPair", _wrap_btHashedOverlappingPairCache_cleanOverlappingPair}, 
    {"findPair", _wrap_btHashedOverlappingPairCache_findPair}, 
    {"GetCount", _wrap_btHashedOverlappingPairCache_GetCount}, 
    {"getOverlapFilterCallback", _wrap_btHashedOverlappingPairCache_getOverlapFilterCallback}, 
    {"setOverlapFilterCallback", _wrap_btHashedOverlappingPairCache_setOverlapFilterCallback}, 
    {"getNumOverlappingPairs", _wrap_btHashedOverlappingPairCache_getNumOverlappingPairs}, 
    {0,0}
};
static swig_lua_attribute swig_btHashedOverlappingPairCache_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btHashedOverlappingPairCache_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btHashedOverlappingPairCache_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btHashedOverlappingPairCache_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btHashedOverlappingPairCache_bases[] = {0,0};
static const char *swig_btHashedOverlappingPairCache_base_names[] = {"btOverlappingPairCache *",0};
static swig_lua_class _wrap_class_btHashedOverlappingPairCache = { "btHashedOverlappingPairCache", &SWIGTYPE_p_btHashedOverlappingPairCache,_wrap_new_btHashedOverlappingPairCache, swig_delete_btHashedOverlappingPairCache, swig_btHashedOverlappingPairCache_methods, swig_btHashedOverlappingPairCache_attributes, { "btHashedOverlappingPairCache", swig_btHashedOverlappingPairCache_cls_methods, swig_btHashedOverlappingPairCache_cls_attributes, swig_btHashedOverlappingPairCache_cls_constants }, swig_btHashedOverlappingPairCache_bases, swig_btHashedOverlappingPairCache_base_names };

static int _wrap_new_btSortedOverlappingPairCache(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *result = 0 ;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::btSortedOverlappingPairCache",0,0)
  result = (btSortedOverlappingPairCache *)new btSortedOverlappingPairCache();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSortedOverlappingPairCache,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_processAllOverlappingPairs(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btOverlapCallback *arg2 = (btOverlapCallback *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::processAllOverlappingPairs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::processAllOverlappingPairs",1,"btSortedOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSortedOverlappingPairCache::processAllOverlappingPairs",2,"btOverlapCallback *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSortedOverlappingPairCache::processAllOverlappingPairs",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_processAllOverlappingPairs",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOverlapCallback,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_processAllOverlappingPairs",2,SWIGTYPE_p_btOverlapCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_processAllOverlappingPairs",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->processAllOverlappingPairs(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_removeOverlappingPair(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::removeOverlappingPair",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::removeOverlappingPair",1,"btSortedOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSortedOverlappingPairCache::removeOverlappingPair",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSortedOverlappingPairCache::removeOverlappingPair",3,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btSortedOverlappingPairCache::removeOverlappingPair",4,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_removeOverlappingPair",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_removeOverlappingPair",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_removeOverlappingPair",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_removeOverlappingPair",4,SWIGTYPE_p_btDispatcher);
  }
  
  result = (void *)(arg1)->removeOverlappingPair(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_cleanOverlappingPair(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphasePair *arg2 = 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::cleanOverlappingPair",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::cleanOverlappingPair",1,"btSortedOverlappingPairCache *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSortedOverlappingPairCache::cleanOverlappingPair",2,"btBroadphasePair &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSortedOverlappingPairCache::cleanOverlappingPair",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_cleanOverlappingPair",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphasePair,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_cleanOverlappingPair",2,SWIGTYPE_p_btBroadphasePair);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_cleanOverlappingPair",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->cleanOverlappingPair(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_addOverlappingPair(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::addOverlappingPair",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::addOverlappingPair",1,"btSortedOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSortedOverlappingPairCache::addOverlappingPair",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSortedOverlappingPairCache::addOverlappingPair",3,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_addOverlappingPair",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_addOverlappingPair",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_addOverlappingPair",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (btBroadphasePair *)(arg1)->addOverlappingPair(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_findPair(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::findPair",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::findPair",1,"btSortedOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSortedOverlappingPairCache::findPair",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSortedOverlappingPairCache::findPair",3,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_findPair",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_findPair",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_findPair",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (btBroadphasePair *)(arg1)->findPair(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_cleanProxyFromPairs(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::cleanProxyFromPairs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::cleanProxyFromPairs",1,"btSortedOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSortedOverlappingPairCache::cleanProxyFromPairs",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSortedOverlappingPairCache::cleanProxyFromPairs",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_cleanProxyFromPairs",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_cleanProxyFromPairs",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_cleanProxyFromPairs",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->cleanProxyFromPairs(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_removeOverlappingPairsContainingProxy(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::removeOverlappingPairsContainingProxy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::removeOverlappingPairsContainingProxy",1,"btSortedOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSortedOverlappingPairCache::removeOverlappingPairsContainingProxy",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSortedOverlappingPairCache::removeOverlappingPairsContainingProxy",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_removeOverlappingPairsContainingProxy",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_removeOverlappingPairsContainingProxy",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_removeOverlappingPairsContainingProxy",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->removeOverlappingPairsContainingProxy(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_needsBroadphaseCollision(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::needsBroadphaseCollision",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::needsBroadphaseCollision",1,"btSortedOverlappingPairCache const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSortedOverlappingPairCache::needsBroadphaseCollision",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSortedOverlappingPairCache::needsBroadphaseCollision",3,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_needsBroadphaseCollision",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_needsBroadphaseCollision",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_needsBroadphaseCollision",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (bool)((btSortedOverlappingPairCache const *)arg1)->needsBroadphaseCollision(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_getOverlappingPairArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphasePairArray *result = 0 ;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::getOverlappingPairArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::getOverlappingPairArray",1,"btSortedOverlappingPairCache *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_getOverlappingPairArray",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  result = (btBroadphasePairArray *) &(arg1)->getOverlappingPairArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btBroadphasePair_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_getOverlappingPairArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphasePairArray *result = 0 ;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::getOverlappingPairArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::getOverlappingPairArray",1,"btSortedOverlappingPairCache const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_getOverlappingPairArray",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  result = (btBroadphasePairArray *) &((btSortedOverlappingPairCache const *)arg1)->getOverlappingPairArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btBroadphasePair_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_getOverlappingPairArray(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSortedOverlappingPairCache, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSortedOverlappingPairCache_getOverlappingPairArray__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSortedOverlappingPairCache, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSortedOverlappingPairCache_getOverlappingPairArray__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSortedOverlappingPairCache_getOverlappingPairArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSortedOverlappingPairCache::getOverlappingPairArray()\n"
    "    btSortedOverlappingPairCache::getOverlappingPairArray() const\n");
  lua_error(L);return 0;
}


static int _wrap_btSortedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::getOverlappingPairArrayPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::getOverlappingPairArrayPtr",1,"btSortedOverlappingPairCache *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_getOverlappingPairArrayPtr",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  result = (btBroadphasePair *)(arg1)->getOverlappingPairArrayPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::getOverlappingPairArrayPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::getOverlappingPairArrayPtr",1,"btSortedOverlappingPairCache const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_getOverlappingPairArrayPtr",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  result = (btBroadphasePair *)((btSortedOverlappingPairCache const *)arg1)->getOverlappingPairArrayPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_getOverlappingPairArrayPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSortedOverlappingPairCache, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSortedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSortedOverlappingPairCache, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSortedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSortedOverlappingPairCache_getOverlappingPairArrayPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSortedOverlappingPairCache::getOverlappingPairArrayPtr()\n"
    "    btSortedOverlappingPairCache::getOverlappingPairArrayPtr() const\n");
  lua_error(L);return 0;
}


static int _wrap_btSortedOverlappingPairCache_getNumOverlappingPairs(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  int result;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::getNumOverlappingPairs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::getNumOverlappingPairs",1,"btSortedOverlappingPairCache const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_getNumOverlappingPairs",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  result = (int)((btSortedOverlappingPairCache const *)arg1)->getNumOverlappingPairs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_getOverlapFilterCallback(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btOverlapFilterCallback *result = 0 ;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::getOverlapFilterCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::getOverlapFilterCallback",1,"btSortedOverlappingPairCache *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_getOverlapFilterCallback",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  result = (btOverlapFilterCallback *)(arg1)->getOverlapFilterCallback();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btOverlapFilterCallback,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_setOverlapFilterCallback(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btOverlapFilterCallback *arg2 = (btOverlapFilterCallback *) 0 ;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::setOverlapFilterCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::setOverlapFilterCallback",1,"btSortedOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSortedOverlappingPairCache::setOverlapFilterCallback",2,"btOverlapFilterCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_setOverlapFilterCallback",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOverlapFilterCallback,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_setOverlapFilterCallback",2,SWIGTYPE_p_btOverlapFilterCallback);
  }
  
  (arg1)->setOverlapFilterCallback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_hasDeferredRemoval(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  bool result;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::hasDeferredRemoval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::hasDeferredRemoval",1,"btSortedOverlappingPairCache *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_hasDeferredRemoval",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  result = (bool)(arg1)->hasDeferredRemoval();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_setInternalGhostPairCallback(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btOverlappingPairCallback *arg2 = (btOverlappingPairCallback *) 0 ;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::setInternalGhostPairCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::setInternalGhostPairCallback",1,"btSortedOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSortedOverlappingPairCache::setInternalGhostPairCallback",2,"btOverlappingPairCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_setInternalGhostPairCallback",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOverlappingPairCallback,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_setInternalGhostPairCallback",2,SWIGTYPE_p_btOverlappingPairCallback);
  }
  
  (arg1)->setInternalGhostPairCallback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSortedOverlappingPairCache_sortOverlappingPairs(lua_State* L) {
  int SWIG_arg = 0;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btSortedOverlappingPairCache::sortOverlappingPairs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSortedOverlappingPairCache::sortOverlappingPairs",1,"btSortedOverlappingPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSortedOverlappingPairCache::sortOverlappingPairs",2,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSortedOverlappingPairCache,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_sortOverlappingPairs",1,SWIGTYPE_p_btSortedOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btSortedOverlappingPairCache_sortOverlappingPairs",2,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->sortOverlappingPairs(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSortedOverlappingPairCache(void *obj) {
btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) obj;
delete arg1;
}
static swig_lua_method swig_btSortedOverlappingPairCache_methods[] = {
    {"processAllOverlappingPairs", _wrap_btSortedOverlappingPairCache_processAllOverlappingPairs}, 
    {"removeOverlappingPair", _wrap_btSortedOverlappingPairCache_removeOverlappingPair}, 
    {"cleanOverlappingPair", _wrap_btSortedOverlappingPairCache_cleanOverlappingPair}, 
    {"addOverlappingPair", _wrap_btSortedOverlappingPairCache_addOverlappingPair}, 
    {"findPair", _wrap_btSortedOverlappingPairCache_findPair}, 
    {"cleanProxyFromPairs", _wrap_btSortedOverlappingPairCache_cleanProxyFromPairs}, 
    {"removeOverlappingPairsContainingProxy", _wrap_btSortedOverlappingPairCache_removeOverlappingPairsContainingProxy}, 
    {"needsBroadphaseCollision", _wrap_btSortedOverlappingPairCache_needsBroadphaseCollision}, 
    {"getOverlappingPairArray", _wrap_btSortedOverlappingPairCache_getOverlappingPairArray}, 
    {"getOverlappingPairArrayPtr", _wrap_btSortedOverlappingPairCache_getOverlappingPairArrayPtr}, 
    {"getNumOverlappingPairs", _wrap_btSortedOverlappingPairCache_getNumOverlappingPairs}, 
    {"getOverlapFilterCallback", _wrap_btSortedOverlappingPairCache_getOverlapFilterCallback}, 
    {"setOverlapFilterCallback", _wrap_btSortedOverlappingPairCache_setOverlapFilterCallback}, 
    {"hasDeferredRemoval", _wrap_btSortedOverlappingPairCache_hasDeferredRemoval}, 
    {"setInternalGhostPairCallback", _wrap_btSortedOverlappingPairCache_setInternalGhostPairCallback}, 
    {"sortOverlappingPairs", _wrap_btSortedOverlappingPairCache_sortOverlappingPairs}, 
    {0,0}
};
static swig_lua_attribute swig_btSortedOverlappingPairCache_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btSortedOverlappingPairCache_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSortedOverlappingPairCache_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btSortedOverlappingPairCache_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSortedOverlappingPairCache_bases[] = {0,0};
static const char *swig_btSortedOverlappingPairCache_base_names[] = {"btOverlappingPairCache *",0};
static swig_lua_class _wrap_class_btSortedOverlappingPairCache = { "btSortedOverlappingPairCache", &SWIGTYPE_p_btSortedOverlappingPairCache,_wrap_new_btSortedOverlappingPairCache, swig_delete_btSortedOverlappingPairCache, swig_btSortedOverlappingPairCache_methods, swig_btSortedOverlappingPairCache_attributes, { "btSortedOverlappingPairCache", swig_btSortedOverlappingPairCache_cls_methods, swig_btSortedOverlappingPairCache_cls_attributes, swig_btSortedOverlappingPairCache_cls_constants }, swig_btSortedOverlappingPairCache_bases, swig_btSortedOverlappingPairCache_base_names };

static int _wrap_btNullPairCache_getOverlappingPairArrayPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btNullPairCache::getOverlappingPairArrayPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btNullPairCache::getOverlappingPairArrayPtr",1,"btNullPairCache *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btNullPairCache,0))){
    SWIG_fail_ptr("btNullPairCache_getOverlappingPairArrayPtr",1,SWIGTYPE_p_btNullPairCache);
  }
  
  result = (btBroadphasePair *)(arg1)->getOverlappingPairArrayPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btNullPairCache_getOverlappingPairArrayPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btNullPairCache::getOverlappingPairArrayPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btNullPairCache::getOverlappingPairArrayPtr",1,"btNullPairCache const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btNullPairCache,0))){
    SWIG_fail_ptr("btNullPairCache_getOverlappingPairArrayPtr",1,SWIGTYPE_p_btNullPairCache);
  }
  
  result = (btBroadphasePair *)((btNullPairCache const *)arg1)->getOverlappingPairArrayPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btNullPairCache_getOverlappingPairArrayPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btNullPairCache, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btNullPairCache_getOverlappingPairArrayPtr__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btNullPairCache, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btNullPairCache_getOverlappingPairArrayPtr__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btNullPairCache_getOverlappingPairArrayPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btNullPairCache::getOverlappingPairArrayPtr()\n"
    "    btNullPairCache::getOverlappingPairArrayPtr() const\n");
  lua_error(L);return 0;
}


static int _wrap_btNullPairCache_getOverlappingPairArray(lua_State* L) {
  int SWIG_arg = 0;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphasePairArray *result = 0 ;
  
  SWIG_check_num_args("btNullPairCache::getOverlappingPairArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btNullPairCache::getOverlappingPairArray",1,"btNullPairCache *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btNullPairCache,0))){
    SWIG_fail_ptr("btNullPairCache_getOverlappingPairArray",1,SWIGTYPE_p_btNullPairCache);
  }
  
  result = (btBroadphasePairArray *) &(arg1)->getOverlappingPairArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btBroadphasePair_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btNullPairCache_cleanOverlappingPair(lua_State* L) {
  int SWIG_arg = 0;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphasePair *arg2 = 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btNullPairCache::cleanOverlappingPair",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btNullPairCache::cleanOverlappingPair",1,"btNullPairCache *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btNullPairCache::cleanOverlappingPair",2,"btBroadphasePair &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btNullPairCache::cleanOverlappingPair",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btNullPairCache,0))){
    SWIG_fail_ptr("btNullPairCache_cleanOverlappingPair",1,SWIGTYPE_p_btNullPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphasePair,0))){
    SWIG_fail_ptr("btNullPairCache_cleanOverlappingPair",2,SWIGTYPE_p_btBroadphasePair);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btNullPairCache_cleanOverlappingPair",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->cleanOverlappingPair(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btNullPairCache_getNumOverlappingPairs(lua_State* L) {
  int SWIG_arg = 0;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  int result;
  
  SWIG_check_num_args("btNullPairCache::getNumOverlappingPairs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btNullPairCache::getNumOverlappingPairs",1,"btNullPairCache const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btNullPairCache,0))){
    SWIG_fail_ptr("btNullPairCache_getNumOverlappingPairs",1,SWIGTYPE_p_btNullPairCache);
  }
  
  result = (int)((btNullPairCache const *)arg1)->getNumOverlappingPairs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btNullPairCache_cleanProxyFromPairs(lua_State* L) {
  int SWIG_arg = 0;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btNullPairCache::cleanProxyFromPairs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btNullPairCache::cleanProxyFromPairs",1,"btNullPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btNullPairCache::cleanProxyFromPairs",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btNullPairCache::cleanProxyFromPairs",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btNullPairCache,0))){
    SWIG_fail_ptr("btNullPairCache_cleanProxyFromPairs",1,SWIGTYPE_p_btNullPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btNullPairCache_cleanProxyFromPairs",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btNullPairCache_cleanProxyFromPairs",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->cleanProxyFromPairs(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btNullPairCache_setOverlapFilterCallback(lua_State* L) {
  int SWIG_arg = 0;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btOverlapFilterCallback *arg2 = (btOverlapFilterCallback *) 0 ;
  
  SWIG_check_num_args("btNullPairCache::setOverlapFilterCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btNullPairCache::setOverlapFilterCallback",1,"btNullPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btNullPairCache::setOverlapFilterCallback",2,"btOverlapFilterCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btNullPairCache,0))){
    SWIG_fail_ptr("btNullPairCache_setOverlapFilterCallback",1,SWIGTYPE_p_btNullPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOverlapFilterCallback,0))){
    SWIG_fail_ptr("btNullPairCache_setOverlapFilterCallback",2,SWIGTYPE_p_btOverlapFilterCallback);
  }
  
  (arg1)->setOverlapFilterCallback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btNullPairCache_processAllOverlappingPairs(lua_State* L) {
  int SWIG_arg = 0;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btOverlapCallback *arg2 = (btOverlapCallback *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btNullPairCache::processAllOverlappingPairs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btNullPairCache::processAllOverlappingPairs",1,"btNullPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btNullPairCache::processAllOverlappingPairs",2,"btOverlapCallback *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btNullPairCache::processAllOverlappingPairs",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btNullPairCache,0))){
    SWIG_fail_ptr("btNullPairCache_processAllOverlappingPairs",1,SWIGTYPE_p_btNullPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOverlapCallback,0))){
    SWIG_fail_ptr("btNullPairCache_processAllOverlappingPairs",2,SWIGTYPE_p_btOverlapCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btNullPairCache_processAllOverlappingPairs",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->processAllOverlappingPairs(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btNullPairCache_findPair(lua_State* L) {
  int SWIG_arg = 0;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btNullPairCache::findPair",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btNullPairCache::findPair",1,"btNullPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btNullPairCache::findPair",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btNullPairCache::findPair",3,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btNullPairCache,0))){
    SWIG_fail_ptr("btNullPairCache_findPair",1,SWIGTYPE_p_btNullPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btNullPairCache_findPair",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btNullPairCache_findPair",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (btBroadphasePair *)(arg1)->findPair(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btNullPairCache_hasDeferredRemoval(lua_State* L) {
  int SWIG_arg = 0;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  bool result;
  
  SWIG_check_num_args("btNullPairCache::hasDeferredRemoval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btNullPairCache::hasDeferredRemoval",1,"btNullPairCache *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btNullPairCache,0))){
    SWIG_fail_ptr("btNullPairCache_hasDeferredRemoval",1,SWIGTYPE_p_btNullPairCache);
  }
  
  result = (bool)(arg1)->hasDeferredRemoval();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btNullPairCache_setInternalGhostPairCallback(lua_State* L) {
  int SWIG_arg = 0;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btOverlappingPairCallback *arg2 = (btOverlappingPairCallback *) 0 ;
  
  SWIG_check_num_args("btNullPairCache::setInternalGhostPairCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btNullPairCache::setInternalGhostPairCallback",1,"btNullPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btNullPairCache::setInternalGhostPairCallback",2,"btOverlappingPairCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btNullPairCache,0))){
    SWIG_fail_ptr("btNullPairCache_setInternalGhostPairCallback",1,SWIGTYPE_p_btNullPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOverlappingPairCallback,0))){
    SWIG_fail_ptr("btNullPairCache_setInternalGhostPairCallback",2,SWIGTYPE_p_btOverlappingPairCallback);
  }
  
  (arg1)->setInternalGhostPairCallback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btNullPairCache_addOverlappingPair(lua_State* L) {
  int SWIG_arg = 0;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btNullPairCache::addOverlappingPair",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btNullPairCache::addOverlappingPair",1,"btNullPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btNullPairCache::addOverlappingPair",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btNullPairCache::addOverlappingPair",3,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btNullPairCache,0))){
    SWIG_fail_ptr("btNullPairCache_addOverlappingPair",1,SWIGTYPE_p_btNullPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btNullPairCache_addOverlappingPair",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btNullPairCache_addOverlappingPair",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (btBroadphasePair *)(arg1)->addOverlappingPair(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btNullPairCache_removeOverlappingPair(lua_State* L) {
  int SWIG_arg = 0;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btNullPairCache::removeOverlappingPair",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btNullPairCache::removeOverlappingPair",1,"btNullPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btNullPairCache::removeOverlappingPair",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btNullPairCache::removeOverlappingPair",3,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btNullPairCache::removeOverlappingPair",4,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btNullPairCache,0))){
    SWIG_fail_ptr("btNullPairCache_removeOverlappingPair",1,SWIGTYPE_p_btNullPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btNullPairCache_removeOverlappingPair",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btNullPairCache_removeOverlappingPair",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btNullPairCache_removeOverlappingPair",4,SWIGTYPE_p_btDispatcher);
  }
  
  result = (void *)(arg1)->removeOverlappingPair(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btNullPairCache_removeOverlappingPairsContainingProxy(lua_State* L) {
  int SWIG_arg = 0;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btNullPairCache::removeOverlappingPairsContainingProxy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btNullPairCache::removeOverlappingPairsContainingProxy",1,"btNullPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btNullPairCache::removeOverlappingPairsContainingProxy",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btNullPairCache::removeOverlappingPairsContainingProxy",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btNullPairCache,0))){
    SWIG_fail_ptr("btNullPairCache_removeOverlappingPairsContainingProxy",1,SWIGTYPE_p_btNullPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btNullPairCache_removeOverlappingPairsContainingProxy",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btNullPairCache_removeOverlappingPairsContainingProxy",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->removeOverlappingPairsContainingProxy(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btNullPairCache_sortOverlappingPairs(lua_State* L) {
  int SWIG_arg = 0;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btNullPairCache::sortOverlappingPairs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btNullPairCache::sortOverlappingPairs",1,"btNullPairCache *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btNullPairCache::sortOverlappingPairs",2,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btNullPairCache,0))){
    SWIG_fail_ptr("btNullPairCache_sortOverlappingPairs",1,SWIGTYPE_p_btNullPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btNullPairCache_sortOverlappingPairs",2,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->sortOverlappingPairs(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btNullPairCache(lua_State* L) {
  int SWIG_arg = 0;
  btNullPairCache *result = 0 ;
  
  SWIG_check_num_args("btNullPairCache::btNullPairCache",0,0)
  result = (btNullPairCache *)new btNullPairCache();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btNullPairCache,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btNullPairCache(void *obj) {
btNullPairCache *arg1 = (btNullPairCache *) obj;
delete arg1;
}
static swig_lua_method swig_btNullPairCache_methods[] = {
    {"getOverlappingPairArrayPtr", _wrap_btNullPairCache_getOverlappingPairArrayPtr}, 
    {"getOverlappingPairArray", _wrap_btNullPairCache_getOverlappingPairArray}, 
    {"cleanOverlappingPair", _wrap_btNullPairCache_cleanOverlappingPair}, 
    {"getNumOverlappingPairs", _wrap_btNullPairCache_getNumOverlappingPairs}, 
    {"cleanProxyFromPairs", _wrap_btNullPairCache_cleanProxyFromPairs}, 
    {"setOverlapFilterCallback", _wrap_btNullPairCache_setOverlapFilterCallback}, 
    {"processAllOverlappingPairs", _wrap_btNullPairCache_processAllOverlappingPairs}, 
    {"findPair", _wrap_btNullPairCache_findPair}, 
    {"hasDeferredRemoval", _wrap_btNullPairCache_hasDeferredRemoval}, 
    {"setInternalGhostPairCallback", _wrap_btNullPairCache_setInternalGhostPairCallback}, 
    {"addOverlappingPair", _wrap_btNullPairCache_addOverlappingPair}, 
    {"removeOverlappingPair", _wrap_btNullPairCache_removeOverlappingPair}, 
    {"removeOverlappingPairsContainingProxy", _wrap_btNullPairCache_removeOverlappingPairsContainingProxy}, 
    {"sortOverlappingPairs", _wrap_btNullPairCache_sortOverlappingPairs}, 
    {0,0}
};
static swig_lua_attribute swig_btNullPairCache_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btNullPairCache_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btNullPairCache_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btNullPairCache_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btNullPairCache_bases[] = {0,0};
static const char *swig_btNullPairCache_base_names[] = {"btOverlappingPairCache *",0};
static swig_lua_class _wrap_class_btNullPairCache = { "btNullPairCache", &SWIGTYPE_p_btNullPairCache,_wrap_new_btNullPairCache, swig_delete_btNullPairCache, swig_btNullPairCache_methods, swig_btNullPairCache_attributes, { "btNullPairCache", swig_btNullPairCache_cls_methods, swig_btNullPairCache_cls_attributes, swig_btNullPairCache_cls_constants }, swig_btNullPairCache_bases, swig_btNullPairCache_base_names };

static int _wrap_new_btCollisionAlgorithmConstructionInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionAlgorithmConstructionInfo *result = 0 ;
  
  SWIG_check_num_args("btCollisionAlgorithmConstructionInfo::btCollisionAlgorithmConstructionInfo",0,0)
  result = (btCollisionAlgorithmConstructionInfo *)new btCollisionAlgorithmConstructionInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionAlgorithmConstructionInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCollisionAlgorithmConstructionInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  int arg2 ;
  btCollisionAlgorithmConstructionInfo *result = 0 ;
  
  SWIG_check_num_args("btCollisionAlgorithmConstructionInfo::btCollisionAlgorithmConstructionInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionAlgorithmConstructionInfo::btCollisionAlgorithmConstructionInfo",1,"btDispatcher *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionAlgorithmConstructionInfo::btCollisionAlgorithmConstructionInfo",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("new_btCollisionAlgorithmConstructionInfo",1,SWIGTYPE_p_btDispatcher);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btCollisionAlgorithmConstructionInfo *)new btCollisionAlgorithmConstructionInfo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionAlgorithmConstructionInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCollisionAlgorithmConstructionInfo(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btCollisionAlgorithmConstructionInfo__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDispatcher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_btCollisionAlgorithmConstructionInfo__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btCollisionAlgorithmConstructionInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCollisionAlgorithmConstructionInfo::btCollisionAlgorithmConstructionInfo()\n"
    "    btCollisionAlgorithmConstructionInfo::btCollisionAlgorithmConstructionInfo(btDispatcher *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_btCollisionAlgorithmConstructionInfo_m_dispatcher_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionAlgorithmConstructionInfo *arg1 = (btCollisionAlgorithmConstructionInfo *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btCollisionAlgorithmConstructionInfo::m_dispatcher",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionAlgorithmConstructionInfo::m_dispatcher",1,"btCollisionAlgorithmConstructionInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionAlgorithmConstructionInfo::m_dispatcher",2,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionAlgorithmConstructionInfo,0))){
    SWIG_fail_ptr("btCollisionAlgorithmConstructionInfo_m_dispatcher_set",1,SWIGTYPE_p_btCollisionAlgorithmConstructionInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDispatcher,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btCollisionAlgorithmConstructionInfo_m_dispatcher_set",2,SWIGTYPE_p_btDispatcher);
  }
  
  if (arg1) (arg1)->m_dispatcher = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionAlgorithmConstructionInfo_m_dispatcher_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionAlgorithmConstructionInfo *arg1 = (btCollisionAlgorithmConstructionInfo *) 0 ;
  btDispatcher *result = 0 ;
  
  SWIG_check_num_args("btCollisionAlgorithmConstructionInfo::m_dispatcher",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionAlgorithmConstructionInfo::m_dispatcher",1,"btCollisionAlgorithmConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionAlgorithmConstructionInfo,0))){
    SWIG_fail_ptr("btCollisionAlgorithmConstructionInfo_m_dispatcher_get",1,SWIGTYPE_p_btCollisionAlgorithmConstructionInfo);
  }
  
  result = (btDispatcher *) ((arg1)->m_dispatcher);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDispatcher,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionAlgorithmConstructionInfo_m_manifold_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionAlgorithmConstructionInfo *arg1 = (btCollisionAlgorithmConstructionInfo *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  SWIG_check_num_args("btCollisionAlgorithmConstructionInfo::m_manifold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionAlgorithmConstructionInfo::m_manifold",1,"btCollisionAlgorithmConstructionInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionAlgorithmConstructionInfo::m_manifold",2,"btPersistentManifold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionAlgorithmConstructionInfo,0))){
    SWIG_fail_ptr("btCollisionAlgorithmConstructionInfo_m_manifold_set",1,SWIGTYPE_p_btCollisionAlgorithmConstructionInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btPersistentManifold,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btCollisionAlgorithmConstructionInfo_m_manifold_set",2,SWIGTYPE_p_btPersistentManifold);
  }
  
  if (arg1) (arg1)->m_manifold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionAlgorithmConstructionInfo_m_manifold_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionAlgorithmConstructionInfo *arg1 = (btCollisionAlgorithmConstructionInfo *) 0 ;
  btPersistentManifold *result = 0 ;
  
  SWIG_check_num_args("btCollisionAlgorithmConstructionInfo::m_manifold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionAlgorithmConstructionInfo::m_manifold",1,"btCollisionAlgorithmConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionAlgorithmConstructionInfo,0))){
    SWIG_fail_ptr("btCollisionAlgorithmConstructionInfo_m_manifold_get",1,SWIGTYPE_p_btCollisionAlgorithmConstructionInfo);
  }
  
  result = (btPersistentManifold *) ((arg1)->m_manifold);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPersistentManifold,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCollisionAlgorithmConstructionInfo(void *obj) {
btCollisionAlgorithmConstructionInfo *arg1 = (btCollisionAlgorithmConstructionInfo *) obj;
delete arg1;
}
static swig_lua_method swig_btCollisionAlgorithmConstructionInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btCollisionAlgorithmConstructionInfo_attributes[] = {
    { "m_dispatcher", _wrap_btCollisionAlgorithmConstructionInfo_m_dispatcher_get, _wrap_btCollisionAlgorithmConstructionInfo_m_dispatcher_set},
    { "m_manifold", _wrap_btCollisionAlgorithmConstructionInfo_m_manifold_get, _wrap_btCollisionAlgorithmConstructionInfo_m_manifold_set},
    {0,0,0}
};
static swig_lua_attribute swig_btCollisionAlgorithmConstructionInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCollisionAlgorithmConstructionInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCollisionAlgorithmConstructionInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCollisionAlgorithmConstructionInfo_bases[] = {0};
static const char *swig_btCollisionAlgorithmConstructionInfo_base_names[] = {0};
static swig_lua_class _wrap_class_btCollisionAlgorithmConstructionInfo = { "btCollisionAlgorithmConstructionInfo", &SWIGTYPE_p_btCollisionAlgorithmConstructionInfo,_wrap_new_btCollisionAlgorithmConstructionInfo, swig_delete_btCollisionAlgorithmConstructionInfo, swig_btCollisionAlgorithmConstructionInfo_methods, swig_btCollisionAlgorithmConstructionInfo_attributes, { "btCollisionAlgorithmConstructionInfo", swig_btCollisionAlgorithmConstructionInfo_cls_methods, swig_btCollisionAlgorithmConstructionInfo_cls_attributes, swig_btCollisionAlgorithmConstructionInfo_cls_constants }, swig_btCollisionAlgorithmConstructionInfo_bases, swig_btCollisionAlgorithmConstructionInfo_base_names };

static int _wrap_btCollisionAlgorithm_processCollision(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionAlgorithm *arg1 = (btCollisionAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  SWIG_check_num_args("btCollisionAlgorithm::processCollision",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionAlgorithm::processCollision",1,"btCollisionAlgorithm *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionAlgorithm::processCollision",2,"btCollisionObject *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCollisionAlgorithm::processCollision",3,"btCollisionObject *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btCollisionAlgorithm::processCollision",4,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btCollisionAlgorithm::processCollision",5,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionAlgorithm,0))){
    SWIG_fail_ptr("btCollisionAlgorithm_processCollision",1,SWIGTYPE_p_btCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionAlgorithm_processCollision",2,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionAlgorithm_processCollision",3,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btCollisionAlgorithm_processCollision",4,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btCollisionAlgorithm_processCollision",5,SWIGTYPE_p_btManifoldResult);
  }
  
  (arg1)->processCollision(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionAlgorithm_calculateTimeOfImpact(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionAlgorithm *arg1 = (btCollisionAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCollisionAlgorithm::calculateTimeOfImpact",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionAlgorithm::calculateTimeOfImpact",1,"btCollisionAlgorithm *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionAlgorithm::calculateTimeOfImpact",2,"btCollisionObject *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCollisionAlgorithm::calculateTimeOfImpact",3,"btCollisionObject *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btCollisionAlgorithm::calculateTimeOfImpact",4,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btCollisionAlgorithm::calculateTimeOfImpact",5,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionAlgorithm,0))){
    SWIG_fail_ptr("btCollisionAlgorithm_calculateTimeOfImpact",1,SWIGTYPE_p_btCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionAlgorithm_calculateTimeOfImpact",2,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionAlgorithm_calculateTimeOfImpact",3,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btCollisionAlgorithm_calculateTimeOfImpact",4,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btCollisionAlgorithm_calculateTimeOfImpact",5,SWIGTYPE_p_btManifoldResult);
  }
  
  result = (btScalar)(arg1)->calculateTimeOfImpact(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCollisionAlgorithm(void *obj) {
btCollisionAlgorithm *arg1 = (btCollisionAlgorithm *) obj;
delete arg1;
}
static swig_lua_method swig_btCollisionAlgorithm_methods[] = {
    {"processCollision", _wrap_btCollisionAlgorithm_processCollision}, 
    {"calculateTimeOfImpact", _wrap_btCollisionAlgorithm_calculateTimeOfImpact}, 
    {0,0}
};
static swig_lua_attribute swig_btCollisionAlgorithm_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btCollisionAlgorithm_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCollisionAlgorithm_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCollisionAlgorithm_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCollisionAlgorithm_bases[] = {0};
static const char *swig_btCollisionAlgorithm_base_names[] = {0};
static swig_lua_class _wrap_class_btCollisionAlgorithm = { "btCollisionAlgorithm", &SWIGTYPE_p_btCollisionAlgorithm,0, swig_delete_btCollisionAlgorithm, swig_btCollisionAlgorithm_methods, swig_btCollisionAlgorithm_attributes, { "btCollisionAlgorithm", swig_btCollisionAlgorithm_cls_methods, swig_btCollisionAlgorithm_cls_attributes, swig_btCollisionAlgorithm_cls_constants }, swig_btCollisionAlgorithm_bases, swig_btCollisionAlgorithm_base_names };

static int _wrap_new_btDispatcherInfo(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *result = 0 ;
  
  SWIG_check_num_args("btDispatcherInfo::btDispatcherInfo",0,0)
  result = (btDispatcherInfo *)new btDispatcherInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDispatcherInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_timeStep_set(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btDispatcherInfo::m_timeStep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_timeStep",1,"btDispatcherInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDispatcherInfo::m_timeStep",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_timeStep_set",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_timeStep = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_timeStep_get(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btDispatcherInfo::m_timeStep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_timeStep",1,"btDispatcherInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_timeStep_get",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  result = (btScalar) ((arg1)->m_timeStep);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_stepCount_set(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btDispatcherInfo::m_stepCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_stepCount",1,"btDispatcherInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDispatcherInfo::m_stepCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_stepCount_set",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_stepCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_stepCount_get(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("btDispatcherInfo::m_stepCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_stepCount",1,"btDispatcherInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_stepCount_get",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  result = (int) ((arg1)->m_stepCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_dispatchFunc_set(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btDispatcherInfo::m_dispatchFunc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_dispatchFunc",1,"btDispatcherInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDispatcherInfo::m_dispatchFunc",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_dispatchFunc_set",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_dispatchFunc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_dispatchFunc_get(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("btDispatcherInfo::m_dispatchFunc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_dispatchFunc",1,"btDispatcherInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_dispatchFunc_get",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  result = (int) ((arg1)->m_dispatchFunc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_timeOfImpact_set(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btDispatcherInfo::m_timeOfImpact",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_timeOfImpact",1,"btDispatcherInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDispatcherInfo::m_timeOfImpact",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_timeOfImpact_set",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_timeOfImpact = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_timeOfImpact_get(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btDispatcherInfo::m_timeOfImpact",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_timeOfImpact",1,"btDispatcherInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_timeOfImpact_get",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  result = (btScalar) ((arg1)->m_timeOfImpact);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_useContinuous_set(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btDispatcherInfo::m_useContinuous",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_useContinuous",1,"btDispatcherInfo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btDispatcherInfo::m_useContinuous",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_useContinuous_set",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_useContinuous = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_useContinuous_get(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("btDispatcherInfo::m_useContinuous",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_useContinuous",1,"btDispatcherInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_useContinuous_get",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  result = (bool) ((arg1)->m_useContinuous);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_debugDraw_set(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  SWIG_check_num_args("btDispatcherInfo::m_debugDraw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_debugDraw",1,"btDispatcherInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDispatcherInfo::m_debugDraw",2,"btIDebugDraw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_debugDraw_set",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btIDebugDraw,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btDispatcherInfo_m_debugDraw_set",2,SWIGTYPE_p_btIDebugDraw);
  }
  
  if (arg1) (arg1)->m_debugDraw = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_debugDraw_get(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btIDebugDraw *result = 0 ;
  
  SWIG_check_num_args("btDispatcherInfo::m_debugDraw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_debugDraw",1,"btDispatcherInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_debugDraw_get",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  result = (btIDebugDraw *) ((arg1)->m_debugDraw);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btIDebugDraw,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_enableSatConvex_set(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btDispatcherInfo::m_enableSatConvex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_enableSatConvex",1,"btDispatcherInfo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btDispatcherInfo::m_enableSatConvex",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_enableSatConvex_set",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_enableSatConvex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_enableSatConvex_get(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("btDispatcherInfo::m_enableSatConvex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_enableSatConvex",1,"btDispatcherInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_enableSatConvex_get",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  result = (bool) ((arg1)->m_enableSatConvex);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_enableSPU_set(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btDispatcherInfo::m_enableSPU",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_enableSPU",1,"btDispatcherInfo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btDispatcherInfo::m_enableSPU",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_enableSPU_set",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_enableSPU = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_enableSPU_get(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("btDispatcherInfo::m_enableSPU",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_enableSPU",1,"btDispatcherInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_enableSPU_get",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  result = (bool) ((arg1)->m_enableSPU);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_useEpa_set(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btDispatcherInfo::m_useEpa",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_useEpa",1,"btDispatcherInfo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btDispatcherInfo::m_useEpa",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_useEpa_set",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_useEpa = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_useEpa_get(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("btDispatcherInfo::m_useEpa",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_useEpa",1,"btDispatcherInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_useEpa_get",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  result = (bool) ((arg1)->m_useEpa);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_allowedCcdPenetration_set(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btDispatcherInfo::m_allowedCcdPenetration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_allowedCcdPenetration",1,"btDispatcherInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDispatcherInfo::m_allowedCcdPenetration",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_allowedCcdPenetration_set",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_allowedCcdPenetration = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_allowedCcdPenetration_get(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btDispatcherInfo::m_allowedCcdPenetration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_allowedCcdPenetration",1,"btDispatcherInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_allowedCcdPenetration_get",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  result = (btScalar) ((arg1)->m_allowedCcdPenetration);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_useConvexConservativeDistanceUtil_set(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btDispatcherInfo::m_useConvexConservativeDistanceUtil",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_useConvexConservativeDistanceUtil",1,"btDispatcherInfo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btDispatcherInfo::m_useConvexConservativeDistanceUtil",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_useConvexConservativeDistanceUtil_set",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_useConvexConservativeDistanceUtil = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_useConvexConservativeDistanceUtil_get(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("btDispatcherInfo::m_useConvexConservativeDistanceUtil",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_useConvexConservativeDistanceUtil",1,"btDispatcherInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_useConvexConservativeDistanceUtil_get",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  result = (bool) ((arg1)->m_useConvexConservativeDistanceUtil);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_convexConservativeDistanceThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btDispatcherInfo::m_convexConservativeDistanceThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_convexConservativeDistanceThreshold",1,"btDispatcherInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDispatcherInfo::m_convexConservativeDistanceThreshold",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_convexConservativeDistanceThreshold_set",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_convexConservativeDistanceThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_convexConservativeDistanceThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btDispatcherInfo::m_convexConservativeDistanceThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_convexConservativeDistanceThreshold",1,"btDispatcherInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_convexConservativeDistanceThreshold_get",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  result = (btScalar) ((arg1)->m_convexConservativeDistanceThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_stackAllocator_set(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btStackAlloc *arg2 = (btStackAlloc *) 0 ;
  
  SWIG_check_num_args("btDispatcherInfo::m_stackAllocator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_stackAllocator",1,"btDispatcherInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDispatcherInfo::m_stackAllocator",2,"btStackAlloc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_stackAllocator_set",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btStackAlloc,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btDispatcherInfo_m_stackAllocator_set",2,SWIGTYPE_p_btStackAlloc);
  }
  
  if (arg1) (arg1)->m_stackAllocator = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcherInfo_m_stackAllocator_get(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btStackAlloc *result = 0 ;
  
  SWIG_check_num_args("btDispatcherInfo::m_stackAllocator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcherInfo::m_stackAllocator",1,"btDispatcherInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcherInfo_m_stackAllocator_get",1,SWIGTYPE_p_btDispatcherInfo);
  }
  
  result = (btStackAlloc *) ((arg1)->m_stackAllocator);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btStackAlloc,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btDispatcherInfo(void *obj) {
btDispatcherInfo *arg1 = (btDispatcherInfo *) obj;
delete arg1;
}
static swig_lua_method swig_btDispatcherInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btDispatcherInfo_attributes[] = {
    { "m_timeStep", _wrap_btDispatcherInfo_m_timeStep_get, _wrap_btDispatcherInfo_m_timeStep_set},
    { "m_stepCount", _wrap_btDispatcherInfo_m_stepCount_get, _wrap_btDispatcherInfo_m_stepCount_set},
    { "m_dispatchFunc", _wrap_btDispatcherInfo_m_dispatchFunc_get, _wrap_btDispatcherInfo_m_dispatchFunc_set},
    { "m_timeOfImpact", _wrap_btDispatcherInfo_m_timeOfImpact_get, _wrap_btDispatcherInfo_m_timeOfImpact_set},
    { "m_useContinuous", _wrap_btDispatcherInfo_m_useContinuous_get, _wrap_btDispatcherInfo_m_useContinuous_set},
    { "m_debugDraw", _wrap_btDispatcherInfo_m_debugDraw_get, _wrap_btDispatcherInfo_m_debugDraw_set},
    { "m_enableSatConvex", _wrap_btDispatcherInfo_m_enableSatConvex_get, _wrap_btDispatcherInfo_m_enableSatConvex_set},
    { "m_enableSPU", _wrap_btDispatcherInfo_m_enableSPU_get, _wrap_btDispatcherInfo_m_enableSPU_set},
    { "m_useEpa", _wrap_btDispatcherInfo_m_useEpa_get, _wrap_btDispatcherInfo_m_useEpa_set},
    { "m_allowedCcdPenetration", _wrap_btDispatcherInfo_m_allowedCcdPenetration_get, _wrap_btDispatcherInfo_m_allowedCcdPenetration_set},
    { "m_useConvexConservativeDistanceUtil", _wrap_btDispatcherInfo_m_useConvexConservativeDistanceUtil_get, _wrap_btDispatcherInfo_m_useConvexConservativeDistanceUtil_set},
    { "m_convexConservativeDistanceThreshold", _wrap_btDispatcherInfo_m_convexConservativeDistanceThreshold_get, _wrap_btDispatcherInfo_m_convexConservativeDistanceThreshold_set},
    { "m_stackAllocator", _wrap_btDispatcherInfo_m_stackAllocator_get, _wrap_btDispatcherInfo_m_stackAllocator_set},
    {0,0,0}
};
static swig_lua_attribute swig_btDispatcherInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btDispatcherInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btDispatcherInfo_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("DISPATCH_DISCRETE", btDispatcherInfo::DISPATCH_DISCRETE)},
    {SWIG_LUA_CONSTTAB_INT("DISPATCH_CONTINUOUS", btDispatcherInfo::DISPATCH_CONTINUOUS)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btDispatcherInfo_bases[] = {0};
static const char *swig_btDispatcherInfo_base_names[] = {0};
static swig_lua_class _wrap_class_btDispatcherInfo = { "btDispatcherInfo", &SWIGTYPE_p_btDispatcherInfo,_wrap_new_btDispatcherInfo, swig_delete_btDispatcherInfo, swig_btDispatcherInfo_methods, swig_btDispatcherInfo_attributes, { "btDispatcherInfo", swig_btDispatcherInfo_cls_methods, swig_btDispatcherInfo_cls_attributes, swig_btDispatcherInfo_cls_constants }, swig_btDispatcherInfo_bases, swig_btDispatcherInfo_base_names };

static int _wrap_btDispatcher_findAlgorithm__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btPersistentManifold *arg4 = (btPersistentManifold *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  SWIG_check_num_args("btDispatcher::findAlgorithm",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcher::findAlgorithm",1,"btDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDispatcher::findAlgorithm",2,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btDispatcher::findAlgorithm",3,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btDispatcher::findAlgorithm",4,"btPersistentManifold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btDispatcher_findAlgorithm",1,SWIGTYPE_p_btDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btDispatcher_findAlgorithm",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btDispatcher_findAlgorithm",3,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btDispatcher_findAlgorithm",4,SWIGTYPE_p_btPersistentManifold);
  }
  
  result = (btCollisionAlgorithm *)(arg1)->findAlgorithm((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionAlgorithm,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcher_findAlgorithm__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  SWIG_check_num_args("btDispatcher::findAlgorithm",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcher::findAlgorithm",1,"btDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDispatcher::findAlgorithm",2,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btDispatcher::findAlgorithm",3,"btCollisionObjectWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btDispatcher_findAlgorithm",1,SWIGTYPE_p_btDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btDispatcher_findAlgorithm",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btDispatcher_findAlgorithm",3,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  result = (btCollisionAlgorithm *)(arg1)->findAlgorithm((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionAlgorithm,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcher_findAlgorithm(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDispatcher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btCollisionObjectWrapper, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btCollisionObjectWrapper, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btDispatcher_findAlgorithm__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDispatcher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btCollisionObjectWrapper, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btCollisionObjectWrapper, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btPersistentManifold, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btDispatcher_findAlgorithm__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btDispatcher_findAlgorithm'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btDispatcher::findAlgorithm(btCollisionObjectWrapper const *,btCollisionObjectWrapper const *,btPersistentManifold *)\n"
    "    btDispatcher::findAlgorithm(btCollisionObjectWrapper const *,btCollisionObjectWrapper const *)\n");
  lua_error(L);return 0;
}


static int _wrap_btDispatcher_getNewManifold(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btPersistentManifold *result = 0 ;
  
  SWIG_check_num_args("btDispatcher::getNewManifold",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcher::getNewManifold",1,"btDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDispatcher::getNewManifold",2,"btCollisionObject const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btDispatcher::getNewManifold",3,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btDispatcher_getNewManifold",1,SWIGTYPE_p_btDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btDispatcher_getNewManifold",2,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btDispatcher_getNewManifold",3,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btPersistentManifold *)(arg1)->getNewManifold((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPersistentManifold,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcher_releaseManifold(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  SWIG_check_num_args("btDispatcher::releaseManifold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcher::releaseManifold",1,"btDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDispatcher::releaseManifold",2,"btPersistentManifold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btDispatcher_releaseManifold",1,SWIGTYPE_p_btDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btDispatcher_releaseManifold",2,SWIGTYPE_p_btPersistentManifold);
  }
  
  (arg1)->releaseManifold(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcher_clearManifold(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  SWIG_check_num_args("btDispatcher::clearManifold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcher::clearManifold",1,"btDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDispatcher::clearManifold",2,"btPersistentManifold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btDispatcher_clearManifold",1,SWIGTYPE_p_btDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btDispatcher_clearManifold",2,SWIGTYPE_p_btPersistentManifold);
  }
  
  (arg1)->clearManifold(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcher_needsCollision(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("btDispatcher::needsCollision",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcher::needsCollision",1,"btDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDispatcher::needsCollision",2,"btCollisionObject const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btDispatcher::needsCollision",3,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btDispatcher_needsCollision",1,SWIGTYPE_p_btDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btDispatcher_needsCollision",2,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btDispatcher_needsCollision",3,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (bool)(arg1)->needsCollision((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcher_needsResponse(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("btDispatcher::needsResponse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcher::needsResponse",1,"btDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDispatcher::needsResponse",2,"btCollisionObject const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btDispatcher::needsResponse",3,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btDispatcher_needsResponse",1,SWIGTYPE_p_btDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btDispatcher_needsResponse",2,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btDispatcher_needsResponse",3,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (bool)(arg1)->needsResponse((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcher_dispatchAllCollisionPairs(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btOverlappingPairCache *arg2 = (btOverlappingPairCache *) 0 ;
  btDispatcherInfo *arg3 = 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btDispatcher::dispatchAllCollisionPairs",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcher::dispatchAllCollisionPairs",1,"btDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDispatcher::dispatchAllCollisionPairs",2,"btOverlappingPairCache *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btDispatcher::dispatchAllCollisionPairs",3,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btDispatcher::dispatchAllCollisionPairs",4,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btDispatcher_dispatchAllCollisionPairs",1,SWIGTYPE_p_btDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOverlappingPairCache,0))){
    SWIG_fail_ptr("btDispatcher_dispatchAllCollisionPairs",2,SWIGTYPE_p_btOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btDispatcher_dispatchAllCollisionPairs",3,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btDispatcher_dispatchAllCollisionPairs",4,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->dispatchAllCollisionPairs(arg2,(btDispatcherInfo const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcher_getNumManifolds(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  int result;
  
  SWIG_check_num_args("btDispatcher::getNumManifolds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcher::getNumManifolds",1,"btDispatcher const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btDispatcher_getNumManifolds",1,SWIGTYPE_p_btDispatcher);
  }
  
  result = (int)((btDispatcher const *)arg1)->getNumManifolds();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcher_getManifoldByIndexInternal(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  int arg2 ;
  btPersistentManifold *result = 0 ;
  
  SWIG_check_num_args("btDispatcher::getManifoldByIndexInternal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcher::getManifoldByIndexInternal",1,"btDispatcher *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDispatcher::getManifoldByIndexInternal",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btDispatcher_getManifoldByIndexInternal",1,SWIGTYPE_p_btDispatcher);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btPersistentManifold *)(arg1)->getManifoldByIndexInternal(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPersistentManifold,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcher_getInternalManifoldPointer(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btPersistentManifold **result = 0 ;
  
  SWIG_check_num_args("btDispatcher::getInternalManifoldPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcher::getInternalManifoldPointer",1,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btDispatcher_getInternalManifoldPointer",1,SWIGTYPE_p_btDispatcher);
  }
  
  result = (btPersistentManifold **)(arg1)->getInternalManifoldPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_btPersistentManifold,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcher_getInternalManifoldPool__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btPoolAllocator *result = 0 ;
  
  SWIG_check_num_args("btDispatcher::getInternalManifoldPool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcher::getInternalManifoldPool",1,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btDispatcher_getInternalManifoldPool",1,SWIGTYPE_p_btDispatcher);
  }
  
  result = (btPoolAllocator *)(arg1)->getInternalManifoldPool();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPoolAllocator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcher_getInternalManifoldPool__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btPoolAllocator *result = 0 ;
  
  SWIG_check_num_args("btDispatcher::getInternalManifoldPool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcher::getInternalManifoldPool",1,"btDispatcher const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btDispatcher_getInternalManifoldPool",1,SWIGTYPE_p_btDispatcher);
  }
  
  result = (btPoolAllocator *)((btDispatcher const *)arg1)->getInternalManifoldPool();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPoolAllocator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcher_getInternalManifoldPool(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDispatcher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btDispatcher_getInternalManifoldPool__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDispatcher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btDispatcher_getInternalManifoldPool__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btDispatcher_getInternalManifoldPool'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btDispatcher::getInternalManifoldPool()\n"
    "    btDispatcher::getInternalManifoldPool() const\n");
  lua_error(L);return 0;
}


static int _wrap_btDispatcher_allocateCollisionAlgorithm(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  int arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btDispatcher::allocateCollisionAlgorithm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcher::allocateCollisionAlgorithm",1,"btDispatcher *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDispatcher::allocateCollisionAlgorithm",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btDispatcher_allocateCollisionAlgorithm",1,SWIGTYPE_p_btDispatcher);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (void *)(arg1)->allocateCollisionAlgorithm(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDispatcher_freeCollisionAlgorithm(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btDispatcher::freeCollisionAlgorithm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDispatcher::freeCollisionAlgorithm",1,"btDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDispatcher::freeCollisionAlgorithm",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btDispatcher_freeCollisionAlgorithm",1,SWIGTYPE_p_btDispatcher);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btDispatcher_freeCollisionAlgorithm");
  (arg1)->freeCollisionAlgorithm(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btDispatcher(void *obj) {
btDispatcher *arg1 = (btDispatcher *) obj;
delete arg1;
}
static swig_lua_method swig_btDispatcher_methods[] = {
    {"findAlgorithm", _wrap_btDispatcher_findAlgorithm}, 
    {"getNewManifold", _wrap_btDispatcher_getNewManifold}, 
    {"releaseManifold", _wrap_btDispatcher_releaseManifold}, 
    {"clearManifold", _wrap_btDispatcher_clearManifold}, 
    {"needsCollision", _wrap_btDispatcher_needsCollision}, 
    {"needsResponse", _wrap_btDispatcher_needsResponse}, 
    {"dispatchAllCollisionPairs", _wrap_btDispatcher_dispatchAllCollisionPairs}, 
    {"getNumManifolds", _wrap_btDispatcher_getNumManifolds}, 
    {"getManifoldByIndexInternal", _wrap_btDispatcher_getManifoldByIndexInternal}, 
    {"getInternalManifoldPointer", _wrap_btDispatcher_getInternalManifoldPointer}, 
    {"getInternalManifoldPool", _wrap_btDispatcher_getInternalManifoldPool}, 
    {"allocateCollisionAlgorithm", _wrap_btDispatcher_allocateCollisionAlgorithm}, 
    {"freeCollisionAlgorithm", _wrap_btDispatcher_freeCollisionAlgorithm}, 
    {0,0}
};
static swig_lua_attribute swig_btDispatcher_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btDispatcher_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btDispatcher_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btDispatcher_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btDispatcher_bases[] = {0};
static const char *swig_btDispatcher_base_names[] = {0};
static swig_lua_class _wrap_class_btDispatcher = { "btDispatcher", &SWIGTYPE_p_btDispatcher,0, swig_delete_btDispatcher, swig_btDispatcher_methods, swig_btDispatcher_attributes, { "btDispatcher", swig_btDispatcher_cls_methods, swig_btDispatcher_cls_attributes, swig_btDispatcher_cls_constants }, swig_btDispatcher_bases, swig_btDispatcher_base_names };

static int _wrap_btSimpleBroadphaseProxy_m_nextFree_set(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btSimpleBroadphaseProxy::m_nextFree",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphaseProxy::m_nextFree",1,"btSimpleBroadphaseProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSimpleBroadphaseProxy::m_nextFree",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphaseProxy,0))){
    SWIG_fail_ptr("btSimpleBroadphaseProxy_m_nextFree_set",1,SWIGTYPE_p_btSimpleBroadphaseProxy);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_nextFree = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleBroadphaseProxy_m_nextFree_get(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int result;
  
  SWIG_check_num_args("btSimpleBroadphaseProxy::m_nextFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphaseProxy::m_nextFree",1,"btSimpleBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphaseProxy,0))){
    SWIG_fail_ptr("btSimpleBroadphaseProxy_m_nextFree_get",1,SWIGTYPE_p_btSimpleBroadphaseProxy);
  }
  
  result = (int) ((arg1)->m_nextFree);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btSimpleBroadphaseProxy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphaseProxy *result = 0 ;
  
  SWIG_check_num_args("btSimpleBroadphaseProxy::btSimpleBroadphaseProxy",0,0)
  result = (btSimpleBroadphaseProxy *)new btSimpleBroadphaseProxy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSimpleBroadphaseProxy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btSimpleBroadphaseProxy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  short arg5 ;
  short arg6 ;
  void *arg7 = (void *) 0 ;
  btSimpleBroadphaseProxy *result = 0 ;
  
  SWIG_check_num_args("btSimpleBroadphaseProxy::btSimpleBroadphaseProxy",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btSimpleBroadphaseProxy::btSimpleBroadphaseProxy",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSimpleBroadphaseProxy::btSimpleBroadphaseProxy",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSimpleBroadphaseProxy::btSimpleBroadphaseProxy",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btSimpleBroadphaseProxy::btSimpleBroadphaseProxy",4,"void *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btSimpleBroadphaseProxy::btSimpleBroadphaseProxy",5,"short");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btSimpleBroadphaseProxy::btSimpleBroadphaseProxy",6,"short");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("btSimpleBroadphaseProxy::btSimpleBroadphaseProxy",7,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btSimpleBroadphaseProxy",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btSimpleBroadphaseProxy",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"new_btSimpleBroadphaseProxy");
  arg5 = (short)lua_tonumber(L, 5);
  arg6 = (short)lua_tonumber(L, 6);
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"new_btSimpleBroadphaseProxy");
  result = (btSimpleBroadphaseProxy *)new btSimpleBroadphaseProxy((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSimpleBroadphaseProxy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btSimpleBroadphaseProxy(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btSimpleBroadphaseProxy__SWIG_0(L);
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, 0, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_new_btSimpleBroadphaseProxy__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btSimpleBroadphaseProxy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSimpleBroadphaseProxy::btSimpleBroadphaseProxy()\n"
    "    btSimpleBroadphaseProxy::btSimpleBroadphaseProxy(btVector3 const &,btVector3 const &,int,void *,short,short,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_btSimpleBroadphaseProxy_SetNextFree(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btSimpleBroadphaseProxy::SetNextFree",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphaseProxy::SetNextFree",1,"btSimpleBroadphaseProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSimpleBroadphaseProxy::SetNextFree",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphaseProxy,0))){
    SWIG_fail_ptr("btSimpleBroadphaseProxy_SetNextFree",1,SWIGTYPE_p_btSimpleBroadphaseProxy);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetNextFree(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleBroadphaseProxy_GetNextFree(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int result;
  
  SWIG_check_num_args("btSimpleBroadphaseProxy::GetNextFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphaseProxy::GetNextFree",1,"btSimpleBroadphaseProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphaseProxy,0))){
    SWIG_fail_ptr("btSimpleBroadphaseProxy_GetNextFree",1,SWIGTYPE_p_btSimpleBroadphaseProxy);
  }
  
  result = (int)((btSimpleBroadphaseProxy const *)arg1)->GetNextFree();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSimpleBroadphaseProxy(void *obj) {
btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) obj;
delete arg1;
}
static swig_lua_method swig_btSimpleBroadphaseProxy_methods[] = {
    {"SetNextFree", _wrap_btSimpleBroadphaseProxy_SetNextFree}, 
    {"GetNextFree", _wrap_btSimpleBroadphaseProxy_GetNextFree}, 
    {0,0}
};
static swig_lua_attribute swig_btSimpleBroadphaseProxy_attributes[] = {
    { "m_nextFree", _wrap_btSimpleBroadphaseProxy_m_nextFree_get, _wrap_btSimpleBroadphaseProxy_m_nextFree_set},
    {0,0,0}
};
static swig_lua_attribute swig_btSimpleBroadphaseProxy_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSimpleBroadphaseProxy_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btSimpleBroadphaseProxy_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSimpleBroadphaseProxy_bases[] = {0,0};
static const char *swig_btSimpleBroadphaseProxy_base_names[] = {"btBroadphaseProxy *",0};
static swig_lua_class _wrap_class_btSimpleBroadphaseProxy = { "btSimpleBroadphaseProxy", &SWIGTYPE_p_btSimpleBroadphaseProxy,_wrap_new_btSimpleBroadphaseProxy, swig_delete_btSimpleBroadphaseProxy, swig_btSimpleBroadphaseProxy_methods, swig_btSimpleBroadphaseProxy_attributes, { "btSimpleBroadphaseProxy", swig_btSimpleBroadphaseProxy_cls_methods, swig_btSimpleBroadphaseProxy_cls_attributes, swig_btSimpleBroadphaseProxy_cls_constants }, swig_btSimpleBroadphaseProxy_bases, swig_btSimpleBroadphaseProxy_base_names };

static int _wrap_new_btSimpleBroadphase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  btOverlappingPairCache *arg2 = (btOverlappingPairCache *) 0 ;
  btSimpleBroadphase *result = 0 ;
  
  SWIG_check_num_args("btSimpleBroadphase::btSimpleBroadphase",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btSimpleBroadphase::btSimpleBroadphase",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimpleBroadphase::btSimpleBroadphase",2,"btOverlappingPairCache *");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOverlappingPairCache,0))){
    SWIG_fail_ptr("new_btSimpleBroadphase",2,SWIGTYPE_p_btOverlappingPairCache);
  }
  
  result = (btSimpleBroadphase *)new btSimpleBroadphase(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSimpleBroadphase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btSimpleBroadphase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  btSimpleBroadphase *result = 0 ;
  
  SWIG_check_num_args("btSimpleBroadphase::btSimpleBroadphase",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btSimpleBroadphase::btSimpleBroadphase",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (btSimpleBroadphase *)new btSimpleBroadphase(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSimpleBroadphase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btSimpleBroadphase__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphase *result = 0 ;
  
  SWIG_check_num_args("btSimpleBroadphase::btSimpleBroadphase",0,0)
  result = (btSimpleBroadphase *)new btSimpleBroadphase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSimpleBroadphase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btSimpleBroadphase(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btSimpleBroadphase__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_btSimpleBroadphase__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btOverlappingPairCache, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_btSimpleBroadphase__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btSimpleBroadphase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSimpleBroadphase::btSimpleBroadphase(int,btOverlappingPairCache *)\n"
    "    btSimpleBroadphase::btSimpleBroadphase(int)\n"
    "    btSimpleBroadphase::btSimpleBroadphase()\n");
  lua_error(L);return 0;
}


static int _wrap_btSimpleBroadphase_aabbOverlap(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  btSimpleBroadphaseProxy *arg2 = (btSimpleBroadphaseProxy *) 0 ;
  bool result;
  
  SWIG_check_num_args("btSimpleBroadphase::aabbOverlap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphase::aabbOverlap",1,"btSimpleBroadphaseProxy *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimpleBroadphase::aabbOverlap",2,"btSimpleBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphaseProxy,0))){
    SWIG_fail_ptr("btSimpleBroadphase_aabbOverlap",1,SWIGTYPE_p_btSimpleBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSimpleBroadphaseProxy,0))){
    SWIG_fail_ptr("btSimpleBroadphase_aabbOverlap",2,SWIGTYPE_p_btSimpleBroadphaseProxy);
  }
  
  result = (bool)btSimpleBroadphase::aabbOverlap(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleBroadphase_createProxy(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  short arg6 ;
  short arg7 ;
  btDispatcher *arg8 = (btDispatcher *) 0 ;
  void *arg9 = (void *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  SWIG_check_num_args("btSimpleBroadphase::createProxy",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphase::createProxy",1,"btSimpleBroadphase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSimpleBroadphase::createProxy",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSimpleBroadphase::createProxy",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSimpleBroadphase::createProxy",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btSimpleBroadphase::createProxy",5,"void *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btSimpleBroadphase::createProxy",6,"short");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("btSimpleBroadphase::createProxy",7,"short");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("btSimpleBroadphase::createProxy",8,"btDispatcher *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("btSimpleBroadphase::createProxy",9,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphase,0))){
    SWIG_fail_ptr("btSimpleBroadphase_createProxy",1,SWIGTYPE_p_btSimpleBroadphase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_createProxy",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_createProxy",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"btSimpleBroadphase_createProxy");
  arg6 = (short)lua_tonumber(L, 6);
  arg7 = (short)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btSimpleBroadphase_createProxy",8,SWIGTYPE_p_btDispatcher);
  }
  
  arg9=(void *)SWIG_MustGetPtr(L,9,0,0,9,"btSimpleBroadphase_createProxy");
  result = (btBroadphaseProxy *)(arg1)->createProxy((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphaseProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleBroadphase_calculateOverlappingPairs(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btSimpleBroadphase::calculateOverlappingPairs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphase::calculateOverlappingPairs",1,"btSimpleBroadphase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimpleBroadphase::calculateOverlappingPairs",2,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphase,0))){
    SWIG_fail_ptr("btSimpleBroadphase_calculateOverlappingPairs",1,SWIGTYPE_p_btSimpleBroadphase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btSimpleBroadphase_calculateOverlappingPairs",2,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->calculateOverlappingPairs(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleBroadphase_destroyProxy(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btSimpleBroadphase::destroyProxy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphase::destroyProxy",1,"btSimpleBroadphase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimpleBroadphase::destroyProxy",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSimpleBroadphase::destroyProxy",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphase,0))){
    SWIG_fail_ptr("btSimpleBroadphase_destroyProxy",1,SWIGTYPE_p_btSimpleBroadphase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btSimpleBroadphase_destroyProxy",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btSimpleBroadphase_destroyProxy",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->destroyProxy(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleBroadphase_setAabb(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btDispatcher *arg5 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btSimpleBroadphase::setAabb",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphase::setAabb",1,"btSimpleBroadphase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimpleBroadphase::setAabb",2,"btBroadphaseProxy *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSimpleBroadphase::setAabb",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSimpleBroadphase::setAabb",4,"btVector3 const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btSimpleBroadphase::setAabb",5,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphase,0))){
    SWIG_fail_ptr("btSimpleBroadphase_setAabb",1,SWIGTYPE_p_btSimpleBroadphase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btSimpleBroadphase_setAabb",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_setAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_setAabb",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btSimpleBroadphase_setAabb",5,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->setAabb(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleBroadphase_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btSimpleBroadphase::getAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphase::getAabb",1,"btSimpleBroadphase const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimpleBroadphase::getAabb",2,"btBroadphaseProxy *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSimpleBroadphase::getAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSimpleBroadphase::getAabb",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphase,0))){
    SWIG_fail_ptr("btSimpleBroadphase_getAabb",1,SWIGTYPE_p_btSimpleBroadphase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btSimpleBroadphase_getAabb",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_getAabb",4,SWIGTYPE_p_btVector3);
  }
  
  ((btSimpleBroadphase const *)arg1)->getAabb(arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleBroadphase_rayTest__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  SWIG_check_num_args("btSimpleBroadphase::rayTest",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphase::rayTest",1,"btSimpleBroadphase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSimpleBroadphase::rayTest",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSimpleBroadphase::rayTest",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSimpleBroadphase::rayTest",4,"btBroadphaseRayCallback &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btSimpleBroadphase::rayTest",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btSimpleBroadphase::rayTest",6,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphase,0))){
    SWIG_fail_ptr("btSimpleBroadphase_rayTest",1,SWIGTYPE_p_btSimpleBroadphase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_rayTest",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_rayTest",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btBroadphaseRayCallback,0))){
    SWIG_fail_ptr("btSimpleBroadphase_rayTest",4,SWIGTYPE_p_btBroadphaseRayCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_rayTest",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_rayTest",6,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleBroadphase_rayTest__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  SWIG_check_num_args("btSimpleBroadphase::rayTest",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphase::rayTest",1,"btSimpleBroadphase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSimpleBroadphase::rayTest",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSimpleBroadphase::rayTest",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSimpleBroadphase::rayTest",4,"btBroadphaseRayCallback &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btSimpleBroadphase::rayTest",5,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphase,0))){
    SWIG_fail_ptr("btSimpleBroadphase_rayTest",1,SWIGTYPE_p_btSimpleBroadphase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_rayTest",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_rayTest",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btBroadphaseRayCallback,0))){
    SWIG_fail_ptr("btSimpleBroadphase_rayTest",4,SWIGTYPE_p_btBroadphaseRayCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_rayTest",5,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleBroadphase_rayTest__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  
  SWIG_check_num_args("btSimpleBroadphase::rayTest",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphase::rayTest",1,"btSimpleBroadphase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSimpleBroadphase::rayTest",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSimpleBroadphase::rayTest",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSimpleBroadphase::rayTest",4,"btBroadphaseRayCallback &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphase,0))){
    SWIG_fail_ptr("btSimpleBroadphase_rayTest",1,SWIGTYPE_p_btSimpleBroadphase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_rayTest",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_rayTest",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btBroadphaseRayCallback,0))){
    SWIG_fail_ptr("btSimpleBroadphase_rayTest",4,SWIGTYPE_p_btBroadphaseRayCallback);
  }
  
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleBroadphase_rayTest(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSimpleBroadphase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btBroadphaseRayCallback, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btSimpleBroadphase_rayTest__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSimpleBroadphase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btBroadphaseRayCallback, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_btSimpleBroadphase_rayTest__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSimpleBroadphase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btBroadphaseRayCallback, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_btSimpleBroadphase_rayTest__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSimpleBroadphase_rayTest'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSimpleBroadphase::rayTest(btVector3 const &,btVector3 const &,btBroadphaseRayCallback &,btVector3 const &,btVector3 const &)\n"
    "    btSimpleBroadphase::rayTest(btVector3 const &,btVector3 const &,btBroadphaseRayCallback &,btVector3 const &)\n"
    "    btSimpleBroadphase::rayTest(btVector3 const &,btVector3 const &,btBroadphaseRayCallback &)\n");
  lua_error(L);return 0;
}


static int _wrap_btSimpleBroadphase_aabbTest(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseAabbCallback *arg4 = 0 ;
  
  SWIG_check_num_args("btSimpleBroadphase::aabbTest",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphase::aabbTest",1,"btSimpleBroadphase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSimpleBroadphase::aabbTest",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSimpleBroadphase::aabbTest",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSimpleBroadphase::aabbTest",4,"btBroadphaseAabbCallback &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphase,0))){
    SWIG_fail_ptr("btSimpleBroadphase_aabbTest",1,SWIGTYPE_p_btSimpleBroadphase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_aabbTest",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_aabbTest",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btBroadphaseAabbCallback,0))){
    SWIG_fail_ptr("btSimpleBroadphase_aabbTest",4,SWIGTYPE_p_btBroadphaseAabbCallback);
  }
  
  (arg1)->aabbTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleBroadphase_getOverlappingPairCache__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  SWIG_check_num_args("btSimpleBroadphase::getOverlappingPairCache",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphase::getOverlappingPairCache",1,"btSimpleBroadphase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphase,0))){
    SWIG_fail_ptr("btSimpleBroadphase_getOverlappingPairCache",1,SWIGTYPE_p_btSimpleBroadphase);
  }
  
  result = (btOverlappingPairCache *)(arg1)->getOverlappingPairCache();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btOverlappingPairCache,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleBroadphase_getOverlappingPairCache__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  SWIG_check_num_args("btSimpleBroadphase::getOverlappingPairCache",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphase::getOverlappingPairCache",1,"btSimpleBroadphase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphase,0))){
    SWIG_fail_ptr("btSimpleBroadphase_getOverlappingPairCache",1,SWIGTYPE_p_btSimpleBroadphase);
  }
  
  result = (btOverlappingPairCache *)((btSimpleBroadphase const *)arg1)->getOverlappingPairCache();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btOverlappingPairCache,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleBroadphase_getOverlappingPairCache(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSimpleBroadphase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSimpleBroadphase_getOverlappingPairCache__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSimpleBroadphase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSimpleBroadphase_getOverlappingPairCache__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSimpleBroadphase_getOverlappingPairCache'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSimpleBroadphase::getOverlappingPairCache()\n"
    "    btSimpleBroadphase::getOverlappingPairCache() const\n");
  lua_error(L);return 0;
}


static int _wrap_btSimpleBroadphase_testAabbOverlap(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  SWIG_check_num_args("btSimpleBroadphase::testAabbOverlap",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphase::testAabbOverlap",1,"btSimpleBroadphase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimpleBroadphase::testAabbOverlap",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSimpleBroadphase::testAabbOverlap",3,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphase,0))){
    SWIG_fail_ptr("btSimpleBroadphase_testAabbOverlap",1,SWIGTYPE_p_btSimpleBroadphase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btSimpleBroadphase_testAabbOverlap",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btSimpleBroadphase_testAabbOverlap",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (bool)(arg1)->testAabbOverlap(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleBroadphase_getBroadphaseAabb(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btSimpleBroadphase::getBroadphaseAabb",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphase::getBroadphaseAabb",1,"btSimpleBroadphase const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSimpleBroadphase::getBroadphaseAabb",2,"btVector3 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSimpleBroadphase::getBroadphaseAabb",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphase,0))){
    SWIG_fail_ptr("btSimpleBroadphase_getBroadphaseAabb",1,SWIGTYPE_p_btSimpleBroadphase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_getBroadphaseAabb",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleBroadphase_getBroadphaseAabb",3,SWIGTYPE_p_btVector3);
  }
  
  ((btSimpleBroadphase const *)arg1)->getBroadphaseAabb(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleBroadphase_printStats(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  
  SWIG_check_num_args("btSimpleBroadphase::printStats",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleBroadphase::printStats",1,"btSimpleBroadphase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleBroadphase,0))){
    SWIG_fail_ptr("btSimpleBroadphase_printStats",1,SWIGTYPE_p_btSimpleBroadphase);
  }
  
  (arg1)->printStats();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSimpleBroadphase(void *obj) {
btSimpleBroadphase *arg1 = (btSimpleBroadphase *) obj;
delete arg1;
}
static swig_lua_method swig_btSimpleBroadphase_methods[] = {
    {"createProxy", _wrap_btSimpleBroadphase_createProxy}, 
    {"calculateOverlappingPairs", _wrap_btSimpleBroadphase_calculateOverlappingPairs}, 
    {"destroyProxy", _wrap_btSimpleBroadphase_destroyProxy}, 
    {"setAabb", _wrap_btSimpleBroadphase_setAabb}, 
    {"getAabb", _wrap_btSimpleBroadphase_getAabb}, 
    {"rayTest", _wrap_btSimpleBroadphase_rayTest}, 
    {"aabbTest", _wrap_btSimpleBroadphase_aabbTest}, 
    {"getOverlappingPairCache", _wrap_btSimpleBroadphase_getOverlappingPairCache}, 
    {"testAabbOverlap", _wrap_btSimpleBroadphase_testAabbOverlap}, 
    {"getBroadphaseAabb", _wrap_btSimpleBroadphase_getBroadphaseAabb}, 
    {"printStats", _wrap_btSimpleBroadphase_printStats}, 
    {0,0}
};
static swig_lua_attribute swig_btSimpleBroadphase_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btSimpleBroadphase_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSimpleBroadphase_cls_methods[] = {
    {"aabbOverlap", _wrap_btSimpleBroadphase_aabbOverlap}, 
    {0,0}
};
static swig_lua_const_info swig_btSimpleBroadphase_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSimpleBroadphase_bases[] = {0,0};
static const char *swig_btSimpleBroadphase_base_names[] = {"btBroadphaseInterface *",0};
static swig_lua_class _wrap_class_btSimpleBroadphase = { "btSimpleBroadphase", &SWIGTYPE_p_btSimpleBroadphase,_wrap_new_btSimpleBroadphase, swig_delete_btSimpleBroadphase, swig_btSimpleBroadphase_methods, swig_btSimpleBroadphase_attributes, { "btSimpleBroadphase", swig_btSimpleBroadphase_cls_methods, swig_btSimpleBroadphase_cls_attributes, swig_btSimpleBroadphase_cls_constants }, swig_btSimpleBroadphase_bases, swig_btSimpleBroadphase_base_names };

static int _wrap_btCollisionShape_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btCollisionShape::getAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::getAabb",1,"btCollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCollisionShape::getAabb",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btCollisionShape::getAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btCollisionShape::getAabb",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_getAabb",1,SWIGTYPE_p_btCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btCollisionShape_getAabb",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCollisionShape_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCollisionShape_getAabb",4,SWIGTYPE_p_btVector3);
  }
  
  ((btCollisionShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_getBoundingSphere(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  SWIG_check_num_args("btCollisionShape::getBoundingSphere",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::getBoundingSphere",1,"btCollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCollisionShape::getBoundingSphere",2,"btVector3 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btCollisionShape::getBoundingSphere",3,"btScalar &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_getBoundingSphere",1,SWIGTYPE_p_btCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCollisionShape_getBoundingSphere",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btCollisionShape_getBoundingSphere",3,SWIGTYPE_p_float);
  }
  
  ((btCollisionShape const *)arg1)->getBoundingSphere(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_getAngularMotionDisc(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCollisionShape::getAngularMotionDisc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::getAngularMotionDisc",1,"btCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_getAngularMotionDisc",1,SWIGTYPE_p_btCollisionShape);
  }
  
  result = (btScalar)((btCollisionShape const *)arg1)->getAngularMotionDisc();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_getContactBreakingThreshold(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  SWIG_check_num_args("btCollisionShape::getContactBreakingThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::getContactBreakingThreshold",1,"btCollisionShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionShape::getContactBreakingThreshold",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_getContactBreakingThreshold",1,SWIGTYPE_p_btCollisionShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (btScalar)((btCollisionShape const *)arg1)->getContactBreakingThreshold(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_calculateTemporalAabb(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  SWIG_check_num_args("btCollisionShape::calculateTemporalAabb",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::calculateTemporalAabb",1,"btCollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCollisionShape::calculateTemporalAabb",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btCollisionShape::calculateTemporalAabb",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btCollisionShape::calculateTemporalAabb",4,"btVector3 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btCollisionShape::calculateTemporalAabb",5,"btScalar");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btCollisionShape::calculateTemporalAabb",6,"btVector3 &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btCollisionShape::calculateTemporalAabb",7,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_calculateTemporalAabb",1,SWIGTYPE_p_btCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btCollisionShape_calculateTemporalAabb",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCollisionShape_calculateTemporalAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCollisionShape_calculateTemporalAabb",4,SWIGTYPE_p_btVector3);
  }
  
  arg5 = (btScalar)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCollisionShape_calculateTemporalAabb",6,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCollisionShape_calculateTemporalAabb",7,SWIGTYPE_p_btVector3);
  }
  
  ((btCollisionShape const *)arg1)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_isPolyhedral(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionShape::isPolyhedral",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::isPolyhedral",1,"btCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_isPolyhedral",1,SWIGTYPE_p_btCollisionShape);
  }
  
  result = (bool)((btCollisionShape const *)arg1)->isPolyhedral();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_isConvex2d(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionShape::isConvex2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::isConvex2d",1,"btCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_isConvex2d",1,SWIGTYPE_p_btCollisionShape);
  }
  
  result = (bool)((btCollisionShape const *)arg1)->isConvex2d();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_isConvex(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionShape::isConvex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::isConvex",1,"btCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_isConvex",1,SWIGTYPE_p_btCollisionShape);
  }
  
  result = (bool)((btCollisionShape const *)arg1)->isConvex();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_isNonMoving(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionShape::isNonMoving",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::isNonMoving",1,"btCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_isNonMoving",1,SWIGTYPE_p_btCollisionShape);
  }
  
  result = (bool)((btCollisionShape const *)arg1)->isNonMoving();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_isConcave(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionShape::isConcave",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::isConcave",1,"btCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_isConcave",1,SWIGTYPE_p_btCollisionShape);
  }
  
  result = (bool)((btCollisionShape const *)arg1)->isConcave();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_isCompound(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionShape::isCompound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::isCompound",1,"btCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_isCompound",1,SWIGTYPE_p_btCollisionShape);
  }
  
  result = (bool)((btCollisionShape const *)arg1)->isCompound();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_isSoftBody(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionShape::isSoftBody",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::isSoftBody",1,"btCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_isSoftBody",1,SWIGTYPE_p_btCollisionShape);
  }
  
  result = (bool)((btCollisionShape const *)arg1)->isSoftBody();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_isInfinite(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionShape::isInfinite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::isInfinite",1,"btCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_isInfinite",1,SWIGTYPE_p_btCollisionShape);
  }
  
  result = (bool)((btCollisionShape const *)arg1)->isInfinite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_setLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btCollisionShape::setLocalScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::setLocalScaling",1,"btCollisionShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCollisionShape::setLocalScaling",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_setLocalScaling",1,SWIGTYPE_p_btCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCollisionShape_setLocalScaling",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_getLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btCollisionShape::getLocalScaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::getLocalScaling",1,"btCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_getLocalScaling",1,SWIGTYPE_p_btCollisionShape);
  }
  
  result = (btVector3 *) &((btCollisionShape const *)arg1)->getLocalScaling();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_calculateLocalInertia(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btCollisionShape::calculateLocalInertia",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::calculateLocalInertia",1,"btCollisionShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionShape::calculateLocalInertia",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btCollisionShape::calculateLocalInertia",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_calculateLocalInertia",1,SWIGTYPE_p_btCollisionShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCollisionShape_calculateLocalInertia",3,SWIGTYPE_p_btVector3);
  }
  
  ((btCollisionShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_getName(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCollisionShape::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::getName",1,"btCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_getName",1,SWIGTYPE_p_btCollisionShape);
  }
  
  result = (char *)((btCollisionShape const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_getShapeType(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionShape::getShapeType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::getShapeType",1,"btCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_getShapeType",1,SWIGTYPE_p_btCollisionShape);
  }
  
  result = (int)((btCollisionShape const *)arg1)->getShapeType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_getAnisotropicRollingFrictionDirection(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btCollisionShape::getAnisotropicRollingFrictionDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::getAnisotropicRollingFrictionDirection",1,"btCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_getAnisotropicRollingFrictionDirection",1,SWIGTYPE_p_btCollisionShape);
  }
  
  result = ((btCollisionShape const *)arg1)->getAnisotropicRollingFrictionDirection();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_setMargin(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btCollisionShape::setMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::setMargin",1,"btCollisionShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionShape::setMargin",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_setMargin",1,SWIGTYPE_p_btCollisionShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setMargin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_getMargin(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCollisionShape::getMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::getMargin",1,"btCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_getMargin",1,SWIGTYPE_p_btCollisionShape);
  }
  
  result = (btScalar)((btCollisionShape const *)arg1)->getMargin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_setUserPointer(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btCollisionShape::setUserPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::setUserPointer",1,"btCollisionShape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionShape::setUserPointer",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_setUserPointer",1,SWIGTYPE_p_btCollisionShape);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btCollisionShape_setUserPointer");
  (arg1)->setUserPointer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_getUserPointer(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btCollisionShape::getUserPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::getUserPointer",1,"btCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_getUserPointer",1,SWIGTYPE_p_btCollisionShape);
  }
  
  result = (void *)((btCollisionShape const *)arg1)->getUserPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionShape::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::calculateSerializeBufferSize",1,"btCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_calculateSerializeBufferSize",1,SWIGTYPE_p_btCollisionShape);
  }
  
  result = (int)((btCollisionShape const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCollisionShape::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::serialize",1,"btCollisionShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionShape::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCollisionShape::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_serialize",1,SWIGTYPE_p_btCollisionShape);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btCollisionShape_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btCollisionShape_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  result = (char *)((btCollisionShape const *)arg1)->serialize(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShape_serializeSingleShape(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("btCollisionShape::serializeSingleShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShape::serializeSingleShape",1,"btCollisionShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionShape::serializeSingleShape",2,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionShape_serializeSingleShape",1,SWIGTYPE_p_btCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btCollisionShape_serializeSingleShape",2,SWIGTYPE_p_btSerializer);
  }
  
  ((btCollisionShape const *)arg1)->serializeSingleShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCollisionShape(void *obj) {
btCollisionShape *arg1 = (btCollisionShape *) obj;
delete arg1;
}
static swig_lua_method swig_btCollisionShape_methods[] = {
    {"getAabb", _wrap_btCollisionShape_getAabb}, 
    {"getBoundingSphere", _wrap_btCollisionShape_getBoundingSphere}, 
    {"getAngularMotionDisc", _wrap_btCollisionShape_getAngularMotionDisc}, 
    {"getContactBreakingThreshold", _wrap_btCollisionShape_getContactBreakingThreshold}, 
    {"calculateTemporalAabb", _wrap_btCollisionShape_calculateTemporalAabb}, 
    {"isPolyhedral", _wrap_btCollisionShape_isPolyhedral}, 
    {"isConvex2d", _wrap_btCollisionShape_isConvex2d}, 
    {"isConvex", _wrap_btCollisionShape_isConvex}, 
    {"isNonMoving", _wrap_btCollisionShape_isNonMoving}, 
    {"isConcave", _wrap_btCollisionShape_isConcave}, 
    {"isCompound", _wrap_btCollisionShape_isCompound}, 
    {"isSoftBody", _wrap_btCollisionShape_isSoftBody}, 
    {"isInfinite", _wrap_btCollisionShape_isInfinite}, 
    {"setLocalScaling", _wrap_btCollisionShape_setLocalScaling}, 
    {"getLocalScaling", _wrap_btCollisionShape_getLocalScaling}, 
    {"calculateLocalInertia", _wrap_btCollisionShape_calculateLocalInertia}, 
    {"getName", _wrap_btCollisionShape_getName}, 
    {"getShapeType", _wrap_btCollisionShape_getShapeType}, 
    {"getAnisotropicRollingFrictionDirection", _wrap_btCollisionShape_getAnisotropicRollingFrictionDirection}, 
    {"setMargin", _wrap_btCollisionShape_setMargin}, 
    {"getMargin", _wrap_btCollisionShape_getMargin}, 
    {"setUserPointer", _wrap_btCollisionShape_setUserPointer}, 
    {"getUserPointer", _wrap_btCollisionShape_getUserPointer}, 
    {"calculateSerializeBufferSize", _wrap_btCollisionShape_calculateSerializeBufferSize}, 
    {"serialize", _wrap_btCollisionShape_serialize}, 
    {"serializeSingleShape", _wrap_btCollisionShape_serializeSingleShape}, 
    {0,0}
};
static swig_lua_attribute swig_btCollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btCollisionShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCollisionShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCollisionShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCollisionShape_bases[] = {0};
static const char *swig_btCollisionShape_base_names[] = {0};
static swig_lua_class _wrap_class_btCollisionShape = { "btCollisionShape", &SWIGTYPE_p_btCollisionShape,0, swig_delete_btCollisionShape, swig_btCollisionShape_methods, swig_btCollisionShape_attributes, { "btCollisionShape", swig_btCollisionShape_cls_methods, swig_btCollisionShape_cls_attributes, swig_btCollisionShape_cls_constants }, swig_btCollisionShape_bases, swig_btCollisionShape_base_names };

static int _wrap_btCollisionShapeData_m_name_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("btCollisionShapeData::m_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShapeData::m_name",1,"btCollisionShapeData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btCollisionShapeData::m_name",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShapeData,0))){
    SWIG_fail_ptr("btCollisionShapeData_m_name_set",1,SWIGTYPE_p_btCollisionShapeData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShapeData_m_name_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCollisionShapeData::m_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShapeData::m_name",1,"btCollisionShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShapeData,0))){
    SWIG_fail_ptr("btCollisionShapeData_m_name_get",1,SWIGTYPE_p_btCollisionShapeData);
  }
  
  result = (char *) ((arg1)->m_name);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShapeData_m_shapeType_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionShapeData::m_shapeType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShapeData::m_shapeType",1,"btCollisionShapeData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionShapeData::m_shapeType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShapeData,0))){
    SWIG_fail_ptr("btCollisionShapeData_m_shapeType_set",1,SWIGTYPE_p_btCollisionShapeData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_shapeType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShapeData_m_shapeType_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionShapeData::m_shapeType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShapeData::m_shapeType",1,"btCollisionShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShapeData,0))){
    SWIG_fail_ptr("btCollisionShapeData_m_shapeType_get",1,SWIGTYPE_p_btCollisionShapeData);
  }
  
  result = (int) ((arg1)->m_shapeType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShapeData_m_padding_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btCollisionShapeData::m_padding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShapeData::m_padding",1,"btCollisionShapeData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btCollisionShapeData::m_padding",2,"char [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShapeData,0))){
    SWIG_fail_ptr("btCollisionShapeData_m_padding_set",1,SWIGTYPE_p_btCollisionShapeData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShapeData_m_padding_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCollisionShapeData::m_padding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShapeData::m_padding",1,"btCollisionShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShapeData,0))){
    SWIG_fail_ptr("btCollisionShapeData_m_padding_get",1,SWIGTYPE_p_btCollisionShapeData);
  }
  
  result = (char *)(char *) ((arg1)->m_padding);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCollisionShapeData(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShapeData *result = 0 ;
  
  SWIG_check_num_args("btCollisionShapeData::btCollisionShapeData",0,0)
  result = (btCollisionShapeData *)new btCollisionShapeData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShapeData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCollisionShapeData(void *obj) {
btCollisionShapeData *arg1 = (btCollisionShapeData *) obj;
delete arg1;
}
static swig_lua_method swig_btCollisionShapeData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btCollisionShapeData_attributes[] = {
    { "m_name", _wrap_btCollisionShapeData_m_name_get, _wrap_btCollisionShapeData_m_name_set},
    { "m_shapeType", _wrap_btCollisionShapeData_m_shapeType_get, _wrap_btCollisionShapeData_m_shapeType_set},
    { "m_padding", _wrap_btCollisionShapeData_m_padding_get, _wrap_btCollisionShapeData_m_padding_set},
    {0,0,0}
};
static swig_lua_attribute swig_btCollisionShapeData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCollisionShapeData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCollisionShapeData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCollisionShapeData_bases[] = {0};
static const char *swig_btCollisionShapeData_base_names[] = {0};
static swig_lua_class _wrap_class_btCollisionShapeData = { "btCollisionShapeData", &SWIGTYPE_p_btCollisionShapeData,_wrap_new_btCollisionShapeData, swig_delete_btCollisionShapeData, swig_btCollisionShapeData_methods, swig_btCollisionShapeData_attributes, { "btCollisionShapeData", swig_btCollisionShapeData_cls_methods, swig_btCollisionShapeData_cls_attributes, swig_btCollisionShapeData_cls_constants }, swig_btCollisionShapeData_bases, swig_btCollisionShapeData_base_names };

static int _wrap_btConvexShape_localGetSupportingVertex(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btConvexShape::localGetSupportingVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexShape::localGetSupportingVertex",1,"btConvexShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexShape::localGetSupportingVertex",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexShape_localGetSupportingVertex",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexShape_localGetSupportingVertex",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btConvexShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexShape_localGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btConvexShape::localGetSupportingVertexWithoutMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexShape::localGetSupportingVertexWithoutMargin",1,"btConvexShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexShape::localGetSupportingVertexWithoutMargin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexShape_localGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexShape_localGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btConvexShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexShape_localGetSupportVertexWithoutMarginNonVirtual(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btConvexShape::localGetSupportVertexWithoutMarginNonVirtual",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexShape::localGetSupportVertexWithoutMarginNonVirtual",1,"btConvexShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexShape::localGetSupportVertexWithoutMarginNonVirtual",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexShape_localGetSupportVertexWithoutMarginNonVirtual",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexShape_localGetSupportVertexWithoutMarginNonVirtual",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btConvexShape const *)arg1)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexShape_localGetSupportVertexNonVirtual(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btConvexShape::localGetSupportVertexNonVirtual",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexShape::localGetSupportVertexNonVirtual",1,"btConvexShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexShape::localGetSupportVertexNonVirtual",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexShape_localGetSupportVertexNonVirtual",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexShape_localGetSupportVertexNonVirtual",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btConvexShape const *)arg1)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexShape_getMarginNonVirtual(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConvexShape::getMarginNonVirtual",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexShape::getMarginNonVirtual",1,"btConvexShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexShape_getMarginNonVirtual",1,SWIGTYPE_p_btConvexShape);
  }
  
  result = (btScalar)((btConvexShape const *)arg1)->getMarginNonVirtual();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexShape_getAabbNonVirtual(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btConvexShape::getAabbNonVirtual",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexShape::getAabbNonVirtual",1,"btConvexShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexShape::getAabbNonVirtual",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btConvexShape::getAabbNonVirtual",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btConvexShape::getAabbNonVirtual",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexShape_getAabbNonVirtual",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btConvexShape_getAabbNonVirtual",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexShape_getAabbNonVirtual",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexShape_getAabbNonVirtual",4,SWIGTYPE_p_btVector3);
  }
  
  ((btConvexShape const *)arg1)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexShape_project(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  SWIG_check_num_args("btConvexShape::project",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexShape::project",1,"btConvexShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexShape::project",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btConvexShape::project",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btConvexShape::project",4,"btScalar &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btConvexShape::project",5,"btScalar &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexShape_project",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btConvexShape_project",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexShape_project",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btConvexShape_project",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btConvexShape_project",5,SWIGTYPE_p_float);
  }
  
  ((btConvexShape const *)arg1)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btConvexShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexShape::batchedUnitVectorGetSupportingVertexWithoutMargin",1,"btConvexShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConvexShape::batchedUnitVectorGetSupportingVertexWithoutMargin",2,"btVector3 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btConvexShape::batchedUnitVectorGetSupportingVertexWithoutMargin",3,"btVector3 *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btConvexShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btConvexShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexShape_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btConvexShape::getAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexShape::getAabb",1,"btConvexShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexShape::getAabb",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btConvexShape::getAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btConvexShape::getAabb",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexShape_getAabb",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btConvexShape_getAabb",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexShape_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexShape_getAabb",4,SWIGTYPE_p_btVector3);
  }
  
  ((btConvexShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexShape_getAabbSlow(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btConvexShape::getAabbSlow",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexShape::getAabbSlow",1,"btConvexShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexShape::getAabbSlow",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btConvexShape::getAabbSlow",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btConvexShape::getAabbSlow",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexShape_getAabbSlow",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btConvexShape_getAabbSlow",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexShape_getAabbSlow",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexShape_getAabbSlow",4,SWIGTYPE_p_btVector3);
  }
  
  ((btConvexShape const *)arg1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexShape_setLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btConvexShape::setLocalScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexShape::setLocalScaling",1,"btConvexShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexShape::setLocalScaling",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexShape_setLocalScaling",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexShape_setLocalScaling",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexShape_getLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btConvexShape::getLocalScaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexShape::getLocalScaling",1,"btConvexShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexShape_getLocalScaling",1,SWIGTYPE_p_btConvexShape);
  }
  
  result = (btVector3 *) &((btConvexShape const *)arg1)->getLocalScaling();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexShape_setMargin(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btConvexShape::setMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexShape::setMargin",1,"btConvexShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConvexShape::setMargin",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexShape_setMargin",1,SWIGTYPE_p_btConvexShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setMargin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexShape_getMargin(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConvexShape::getMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexShape::getMargin",1,"btConvexShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexShape_getMargin",1,SWIGTYPE_p_btConvexShape);
  }
  
  result = (btScalar)((btConvexShape const *)arg1)->getMargin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexShape_getNumPreferredPenetrationDirections(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btConvexShape::getNumPreferredPenetrationDirections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexShape::getNumPreferredPenetrationDirections",1,"btConvexShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexShape_getNumPreferredPenetrationDirections",1,SWIGTYPE_p_btConvexShape);
  }
  
  result = (int)((btConvexShape const *)arg1)->getNumPreferredPenetrationDirections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexShape_getPreferredPenetrationDirection(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btConvexShape::getPreferredPenetrationDirection",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexShape::getPreferredPenetrationDirection",1,"btConvexShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConvexShape::getPreferredPenetrationDirection",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btConvexShape::getPreferredPenetrationDirection",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexShape_getPreferredPenetrationDirection",1,SWIGTYPE_p_btConvexShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexShape_getPreferredPenetrationDirection",3,SWIGTYPE_p_btVector3);
  }
  
  ((btConvexShape const *)arg1)->getPreferredPenetrationDirection(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConvexShape(void *obj) {
btConvexShape *arg1 = (btConvexShape *) obj;
delete arg1;
}
static swig_lua_method swig_btConvexShape_methods[] = {
    {"localGetSupportingVertex", _wrap_btConvexShape_localGetSupportingVertex}, 
    {"localGetSupportingVertexWithoutMargin", _wrap_btConvexShape_localGetSupportingVertexWithoutMargin}, 
    {"localGetSupportVertexWithoutMarginNonVirtual", _wrap_btConvexShape_localGetSupportVertexWithoutMarginNonVirtual}, 
    {"localGetSupportVertexNonVirtual", _wrap_btConvexShape_localGetSupportVertexNonVirtual}, 
    {"getMarginNonVirtual", _wrap_btConvexShape_getMarginNonVirtual}, 
    {"getAabbNonVirtual", _wrap_btConvexShape_getAabbNonVirtual}, 
    {"project", _wrap_btConvexShape_project}, 
    {"batchedUnitVectorGetSupportingVertexWithoutMargin", _wrap_btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin}, 
    {"getAabb", _wrap_btConvexShape_getAabb}, 
    {"getAabbSlow", _wrap_btConvexShape_getAabbSlow}, 
    {"setLocalScaling", _wrap_btConvexShape_setLocalScaling}, 
    {"getLocalScaling", _wrap_btConvexShape_getLocalScaling}, 
    {"setMargin", _wrap_btConvexShape_setMargin}, 
    {"getMargin", _wrap_btConvexShape_getMargin}, 
    {"getNumPreferredPenetrationDirections", _wrap_btConvexShape_getNumPreferredPenetrationDirections}, 
    {"getPreferredPenetrationDirection", _wrap_btConvexShape_getPreferredPenetrationDirection}, 
    {0,0}
};
static swig_lua_attribute swig_btConvexShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btConvexShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConvexShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConvexShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConvexShape_bases[] = {0,0};
static const char *swig_btConvexShape_base_names[] = {"btCollisionShape *",0};
static swig_lua_class _wrap_class_btConvexShape = { "btConvexShape", &SWIGTYPE_p_btConvexShape,0, swig_delete_btConvexShape, swig_btConvexShape_methods, swig_btConvexShape_attributes, { "btConvexShape", swig_btConvexShape_cls_methods, swig_btConvexShape_cls_attributes, swig_btConvexShape_cls_constants }, swig_btConvexShape_bases, swig_btConvexShape_base_names };

static int _wrap_btConvexInternalShape_localGetSupportingVertex(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btConvexInternalShape::localGetSupportingVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::localGetSupportingVertex",1,"btConvexInternalShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexInternalShape::localGetSupportingVertex",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_localGetSupportingVertex",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexInternalShape_localGetSupportingVertex",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btConvexInternalShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_getImplicitShapeDimensions(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btConvexInternalShape::getImplicitShapeDimensions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::getImplicitShapeDimensions",1,"btConvexInternalShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_getImplicitShapeDimensions",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  result = (btVector3 *) &((btConvexInternalShape const *)arg1)->getImplicitShapeDimensions();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_setImplicitShapeDimensions(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btConvexInternalShape::setImplicitShapeDimensions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::setImplicitShapeDimensions",1,"btConvexInternalShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexInternalShape::setImplicitShapeDimensions",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_setImplicitShapeDimensions",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexInternalShape_setImplicitShapeDimensions",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setImplicitShapeDimensions((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_setSafeMargin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btConvexInternalShape::setSafeMargin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::setSafeMargin",1,"btConvexInternalShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConvexInternalShape::setSafeMargin",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btConvexInternalShape::setSafeMargin",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_setSafeMargin",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->setSafeMargin(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_setSafeMargin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btConvexInternalShape::setSafeMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::setSafeMargin",1,"btConvexInternalShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConvexInternalShape::setSafeMargin",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_setSafeMargin",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setSafeMargin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_setSafeMargin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btConvexInternalShape::setSafeMargin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::setSafeMargin",1,"btConvexInternalShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexInternalShape::setSafeMargin",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btConvexInternalShape::setSafeMargin",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_setSafeMargin",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexInternalShape_setSafeMargin",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->setSafeMargin((btVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_setSafeMargin__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btConvexInternalShape::setSafeMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::setSafeMargin",1,"btConvexInternalShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexInternalShape::setSafeMargin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_setSafeMargin",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexInternalShape_setSafeMargin",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setSafeMargin((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_setSafeMargin(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btConvexInternalShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btConvexInternalShape_setSafeMargin__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btConvexInternalShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btConvexInternalShape_setSafeMargin__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btConvexInternalShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btConvexInternalShape_setSafeMargin__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btConvexInternalShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btConvexInternalShape_setSafeMargin__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btConvexInternalShape_setSafeMargin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btConvexInternalShape::setSafeMargin(btScalar,btScalar)\n"
    "    btConvexInternalShape::setSafeMargin(btScalar)\n"
    "    btConvexInternalShape::setSafeMargin(btVector3 const &,btScalar)\n"
    "    btConvexInternalShape::setSafeMargin(btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btConvexInternalShape_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btConvexInternalShape::getAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::getAabb",1,"btConvexInternalShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexInternalShape::getAabb",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btConvexInternalShape::getAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btConvexInternalShape::getAabb",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_getAabb",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btConvexInternalShape_getAabb",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexInternalShape_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexInternalShape_getAabb",4,SWIGTYPE_p_btVector3);
  }
  
  ((btConvexInternalShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_getAabbSlow(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btConvexInternalShape::getAabbSlow",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::getAabbSlow",1,"btConvexInternalShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexInternalShape::getAabbSlow",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btConvexInternalShape::getAabbSlow",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btConvexInternalShape::getAabbSlow",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_getAabbSlow",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btConvexInternalShape_getAabbSlow",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexInternalShape_getAabbSlow",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexInternalShape_getAabbSlow",4,SWIGTYPE_p_btVector3);
  }
  
  ((btConvexInternalShape const *)arg1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_setLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btConvexInternalShape::setLocalScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::setLocalScaling",1,"btConvexInternalShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexInternalShape::setLocalScaling",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_setLocalScaling",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexInternalShape_setLocalScaling",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_getLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btConvexInternalShape::getLocalScaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::getLocalScaling",1,"btConvexInternalShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_getLocalScaling",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  result = (btVector3 *) &((btConvexInternalShape const *)arg1)->getLocalScaling();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_getLocalScalingNV(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btConvexInternalShape::getLocalScalingNV",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::getLocalScalingNV",1,"btConvexInternalShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_getLocalScalingNV",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  result = (btVector3 *) &((btConvexInternalShape const *)arg1)->getLocalScalingNV();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_setMargin(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btConvexInternalShape::setMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::setMargin",1,"btConvexInternalShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConvexInternalShape::setMargin",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_setMargin",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setMargin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_getMargin(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConvexInternalShape::getMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::getMargin",1,"btConvexInternalShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_getMargin",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  result = (btScalar)((btConvexInternalShape const *)arg1)->getMargin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_getMarginNV(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConvexInternalShape::getMarginNV",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::getMarginNV",1,"btConvexInternalShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_getMarginNV",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  result = (btScalar)((btConvexInternalShape const *)arg1)->getMarginNV();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_getNumPreferredPenetrationDirections(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btConvexInternalShape::getNumPreferredPenetrationDirections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::getNumPreferredPenetrationDirections",1,"btConvexInternalShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_getNumPreferredPenetrationDirections",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  result = (int)((btConvexInternalShape const *)arg1)->getNumPreferredPenetrationDirections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_getPreferredPenetrationDirection(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btConvexInternalShape::getPreferredPenetrationDirection",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::getPreferredPenetrationDirection",1,"btConvexInternalShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConvexInternalShape::getPreferredPenetrationDirection",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btConvexInternalShape::getPreferredPenetrationDirection",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_getPreferredPenetrationDirection",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexInternalShape_getPreferredPenetrationDirection",3,SWIGTYPE_p_btVector3);
  }
  
  ((btConvexInternalShape const *)arg1)->getPreferredPenetrationDirection(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btConvexInternalShape::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::calculateSerializeBufferSize",1,"btConvexInternalShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_calculateSerializeBufferSize",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  result = (int)((btConvexInternalShape const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShape_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btConvexInternalShape::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShape::serialize",1,"btConvexInternalShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConvexInternalShape::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btConvexInternalShape::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShape,0))){
    SWIG_fail_ptr("btConvexInternalShape_serialize",1,SWIGTYPE_p_btConvexInternalShape);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btConvexInternalShape_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btConvexInternalShape_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  result = (char *)((btConvexInternalShape const *)arg1)->serialize(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConvexInternalShape(void *obj) {
btConvexInternalShape *arg1 = (btConvexInternalShape *) obj;
delete arg1;
}
static swig_lua_method swig_btConvexInternalShape_methods[] = {
    {"localGetSupportingVertex", _wrap_btConvexInternalShape_localGetSupportingVertex}, 
    {"getImplicitShapeDimensions", _wrap_btConvexInternalShape_getImplicitShapeDimensions}, 
    {"setImplicitShapeDimensions", _wrap_btConvexInternalShape_setImplicitShapeDimensions}, 
    {"setSafeMargin", _wrap_btConvexInternalShape_setSafeMargin}, 
    {"getAabb", _wrap_btConvexInternalShape_getAabb}, 
    {"getAabbSlow", _wrap_btConvexInternalShape_getAabbSlow}, 
    {"setLocalScaling", _wrap_btConvexInternalShape_setLocalScaling}, 
    {"getLocalScaling", _wrap_btConvexInternalShape_getLocalScaling}, 
    {"getLocalScalingNV", _wrap_btConvexInternalShape_getLocalScalingNV}, 
    {"setMargin", _wrap_btConvexInternalShape_setMargin}, 
    {"getMargin", _wrap_btConvexInternalShape_getMargin}, 
    {"getMarginNV", _wrap_btConvexInternalShape_getMarginNV}, 
    {"getNumPreferredPenetrationDirections", _wrap_btConvexInternalShape_getNumPreferredPenetrationDirections}, 
    {"getPreferredPenetrationDirection", _wrap_btConvexInternalShape_getPreferredPenetrationDirection}, 
    {"calculateSerializeBufferSize", _wrap_btConvexInternalShape_calculateSerializeBufferSize}, 
    {"serialize", _wrap_btConvexInternalShape_serialize}, 
    {0,0}
};
static swig_lua_attribute swig_btConvexInternalShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btConvexInternalShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConvexInternalShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConvexInternalShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConvexInternalShape_bases[] = {0,0};
static const char *swig_btConvexInternalShape_base_names[] = {"btConvexShape *",0};
static swig_lua_class _wrap_class_btConvexInternalShape = { "btConvexInternalShape", &SWIGTYPE_p_btConvexInternalShape,0, swig_delete_btConvexInternalShape, swig_btConvexInternalShape_methods, swig_btConvexInternalShape_attributes, { "btConvexInternalShape", swig_btConvexInternalShape_cls_methods, swig_btConvexInternalShape_cls_attributes, swig_btConvexInternalShape_cls_constants }, swig_btConvexInternalShape_bases, swig_btConvexInternalShape_base_names };

static int _wrap_btConvexInternalShapeData_m_collisionShapeData_set(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  SWIG_check_num_args("btConvexInternalShapeData::m_collisionShapeData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShapeData::m_collisionShapeData",1,"btConvexInternalShapeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConvexInternalShapeData::m_collisionShapeData",2,"btCollisionShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShapeData,0))){
    SWIG_fail_ptr("btConvexInternalShapeData_m_collisionShapeData_set",1,SWIGTYPE_p_btConvexInternalShapeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionShapeData,0))){
    SWIG_fail_ptr("btConvexInternalShapeData_m_collisionShapeData_set",2,SWIGTYPE_p_btCollisionShapeData);
  }
  
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShapeData_m_collisionShapeData_get(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  SWIG_check_num_args("btConvexInternalShapeData::m_collisionShapeData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShapeData::m_collisionShapeData",1,"btConvexInternalShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShapeData,0))){
    SWIG_fail_ptr("btConvexInternalShapeData_m_collisionShapeData_get",1,SWIGTYPE_p_btConvexInternalShapeData);
  }
  
  result = (btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShapeData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShapeData_m_localScaling_set(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btConvexInternalShapeData::m_localScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShapeData::m_localScaling",1,"btConvexInternalShapeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConvexInternalShapeData::m_localScaling",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShapeData,0))){
    SWIG_fail_ptr("btConvexInternalShapeData_m_localScaling_set",1,SWIGTYPE_p_btConvexInternalShapeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btConvexInternalShapeData_m_localScaling_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_localScaling = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShapeData_m_localScaling_get(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btConvexInternalShapeData::m_localScaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShapeData::m_localScaling",1,"btConvexInternalShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShapeData,0))){
    SWIG_fail_ptr("btConvexInternalShapeData_m_localScaling_get",1,SWIGTYPE_p_btConvexInternalShapeData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_localScaling);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShapeData_m_implicitShapeDimensions_set(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btConvexInternalShapeData::m_implicitShapeDimensions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShapeData::m_implicitShapeDimensions",1,"btConvexInternalShapeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConvexInternalShapeData::m_implicitShapeDimensions",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShapeData,0))){
    SWIG_fail_ptr("btConvexInternalShapeData_m_implicitShapeDimensions_set",1,SWIGTYPE_p_btConvexInternalShapeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btConvexInternalShapeData_m_implicitShapeDimensions_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_implicitShapeDimensions = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShapeData_m_implicitShapeDimensions_get(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btConvexInternalShapeData::m_implicitShapeDimensions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShapeData::m_implicitShapeDimensions",1,"btConvexInternalShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShapeData,0))){
    SWIG_fail_ptr("btConvexInternalShapeData_m_implicitShapeDimensions_get",1,SWIGTYPE_p_btConvexInternalShapeData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_implicitShapeDimensions);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShapeData_m_collisionMargin_set(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btConvexInternalShapeData::m_collisionMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShapeData::m_collisionMargin",1,"btConvexInternalShapeData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConvexInternalShapeData::m_collisionMargin",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShapeData,0))){
    SWIG_fail_ptr("btConvexInternalShapeData_m_collisionMargin_set",1,SWIGTYPE_p_btConvexInternalShapeData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_collisionMargin = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShapeData_m_collisionMargin_get(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  float result;
  
  SWIG_check_num_args("btConvexInternalShapeData::m_collisionMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShapeData::m_collisionMargin",1,"btConvexInternalShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShapeData,0))){
    SWIG_fail_ptr("btConvexInternalShapeData_m_collisionMargin_get",1,SWIGTYPE_p_btConvexInternalShapeData);
  }
  
  result = (float) ((arg1)->m_collisionMargin);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShapeData_m_padding_set(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btConvexInternalShapeData::m_padding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShapeData::m_padding",1,"btConvexInternalShapeData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConvexInternalShapeData::m_padding",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShapeData,0))){
    SWIG_fail_ptr("btConvexInternalShapeData_m_padding_set",1,SWIGTYPE_p_btConvexInternalShapeData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_padding = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalShapeData_m_padding_get(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  int result;
  
  SWIG_check_num_args("btConvexInternalShapeData::m_padding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalShapeData::m_padding",1,"btConvexInternalShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalShapeData,0))){
    SWIG_fail_ptr("btConvexInternalShapeData_m_padding_get",1,SWIGTYPE_p_btConvexInternalShapeData);
  }
  
  result = (int) ((arg1)->m_padding);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btConvexInternalShapeData(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalShapeData *result = 0 ;
  
  SWIG_check_num_args("btConvexInternalShapeData::btConvexInternalShapeData",0,0)
  result = (btConvexInternalShapeData *)new btConvexInternalShapeData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexInternalShapeData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConvexInternalShapeData(void *obj) {
btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) obj;
delete arg1;
}
static swig_lua_method swig_btConvexInternalShapeData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btConvexInternalShapeData_attributes[] = {
    { "m_collisionShapeData", _wrap_btConvexInternalShapeData_m_collisionShapeData_get, _wrap_btConvexInternalShapeData_m_collisionShapeData_set},
    { "m_localScaling", _wrap_btConvexInternalShapeData_m_localScaling_get, _wrap_btConvexInternalShapeData_m_localScaling_set},
    { "m_implicitShapeDimensions", _wrap_btConvexInternalShapeData_m_implicitShapeDimensions_get, _wrap_btConvexInternalShapeData_m_implicitShapeDimensions_set},
    { "m_collisionMargin", _wrap_btConvexInternalShapeData_m_collisionMargin_get, _wrap_btConvexInternalShapeData_m_collisionMargin_set},
    { "m_padding", _wrap_btConvexInternalShapeData_m_padding_get, _wrap_btConvexInternalShapeData_m_padding_set},
    {0,0,0}
};
static swig_lua_attribute swig_btConvexInternalShapeData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConvexInternalShapeData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConvexInternalShapeData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConvexInternalShapeData_bases[] = {0};
static const char *swig_btConvexInternalShapeData_base_names[] = {0};
static swig_lua_class _wrap_class_btConvexInternalShapeData = { "btConvexInternalShapeData", &SWIGTYPE_p_btConvexInternalShapeData,_wrap_new_btConvexInternalShapeData, swig_delete_btConvexInternalShapeData, swig_btConvexInternalShapeData_methods, swig_btConvexInternalShapeData_attributes, { "btConvexInternalShapeData", swig_btConvexInternalShapeData_cls_methods, swig_btConvexInternalShapeData_cls_attributes, swig_btConvexInternalShapeData_cls_constants }, swig_btConvexInternalShapeData_bases, swig_btConvexInternalShapeData_base_names };

static int _wrap_btConvexInternalAabbCachingShape_setLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btConvexInternalAabbCachingShape::setLocalScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalAabbCachingShape::setLocalScaling",1,"btConvexInternalAabbCachingShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexInternalAabbCachingShape::setLocalScaling",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalAabbCachingShape,0))){
    SWIG_fail_ptr("btConvexInternalAabbCachingShape_setLocalScaling",1,SWIGTYPE_p_btConvexInternalAabbCachingShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexInternalAabbCachingShape_setLocalScaling",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalAabbCachingShape_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btConvexInternalAabbCachingShape::getAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalAabbCachingShape::getAabb",1,"btConvexInternalAabbCachingShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexInternalAabbCachingShape::getAabb",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btConvexInternalAabbCachingShape::getAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btConvexInternalAabbCachingShape::getAabb",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalAabbCachingShape,0))){
    SWIG_fail_ptr("btConvexInternalAabbCachingShape_getAabb",1,SWIGTYPE_p_btConvexInternalAabbCachingShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btConvexInternalAabbCachingShape_getAabb",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexInternalAabbCachingShape_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexInternalAabbCachingShape_getAabb",4,SWIGTYPE_p_btVector3);
  }
  
  ((btConvexInternalAabbCachingShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexInternalAabbCachingShape_recalcLocalAabb(lua_State* L) {
  int SWIG_arg = 0;
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  
  SWIG_check_num_args("btConvexInternalAabbCachingShape::recalcLocalAabb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexInternalAabbCachingShape::recalcLocalAabb",1,"btConvexInternalAabbCachingShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexInternalAabbCachingShape,0))){
    SWIG_fail_ptr("btConvexInternalAabbCachingShape_recalcLocalAabb",1,SWIGTYPE_p_btConvexInternalAabbCachingShape);
  }
  
  (arg1)->recalcLocalAabb();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConvexInternalAabbCachingShape(void *obj) {
btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) obj;
delete arg1;
}
static swig_lua_method swig_btConvexInternalAabbCachingShape_methods[] = {
    {"setLocalScaling", _wrap_btConvexInternalAabbCachingShape_setLocalScaling}, 
    {"getAabb", _wrap_btConvexInternalAabbCachingShape_getAabb}, 
    {"recalcLocalAabb", _wrap_btConvexInternalAabbCachingShape_recalcLocalAabb}, 
    {0,0}
};
static swig_lua_attribute swig_btConvexInternalAabbCachingShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btConvexInternalAabbCachingShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConvexInternalAabbCachingShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConvexInternalAabbCachingShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConvexInternalAabbCachingShape_bases[] = {0,0};
static const char *swig_btConvexInternalAabbCachingShape_base_names[] = {"btConvexInternalShape *",0};
static swig_lua_class _wrap_class_btConvexInternalAabbCachingShape = { "btConvexInternalAabbCachingShape", &SWIGTYPE_p_btConvexInternalAabbCachingShape,0, swig_delete_btConvexInternalAabbCachingShape, swig_btConvexInternalAabbCachingShape_methods, swig_btConvexInternalAabbCachingShape_attributes, { "btConvexInternalAabbCachingShape", swig_btConvexInternalAabbCachingShape_cls_methods, swig_btConvexInternalAabbCachingShape_cls_attributes, swig_btConvexInternalAabbCachingShape_cls_constants }, swig_btConvexInternalAabbCachingShape_bases, swig_btConvexInternalAabbCachingShape_base_names };

static int _wrap_btPolyhedralConvexShape_initializePolyhedralFeatures__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("btPolyhedralConvexShape::initializePolyhedralFeatures",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPolyhedralConvexShape::initializePolyhedralFeatures",1,"btPolyhedralConvexShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPolyhedralConvexShape::initializePolyhedralFeatures",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPolyhedralConvexShape,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_initializePolyhedralFeatures",1,SWIGTYPE_p_btPolyhedralConvexShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->initializePolyhedralFeatures(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPolyhedralConvexShape_initializePolyhedralFeatures__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  bool result;
  
  SWIG_check_num_args("btPolyhedralConvexShape::initializePolyhedralFeatures",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPolyhedralConvexShape::initializePolyhedralFeatures",1,"btPolyhedralConvexShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPolyhedralConvexShape,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_initializePolyhedralFeatures",1,SWIGTYPE_p_btPolyhedralConvexShape);
  }
  
  result = (bool)(arg1)->initializePolyhedralFeatures();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPolyhedralConvexShape_initializePolyhedralFeatures(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btPolyhedralConvexShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btPolyhedralConvexShape_initializePolyhedralFeatures__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btPolyhedralConvexShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btPolyhedralConvexShape_initializePolyhedralFeatures__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btPolyhedralConvexShape_initializePolyhedralFeatures'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btPolyhedralConvexShape::initializePolyhedralFeatures(int)\n"
    "    btPolyhedralConvexShape::initializePolyhedralFeatures()\n");
  lua_error(L);return 0;
}


static int _wrap_btPolyhedralConvexShape_getConvexPolyhedron(lua_State* L) {
  int SWIG_arg = 0;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btConvexPolyhedron *result = 0 ;
  
  SWIG_check_num_args("btPolyhedralConvexShape::getConvexPolyhedron",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPolyhedralConvexShape::getConvexPolyhedron",1,"btPolyhedralConvexShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPolyhedralConvexShape,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_getConvexPolyhedron",1,SWIGTYPE_p_btPolyhedralConvexShape);
  }
  
  result = (btConvexPolyhedron *)((btPolyhedralConvexShape const *)arg1)->getConvexPolyhedron();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexPolyhedron,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPolyhedralConvexShape_localGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btPolyhedralConvexShape::localGetSupportingVertexWithoutMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPolyhedralConvexShape::localGetSupportingVertexWithoutMargin",1,"btPolyhedralConvexShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPolyhedralConvexShape::localGetSupportingVertexWithoutMargin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPolyhedralConvexShape,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_localGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btPolyhedralConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_localGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btPolyhedralConvexShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btPolyhedralConvexShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPolyhedralConvexShape::batchedUnitVectorGetSupportingVertexWithoutMargin",1,"btPolyhedralConvexShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPolyhedralConvexShape::batchedUnitVectorGetSupportingVertexWithoutMargin",2,"btVector3 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btPolyhedralConvexShape::batchedUnitVectorGetSupportingVertexWithoutMargin",3,"btVector3 *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btPolyhedralConvexShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPolyhedralConvexShape,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btPolyhedralConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btPolyhedralConvexShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPolyhedralConvexShape_calculateLocalInertia(lua_State* L) {
  int SWIG_arg = 0;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btPolyhedralConvexShape::calculateLocalInertia",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPolyhedralConvexShape::calculateLocalInertia",1,"btPolyhedralConvexShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPolyhedralConvexShape::calculateLocalInertia",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btPolyhedralConvexShape::calculateLocalInertia",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPolyhedralConvexShape,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_calculateLocalInertia",1,SWIGTYPE_p_btPolyhedralConvexShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_calculateLocalInertia",3,SWIGTYPE_p_btVector3);
  }
  
  ((btPolyhedralConvexShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPolyhedralConvexShape_getNumVertices(lua_State* L) {
  int SWIG_arg = 0;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btPolyhedralConvexShape::getNumVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPolyhedralConvexShape::getNumVertices",1,"btPolyhedralConvexShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPolyhedralConvexShape,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_getNumVertices",1,SWIGTYPE_p_btPolyhedralConvexShape);
  }
  
  result = (int)((btPolyhedralConvexShape const *)arg1)->getNumVertices();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPolyhedralConvexShape_getNumEdges(lua_State* L) {
  int SWIG_arg = 0;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btPolyhedralConvexShape::getNumEdges",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPolyhedralConvexShape::getNumEdges",1,"btPolyhedralConvexShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPolyhedralConvexShape,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_getNumEdges",1,SWIGTYPE_p_btPolyhedralConvexShape);
  }
  
  result = (int)((btPolyhedralConvexShape const *)arg1)->getNumEdges();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPolyhedralConvexShape_getEdge(lua_State* L) {
  int SWIG_arg = 0;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btPolyhedralConvexShape::getEdge",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPolyhedralConvexShape::getEdge",1,"btPolyhedralConvexShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPolyhedralConvexShape::getEdge",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btPolyhedralConvexShape::getEdge",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btPolyhedralConvexShape::getEdge",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPolyhedralConvexShape,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_getEdge",1,SWIGTYPE_p_btPolyhedralConvexShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_getEdge",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_getEdge",4,SWIGTYPE_p_btVector3);
  }
  
  ((btPolyhedralConvexShape const *)arg1)->getEdge(arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPolyhedralConvexShape_getVertex(lua_State* L) {
  int SWIG_arg = 0;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btPolyhedralConvexShape::getVertex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPolyhedralConvexShape::getVertex",1,"btPolyhedralConvexShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPolyhedralConvexShape::getVertex",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btPolyhedralConvexShape::getVertex",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPolyhedralConvexShape,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_getVertex",1,SWIGTYPE_p_btPolyhedralConvexShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_getVertex",3,SWIGTYPE_p_btVector3);
  }
  
  ((btPolyhedralConvexShape const *)arg1)->getVertex(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPolyhedralConvexShape_getNumPlanes(lua_State* L) {
  int SWIG_arg = 0;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btPolyhedralConvexShape::getNumPlanes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPolyhedralConvexShape::getNumPlanes",1,"btPolyhedralConvexShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPolyhedralConvexShape,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_getNumPlanes",1,SWIGTYPE_p_btPolyhedralConvexShape);
  }
  
  result = (int)((btPolyhedralConvexShape const *)arg1)->getNumPlanes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPolyhedralConvexShape_getPlane(lua_State* L) {
  int SWIG_arg = 0;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btPolyhedralConvexShape::getPlane",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPolyhedralConvexShape::getPlane",1,"btPolyhedralConvexShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPolyhedralConvexShape::getPlane",2,"btVector3 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btPolyhedralConvexShape::getPlane",3,"btVector3 &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btPolyhedralConvexShape::getPlane",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPolyhedralConvexShape,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_getPlane",1,SWIGTYPE_p_btPolyhedralConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_getPlane",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_getPlane",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btPolyhedralConvexShape const *)arg1)->getPlane(*arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPolyhedralConvexShape_isInside(lua_State* L) {
  int SWIG_arg = 0;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  SWIG_check_num_args("btPolyhedralConvexShape::isInside",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPolyhedralConvexShape::isInside",1,"btPolyhedralConvexShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPolyhedralConvexShape::isInside",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btPolyhedralConvexShape::isInside",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPolyhedralConvexShape,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_isInside",1,SWIGTYPE_p_btPolyhedralConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPolyhedralConvexShape_isInside",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  result = (bool)((btPolyhedralConvexShape const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btPolyhedralConvexShape(void *obj) {
btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) obj;
delete arg1;
}
static swig_lua_method swig_btPolyhedralConvexShape_methods[] = {
    {"initializePolyhedralFeatures", _wrap_btPolyhedralConvexShape_initializePolyhedralFeatures}, 
    {"getConvexPolyhedron", _wrap_btPolyhedralConvexShape_getConvexPolyhedron}, 
    {"localGetSupportingVertexWithoutMargin", _wrap_btPolyhedralConvexShape_localGetSupportingVertexWithoutMargin}, 
    {"batchedUnitVectorGetSupportingVertexWithoutMargin", _wrap_btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin}, 
    {"calculateLocalInertia", _wrap_btPolyhedralConvexShape_calculateLocalInertia}, 
    {"getNumVertices", _wrap_btPolyhedralConvexShape_getNumVertices}, 
    {"getNumEdges", _wrap_btPolyhedralConvexShape_getNumEdges}, 
    {"getEdge", _wrap_btPolyhedralConvexShape_getEdge}, 
    {"getVertex", _wrap_btPolyhedralConvexShape_getVertex}, 
    {"getNumPlanes", _wrap_btPolyhedralConvexShape_getNumPlanes}, 
    {"getPlane", _wrap_btPolyhedralConvexShape_getPlane}, 
    {"isInside", _wrap_btPolyhedralConvexShape_isInside}, 
    {0,0}
};
static swig_lua_attribute swig_btPolyhedralConvexShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btPolyhedralConvexShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btPolyhedralConvexShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btPolyhedralConvexShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btPolyhedralConvexShape_bases[] = {0,0};
static const char *swig_btPolyhedralConvexShape_base_names[] = {"btConvexInternalShape *",0};
static swig_lua_class _wrap_class_btPolyhedralConvexShape = { "btPolyhedralConvexShape", &SWIGTYPE_p_btPolyhedralConvexShape,0, swig_delete_btPolyhedralConvexShape, swig_btPolyhedralConvexShape_methods, swig_btPolyhedralConvexShape_attributes, { "btPolyhedralConvexShape", swig_btPolyhedralConvexShape_cls_methods, swig_btPolyhedralConvexShape_cls_attributes, swig_btPolyhedralConvexShape_cls_constants }, swig_btPolyhedralConvexShape_bases, swig_btPolyhedralConvexShape_base_names };

static int _wrap_btPolyhedralConvexAabbCachingShape_getNonvirtualAabb(lua_State* L) {
  int SWIG_arg = 0;
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  
  SWIG_check_num_args("btPolyhedralConvexAabbCachingShape::getNonvirtualAabb",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPolyhedralConvexAabbCachingShape::getNonvirtualAabb",1,"btPolyhedralConvexAabbCachingShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPolyhedralConvexAabbCachingShape::getNonvirtualAabb",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btPolyhedralConvexAabbCachingShape::getNonvirtualAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btPolyhedralConvexAabbCachingShape::getNonvirtualAabb",4,"btVector3 &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btPolyhedralConvexAabbCachingShape::getNonvirtualAabb",5,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPolyhedralConvexAabbCachingShape,0))){
    SWIG_fail_ptr("btPolyhedralConvexAabbCachingShape_getNonvirtualAabb",1,SWIGTYPE_p_btPolyhedralConvexAabbCachingShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btPolyhedralConvexAabbCachingShape_getNonvirtualAabb",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPolyhedralConvexAabbCachingShape_getNonvirtualAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPolyhedralConvexAabbCachingShape_getNonvirtualAabb",4,SWIGTYPE_p_btVector3);
  }
  
  arg5 = (btScalar)lua_tonumber(L, 5);
  ((btPolyhedralConvexAabbCachingShape const *)arg1)->getNonvirtualAabb((btTransform const &)*arg2,*arg3,*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPolyhedralConvexAabbCachingShape_setLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btPolyhedralConvexAabbCachingShape::setLocalScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPolyhedralConvexAabbCachingShape::setLocalScaling",1,"btPolyhedralConvexAabbCachingShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPolyhedralConvexAabbCachingShape::setLocalScaling",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPolyhedralConvexAabbCachingShape,0))){
    SWIG_fail_ptr("btPolyhedralConvexAabbCachingShape_setLocalScaling",1,SWIGTYPE_p_btPolyhedralConvexAabbCachingShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPolyhedralConvexAabbCachingShape_setLocalScaling",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPolyhedralConvexAabbCachingShape_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btPolyhedralConvexAabbCachingShape::getAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPolyhedralConvexAabbCachingShape::getAabb",1,"btPolyhedralConvexAabbCachingShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPolyhedralConvexAabbCachingShape::getAabb",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btPolyhedralConvexAabbCachingShape::getAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btPolyhedralConvexAabbCachingShape::getAabb",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPolyhedralConvexAabbCachingShape,0))){
    SWIG_fail_ptr("btPolyhedralConvexAabbCachingShape_getAabb",1,SWIGTYPE_p_btPolyhedralConvexAabbCachingShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btPolyhedralConvexAabbCachingShape_getAabb",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPolyhedralConvexAabbCachingShape_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPolyhedralConvexAabbCachingShape_getAabb",4,SWIGTYPE_p_btVector3);
  }
  
  ((btPolyhedralConvexAabbCachingShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPolyhedralConvexAabbCachingShape_recalcLocalAabb(lua_State* L) {
  int SWIG_arg = 0;
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  
  SWIG_check_num_args("btPolyhedralConvexAabbCachingShape::recalcLocalAabb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPolyhedralConvexAabbCachingShape::recalcLocalAabb",1,"btPolyhedralConvexAabbCachingShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPolyhedralConvexAabbCachingShape,0))){
    SWIG_fail_ptr("btPolyhedralConvexAabbCachingShape_recalcLocalAabb",1,SWIGTYPE_p_btPolyhedralConvexAabbCachingShape);
  }
  
  (arg1)->recalcLocalAabb();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btPolyhedralConvexAabbCachingShape(void *obj) {
btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) obj;
delete arg1;
}
static swig_lua_method swig_btPolyhedralConvexAabbCachingShape_methods[] = {
    {"getNonvirtualAabb", _wrap_btPolyhedralConvexAabbCachingShape_getNonvirtualAabb}, 
    {"setLocalScaling", _wrap_btPolyhedralConvexAabbCachingShape_setLocalScaling}, 
    {"getAabb", _wrap_btPolyhedralConvexAabbCachingShape_getAabb}, 
    {"recalcLocalAabb", _wrap_btPolyhedralConvexAabbCachingShape_recalcLocalAabb}, 
    {0,0}
};
static swig_lua_attribute swig_btPolyhedralConvexAabbCachingShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btPolyhedralConvexAabbCachingShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btPolyhedralConvexAabbCachingShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btPolyhedralConvexAabbCachingShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btPolyhedralConvexAabbCachingShape_bases[] = {0,0};
static const char *swig_btPolyhedralConvexAabbCachingShape_base_names[] = {"btPolyhedralConvexShape *",0};
static swig_lua_class _wrap_class_btPolyhedralConvexAabbCachingShape = { "btPolyhedralConvexAabbCachingShape", &SWIGTYPE_p_btPolyhedralConvexAabbCachingShape,0, swig_delete_btPolyhedralConvexAabbCachingShape, swig_btPolyhedralConvexAabbCachingShape_methods, swig_btPolyhedralConvexAabbCachingShape_attributes, { "btPolyhedralConvexAabbCachingShape", swig_btPolyhedralConvexAabbCachingShape_cls_methods, swig_btPolyhedralConvexAabbCachingShape_cls_attributes, swig_btPolyhedralConvexAabbCachingShape_cls_constants }, swig_btPolyhedralConvexAabbCachingShape_bases, swig_btPolyhedralConvexAabbCachingShape_base_names };

static int _wrap_btBoxShape_getHalfExtentsWithMargin(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btBoxShape::getHalfExtentsWithMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::getHalfExtentsWithMargin",1,"btBoxShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_getHalfExtentsWithMargin",1,SWIGTYPE_p_btBoxShape);
  }
  
  result = ((btBoxShape const *)arg1)->getHalfExtentsWithMargin();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_getHalfExtentsWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btBoxShape::getHalfExtentsWithoutMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::getHalfExtentsWithoutMargin",1,"btBoxShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_getHalfExtentsWithoutMargin",1,SWIGTYPE_p_btBoxShape);
  }
  
  result = (btVector3 *) &((btBoxShape const *)arg1)->getHalfExtentsWithoutMargin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_localGetSupportingVertex(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btBoxShape::localGetSupportingVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::localGetSupportingVertex",1,"btBoxShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBoxShape::localGetSupportingVertex",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_localGetSupportingVertex",1,SWIGTYPE_p_btBoxShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBoxShape_localGetSupportingVertex",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btBoxShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_localGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btBoxShape::localGetSupportingVertexWithoutMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::localGetSupportingVertexWithoutMargin",1,"btBoxShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBoxShape::localGetSupportingVertexWithoutMargin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_localGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btBoxShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBoxShape_localGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btBoxShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btBoxShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::batchedUnitVectorGetSupportingVertexWithoutMargin",1,"btBoxShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBoxShape::batchedUnitVectorGetSupportingVertexWithoutMargin",2,"btVector3 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btBoxShape::batchedUnitVectorGetSupportingVertexWithoutMargin",3,"btVector3 *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btBoxShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btBoxShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btBoxShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBoxShape(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btBoxShape *result = 0 ;
  
  SWIG_check_num_args("btBoxShape::btBoxShape",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btBoxShape::btBoxShape",1,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBoxShape",1,SWIGTYPE_p_btVector3);
  }
  
  result = (btBoxShape *)new btBoxShape((btVector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBoxShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_setMargin(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btBoxShape::setMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::setMargin",1,"btBoxShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btBoxShape::setMargin",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_setMargin",1,SWIGTYPE_p_btBoxShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setMargin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_setLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btBoxShape::setLocalScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::setLocalScaling",1,"btBoxShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBoxShape::setLocalScaling",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_setLocalScaling",1,SWIGTYPE_p_btBoxShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBoxShape_setLocalScaling",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btBoxShape::getAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::getAabb",1,"btBoxShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBoxShape::getAabb",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBoxShape::getAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btBoxShape::getAabb",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_getAabb",1,SWIGTYPE_p_btBoxShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btBoxShape_getAabb",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBoxShape_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBoxShape_getAabb",4,SWIGTYPE_p_btVector3);
  }
  
  ((btBoxShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_calculateLocalInertia(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btBoxShape::calculateLocalInertia",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::calculateLocalInertia",1,"btBoxShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btBoxShape::calculateLocalInertia",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBoxShape::calculateLocalInertia",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_calculateLocalInertia",1,SWIGTYPE_p_btBoxShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBoxShape_calculateLocalInertia",3,SWIGTYPE_p_btVector3);
  }
  
  ((btBoxShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_getPlane(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btBoxShape::getPlane",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::getPlane",1,"btBoxShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBoxShape::getPlane",2,"btVector3 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBoxShape::getPlane",3,"btVector3 &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btBoxShape::getPlane",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_getPlane",1,SWIGTYPE_p_btBoxShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBoxShape_getPlane",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBoxShape_getPlane",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btBoxShape const *)arg1)->getPlane(*arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_getNumPlanes(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btBoxShape::getNumPlanes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::getNumPlanes",1,"btBoxShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_getNumPlanes",1,SWIGTYPE_p_btBoxShape);
  }
  
  result = (int)((btBoxShape const *)arg1)->getNumPlanes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_getNumVertices(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btBoxShape::getNumVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::getNumVertices",1,"btBoxShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_getNumVertices",1,SWIGTYPE_p_btBoxShape);
  }
  
  result = (int)((btBoxShape const *)arg1)->getNumVertices();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_getNumEdges(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btBoxShape::getNumEdges",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::getNumEdges",1,"btBoxShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_getNumEdges",1,SWIGTYPE_p_btBoxShape);
  }
  
  result = (int)((btBoxShape const *)arg1)->getNumEdges();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_getVertex(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btBoxShape::getVertex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::getVertex",1,"btBoxShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btBoxShape::getVertex",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBoxShape::getVertex",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_getVertex",1,SWIGTYPE_p_btBoxShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBoxShape_getVertex",3,SWIGTYPE_p_btVector3);
  }
  
  ((btBoxShape const *)arg1)->getVertex(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_getPlaneEquation(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector4 *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("btBoxShape::getPlaneEquation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::getPlaneEquation",1,"btBoxShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBoxShape::getPlaneEquation",2,"btVector4 &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btBoxShape::getPlaneEquation",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_getPlaneEquation",1,SWIGTYPE_p_btBoxShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector4,0))){
    SWIG_fail_ptr("btBoxShape_getPlaneEquation",2,SWIGTYPE_p_btVector4);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  ((btBoxShape const *)arg1)->getPlaneEquation(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_getEdge(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btBoxShape::getEdge",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::getEdge",1,"btBoxShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btBoxShape::getEdge",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBoxShape::getEdge",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btBoxShape::getEdge",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_getEdge",1,SWIGTYPE_p_btBoxShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBoxShape_getEdge",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBoxShape_getEdge",4,SWIGTYPE_p_btVector3);
  }
  
  ((btBoxShape const *)arg1)->getEdge(arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_isInside(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  SWIG_check_num_args("btBoxShape::isInside",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::isInside",1,"btBoxShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBoxShape::isInside",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btBoxShape::isInside",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_isInside",1,SWIGTYPE_p_btBoxShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBoxShape_isInside",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  result = (bool)((btBoxShape const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_getName(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btBoxShape::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::getName",1,"btBoxShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_getName",1,SWIGTYPE_p_btBoxShape);
  }
  
  result = (char *)((btBoxShape const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_getNumPreferredPenetrationDirections(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btBoxShape::getNumPreferredPenetrationDirections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::getNumPreferredPenetrationDirections",1,"btBoxShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_getNumPreferredPenetrationDirections",1,SWIGTYPE_p_btBoxShape);
  }
  
  result = (int)((btBoxShape const *)arg1)->getNumPreferredPenetrationDirections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBoxShape_getPreferredPenetrationDirection(lua_State* L) {
  int SWIG_arg = 0;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btBoxShape::getPreferredPenetrationDirection",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBoxShape::getPreferredPenetrationDirection",1,"btBoxShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btBoxShape::getPreferredPenetrationDirection",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBoxShape::getPreferredPenetrationDirection",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("btBoxShape_getPreferredPenetrationDirection",1,SWIGTYPE_p_btBoxShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBoxShape_getPreferredPenetrationDirection",3,SWIGTYPE_p_btVector3);
  }
  
  ((btBoxShape const *)arg1)->getPreferredPenetrationDirection(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btBoxShape(void *obj) {
btBoxShape *arg1 = (btBoxShape *) obj;
delete arg1;
}
static swig_lua_method swig_btBoxShape_methods[] = {
    {"getHalfExtentsWithMargin", _wrap_btBoxShape_getHalfExtentsWithMargin}, 
    {"getHalfExtentsWithoutMargin", _wrap_btBoxShape_getHalfExtentsWithoutMargin}, 
    {"localGetSupportingVertex", _wrap_btBoxShape_localGetSupportingVertex}, 
    {"localGetSupportingVertexWithoutMargin", _wrap_btBoxShape_localGetSupportingVertexWithoutMargin}, 
    {"batchedUnitVectorGetSupportingVertexWithoutMargin", _wrap_btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin}, 
    {"setMargin", _wrap_btBoxShape_setMargin}, 
    {"setLocalScaling", _wrap_btBoxShape_setLocalScaling}, 
    {"getAabb", _wrap_btBoxShape_getAabb}, 
    {"calculateLocalInertia", _wrap_btBoxShape_calculateLocalInertia}, 
    {"getPlane", _wrap_btBoxShape_getPlane}, 
    {"getNumPlanes", _wrap_btBoxShape_getNumPlanes}, 
    {"getNumVertices", _wrap_btBoxShape_getNumVertices}, 
    {"getNumEdges", _wrap_btBoxShape_getNumEdges}, 
    {"getVertex", _wrap_btBoxShape_getVertex}, 
    {"getPlaneEquation", _wrap_btBoxShape_getPlaneEquation}, 
    {"getEdge", _wrap_btBoxShape_getEdge}, 
    {"isInside", _wrap_btBoxShape_isInside}, 
    {"getName", _wrap_btBoxShape_getName}, 
    {"getNumPreferredPenetrationDirections", _wrap_btBoxShape_getNumPreferredPenetrationDirections}, 
    {"getPreferredPenetrationDirection", _wrap_btBoxShape_getPreferredPenetrationDirection}, 
    {0,0}
};
static swig_lua_attribute swig_btBoxShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btBoxShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btBoxShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btBoxShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btBoxShape_bases[] = {0,0};
static const char *swig_btBoxShape_base_names[] = {"btPolyhedralConvexShape *",0};
static swig_lua_class _wrap_class_btBoxShape = { "btBoxShape", &SWIGTYPE_p_btBoxShape,_wrap_new_btBoxShape, swig_delete_btBoxShape, swig_btBoxShape_methods, swig_btBoxShape_attributes, { "btBoxShape", swig_btBoxShape_cls_methods, swig_btBoxShape_cls_attributes, swig_btBoxShape_cls_constants }, swig_btBoxShape_bases, swig_btBoxShape_base_names };

static int _wrap_btTriangleCallback_processTriangle(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleCallback *arg1 = (btTriangleCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("btTriangleCallback::processTriangle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleCallback::processTriangle",1,"btTriangleCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleCallback::processTriangle",2,"btVector3 *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btTriangleCallback::processTriangle",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btTriangleCallback::processTriangle",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleCallback,0))){
    SWIG_fail_ptr("btTriangleCallback_processTriangle",1,SWIGTYPE_p_btTriangleCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleCallback_processTriangle",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->processTriangle(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTriangleCallback(void *obj) {
btTriangleCallback *arg1 = (btTriangleCallback *) obj;
delete arg1;
}
static swig_lua_method swig_btTriangleCallback_methods[] = {
    {"processTriangle", _wrap_btTriangleCallback_processTriangle}, 
    {0,0}
};
static swig_lua_attribute swig_btTriangleCallback_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btTriangleCallback_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTriangleCallback_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTriangleCallback_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTriangleCallback_bases[] = {0};
static const char *swig_btTriangleCallback_base_names[] = {0};
static swig_lua_class _wrap_class_btTriangleCallback = { "btTriangleCallback", &SWIGTYPE_p_btTriangleCallback,0, swig_delete_btTriangleCallback, swig_btTriangleCallback_methods, swig_btTriangleCallback_attributes, { "btTriangleCallback", swig_btTriangleCallback_cls_methods, swig_btTriangleCallback_cls_attributes, swig_btTriangleCallback_cls_constants }, swig_btTriangleCallback_bases, swig_btTriangleCallback_base_names };

static int _wrap_btInternalTriangleIndexCallback_internalProcessTriangleIndex(lua_State* L) {
  int SWIG_arg = 0;
  btInternalTriangleIndexCallback *arg1 = (btInternalTriangleIndexCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("btInternalTriangleIndexCallback::internalProcessTriangleIndex",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btInternalTriangleIndexCallback::internalProcessTriangleIndex",1,"btInternalTriangleIndexCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btInternalTriangleIndexCallback::internalProcessTriangleIndex",2,"btVector3 *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btInternalTriangleIndexCallback::internalProcessTriangleIndex",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btInternalTriangleIndexCallback::internalProcessTriangleIndex",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btInternalTriangleIndexCallback,0))){
    SWIG_fail_ptr("btInternalTriangleIndexCallback_internalProcessTriangleIndex",1,SWIGTYPE_p_btInternalTriangleIndexCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btInternalTriangleIndexCallback_internalProcessTriangleIndex",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->internalProcessTriangleIndex(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btInternalTriangleIndexCallback(void *obj) {
btInternalTriangleIndexCallback *arg1 = (btInternalTriangleIndexCallback *) obj;
delete arg1;
}
static swig_lua_method swig_btInternalTriangleIndexCallback_methods[] = {
    {"internalProcessTriangleIndex", _wrap_btInternalTriangleIndexCallback_internalProcessTriangleIndex}, 
    {0,0}
};
static swig_lua_attribute swig_btInternalTriangleIndexCallback_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btInternalTriangleIndexCallback_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btInternalTriangleIndexCallback_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btInternalTriangleIndexCallback_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btInternalTriangleIndexCallback_bases[] = {0};
static const char *swig_btInternalTriangleIndexCallback_base_names[] = {0};
static swig_lua_class _wrap_class_btInternalTriangleIndexCallback = { "btInternalTriangleIndexCallback", &SWIGTYPE_p_btInternalTriangleIndexCallback,0, swig_delete_btInternalTriangleIndexCallback, swig_btInternalTriangleIndexCallback_methods, swig_btInternalTriangleIndexCallback_attributes, { "btInternalTriangleIndexCallback", swig_btInternalTriangleIndexCallback_cls_methods, swig_btInternalTriangleIndexCallback_cls_attributes, swig_btInternalTriangleIndexCallback_cls_constants }, swig_btInternalTriangleIndexCallback_bases, swig_btInternalTriangleIndexCallback_base_names };

static int _wrap_btConcaveShape_processAllTriangles(lua_State* L) {
  int SWIG_arg = 0;
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btConcaveShape::processAllTriangles",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConcaveShape::processAllTriangles",1,"btConcaveShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConcaveShape::processAllTriangles",2,"btTriangleCallback *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btConcaveShape::processAllTriangles",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btConcaveShape::processAllTriangles",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConcaveShape,0))){
    SWIG_fail_ptr("btConcaveShape_processAllTriangles",1,SWIGTYPE_p_btConcaveShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTriangleCallback,0))){
    SWIG_fail_ptr("btConcaveShape_processAllTriangles",2,SWIGTYPE_p_btTriangleCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConcaveShape_processAllTriangles",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConcaveShape_processAllTriangles",4,SWIGTYPE_p_btVector3);
  }
  
  ((btConcaveShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConcaveShape_getMargin(lua_State* L) {
  int SWIG_arg = 0;
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConcaveShape::getMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConcaveShape::getMargin",1,"btConcaveShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConcaveShape,0))){
    SWIG_fail_ptr("btConcaveShape_getMargin",1,SWIGTYPE_p_btConcaveShape);
  }
  
  result = (btScalar)((btConcaveShape const *)arg1)->getMargin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConcaveShape_setMargin(lua_State* L) {
  int SWIG_arg = 0;
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btConcaveShape::setMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConcaveShape::setMargin",1,"btConcaveShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConcaveShape::setMargin",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConcaveShape,0))){
    SWIG_fail_ptr("btConcaveShape_setMargin",1,SWIGTYPE_p_btConcaveShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setMargin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConcaveShape(void *obj) {
btConcaveShape *arg1 = (btConcaveShape *) obj;
delete arg1;
}
static swig_lua_method swig_btConcaveShape_methods[] = {
    {"processAllTriangles", _wrap_btConcaveShape_processAllTriangles}, 
    {"getMargin", _wrap_btConcaveShape_getMargin}, 
    {"setMargin", _wrap_btConcaveShape_setMargin}, 
    {0,0}
};
static swig_lua_attribute swig_btConcaveShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btConcaveShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConcaveShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConcaveShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConcaveShape_bases[] = {0,0};
static const char *swig_btConcaveShape_base_names[] = {"btCollisionShape *",0};
static swig_lua_class _wrap_class_btConcaveShape = { "btConcaveShape", &SWIGTYPE_p_btConcaveShape,0, swig_delete_btConcaveShape, swig_btConcaveShape_methods, swig_btConcaveShape_attributes, { "btConcaveShape", swig_btConcaveShape_cls_methods, swig_btConcaveShape_cls_attributes, swig_btConcaveShape_cls_constants }, swig_btConcaveShape_bases, swig_btConcaveShape_base_names };

static int _wrap_btStridingMeshInterface_InternalProcessAllTriangles(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btInternalTriangleIndexCallback *arg2 = (btInternalTriangleIndexCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btStridingMeshInterface::InternalProcessAllTriangles",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::InternalProcessAllTriangles",1,"btStridingMeshInterface const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btStridingMeshInterface::InternalProcessAllTriangles",2,"btInternalTriangleIndexCallback *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btStridingMeshInterface::InternalProcessAllTriangles",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btStridingMeshInterface::InternalProcessAllTriangles",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_InternalProcessAllTriangles",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btInternalTriangleIndexCallback,0))){
    SWIG_fail_ptr("btStridingMeshInterface_InternalProcessAllTriangles",2,SWIGTYPE_p_btInternalTriangleIndexCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btStridingMeshInterface_InternalProcessAllTriangles",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btStridingMeshInterface_InternalProcessAllTriangles",4,SWIGTYPE_p_btVector3);
  }
  
  ((btStridingMeshInterface const *)arg1)->InternalProcessAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterface_calculateAabbBruteForce(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btStridingMeshInterface::calculateAabbBruteForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::calculateAabbBruteForce",1,"btStridingMeshInterface *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btStridingMeshInterface::calculateAabbBruteForce",2,"btVector3 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btStridingMeshInterface::calculateAabbBruteForce",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_calculateAabbBruteForce",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btStridingMeshInterface_calculateAabbBruteForce",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btStridingMeshInterface_calculateAabbBruteForce",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->calculateAabbBruteForce(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterface_getLockedVertexIndexBase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  int arg10 ;
  
  SWIG_check_num_args("btStridingMeshInterface::getLockedVertexIndexBase",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",1,"btStridingMeshInterface *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",2,"unsigned char **");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",3,"int &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",4,"PHY_ScalarType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",5,"int &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",6,"unsigned char **");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",7,"int &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",8,"int &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",9,"PHY_ScalarType &");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",2,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_PHY_ScalarType,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",4,SWIGTYPE_p_PHY_ScalarType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",5,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",6,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",7,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",8,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_PHY_ScalarType,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",9,SWIGTYPE_p_PHY_ScalarType);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  (arg1)->getLockedVertexIndexBase(arg2,*arg3,*arg4,*arg5,arg6,*arg7,*arg8,*arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterface_getLockedVertexIndexBase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  
  SWIG_check_num_args("btStridingMeshInterface::getLockedVertexIndexBase",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",1,"btStridingMeshInterface *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",2,"unsigned char **");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",3,"int &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",4,"PHY_ScalarType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",5,"int &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",6,"unsigned char **");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",7,"int &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",8,"int &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("btStridingMeshInterface::getLockedVertexIndexBase",9,"PHY_ScalarType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",2,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_PHY_ScalarType,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",4,SWIGTYPE_p_PHY_ScalarType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",5,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",6,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",7,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",8,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_PHY_ScalarType,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedVertexIndexBase",9,SWIGTYPE_p_PHY_ScalarType);
  }
  
  (arg1)->getLockedVertexIndexBase(arg2,*arg3,*arg4,*arg5,arg6,*arg7,*arg8,*arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterface_getLockedVertexIndexBase(lua_State* L) {
  int argc;
  int argv[11]={
    1,2,3,4,5,6,7,8,9,10,11
  };
  
  argc = lua_gettop(L);
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btStridingMeshInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_PHY_ScalarType, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_PHY_ScalarType, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      return _wrap_btStridingMeshInterface_getLockedVertexIndexBase__SWIG_1(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btStridingMeshInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_PHY_ScalarType, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_PHY_ScalarType, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_btStridingMeshInterface_getLockedVertexIndexBase__SWIG_0(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btStridingMeshInterface_getLockedVertexIndexBase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btStridingMeshInterface::getLockedVertexIndexBase(unsigned char **,int &,PHY_ScalarType &,int &,unsigned char **,int &,int &,PHY_ScalarType &,int)\n"
    "    btStridingMeshInterface::getLockedVertexIndexBase(unsigned char **,int &,PHY_ScalarType &,int &,unsigned char **,int &,int &,PHY_ScalarType &)\n");
  lua_error(L);return 0;
}


static int _wrap_btStridingMeshInterface_getLockedReadOnlyVertexIndexBase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  int arg10 ;
  
  SWIG_check_num_args("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",1,"btStridingMeshInterface const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",2,"unsigned char const **");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",3,"int &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",4,"PHY_ScalarType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",5,"int &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",6,"unsigned char const **");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",7,"int &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",8,"int &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",9,"PHY_ScalarType &");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",2,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_PHY_ScalarType,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",4,SWIGTYPE_p_PHY_ScalarType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",5,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",6,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",7,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",8,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_PHY_ScalarType,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",9,SWIGTYPE_p_PHY_ScalarType);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  ((btStridingMeshInterface const *)arg1)->getLockedReadOnlyVertexIndexBase((unsigned char const **)arg2,*arg3,*arg4,*arg5,(unsigned char const **)arg6,*arg7,*arg8,*arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterface_getLockedReadOnlyVertexIndexBase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  
  SWIG_check_num_args("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",1,"btStridingMeshInterface const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",2,"unsigned char const **");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",3,"int &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",4,"PHY_ScalarType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",5,"int &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",6,"unsigned char const **");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",7,"int &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",8,"int &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("btStridingMeshInterface::getLockedReadOnlyVertexIndexBase",9,"PHY_ScalarType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",2,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_PHY_ScalarType,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",4,SWIGTYPE_p_PHY_ScalarType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",5,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",6,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",7,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",8,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_PHY_ScalarType,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getLockedReadOnlyVertexIndexBase",9,SWIGTYPE_p_PHY_ScalarType);
  }
  
  ((btStridingMeshInterface const *)arg1)->getLockedReadOnlyVertexIndexBase((unsigned char const **)arg2,*arg3,*arg4,*arg5,(unsigned char const **)arg6,*arg7,*arg8,*arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterface_getLockedReadOnlyVertexIndexBase(lua_State* L) {
  int argc;
  int argv[11]={
    1,2,3,4,5,6,7,8,9,10,11
  };
  
  argc = lua_gettop(L);
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btStridingMeshInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_PHY_ScalarType, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_PHY_ScalarType, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      return _wrap_btStridingMeshInterface_getLockedReadOnlyVertexIndexBase__SWIG_1(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btStridingMeshInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_PHY_ScalarType, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_PHY_ScalarType, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_btStridingMeshInterface_getLockedReadOnlyVertexIndexBase__SWIG_0(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btStridingMeshInterface_getLockedReadOnlyVertexIndexBase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btStridingMeshInterface::getLockedReadOnlyVertexIndexBase(unsigned char const **,int &,PHY_ScalarType &,int &,unsigned char const **,int &,int &,PHY_ScalarType &,int) const\n"
    "    btStridingMeshInterface::getLockedReadOnlyVertexIndexBase(unsigned char const **,int &,PHY_ScalarType &,int &,unsigned char const **,int &,int &,PHY_ScalarType &) const\n");
  lua_error(L);return 0;
}


static int _wrap_btStridingMeshInterface_unLockVertexBase(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btStridingMeshInterface::unLockVertexBase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::unLockVertexBase",1,"btStridingMeshInterface *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btStridingMeshInterface::unLockVertexBase",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_unLockVertexBase",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->unLockVertexBase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterface_unLockReadOnlyVertexBase(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btStridingMeshInterface::unLockReadOnlyVertexBase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::unLockReadOnlyVertexBase",1,"btStridingMeshInterface const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btStridingMeshInterface::unLockReadOnlyVertexBase",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_unLockReadOnlyVertexBase",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  ((btStridingMeshInterface const *)arg1)->unLockReadOnlyVertexBase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterface_getNumSubParts(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int result;
  
  SWIG_check_num_args("btStridingMeshInterface::getNumSubParts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::getNumSubParts",1,"btStridingMeshInterface const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getNumSubParts",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  result = (int)((btStridingMeshInterface const *)arg1)->getNumSubParts();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterface_preallocateVertices(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btStridingMeshInterface::preallocateVertices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::preallocateVertices",1,"btStridingMeshInterface *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btStridingMeshInterface::preallocateVertices",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_preallocateVertices",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->preallocateVertices(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterface_preallocateIndices(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btStridingMeshInterface::preallocateIndices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::preallocateIndices",1,"btStridingMeshInterface *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btStridingMeshInterface::preallocateIndices",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_preallocateIndices",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->preallocateIndices(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterface_hasPremadeAabb(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool result;
  
  SWIG_check_num_args("btStridingMeshInterface::hasPremadeAabb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::hasPremadeAabb",1,"btStridingMeshInterface const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_hasPremadeAabb",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  result = (bool)((btStridingMeshInterface const *)arg1)->hasPremadeAabb();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterface_setPremadeAabb(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btStridingMeshInterface::setPremadeAabb",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::setPremadeAabb",1,"btStridingMeshInterface const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btStridingMeshInterface::setPremadeAabb",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btStridingMeshInterface::setPremadeAabb",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_setPremadeAabb",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btStridingMeshInterface_setPremadeAabb",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btStridingMeshInterface_setPremadeAabb",3,SWIGTYPE_p_btVector3);
  }
  
  ((btStridingMeshInterface const *)arg1)->setPremadeAabb((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterface_getPremadeAabb(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btStridingMeshInterface::getPremadeAabb",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::getPremadeAabb",1,"btStridingMeshInterface const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btStridingMeshInterface::getPremadeAabb",2,"btVector3 *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btStridingMeshInterface::getPremadeAabb",3,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getPremadeAabb",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getPremadeAabb",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getPremadeAabb",3,SWIGTYPE_p_btVector3);
  }
  
  ((btStridingMeshInterface const *)arg1)->getPremadeAabb(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterface_getScaling(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btStridingMeshInterface::getScaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::getScaling",1,"btStridingMeshInterface const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_getScaling",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  result = (btVector3 *) &((btStridingMeshInterface const *)arg1)->getScaling();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterface_setScaling(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btStridingMeshInterface::setScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::setScaling",1,"btStridingMeshInterface *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btStridingMeshInterface::setScaling",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_setScaling",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btStridingMeshInterface_setScaling",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setScaling((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterface_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int result;
  
  SWIG_check_num_args("btStridingMeshInterface::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::calculateSerializeBufferSize",1,"btStridingMeshInterface const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_calculateSerializeBufferSize",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  result = (int)((btStridingMeshInterface const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterface_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btStridingMeshInterface::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterface::serialize",1,"btStridingMeshInterface const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btStridingMeshInterface::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btStridingMeshInterface::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btStridingMeshInterface_serialize",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btStridingMeshInterface_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btStridingMeshInterface_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  result = (char *)((btStridingMeshInterface const *)arg1)->serialize(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btStridingMeshInterface(void *obj) {
btStridingMeshInterface *arg1 = (btStridingMeshInterface *) obj;
delete arg1;
}
static swig_lua_method swig_btStridingMeshInterface_methods[] = {
    {"InternalProcessAllTriangles", _wrap_btStridingMeshInterface_InternalProcessAllTriangles}, 
    {"calculateAabbBruteForce", _wrap_btStridingMeshInterface_calculateAabbBruteForce}, 
    {"getLockedVertexIndexBase", _wrap_btStridingMeshInterface_getLockedVertexIndexBase}, 
    {"getLockedReadOnlyVertexIndexBase", _wrap_btStridingMeshInterface_getLockedReadOnlyVertexIndexBase}, 
    {"unLockVertexBase", _wrap_btStridingMeshInterface_unLockVertexBase}, 
    {"unLockReadOnlyVertexBase", _wrap_btStridingMeshInterface_unLockReadOnlyVertexBase}, 
    {"getNumSubParts", _wrap_btStridingMeshInterface_getNumSubParts}, 
    {"preallocateVertices", _wrap_btStridingMeshInterface_preallocateVertices}, 
    {"preallocateIndices", _wrap_btStridingMeshInterface_preallocateIndices}, 
    {"hasPremadeAabb", _wrap_btStridingMeshInterface_hasPremadeAabb}, 
    {"setPremadeAabb", _wrap_btStridingMeshInterface_setPremadeAabb}, 
    {"getPremadeAabb", _wrap_btStridingMeshInterface_getPremadeAabb}, 
    {"getScaling", _wrap_btStridingMeshInterface_getScaling}, 
    {"setScaling", _wrap_btStridingMeshInterface_setScaling}, 
    {"calculateSerializeBufferSize", _wrap_btStridingMeshInterface_calculateSerializeBufferSize}, 
    {"serialize", _wrap_btStridingMeshInterface_serialize}, 
    {0,0}
};
static swig_lua_attribute swig_btStridingMeshInterface_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btStridingMeshInterface_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btStridingMeshInterface_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btStridingMeshInterface_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btStridingMeshInterface_bases[] = {0};
static const char *swig_btStridingMeshInterface_base_names[] = {0};
static swig_lua_class _wrap_class_btStridingMeshInterface = { "btStridingMeshInterface", &SWIGTYPE_p_btStridingMeshInterface,0, swig_delete_btStridingMeshInterface, swig_btStridingMeshInterface_methods, swig_btStridingMeshInterface_attributes, { "btStridingMeshInterface", swig_btStridingMeshInterface_cls_methods, swig_btStridingMeshInterface_cls_attributes, swig_btStridingMeshInterface_cls_constants }, swig_btStridingMeshInterface_bases, swig_btStridingMeshInterface_base_names };

static int _wrap_btIntIndexData_m_value_set(lua_State* L) {
  int SWIG_arg = 0;
  btIntIndexData *arg1 = (btIntIndexData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btIntIndexData::m_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIntIndexData::m_value",1,"btIntIndexData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btIntIndexData::m_value",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIntIndexData,0))){
    SWIG_fail_ptr("btIntIndexData_m_value_set",1,SWIGTYPE_p_btIntIndexData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_value = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIntIndexData_m_value_get(lua_State* L) {
  int SWIG_arg = 0;
  btIntIndexData *arg1 = (btIntIndexData *) 0 ;
  int result;
  
  SWIG_check_num_args("btIntIndexData::m_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIntIndexData::m_value",1,"btIntIndexData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIntIndexData,0))){
    SWIG_fail_ptr("btIntIndexData_m_value_get",1,SWIGTYPE_p_btIntIndexData);
  }
  
  result = (int) ((arg1)->m_value);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btIntIndexData(lua_State* L) {
  int SWIG_arg = 0;
  btIntIndexData *result = 0 ;
  
  SWIG_check_num_args("btIntIndexData::btIntIndexData",0,0)
  result = (btIntIndexData *)new btIntIndexData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btIntIndexData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btIntIndexData(void *obj) {
btIntIndexData *arg1 = (btIntIndexData *) obj;
delete arg1;
}
static swig_lua_method swig_btIntIndexData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btIntIndexData_attributes[] = {
    { "m_value", _wrap_btIntIndexData_m_value_get, _wrap_btIntIndexData_m_value_set},
    {0,0,0}
};
static swig_lua_attribute swig_btIntIndexData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btIntIndexData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btIntIndexData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btIntIndexData_bases[] = {0};
static const char *swig_btIntIndexData_base_names[] = {0};
static swig_lua_class _wrap_class_btIntIndexData = { "btIntIndexData", &SWIGTYPE_p_btIntIndexData,_wrap_new_btIntIndexData, swig_delete_btIntIndexData, swig_btIntIndexData_methods, swig_btIntIndexData_attributes, { "btIntIndexData", swig_btIntIndexData_cls_methods, swig_btIntIndexData_cls_attributes, swig_btIntIndexData_cls_constants }, swig_btIntIndexData_bases, swig_btIntIndexData_base_names };

static int _wrap_btShortIntIndexData_m_value_set(lua_State* L) {
  int SWIG_arg = 0;
  btShortIntIndexData *arg1 = (btShortIntIndexData *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("btShortIntIndexData::m_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btShortIntIndexData::m_value",1,"btShortIntIndexData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btShortIntIndexData::m_value",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btShortIntIndexData,0))){
    SWIG_fail_ptr("btShortIntIndexData_m_value_set",1,SWIGTYPE_p_btShortIntIndexData);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_value = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btShortIntIndexData_m_value_get(lua_State* L) {
  int SWIG_arg = 0;
  btShortIntIndexData *arg1 = (btShortIntIndexData *) 0 ;
  short result;
  
  SWIG_check_num_args("btShortIntIndexData::m_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btShortIntIndexData::m_value",1,"btShortIntIndexData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btShortIntIndexData,0))){
    SWIG_fail_ptr("btShortIntIndexData_m_value_get",1,SWIGTYPE_p_btShortIntIndexData);
  }
  
  result = (short) ((arg1)->m_value);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btShortIntIndexData_m_pad_set(lua_State* L) {
  int SWIG_arg = 0;
  btShortIntIndexData *arg1 = (btShortIntIndexData *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btShortIntIndexData::m_pad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btShortIntIndexData::m_pad",1,"btShortIntIndexData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btShortIntIndexData::m_pad",2,"char [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btShortIntIndexData,0))){
    SWIG_fail_ptr("btShortIntIndexData_m_pad_set",1,SWIGTYPE_p_btShortIntIndexData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 2-1);
      arg1->m_pad[2-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btShortIntIndexData_m_pad_get(lua_State* L) {
  int SWIG_arg = 0;
  btShortIntIndexData *arg1 = (btShortIntIndexData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btShortIntIndexData::m_pad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btShortIntIndexData::m_pad",1,"btShortIntIndexData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btShortIntIndexData,0))){
    SWIG_fail_ptr("btShortIntIndexData_m_pad_get",1,SWIGTYPE_p_btShortIntIndexData);
  }
  
  result = (char *)(char *) ((arg1)->m_pad);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btShortIntIndexData(lua_State* L) {
  int SWIG_arg = 0;
  btShortIntIndexData *result = 0 ;
  
  SWIG_check_num_args("btShortIntIndexData::btShortIntIndexData",0,0)
  result = (btShortIntIndexData *)new btShortIntIndexData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btShortIntIndexData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btShortIntIndexData(void *obj) {
btShortIntIndexData *arg1 = (btShortIntIndexData *) obj;
delete arg1;
}
static swig_lua_method swig_btShortIntIndexData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btShortIntIndexData_attributes[] = {
    { "m_value", _wrap_btShortIntIndexData_m_value_get, _wrap_btShortIntIndexData_m_value_set},
    { "m_pad", _wrap_btShortIntIndexData_m_pad_get, _wrap_btShortIntIndexData_m_pad_set},
    {0,0,0}
};
static swig_lua_attribute swig_btShortIntIndexData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btShortIntIndexData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btShortIntIndexData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btShortIntIndexData_bases[] = {0};
static const char *swig_btShortIntIndexData_base_names[] = {0};
static swig_lua_class _wrap_class_btShortIntIndexData = { "btShortIntIndexData", &SWIGTYPE_p_btShortIntIndexData,_wrap_new_btShortIntIndexData, swig_delete_btShortIntIndexData, swig_btShortIntIndexData_methods, swig_btShortIntIndexData_attributes, { "btShortIntIndexData", swig_btShortIntIndexData_cls_methods, swig_btShortIntIndexData_cls_attributes, swig_btShortIntIndexData_cls_constants }, swig_btShortIntIndexData_bases, swig_btShortIntIndexData_base_names };

static int _wrap_btShortIntIndexTripletData_m_values_set(lua_State* L) {
  int SWIG_arg = 0;
  btShortIntIndexTripletData *arg1 = (btShortIntIndexTripletData *) 0 ;
  short *arg2 ;
  
  SWIG_check_num_args("btShortIntIndexTripletData::m_values",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btShortIntIndexTripletData::m_values",1,"btShortIntIndexTripletData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btShortIntIndexTripletData::m_values",2,"short [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btShortIntIndexTripletData,0))){
    SWIG_fail_ptr("btShortIntIndexTripletData_m_values_set",1,SWIGTYPE_p_btShortIntIndexTripletData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("btShortIntIndexTripletData_m_values_set",2,SWIGTYPE_p_short);
  }
  
  {
    size_t ii;
    short *b = (short *) arg1->m_values;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((short *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btShortIntIndexTripletData_m_values_get(lua_State* L) {
  int SWIG_arg = 0;
  btShortIntIndexTripletData *arg1 = (btShortIntIndexTripletData *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("btShortIntIndexTripletData::m_values",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btShortIntIndexTripletData::m_values",1,"btShortIntIndexTripletData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btShortIntIndexTripletData,0))){
    SWIG_fail_ptr("btShortIntIndexTripletData_m_values_get",1,SWIGTYPE_p_btShortIntIndexTripletData);
  }
  
  result = (short *)(short *) ((arg1)->m_values);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btShortIntIndexTripletData_m_pad_set(lua_State* L) {
  int SWIG_arg = 0;
  btShortIntIndexTripletData *arg1 = (btShortIntIndexTripletData *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btShortIntIndexTripletData::m_pad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btShortIntIndexTripletData::m_pad",1,"btShortIntIndexTripletData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btShortIntIndexTripletData::m_pad",2,"char [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btShortIntIndexTripletData,0))){
    SWIG_fail_ptr("btShortIntIndexTripletData_m_pad_set",1,SWIGTYPE_p_btShortIntIndexTripletData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 2-1);
      arg1->m_pad[2-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btShortIntIndexTripletData_m_pad_get(lua_State* L) {
  int SWIG_arg = 0;
  btShortIntIndexTripletData *arg1 = (btShortIntIndexTripletData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btShortIntIndexTripletData::m_pad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btShortIntIndexTripletData::m_pad",1,"btShortIntIndexTripletData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btShortIntIndexTripletData,0))){
    SWIG_fail_ptr("btShortIntIndexTripletData_m_pad_get",1,SWIGTYPE_p_btShortIntIndexTripletData);
  }
  
  result = (char *)(char *) ((arg1)->m_pad);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btShortIntIndexTripletData(lua_State* L) {
  int SWIG_arg = 0;
  btShortIntIndexTripletData *result = 0 ;
  
  SWIG_check_num_args("btShortIntIndexTripletData::btShortIntIndexTripletData",0,0)
  result = (btShortIntIndexTripletData *)new btShortIntIndexTripletData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btShortIntIndexTripletData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btShortIntIndexTripletData(void *obj) {
btShortIntIndexTripletData *arg1 = (btShortIntIndexTripletData *) obj;
delete arg1;
}
static swig_lua_method swig_btShortIntIndexTripletData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btShortIntIndexTripletData_attributes[] = {
    { "m_values", _wrap_btShortIntIndexTripletData_m_values_get, _wrap_btShortIntIndexTripletData_m_values_set},
    { "m_pad", _wrap_btShortIntIndexTripletData_m_pad_get, _wrap_btShortIntIndexTripletData_m_pad_set},
    {0,0,0}
};
static swig_lua_attribute swig_btShortIntIndexTripletData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btShortIntIndexTripletData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btShortIntIndexTripletData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btShortIntIndexTripletData_bases[] = {0};
static const char *swig_btShortIntIndexTripletData_base_names[] = {0};
static swig_lua_class _wrap_class_btShortIntIndexTripletData = { "btShortIntIndexTripletData", &SWIGTYPE_p_btShortIntIndexTripletData,_wrap_new_btShortIntIndexTripletData, swig_delete_btShortIntIndexTripletData, swig_btShortIntIndexTripletData_methods, swig_btShortIntIndexTripletData_attributes, { "btShortIntIndexTripletData", swig_btShortIntIndexTripletData_cls_methods, swig_btShortIntIndexTripletData_cls_attributes, swig_btShortIntIndexTripletData_cls_constants }, swig_btShortIntIndexTripletData_bases, swig_btShortIntIndexTripletData_base_names };

static int _wrap_btCharIndexTripletData_m_values_set(lua_State* L) {
  int SWIG_arg = 0;
  btCharIndexTripletData *arg1 = (btCharIndexTripletData *) 0 ;
  unsigned char *arg2 ;
  
  SWIG_check_num_args("btCharIndexTripletData::m_values",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCharIndexTripletData::m_values",1,"btCharIndexTripletData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCharIndexTripletData::m_values",2,"unsigned char [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCharIndexTripletData,0))){
    SWIG_fail_ptr("btCharIndexTripletData_m_values_set",1,SWIGTYPE_p_btCharIndexTripletData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("btCharIndexTripletData_m_values_set",2,SWIGTYPE_p_unsigned_char);
  }
  
  {
    size_t ii;
    unsigned char *b = (unsigned char *) arg1->m_values;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned char *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCharIndexTripletData_m_values_get(lua_State* L) {
  int SWIG_arg = 0;
  btCharIndexTripletData *arg1 = (btCharIndexTripletData *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("btCharIndexTripletData::m_values",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCharIndexTripletData::m_values",1,"btCharIndexTripletData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCharIndexTripletData,0))){
    SWIG_fail_ptr("btCharIndexTripletData_m_values_get",1,SWIGTYPE_p_btCharIndexTripletData);
  }
  
  result = (unsigned char *)(unsigned char *) ((arg1)->m_values);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCharIndexTripletData_m_pad_set(lua_State* L) {
  int SWIG_arg = 0;
  btCharIndexTripletData *arg1 = (btCharIndexTripletData *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("btCharIndexTripletData::m_pad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCharIndexTripletData::m_pad",1,"btCharIndexTripletData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btCharIndexTripletData::m_pad",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCharIndexTripletData,0))){
    SWIG_fail_ptr("btCharIndexTripletData_m_pad_set",1,SWIGTYPE_p_btCharIndexTripletData);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->m_pad = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCharIndexTripletData_m_pad_get(lua_State* L) {
  int SWIG_arg = 0;
  btCharIndexTripletData *arg1 = (btCharIndexTripletData *) 0 ;
  char result;
  
  SWIG_check_num_args("btCharIndexTripletData::m_pad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCharIndexTripletData::m_pad",1,"btCharIndexTripletData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCharIndexTripletData,0))){
    SWIG_fail_ptr("btCharIndexTripletData_m_pad_get",1,SWIGTYPE_p_btCharIndexTripletData);
  }
  
  result = (char) ((arg1)->m_pad);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCharIndexTripletData(lua_State* L) {
  int SWIG_arg = 0;
  btCharIndexTripletData *result = 0 ;
  
  SWIG_check_num_args("btCharIndexTripletData::btCharIndexTripletData",0,0)
  result = (btCharIndexTripletData *)new btCharIndexTripletData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCharIndexTripletData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCharIndexTripletData(void *obj) {
btCharIndexTripletData *arg1 = (btCharIndexTripletData *) obj;
delete arg1;
}
static swig_lua_method swig_btCharIndexTripletData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btCharIndexTripletData_attributes[] = {
    { "m_values", _wrap_btCharIndexTripletData_m_values_get, _wrap_btCharIndexTripletData_m_values_set},
    { "m_pad", _wrap_btCharIndexTripletData_m_pad_get, _wrap_btCharIndexTripletData_m_pad_set},
    {0,0,0}
};
static swig_lua_attribute swig_btCharIndexTripletData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCharIndexTripletData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCharIndexTripletData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCharIndexTripletData_bases[] = {0};
static const char *swig_btCharIndexTripletData_base_names[] = {0};
static swig_lua_class _wrap_class_btCharIndexTripletData = { "btCharIndexTripletData", &SWIGTYPE_p_btCharIndexTripletData,_wrap_new_btCharIndexTripletData, swig_delete_btCharIndexTripletData, swig_btCharIndexTripletData_methods, swig_btCharIndexTripletData_attributes, { "btCharIndexTripletData", swig_btCharIndexTripletData_cls_methods, swig_btCharIndexTripletData_cls_attributes, swig_btCharIndexTripletData_cls_constants }, swig_btCharIndexTripletData_bases, swig_btCharIndexTripletData_base_names };

static int _wrap_btMeshPartData_m_vertices3f_set(lua_State* L) {
  int SWIG_arg = 0;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btMeshPartData::m_vertices3f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMeshPartData::m_vertices3f",1,"btMeshPartData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btMeshPartData::m_vertices3f",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMeshPartData,0))){
    SWIG_fail_ptr("btMeshPartData_m_vertices3f_set",1,SWIGTYPE_p_btMeshPartData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btMeshPartData_m_vertices3f_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_vertices3f = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMeshPartData_m_vertices3f_get(lua_State* L) {
  int SWIG_arg = 0;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btMeshPartData::m_vertices3f",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMeshPartData::m_vertices3f",1,"btMeshPartData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMeshPartData,0))){
    SWIG_fail_ptr("btMeshPartData_m_vertices3f_get",1,SWIGTYPE_p_btMeshPartData);
  }
  
  result = (btVector3FloatData *) ((arg1)->m_vertices3f);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMeshPartData_m_vertices3d_set(lua_State* L) {
  int SWIG_arg = 0;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btMeshPartData::m_vertices3d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMeshPartData::m_vertices3d",1,"btMeshPartData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btMeshPartData::m_vertices3d",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMeshPartData,0))){
    SWIG_fail_ptr("btMeshPartData_m_vertices3d_set",1,SWIGTYPE_p_btMeshPartData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btMeshPartData_m_vertices3d_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_vertices3d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMeshPartData_m_vertices3d_get(lua_State* L) {
  int SWIG_arg = 0;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btMeshPartData::m_vertices3d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMeshPartData::m_vertices3d",1,"btMeshPartData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMeshPartData,0))){
    SWIG_fail_ptr("btMeshPartData_m_vertices3d_get",1,SWIGTYPE_p_btMeshPartData);
  }
  
  result = (btVector3DoubleData *) ((arg1)->m_vertices3d);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMeshPartData_m_indices32_set(lua_State* L) {
  int SWIG_arg = 0;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btIntIndexData *arg2 = (btIntIndexData *) 0 ;
  
  SWIG_check_num_args("btMeshPartData::m_indices32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMeshPartData::m_indices32",1,"btMeshPartData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btMeshPartData::m_indices32",2,"btIntIndexData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMeshPartData,0))){
    SWIG_fail_ptr("btMeshPartData_m_indices32_set",1,SWIGTYPE_p_btMeshPartData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btIntIndexData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btMeshPartData_m_indices32_set",2,SWIGTYPE_p_btIntIndexData);
  }
  
  if (arg1) (arg1)->m_indices32 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMeshPartData_m_indices32_get(lua_State* L) {
  int SWIG_arg = 0;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btIntIndexData *result = 0 ;
  
  SWIG_check_num_args("btMeshPartData::m_indices32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMeshPartData::m_indices32",1,"btMeshPartData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMeshPartData,0))){
    SWIG_fail_ptr("btMeshPartData_m_indices32_get",1,SWIGTYPE_p_btMeshPartData);
  }
  
  result = (btIntIndexData *) ((arg1)->m_indices32);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btIntIndexData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMeshPartData_m_3indices16_set(lua_State* L) {
  int SWIG_arg = 0;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btShortIntIndexTripletData *arg2 = (btShortIntIndexTripletData *) 0 ;
  
  SWIG_check_num_args("btMeshPartData::m_3indices16",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMeshPartData::m_3indices16",1,"btMeshPartData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btMeshPartData::m_3indices16",2,"btShortIntIndexTripletData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMeshPartData,0))){
    SWIG_fail_ptr("btMeshPartData_m_3indices16_set",1,SWIGTYPE_p_btMeshPartData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btShortIntIndexTripletData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btMeshPartData_m_3indices16_set",2,SWIGTYPE_p_btShortIntIndexTripletData);
  }
  
  if (arg1) (arg1)->m_3indices16 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMeshPartData_m_3indices16_get(lua_State* L) {
  int SWIG_arg = 0;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btShortIntIndexTripletData *result = 0 ;
  
  SWIG_check_num_args("btMeshPartData::m_3indices16",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMeshPartData::m_3indices16",1,"btMeshPartData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMeshPartData,0))){
    SWIG_fail_ptr("btMeshPartData_m_3indices16_get",1,SWIGTYPE_p_btMeshPartData);
  }
  
  result = (btShortIntIndexTripletData *) ((arg1)->m_3indices16);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btShortIntIndexTripletData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMeshPartData_m_3indices8_set(lua_State* L) {
  int SWIG_arg = 0;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btCharIndexTripletData *arg2 = (btCharIndexTripletData *) 0 ;
  
  SWIG_check_num_args("btMeshPartData::m_3indices8",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMeshPartData::m_3indices8",1,"btMeshPartData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btMeshPartData::m_3indices8",2,"btCharIndexTripletData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMeshPartData,0))){
    SWIG_fail_ptr("btMeshPartData_m_3indices8_set",1,SWIGTYPE_p_btMeshPartData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCharIndexTripletData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btMeshPartData_m_3indices8_set",2,SWIGTYPE_p_btCharIndexTripletData);
  }
  
  if (arg1) (arg1)->m_3indices8 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMeshPartData_m_3indices8_get(lua_State* L) {
  int SWIG_arg = 0;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btCharIndexTripletData *result = 0 ;
  
  SWIG_check_num_args("btMeshPartData::m_3indices8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMeshPartData::m_3indices8",1,"btMeshPartData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMeshPartData,0))){
    SWIG_fail_ptr("btMeshPartData_m_3indices8_get",1,SWIGTYPE_p_btMeshPartData);
  }
  
  result = (btCharIndexTripletData *) ((arg1)->m_3indices8);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCharIndexTripletData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMeshPartData_m_indices16_set(lua_State* L) {
  int SWIG_arg = 0;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btShortIntIndexData *arg2 = (btShortIntIndexData *) 0 ;
  
  SWIG_check_num_args("btMeshPartData::m_indices16",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMeshPartData::m_indices16",1,"btMeshPartData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btMeshPartData::m_indices16",2,"btShortIntIndexData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMeshPartData,0))){
    SWIG_fail_ptr("btMeshPartData_m_indices16_set",1,SWIGTYPE_p_btMeshPartData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btShortIntIndexData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btMeshPartData_m_indices16_set",2,SWIGTYPE_p_btShortIntIndexData);
  }
  
  if (arg1) (arg1)->m_indices16 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMeshPartData_m_indices16_get(lua_State* L) {
  int SWIG_arg = 0;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btShortIntIndexData *result = 0 ;
  
  SWIG_check_num_args("btMeshPartData::m_indices16",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMeshPartData::m_indices16",1,"btMeshPartData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMeshPartData,0))){
    SWIG_fail_ptr("btMeshPartData_m_indices16_get",1,SWIGTYPE_p_btMeshPartData);
  }
  
  result = (btShortIntIndexData *) ((arg1)->m_indices16);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btShortIntIndexData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMeshPartData_m_numTriangles_set(lua_State* L) {
  int SWIG_arg = 0;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btMeshPartData::m_numTriangles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMeshPartData::m_numTriangles",1,"btMeshPartData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btMeshPartData::m_numTriangles",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMeshPartData,0))){
    SWIG_fail_ptr("btMeshPartData_m_numTriangles_set",1,SWIGTYPE_p_btMeshPartData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numTriangles = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMeshPartData_m_numTriangles_get(lua_State* L) {
  int SWIG_arg = 0;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  int result;
  
  SWIG_check_num_args("btMeshPartData::m_numTriangles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMeshPartData::m_numTriangles",1,"btMeshPartData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMeshPartData,0))){
    SWIG_fail_ptr("btMeshPartData_m_numTriangles_get",1,SWIGTYPE_p_btMeshPartData);
  }
  
  result = (int) ((arg1)->m_numTriangles);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMeshPartData_m_numVertices_set(lua_State* L) {
  int SWIG_arg = 0;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btMeshPartData::m_numVertices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMeshPartData::m_numVertices",1,"btMeshPartData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btMeshPartData::m_numVertices",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMeshPartData,0))){
    SWIG_fail_ptr("btMeshPartData_m_numVertices_set",1,SWIGTYPE_p_btMeshPartData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numVertices = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMeshPartData_m_numVertices_get(lua_State* L) {
  int SWIG_arg = 0;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  int result;
  
  SWIG_check_num_args("btMeshPartData::m_numVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMeshPartData::m_numVertices",1,"btMeshPartData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMeshPartData,0))){
    SWIG_fail_ptr("btMeshPartData_m_numVertices_get",1,SWIGTYPE_p_btMeshPartData);
  }
  
  result = (int) ((arg1)->m_numVertices);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btMeshPartData(lua_State* L) {
  int SWIG_arg = 0;
  btMeshPartData *result = 0 ;
  
  SWIG_check_num_args("btMeshPartData::btMeshPartData",0,0)
  result = (btMeshPartData *)new btMeshPartData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMeshPartData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btMeshPartData(void *obj) {
btMeshPartData *arg1 = (btMeshPartData *) obj;
delete arg1;
}
static swig_lua_method swig_btMeshPartData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btMeshPartData_attributes[] = {
    { "m_vertices3f", _wrap_btMeshPartData_m_vertices3f_get, _wrap_btMeshPartData_m_vertices3f_set},
    { "m_vertices3d", _wrap_btMeshPartData_m_vertices3d_get, _wrap_btMeshPartData_m_vertices3d_set},
    { "m_indices32", _wrap_btMeshPartData_m_indices32_get, _wrap_btMeshPartData_m_indices32_set},
    { "m_3indices16", _wrap_btMeshPartData_m_3indices16_get, _wrap_btMeshPartData_m_3indices16_set},
    { "m_3indices8", _wrap_btMeshPartData_m_3indices8_get, _wrap_btMeshPartData_m_3indices8_set},
    { "m_indices16", _wrap_btMeshPartData_m_indices16_get, _wrap_btMeshPartData_m_indices16_set},
    { "m_numTriangles", _wrap_btMeshPartData_m_numTriangles_get, _wrap_btMeshPartData_m_numTriangles_set},
    { "m_numVertices", _wrap_btMeshPartData_m_numVertices_get, _wrap_btMeshPartData_m_numVertices_set},
    {0,0,0}
};
static swig_lua_attribute swig_btMeshPartData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btMeshPartData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btMeshPartData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btMeshPartData_bases[] = {0};
static const char *swig_btMeshPartData_base_names[] = {0};
static swig_lua_class _wrap_class_btMeshPartData = { "btMeshPartData", &SWIGTYPE_p_btMeshPartData,_wrap_new_btMeshPartData, swig_delete_btMeshPartData, swig_btMeshPartData_methods, swig_btMeshPartData_attributes, { "btMeshPartData", swig_btMeshPartData_cls_methods, swig_btMeshPartData_cls_attributes, swig_btMeshPartData_cls_constants }, swig_btMeshPartData_bases, swig_btMeshPartData_base_names };

static int _wrap_btStridingMeshInterfaceData_m_meshPartsPtr_set(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  btMeshPartData *arg2 = (btMeshPartData *) 0 ;
  
  SWIG_check_num_args("btStridingMeshInterfaceData::m_meshPartsPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterfaceData::m_meshPartsPtr",1,"btStridingMeshInterfaceData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btStridingMeshInterfaceData::m_meshPartsPtr",2,"btMeshPartData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterfaceData,0))){
    SWIG_fail_ptr("btStridingMeshInterfaceData_m_meshPartsPtr_set",1,SWIGTYPE_p_btStridingMeshInterfaceData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMeshPartData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btStridingMeshInterfaceData_m_meshPartsPtr_set",2,SWIGTYPE_p_btMeshPartData);
  }
  
  if (arg1) (arg1)->m_meshPartsPtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterfaceData_m_meshPartsPtr_get(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  btMeshPartData *result = 0 ;
  
  SWIG_check_num_args("btStridingMeshInterfaceData::m_meshPartsPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterfaceData::m_meshPartsPtr",1,"btStridingMeshInterfaceData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterfaceData,0))){
    SWIG_fail_ptr("btStridingMeshInterfaceData_m_meshPartsPtr_get",1,SWIGTYPE_p_btStridingMeshInterfaceData);
  }
  
  result = (btMeshPartData *) ((arg1)->m_meshPartsPtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMeshPartData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterfaceData_m_scaling_set(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btStridingMeshInterfaceData::m_scaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterfaceData::m_scaling",1,"btStridingMeshInterfaceData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btStridingMeshInterfaceData::m_scaling",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterfaceData,0))){
    SWIG_fail_ptr("btStridingMeshInterfaceData_m_scaling_set",1,SWIGTYPE_p_btStridingMeshInterfaceData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btStridingMeshInterfaceData_m_scaling_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_scaling = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterfaceData_m_scaling_get(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btStridingMeshInterfaceData::m_scaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterfaceData::m_scaling",1,"btStridingMeshInterfaceData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterfaceData,0))){
    SWIG_fail_ptr("btStridingMeshInterfaceData_m_scaling_get",1,SWIGTYPE_p_btStridingMeshInterfaceData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_scaling);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterfaceData_m_numMeshParts_set(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btStridingMeshInterfaceData::m_numMeshParts",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterfaceData::m_numMeshParts",1,"btStridingMeshInterfaceData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btStridingMeshInterfaceData::m_numMeshParts",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterfaceData,0))){
    SWIG_fail_ptr("btStridingMeshInterfaceData_m_numMeshParts_set",1,SWIGTYPE_p_btStridingMeshInterfaceData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numMeshParts = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterfaceData_m_numMeshParts_get(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  int result;
  
  SWIG_check_num_args("btStridingMeshInterfaceData::m_numMeshParts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterfaceData::m_numMeshParts",1,"btStridingMeshInterfaceData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterfaceData,0))){
    SWIG_fail_ptr("btStridingMeshInterfaceData_m_numMeshParts_get",1,SWIGTYPE_p_btStridingMeshInterfaceData);
  }
  
  result = (int) ((arg1)->m_numMeshParts);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterfaceData_m_padding_set(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btStridingMeshInterfaceData::m_padding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterfaceData::m_padding",1,"btStridingMeshInterfaceData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btStridingMeshInterfaceData::m_padding",2,"char [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterfaceData,0))){
    SWIG_fail_ptr("btStridingMeshInterfaceData_m_padding_set",1,SWIGTYPE_p_btStridingMeshInterfaceData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStridingMeshInterfaceData_m_padding_get(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btStridingMeshInterfaceData::m_padding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStridingMeshInterfaceData::m_padding",1,"btStridingMeshInterfaceData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterfaceData,0))){
    SWIG_fail_ptr("btStridingMeshInterfaceData_m_padding_get",1,SWIGTYPE_p_btStridingMeshInterfaceData);
  }
  
  result = (char *)(char *) ((arg1)->m_padding);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btStridingMeshInterfaceData(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterfaceData *result = 0 ;
  
  SWIG_check_num_args("btStridingMeshInterfaceData::btStridingMeshInterfaceData",0,0)
  result = (btStridingMeshInterfaceData *)new btStridingMeshInterfaceData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btStridingMeshInterfaceData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btStridingMeshInterfaceData(void *obj) {
btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) obj;
delete arg1;
}
static swig_lua_method swig_btStridingMeshInterfaceData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btStridingMeshInterfaceData_attributes[] = {
    { "m_meshPartsPtr", _wrap_btStridingMeshInterfaceData_m_meshPartsPtr_get, _wrap_btStridingMeshInterfaceData_m_meshPartsPtr_set},
    { "m_scaling", _wrap_btStridingMeshInterfaceData_m_scaling_get, _wrap_btStridingMeshInterfaceData_m_scaling_set},
    { "m_numMeshParts", _wrap_btStridingMeshInterfaceData_m_numMeshParts_get, _wrap_btStridingMeshInterfaceData_m_numMeshParts_set},
    { "m_padding", _wrap_btStridingMeshInterfaceData_m_padding_get, _wrap_btStridingMeshInterfaceData_m_padding_set},
    {0,0,0}
};
static swig_lua_attribute swig_btStridingMeshInterfaceData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btStridingMeshInterfaceData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btStridingMeshInterfaceData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btStridingMeshInterfaceData_bases[] = {0};
static const char *swig_btStridingMeshInterfaceData_base_names[] = {0};
static swig_lua_class _wrap_class_btStridingMeshInterfaceData = { "btStridingMeshInterfaceData", &SWIGTYPE_p_btStridingMeshInterfaceData,_wrap_new_btStridingMeshInterfaceData, swig_delete_btStridingMeshInterfaceData, swig_btStridingMeshInterfaceData_methods, swig_btStridingMeshInterfaceData_attributes, { "btStridingMeshInterfaceData", swig_btStridingMeshInterfaceData_cls_methods, swig_btStridingMeshInterfaceData_cls_attributes, swig_btStridingMeshInterfaceData_cls_constants }, swig_btStridingMeshInterfaceData_bases, swig_btStridingMeshInterfaceData_base_names };

static int _wrap_btTriangleMeshShape_localGetSupportingVertex(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btTriangleMeshShape::localGetSupportingVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShape::localGetSupportingVertex",1,"btTriangleMeshShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTriangleMeshShape::localGetSupportingVertex",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShape,0))){
    SWIG_fail_ptr("btTriangleMeshShape_localGetSupportingVertex",1,SWIGTYPE_p_btTriangleMeshShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleMeshShape_localGetSupportingVertex",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btTriangleMeshShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShape_localGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btTriangleMeshShape::localGetSupportingVertexWithoutMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShape::localGetSupportingVertexWithoutMargin",1,"btTriangleMeshShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTriangleMeshShape::localGetSupportingVertexWithoutMargin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShape,0))){
    SWIG_fail_ptr("btTriangleMeshShape_localGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btTriangleMeshShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleMeshShape_localGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btTriangleMeshShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShape_recalcLocalAabb(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  
  SWIG_check_num_args("btTriangleMeshShape::recalcLocalAabb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShape::recalcLocalAabb",1,"btTriangleMeshShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShape,0))){
    SWIG_fail_ptr("btTriangleMeshShape_recalcLocalAabb",1,SWIGTYPE_p_btTriangleMeshShape);
  }
  
  (arg1)->recalcLocalAabb();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShape_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btTriangleMeshShape::getAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShape::getAabb",1,"btTriangleMeshShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTriangleMeshShape::getAabb",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriangleMeshShape::getAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btTriangleMeshShape::getAabb",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShape,0))){
    SWIG_fail_ptr("btTriangleMeshShape_getAabb",1,SWIGTYPE_p_btTriangleMeshShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTriangleMeshShape_getAabb",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleMeshShape_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleMeshShape_getAabb",4,SWIGTYPE_p_btVector3);
  }
  
  ((btTriangleMeshShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShape_processAllTriangles(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btTriangleMeshShape::processAllTriangles",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShape::processAllTriangles",1,"btTriangleMeshShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleMeshShape::processAllTriangles",2,"btTriangleCallback *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriangleMeshShape::processAllTriangles",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btTriangleMeshShape::processAllTriangles",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShape,0))){
    SWIG_fail_ptr("btTriangleMeshShape_processAllTriangles",1,SWIGTYPE_p_btTriangleMeshShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTriangleCallback,0))){
    SWIG_fail_ptr("btTriangleMeshShape_processAllTriangles",2,SWIGTYPE_p_btTriangleCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleMeshShape_processAllTriangles",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleMeshShape_processAllTriangles",4,SWIGTYPE_p_btVector3);
  }
  
  ((btTriangleMeshShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShape_calculateLocalInertia(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btTriangleMeshShape::calculateLocalInertia",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShape::calculateLocalInertia",1,"btTriangleMeshShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleMeshShape::calculateLocalInertia",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriangleMeshShape::calculateLocalInertia",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShape,0))){
    SWIG_fail_ptr("btTriangleMeshShape_calculateLocalInertia",1,SWIGTYPE_p_btTriangleMeshShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleMeshShape_calculateLocalInertia",3,SWIGTYPE_p_btVector3);
  }
  
  ((btTriangleMeshShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShape_setLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btTriangleMeshShape::setLocalScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShape::setLocalScaling",1,"btTriangleMeshShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTriangleMeshShape::setLocalScaling",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShape,0))){
    SWIG_fail_ptr("btTriangleMeshShape_setLocalScaling",1,SWIGTYPE_p_btTriangleMeshShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleMeshShape_setLocalScaling",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShape_getLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTriangleMeshShape::getLocalScaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShape::getLocalScaling",1,"btTriangleMeshShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShape,0))){
    SWIG_fail_ptr("btTriangleMeshShape_getLocalScaling",1,SWIGTYPE_p_btTriangleMeshShape);
  }
  
  result = (btVector3 *) &((btTriangleMeshShape const *)arg1)->getLocalScaling();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShape_getMeshInterface__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btStridingMeshInterface *result = 0 ;
  
  SWIG_check_num_args("btTriangleMeshShape::getMeshInterface",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShape::getMeshInterface",1,"btTriangleMeshShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShape,0))){
    SWIG_fail_ptr("btTriangleMeshShape_getMeshInterface",1,SWIGTYPE_p_btTriangleMeshShape);
  }
  
  result = (btStridingMeshInterface *)(arg1)->getMeshInterface();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btStridingMeshInterface,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShape_getMeshInterface__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btStridingMeshInterface *result = 0 ;
  
  SWIG_check_num_args("btTriangleMeshShape::getMeshInterface",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShape::getMeshInterface",1,"btTriangleMeshShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShape,0))){
    SWIG_fail_ptr("btTriangleMeshShape_getMeshInterface",1,SWIGTYPE_p_btTriangleMeshShape);
  }
  
  result = (btStridingMeshInterface *)((btTriangleMeshShape const *)arg1)->getMeshInterface();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btStridingMeshInterface,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShape_getMeshInterface(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTriangleMeshShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btTriangleMeshShape_getMeshInterface__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTriangleMeshShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btTriangleMeshShape_getMeshInterface__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btTriangleMeshShape_getMeshInterface'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTriangleMeshShape::getMeshInterface()\n"
    "    btTriangleMeshShape::getMeshInterface() const\n");
  lua_error(L);return 0;
}


static int _wrap_btTriangleMeshShape_getLocalAabbMin(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTriangleMeshShape::getLocalAabbMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShape::getLocalAabbMin",1,"btTriangleMeshShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShape,0))){
    SWIG_fail_ptr("btTriangleMeshShape_getLocalAabbMin",1,SWIGTYPE_p_btTriangleMeshShape);
  }
  
  result = (btVector3 *) &((btTriangleMeshShape const *)arg1)->getLocalAabbMin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShape_getLocalAabbMax(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTriangleMeshShape::getLocalAabbMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShape::getLocalAabbMax",1,"btTriangleMeshShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShape,0))){
    SWIG_fail_ptr("btTriangleMeshShape_getLocalAabbMax",1,SWIGTYPE_p_btTriangleMeshShape);
  }
  
  result = (btVector3 *) &((btTriangleMeshShape const *)arg1)->getLocalAabbMax();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShape_getName(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btTriangleMeshShape::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShape::getName",1,"btTriangleMeshShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShape,0))){
    SWIG_fail_ptr("btTriangleMeshShape_getName",1,SWIGTYPE_p_btTriangleMeshShape);
  }
  
  result = (char *)((btTriangleMeshShape const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTriangleMeshShape(void *obj) {
btTriangleMeshShape *arg1 = (btTriangleMeshShape *) obj;
delete arg1;
}
static swig_lua_method swig_btTriangleMeshShape_methods[] = {
    {"localGetSupportingVertex", _wrap_btTriangleMeshShape_localGetSupportingVertex}, 
    {"localGetSupportingVertexWithoutMargin", _wrap_btTriangleMeshShape_localGetSupportingVertexWithoutMargin}, 
    {"recalcLocalAabb", _wrap_btTriangleMeshShape_recalcLocalAabb}, 
    {"getAabb", _wrap_btTriangleMeshShape_getAabb}, 
    {"processAllTriangles", _wrap_btTriangleMeshShape_processAllTriangles}, 
    {"calculateLocalInertia", _wrap_btTriangleMeshShape_calculateLocalInertia}, 
    {"setLocalScaling", _wrap_btTriangleMeshShape_setLocalScaling}, 
    {"getLocalScaling", _wrap_btTriangleMeshShape_getLocalScaling}, 
    {"getMeshInterface", _wrap_btTriangleMeshShape_getMeshInterface}, 
    {"getLocalAabbMin", _wrap_btTriangleMeshShape_getLocalAabbMin}, 
    {"getLocalAabbMax", _wrap_btTriangleMeshShape_getLocalAabbMax}, 
    {"getName", _wrap_btTriangleMeshShape_getName}, 
    {0,0}
};
static swig_lua_attribute swig_btTriangleMeshShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btTriangleMeshShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTriangleMeshShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTriangleMeshShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTriangleMeshShape_bases[] = {0,0};
static const char *swig_btTriangleMeshShape_base_names[] = {"btConcaveShape *",0};
static swig_lua_class _wrap_class_btTriangleMeshShape = { "btTriangleMeshShape", &SWIGTYPE_p_btTriangleMeshShape,0, swig_delete_btTriangleMeshShape, swig_btTriangleMeshShape_methods, swig_btTriangleMeshShape_attributes, { "btTriangleMeshShape", swig_btTriangleMeshShape_cls_methods, swig_btTriangleMeshShape_cls_attributes, swig_btTriangleMeshShape_cls_constants }, swig_btTriangleMeshShape_bases, swig_btTriangleMeshShape_base_names };

static int _wrap_new_btOptimizedBvh(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvh *result = 0 ;
  
  SWIG_check_num_args("btOptimizedBvh::btOptimizedBvh",0,0)
  result = (btOptimizedBvh *)new btOptimizedBvh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btOptimizedBvh,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvh_build(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btStridingMeshInterface *arg2 = (btStridingMeshInterface *) 0 ;
  bool arg3 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  SWIG_check_num_args("btOptimizedBvh::build",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvh::build",1,"btOptimizedBvh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOptimizedBvh::build",2,"btStridingMeshInterface *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("btOptimizedBvh::build",3,"bool");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btOptimizedBvh::build",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btOptimizedBvh::build",5,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvh,0))){
    SWIG_fail_ptr("btOptimizedBvh_build",1,SWIGTYPE_p_btOptimizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btOptimizedBvh_build",2,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btOptimizedBvh_build",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btOptimizedBvh_build",5,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->build(arg2,arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvh_reportAabbOverlappingNodex(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btNodeOverlapCallback *arg2 = (btNodeOverlapCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btOptimizedBvh::reportAabbOverlappingNodex",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvh::reportAabbOverlappingNodex",1,"btOptimizedBvh const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOptimizedBvh::reportAabbOverlappingNodex",2,"btNodeOverlapCallback *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btOptimizedBvh::reportAabbOverlappingNodex",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btOptimizedBvh::reportAabbOverlappingNodex",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvh,0))){
    SWIG_fail_ptr("btOptimizedBvh_reportAabbOverlappingNodex",1,SWIGTYPE_p_btOptimizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btNodeOverlapCallback,0))){
    SWIG_fail_ptr("btOptimizedBvh_reportAabbOverlappingNodex",2,SWIGTYPE_p_btNodeOverlapCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btOptimizedBvh_reportAabbOverlappingNodex",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btOptimizedBvh_reportAabbOverlappingNodex",4,SWIGTYPE_p_btVector3);
  }
  
  ((btOptimizedBvh const *)arg1)->reportAabbOverlappingNodex(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvh_reportSphereOverlappingNodex(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btNodeOverlapCallback *arg2 = (btNodeOverlapCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btOptimizedBvh::reportSphereOverlappingNodex",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvh::reportSphereOverlappingNodex",1,"btOptimizedBvh const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOptimizedBvh::reportSphereOverlappingNodex",2,"btNodeOverlapCallback *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btOptimizedBvh::reportSphereOverlappingNodex",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btOptimizedBvh::reportSphereOverlappingNodex",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvh,0))){
    SWIG_fail_ptr("btOptimizedBvh_reportSphereOverlappingNodex",1,SWIGTYPE_p_btOptimizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btNodeOverlapCallback,0))){
    SWIG_fail_ptr("btOptimizedBvh_reportSphereOverlappingNodex",2,SWIGTYPE_p_btNodeOverlapCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btOptimizedBvh_reportSphereOverlappingNodex",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btOptimizedBvh_reportSphereOverlappingNodex",4,SWIGTYPE_p_btVector3);
  }
  
  ((btOptimizedBvh const *)arg1)->reportSphereOverlappingNodex(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvh_quantizeWithClamp(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btOptimizedBvh::quantizeWithClamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvh::quantizeWithClamp",1,"btOptimizedBvh const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOptimizedBvh::quantizeWithClamp",2,"unsigned short *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btOptimizedBvh::quantizeWithClamp",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvh,0))){
    SWIG_fail_ptr("btOptimizedBvh_quantizeWithClamp",1,SWIGTYPE_p_btOptimizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("btOptimizedBvh_quantizeWithClamp",2,SWIGTYPE_p_unsigned_short);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btOptimizedBvh_quantizeWithClamp",3,SWIGTYPE_p_btVector3);
  }
  
  ((btOptimizedBvh const *)arg1)->quantizeWithClamp(arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvh_unQuantize(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btOptimizedBvh::unQuantize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvh::unQuantize",1,"btOptimizedBvh const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOptimizedBvh::unQuantize",2,"unsigned short const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvh,0))){
    SWIG_fail_ptr("btOptimizedBvh_unQuantize",1,SWIGTYPE_p_btOptimizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("btOptimizedBvh_unQuantize",2,SWIGTYPE_p_unsigned_short);
  }
  
  result = ((btOptimizedBvh const *)arg1)->unQuantize((unsigned short const *)arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvh_refit(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btStridingMeshInterface *arg2 = (btStridingMeshInterface *) 0 ;
  
  SWIG_check_num_args("btOptimizedBvh::refit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvh::refit",1,"btOptimizedBvh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOptimizedBvh::refit",2,"btStridingMeshInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvh,0))){
    SWIG_fail_ptr("btOptimizedBvh_refit",1,SWIGTYPE_p_btOptimizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btOptimizedBvh_refit",2,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  (arg1)->refit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvh_refitPartial(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btStridingMeshInterface *arg2 = (btStridingMeshInterface *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btOptimizedBvh::refitPartial",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvh::refitPartial",1,"btOptimizedBvh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOptimizedBvh::refitPartial",2,"btStridingMeshInterface *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btOptimizedBvh::refitPartial",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btOptimizedBvh::refitPartial",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvh,0))){
    SWIG_fail_ptr("btOptimizedBvh_refitPartial",1,SWIGTYPE_p_btOptimizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btOptimizedBvh_refitPartial",2,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btOptimizedBvh_refitPartial",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btOptimizedBvh_refitPartial",4,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->refitPartial(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvh_updateBvhNodes(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btStridingMeshInterface *arg2 = (btStridingMeshInterface *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("btOptimizedBvh::updateBvhNodes",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvh::updateBvhNodes",1,"btOptimizedBvh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOptimizedBvh::updateBvhNodes",2,"btStridingMeshInterface *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btOptimizedBvh::updateBvhNodes",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btOptimizedBvh::updateBvhNodes",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btOptimizedBvh::updateBvhNodes",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvh,0))){
    SWIG_fail_ptr("btOptimizedBvh_updateBvhNodes",1,SWIGTYPE_p_btOptimizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("btOptimizedBvh_updateBvhNodes",2,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->updateBvhNodes(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvh_getQuantizedNodeArray(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  QuantizedNodeArray *result = 0 ;
  
  SWIG_check_num_args("btOptimizedBvh::getQuantizedNodeArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvh::getQuantizedNodeArray",1,"btOptimizedBvh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvh,0))){
    SWIG_fail_ptr("btOptimizedBvh_getQuantizedNodeArray",1,SWIGTYPE_p_btOptimizedBvh);
  }
  
  result = (QuantizedNodeArray *) &(arg1)->getQuantizedNodeArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvh_getSubtreeInfoArray(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  BvhSubtreeInfoArray *result = 0 ;
  
  SWIG_check_num_args("btOptimizedBvh::getSubtreeInfoArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvh::getSubtreeInfoArray",1,"btOptimizedBvh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvh,0))){
    SWIG_fail_ptr("btOptimizedBvh_getSubtreeInfoArray",1,SWIGTYPE_p_btOptimizedBvh);
  }
  
  result = (BvhSubtreeInfoArray *) &(arg1)->getSubtreeInfoArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btOptimizedBvh(void *obj) {
btOptimizedBvh *arg1 = (btOptimizedBvh *) obj;
delete arg1;
}
static swig_lua_method swig_btOptimizedBvh_methods[] = {
    {"build", _wrap_btOptimizedBvh_build}, 
    {"reportAabbOverlappingNodex", _wrap_btOptimizedBvh_reportAabbOverlappingNodex}, 
    {"reportSphereOverlappingNodex", _wrap_btOptimizedBvh_reportSphereOverlappingNodex}, 
    {"quantizeWithClamp", _wrap_btOptimizedBvh_quantizeWithClamp}, 
    {"unQuantize", _wrap_btOptimizedBvh_unQuantize}, 
    {"refit", _wrap_btOptimizedBvh_refit}, 
    {"refitPartial", _wrap_btOptimizedBvh_refitPartial}, 
    {"updateBvhNodes", _wrap_btOptimizedBvh_updateBvhNodes}, 
    {"getQuantizedNodeArray", _wrap_btOptimizedBvh_getQuantizedNodeArray}, 
    {"getSubtreeInfoArray", _wrap_btOptimizedBvh_getSubtreeInfoArray}, 
    {0,0}
};
static swig_lua_attribute swig_btOptimizedBvh_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btOptimizedBvh_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btOptimizedBvh_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btOptimizedBvh_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btOptimizedBvh_bases[] = {0};
static const char *swig_btOptimizedBvh_base_names[] = {0};
static swig_lua_class _wrap_class_btOptimizedBvh = { "btOptimizedBvh", &SWIGTYPE_p_btOptimizedBvh,_wrap_new_btOptimizedBvh, swig_delete_btOptimizedBvh, swig_btOptimizedBvh_methods, swig_btOptimizedBvh_attributes, { "btOptimizedBvh", swig_btOptimizedBvh_cls_methods, swig_btOptimizedBvh_cls_attributes, swig_btOptimizedBvh_cls_constants }, swig_btOptimizedBvh_bases, swig_btOptimizedBvh_base_names };

static int _wrap_btQuantizedBvhNode_m_quantizedAabbMin_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  unsigned short *arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhNode::m_quantizedAabbMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhNode::m_quantizedAabbMin",1,"btQuantizedBvhNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvhNode::m_quantizedAabbMin",2,"unsigned short [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhNode,0))){
    SWIG_fail_ptr("btQuantizedBvhNode_m_quantizedAabbMin_set",1,SWIGTYPE_p_btQuantizedBvhNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("btQuantizedBvhNode_m_quantizedAabbMin_set",2,SWIGTYPE_p_unsigned_short);
  }
  
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhNode_m_quantizedAabbMin_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhNode::m_quantizedAabbMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhNode::m_quantizedAabbMin",1,"btQuantizedBvhNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhNode,0))){
    SWIG_fail_ptr("btQuantizedBvhNode_m_quantizedAabbMin_get",1,SWIGTYPE_p_btQuantizedBvhNode);
  }
  
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhNode_m_quantizedAabbMax_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  unsigned short *arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhNode::m_quantizedAabbMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhNode::m_quantizedAabbMax",1,"btQuantizedBvhNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvhNode::m_quantizedAabbMax",2,"unsigned short [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhNode,0))){
    SWIG_fail_ptr("btQuantizedBvhNode_m_quantizedAabbMax_set",1,SWIGTYPE_p_btQuantizedBvhNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("btQuantizedBvhNode_m_quantizedAabbMax_set",2,SWIGTYPE_p_unsigned_short);
  }
  
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhNode_m_quantizedAabbMax_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhNode::m_quantizedAabbMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhNode::m_quantizedAabbMax",1,"btQuantizedBvhNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhNode,0))){
    SWIG_fail_ptr("btQuantizedBvhNode_m_quantizedAabbMax_get",1,SWIGTYPE_p_btQuantizedBvhNode);
  }
  
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMax);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhNode_m_escapeIndexOrTriangleIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhNode::m_escapeIndexOrTriangleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhNode::m_escapeIndexOrTriangleIndex",1,"btQuantizedBvhNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuantizedBvhNode::m_escapeIndexOrTriangleIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhNode,0))){
    SWIG_fail_ptr("btQuantizedBvhNode_m_escapeIndexOrTriangleIndex_set",1,SWIGTYPE_p_btQuantizedBvhNode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_escapeIndexOrTriangleIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhNode_m_escapeIndexOrTriangleIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvhNode::m_escapeIndexOrTriangleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhNode::m_escapeIndexOrTriangleIndex",1,"btQuantizedBvhNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhNode,0))){
    SWIG_fail_ptr("btQuantizedBvhNode_m_escapeIndexOrTriangleIndex_get",1,SWIGTYPE_p_btQuantizedBvhNode);
  }
  
  result = (int) ((arg1)->m_escapeIndexOrTriangleIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhNode_isLeafNode(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("btQuantizedBvhNode::isLeafNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhNode::isLeafNode",1,"btQuantizedBvhNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhNode,0))){
    SWIG_fail_ptr("btQuantizedBvhNode_isLeafNode",1,SWIGTYPE_p_btQuantizedBvhNode);
  }
  
  result = (bool)((btQuantizedBvhNode const *)arg1)->isLeafNode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhNode_getEscapeIndex(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvhNode::getEscapeIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhNode::getEscapeIndex",1,"btQuantizedBvhNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhNode,0))){
    SWIG_fail_ptr("btQuantizedBvhNode_getEscapeIndex",1,SWIGTYPE_p_btQuantizedBvhNode);
  }
  
  result = (int)((btQuantizedBvhNode const *)arg1)->getEscapeIndex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhNode_getTriangleIndex(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvhNode::getTriangleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhNode::getTriangleIndex",1,"btQuantizedBvhNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhNode,0))){
    SWIG_fail_ptr("btQuantizedBvhNode_getTriangleIndex",1,SWIGTYPE_p_btQuantizedBvhNode);
  }
  
  result = (int)((btQuantizedBvhNode const *)arg1)->getTriangleIndex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhNode_getPartId(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvhNode::getPartId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhNode::getPartId",1,"btQuantizedBvhNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhNode,0))){
    SWIG_fail_ptr("btQuantizedBvhNode_getPartId",1,SWIGTYPE_p_btQuantizedBvhNode);
  }
  
  result = (int)((btQuantizedBvhNode const *)arg1)->getPartId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btQuantizedBvhNode(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNode *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhNode::btQuantizedBvhNode",0,0)
  result = (btQuantizedBvhNode *)new btQuantizedBvhNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuantizedBvhNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btQuantizedBvhNode(void *obj) {
btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) obj;
delete arg1;
}
static swig_lua_method swig_btQuantizedBvhNode_methods[] = {
    {"isLeafNode", _wrap_btQuantizedBvhNode_isLeafNode}, 
    {"getEscapeIndex", _wrap_btQuantizedBvhNode_getEscapeIndex}, 
    {"getTriangleIndex", _wrap_btQuantizedBvhNode_getTriangleIndex}, 
    {"getPartId", _wrap_btQuantizedBvhNode_getPartId}, 
    {0,0}
};
static swig_lua_attribute swig_btQuantizedBvhNode_attributes[] = {
    { "m_quantizedAabbMin", _wrap_btQuantizedBvhNode_m_quantizedAabbMin_get, _wrap_btQuantizedBvhNode_m_quantizedAabbMin_set},
    { "m_quantizedAabbMax", _wrap_btQuantizedBvhNode_m_quantizedAabbMax_get, _wrap_btQuantizedBvhNode_m_quantizedAabbMax_set},
    { "m_escapeIndexOrTriangleIndex", _wrap_btQuantizedBvhNode_m_escapeIndexOrTriangleIndex_get, _wrap_btQuantizedBvhNode_m_escapeIndexOrTriangleIndex_set},
    {0,0,0}
};
static swig_lua_attribute swig_btQuantizedBvhNode_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btQuantizedBvhNode_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btQuantizedBvhNode_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btQuantizedBvhNode_bases[] = {0};
static const char *swig_btQuantizedBvhNode_base_names[] = {0};
static swig_lua_class _wrap_class_btQuantizedBvhNode = { "btQuantizedBvhNode", &SWIGTYPE_p_btQuantizedBvhNode,_wrap_new_btQuantizedBvhNode, swig_delete_btQuantizedBvhNode, swig_btQuantizedBvhNode_methods, swig_btQuantizedBvhNode_attributes, { "btQuantizedBvhNode", swig_btQuantizedBvhNode_cls_methods, swig_btQuantizedBvhNode_cls_attributes, swig_btQuantizedBvhNode_cls_constants }, swig_btQuantizedBvhNode_bases, swig_btQuantizedBvhNode_base_names };

static int _wrap_btOptimizedBvhNode_m_aabbMinOrg_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNode::m_aabbMinOrg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNode::m_aabbMinOrg",1,"btOptimizedBvhNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOptimizedBvhNode::m_aabbMinOrg",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNode,0))){
    SWIG_fail_ptr("btOptimizedBvhNode_m_aabbMinOrg_set",1,SWIGTYPE_p_btOptimizedBvhNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btOptimizedBvhNode_m_aabbMinOrg_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_aabbMinOrg = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNode_m_aabbMinOrg_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNode::m_aabbMinOrg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNode::m_aabbMinOrg",1,"btOptimizedBvhNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNode,0))){
    SWIG_fail_ptr("btOptimizedBvhNode_m_aabbMinOrg_get",1,SWIGTYPE_p_btOptimizedBvhNode);
  }
  
  result = (btVector3 *)& ((arg1)->m_aabbMinOrg);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNode_m_aabbMaxOrg_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNode::m_aabbMaxOrg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNode::m_aabbMaxOrg",1,"btOptimizedBvhNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOptimizedBvhNode::m_aabbMaxOrg",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNode,0))){
    SWIG_fail_ptr("btOptimizedBvhNode_m_aabbMaxOrg_set",1,SWIGTYPE_p_btOptimizedBvhNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btOptimizedBvhNode_m_aabbMaxOrg_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_aabbMaxOrg = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNode_m_aabbMaxOrg_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNode::m_aabbMaxOrg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNode::m_aabbMaxOrg",1,"btOptimizedBvhNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNode,0))){
    SWIG_fail_ptr("btOptimizedBvhNode_m_aabbMaxOrg_get",1,SWIGTYPE_p_btOptimizedBvhNode);
  }
  
  result = (btVector3 *)& ((arg1)->m_aabbMaxOrg);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNode_m_escapeIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btOptimizedBvhNode::m_escapeIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNode::m_escapeIndex",1,"btOptimizedBvhNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btOptimizedBvhNode::m_escapeIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNode,0))){
    SWIG_fail_ptr("btOptimizedBvhNode_m_escapeIndex_set",1,SWIGTYPE_p_btOptimizedBvhNode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_escapeIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNode_m_escapeIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int result;
  
  SWIG_check_num_args("btOptimizedBvhNode::m_escapeIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNode::m_escapeIndex",1,"btOptimizedBvhNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNode,0))){
    SWIG_fail_ptr("btOptimizedBvhNode_m_escapeIndex_get",1,SWIGTYPE_p_btOptimizedBvhNode);
  }
  
  result = (int) ((arg1)->m_escapeIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNode_m_subPart_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btOptimizedBvhNode::m_subPart",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNode::m_subPart",1,"btOptimizedBvhNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btOptimizedBvhNode::m_subPart",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNode,0))){
    SWIG_fail_ptr("btOptimizedBvhNode_m_subPart_set",1,SWIGTYPE_p_btOptimizedBvhNode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_subPart = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNode_m_subPart_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int result;
  
  SWIG_check_num_args("btOptimizedBvhNode::m_subPart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNode::m_subPart",1,"btOptimizedBvhNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNode,0))){
    SWIG_fail_ptr("btOptimizedBvhNode_m_subPart_get",1,SWIGTYPE_p_btOptimizedBvhNode);
  }
  
  result = (int) ((arg1)->m_subPart);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNode_m_triangleIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btOptimizedBvhNode::m_triangleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNode::m_triangleIndex",1,"btOptimizedBvhNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btOptimizedBvhNode::m_triangleIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNode,0))){
    SWIG_fail_ptr("btOptimizedBvhNode_m_triangleIndex_set",1,SWIGTYPE_p_btOptimizedBvhNode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_triangleIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNode_m_triangleIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int result;
  
  SWIG_check_num_args("btOptimizedBvhNode::m_triangleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNode::m_triangleIndex",1,"btOptimizedBvhNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNode,0))){
    SWIG_fail_ptr("btOptimizedBvhNode_m_triangleIndex_get",1,SWIGTYPE_p_btOptimizedBvhNode);
  }
  
  result = (int) ((arg1)->m_triangleIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNode_m_padding_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btOptimizedBvhNode::m_padding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNode::m_padding",1,"btOptimizedBvhNode *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btOptimizedBvhNode::m_padding",2,"char [20]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNode,0))){
    SWIG_fail_ptr("btOptimizedBvhNode_m_padding_set",1,SWIGTYPE_p_btOptimizedBvhNode);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 20-1);
      arg1->m_padding[20-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNode_m_padding_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNode::m_padding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNode::m_padding",1,"btOptimizedBvhNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNode,0))){
    SWIG_fail_ptr("btOptimizedBvhNode_m_padding_get",1,SWIGTYPE_p_btOptimizedBvhNode);
  }
  
  result = (char *)(char *) ((arg1)->m_padding);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btOptimizedBvhNode(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNode *result = 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNode::btOptimizedBvhNode",0,0)
  result = (btOptimizedBvhNode *)new btOptimizedBvhNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btOptimizedBvhNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btOptimizedBvhNode(void *obj) {
btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) obj;
delete arg1;
}
static swig_lua_method swig_btOptimizedBvhNode_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btOptimizedBvhNode_attributes[] = {
    { "m_aabbMinOrg", _wrap_btOptimizedBvhNode_m_aabbMinOrg_get, _wrap_btOptimizedBvhNode_m_aabbMinOrg_set},
    { "m_aabbMaxOrg", _wrap_btOptimizedBvhNode_m_aabbMaxOrg_get, _wrap_btOptimizedBvhNode_m_aabbMaxOrg_set},
    { "m_escapeIndex", _wrap_btOptimizedBvhNode_m_escapeIndex_get, _wrap_btOptimizedBvhNode_m_escapeIndex_set},
    { "m_subPart", _wrap_btOptimizedBvhNode_m_subPart_get, _wrap_btOptimizedBvhNode_m_subPart_set},
    { "m_triangleIndex", _wrap_btOptimizedBvhNode_m_triangleIndex_get, _wrap_btOptimizedBvhNode_m_triangleIndex_set},
    { "m_padding", _wrap_btOptimizedBvhNode_m_padding_get, _wrap_btOptimizedBvhNode_m_padding_set},
    {0,0,0}
};
static swig_lua_attribute swig_btOptimizedBvhNode_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btOptimizedBvhNode_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btOptimizedBvhNode_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btOptimizedBvhNode_bases[] = {0};
static const char *swig_btOptimizedBvhNode_base_names[] = {0};
static swig_lua_class _wrap_class_btOptimizedBvhNode = { "btOptimizedBvhNode", &SWIGTYPE_p_btOptimizedBvhNode,_wrap_new_btOptimizedBvhNode, swig_delete_btOptimizedBvhNode, swig_btOptimizedBvhNode_methods, swig_btOptimizedBvhNode_attributes, { "btOptimizedBvhNode", swig_btOptimizedBvhNode_cls_methods, swig_btOptimizedBvhNode_cls_attributes, swig_btOptimizedBvhNode_cls_constants }, swig_btOptimizedBvhNode_bases, swig_btOptimizedBvhNode_base_names };

static int _wrap_btBvhSubtreeInfo_m_quantizedAabbMin_set(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  unsigned short *arg2 ;
  
  SWIG_check_num_args("btBvhSubtreeInfo::m_quantizedAabbMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfo::m_quantizedAabbMin",1,"btBvhSubtreeInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBvhSubtreeInfo::m_quantizedAabbMin",2,"unsigned short [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfo,0))){
    SWIG_fail_ptr("btBvhSubtreeInfo_m_quantizedAabbMin_set",1,SWIGTYPE_p_btBvhSubtreeInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("btBvhSubtreeInfo_m_quantizedAabbMin_set",2,SWIGTYPE_p_unsigned_short);
  }
  
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhSubtreeInfo_m_quantizedAabbMin_get(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("btBvhSubtreeInfo::m_quantizedAabbMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfo::m_quantizedAabbMin",1,"btBvhSubtreeInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfo,0))){
    SWIG_fail_ptr("btBvhSubtreeInfo_m_quantizedAabbMin_get",1,SWIGTYPE_p_btBvhSubtreeInfo);
  }
  
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhSubtreeInfo_m_quantizedAabbMax_set(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  unsigned short *arg2 ;
  
  SWIG_check_num_args("btBvhSubtreeInfo::m_quantizedAabbMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfo::m_quantizedAabbMax",1,"btBvhSubtreeInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBvhSubtreeInfo::m_quantizedAabbMax",2,"unsigned short [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfo,0))){
    SWIG_fail_ptr("btBvhSubtreeInfo_m_quantizedAabbMax_set",1,SWIGTYPE_p_btBvhSubtreeInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("btBvhSubtreeInfo_m_quantizedAabbMax_set",2,SWIGTYPE_p_unsigned_short);
  }
  
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhSubtreeInfo_m_quantizedAabbMax_get(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("btBvhSubtreeInfo::m_quantizedAabbMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfo::m_quantizedAabbMax",1,"btBvhSubtreeInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfo,0))){
    SWIG_fail_ptr("btBvhSubtreeInfo_m_quantizedAabbMax_get",1,SWIGTYPE_p_btBvhSubtreeInfo);
  }
  
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMax);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhSubtreeInfo_m_rootNodeIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btBvhSubtreeInfo::m_rootNodeIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfo::m_rootNodeIndex",1,"btBvhSubtreeInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btBvhSubtreeInfo::m_rootNodeIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfo,0))){
    SWIG_fail_ptr("btBvhSubtreeInfo_m_rootNodeIndex_set",1,SWIGTYPE_p_btBvhSubtreeInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_rootNodeIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhSubtreeInfo_m_rootNodeIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("btBvhSubtreeInfo::m_rootNodeIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfo::m_rootNodeIndex",1,"btBvhSubtreeInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfo,0))){
    SWIG_fail_ptr("btBvhSubtreeInfo_m_rootNodeIndex_get",1,SWIGTYPE_p_btBvhSubtreeInfo);
  }
  
  result = (int) ((arg1)->m_rootNodeIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhSubtreeInfo_m_subtreeSize_set(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btBvhSubtreeInfo::m_subtreeSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfo::m_subtreeSize",1,"btBvhSubtreeInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btBvhSubtreeInfo::m_subtreeSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfo,0))){
    SWIG_fail_ptr("btBvhSubtreeInfo_m_subtreeSize_set",1,SWIGTYPE_p_btBvhSubtreeInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_subtreeSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhSubtreeInfo_m_subtreeSize_get(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("btBvhSubtreeInfo::m_subtreeSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfo::m_subtreeSize",1,"btBvhSubtreeInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfo,0))){
    SWIG_fail_ptr("btBvhSubtreeInfo_m_subtreeSize_get",1,SWIGTYPE_p_btBvhSubtreeInfo);
  }
  
  result = (int) ((arg1)->m_subtreeSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhSubtreeInfo_m_padding_set(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int *arg2 ;
  
  SWIG_check_num_args("btBvhSubtreeInfo::m_padding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfo::m_padding",1,"btBvhSubtreeInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBvhSubtreeInfo::m_padding",2,"int [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfo,0))){
    SWIG_fail_ptr("btBvhSubtreeInfo_m_padding_set",1,SWIGTYPE_p_btBvhSubtreeInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btBvhSubtreeInfo_m_padding_set",2,SWIGTYPE_p_int);
  }
  
  {
    size_t ii;
    int *b = (int *) arg1->m_padding;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhSubtreeInfo_m_padding_get(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("btBvhSubtreeInfo::m_padding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfo::m_padding",1,"btBvhSubtreeInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfo,0))){
    SWIG_fail_ptr("btBvhSubtreeInfo_m_padding_get",1,SWIGTYPE_p_btBvhSubtreeInfo);
  }
  
  result = (int *)(int *) ((arg1)->m_padding);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBvhSubtreeInfo(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfo *result = 0 ;
  
  SWIG_check_num_args("btBvhSubtreeInfo::btBvhSubtreeInfo",0,0)
  result = (btBvhSubtreeInfo *)new btBvhSubtreeInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBvhSubtreeInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhSubtreeInfo_setAabbFromQuantizeNode(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  btQuantizedBvhNode *arg2 = 0 ;
  
  SWIG_check_num_args("btBvhSubtreeInfo::setAabbFromQuantizeNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfo::setAabbFromQuantizeNode",1,"btBvhSubtreeInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBvhSubtreeInfo::setAabbFromQuantizeNode",2,"btQuantizedBvhNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfo,0))){
    SWIG_fail_ptr("btBvhSubtreeInfo_setAabbFromQuantizeNode",1,SWIGTYPE_p_btBvhSubtreeInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuantizedBvhNode,0))){
    SWIG_fail_ptr("btBvhSubtreeInfo_setAabbFromQuantizeNode",2,SWIGTYPE_p_btQuantizedBvhNode);
  }
  
  (arg1)->setAabbFromQuantizeNode((btQuantizedBvhNode const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btBvhSubtreeInfo(void *obj) {
btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) obj;
delete arg1;
}
static swig_lua_method swig_btBvhSubtreeInfo_methods[] = {
    {"setAabbFromQuantizeNode", _wrap_btBvhSubtreeInfo_setAabbFromQuantizeNode}, 
    {0,0}
};
static swig_lua_attribute swig_btBvhSubtreeInfo_attributes[] = {
    { "m_quantizedAabbMin", _wrap_btBvhSubtreeInfo_m_quantizedAabbMin_get, _wrap_btBvhSubtreeInfo_m_quantizedAabbMin_set},
    { "m_quantizedAabbMax", _wrap_btBvhSubtreeInfo_m_quantizedAabbMax_get, _wrap_btBvhSubtreeInfo_m_quantizedAabbMax_set},
    { "m_rootNodeIndex", _wrap_btBvhSubtreeInfo_m_rootNodeIndex_get, _wrap_btBvhSubtreeInfo_m_rootNodeIndex_set},
    { "m_subtreeSize", _wrap_btBvhSubtreeInfo_m_subtreeSize_get, _wrap_btBvhSubtreeInfo_m_subtreeSize_set},
    { "m_padding", _wrap_btBvhSubtreeInfo_m_padding_get, _wrap_btBvhSubtreeInfo_m_padding_set},
    {0,0,0}
};
static swig_lua_attribute swig_btBvhSubtreeInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btBvhSubtreeInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btBvhSubtreeInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btBvhSubtreeInfo_bases[] = {0};
static const char *swig_btBvhSubtreeInfo_base_names[] = {0};
static swig_lua_class _wrap_class_btBvhSubtreeInfo = { "btBvhSubtreeInfo", &SWIGTYPE_p_btBvhSubtreeInfo,_wrap_new_btBvhSubtreeInfo, swig_delete_btBvhSubtreeInfo, swig_btBvhSubtreeInfo_methods, swig_btBvhSubtreeInfo_attributes, { "btBvhSubtreeInfo", swig_btBvhSubtreeInfo_cls_methods, swig_btBvhSubtreeInfo_cls_attributes, swig_btBvhSubtreeInfo_cls_constants }, swig_btBvhSubtreeInfo_bases, swig_btBvhSubtreeInfo_base_names };

static int _wrap_btNodeOverlapCallback_processNode(lua_State* L) {
  int SWIG_arg = 0;
  btNodeOverlapCallback *arg1 = (btNodeOverlapCallback *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("btNodeOverlapCallback::processNode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btNodeOverlapCallback::processNode",1,"btNodeOverlapCallback *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btNodeOverlapCallback::processNode",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btNodeOverlapCallback::processNode",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btNodeOverlapCallback,0))){
    SWIG_fail_ptr("btNodeOverlapCallback_processNode",1,SWIGTYPE_p_btNodeOverlapCallback);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->processNode(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btNodeOverlapCallback(void *obj) {
btNodeOverlapCallback *arg1 = (btNodeOverlapCallback *) obj;
delete arg1;
}
static swig_lua_method swig_btNodeOverlapCallback_methods[] = {
    {"processNode", _wrap_btNodeOverlapCallback_processNode}, 
    {0,0}
};
static swig_lua_attribute swig_btNodeOverlapCallback_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btNodeOverlapCallback_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btNodeOverlapCallback_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btNodeOverlapCallback_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btNodeOverlapCallback_bases[] = {0};
static const char *swig_btNodeOverlapCallback_base_names[] = {0};
static swig_lua_class _wrap_class_btNodeOverlapCallback = { "btNodeOverlapCallback", &SWIGTYPE_p_btNodeOverlapCallback,0, swig_delete_btNodeOverlapCallback, swig_btNodeOverlapCallback_methods, swig_btNodeOverlapCallback_attributes, { "btNodeOverlapCallback", swig_btNodeOverlapCallback_cls_methods, swig_btNodeOverlapCallback_cls_attributes, swig_btNodeOverlapCallback_cls_constants }, swig_btNodeOverlapCallback_bases, swig_btNodeOverlapCallback_base_names };

static int _wrap_new_btQuantizedBvh(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvh::btQuantizedBvh",0,0)
  result = (btQuantizedBvh *)new btQuantizedBvh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuantizedBvh,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_setQuantizationValues__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  SWIG_check_num_args("btQuantizedBvh::setQuantizationValues",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::setQuantizationValues",1,"btQuantizedBvh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btQuantizedBvh::setQuantizationValues",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btQuantizedBvh::setQuantizationValues",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btQuantizedBvh::setQuantizationValues",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_setQuantizationValues",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btQuantizedBvh_setQuantizationValues",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btQuantizedBvh_setQuantizationValues",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  (arg1)->setQuantizationValues((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_setQuantizationValues__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btQuantizedBvh::setQuantizationValues",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::setQuantizationValues",1,"btQuantizedBvh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btQuantizedBvh::setQuantizationValues",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btQuantizedBvh::setQuantizationValues",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_setQuantizationValues",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btQuantizedBvh_setQuantizationValues",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btQuantizedBvh_setQuantizationValues",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setQuantizationValues((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_setQuantizationValues(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btQuantizedBvh, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btQuantizedBvh_setQuantizationValues__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btQuantizedBvh, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btQuantizedBvh_setQuantizationValues__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btQuantizedBvh_setQuantizationValues'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btQuantizedBvh::setQuantizationValues(btVector3 const &,btVector3 const &,btScalar)\n"
    "    btQuantizedBvh::setQuantizationValues(btVector3 const &,btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btQuantizedBvh_getLeafNodeArray(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  QuantizedNodeArray *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvh::getLeafNodeArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::getLeafNodeArray",1,"btQuantizedBvh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_getLeafNodeArray",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  result = (QuantizedNodeArray *) &(arg1)->getLeafNodeArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_buildInternal(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  
  SWIG_check_num_args("btQuantizedBvh::buildInternal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::buildInternal",1,"btQuantizedBvh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_buildInternal",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  (arg1)->buildInternal();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_reportAabbOverlappingNodex(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btNodeOverlapCallback *arg2 = (btNodeOverlapCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btQuantizedBvh::reportAabbOverlappingNodex",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::reportAabbOverlappingNodex",1,"btQuantizedBvh const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvh::reportAabbOverlappingNodex",2,"btNodeOverlapCallback *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btQuantizedBvh::reportAabbOverlappingNodex",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btQuantizedBvh::reportAabbOverlappingNodex",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_reportAabbOverlappingNodex",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btNodeOverlapCallback,0))){
    SWIG_fail_ptr("btQuantizedBvh_reportAabbOverlappingNodex",2,SWIGTYPE_p_btNodeOverlapCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btQuantizedBvh_reportAabbOverlappingNodex",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btQuantizedBvh_reportAabbOverlappingNodex",4,SWIGTYPE_p_btVector3);
  }
  
  ((btQuantizedBvh const *)arg1)->reportAabbOverlappingNodex(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_reportRayOverlappingNodex(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btNodeOverlapCallback *arg2 = (btNodeOverlapCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btQuantizedBvh::reportRayOverlappingNodex",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::reportRayOverlappingNodex",1,"btQuantizedBvh const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvh::reportRayOverlappingNodex",2,"btNodeOverlapCallback *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btQuantizedBvh::reportRayOverlappingNodex",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btQuantizedBvh::reportRayOverlappingNodex",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_reportRayOverlappingNodex",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btNodeOverlapCallback,0))){
    SWIG_fail_ptr("btQuantizedBvh_reportRayOverlappingNodex",2,SWIGTYPE_p_btNodeOverlapCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btQuantizedBvh_reportRayOverlappingNodex",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btQuantizedBvh_reportRayOverlappingNodex",4,SWIGTYPE_p_btVector3);
  }
  
  ((btQuantizedBvh const *)arg1)->reportRayOverlappingNodex(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_reportBoxCastOverlappingNodex(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btNodeOverlapCallback *arg2 = (btNodeOverlapCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  SWIG_check_num_args("btQuantizedBvh::reportBoxCastOverlappingNodex",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::reportBoxCastOverlappingNodex",1,"btQuantizedBvh const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvh::reportBoxCastOverlappingNodex",2,"btNodeOverlapCallback *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btQuantizedBvh::reportBoxCastOverlappingNodex",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btQuantizedBvh::reportBoxCastOverlappingNodex",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btQuantizedBvh::reportBoxCastOverlappingNodex",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btQuantizedBvh::reportBoxCastOverlappingNodex",6,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_reportBoxCastOverlappingNodex",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btNodeOverlapCallback,0))){
    SWIG_fail_ptr("btQuantizedBvh_reportBoxCastOverlappingNodex",2,SWIGTYPE_p_btNodeOverlapCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btQuantizedBvh_reportBoxCastOverlappingNodex",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btQuantizedBvh_reportBoxCastOverlappingNodex",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btQuantizedBvh_reportBoxCastOverlappingNodex",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btQuantizedBvh_reportBoxCastOverlappingNodex",6,SWIGTYPE_p_btVector3);
  }
  
  ((btQuantizedBvh const *)arg1)->reportBoxCastOverlappingNodex(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_quantize(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btQuantizedBvh::quantize",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::quantize",1,"btQuantizedBvh const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvh::quantize",2,"unsigned short *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btQuantizedBvh::quantize",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btQuantizedBvh::quantize",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_quantize",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("btQuantizedBvh_quantize",2,SWIGTYPE_p_unsigned_short);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btQuantizedBvh_quantize",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btQuantizedBvh const *)arg1)->quantize(arg2,(btVector3 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_quantizeWithClamp(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btQuantizedBvh::quantizeWithClamp",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::quantizeWithClamp",1,"btQuantizedBvh const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvh::quantizeWithClamp",2,"unsigned short *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btQuantizedBvh::quantizeWithClamp",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btQuantizedBvh::quantizeWithClamp",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_quantizeWithClamp",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("btQuantizedBvh_quantizeWithClamp",2,SWIGTYPE_p_unsigned_short);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btQuantizedBvh_quantizeWithClamp",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btQuantizedBvh const *)arg1)->quantizeWithClamp(arg2,(btVector3 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_unQuantize(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btQuantizedBvh::unQuantize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::unQuantize",1,"btQuantizedBvh const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvh::unQuantize",2,"unsigned short const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_unQuantize",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("btQuantizedBvh_unQuantize",2,SWIGTYPE_p_unsigned_short);
  }
  
  result = ((btQuantizedBvh const *)arg1)->unQuantize((unsigned short const *)arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_setTraversalMode(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btQuantizedBvh::btTraversalMode arg2 ;
  
  SWIG_check_num_args("btQuantizedBvh::setTraversalMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::setTraversalMode",1,"btQuantizedBvh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuantizedBvh::setTraversalMode",2,"btQuantizedBvh::btTraversalMode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_setTraversalMode",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  arg2 = (btQuantizedBvh::btTraversalMode)(int)lua_tonumber(L, 2);
  (arg1)->setTraversalMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_getQuantizedNodeArray(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  QuantizedNodeArray *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvh::getQuantizedNodeArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::getQuantizedNodeArray",1,"btQuantizedBvh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_getQuantizedNodeArray",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  result = (QuantizedNodeArray *) &(arg1)->getQuantizedNodeArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_getSubtreeInfoArray(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  BvhSubtreeInfoArray *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvh::getSubtreeInfoArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::getSubtreeInfoArray",1,"btQuantizedBvh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_getSubtreeInfoArray",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  result = (BvhSubtreeInfoArray *) &(arg1)->getSubtreeInfoArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("btQuantizedBvh::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::calculateSerializeBufferSize",1,"btQuantizedBvh const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_calculateSerializeBufferSize",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  result = (unsigned int)((btQuantizedBvh const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_serialize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  bool arg4 ;
  bool result;
  
  SWIG_check_num_args("btQuantizedBvh::serialize",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::serialize",1,"btQuantizedBvh const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvh::serialize",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btQuantizedBvh::serialize",3,"unsigned int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("btQuantizedBvh::serialize",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_serialize",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btQuantizedBvh_serialize");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)((btQuantizedBvh const *)arg1)->serialize(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_deSerializeInPlace(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  btQuantizedBvh *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvh::deSerializeInPlace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::deSerializeInPlace",1,"void *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuantizedBvh::deSerializeInPlace",2,"unsigned int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("btQuantizedBvh::deSerializeInPlace",3,"bool");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"btQuantizedBvh_deSerializeInPlace");
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (btQuantizedBvh *)btQuantizedBvh::deSerializeInPlace(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuantizedBvh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_getAlignmentSerializationPadding(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("btQuantizedBvh::getAlignmentSerializationPadding",0,0)
  result = (unsigned int)btQuantizedBvh::getAlignmentSerializationPadding();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_calculateSerializeBufferSizeNew(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvh::calculateSerializeBufferSizeNew",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::calculateSerializeBufferSizeNew",1,"btQuantizedBvh const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_calculateSerializeBufferSizeNew",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  result = (int)((btQuantizedBvh const *)arg1)->calculateSerializeBufferSizeNew();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_serialize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvh::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::serialize",1,"btQuantizedBvh const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvh::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btQuantizedBvh::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_serialize",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btQuantizedBvh_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btQuantizedBvh_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  result = (char *)((btQuantizedBvh const *)arg1)->serialize(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_serialize(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btQuantizedBvh, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btSerializer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btQuantizedBvh_serialize__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btQuantizedBvh, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_btQuantizedBvh_serialize__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btQuantizedBvh_serialize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btQuantizedBvh::serialize(void *,unsigned int,bool) const\n"
    "    btQuantizedBvh::serialize(void *,btSerializer *) const\n");
  lua_error(L);return 0;
}


static int _wrap_btQuantizedBvh_deSerializeFloat(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btQuantizedBvhFloatData *arg2 = 0 ;
  
  SWIG_check_num_args("btQuantizedBvh::deSerializeFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::deSerializeFloat",1,"btQuantizedBvh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btQuantizedBvh::deSerializeFloat",2,"btQuantizedBvhFloatData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_deSerializeFloat",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvh_deSerializeFloat",2,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  (arg1)->deSerializeFloat(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_deSerializeDouble(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btQuantizedBvhDoubleData *arg2 = 0 ;
  
  SWIG_check_num_args("btQuantizedBvh::deSerializeDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::deSerializeDouble",1,"btQuantizedBvh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btQuantizedBvh::deSerializeDouble",2,"btQuantizedBvhDoubleData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_deSerializeDouble",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvh_deSerializeDouble",2,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  (arg1)->deSerializeDouble(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvh_isQuantized(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  bool result;
  
  SWIG_check_num_args("btQuantizedBvh::isQuantized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvh::isQuantized",1,"btQuantizedBvh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvh,0))){
    SWIG_fail_ptr("btQuantizedBvh_isQuantized",1,SWIGTYPE_p_btQuantizedBvh);
  }
  
  result = (bool)(arg1)->isQuantized();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btQuantizedBvh(void *obj) {
btQuantizedBvh *arg1 = (btQuantizedBvh *) obj;
delete arg1;
}
static swig_lua_method swig_btQuantizedBvh_methods[] = {
    {"setQuantizationValues", _wrap_btQuantizedBvh_setQuantizationValues}, 
    {"getLeafNodeArray", _wrap_btQuantizedBvh_getLeafNodeArray}, 
    {"buildInternal", _wrap_btQuantizedBvh_buildInternal}, 
    {"reportAabbOverlappingNodex", _wrap_btQuantizedBvh_reportAabbOverlappingNodex}, 
    {"reportRayOverlappingNodex", _wrap_btQuantizedBvh_reportRayOverlappingNodex}, 
    {"reportBoxCastOverlappingNodex", _wrap_btQuantizedBvh_reportBoxCastOverlappingNodex}, 
    {"quantize", _wrap_btQuantizedBvh_quantize}, 
    {"quantizeWithClamp", _wrap_btQuantizedBvh_quantizeWithClamp}, 
    {"unQuantize", _wrap_btQuantizedBvh_unQuantize}, 
    {"setTraversalMode", _wrap_btQuantizedBvh_setTraversalMode}, 
    {"getQuantizedNodeArray", _wrap_btQuantizedBvh_getQuantizedNodeArray}, 
    {"getSubtreeInfoArray", _wrap_btQuantizedBvh_getSubtreeInfoArray}, 
    {"calculateSerializeBufferSize", _wrap_btQuantizedBvh_calculateSerializeBufferSize}, 
    {"calculateSerializeBufferSizeNew", _wrap_btQuantizedBvh_calculateSerializeBufferSizeNew}, 
    {"serialize", _wrap_btQuantizedBvh_serialize}, 
    {"deSerializeFloat", _wrap_btQuantizedBvh_deSerializeFloat}, 
    {"deSerializeDouble", _wrap_btQuantizedBvh_deSerializeDouble}, 
    {"isQuantized", _wrap_btQuantizedBvh_isQuantized}, 
    {0,0}
};
static swig_lua_attribute swig_btQuantizedBvh_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btQuantizedBvh_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btQuantizedBvh_cls_methods[] = {
    {"deSerializeInPlace", _wrap_btQuantizedBvh_deSerializeInPlace}, 
    {"getAlignmentSerializationPadding", _wrap_btQuantizedBvh_getAlignmentSerializationPadding}, 
    {0,0}
};
static swig_lua_const_info swig_btQuantizedBvh_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("TRAVERSAL_STACKLESS", btQuantizedBvh::TRAVERSAL_STACKLESS)},
    {SWIG_LUA_CONSTTAB_INT("TRAVERSAL_STACKLESS_CACHE_FRIENDLY", btQuantizedBvh::TRAVERSAL_STACKLESS_CACHE_FRIENDLY)},
    {SWIG_LUA_CONSTTAB_INT("TRAVERSAL_RECURSIVE", btQuantizedBvh::TRAVERSAL_RECURSIVE)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btQuantizedBvh_bases[] = {0};
static const char *swig_btQuantizedBvh_base_names[] = {0};
static swig_lua_class _wrap_class_btQuantizedBvh = { "btQuantizedBvh", &SWIGTYPE_p_btQuantizedBvh,_wrap_new_btQuantizedBvh, swig_delete_btQuantizedBvh, swig_btQuantizedBvh_methods, swig_btQuantizedBvh_attributes, { "btQuantizedBvh", swig_btQuantizedBvh_cls_methods, swig_btQuantizedBvh_cls_attributes, swig_btQuantizedBvh_cls_constants }, swig_btQuantizedBvh_bases, swig_btQuantizedBvh_base_names };

static int _wrap_btBvhSubtreeInfoData_m_rootNodeIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btBvhSubtreeInfoData::m_rootNodeIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfoData::m_rootNodeIndex",1,"btBvhSubtreeInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btBvhSubtreeInfoData::m_rootNodeIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfoData,0))){
    SWIG_fail_ptr("btBvhSubtreeInfoData_m_rootNodeIndex_set",1,SWIGTYPE_p_btBvhSubtreeInfoData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_rootNodeIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhSubtreeInfoData_m_rootNodeIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  int result;
  
  SWIG_check_num_args("btBvhSubtreeInfoData::m_rootNodeIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfoData::m_rootNodeIndex",1,"btBvhSubtreeInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfoData,0))){
    SWIG_fail_ptr("btBvhSubtreeInfoData_m_rootNodeIndex_get",1,SWIGTYPE_p_btBvhSubtreeInfoData);
  }
  
  result = (int) ((arg1)->m_rootNodeIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhSubtreeInfoData_m_subtreeSize_set(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btBvhSubtreeInfoData::m_subtreeSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfoData::m_subtreeSize",1,"btBvhSubtreeInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btBvhSubtreeInfoData::m_subtreeSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfoData,0))){
    SWIG_fail_ptr("btBvhSubtreeInfoData_m_subtreeSize_set",1,SWIGTYPE_p_btBvhSubtreeInfoData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_subtreeSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhSubtreeInfoData_m_subtreeSize_get(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  int result;
  
  SWIG_check_num_args("btBvhSubtreeInfoData::m_subtreeSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfoData::m_subtreeSize",1,"btBvhSubtreeInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfoData,0))){
    SWIG_fail_ptr("btBvhSubtreeInfoData_m_subtreeSize_get",1,SWIGTYPE_p_btBvhSubtreeInfoData);
  }
  
  result = (int) ((arg1)->m_subtreeSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhSubtreeInfoData_m_quantizedAabbMin_set(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  unsigned short *arg2 ;
  
  SWIG_check_num_args("btBvhSubtreeInfoData::m_quantizedAabbMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfoData::m_quantizedAabbMin",1,"btBvhSubtreeInfoData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBvhSubtreeInfoData::m_quantizedAabbMin",2,"unsigned short [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfoData,0))){
    SWIG_fail_ptr("btBvhSubtreeInfoData_m_quantizedAabbMin_set",1,SWIGTYPE_p_btBvhSubtreeInfoData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("btBvhSubtreeInfoData_m_quantizedAabbMin_set",2,SWIGTYPE_p_unsigned_short);
  }
  
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhSubtreeInfoData_m_quantizedAabbMin_get(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("btBvhSubtreeInfoData::m_quantizedAabbMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfoData::m_quantizedAabbMin",1,"btBvhSubtreeInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfoData,0))){
    SWIG_fail_ptr("btBvhSubtreeInfoData_m_quantizedAabbMin_get",1,SWIGTYPE_p_btBvhSubtreeInfoData);
  }
  
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhSubtreeInfoData_m_quantizedAabbMax_set(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  unsigned short *arg2 ;
  
  SWIG_check_num_args("btBvhSubtreeInfoData::m_quantizedAabbMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfoData::m_quantizedAabbMax",1,"btBvhSubtreeInfoData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBvhSubtreeInfoData::m_quantizedAabbMax",2,"unsigned short [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfoData,0))){
    SWIG_fail_ptr("btBvhSubtreeInfoData_m_quantizedAabbMax_set",1,SWIGTYPE_p_btBvhSubtreeInfoData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("btBvhSubtreeInfoData_m_quantizedAabbMax_set",2,SWIGTYPE_p_unsigned_short);
  }
  
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhSubtreeInfoData_m_quantizedAabbMax_get(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("btBvhSubtreeInfoData::m_quantizedAabbMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhSubtreeInfoData::m_quantizedAabbMax",1,"btBvhSubtreeInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhSubtreeInfoData,0))){
    SWIG_fail_ptr("btBvhSubtreeInfoData_m_quantizedAabbMax_get",1,SWIGTYPE_p_btBvhSubtreeInfoData);
  }
  
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMax);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBvhSubtreeInfoData(lua_State* L) {
  int SWIG_arg = 0;
  btBvhSubtreeInfoData *result = 0 ;
  
  SWIG_check_num_args("btBvhSubtreeInfoData::btBvhSubtreeInfoData",0,0)
  result = (btBvhSubtreeInfoData *)new btBvhSubtreeInfoData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBvhSubtreeInfoData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btBvhSubtreeInfoData(void *obj) {
btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) obj;
delete arg1;
}
static swig_lua_method swig_btBvhSubtreeInfoData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btBvhSubtreeInfoData_attributes[] = {
    { "m_rootNodeIndex", _wrap_btBvhSubtreeInfoData_m_rootNodeIndex_get, _wrap_btBvhSubtreeInfoData_m_rootNodeIndex_set},
    { "m_subtreeSize", _wrap_btBvhSubtreeInfoData_m_subtreeSize_get, _wrap_btBvhSubtreeInfoData_m_subtreeSize_set},
    { "m_quantizedAabbMin", _wrap_btBvhSubtreeInfoData_m_quantizedAabbMin_get, _wrap_btBvhSubtreeInfoData_m_quantizedAabbMin_set},
    { "m_quantizedAabbMax", _wrap_btBvhSubtreeInfoData_m_quantizedAabbMax_get, _wrap_btBvhSubtreeInfoData_m_quantizedAabbMax_set},
    {0,0,0}
};
static swig_lua_attribute swig_btBvhSubtreeInfoData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btBvhSubtreeInfoData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btBvhSubtreeInfoData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btBvhSubtreeInfoData_bases[] = {0};
static const char *swig_btBvhSubtreeInfoData_base_names[] = {0};
static swig_lua_class _wrap_class_btBvhSubtreeInfoData = { "btBvhSubtreeInfoData", &SWIGTYPE_p_btBvhSubtreeInfoData,_wrap_new_btBvhSubtreeInfoData, swig_delete_btBvhSubtreeInfoData, swig_btBvhSubtreeInfoData_methods, swig_btBvhSubtreeInfoData_attributes, { "btBvhSubtreeInfoData", swig_btBvhSubtreeInfoData_cls_methods, swig_btBvhSubtreeInfoData_cls_attributes, swig_btBvhSubtreeInfoData_cls_constants }, swig_btBvhSubtreeInfoData_bases, swig_btBvhSubtreeInfoData_base_names };

static int _wrap_btOptimizedBvhNodeFloatData_m_aabbMinOrg_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeFloatData::m_aabbMinOrg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_aabbMinOrg",1,"btOptimizedBvhNodeFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_aabbMinOrg",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeFloatData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeFloatData_m_aabbMinOrg_set",1,SWIGTYPE_p_btOptimizedBvhNodeFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeFloatData_m_aabbMinOrg_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_aabbMinOrg = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeFloatData_m_aabbMinOrg_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeFloatData::m_aabbMinOrg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_aabbMinOrg",1,"btOptimizedBvhNodeFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeFloatData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeFloatData_m_aabbMinOrg_get",1,SWIGTYPE_p_btOptimizedBvhNodeFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_aabbMinOrg);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeFloatData_m_aabbMaxOrg_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeFloatData::m_aabbMaxOrg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_aabbMaxOrg",1,"btOptimizedBvhNodeFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_aabbMaxOrg",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeFloatData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeFloatData_m_aabbMaxOrg_set",1,SWIGTYPE_p_btOptimizedBvhNodeFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeFloatData_m_aabbMaxOrg_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_aabbMaxOrg = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeFloatData_m_aabbMaxOrg_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeFloatData::m_aabbMaxOrg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_aabbMaxOrg",1,"btOptimizedBvhNodeFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeFloatData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeFloatData_m_aabbMaxOrg_get",1,SWIGTYPE_p_btOptimizedBvhNodeFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_aabbMaxOrg);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeFloatData_m_escapeIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeFloatData::m_escapeIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_escapeIndex",1,"btOptimizedBvhNodeFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_escapeIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeFloatData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeFloatData_m_escapeIndex_set",1,SWIGTYPE_p_btOptimizedBvhNodeFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_escapeIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeFloatData_m_escapeIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btOptimizedBvhNodeFloatData::m_escapeIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_escapeIndex",1,"btOptimizedBvhNodeFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeFloatData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeFloatData_m_escapeIndex_get",1,SWIGTYPE_p_btOptimizedBvhNodeFloatData);
  }
  
  result = (int) ((arg1)->m_escapeIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeFloatData_m_subPart_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeFloatData::m_subPart",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_subPart",1,"btOptimizedBvhNodeFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_subPart",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeFloatData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeFloatData_m_subPart_set",1,SWIGTYPE_p_btOptimizedBvhNodeFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_subPart = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeFloatData_m_subPart_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btOptimizedBvhNodeFloatData::m_subPart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_subPart",1,"btOptimizedBvhNodeFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeFloatData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeFloatData_m_subPart_get",1,SWIGTYPE_p_btOptimizedBvhNodeFloatData);
  }
  
  result = (int) ((arg1)->m_subPart);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeFloatData_m_triangleIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeFloatData::m_triangleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_triangleIndex",1,"btOptimizedBvhNodeFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_triangleIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeFloatData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeFloatData_m_triangleIndex_set",1,SWIGTYPE_p_btOptimizedBvhNodeFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_triangleIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeFloatData_m_triangleIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btOptimizedBvhNodeFloatData::m_triangleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_triangleIndex",1,"btOptimizedBvhNodeFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeFloatData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeFloatData_m_triangleIndex_get",1,SWIGTYPE_p_btOptimizedBvhNodeFloatData);
  }
  
  result = (int) ((arg1)->m_triangleIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeFloatData_m_pad_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeFloatData::m_pad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_pad",1,"btOptimizedBvhNodeFloatData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_pad",2,"char [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeFloatData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeFloatData_m_pad_set",1,SWIGTYPE_p_btOptimizedBvhNodeFloatData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 4-1);
      arg1->m_pad[4-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeFloatData_m_pad_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeFloatData::m_pad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeFloatData::m_pad",1,"btOptimizedBvhNodeFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeFloatData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeFloatData_m_pad_get",1,SWIGTYPE_p_btOptimizedBvhNodeFloatData);
  }
  
  result = (char *)(char *) ((arg1)->m_pad);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btOptimizedBvhNodeFloatData(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeFloatData *result = 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeFloatData::btOptimizedBvhNodeFloatData",0,0)
  result = (btOptimizedBvhNodeFloatData *)new btOptimizedBvhNodeFloatData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btOptimizedBvhNodeFloatData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btOptimizedBvhNodeFloatData(void *obj) {
btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) obj;
delete arg1;
}
static swig_lua_method swig_btOptimizedBvhNodeFloatData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btOptimizedBvhNodeFloatData_attributes[] = {
    { "m_aabbMinOrg", _wrap_btOptimizedBvhNodeFloatData_m_aabbMinOrg_get, _wrap_btOptimizedBvhNodeFloatData_m_aabbMinOrg_set},
    { "m_aabbMaxOrg", _wrap_btOptimizedBvhNodeFloatData_m_aabbMaxOrg_get, _wrap_btOptimizedBvhNodeFloatData_m_aabbMaxOrg_set},
    { "m_escapeIndex", _wrap_btOptimizedBvhNodeFloatData_m_escapeIndex_get, _wrap_btOptimizedBvhNodeFloatData_m_escapeIndex_set},
    { "m_subPart", _wrap_btOptimizedBvhNodeFloatData_m_subPart_get, _wrap_btOptimizedBvhNodeFloatData_m_subPart_set},
    { "m_triangleIndex", _wrap_btOptimizedBvhNodeFloatData_m_triangleIndex_get, _wrap_btOptimizedBvhNodeFloatData_m_triangleIndex_set},
    { "m_pad", _wrap_btOptimizedBvhNodeFloatData_m_pad_get, _wrap_btOptimizedBvhNodeFloatData_m_pad_set},
    {0,0,0}
};
static swig_lua_attribute swig_btOptimizedBvhNodeFloatData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btOptimizedBvhNodeFloatData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btOptimizedBvhNodeFloatData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btOptimizedBvhNodeFloatData_bases[] = {0};
static const char *swig_btOptimizedBvhNodeFloatData_base_names[] = {0};
static swig_lua_class _wrap_class_btOptimizedBvhNodeFloatData = { "btOptimizedBvhNodeFloatData", &SWIGTYPE_p_btOptimizedBvhNodeFloatData,_wrap_new_btOptimizedBvhNodeFloatData, swig_delete_btOptimizedBvhNodeFloatData, swig_btOptimizedBvhNodeFloatData_methods, swig_btOptimizedBvhNodeFloatData_attributes, { "btOptimizedBvhNodeFloatData", swig_btOptimizedBvhNodeFloatData_cls_methods, swig_btOptimizedBvhNodeFloatData_cls_attributes, swig_btOptimizedBvhNodeFloatData_cls_constants }, swig_btOptimizedBvhNodeFloatData_bases, swig_btOptimizedBvhNodeFloatData_base_names };

static int _wrap_btOptimizedBvhNodeDoubleData_m_aabbMinOrg_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeDoubleData::m_aabbMinOrg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_aabbMinOrg",1,"btOptimizedBvhNodeDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_aabbMinOrg",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeDoubleData_m_aabbMinOrg_set",1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeDoubleData_m_aabbMinOrg_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_aabbMinOrg = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeDoubleData_m_aabbMinOrg_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeDoubleData::m_aabbMinOrg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_aabbMinOrg",1,"btOptimizedBvhNodeDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeDoubleData_m_aabbMinOrg_get",1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_aabbMinOrg);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeDoubleData_m_aabbMaxOrg_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeDoubleData::m_aabbMaxOrg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_aabbMaxOrg",1,"btOptimizedBvhNodeDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_aabbMaxOrg",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeDoubleData_m_aabbMaxOrg_set",1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeDoubleData_m_aabbMaxOrg_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_aabbMaxOrg = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeDoubleData_m_aabbMaxOrg_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeDoubleData::m_aabbMaxOrg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_aabbMaxOrg",1,"btOptimizedBvhNodeDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeDoubleData_m_aabbMaxOrg_get",1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_aabbMaxOrg);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeDoubleData_m_escapeIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeDoubleData::m_escapeIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_escapeIndex",1,"btOptimizedBvhNodeDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_escapeIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeDoubleData_m_escapeIndex_set",1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_escapeIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeDoubleData_m_escapeIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btOptimizedBvhNodeDoubleData::m_escapeIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_escapeIndex",1,"btOptimizedBvhNodeDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeDoubleData_m_escapeIndex_get",1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData);
  }
  
  result = (int) ((arg1)->m_escapeIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeDoubleData_m_subPart_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeDoubleData::m_subPart",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_subPart",1,"btOptimizedBvhNodeDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_subPart",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeDoubleData_m_subPart_set",1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_subPart = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeDoubleData_m_subPart_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btOptimizedBvhNodeDoubleData::m_subPart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_subPart",1,"btOptimizedBvhNodeDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeDoubleData_m_subPart_get",1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData);
  }
  
  result = (int) ((arg1)->m_subPart);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeDoubleData_m_triangleIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeDoubleData::m_triangleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_triangleIndex",1,"btOptimizedBvhNodeDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_triangleIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeDoubleData_m_triangleIndex_set",1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_triangleIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeDoubleData_m_triangleIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btOptimizedBvhNodeDoubleData::m_triangleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_triangleIndex",1,"btOptimizedBvhNodeDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeDoubleData_m_triangleIndex_get",1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData);
  }
  
  result = (int) ((arg1)->m_triangleIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeDoubleData_m_pad_set(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeDoubleData::m_pad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_pad",1,"btOptimizedBvhNodeDoubleData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_pad",2,"char [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeDoubleData_m_pad_set",1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 4-1);
      arg1->m_pad[4-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btOptimizedBvhNodeDoubleData_m_pad_get(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeDoubleData::m_pad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btOptimizedBvhNodeDoubleData::m_pad",1,"btOptimizedBvhNodeDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData,0))){
    SWIG_fail_ptr("btOptimizedBvhNodeDoubleData_m_pad_get",1,SWIGTYPE_p_btOptimizedBvhNodeDoubleData);
  }
  
  result = (char *)(char *) ((arg1)->m_pad);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btOptimizedBvhNodeDoubleData(lua_State* L) {
  int SWIG_arg = 0;
  btOptimizedBvhNodeDoubleData *result = 0 ;
  
  SWIG_check_num_args("btOptimizedBvhNodeDoubleData::btOptimizedBvhNodeDoubleData",0,0)
  result = (btOptimizedBvhNodeDoubleData *)new btOptimizedBvhNodeDoubleData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btOptimizedBvhNodeDoubleData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btOptimizedBvhNodeDoubleData(void *obj) {
btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) obj;
delete arg1;
}
static swig_lua_method swig_btOptimizedBvhNodeDoubleData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btOptimizedBvhNodeDoubleData_attributes[] = {
    { "m_aabbMinOrg", _wrap_btOptimizedBvhNodeDoubleData_m_aabbMinOrg_get, _wrap_btOptimizedBvhNodeDoubleData_m_aabbMinOrg_set},
    { "m_aabbMaxOrg", _wrap_btOptimizedBvhNodeDoubleData_m_aabbMaxOrg_get, _wrap_btOptimizedBvhNodeDoubleData_m_aabbMaxOrg_set},
    { "m_escapeIndex", _wrap_btOptimizedBvhNodeDoubleData_m_escapeIndex_get, _wrap_btOptimizedBvhNodeDoubleData_m_escapeIndex_set},
    { "m_subPart", _wrap_btOptimizedBvhNodeDoubleData_m_subPart_get, _wrap_btOptimizedBvhNodeDoubleData_m_subPart_set},
    { "m_triangleIndex", _wrap_btOptimizedBvhNodeDoubleData_m_triangleIndex_get, _wrap_btOptimizedBvhNodeDoubleData_m_triangleIndex_set},
    { "m_pad", _wrap_btOptimizedBvhNodeDoubleData_m_pad_get, _wrap_btOptimizedBvhNodeDoubleData_m_pad_set},
    {0,0,0}
};
static swig_lua_attribute swig_btOptimizedBvhNodeDoubleData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btOptimizedBvhNodeDoubleData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btOptimizedBvhNodeDoubleData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btOptimizedBvhNodeDoubleData_bases[] = {0};
static const char *swig_btOptimizedBvhNodeDoubleData_base_names[] = {0};
static swig_lua_class _wrap_class_btOptimizedBvhNodeDoubleData = { "btOptimizedBvhNodeDoubleData", &SWIGTYPE_p_btOptimizedBvhNodeDoubleData,_wrap_new_btOptimizedBvhNodeDoubleData, swig_delete_btOptimizedBvhNodeDoubleData, swig_btOptimizedBvhNodeDoubleData_methods, swig_btOptimizedBvhNodeDoubleData_attributes, { "btOptimizedBvhNodeDoubleData", swig_btOptimizedBvhNodeDoubleData_cls_methods, swig_btOptimizedBvhNodeDoubleData_cls_attributes, swig_btOptimizedBvhNodeDoubleData_cls_constants }, swig_btOptimizedBvhNodeDoubleData_bases, swig_btOptimizedBvhNodeDoubleData_base_names };

static int _wrap_btQuantizedBvhNodeData_m_quantizedAabbMin_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  unsigned short *arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhNodeData::m_quantizedAabbMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhNodeData::m_quantizedAabbMin",1,"btQuantizedBvhNodeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvhNodeData::m_quantizedAabbMin",2,"unsigned short [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhNodeData,0))){
    SWIG_fail_ptr("btQuantizedBvhNodeData_m_quantizedAabbMin_set",1,SWIGTYPE_p_btQuantizedBvhNodeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("btQuantizedBvhNodeData_m_quantizedAabbMin_set",2,SWIGTYPE_p_unsigned_short);
  }
  
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhNodeData_m_quantizedAabbMin_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhNodeData::m_quantizedAabbMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhNodeData::m_quantizedAabbMin",1,"btQuantizedBvhNodeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhNodeData,0))){
    SWIG_fail_ptr("btQuantizedBvhNodeData_m_quantizedAabbMin_get",1,SWIGTYPE_p_btQuantizedBvhNodeData);
  }
  
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhNodeData_m_quantizedAabbMax_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  unsigned short *arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhNodeData::m_quantizedAabbMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhNodeData::m_quantizedAabbMax",1,"btQuantizedBvhNodeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvhNodeData::m_quantizedAabbMax",2,"unsigned short [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhNodeData,0))){
    SWIG_fail_ptr("btQuantizedBvhNodeData_m_quantizedAabbMax_set",1,SWIGTYPE_p_btQuantizedBvhNodeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("btQuantizedBvhNodeData_m_quantizedAabbMax_set",2,SWIGTYPE_p_unsigned_short);
  }
  
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhNodeData_m_quantizedAabbMax_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhNodeData::m_quantizedAabbMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhNodeData::m_quantizedAabbMax",1,"btQuantizedBvhNodeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhNodeData,0))){
    SWIG_fail_ptr("btQuantizedBvhNodeData_m_quantizedAabbMax_get",1,SWIGTYPE_p_btQuantizedBvhNodeData);
  }
  
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMax);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhNodeData_m_escapeIndexOrTriangleIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhNodeData::m_escapeIndexOrTriangleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhNodeData::m_escapeIndexOrTriangleIndex",1,"btQuantizedBvhNodeData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuantizedBvhNodeData::m_escapeIndexOrTriangleIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhNodeData,0))){
    SWIG_fail_ptr("btQuantizedBvhNodeData_m_escapeIndexOrTriangleIndex_set",1,SWIGTYPE_p_btQuantizedBvhNodeData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_escapeIndexOrTriangleIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhNodeData_m_escapeIndexOrTriangleIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvhNodeData::m_escapeIndexOrTriangleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhNodeData::m_escapeIndexOrTriangleIndex",1,"btQuantizedBvhNodeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhNodeData,0))){
    SWIG_fail_ptr("btQuantizedBvhNodeData_m_escapeIndexOrTriangleIndex_get",1,SWIGTYPE_p_btQuantizedBvhNodeData);
  }
  
  result = (int) ((arg1)->m_escapeIndexOrTriangleIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btQuantizedBvhNodeData(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhNodeData *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhNodeData::btQuantizedBvhNodeData",0,0)
  result = (btQuantizedBvhNodeData *)new btQuantizedBvhNodeData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuantizedBvhNodeData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btQuantizedBvhNodeData(void *obj) {
btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) obj;
delete arg1;
}
static swig_lua_method swig_btQuantizedBvhNodeData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btQuantizedBvhNodeData_attributes[] = {
    { "m_quantizedAabbMin", _wrap_btQuantizedBvhNodeData_m_quantizedAabbMin_get, _wrap_btQuantizedBvhNodeData_m_quantizedAabbMin_set},
    { "m_quantizedAabbMax", _wrap_btQuantizedBvhNodeData_m_quantizedAabbMax_get, _wrap_btQuantizedBvhNodeData_m_quantizedAabbMax_set},
    { "m_escapeIndexOrTriangleIndex", _wrap_btQuantizedBvhNodeData_m_escapeIndexOrTriangleIndex_get, _wrap_btQuantizedBvhNodeData_m_escapeIndexOrTriangleIndex_set},
    {0,0,0}
};
static swig_lua_attribute swig_btQuantizedBvhNodeData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btQuantizedBvhNodeData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btQuantizedBvhNodeData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btQuantizedBvhNodeData_bases[] = {0};
static const char *swig_btQuantizedBvhNodeData_base_names[] = {0};
static swig_lua_class _wrap_class_btQuantizedBvhNodeData = { "btQuantizedBvhNodeData", &SWIGTYPE_p_btQuantizedBvhNodeData,_wrap_new_btQuantizedBvhNodeData, swig_delete_btQuantizedBvhNodeData, swig_btQuantizedBvhNodeData_methods, swig_btQuantizedBvhNodeData_attributes, { "btQuantizedBvhNodeData", swig_btQuantizedBvhNodeData_cls_methods, swig_btQuantizedBvhNodeData_cls_attributes, swig_btQuantizedBvhNodeData_cls_constants }, swig_btQuantizedBvhNodeData_bases, swig_btQuantizedBvhNodeData_base_names };

static int _wrap_btQuantizedBvhFloatData_m_bvhAabbMin_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_bvhAabbMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_bvhAabbMin",1,"btQuantizedBvhFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvhFloatData::m_bvhAabbMin",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_bvhAabbMin_set",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_bvhAabbMin_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_bvhAabbMin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_bvhAabbMin_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_bvhAabbMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_bvhAabbMin",1,"btQuantizedBvhFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_bvhAabbMin_get",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_bvhAabbMin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_bvhAabbMax_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_bvhAabbMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_bvhAabbMax",1,"btQuantizedBvhFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvhFloatData::m_bvhAabbMax",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_bvhAabbMax_set",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_bvhAabbMax_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_bvhAabbMax = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_bvhAabbMax_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_bvhAabbMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_bvhAabbMax",1,"btQuantizedBvhFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_bvhAabbMax_get",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_bvhAabbMax);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_bvhQuantization_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_bvhQuantization",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_bvhQuantization",1,"btQuantizedBvhFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvhFloatData::m_bvhQuantization",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_bvhQuantization_set",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_bvhQuantization_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_bvhQuantization = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_bvhQuantization_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_bvhQuantization",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_bvhQuantization",1,"btQuantizedBvhFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_bvhQuantization_get",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_bvhQuantization);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_curNodeIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_curNodeIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_curNodeIndex",1,"btQuantizedBvhFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuantizedBvhFloatData::m_curNodeIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_curNodeIndex_set",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_curNodeIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_curNodeIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_curNodeIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_curNodeIndex",1,"btQuantizedBvhFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_curNodeIndex_get",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  result = (int) ((arg1)->m_curNodeIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_useQuantization_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_useQuantization",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_useQuantization",1,"btQuantizedBvhFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuantizedBvhFloatData::m_useQuantization",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_useQuantization_set",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_useQuantization = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_useQuantization_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_useQuantization",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_useQuantization",1,"btQuantizedBvhFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_useQuantization_get",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  result = (int) ((arg1)->m_useQuantization);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_numContiguousLeafNodes_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_numContiguousLeafNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_numContiguousLeafNodes",1,"btQuantizedBvhFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuantizedBvhFloatData::m_numContiguousLeafNodes",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_numContiguousLeafNodes_set",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numContiguousLeafNodes = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_numContiguousLeafNodes_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_numContiguousLeafNodes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_numContiguousLeafNodes",1,"btQuantizedBvhFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_numContiguousLeafNodes_get",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  result = (int) ((arg1)->m_numContiguousLeafNodes);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_numQuantizedContiguousNodes_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_numQuantizedContiguousNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_numQuantizedContiguousNodes",1,"btQuantizedBvhFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuantizedBvhFloatData::m_numQuantizedContiguousNodes",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_numQuantizedContiguousNodes_set",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numQuantizedContiguousNodes = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_numQuantizedContiguousNodes_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_numQuantizedContiguousNodes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_numQuantizedContiguousNodes",1,"btQuantizedBvhFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_numQuantizedContiguousNodes_get",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  result = (int) ((arg1)->m_numQuantizedContiguousNodes);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_contiguousNodesPtr_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btOptimizedBvhNodeFloatData *arg2 = (btOptimizedBvhNodeFloatData *) 0 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_contiguousNodesPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_contiguousNodesPtr",1,"btQuantizedBvhFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvhFloatData::m_contiguousNodesPtr",2,"btOptimizedBvhNodeFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_contiguousNodesPtr_set",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOptimizedBvhNodeFloatData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_contiguousNodesPtr_set",2,SWIGTYPE_p_btOptimizedBvhNodeFloatData);
  }
  
  if (arg1) (arg1)->m_contiguousNodesPtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_contiguousNodesPtr_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btOptimizedBvhNodeFloatData *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_contiguousNodesPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_contiguousNodesPtr",1,"btQuantizedBvhFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_contiguousNodesPtr_get",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  result = (btOptimizedBvhNodeFloatData *) ((arg1)->m_contiguousNodesPtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btOptimizedBvhNodeFloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_quantizedContiguousNodesPtr_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btQuantizedBvhNodeData *arg2 = (btQuantizedBvhNodeData *) 0 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_quantizedContiguousNodesPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_quantizedContiguousNodesPtr",1,"btQuantizedBvhFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvhFloatData::m_quantizedContiguousNodesPtr",2,"btQuantizedBvhNodeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_quantizedContiguousNodesPtr_set",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuantizedBvhNodeData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_quantizedContiguousNodesPtr_set",2,SWIGTYPE_p_btQuantizedBvhNodeData);
  }
  
  if (arg1) (arg1)->m_quantizedContiguousNodesPtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_quantizedContiguousNodesPtr_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btQuantizedBvhNodeData *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_quantizedContiguousNodesPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_quantizedContiguousNodesPtr",1,"btQuantizedBvhFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_quantizedContiguousNodesPtr_get",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  result = (btQuantizedBvhNodeData *) ((arg1)->m_quantizedContiguousNodesPtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuantizedBvhNodeData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_subTreeInfoPtr_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btBvhSubtreeInfoData *arg2 = (btBvhSubtreeInfoData *) 0 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_subTreeInfoPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_subTreeInfoPtr",1,"btQuantizedBvhFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvhFloatData::m_subTreeInfoPtr",2,"btBvhSubtreeInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_subTreeInfoPtr_set",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBvhSubtreeInfoData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_subTreeInfoPtr_set",2,SWIGTYPE_p_btBvhSubtreeInfoData);
  }
  
  if (arg1) (arg1)->m_subTreeInfoPtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_subTreeInfoPtr_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btBvhSubtreeInfoData *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_subTreeInfoPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_subTreeInfoPtr",1,"btQuantizedBvhFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_subTreeInfoPtr_get",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  result = (btBvhSubtreeInfoData *) ((arg1)->m_subTreeInfoPtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBvhSubtreeInfoData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_traversalMode_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_traversalMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_traversalMode",1,"btQuantizedBvhFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuantizedBvhFloatData::m_traversalMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_traversalMode_set",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_traversalMode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_traversalMode_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_traversalMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_traversalMode",1,"btQuantizedBvhFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_traversalMode_get",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  result = (int) ((arg1)->m_traversalMode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_numSubtreeHeaders_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_numSubtreeHeaders",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_numSubtreeHeaders",1,"btQuantizedBvhFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuantizedBvhFloatData::m_numSubtreeHeaders",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_numSubtreeHeaders_set",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numSubtreeHeaders = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhFloatData_m_numSubtreeHeaders_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::m_numSubtreeHeaders",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhFloatData::m_numSubtreeHeaders",1,"btQuantizedBvhFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhFloatData,0))){
    SWIG_fail_ptr("btQuantizedBvhFloatData_m_numSubtreeHeaders_get",1,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  result = (int) ((arg1)->m_numSubtreeHeaders);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btQuantizedBvhFloatData(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhFloatData *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhFloatData::btQuantizedBvhFloatData",0,0)
  result = (btQuantizedBvhFloatData *)new btQuantizedBvhFloatData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuantizedBvhFloatData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btQuantizedBvhFloatData(void *obj) {
btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) obj;
delete arg1;
}
static swig_lua_method swig_btQuantizedBvhFloatData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btQuantizedBvhFloatData_attributes[] = {
    { "m_bvhAabbMin", _wrap_btQuantizedBvhFloatData_m_bvhAabbMin_get, _wrap_btQuantizedBvhFloatData_m_bvhAabbMin_set},
    { "m_bvhAabbMax", _wrap_btQuantizedBvhFloatData_m_bvhAabbMax_get, _wrap_btQuantizedBvhFloatData_m_bvhAabbMax_set},
    { "m_bvhQuantization", _wrap_btQuantizedBvhFloatData_m_bvhQuantization_get, _wrap_btQuantizedBvhFloatData_m_bvhQuantization_set},
    { "m_curNodeIndex", _wrap_btQuantizedBvhFloatData_m_curNodeIndex_get, _wrap_btQuantizedBvhFloatData_m_curNodeIndex_set},
    { "m_useQuantization", _wrap_btQuantizedBvhFloatData_m_useQuantization_get, _wrap_btQuantizedBvhFloatData_m_useQuantization_set},
    { "m_numContiguousLeafNodes", _wrap_btQuantizedBvhFloatData_m_numContiguousLeafNodes_get, _wrap_btQuantizedBvhFloatData_m_numContiguousLeafNodes_set},
    { "m_numQuantizedContiguousNodes", _wrap_btQuantizedBvhFloatData_m_numQuantizedContiguousNodes_get, _wrap_btQuantizedBvhFloatData_m_numQuantizedContiguousNodes_set},
    { "m_contiguousNodesPtr", _wrap_btQuantizedBvhFloatData_m_contiguousNodesPtr_get, _wrap_btQuantizedBvhFloatData_m_contiguousNodesPtr_set},
    { "m_quantizedContiguousNodesPtr", _wrap_btQuantizedBvhFloatData_m_quantizedContiguousNodesPtr_get, _wrap_btQuantizedBvhFloatData_m_quantizedContiguousNodesPtr_set},
    { "m_subTreeInfoPtr", _wrap_btQuantizedBvhFloatData_m_subTreeInfoPtr_get, _wrap_btQuantizedBvhFloatData_m_subTreeInfoPtr_set},
    { "m_traversalMode", _wrap_btQuantizedBvhFloatData_m_traversalMode_get, _wrap_btQuantizedBvhFloatData_m_traversalMode_set},
    { "m_numSubtreeHeaders", _wrap_btQuantizedBvhFloatData_m_numSubtreeHeaders_get, _wrap_btQuantizedBvhFloatData_m_numSubtreeHeaders_set},
    {0,0,0}
};
static swig_lua_attribute swig_btQuantizedBvhFloatData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btQuantizedBvhFloatData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btQuantizedBvhFloatData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btQuantizedBvhFloatData_bases[] = {0};
static const char *swig_btQuantizedBvhFloatData_base_names[] = {0};
static swig_lua_class _wrap_class_btQuantizedBvhFloatData = { "btQuantizedBvhFloatData", &SWIGTYPE_p_btQuantizedBvhFloatData,_wrap_new_btQuantizedBvhFloatData, swig_delete_btQuantizedBvhFloatData, swig_btQuantizedBvhFloatData_methods, swig_btQuantizedBvhFloatData_attributes, { "btQuantizedBvhFloatData", swig_btQuantizedBvhFloatData_cls_methods, swig_btQuantizedBvhFloatData_cls_attributes, swig_btQuantizedBvhFloatData_cls_constants }, swig_btQuantizedBvhFloatData_bases, swig_btQuantizedBvhFloatData_base_names };

static int _wrap_btQuantizedBvhDoubleData_m_bvhAabbMin_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_bvhAabbMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_bvhAabbMin",1,"btQuantizedBvhDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_bvhAabbMin",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_bvhAabbMin_set",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_bvhAabbMin_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_bvhAabbMin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_bvhAabbMin_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_bvhAabbMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_bvhAabbMin",1,"btQuantizedBvhDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_bvhAabbMin_get",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_bvhAabbMin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_bvhAabbMax_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_bvhAabbMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_bvhAabbMax",1,"btQuantizedBvhDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_bvhAabbMax",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_bvhAabbMax_set",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_bvhAabbMax_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_bvhAabbMax = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_bvhAabbMax_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_bvhAabbMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_bvhAabbMax",1,"btQuantizedBvhDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_bvhAabbMax_get",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_bvhAabbMax);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_bvhQuantization_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_bvhQuantization",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_bvhQuantization",1,"btQuantizedBvhDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_bvhQuantization",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_bvhQuantization_set",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_bvhQuantization_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_bvhQuantization = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_bvhQuantization_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_bvhQuantization",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_bvhQuantization",1,"btQuantizedBvhDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_bvhQuantization_get",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_bvhQuantization);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_curNodeIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_curNodeIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_curNodeIndex",1,"btQuantizedBvhDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_curNodeIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_curNodeIndex_set",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_curNodeIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_curNodeIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_curNodeIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_curNodeIndex",1,"btQuantizedBvhDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_curNodeIndex_get",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  result = (int) ((arg1)->m_curNodeIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_useQuantization_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_useQuantization",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_useQuantization",1,"btQuantizedBvhDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_useQuantization",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_useQuantization_set",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_useQuantization = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_useQuantization_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_useQuantization",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_useQuantization",1,"btQuantizedBvhDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_useQuantization_get",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  result = (int) ((arg1)->m_useQuantization);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_numContiguousLeafNodes_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_numContiguousLeafNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_numContiguousLeafNodes",1,"btQuantizedBvhDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_numContiguousLeafNodes",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_numContiguousLeafNodes_set",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numContiguousLeafNodes = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_numContiguousLeafNodes_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_numContiguousLeafNodes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_numContiguousLeafNodes",1,"btQuantizedBvhDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_numContiguousLeafNodes_get",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  result = (int) ((arg1)->m_numContiguousLeafNodes);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_numQuantizedContiguousNodes_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_numQuantizedContiguousNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_numQuantizedContiguousNodes",1,"btQuantizedBvhDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_numQuantizedContiguousNodes",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_numQuantizedContiguousNodes_set",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numQuantizedContiguousNodes = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_numQuantizedContiguousNodes_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_numQuantizedContiguousNodes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_numQuantizedContiguousNodes",1,"btQuantizedBvhDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_numQuantizedContiguousNodes_get",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  result = (int) ((arg1)->m_numQuantizedContiguousNodes);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_contiguousNodesPtr_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btOptimizedBvhNodeDoubleData *arg2 = (btOptimizedBvhNodeDoubleData *) 0 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_contiguousNodesPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_contiguousNodesPtr",1,"btQuantizedBvhDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_contiguousNodesPtr",2,"btOptimizedBvhNodeDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_contiguousNodesPtr_set",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOptimizedBvhNodeDoubleData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_contiguousNodesPtr_set",2,SWIGTYPE_p_btOptimizedBvhNodeDoubleData);
  }
  
  if (arg1) (arg1)->m_contiguousNodesPtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_contiguousNodesPtr_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btOptimizedBvhNodeDoubleData *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_contiguousNodesPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_contiguousNodesPtr",1,"btQuantizedBvhDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_contiguousNodesPtr_get",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  result = (btOptimizedBvhNodeDoubleData *) ((arg1)->m_contiguousNodesPtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btOptimizedBvhNodeDoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_quantizedContiguousNodesPtr_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btQuantizedBvhNodeData *arg2 = (btQuantizedBvhNodeData *) 0 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_quantizedContiguousNodesPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_quantizedContiguousNodesPtr",1,"btQuantizedBvhDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_quantizedContiguousNodesPtr",2,"btQuantizedBvhNodeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_quantizedContiguousNodesPtr_set",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuantizedBvhNodeData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_quantizedContiguousNodesPtr_set",2,SWIGTYPE_p_btQuantizedBvhNodeData);
  }
  
  if (arg1) (arg1)->m_quantizedContiguousNodesPtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_quantizedContiguousNodesPtr_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btQuantizedBvhNodeData *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_quantizedContiguousNodesPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_quantizedContiguousNodesPtr",1,"btQuantizedBvhDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_quantizedContiguousNodesPtr_get",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  result = (btQuantizedBvhNodeData *) ((arg1)->m_quantizedContiguousNodesPtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuantizedBvhNodeData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_traversalMode_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_traversalMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_traversalMode",1,"btQuantizedBvhDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_traversalMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_traversalMode_set",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_traversalMode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_traversalMode_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_traversalMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_traversalMode",1,"btQuantizedBvhDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_traversalMode_get",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  result = (int) ((arg1)->m_traversalMode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_numSubtreeHeaders_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_numSubtreeHeaders",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_numSubtreeHeaders",1,"btQuantizedBvhDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_numSubtreeHeaders",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_numSubtreeHeaders_set",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numSubtreeHeaders = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_numSubtreeHeaders_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_numSubtreeHeaders",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_numSubtreeHeaders",1,"btQuantizedBvhDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_numSubtreeHeaders_get",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  result = (int) ((arg1)->m_numSubtreeHeaders);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_subTreeInfoPtr_set(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btBvhSubtreeInfoData *arg2 = (btBvhSubtreeInfoData *) 0 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_subTreeInfoPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_subTreeInfoPtr",1,"btQuantizedBvhDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_subTreeInfoPtr",2,"btBvhSubtreeInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_subTreeInfoPtr_set",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBvhSubtreeInfoData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_subTreeInfoPtr_set",2,SWIGTYPE_p_btBvhSubtreeInfoData);
  }
  
  if (arg1) (arg1)->m_subTreeInfoPtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btQuantizedBvhDoubleData_m_subTreeInfoPtr_get(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btBvhSubtreeInfoData *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::m_subTreeInfoPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btQuantizedBvhDoubleData::m_subTreeInfoPtr",1,"btQuantizedBvhDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuantizedBvhDoubleData,0))){
    SWIG_fail_ptr("btQuantizedBvhDoubleData_m_subTreeInfoPtr_get",1,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  result = (btBvhSubtreeInfoData *) ((arg1)->m_subTreeInfoPtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBvhSubtreeInfoData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btQuantizedBvhDoubleData(lua_State* L) {
  int SWIG_arg = 0;
  btQuantizedBvhDoubleData *result = 0 ;
  
  SWIG_check_num_args("btQuantizedBvhDoubleData::btQuantizedBvhDoubleData",0,0)
  result = (btQuantizedBvhDoubleData *)new btQuantizedBvhDoubleData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuantizedBvhDoubleData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btQuantizedBvhDoubleData(void *obj) {
btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) obj;
delete arg1;
}
static swig_lua_method swig_btQuantizedBvhDoubleData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btQuantizedBvhDoubleData_attributes[] = {
    { "m_bvhAabbMin", _wrap_btQuantizedBvhDoubleData_m_bvhAabbMin_get, _wrap_btQuantizedBvhDoubleData_m_bvhAabbMin_set},
    { "m_bvhAabbMax", _wrap_btQuantizedBvhDoubleData_m_bvhAabbMax_get, _wrap_btQuantizedBvhDoubleData_m_bvhAabbMax_set},
    { "m_bvhQuantization", _wrap_btQuantizedBvhDoubleData_m_bvhQuantization_get, _wrap_btQuantizedBvhDoubleData_m_bvhQuantization_set},
    { "m_curNodeIndex", _wrap_btQuantizedBvhDoubleData_m_curNodeIndex_get, _wrap_btQuantizedBvhDoubleData_m_curNodeIndex_set},
    { "m_useQuantization", _wrap_btQuantizedBvhDoubleData_m_useQuantization_get, _wrap_btQuantizedBvhDoubleData_m_useQuantization_set},
    { "m_numContiguousLeafNodes", _wrap_btQuantizedBvhDoubleData_m_numContiguousLeafNodes_get, _wrap_btQuantizedBvhDoubleData_m_numContiguousLeafNodes_set},
    { "m_numQuantizedContiguousNodes", _wrap_btQuantizedBvhDoubleData_m_numQuantizedContiguousNodes_get, _wrap_btQuantizedBvhDoubleData_m_numQuantizedContiguousNodes_set},
    { "m_contiguousNodesPtr", _wrap_btQuantizedBvhDoubleData_m_contiguousNodesPtr_get, _wrap_btQuantizedBvhDoubleData_m_contiguousNodesPtr_set},
    { "m_quantizedContiguousNodesPtr", _wrap_btQuantizedBvhDoubleData_m_quantizedContiguousNodesPtr_get, _wrap_btQuantizedBvhDoubleData_m_quantizedContiguousNodesPtr_set},
    { "m_traversalMode", _wrap_btQuantizedBvhDoubleData_m_traversalMode_get, _wrap_btQuantizedBvhDoubleData_m_traversalMode_set},
    { "m_numSubtreeHeaders", _wrap_btQuantizedBvhDoubleData_m_numSubtreeHeaders_get, _wrap_btQuantizedBvhDoubleData_m_numSubtreeHeaders_set},
    { "m_subTreeInfoPtr", _wrap_btQuantizedBvhDoubleData_m_subTreeInfoPtr_get, _wrap_btQuantizedBvhDoubleData_m_subTreeInfoPtr_set},
    {0,0,0}
};
static swig_lua_attribute swig_btQuantizedBvhDoubleData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btQuantizedBvhDoubleData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btQuantizedBvhDoubleData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btQuantizedBvhDoubleData_bases[] = {0};
static const char *swig_btQuantizedBvhDoubleData_base_names[] = {0};
static swig_lua_class _wrap_class_btQuantizedBvhDoubleData = { "btQuantizedBvhDoubleData", &SWIGTYPE_p_btQuantizedBvhDoubleData,_wrap_new_btQuantizedBvhDoubleData, swig_delete_btQuantizedBvhDoubleData, swig_btQuantizedBvhDoubleData_methods, swig_btQuantizedBvhDoubleData_attributes, { "btQuantizedBvhDoubleData", swig_btQuantizedBvhDoubleData_cls_methods, swig_btQuantizedBvhDoubleData_cls_attributes, swig_btQuantizedBvhDoubleData_cls_constants }, swig_btQuantizedBvhDoubleData_bases, swig_btQuantizedBvhDoubleData_base_names };

static int _wrap_btHashString_m_string_set(lua_State* L) {
  int SWIG_arg = 0;
  btHashString *arg1 = (btHashString *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("btHashString::m_string",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashString::m_string",1,"btHashString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btHashString::m_string",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashString,0))){
    SWIG_fail_ptr("btHashString_m_string_set",1,SWIGTYPE_p_btHashString);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->m_string = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_string, (const char *)arg2);
    } else {
      arg1->m_string = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashString_m_string_get(lua_State* L) {
  int SWIG_arg = 0;
  btHashString *arg1 = (btHashString *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btHashString::m_string",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashString::m_string",1,"btHashString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashString,0))){
    SWIG_fail_ptr("btHashString_m_string_get",1,SWIGTYPE_p_btHashString);
  }
  
  result = (char *) ((arg1)->m_string);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashString_m_hash_set(lua_State* L) {
  int SWIG_arg = 0;
  btHashString *arg1 = (btHashString *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("btHashString::m_hash",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashString::m_hash",1,"btHashString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHashString::m_hash",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashString,0))){
    SWIG_fail_ptr("btHashString_m_hash_set",1,SWIGTYPE_p_btHashString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_hash = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashString_m_hash_get(lua_State* L) {
  int SWIG_arg = 0;
  btHashString *arg1 = (btHashString *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("btHashString::m_hash",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashString::m_hash",1,"btHashString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashString,0))){
    SWIG_fail_ptr("btHashString_m_hash_get",1,SWIGTYPE_p_btHashString);
  }
  
  result = (unsigned int) ((arg1)->m_hash);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashString_getHash(lua_State* L) {
  int SWIG_arg = 0;
  btHashString *arg1 = (btHashString *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("btHashString::getHash",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashString::getHash",1,"btHashString const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashString,0))){
    SWIG_fail_ptr("btHashString_getHash",1,SWIGTYPE_p_btHashString);
  }
  
  result = (unsigned int)((btHashString const *)arg1)->getHash();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btHashString(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  btHashString *result = 0 ;
  
  SWIG_check_num_args("btHashString::btHashString",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("btHashString::btHashString",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (btHashString *)new btHashString((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHashString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashString_portableStringCompare(lua_State* L) {
  int SWIG_arg = 0;
  btHashString *arg1 = (btHashString *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("btHashString::portableStringCompare",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashString::portableStringCompare",1,"btHashString const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btHashString::portableStringCompare",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("btHashString::portableStringCompare",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashString,0))){
    SWIG_fail_ptr("btHashString_portableStringCompare",1,SWIGTYPE_p_btHashString);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)((btHashString const *)arg1)->portableStringCompare((char const *)arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashString_equals(lua_State* L) {
  int SWIG_arg = 0;
  btHashString *arg1 = (btHashString *) 0 ;
  btHashString *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("btHashString::equals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashString::equals",1,"btHashString const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHashString::equals",2,"btHashString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashString,0))){
    SWIG_fail_ptr("btHashString_equals",1,SWIGTYPE_p_btHashString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btHashString,0))){
    SWIG_fail_ptr("btHashString_equals",2,SWIGTYPE_p_btHashString);
  }
  
  result = (bool)((btHashString const *)arg1)->equals((btHashString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btHashString(void *obj) {
btHashString *arg1 = (btHashString *) obj;
delete arg1;
}
static swig_lua_method swig_btHashString_methods[] = {
    {"getHash", _wrap_btHashString_getHash}, 
    {"portableStringCompare", _wrap_btHashString_portableStringCompare}, 
    {"equals", _wrap_btHashString_equals}, 
    {0,0}
};
static swig_lua_attribute swig_btHashString_attributes[] = {
    { "m_string", _wrap_btHashString_m_string_get, _wrap_btHashString_m_string_set},
    { "m_hash", _wrap_btHashString_m_hash_get, _wrap_btHashString_m_hash_set},
    {0,0,0}
};
static swig_lua_attribute swig_btHashString_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btHashString_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btHashString_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btHashString_bases[] = {0};
static const char *swig_btHashString_base_names[] = {0};
static swig_lua_class _wrap_class_btHashString = { "btHashString", &SWIGTYPE_p_btHashString,_wrap_new_btHashString, swig_delete_btHashString, swig_btHashString_methods, swig_btHashString_attributes, { "btHashString", swig_btHashString_cls_methods, swig_btHashString_cls_attributes, swig_btHashString_cls_constants }, swig_btHashString_bases, swig_btHashString_base_names };

static int _wrap_BT_HASH_NULL_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("BT_HASH_NULL",0,0)
  result = (int)(int)BT_HASH_NULL;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btHashInt(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  btHashInt *result = 0 ;
  
  SWIG_check_num_args("btHashInt::btHashInt",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btHashInt::btHashInt",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (btHashInt *)new btHashInt(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHashInt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashInt_getUid1(lua_State* L) {
  int SWIG_arg = 0;
  btHashInt *arg1 = (btHashInt *) 0 ;
  int result;
  
  SWIG_check_num_args("btHashInt::getUid1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashInt::getUid1",1,"btHashInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashInt,0))){
    SWIG_fail_ptr("btHashInt_getUid1",1,SWIGTYPE_p_btHashInt);
  }
  
  result = (int)((btHashInt const *)arg1)->getUid1();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashInt_setUid1(lua_State* L) {
  int SWIG_arg = 0;
  btHashInt *arg1 = (btHashInt *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btHashInt::setUid1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashInt::setUid1",1,"btHashInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHashInt::setUid1",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashInt,0))){
    SWIG_fail_ptr("btHashInt_setUid1",1,SWIGTYPE_p_btHashInt);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setUid1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashInt_equals(lua_State* L) {
  int SWIG_arg = 0;
  btHashInt *arg1 = (btHashInt *) 0 ;
  btHashInt *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("btHashInt::equals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashInt::equals",1,"btHashInt const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHashInt::equals",2,"btHashInt const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashInt,0))){
    SWIG_fail_ptr("btHashInt_equals",1,SWIGTYPE_p_btHashInt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btHashInt,0))){
    SWIG_fail_ptr("btHashInt_equals",2,SWIGTYPE_p_btHashInt);
  }
  
  result = (bool)((btHashInt const *)arg1)->equals((btHashInt const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashInt_getHash(lua_State* L) {
  int SWIG_arg = 0;
  btHashInt *arg1 = (btHashInt *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("btHashInt::getHash",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashInt::getHash",1,"btHashInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashInt,0))){
    SWIG_fail_ptr("btHashInt_getHash",1,SWIGTYPE_p_btHashInt);
  }
  
  result = (unsigned int)((btHashInt const *)arg1)->getHash();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btHashInt(void *obj) {
btHashInt *arg1 = (btHashInt *) obj;
delete arg1;
}
static swig_lua_method swig_btHashInt_methods[] = {
    {"getUid1", _wrap_btHashInt_getUid1}, 
    {"setUid1", _wrap_btHashInt_setUid1}, 
    {"equals", _wrap_btHashInt_equals}, 
    {"getHash", _wrap_btHashInt_getHash}, 
    {0,0}
};
static swig_lua_attribute swig_btHashInt_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btHashInt_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btHashInt_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btHashInt_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btHashInt_bases[] = {0};
static const char *swig_btHashInt_base_names[] = {0};
static swig_lua_class _wrap_class_btHashInt = { "btHashInt", &SWIGTYPE_p_btHashInt,_wrap_new_btHashInt, swig_delete_btHashInt, swig_btHashInt_methods, swig_btHashInt_attributes, { "btHashInt", swig_btHashInt_cls_methods, swig_btHashInt_cls_attributes, swig_btHashInt_cls_constants }, swig_btHashInt_bases, swig_btHashInt_base_names };

static int _wrap_new_btHashPtr(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  btHashPtr *result = 0 ;
  
  SWIG_check_num_args("btHashPtr::btHashPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashPtr::btHashPtr",1,"void const *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"new_btHashPtr");
  result = (btHashPtr *)new btHashPtr((void const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHashPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashPtr_getPointer(lua_State* L) {
  int SWIG_arg = 0;
  btHashPtr *arg1 = (btHashPtr *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btHashPtr::getPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashPtr::getPointer",1,"btHashPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashPtr,0))){
    SWIG_fail_ptr("btHashPtr_getPointer",1,SWIGTYPE_p_btHashPtr);
  }
  
  result = (void *)((btHashPtr const *)arg1)->getPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashPtr_equals(lua_State* L) {
  int SWIG_arg = 0;
  btHashPtr *arg1 = (btHashPtr *) 0 ;
  btHashPtr *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("btHashPtr::equals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashPtr::equals",1,"btHashPtr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHashPtr::equals",2,"btHashPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashPtr,0))){
    SWIG_fail_ptr("btHashPtr_equals",1,SWIGTYPE_p_btHashPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btHashPtr,0))){
    SWIG_fail_ptr("btHashPtr_equals",2,SWIGTYPE_p_btHashPtr);
  }
  
  result = (bool)((btHashPtr const *)arg1)->equals((btHashPtr const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHashPtr_getHash(lua_State* L) {
  int SWIG_arg = 0;
  btHashPtr *arg1 = (btHashPtr *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("btHashPtr::getHash",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHashPtr::getHash",1,"btHashPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHashPtr,0))){
    SWIG_fail_ptr("btHashPtr_getHash",1,SWIGTYPE_p_btHashPtr);
  }
  
  result = (unsigned int)((btHashPtr const *)arg1)->getHash();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btHashPtr(void *obj) {
btHashPtr *arg1 = (btHashPtr *) obj;
delete arg1;
}
static swig_lua_method swig_btHashPtr_methods[] = {
    {"getPointer", _wrap_btHashPtr_getPointer}, 
    {"equals", _wrap_btHashPtr_equals}, 
    {"getHash", _wrap_btHashPtr_getHash}, 
    {0,0}
};
static swig_lua_attribute swig_btHashPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btHashPtr_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btHashPtr_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btHashPtr_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btHashPtr_bases[] = {0};
static const char *swig_btHashPtr_base_names[] = {0};
static swig_lua_class _wrap_class_btHashPtr = { "btHashPtr", &SWIGTYPE_p_btHashPtr,_wrap_new_btHashPtr, swig_delete_btHashPtr, swig_btHashPtr_methods, swig_btHashPtr_attributes, { "btHashPtr", swig_btHashPtr_cls_methods, swig_btHashPtr_cls_attributes, swig_btHashPtr_cls_constants }, swig_btHashPtr_bases, swig_btHashPtr_base_names };

static int _wrap_sBulletDNAstr_set(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  
  SWIG_check_num_args("sBulletDNAstr",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("sBulletDNAstr",1,"char []");
  arg1 = (char *)lua_tostring(L, 1);
  {
    if (arg1) strcpy((char *)sBulletDNAstr, (const char *)arg1);
    else sBulletDNAstr[0] = 0;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sBulletDNAstr_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("sBulletDNAstr",0,0)
  result = (char *)(char *)sBulletDNAstr;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sBulletDNAlen_set(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("sBulletDNAlen",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sBulletDNAlen",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  sBulletDNAlen = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sBulletDNAlen_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("sBulletDNAlen",0,0)
  result = (int)sBulletDNAlen;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sBulletDNAstr64_set(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  
  SWIG_check_num_args("sBulletDNAstr64",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("sBulletDNAstr64",1,"char []");
  arg1 = (char *)lua_tostring(L, 1);
  {
    if (arg1) strcpy((char *)sBulletDNAstr64, (const char *)arg1);
    else sBulletDNAstr64[0] = 0;
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sBulletDNAstr64_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("sBulletDNAstr64",0,0)
  result = (char *)(char *)sBulletDNAstr64;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sBulletDNAlen64_set(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("sBulletDNAlen64",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sBulletDNAlen64",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  sBulletDNAlen64 = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sBulletDNAlen64_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("sBulletDNAlen64",0,0)
  result = (int)sBulletDNAlen64;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStrLen(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("btStrLen",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("btStrLen",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (int)btStrLen((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btChunk_m_chunkCode_set(lua_State* L) {
  int SWIG_arg = 0;
  btChunk *arg1 = (btChunk *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btChunk::m_chunkCode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btChunk::m_chunkCode",1,"btChunk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btChunk::m_chunkCode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btChunk,0))){
    SWIG_fail_ptr("btChunk_m_chunkCode_set",1,SWIGTYPE_p_btChunk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_chunkCode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btChunk_m_chunkCode_get(lua_State* L) {
  int SWIG_arg = 0;
  btChunk *arg1 = (btChunk *) 0 ;
  int result;
  
  SWIG_check_num_args("btChunk::m_chunkCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btChunk::m_chunkCode",1,"btChunk *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btChunk,0))){
    SWIG_fail_ptr("btChunk_m_chunkCode_get",1,SWIGTYPE_p_btChunk);
  }
  
  result = (int) ((arg1)->m_chunkCode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btChunk_m_length_set(lua_State* L) {
  int SWIG_arg = 0;
  btChunk *arg1 = (btChunk *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btChunk::m_length",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btChunk::m_length",1,"btChunk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btChunk::m_length",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btChunk,0))){
    SWIG_fail_ptr("btChunk_m_length_set",1,SWIGTYPE_p_btChunk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_length = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btChunk_m_length_get(lua_State* L) {
  int SWIG_arg = 0;
  btChunk *arg1 = (btChunk *) 0 ;
  int result;
  
  SWIG_check_num_args("btChunk::m_length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btChunk::m_length",1,"btChunk *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btChunk,0))){
    SWIG_fail_ptr("btChunk_m_length_get",1,SWIGTYPE_p_btChunk);
  }
  
  result = (int) ((arg1)->m_length);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btChunk_m_oldPtr_set(lua_State* L) {
  int SWIG_arg = 0;
  btChunk *arg1 = (btChunk *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btChunk::m_oldPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btChunk::m_oldPtr",1,"btChunk *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btChunk::m_oldPtr",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btChunk,0))){
    SWIG_fail_ptr("btChunk_m_oldPtr_set",1,SWIGTYPE_p_btChunk);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btChunk_m_oldPtr_set");
  if (arg1) (arg1)->m_oldPtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btChunk_m_oldPtr_get(lua_State* L) {
  int SWIG_arg = 0;
  btChunk *arg1 = (btChunk *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btChunk::m_oldPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btChunk::m_oldPtr",1,"btChunk *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btChunk,0))){
    SWIG_fail_ptr("btChunk_m_oldPtr_get",1,SWIGTYPE_p_btChunk);
  }
  
  result = (void *) ((arg1)->m_oldPtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btChunk_m_dna_nr_set(lua_State* L) {
  int SWIG_arg = 0;
  btChunk *arg1 = (btChunk *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btChunk::m_dna_nr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btChunk::m_dna_nr",1,"btChunk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btChunk::m_dna_nr",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btChunk,0))){
    SWIG_fail_ptr("btChunk_m_dna_nr_set",1,SWIGTYPE_p_btChunk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_dna_nr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btChunk_m_dna_nr_get(lua_State* L) {
  int SWIG_arg = 0;
  btChunk *arg1 = (btChunk *) 0 ;
  int result;
  
  SWIG_check_num_args("btChunk::m_dna_nr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btChunk::m_dna_nr",1,"btChunk *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btChunk,0))){
    SWIG_fail_ptr("btChunk_m_dna_nr_get",1,SWIGTYPE_p_btChunk);
  }
  
  result = (int) ((arg1)->m_dna_nr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btChunk_m_number_set(lua_State* L) {
  int SWIG_arg = 0;
  btChunk *arg1 = (btChunk *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btChunk::m_number",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btChunk::m_number",1,"btChunk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btChunk::m_number",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btChunk,0))){
    SWIG_fail_ptr("btChunk_m_number_set",1,SWIGTYPE_p_btChunk);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_number = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btChunk_m_number_get(lua_State* L) {
  int SWIG_arg = 0;
  btChunk *arg1 = (btChunk *) 0 ;
  int result;
  
  SWIG_check_num_args("btChunk::m_number",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btChunk::m_number",1,"btChunk *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btChunk,0))){
    SWIG_fail_ptr("btChunk_m_number_get",1,SWIGTYPE_p_btChunk);
  }
  
  result = (int) ((arg1)->m_number);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btChunk(lua_State* L) {
  int SWIG_arg = 0;
  btChunk *result = 0 ;
  
  SWIG_check_num_args("btChunk::btChunk",0,0)
  result = (btChunk *)new btChunk();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btChunk,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btChunk(void *obj) {
btChunk *arg1 = (btChunk *) obj;
delete arg1;
}
static swig_lua_method swig_btChunk_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btChunk_attributes[] = {
    { "m_chunkCode", _wrap_btChunk_m_chunkCode_get, _wrap_btChunk_m_chunkCode_set},
    { "m_length", _wrap_btChunk_m_length_get, _wrap_btChunk_m_length_set},
    { "m_oldPtr", _wrap_btChunk_m_oldPtr_get, _wrap_btChunk_m_oldPtr_set},
    { "m_dna_nr", _wrap_btChunk_m_dna_nr_get, _wrap_btChunk_m_dna_nr_set},
    { "m_number", _wrap_btChunk_m_number_get, _wrap_btChunk_m_number_set},
    {0,0,0}
};
static swig_lua_attribute swig_btChunk_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btChunk_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btChunk_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btChunk_bases[] = {0};
static const char *swig_btChunk_base_names[] = {0};
static swig_lua_class _wrap_class_btChunk = { "btChunk", &SWIGTYPE_p_btChunk,_wrap_new_btChunk, swig_delete_btChunk, swig_btChunk_methods, swig_btChunk_attributes, { "btChunk", swig_btChunk_cls_methods, swig_btChunk_cls_attributes, swig_btChunk_cls_constants }, swig_btChunk_bases, swig_btChunk_base_names };

static int _wrap_btSerializer_getBufferPointer(lua_State* L) {
  int SWIG_arg = 0;
  btSerializer *arg1 = (btSerializer *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("btSerializer::getBufferPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSerializer::getBufferPointer",1,"btSerializer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btSerializer_getBufferPointer",1,SWIGTYPE_p_btSerializer);
  }
  
  result = (unsigned char *)((btSerializer const *)arg1)->getBufferPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSerializer_getCurrentBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btSerializer *arg1 = (btSerializer *) 0 ;
  int result;
  
  SWIG_check_num_args("btSerializer::getCurrentBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSerializer::getCurrentBufferSize",1,"btSerializer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btSerializer_getCurrentBufferSize",1,SWIGTYPE_p_btSerializer);
  }
  
  result = (int)((btSerializer const *)arg1)->getCurrentBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSerializer_allocate(lua_State* L) {
  int SWIG_arg = 0;
  btSerializer *arg1 = (btSerializer *) 0 ;
  size_t arg2 ;
  int arg3 ;
  btChunk *result = 0 ;
  
  SWIG_check_num_args("btSerializer::allocate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSerializer::allocate",1,"btSerializer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSerializer::allocate",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSerializer::allocate",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btSerializer_allocate",1,SWIGTYPE_p_btSerializer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (btChunk *)(arg1)->allocate(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btChunk,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSerializer_finalizeChunk(lua_State* L) {
  int SWIG_arg = 0;
  btSerializer *arg1 = (btSerializer *) 0 ;
  btChunk *arg2 = (btChunk *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  
  SWIG_check_num_args("btSerializer::finalizeChunk",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSerializer::finalizeChunk",1,"btSerializer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSerializer::finalizeChunk",2,"btChunk *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("btSerializer::finalizeChunk",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSerializer::finalizeChunk",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btSerializer::finalizeChunk",5,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btSerializer_finalizeChunk",1,SWIGTYPE_p_btSerializer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btChunk,0))){
    SWIG_fail_ptr("btSerializer_finalizeChunk",2,SWIGTYPE_p_btChunk);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"btSerializer_finalizeChunk");
  (arg1)->finalizeChunk(arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSerializer_findPointer(lua_State* L) {
  int SWIG_arg = 0;
  btSerializer *arg1 = (btSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btSerializer::findPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSerializer::findPointer",1,"btSerializer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSerializer::findPointer",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btSerializer_findPointer",1,SWIGTYPE_p_btSerializer);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btSerializer_findPointer");
  result = (void *)(arg1)->findPointer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSerializer_getUniquePointer(lua_State* L) {
  int SWIG_arg = 0;
  btSerializer *arg1 = (btSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btSerializer::getUniquePointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSerializer::getUniquePointer",1,"btSerializer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSerializer::getUniquePointer",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btSerializer_getUniquePointer",1,SWIGTYPE_p_btSerializer);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btSerializer_getUniquePointer");
  result = (void *)(arg1)->getUniquePointer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSerializer_startSerialization(lua_State* L) {
  int SWIG_arg = 0;
  btSerializer *arg1 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("btSerializer::startSerialization",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSerializer::startSerialization",1,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btSerializer_startSerialization",1,SWIGTYPE_p_btSerializer);
  }
  
  (arg1)->startSerialization();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSerializer_finishSerialization(lua_State* L) {
  int SWIG_arg = 0;
  btSerializer *arg1 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("btSerializer::finishSerialization",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSerializer::finishSerialization",1,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btSerializer_finishSerialization",1,SWIGTYPE_p_btSerializer);
  }
  
  (arg1)->finishSerialization();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSerializer_findNameForPointer(lua_State* L) {
  int SWIG_arg = 0;
  btSerializer *arg1 = (btSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btSerializer::findNameForPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSerializer::findNameForPointer",1,"btSerializer const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSerializer::findNameForPointer",2,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btSerializer_findNameForPointer",1,SWIGTYPE_p_btSerializer);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btSerializer_findNameForPointer");
  result = (char *)((btSerializer const *)arg1)->findNameForPointer((void const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSerializer_registerNameForPointer(lua_State* L) {
  int SWIG_arg = 0;
  btSerializer *arg1 = (btSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("btSerializer::registerNameForPointer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSerializer::registerNameForPointer",1,"btSerializer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSerializer::registerNameForPointer",2,"void const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("btSerializer::registerNameForPointer",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btSerializer_registerNameForPointer",1,SWIGTYPE_p_btSerializer);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btSerializer_registerNameForPointer");
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->registerNameForPointer((void const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSerializer_serializeName(lua_State* L) {
  int SWIG_arg = 0;
  btSerializer *arg1 = (btSerializer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("btSerializer::serializeName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSerializer::serializeName",1,"btSerializer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btSerializer::serializeName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btSerializer_serializeName",1,SWIGTYPE_p_btSerializer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->serializeName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSerializer_getSerializationFlags(lua_State* L) {
  int SWIG_arg = 0;
  btSerializer *arg1 = (btSerializer *) 0 ;
  int result;
  
  SWIG_check_num_args("btSerializer::getSerializationFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSerializer::getSerializationFlags",1,"btSerializer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btSerializer_getSerializationFlags",1,SWIGTYPE_p_btSerializer);
  }
  
  result = (int)((btSerializer const *)arg1)->getSerializationFlags();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSerializer_setSerializationFlags(lua_State* L) {
  int SWIG_arg = 0;
  btSerializer *arg1 = (btSerializer *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btSerializer::setSerializationFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSerializer::setSerializationFlags",1,"btSerializer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSerializer::setSerializationFlags",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btSerializer_setSerializationFlags",1,SWIGTYPE_p_btSerializer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setSerializationFlags(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSerializer(void *obj) {
btSerializer *arg1 = (btSerializer *) obj;
delete arg1;
}
static swig_lua_method swig_btSerializer_methods[] = {
    {"getBufferPointer", _wrap_btSerializer_getBufferPointer}, 
    {"getCurrentBufferSize", _wrap_btSerializer_getCurrentBufferSize}, 
    {"allocate", _wrap_btSerializer_allocate}, 
    {"finalizeChunk", _wrap_btSerializer_finalizeChunk}, 
    {"findPointer", _wrap_btSerializer_findPointer}, 
    {"getUniquePointer", _wrap_btSerializer_getUniquePointer}, 
    {"startSerialization", _wrap_btSerializer_startSerialization}, 
    {"finishSerialization", _wrap_btSerializer_finishSerialization}, 
    {"findNameForPointer", _wrap_btSerializer_findNameForPointer}, 
    {"registerNameForPointer", _wrap_btSerializer_registerNameForPointer}, 
    {"serializeName", _wrap_btSerializer_serializeName}, 
    {"getSerializationFlags", _wrap_btSerializer_getSerializationFlags}, 
    {"setSerializationFlags", _wrap_btSerializer_setSerializationFlags}, 
    {0,0}
};
static swig_lua_attribute swig_btSerializer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btSerializer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSerializer_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btSerializer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSerializer_bases[] = {0};
static const char *swig_btSerializer_base_names[] = {0};
static swig_lua_class _wrap_class_btSerializer = { "btSerializer", &SWIGTYPE_p_btSerializer,0, swig_delete_btSerializer, swig_btSerializer_methods, swig_btSerializer_attributes, { "btSerializer", swig_btSerializer_cls_methods, swig_btSerializer_cls_attributes, swig_btSerializer_cls_constants }, swig_btSerializer_bases, swig_btSerializer_base_names };

static int _wrap_new_btPointerUid(lua_State* L) {
  int SWIG_arg = 0;
  btPointerUid *result = 0 ;
  
  SWIG_check_num_args("btPointerUid::btPointerUid",0,0)
  result = (btPointerUid *)new btPointerUid();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPointerUid,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btPointerUid(void *obj) {
btPointerUid *arg1 = (btPointerUid *) obj;
delete arg1;
}
static swig_lua_method swig_btPointerUid_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btPointerUid_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btPointerUid_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btPointerUid_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btPointerUid_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btPointerUid_bases[] = {0};
static const char *swig_btPointerUid_base_names[] = {0};
static swig_lua_class _wrap_class_btPointerUid = { "btPointerUid", &SWIGTYPE_p_btPointerUid,_wrap_new_btPointerUid, swig_delete_btPointerUid, swig_btPointerUid_methods, swig_btPointerUid_attributes, { "btPointerUid", swig_btPointerUid_cls_methods, swig_btPointerUid_cls_attributes, swig_btPointerUid_cls_constants }, swig_btPointerUid_bases, swig_btPointerUid_base_names };

static int _wrap_new_btDefaultSerializer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  btDefaultSerializer *result = 0 ;
  
  SWIG_check_num_args("btDefaultSerializer::btDefaultSerializer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btDefaultSerializer::btDefaultSerializer",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (btDefaultSerializer *)new btDefaultSerializer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDefaultSerializer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btDefaultSerializer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultSerializer *result = 0 ;
  
  SWIG_check_num_args("btDefaultSerializer::btDefaultSerializer",0,0)
  result = (btDefaultSerializer *)new btDefaultSerializer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDefaultSerializer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btDefaultSerializer(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btDefaultSerializer__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_btDefaultSerializer__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btDefaultSerializer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btDefaultSerializer::btDefaultSerializer(int)\n"
    "    btDefaultSerializer::btDefaultSerializer()\n");
  lua_error(L);return 0;
}


static int _wrap_btDefaultSerializer_writeHeader(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  SWIG_check_num_args("btDefaultSerializer::writeHeader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultSerializer::writeHeader",1,"btDefaultSerializer const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDefaultSerializer::writeHeader",2,"unsigned char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultSerializer,0))){
    SWIG_fail_ptr("btDefaultSerializer_writeHeader",1,SWIGTYPE_p_btDefaultSerializer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("btDefaultSerializer_writeHeader",2,SWIGTYPE_p_unsigned_char);
  }
  
  ((btDefaultSerializer const *)arg1)->writeHeader(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultSerializer_startSerialization(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  
  SWIG_check_num_args("btDefaultSerializer::startSerialization",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultSerializer::startSerialization",1,"btDefaultSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultSerializer,0))){
    SWIG_fail_ptr("btDefaultSerializer_startSerialization",1,SWIGTYPE_p_btDefaultSerializer);
  }
  
  (arg1)->startSerialization();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultSerializer_finishSerialization(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  
  SWIG_check_num_args("btDefaultSerializer::finishSerialization",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultSerializer::finishSerialization",1,"btDefaultSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultSerializer,0))){
    SWIG_fail_ptr("btDefaultSerializer_finishSerialization",1,SWIGTYPE_p_btDefaultSerializer);
  }
  
  (arg1)->finishSerialization();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultSerializer_getUniquePointer(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btDefaultSerializer::getUniquePointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultSerializer::getUniquePointer",1,"btDefaultSerializer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDefaultSerializer::getUniquePointer",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultSerializer,0))){
    SWIG_fail_ptr("btDefaultSerializer_getUniquePointer",1,SWIGTYPE_p_btDefaultSerializer);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btDefaultSerializer_getUniquePointer");
  result = (void *)(arg1)->getUniquePointer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultSerializer_getBufferPointer(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("btDefaultSerializer::getBufferPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultSerializer::getBufferPointer",1,"btDefaultSerializer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultSerializer,0))){
    SWIG_fail_ptr("btDefaultSerializer_getBufferPointer",1,SWIGTYPE_p_btDefaultSerializer);
  }
  
  result = (unsigned char *)((btDefaultSerializer const *)arg1)->getBufferPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultSerializer_getCurrentBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  int result;
  
  SWIG_check_num_args("btDefaultSerializer::getCurrentBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultSerializer::getCurrentBufferSize",1,"btDefaultSerializer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultSerializer,0))){
    SWIG_fail_ptr("btDefaultSerializer_getCurrentBufferSize",1,SWIGTYPE_p_btDefaultSerializer);
  }
  
  result = (int)((btDefaultSerializer const *)arg1)->getCurrentBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultSerializer_finalizeChunk(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  btChunk *arg2 = (btChunk *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  
  SWIG_check_num_args("btDefaultSerializer::finalizeChunk",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultSerializer::finalizeChunk",1,"btDefaultSerializer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDefaultSerializer::finalizeChunk",2,"btChunk *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("btDefaultSerializer::finalizeChunk",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btDefaultSerializer::finalizeChunk",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btDefaultSerializer::finalizeChunk",5,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultSerializer,0))){
    SWIG_fail_ptr("btDefaultSerializer_finalizeChunk",1,SWIGTYPE_p_btDefaultSerializer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btChunk,0))){
    SWIG_fail_ptr("btDefaultSerializer_finalizeChunk",2,SWIGTYPE_p_btChunk);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"btDefaultSerializer_finalizeChunk");
  (arg1)->finalizeChunk(arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultSerializer_internalAlloc(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  size_t arg2 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("btDefaultSerializer::internalAlloc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultSerializer::internalAlloc",1,"btDefaultSerializer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDefaultSerializer::internalAlloc",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultSerializer,0))){
    SWIG_fail_ptr("btDefaultSerializer_internalAlloc",1,SWIGTYPE_p_btDefaultSerializer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char *)(arg1)->internalAlloc(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultSerializer_allocate(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  size_t arg2 ;
  int arg3 ;
  btChunk *result = 0 ;
  
  SWIG_check_num_args("btDefaultSerializer::allocate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultSerializer::allocate",1,"btDefaultSerializer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDefaultSerializer::allocate",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btDefaultSerializer::allocate",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultSerializer,0))){
    SWIG_fail_ptr("btDefaultSerializer_allocate",1,SWIGTYPE_p_btDefaultSerializer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (btChunk *)(arg1)->allocate(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btChunk,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultSerializer_findNameForPointer(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btDefaultSerializer::findNameForPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultSerializer::findNameForPointer",1,"btDefaultSerializer const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDefaultSerializer::findNameForPointer",2,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultSerializer,0))){
    SWIG_fail_ptr("btDefaultSerializer_findNameForPointer",1,SWIGTYPE_p_btDefaultSerializer);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btDefaultSerializer_findNameForPointer");
  result = (char *)((btDefaultSerializer const *)arg1)->findNameForPointer((void const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultSerializer_registerNameForPointer(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("btDefaultSerializer::registerNameForPointer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultSerializer::registerNameForPointer",1,"btDefaultSerializer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDefaultSerializer::registerNameForPointer",2,"void const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("btDefaultSerializer::registerNameForPointer",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultSerializer,0))){
    SWIG_fail_ptr("btDefaultSerializer_registerNameForPointer",1,SWIGTYPE_p_btDefaultSerializer);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btDefaultSerializer_registerNameForPointer");
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->registerNameForPointer((void const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultSerializer_serializeName(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("btDefaultSerializer::serializeName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultSerializer::serializeName",1,"btDefaultSerializer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btDefaultSerializer::serializeName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultSerializer,0))){
    SWIG_fail_ptr("btDefaultSerializer_serializeName",1,SWIGTYPE_p_btDefaultSerializer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->serializeName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultSerializer_getSerializationFlags(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  int result;
  
  SWIG_check_num_args("btDefaultSerializer::getSerializationFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultSerializer::getSerializationFlags",1,"btDefaultSerializer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultSerializer,0))){
    SWIG_fail_ptr("btDefaultSerializer_getSerializationFlags",1,SWIGTYPE_p_btDefaultSerializer);
  }
  
  result = (int)((btDefaultSerializer const *)arg1)->getSerializationFlags();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDefaultSerializer_setSerializationFlags(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btDefaultSerializer::setSerializationFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultSerializer::setSerializationFlags",1,"btDefaultSerializer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDefaultSerializer::setSerializationFlags",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultSerializer,0))){
    SWIG_fail_ptr("btDefaultSerializer_setSerializationFlags",1,SWIGTYPE_p_btDefaultSerializer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setSerializationFlags(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btDefaultSerializer(void *obj) {
btDefaultSerializer *arg1 = (btDefaultSerializer *) obj;
delete arg1;
}
static swig_lua_method swig_btDefaultSerializer_methods[] = {
    {"writeHeader", _wrap_btDefaultSerializer_writeHeader}, 
    {"startSerialization", _wrap_btDefaultSerializer_startSerialization}, 
    {"finishSerialization", _wrap_btDefaultSerializer_finishSerialization}, 
    {"getUniquePointer", _wrap_btDefaultSerializer_getUniquePointer}, 
    {"getBufferPointer", _wrap_btDefaultSerializer_getBufferPointer}, 
    {"getCurrentBufferSize", _wrap_btDefaultSerializer_getCurrentBufferSize}, 
    {"finalizeChunk", _wrap_btDefaultSerializer_finalizeChunk}, 
    {"internalAlloc", _wrap_btDefaultSerializer_internalAlloc}, 
    {"allocate", _wrap_btDefaultSerializer_allocate}, 
    {"findNameForPointer", _wrap_btDefaultSerializer_findNameForPointer}, 
    {"registerNameForPointer", _wrap_btDefaultSerializer_registerNameForPointer}, 
    {"serializeName", _wrap_btDefaultSerializer_serializeName}, 
    {"getSerializationFlags", _wrap_btDefaultSerializer_getSerializationFlags}, 
    {"setSerializationFlags", _wrap_btDefaultSerializer_setSerializationFlags}, 
    {0,0}
};
static swig_lua_attribute swig_btDefaultSerializer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btDefaultSerializer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btDefaultSerializer_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btDefaultSerializer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btDefaultSerializer_bases[] = {0,0};
static const char *swig_btDefaultSerializer_base_names[] = {"btSerializer *",0};
static swig_lua_class _wrap_class_btDefaultSerializer = { "btDefaultSerializer", &SWIGTYPE_p_btDefaultSerializer,_wrap_new_btDefaultSerializer, swig_delete_btDefaultSerializer, swig_btDefaultSerializer_methods, swig_btDefaultSerializer_attributes, { "btDefaultSerializer", swig_btDefaultSerializer_cls_methods, swig_btDefaultSerializer_cls_attributes, swig_btDefaultSerializer_cls_constants }, swig_btDefaultSerializer_bases, swig_btDefaultSerializer_base_names };

static int _wrap_new_btTriangleInfo(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfo *result = 0 ;
  
  SWIG_check_num_args("btTriangleInfo::btTriangleInfo",0,0)
  result = (btTriangleInfo *)new btTriangleInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTriangleInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfo_m_flags_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTriangleInfo::m_flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfo::m_flags",1,"btTriangleInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfo::m_flags",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfo,0))){
    SWIG_fail_ptr("btTriangleInfo_m_flags_set",1,SWIGTYPE_p_btTriangleInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfo_m_flags_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("btTriangleInfo::m_flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfo::m_flags",1,"btTriangleInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfo,0))){
    SWIG_fail_ptr("btTriangleInfo_m_flags_get",1,SWIGTYPE_p_btTriangleInfo);
  }
  
  result = (int) ((arg1)->m_flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfo_m_edgeV0V1Angle_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTriangleInfo::m_edgeV0V1Angle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfo::m_edgeV0V1Angle",1,"btTriangleInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfo::m_edgeV0V1Angle",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfo,0))){
    SWIG_fail_ptr("btTriangleInfo_m_edgeV0V1Angle_set",1,SWIGTYPE_p_btTriangleInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_edgeV0V1Angle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfo_m_edgeV0V1Angle_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTriangleInfo::m_edgeV0V1Angle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfo::m_edgeV0V1Angle",1,"btTriangleInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfo,0))){
    SWIG_fail_ptr("btTriangleInfo_m_edgeV0V1Angle_get",1,SWIGTYPE_p_btTriangleInfo);
  }
  
  result = (btScalar) ((arg1)->m_edgeV0V1Angle);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfo_m_edgeV1V2Angle_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTriangleInfo::m_edgeV1V2Angle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfo::m_edgeV1V2Angle",1,"btTriangleInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfo::m_edgeV1V2Angle",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfo,0))){
    SWIG_fail_ptr("btTriangleInfo_m_edgeV1V2Angle_set",1,SWIGTYPE_p_btTriangleInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_edgeV1V2Angle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfo_m_edgeV1V2Angle_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTriangleInfo::m_edgeV1V2Angle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfo::m_edgeV1V2Angle",1,"btTriangleInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfo,0))){
    SWIG_fail_ptr("btTriangleInfo_m_edgeV1V2Angle_get",1,SWIGTYPE_p_btTriangleInfo);
  }
  
  result = (btScalar) ((arg1)->m_edgeV1V2Angle);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfo_m_edgeV2V0Angle_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTriangleInfo::m_edgeV2V0Angle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfo::m_edgeV2V0Angle",1,"btTriangleInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfo::m_edgeV2V0Angle",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfo,0))){
    SWIG_fail_ptr("btTriangleInfo_m_edgeV2V0Angle_set",1,SWIGTYPE_p_btTriangleInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_edgeV2V0Angle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfo_m_edgeV2V0Angle_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTriangleInfo::m_edgeV2V0Angle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfo::m_edgeV2V0Angle",1,"btTriangleInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfo,0))){
    SWIG_fail_ptr("btTriangleInfo_m_edgeV2V0Angle_get",1,SWIGTYPE_p_btTriangleInfo);
  }
  
  result = (btScalar) ((arg1)->m_edgeV2V0Angle);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTriangleInfo(void *obj) {
btTriangleInfo *arg1 = (btTriangleInfo *) obj;
delete arg1;
}
static swig_lua_method swig_btTriangleInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btTriangleInfo_attributes[] = {
    { "m_flags", _wrap_btTriangleInfo_m_flags_get, _wrap_btTriangleInfo_m_flags_set},
    { "m_edgeV0V1Angle", _wrap_btTriangleInfo_m_edgeV0V1Angle_get, _wrap_btTriangleInfo_m_edgeV0V1Angle_set},
    { "m_edgeV1V2Angle", _wrap_btTriangleInfo_m_edgeV1V2Angle_get, _wrap_btTriangleInfo_m_edgeV1V2Angle_set},
    { "m_edgeV2V0Angle", _wrap_btTriangleInfo_m_edgeV2V0Angle_get, _wrap_btTriangleInfo_m_edgeV2V0Angle_set},
    {0,0,0}
};
static swig_lua_attribute swig_btTriangleInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTriangleInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTriangleInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTriangleInfo_bases[] = {0};
static const char *swig_btTriangleInfo_base_names[] = {0};
static swig_lua_class _wrap_class_btTriangleInfo = { "btTriangleInfo", &SWIGTYPE_p_btTriangleInfo,_wrap_new_btTriangleInfo, swig_delete_btTriangleInfo, swig_btTriangleInfo_methods, swig_btTriangleInfo_attributes, { "btTriangleInfo", swig_btTriangleInfo_cls_methods, swig_btTriangleInfo_cls_attributes, swig_btTriangleInfo_cls_constants }, swig_btTriangleInfo_bases, swig_btTriangleInfo_base_names };

static int _wrap_btTriangleInfoMap_m_convexEpsilon_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTriangleInfoMap::m_convexEpsilon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMap::m_convexEpsilon",1,"btTriangleInfoMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoMap::m_convexEpsilon",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMap,0))){
    SWIG_fail_ptr("btTriangleInfoMap_m_convexEpsilon_set",1,SWIGTYPE_p_btTriangleInfoMap);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_convexEpsilon = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMap_m_convexEpsilon_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTriangleInfoMap::m_convexEpsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMap::m_convexEpsilon",1,"btTriangleInfoMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMap,0))){
    SWIG_fail_ptr("btTriangleInfoMap_m_convexEpsilon_get",1,SWIGTYPE_p_btTriangleInfoMap);
  }
  
  result = (btScalar) ((arg1)->m_convexEpsilon);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMap_m_planarEpsilon_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTriangleInfoMap::m_planarEpsilon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMap::m_planarEpsilon",1,"btTriangleInfoMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoMap::m_planarEpsilon",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMap,0))){
    SWIG_fail_ptr("btTriangleInfoMap_m_planarEpsilon_set",1,SWIGTYPE_p_btTriangleInfoMap);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_planarEpsilon = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMap_m_planarEpsilon_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTriangleInfoMap::m_planarEpsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMap::m_planarEpsilon",1,"btTriangleInfoMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMap,0))){
    SWIG_fail_ptr("btTriangleInfoMap_m_planarEpsilon_get",1,SWIGTYPE_p_btTriangleInfoMap);
  }
  
  result = (btScalar) ((arg1)->m_planarEpsilon);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMap_m_equalVertexThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTriangleInfoMap::m_equalVertexThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMap::m_equalVertexThreshold",1,"btTriangleInfoMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoMap::m_equalVertexThreshold",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMap,0))){
    SWIG_fail_ptr("btTriangleInfoMap_m_equalVertexThreshold_set",1,SWIGTYPE_p_btTriangleInfoMap);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_equalVertexThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMap_m_equalVertexThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTriangleInfoMap::m_equalVertexThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMap::m_equalVertexThreshold",1,"btTriangleInfoMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMap,0))){
    SWIG_fail_ptr("btTriangleInfoMap_m_equalVertexThreshold_get",1,SWIGTYPE_p_btTriangleInfoMap);
  }
  
  result = (btScalar) ((arg1)->m_equalVertexThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMap_m_edgeDistanceThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTriangleInfoMap::m_edgeDistanceThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMap::m_edgeDistanceThreshold",1,"btTriangleInfoMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoMap::m_edgeDistanceThreshold",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMap,0))){
    SWIG_fail_ptr("btTriangleInfoMap_m_edgeDistanceThreshold_set",1,SWIGTYPE_p_btTriangleInfoMap);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_edgeDistanceThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMap_m_edgeDistanceThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTriangleInfoMap::m_edgeDistanceThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMap::m_edgeDistanceThreshold",1,"btTriangleInfoMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMap,0))){
    SWIG_fail_ptr("btTriangleInfoMap_m_edgeDistanceThreshold_get",1,SWIGTYPE_p_btTriangleInfoMap);
  }
  
  result = (btScalar) ((arg1)->m_edgeDistanceThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMap_m_maxEdgeAngleThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTriangleInfoMap::m_maxEdgeAngleThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMap::m_maxEdgeAngleThreshold",1,"btTriangleInfoMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoMap::m_maxEdgeAngleThreshold",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMap,0))){
    SWIG_fail_ptr("btTriangleInfoMap_m_maxEdgeAngleThreshold_set",1,SWIGTYPE_p_btTriangleInfoMap);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_maxEdgeAngleThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMap_m_maxEdgeAngleThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTriangleInfoMap::m_maxEdgeAngleThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMap::m_maxEdgeAngleThreshold",1,"btTriangleInfoMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMap,0))){
    SWIG_fail_ptr("btTriangleInfoMap_m_maxEdgeAngleThreshold_get",1,SWIGTYPE_p_btTriangleInfoMap);
  }
  
  result = (btScalar) ((arg1)->m_maxEdgeAngleThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMap_m_zeroAreaThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTriangleInfoMap::m_zeroAreaThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMap::m_zeroAreaThreshold",1,"btTriangleInfoMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoMap::m_zeroAreaThreshold",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMap,0))){
    SWIG_fail_ptr("btTriangleInfoMap_m_zeroAreaThreshold_set",1,SWIGTYPE_p_btTriangleInfoMap);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_zeroAreaThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMap_m_zeroAreaThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTriangleInfoMap::m_zeroAreaThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMap::m_zeroAreaThreshold",1,"btTriangleInfoMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMap,0))){
    SWIG_fail_ptr("btTriangleInfoMap_m_zeroAreaThreshold_get",1,SWIGTYPE_p_btTriangleInfoMap);
  }
  
  result = (btScalar) ((arg1)->m_zeroAreaThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTriangleInfoMap(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMap *result = 0 ;
  
  SWIG_check_num_args("btTriangleInfoMap::btTriangleInfoMap",0,0)
  result = (btTriangleInfoMap *)new btTriangleInfoMap();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTriangleInfoMap,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMap_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  int result;
  
  SWIG_check_num_args("btTriangleInfoMap::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMap::calculateSerializeBufferSize",1,"btTriangleInfoMap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMap,0))){
    SWIG_fail_ptr("btTriangleInfoMap_calculateSerializeBufferSize",1,SWIGTYPE_p_btTriangleInfoMap);
  }
  
  result = (int)((btTriangleInfoMap const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMap_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btTriangleInfoMap::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMap::serialize",1,"btTriangleInfoMap const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleInfoMap::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btTriangleInfoMap::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMap,0))){
    SWIG_fail_ptr("btTriangleInfoMap_serialize",1,SWIGTYPE_p_btTriangleInfoMap);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btTriangleInfoMap_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btTriangleInfoMap_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  result = (char *)((btTriangleInfoMap const *)arg1)->serialize(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMap_deSerialize(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btTriangleInfoMapData *arg2 = 0 ;
  
  SWIG_check_num_args("btTriangleInfoMap::deSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMap::deSerialize",1,"btTriangleInfoMap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTriangleInfoMap::deSerialize",2,"btTriangleInfoMapData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMap,0))){
    SWIG_fail_ptr("btTriangleInfoMap_deSerialize",1,SWIGTYPE_p_btTriangleInfoMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMap_deSerialize",2,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  (arg1)->deSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTriangleInfoMap(void *obj) {
btTriangleInfoMap *arg1 = (btTriangleInfoMap *) obj;
delete arg1;
}
static swig_lua_method swig_btTriangleInfoMap_methods[] = {
    {"calculateSerializeBufferSize", _wrap_btTriangleInfoMap_calculateSerializeBufferSize}, 
    {"serialize", _wrap_btTriangleInfoMap_serialize}, 
    {"deSerialize", _wrap_btTriangleInfoMap_deSerialize}, 
    {0,0}
};
static swig_lua_attribute swig_btTriangleInfoMap_attributes[] = {
    { "m_convexEpsilon", _wrap_btTriangleInfoMap_m_convexEpsilon_get, _wrap_btTriangleInfoMap_m_convexEpsilon_set},
    { "m_planarEpsilon", _wrap_btTriangleInfoMap_m_planarEpsilon_get, _wrap_btTriangleInfoMap_m_planarEpsilon_set},
    { "m_equalVertexThreshold", _wrap_btTriangleInfoMap_m_equalVertexThreshold_get, _wrap_btTriangleInfoMap_m_equalVertexThreshold_set},
    { "m_edgeDistanceThreshold", _wrap_btTriangleInfoMap_m_edgeDistanceThreshold_get, _wrap_btTriangleInfoMap_m_edgeDistanceThreshold_set},
    { "m_maxEdgeAngleThreshold", _wrap_btTriangleInfoMap_m_maxEdgeAngleThreshold_get, _wrap_btTriangleInfoMap_m_maxEdgeAngleThreshold_set},
    { "m_zeroAreaThreshold", _wrap_btTriangleInfoMap_m_zeroAreaThreshold_get, _wrap_btTriangleInfoMap_m_zeroAreaThreshold_set},
    {0,0,0}
};
static swig_lua_attribute swig_btTriangleInfoMap_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTriangleInfoMap_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTriangleInfoMap_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTriangleInfoMap_bases[] = {0};
static const char *swig_btTriangleInfoMap_base_names[] = {0};
static swig_lua_class _wrap_class_btTriangleInfoMap = { "btTriangleInfoMap", &SWIGTYPE_p_btTriangleInfoMap,_wrap_new_btTriangleInfoMap, swig_delete_btTriangleInfoMap, swig_btTriangleInfoMap_methods, swig_btTriangleInfoMap_attributes, { "btTriangleInfoMap", swig_btTriangleInfoMap_cls_methods, swig_btTriangleInfoMap_cls_attributes, swig_btTriangleInfoMap_cls_constants }, swig_btTriangleInfoMap_bases, swig_btTriangleInfoMap_base_names };

static int _wrap_btTriangleInfoData_m_flags_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTriangleInfoData::m_flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoData::m_flags",1,"btTriangleInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoData::m_flags",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoData,0))){
    SWIG_fail_ptr("btTriangleInfoData_m_flags_set",1,SWIGTYPE_p_btTriangleInfoData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoData_m_flags_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  int result;
  
  SWIG_check_num_args("btTriangleInfoData::m_flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoData::m_flags",1,"btTriangleInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoData,0))){
    SWIG_fail_ptr("btTriangleInfoData_m_flags_get",1,SWIGTYPE_p_btTriangleInfoData);
  }
  
  result = (int) ((arg1)->m_flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoData_m_edgeV0V1Angle_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btTriangleInfoData::m_edgeV0V1Angle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoData::m_edgeV0V1Angle",1,"btTriangleInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoData::m_edgeV0V1Angle",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoData,0))){
    SWIG_fail_ptr("btTriangleInfoData_m_edgeV0V1Angle_set",1,SWIGTYPE_p_btTriangleInfoData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_edgeV0V1Angle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoData_m_edgeV0V1Angle_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float result;
  
  SWIG_check_num_args("btTriangleInfoData::m_edgeV0V1Angle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoData::m_edgeV0V1Angle",1,"btTriangleInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoData,0))){
    SWIG_fail_ptr("btTriangleInfoData_m_edgeV0V1Angle_get",1,SWIGTYPE_p_btTriangleInfoData);
  }
  
  result = (float) ((arg1)->m_edgeV0V1Angle);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoData_m_edgeV1V2Angle_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btTriangleInfoData::m_edgeV1V2Angle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoData::m_edgeV1V2Angle",1,"btTriangleInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoData::m_edgeV1V2Angle",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoData,0))){
    SWIG_fail_ptr("btTriangleInfoData_m_edgeV1V2Angle_set",1,SWIGTYPE_p_btTriangleInfoData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_edgeV1V2Angle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoData_m_edgeV1V2Angle_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float result;
  
  SWIG_check_num_args("btTriangleInfoData::m_edgeV1V2Angle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoData::m_edgeV1V2Angle",1,"btTriangleInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoData,0))){
    SWIG_fail_ptr("btTriangleInfoData_m_edgeV1V2Angle_get",1,SWIGTYPE_p_btTriangleInfoData);
  }
  
  result = (float) ((arg1)->m_edgeV1V2Angle);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoData_m_edgeV2V0Angle_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btTriangleInfoData::m_edgeV2V0Angle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoData::m_edgeV2V0Angle",1,"btTriangleInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoData::m_edgeV2V0Angle",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoData,0))){
    SWIG_fail_ptr("btTriangleInfoData_m_edgeV2V0Angle_set",1,SWIGTYPE_p_btTriangleInfoData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_edgeV2V0Angle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoData_m_edgeV2V0Angle_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float result;
  
  SWIG_check_num_args("btTriangleInfoData::m_edgeV2V0Angle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoData::m_edgeV2V0Angle",1,"btTriangleInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoData,0))){
    SWIG_fail_ptr("btTriangleInfoData_m_edgeV2V0Angle_get",1,SWIGTYPE_p_btTriangleInfoData);
  }
  
  result = (float) ((arg1)->m_edgeV2V0Angle);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTriangleInfoData(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoData *result = 0 ;
  
  SWIG_check_num_args("btTriangleInfoData::btTriangleInfoData",0,0)
  result = (btTriangleInfoData *)new btTriangleInfoData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTriangleInfoData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTriangleInfoData(void *obj) {
btTriangleInfoData *arg1 = (btTriangleInfoData *) obj;
delete arg1;
}
static swig_lua_method swig_btTriangleInfoData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btTriangleInfoData_attributes[] = {
    { "m_flags", _wrap_btTriangleInfoData_m_flags_get, _wrap_btTriangleInfoData_m_flags_set},
    { "m_edgeV0V1Angle", _wrap_btTriangleInfoData_m_edgeV0V1Angle_get, _wrap_btTriangleInfoData_m_edgeV0V1Angle_set},
    { "m_edgeV1V2Angle", _wrap_btTriangleInfoData_m_edgeV1V2Angle_get, _wrap_btTriangleInfoData_m_edgeV1V2Angle_set},
    { "m_edgeV2V0Angle", _wrap_btTriangleInfoData_m_edgeV2V0Angle_get, _wrap_btTriangleInfoData_m_edgeV2V0Angle_set},
    {0,0,0}
};
static swig_lua_attribute swig_btTriangleInfoData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTriangleInfoData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTriangleInfoData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTriangleInfoData_bases[] = {0};
static const char *swig_btTriangleInfoData_base_names[] = {0};
static swig_lua_class _wrap_class_btTriangleInfoData = { "btTriangleInfoData", &SWIGTYPE_p_btTriangleInfoData,_wrap_new_btTriangleInfoData, swig_delete_btTriangleInfoData, swig_btTriangleInfoData_methods, swig_btTriangleInfoData_attributes, { "btTriangleInfoData", swig_btTriangleInfoData_cls_methods, swig_btTriangleInfoData_cls_attributes, swig_btTriangleInfoData_cls_constants }, swig_btTriangleInfoData_bases, swig_btTriangleInfoData_base_names };

static int _wrap_btTriangleInfoMapData_m_hashTablePtr_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *arg2 = (int *) 0 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_hashTablePtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_hashTablePtr",1,"btTriangleInfoMapData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleInfoMapData::m_hashTablePtr",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_hashTablePtr_set",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_hashTablePtr_set",2,SWIGTYPE_p_int);
  }
  
  if (arg1) (arg1)->m_hashTablePtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_hashTablePtr_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_hashTablePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_hashTablePtr",1,"btTriangleInfoMapData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_hashTablePtr_get",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  result = (int *) ((arg1)->m_hashTablePtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_nextPtr_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *arg2 = (int *) 0 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_nextPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_nextPtr",1,"btTriangleInfoMapData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleInfoMapData::m_nextPtr",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_nextPtr_set",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_nextPtr_set",2,SWIGTYPE_p_int);
  }
  
  if (arg1) (arg1)->m_nextPtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_nextPtr_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_nextPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_nextPtr",1,"btTriangleInfoMapData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_nextPtr_get",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  result = (int *) ((arg1)->m_nextPtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_valueArrayPtr_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  btTriangleInfoData *arg2 = (btTriangleInfoData *) 0 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_valueArrayPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_valueArrayPtr",1,"btTriangleInfoMapData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleInfoMapData::m_valueArrayPtr",2,"btTriangleInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_valueArrayPtr_set",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTriangleInfoData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_valueArrayPtr_set",2,SWIGTYPE_p_btTriangleInfoData);
  }
  
  if (arg1) (arg1)->m_valueArrayPtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_valueArrayPtr_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  btTriangleInfoData *result = 0 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_valueArrayPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_valueArrayPtr",1,"btTriangleInfoMapData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_valueArrayPtr_get",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  result = (btTriangleInfoData *) ((arg1)->m_valueArrayPtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTriangleInfoData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_keyArrayPtr_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *arg2 = (int *) 0 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_keyArrayPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_keyArrayPtr",1,"btTriangleInfoMapData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleInfoMapData::m_keyArrayPtr",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_keyArrayPtr_set",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_keyArrayPtr_set",2,SWIGTYPE_p_int);
  }
  
  if (arg1) (arg1)->m_keyArrayPtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_keyArrayPtr_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_keyArrayPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_keyArrayPtr",1,"btTriangleInfoMapData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_keyArrayPtr_get",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  result = (int *) ((arg1)->m_keyArrayPtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_convexEpsilon_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_convexEpsilon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_convexEpsilon",1,"btTriangleInfoMapData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoMapData::m_convexEpsilon",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_convexEpsilon_set",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_convexEpsilon = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_convexEpsilon_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float result;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_convexEpsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_convexEpsilon",1,"btTriangleInfoMapData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_convexEpsilon_get",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  result = (float) ((arg1)->m_convexEpsilon);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_planarEpsilon_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_planarEpsilon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_planarEpsilon",1,"btTriangleInfoMapData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoMapData::m_planarEpsilon",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_planarEpsilon_set",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_planarEpsilon = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_planarEpsilon_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float result;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_planarEpsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_planarEpsilon",1,"btTriangleInfoMapData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_planarEpsilon_get",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  result = (float) ((arg1)->m_planarEpsilon);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_equalVertexThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_equalVertexThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_equalVertexThreshold",1,"btTriangleInfoMapData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoMapData::m_equalVertexThreshold",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_equalVertexThreshold_set",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_equalVertexThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_equalVertexThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float result;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_equalVertexThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_equalVertexThreshold",1,"btTriangleInfoMapData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_equalVertexThreshold_get",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  result = (float) ((arg1)->m_equalVertexThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_edgeDistanceThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_edgeDistanceThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_edgeDistanceThreshold",1,"btTriangleInfoMapData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoMapData::m_edgeDistanceThreshold",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_edgeDistanceThreshold_set",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_edgeDistanceThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_edgeDistanceThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float result;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_edgeDistanceThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_edgeDistanceThreshold",1,"btTriangleInfoMapData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_edgeDistanceThreshold_get",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  result = (float) ((arg1)->m_edgeDistanceThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_zeroAreaThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_zeroAreaThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_zeroAreaThreshold",1,"btTriangleInfoMapData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoMapData::m_zeroAreaThreshold",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_zeroAreaThreshold_set",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_zeroAreaThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_zeroAreaThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float result;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_zeroAreaThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_zeroAreaThreshold",1,"btTriangleInfoMapData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_zeroAreaThreshold_get",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  result = (float) ((arg1)->m_zeroAreaThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_nextSize_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_nextSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_nextSize",1,"btTriangleInfoMapData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoMapData::m_nextSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_nextSize_set",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_nextSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_nextSize_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int result;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_nextSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_nextSize",1,"btTriangleInfoMapData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_nextSize_get",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  result = (int) ((arg1)->m_nextSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_hashTableSize_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_hashTableSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_hashTableSize",1,"btTriangleInfoMapData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoMapData::m_hashTableSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_hashTableSize_set",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_hashTableSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_hashTableSize_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int result;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_hashTableSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_hashTableSize",1,"btTriangleInfoMapData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_hashTableSize_get",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  result = (int) ((arg1)->m_hashTableSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_numValues_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_numValues",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_numValues",1,"btTriangleInfoMapData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoMapData::m_numValues",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_numValues_set",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numValues = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_numValues_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int result;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_numValues",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_numValues",1,"btTriangleInfoMapData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_numValues_get",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  result = (int) ((arg1)->m_numValues);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_numKeys_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_numKeys",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_numKeys",1,"btTriangleInfoMapData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleInfoMapData::m_numKeys",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_numKeys_set",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numKeys = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_numKeys_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int result;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_numKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_numKeys",1,"btTriangleInfoMapData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_numKeys_get",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  result = (int) ((arg1)->m_numKeys);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_padding_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_padding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_padding",1,"btTriangleInfoMapData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btTriangleInfoMapData::m_padding",2,"char [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_padding_set",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleInfoMapData_m_padding_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::m_padding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleInfoMapData::m_padding",1,"btTriangleInfoMapData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleInfoMapData,0))){
    SWIG_fail_ptr("btTriangleInfoMapData_m_padding_get",1,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  result = (char *)(char *) ((arg1)->m_padding);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTriangleInfoMapData(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleInfoMapData *result = 0 ;
  
  SWIG_check_num_args("btTriangleInfoMapData::btTriangleInfoMapData",0,0)
  result = (btTriangleInfoMapData *)new btTriangleInfoMapData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTriangleInfoMapData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTriangleInfoMapData(void *obj) {
btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) obj;
delete arg1;
}
static swig_lua_method swig_btTriangleInfoMapData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btTriangleInfoMapData_attributes[] = {
    { "m_hashTablePtr", _wrap_btTriangleInfoMapData_m_hashTablePtr_get, _wrap_btTriangleInfoMapData_m_hashTablePtr_set},
    { "m_nextPtr", _wrap_btTriangleInfoMapData_m_nextPtr_get, _wrap_btTriangleInfoMapData_m_nextPtr_set},
    { "m_valueArrayPtr", _wrap_btTriangleInfoMapData_m_valueArrayPtr_get, _wrap_btTriangleInfoMapData_m_valueArrayPtr_set},
    { "m_keyArrayPtr", _wrap_btTriangleInfoMapData_m_keyArrayPtr_get, _wrap_btTriangleInfoMapData_m_keyArrayPtr_set},
    { "m_convexEpsilon", _wrap_btTriangleInfoMapData_m_convexEpsilon_get, _wrap_btTriangleInfoMapData_m_convexEpsilon_set},
    { "m_planarEpsilon", _wrap_btTriangleInfoMapData_m_planarEpsilon_get, _wrap_btTriangleInfoMapData_m_planarEpsilon_set},
    { "m_equalVertexThreshold", _wrap_btTriangleInfoMapData_m_equalVertexThreshold_get, _wrap_btTriangleInfoMapData_m_equalVertexThreshold_set},
    { "m_edgeDistanceThreshold", _wrap_btTriangleInfoMapData_m_edgeDistanceThreshold_get, _wrap_btTriangleInfoMapData_m_edgeDistanceThreshold_set},
    { "m_zeroAreaThreshold", _wrap_btTriangleInfoMapData_m_zeroAreaThreshold_get, _wrap_btTriangleInfoMapData_m_zeroAreaThreshold_set},
    { "m_nextSize", _wrap_btTriangleInfoMapData_m_nextSize_get, _wrap_btTriangleInfoMapData_m_nextSize_set},
    { "m_hashTableSize", _wrap_btTriangleInfoMapData_m_hashTableSize_get, _wrap_btTriangleInfoMapData_m_hashTableSize_set},
    { "m_numValues", _wrap_btTriangleInfoMapData_m_numValues_get, _wrap_btTriangleInfoMapData_m_numValues_set},
    { "m_numKeys", _wrap_btTriangleInfoMapData_m_numKeys_get, _wrap_btTriangleInfoMapData_m_numKeys_set},
    { "m_padding", _wrap_btTriangleInfoMapData_m_padding_get, _wrap_btTriangleInfoMapData_m_padding_set},
    {0,0,0}
};
static swig_lua_attribute swig_btTriangleInfoMapData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTriangleInfoMapData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTriangleInfoMapData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTriangleInfoMapData_bases[] = {0};
static const char *swig_btTriangleInfoMapData_base_names[] = {0};
static swig_lua_class _wrap_class_btTriangleInfoMapData = { "btTriangleInfoMapData", &SWIGTYPE_p_btTriangleInfoMapData,_wrap_new_btTriangleInfoMapData, swig_delete_btTriangleInfoMapData, swig_btTriangleInfoMapData_methods, swig_btTriangleInfoMapData_attributes, { "btTriangleInfoMapData", swig_btTriangleInfoMapData_cls_methods, swig_btTriangleInfoMapData_cls_attributes, swig_btTriangleInfoMapData_cls_constants }, swig_btTriangleInfoMapData_bases, swig_btTriangleInfoMapData_base_names };

static int _wrap_new_btBvhTriangleMeshShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  bool arg3 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::btBvhTriangleMeshShape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::btBvhTriangleMeshShape",1,"btStridingMeshInterface *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btBvhTriangleMeshShape::btBvhTriangleMeshShape",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("btBvhTriangleMeshShape::btBvhTriangleMeshShape",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("new_btBvhTriangleMeshShape",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (btBvhTriangleMeshShape *)new btBvhTriangleMeshShape(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBvhTriangleMeshShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBvhTriangleMeshShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::btBvhTriangleMeshShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::btBvhTriangleMeshShape",1,"btStridingMeshInterface *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btBvhTriangleMeshShape::btBvhTriangleMeshShape",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("new_btBvhTriangleMeshShape",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (btBvhTriangleMeshShape *)new btBvhTriangleMeshShape(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBvhTriangleMeshShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBvhTriangleMeshShape__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  bool arg5 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::btBvhTriangleMeshShape",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::btBvhTriangleMeshShape",1,"btStridingMeshInterface *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btBvhTriangleMeshShape::btBvhTriangleMeshShape",2,"bool");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBvhTriangleMeshShape::btBvhTriangleMeshShape",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btBvhTriangleMeshShape::btBvhTriangleMeshShape",4,"btVector3 const &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("btBvhTriangleMeshShape::btBvhTriangleMeshShape",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("new_btBvhTriangleMeshShape",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBvhTriangleMeshShape",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBvhTriangleMeshShape",4,SWIGTYPE_p_btVector3);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (btBvhTriangleMeshShape *)new btBvhTriangleMeshShape(arg1,arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBvhTriangleMeshShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBvhTriangleMeshShape__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::btBvhTriangleMeshShape",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::btBvhTriangleMeshShape",1,"btStridingMeshInterface *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btBvhTriangleMeshShape::btBvhTriangleMeshShape",2,"bool");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBvhTriangleMeshShape::btBvhTriangleMeshShape",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btBvhTriangleMeshShape::btBvhTriangleMeshShape",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStridingMeshInterface,0))){
    SWIG_fail_ptr("new_btBvhTriangleMeshShape",1,SWIGTYPE_p_btStridingMeshInterface);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBvhTriangleMeshShape",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBvhTriangleMeshShape",4,SWIGTYPE_p_btVector3);
  }
  
  result = (btBvhTriangleMeshShape *)new btBvhTriangleMeshShape(arg1,arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBvhTriangleMeshShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBvhTriangleMeshShape(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btStridingMeshInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_btBvhTriangleMeshShape__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btStridingMeshInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_btBvhTriangleMeshShape__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btStridingMeshInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_btBvhTriangleMeshShape__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btStridingMeshInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_btBvhTriangleMeshShape__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btBvhTriangleMeshShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btBvhTriangleMeshShape::btBvhTriangleMeshShape(btStridingMeshInterface *,bool,bool)\n"
    "    btBvhTriangleMeshShape::btBvhTriangleMeshShape(btStridingMeshInterface *,bool)\n"
    "    btBvhTriangleMeshShape::btBvhTriangleMeshShape(btStridingMeshInterface *,bool,btVector3 const &,btVector3 const &,bool)\n"
    "    btBvhTriangleMeshShape::btBvhTriangleMeshShape(btStridingMeshInterface *,bool,btVector3 const &,btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btBvhTriangleMeshShape_getOwnsBvh(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  bool result;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::getOwnsBvh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::getOwnsBvh",1,"btBvhTriangleMeshShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_getOwnsBvh",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  result = (bool)((btBvhTriangleMeshShape const *)arg1)->getOwnsBvh();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_performRaycast(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::performRaycast",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::performRaycast",1,"btBvhTriangleMeshShape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBvhTriangleMeshShape::performRaycast",2,"btTriangleCallback *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBvhTriangleMeshShape::performRaycast",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btBvhTriangleMeshShape::performRaycast",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_performRaycast",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTriangleCallback,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_performRaycast",2,SWIGTYPE_p_btTriangleCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_performRaycast",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_performRaycast",4,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->performRaycast(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_performConvexcast(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::performConvexcast",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::performConvexcast",1,"btBvhTriangleMeshShape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBvhTriangleMeshShape::performConvexcast",2,"btTriangleCallback *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBvhTriangleMeshShape::performConvexcast",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btBvhTriangleMeshShape::performConvexcast",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btBvhTriangleMeshShape::performConvexcast",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btBvhTriangleMeshShape::performConvexcast",6,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_performConvexcast",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTriangleCallback,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_performConvexcast",2,SWIGTYPE_p_btTriangleCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_performConvexcast",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_performConvexcast",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_performConvexcast",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_performConvexcast",6,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->performConvexcast(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_processAllTriangles(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::processAllTriangles",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::processAllTriangles",1,"btBvhTriangleMeshShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBvhTriangleMeshShape::processAllTriangles",2,"btTriangleCallback *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBvhTriangleMeshShape::processAllTriangles",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btBvhTriangleMeshShape::processAllTriangles",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_processAllTriangles",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTriangleCallback,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_processAllTriangles",2,SWIGTYPE_p_btTriangleCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_processAllTriangles",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_processAllTriangles",4,SWIGTYPE_p_btVector3);
  }
  
  ((btBvhTriangleMeshShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_refitTree(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::refitTree",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::refitTree",1,"btBvhTriangleMeshShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBvhTriangleMeshShape::refitTree",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBvhTriangleMeshShape::refitTree",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_refitTree",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_refitTree",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_refitTree",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->refitTree((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_partialRefitTree(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::partialRefitTree",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::partialRefitTree",1,"btBvhTriangleMeshShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBvhTriangleMeshShape::partialRefitTree",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBvhTriangleMeshShape::partialRefitTree",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_partialRefitTree",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_partialRefitTree",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_partialRefitTree",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->partialRefitTree((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_getName(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::getName",1,"btBvhTriangleMeshShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_getName",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  result = (char *)((btBvhTriangleMeshShape const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_setLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::setLocalScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::setLocalScaling",1,"btBvhTriangleMeshShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBvhTriangleMeshShape::setLocalScaling",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_setLocalScaling",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_setLocalScaling",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_getOptimizedBvh(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btOptimizedBvh *result = 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::getOptimizedBvh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::getOptimizedBvh",1,"btBvhTriangleMeshShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_getOptimizedBvh",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  result = (btOptimizedBvh *)(arg1)->getOptimizedBvh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btOptimizedBvh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_setOptimizedBvh__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btOptimizedBvh *arg2 = (btOptimizedBvh *) 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::setOptimizedBvh",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::setOptimizedBvh",1,"btBvhTriangleMeshShape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBvhTriangleMeshShape::setOptimizedBvh",2,"btOptimizedBvh *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBvhTriangleMeshShape::setOptimizedBvh",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_setOptimizedBvh",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOptimizedBvh,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_setOptimizedBvh",2,SWIGTYPE_p_btOptimizedBvh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_setOptimizedBvh",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setOptimizedBvh(arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_setOptimizedBvh__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btOptimizedBvh *arg2 = (btOptimizedBvh *) 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::setOptimizedBvh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::setOptimizedBvh",1,"btBvhTriangleMeshShape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBvhTriangleMeshShape::setOptimizedBvh",2,"btOptimizedBvh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_setOptimizedBvh",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOptimizedBvh,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_setOptimizedBvh",2,SWIGTYPE_p_btOptimizedBvh);
  }
  
  (arg1)->setOptimizedBvh(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_setOptimizedBvh(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btBvhTriangleMeshShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btOptimizedBvh, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btBvhTriangleMeshShape_setOptimizedBvh__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btBvhTriangleMeshShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btOptimizedBvh, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btBvhTriangleMeshShape_setOptimizedBvh__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btBvhTriangleMeshShape_setOptimizedBvh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btBvhTriangleMeshShape::setOptimizedBvh(btOptimizedBvh *,btVector3 const &)\n"
    "    btBvhTriangleMeshShape::setOptimizedBvh(btOptimizedBvh *)\n");
  lua_error(L);return 0;
}


static int _wrap_btBvhTriangleMeshShape_buildOptimizedBvh(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::buildOptimizedBvh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::buildOptimizedBvh",1,"btBvhTriangleMeshShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_buildOptimizedBvh",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  (arg1)->buildOptimizedBvh();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_usesQuantizedAabbCompression(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  bool result;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::usesQuantizedAabbCompression",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::usesQuantizedAabbCompression",1,"btBvhTriangleMeshShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_usesQuantizedAabbCompression",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  result = (bool)((btBvhTriangleMeshShape const *)arg1)->usesQuantizedAabbCompression();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_setTriangleInfoMap(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleInfoMap *arg2 = (btTriangleInfoMap *) 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::setTriangleInfoMap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::setTriangleInfoMap",1,"btBvhTriangleMeshShape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBvhTriangleMeshShape::setTriangleInfoMap",2,"btTriangleInfoMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_setTriangleInfoMap",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTriangleInfoMap,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_setTriangleInfoMap",2,SWIGTYPE_p_btTriangleInfoMap);
  }
  
  (arg1)->setTriangleInfoMap(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_getTriangleInfoMap__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleInfoMap *result = 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::getTriangleInfoMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::getTriangleInfoMap",1,"btBvhTriangleMeshShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_getTriangleInfoMap",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  result = (btTriangleInfoMap *)((btBvhTriangleMeshShape const *)arg1)->getTriangleInfoMap();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTriangleInfoMap,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_getTriangleInfoMap__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleInfoMap *result = 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::getTriangleInfoMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::getTriangleInfoMap",1,"btBvhTriangleMeshShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_getTriangleInfoMap",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  result = (btTriangleInfoMap *)(arg1)->getTriangleInfoMap();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTriangleInfoMap,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_getTriangleInfoMap(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btBvhTriangleMeshShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btBvhTriangleMeshShape_getTriangleInfoMap__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btBvhTriangleMeshShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btBvhTriangleMeshShape_getTriangleInfoMap__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btBvhTriangleMeshShape_getTriangleInfoMap'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btBvhTriangleMeshShape::getTriangleInfoMap() const\n"
    "    btBvhTriangleMeshShape::getTriangleInfoMap()\n");
  lua_error(L);return 0;
}


static int _wrap_btBvhTriangleMeshShape_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::calculateSerializeBufferSize",1,"btBvhTriangleMeshShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_calculateSerializeBufferSize",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  result = (int)((btBvhTriangleMeshShape const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::serialize",1,"btBvhTriangleMeshShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBvhTriangleMeshShape::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btBvhTriangleMeshShape::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_serialize",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btBvhTriangleMeshShape_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  result = (char *)((btBvhTriangleMeshShape const *)arg1)->serialize(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_serializeSingleBvh(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::serializeSingleBvh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::serializeSingleBvh",1,"btBvhTriangleMeshShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBvhTriangleMeshShape::serializeSingleBvh",2,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_serializeSingleBvh",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_serializeSingleBvh",2,SWIGTYPE_p_btSerializer);
  }
  
  ((btBvhTriangleMeshShape const *)arg1)->serializeSingleBvh(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBvhTriangleMeshShape_serializeSingleTriangleInfoMap(lua_State* L) {
  int SWIG_arg = 0;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("btBvhTriangleMeshShape::serializeSingleTriangleInfoMap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBvhTriangleMeshShape::serializeSingleTriangleInfoMap",1,"btBvhTriangleMeshShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btBvhTriangleMeshShape::serializeSingleTriangleInfoMap",2,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_serializeSingleTriangleInfoMap",1,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btBvhTriangleMeshShape_serializeSingleTriangleInfoMap",2,SWIGTYPE_p_btSerializer);
  }
  
  ((btBvhTriangleMeshShape const *)arg1)->serializeSingleTriangleInfoMap(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btBvhTriangleMeshShape(void *obj) {
btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) obj;
delete arg1;
}
static swig_lua_method swig_btBvhTriangleMeshShape_methods[] = {
    {"getOwnsBvh", _wrap_btBvhTriangleMeshShape_getOwnsBvh}, 
    {"performRaycast", _wrap_btBvhTriangleMeshShape_performRaycast}, 
    {"performConvexcast", _wrap_btBvhTriangleMeshShape_performConvexcast}, 
    {"processAllTriangles", _wrap_btBvhTriangleMeshShape_processAllTriangles}, 
    {"refitTree", _wrap_btBvhTriangleMeshShape_refitTree}, 
    {"partialRefitTree", _wrap_btBvhTriangleMeshShape_partialRefitTree}, 
    {"getName", _wrap_btBvhTriangleMeshShape_getName}, 
    {"setLocalScaling", _wrap_btBvhTriangleMeshShape_setLocalScaling}, 
    {"getOptimizedBvh", _wrap_btBvhTriangleMeshShape_getOptimizedBvh}, 
    {"setOptimizedBvh", _wrap_btBvhTriangleMeshShape_setOptimizedBvh}, 
    {"buildOptimizedBvh", _wrap_btBvhTriangleMeshShape_buildOptimizedBvh}, 
    {"usesQuantizedAabbCompression", _wrap_btBvhTriangleMeshShape_usesQuantizedAabbCompression}, 
    {"setTriangleInfoMap", _wrap_btBvhTriangleMeshShape_setTriangleInfoMap}, 
    {"getTriangleInfoMap", _wrap_btBvhTriangleMeshShape_getTriangleInfoMap}, 
    {"calculateSerializeBufferSize", _wrap_btBvhTriangleMeshShape_calculateSerializeBufferSize}, 
    {"serialize", _wrap_btBvhTriangleMeshShape_serialize}, 
    {"serializeSingleBvh", _wrap_btBvhTriangleMeshShape_serializeSingleBvh}, 
    {"serializeSingleTriangleInfoMap", _wrap_btBvhTriangleMeshShape_serializeSingleTriangleInfoMap}, 
    {0,0}
};
static swig_lua_attribute swig_btBvhTriangleMeshShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btBvhTriangleMeshShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btBvhTriangleMeshShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btBvhTriangleMeshShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btBvhTriangleMeshShape_bases[] = {0,0};
static const char *swig_btBvhTriangleMeshShape_base_names[] = {"btTriangleMeshShape *",0};
static swig_lua_class _wrap_class_btBvhTriangleMeshShape = { "btBvhTriangleMeshShape", &SWIGTYPE_p_btBvhTriangleMeshShape,_wrap_new_btBvhTriangleMeshShape, swig_delete_btBvhTriangleMeshShape, swig_btBvhTriangleMeshShape_methods, swig_btBvhTriangleMeshShape_attributes, { "btBvhTriangleMeshShape", swig_btBvhTriangleMeshShape_cls_methods, swig_btBvhTriangleMeshShape_cls_attributes, swig_btBvhTriangleMeshShape_cls_constants }, swig_btBvhTriangleMeshShape_bases, swig_btBvhTriangleMeshShape_base_names };

static int _wrap_btTriangleMeshShapeData_m_collisionShapeData_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  SWIG_check_num_args("btTriangleMeshShapeData::m_collisionShapeData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShapeData::m_collisionShapeData",1,"btTriangleMeshShapeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleMeshShapeData::m_collisionShapeData",2,"btCollisionShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShapeData,0))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_collisionShapeData_set",1,SWIGTYPE_p_btTriangleMeshShapeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionShapeData,0))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_collisionShapeData_set",2,SWIGTYPE_p_btCollisionShapeData);
  }
  
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShapeData_m_collisionShapeData_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  SWIG_check_num_args("btTriangleMeshShapeData::m_collisionShapeData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShapeData::m_collisionShapeData",1,"btTriangleMeshShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShapeData,0))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_collisionShapeData_get",1,SWIGTYPE_p_btTriangleMeshShapeData);
  }
  
  result = (btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShapeData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShapeData_m_meshInterface_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btStridingMeshInterfaceData *arg2 = (btStridingMeshInterfaceData *) 0 ;
  
  SWIG_check_num_args("btTriangleMeshShapeData::m_meshInterface",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShapeData::m_meshInterface",1,"btTriangleMeshShapeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleMeshShapeData::m_meshInterface",2,"btStridingMeshInterfaceData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShapeData,0))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_meshInterface_set",1,SWIGTYPE_p_btTriangleMeshShapeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btStridingMeshInterfaceData,0))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_meshInterface_set",2,SWIGTYPE_p_btStridingMeshInterfaceData);
  }
  
  if (arg1) (arg1)->m_meshInterface = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShapeData_m_meshInterface_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btStridingMeshInterfaceData *result = 0 ;
  
  SWIG_check_num_args("btTriangleMeshShapeData::m_meshInterface",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShapeData::m_meshInterface",1,"btTriangleMeshShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShapeData,0))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_meshInterface_get",1,SWIGTYPE_p_btTriangleMeshShapeData);
  }
  
  result = (btStridingMeshInterfaceData *)& ((arg1)->m_meshInterface);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btStridingMeshInterfaceData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShapeData_m_quantizedFloatBvh_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btQuantizedBvhFloatData *arg2 = (btQuantizedBvhFloatData *) 0 ;
  
  SWIG_check_num_args("btTriangleMeshShapeData::m_quantizedFloatBvh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShapeData::m_quantizedFloatBvh",1,"btTriangleMeshShapeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleMeshShapeData::m_quantizedFloatBvh",2,"btQuantizedBvhFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShapeData,0))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_quantizedFloatBvh_set",1,SWIGTYPE_p_btTriangleMeshShapeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuantizedBvhFloatData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_quantizedFloatBvh_set",2,SWIGTYPE_p_btQuantizedBvhFloatData);
  }
  
  if (arg1) (arg1)->m_quantizedFloatBvh = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShapeData_m_quantizedFloatBvh_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btQuantizedBvhFloatData *result = 0 ;
  
  SWIG_check_num_args("btTriangleMeshShapeData::m_quantizedFloatBvh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShapeData::m_quantizedFloatBvh",1,"btTriangleMeshShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShapeData,0))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_quantizedFloatBvh_get",1,SWIGTYPE_p_btTriangleMeshShapeData);
  }
  
  result = (btQuantizedBvhFloatData *) ((arg1)->m_quantizedFloatBvh);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuantizedBvhFloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShapeData_m_quantizedDoubleBvh_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btQuantizedBvhDoubleData *arg2 = (btQuantizedBvhDoubleData *) 0 ;
  
  SWIG_check_num_args("btTriangleMeshShapeData::m_quantizedDoubleBvh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShapeData::m_quantizedDoubleBvh",1,"btTriangleMeshShapeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleMeshShapeData::m_quantizedDoubleBvh",2,"btQuantizedBvhDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShapeData,0))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_quantizedDoubleBvh_set",1,SWIGTYPE_p_btTriangleMeshShapeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuantizedBvhDoubleData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_quantizedDoubleBvh_set",2,SWIGTYPE_p_btQuantizedBvhDoubleData);
  }
  
  if (arg1) (arg1)->m_quantizedDoubleBvh = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShapeData_m_quantizedDoubleBvh_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btQuantizedBvhDoubleData *result = 0 ;
  
  SWIG_check_num_args("btTriangleMeshShapeData::m_quantizedDoubleBvh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShapeData::m_quantizedDoubleBvh",1,"btTriangleMeshShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShapeData,0))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_quantizedDoubleBvh_get",1,SWIGTYPE_p_btTriangleMeshShapeData);
  }
  
  result = (btQuantizedBvhDoubleData *) ((arg1)->m_quantizedDoubleBvh);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuantizedBvhDoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShapeData_m_triangleInfoMap_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btTriangleInfoMapData *arg2 = (btTriangleInfoMapData *) 0 ;
  
  SWIG_check_num_args("btTriangleMeshShapeData::m_triangleInfoMap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShapeData::m_triangleInfoMap",1,"btTriangleMeshShapeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleMeshShapeData::m_triangleInfoMap",2,"btTriangleInfoMapData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShapeData,0))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_triangleInfoMap_set",1,SWIGTYPE_p_btTriangleMeshShapeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTriangleInfoMapData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_triangleInfoMap_set",2,SWIGTYPE_p_btTriangleInfoMapData);
  }
  
  if (arg1) (arg1)->m_triangleInfoMap = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShapeData_m_triangleInfoMap_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btTriangleInfoMapData *result = 0 ;
  
  SWIG_check_num_args("btTriangleMeshShapeData::m_triangleInfoMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShapeData::m_triangleInfoMap",1,"btTriangleMeshShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShapeData,0))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_triangleInfoMap_get",1,SWIGTYPE_p_btTriangleMeshShapeData);
  }
  
  result = (btTriangleInfoMapData *) ((arg1)->m_triangleInfoMap);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTriangleInfoMapData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShapeData_m_collisionMargin_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btTriangleMeshShapeData::m_collisionMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShapeData::m_collisionMargin",1,"btTriangleMeshShapeData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleMeshShapeData::m_collisionMargin",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShapeData,0))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_collisionMargin_set",1,SWIGTYPE_p_btTriangleMeshShapeData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_collisionMargin = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShapeData_m_collisionMargin_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  float result;
  
  SWIG_check_num_args("btTriangleMeshShapeData::m_collisionMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShapeData::m_collisionMargin",1,"btTriangleMeshShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShapeData,0))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_collisionMargin_get",1,SWIGTYPE_p_btTriangleMeshShapeData);
  }
  
  result = (float) ((arg1)->m_collisionMargin);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShapeData_m_pad3_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btTriangleMeshShapeData::m_pad3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShapeData::m_pad3",1,"btTriangleMeshShapeData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btTriangleMeshShapeData::m_pad3",2,"char [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShapeData,0))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_pad3_set",1,SWIGTYPE_p_btTriangleMeshShapeData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad3, (const char *)arg2, 4-1);
      arg1->m_pad3[4-1] = 0;
    } else {
      arg1->m_pad3[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleMeshShapeData_m_pad3_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btTriangleMeshShapeData::m_pad3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleMeshShapeData::m_pad3",1,"btTriangleMeshShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleMeshShapeData,0))){
    SWIG_fail_ptr("btTriangleMeshShapeData_m_pad3_get",1,SWIGTYPE_p_btTriangleMeshShapeData);
  }
  
  result = (char *)(char *) ((arg1)->m_pad3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTriangleMeshShapeData(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleMeshShapeData *result = 0 ;
  
  SWIG_check_num_args("btTriangleMeshShapeData::btTriangleMeshShapeData",0,0)
  result = (btTriangleMeshShapeData *)new btTriangleMeshShapeData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTriangleMeshShapeData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTriangleMeshShapeData(void *obj) {
btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) obj;
delete arg1;
}
static swig_lua_method swig_btTriangleMeshShapeData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btTriangleMeshShapeData_attributes[] = {
    { "m_collisionShapeData", _wrap_btTriangleMeshShapeData_m_collisionShapeData_get, _wrap_btTriangleMeshShapeData_m_collisionShapeData_set},
    { "m_meshInterface", _wrap_btTriangleMeshShapeData_m_meshInterface_get, _wrap_btTriangleMeshShapeData_m_meshInterface_set},
    { "m_quantizedFloatBvh", _wrap_btTriangleMeshShapeData_m_quantizedFloatBvh_get, _wrap_btTriangleMeshShapeData_m_quantizedFloatBvh_set},
    { "m_quantizedDoubleBvh", _wrap_btTriangleMeshShapeData_m_quantizedDoubleBvh_get, _wrap_btTriangleMeshShapeData_m_quantizedDoubleBvh_set},
    { "m_triangleInfoMap", _wrap_btTriangleMeshShapeData_m_triangleInfoMap_get, _wrap_btTriangleMeshShapeData_m_triangleInfoMap_set},
    { "m_collisionMargin", _wrap_btTriangleMeshShapeData_m_collisionMargin_get, _wrap_btTriangleMeshShapeData_m_collisionMargin_set},
    { "m_pad3", _wrap_btTriangleMeshShapeData_m_pad3_get, _wrap_btTriangleMeshShapeData_m_pad3_set},
    {0,0,0}
};
static swig_lua_attribute swig_btTriangleMeshShapeData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTriangleMeshShapeData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTriangleMeshShapeData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTriangleMeshShapeData_bases[] = {0};
static const char *swig_btTriangleMeshShapeData_base_names[] = {0};
static swig_lua_class _wrap_class_btTriangleMeshShapeData = { "btTriangleMeshShapeData", &SWIGTYPE_p_btTriangleMeshShapeData,_wrap_new_btTriangleMeshShapeData, swig_delete_btTriangleMeshShapeData, swig_btTriangleMeshShapeData_methods, swig_btTriangleMeshShapeData_attributes, { "btTriangleMeshShapeData", swig_btTriangleMeshShapeData_cls_methods, swig_btTriangleMeshShapeData_cls_attributes, swig_btTriangleMeshShapeData_cls_constants }, swig_btTriangleMeshShapeData_bases, swig_btTriangleMeshShapeData_base_names };

static int _wrap_new_btCapsuleShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btCapsuleShape *result = 0 ;
  
  SWIG_check_num_args("btCapsuleShape::btCapsuleShape",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btCapsuleShape::btCapsuleShape",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCapsuleShape::btCapsuleShape",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (btCapsuleShape *)new btCapsuleShape(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCapsuleShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCapsuleShape(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_btCapsuleShape__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btCapsuleShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCapsuleShape::btCapsuleShape(btScalar,btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btCapsuleShape_calculateLocalInertia(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btCapsuleShape::calculateLocalInertia",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShape::calculateLocalInertia",1,"btCapsuleShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCapsuleShape::calculateLocalInertia",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btCapsuleShape::calculateLocalInertia",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShape,0))){
    SWIG_fail_ptr("btCapsuleShape_calculateLocalInertia",1,SWIGTYPE_p_btCapsuleShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCapsuleShape_calculateLocalInertia",3,SWIGTYPE_p_btVector3);
  }
  
  ((btCapsuleShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShape_localGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btCapsuleShape::localGetSupportingVertexWithoutMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShape::localGetSupportingVertexWithoutMargin",1,"btCapsuleShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCapsuleShape::localGetSupportingVertexWithoutMargin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShape,0))){
    SWIG_fail_ptr("btCapsuleShape_localGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btCapsuleShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCapsuleShape_localGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btCapsuleShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShape_batchedUnitVectorGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btCapsuleShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShape::batchedUnitVectorGetSupportingVertexWithoutMargin",1,"btCapsuleShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCapsuleShape::batchedUnitVectorGetSupportingVertexWithoutMargin",2,"btVector3 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCapsuleShape::batchedUnitVectorGetSupportingVertexWithoutMargin",3,"btVector3 *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btCapsuleShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShape,0))){
    SWIG_fail_ptr("btCapsuleShape_batchedUnitVectorGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btCapsuleShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCapsuleShape_batchedUnitVectorGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCapsuleShape_batchedUnitVectorGetSupportingVertexWithoutMargin",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btCapsuleShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShape_setMargin(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btCapsuleShape::setMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShape::setMargin",1,"btCapsuleShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCapsuleShape::setMargin",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShape,0))){
    SWIG_fail_ptr("btCapsuleShape_setMargin",1,SWIGTYPE_p_btCapsuleShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setMargin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShape_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btCapsuleShape::getAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShape::getAabb",1,"btCapsuleShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCapsuleShape::getAabb",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btCapsuleShape::getAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btCapsuleShape::getAabb",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShape,0))){
    SWIG_fail_ptr("btCapsuleShape_getAabb",1,SWIGTYPE_p_btCapsuleShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btCapsuleShape_getAabb",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCapsuleShape_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCapsuleShape_getAabb",4,SWIGTYPE_p_btVector3);
  }
  
  ((btCapsuleShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShape_getName(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCapsuleShape::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShape::getName",1,"btCapsuleShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShape,0))){
    SWIG_fail_ptr("btCapsuleShape_getName",1,SWIGTYPE_p_btCapsuleShape);
  }
  
  result = (char *)((btCapsuleShape const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShape_getUpAxis(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btCapsuleShape::getUpAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShape::getUpAxis",1,"btCapsuleShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShape,0))){
    SWIG_fail_ptr("btCapsuleShape_getUpAxis",1,SWIGTYPE_p_btCapsuleShape);
  }
  
  result = (int)((btCapsuleShape const *)arg1)->getUpAxis();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShape_getRadius(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCapsuleShape::getRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShape::getRadius",1,"btCapsuleShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShape,0))){
    SWIG_fail_ptr("btCapsuleShape_getRadius",1,SWIGTYPE_p_btCapsuleShape);
  }
  
  result = (btScalar)((btCapsuleShape const *)arg1)->getRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShape_getHalfHeight(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCapsuleShape::getHalfHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShape::getHalfHeight",1,"btCapsuleShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShape,0))){
    SWIG_fail_ptr("btCapsuleShape_getHalfHeight",1,SWIGTYPE_p_btCapsuleShape);
  }
  
  result = (btScalar)((btCapsuleShape const *)arg1)->getHalfHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShape_setLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btCapsuleShape::setLocalScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShape::setLocalScaling",1,"btCapsuleShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCapsuleShape::setLocalScaling",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShape,0))){
    SWIG_fail_ptr("btCapsuleShape_setLocalScaling",1,SWIGTYPE_p_btCapsuleShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCapsuleShape_setLocalScaling",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShape_getAnisotropicRollingFrictionDirection(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btCapsuleShape::getAnisotropicRollingFrictionDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShape::getAnisotropicRollingFrictionDirection",1,"btCapsuleShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShape,0))){
    SWIG_fail_ptr("btCapsuleShape_getAnisotropicRollingFrictionDirection",1,SWIGTYPE_p_btCapsuleShape);
  }
  
  result = ((btCapsuleShape const *)arg1)->getAnisotropicRollingFrictionDirection();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShape_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btCapsuleShape::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShape::calculateSerializeBufferSize",1,"btCapsuleShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShape,0))){
    SWIG_fail_ptr("btCapsuleShape_calculateSerializeBufferSize",1,SWIGTYPE_p_btCapsuleShape);
  }
  
  result = (int)((btCapsuleShape const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShape_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCapsuleShape::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShape::serialize",1,"btCapsuleShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCapsuleShape::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCapsuleShape::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShape,0))){
    SWIG_fail_ptr("btCapsuleShape_serialize",1,SWIGTYPE_p_btCapsuleShape);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btCapsuleShape_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btCapsuleShape_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  result = (char *)((btCapsuleShape const *)arg1)->serialize(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCapsuleShape(void *obj) {
btCapsuleShape *arg1 = (btCapsuleShape *) obj;
delete arg1;
}
static swig_lua_method swig_btCapsuleShape_methods[] = {
    {"calculateLocalInertia", _wrap_btCapsuleShape_calculateLocalInertia}, 
    {"localGetSupportingVertexWithoutMargin", _wrap_btCapsuleShape_localGetSupportingVertexWithoutMargin}, 
    {"batchedUnitVectorGetSupportingVertexWithoutMargin", _wrap_btCapsuleShape_batchedUnitVectorGetSupportingVertexWithoutMargin}, 
    {"setMargin", _wrap_btCapsuleShape_setMargin}, 
    {"getAabb", _wrap_btCapsuleShape_getAabb}, 
    {"getName", _wrap_btCapsuleShape_getName}, 
    {"getUpAxis", _wrap_btCapsuleShape_getUpAxis}, 
    {"getRadius", _wrap_btCapsuleShape_getRadius}, 
    {"getHalfHeight", _wrap_btCapsuleShape_getHalfHeight}, 
    {"setLocalScaling", _wrap_btCapsuleShape_setLocalScaling}, 
    {"getAnisotropicRollingFrictionDirection", _wrap_btCapsuleShape_getAnisotropicRollingFrictionDirection}, 
    {"calculateSerializeBufferSize", _wrap_btCapsuleShape_calculateSerializeBufferSize}, 
    {"serialize", _wrap_btCapsuleShape_serialize}, 
    {0,0}
};
static swig_lua_attribute swig_btCapsuleShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btCapsuleShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCapsuleShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCapsuleShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCapsuleShape_bases[] = {0,0};
static const char *swig_btCapsuleShape_base_names[] = {"btConvexInternalShape *",0};
static swig_lua_class _wrap_class_btCapsuleShape = { "btCapsuleShape", &SWIGTYPE_p_btCapsuleShape,_wrap_new_btCapsuleShape, swig_delete_btCapsuleShape, swig_btCapsuleShape_methods, swig_btCapsuleShape_attributes, { "btCapsuleShape", swig_btCapsuleShape_cls_methods, swig_btCapsuleShape_cls_attributes, swig_btCapsuleShape_cls_constants }, swig_btCapsuleShape_bases, swig_btCapsuleShape_base_names };

static int _wrap_new_btCapsuleShapeX(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btCapsuleShapeX *result = 0 ;
  
  SWIG_check_num_args("btCapsuleShapeX::btCapsuleShapeX",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btCapsuleShapeX::btCapsuleShapeX",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCapsuleShapeX::btCapsuleShapeX",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (btCapsuleShapeX *)new btCapsuleShapeX(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCapsuleShapeX,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShapeX_getName(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCapsuleShapeX::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShapeX::getName",1,"btCapsuleShapeX const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShapeX,0))){
    SWIG_fail_ptr("btCapsuleShapeX_getName",1,SWIGTYPE_p_btCapsuleShapeX);
  }
  
  result = (char *)((btCapsuleShapeX const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCapsuleShapeX(void *obj) {
btCapsuleShapeX *arg1 = (btCapsuleShapeX *) obj;
delete arg1;
}
static swig_lua_method swig_btCapsuleShapeX_methods[] = {
    {"getName", _wrap_btCapsuleShapeX_getName}, 
    {0,0}
};
static swig_lua_attribute swig_btCapsuleShapeX_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btCapsuleShapeX_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCapsuleShapeX_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCapsuleShapeX_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCapsuleShapeX_bases[] = {0,0};
static const char *swig_btCapsuleShapeX_base_names[] = {"btCapsuleShape *",0};
static swig_lua_class _wrap_class_btCapsuleShapeX = { "btCapsuleShapeX", &SWIGTYPE_p_btCapsuleShapeX,_wrap_new_btCapsuleShapeX, swig_delete_btCapsuleShapeX, swig_btCapsuleShapeX_methods, swig_btCapsuleShapeX_attributes, { "btCapsuleShapeX", swig_btCapsuleShapeX_cls_methods, swig_btCapsuleShapeX_cls_attributes, swig_btCapsuleShapeX_cls_constants }, swig_btCapsuleShapeX_bases, swig_btCapsuleShapeX_base_names };

static int _wrap_new_btCapsuleShapeZ(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btCapsuleShapeZ *result = 0 ;
  
  SWIG_check_num_args("btCapsuleShapeZ::btCapsuleShapeZ",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btCapsuleShapeZ::btCapsuleShapeZ",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCapsuleShapeZ::btCapsuleShapeZ",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (btCapsuleShapeZ *)new btCapsuleShapeZ(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCapsuleShapeZ,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShapeZ_getName(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCapsuleShapeZ::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShapeZ::getName",1,"btCapsuleShapeZ const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShapeZ,0))){
    SWIG_fail_ptr("btCapsuleShapeZ_getName",1,SWIGTYPE_p_btCapsuleShapeZ);
  }
  
  result = (char *)((btCapsuleShapeZ const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCapsuleShapeZ(void *obj) {
btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) obj;
delete arg1;
}
static swig_lua_method swig_btCapsuleShapeZ_methods[] = {
    {"getName", _wrap_btCapsuleShapeZ_getName}, 
    {0,0}
};
static swig_lua_attribute swig_btCapsuleShapeZ_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btCapsuleShapeZ_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCapsuleShapeZ_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCapsuleShapeZ_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCapsuleShapeZ_bases[] = {0,0};
static const char *swig_btCapsuleShapeZ_base_names[] = {"btCapsuleShape *",0};
static swig_lua_class _wrap_class_btCapsuleShapeZ = { "btCapsuleShapeZ", &SWIGTYPE_p_btCapsuleShapeZ,_wrap_new_btCapsuleShapeZ, swig_delete_btCapsuleShapeZ, swig_btCapsuleShapeZ_methods, swig_btCapsuleShapeZ_attributes, { "btCapsuleShapeZ", swig_btCapsuleShapeZ_cls_methods, swig_btCapsuleShapeZ_cls_attributes, swig_btCapsuleShapeZ_cls_constants }, swig_btCapsuleShapeZ_bases, swig_btCapsuleShapeZ_base_names };

static int _wrap_btCapsuleShapeData_m_convexInternalShapeData_set(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  btConvexInternalShapeData *arg2 = (btConvexInternalShapeData *) 0 ;
  
  SWIG_check_num_args("btCapsuleShapeData::m_convexInternalShapeData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShapeData::m_convexInternalShapeData",1,"btCapsuleShapeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCapsuleShapeData::m_convexInternalShapeData",2,"btConvexInternalShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShapeData,0))){
    SWIG_fail_ptr("btCapsuleShapeData_m_convexInternalShapeData_set",1,SWIGTYPE_p_btCapsuleShapeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConvexInternalShapeData,0))){
    SWIG_fail_ptr("btCapsuleShapeData_m_convexInternalShapeData_set",2,SWIGTYPE_p_btConvexInternalShapeData);
  }
  
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShapeData_m_convexInternalShapeData_get(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  btConvexInternalShapeData *result = 0 ;
  
  SWIG_check_num_args("btCapsuleShapeData::m_convexInternalShapeData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShapeData::m_convexInternalShapeData",1,"btCapsuleShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShapeData,0))){
    SWIG_fail_ptr("btCapsuleShapeData_m_convexInternalShapeData_get",1,SWIGTYPE_p_btCapsuleShapeData);
  }
  
  result = (btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexInternalShapeData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShapeData_m_upAxis_set(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCapsuleShapeData::m_upAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShapeData::m_upAxis",1,"btCapsuleShapeData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCapsuleShapeData::m_upAxis",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShapeData,0))){
    SWIG_fail_ptr("btCapsuleShapeData_m_upAxis_set",1,SWIGTYPE_p_btCapsuleShapeData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_upAxis = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShapeData_m_upAxis_get(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCapsuleShapeData::m_upAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShapeData::m_upAxis",1,"btCapsuleShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShapeData,0))){
    SWIG_fail_ptr("btCapsuleShapeData_m_upAxis_get",1,SWIGTYPE_p_btCapsuleShapeData);
  }
  
  result = (int) ((arg1)->m_upAxis);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShapeData_m_padding_set(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btCapsuleShapeData::m_padding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShapeData::m_padding",1,"btCapsuleShapeData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btCapsuleShapeData::m_padding",2,"char [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShapeData,0))){
    SWIG_fail_ptr("btCapsuleShapeData_m_padding_set",1,SWIGTYPE_p_btCapsuleShapeData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCapsuleShapeData_m_padding_get(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCapsuleShapeData::m_padding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCapsuleShapeData::m_padding",1,"btCapsuleShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCapsuleShapeData,0))){
    SWIG_fail_ptr("btCapsuleShapeData_m_padding_get",1,SWIGTYPE_p_btCapsuleShapeData);
  }
  
  result = (char *)(char *) ((arg1)->m_padding);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCapsuleShapeData(lua_State* L) {
  int SWIG_arg = 0;
  btCapsuleShapeData *result = 0 ;
  
  SWIG_check_num_args("btCapsuleShapeData::btCapsuleShapeData",0,0)
  result = (btCapsuleShapeData *)new btCapsuleShapeData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCapsuleShapeData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCapsuleShapeData(void *obj) {
btCapsuleShapeData *arg1 = (btCapsuleShapeData *) obj;
delete arg1;
}
static swig_lua_method swig_btCapsuleShapeData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btCapsuleShapeData_attributes[] = {
    { "m_convexInternalShapeData", _wrap_btCapsuleShapeData_m_convexInternalShapeData_get, _wrap_btCapsuleShapeData_m_convexInternalShapeData_set},
    { "m_upAxis", _wrap_btCapsuleShapeData_m_upAxis_get, _wrap_btCapsuleShapeData_m_upAxis_set},
    { "m_padding", _wrap_btCapsuleShapeData_m_padding_get, _wrap_btCapsuleShapeData_m_padding_set},
    {0,0,0}
};
static swig_lua_attribute swig_btCapsuleShapeData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCapsuleShapeData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCapsuleShapeData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCapsuleShapeData_bases[] = {0};
static const char *swig_btCapsuleShapeData_base_names[] = {0};
static swig_lua_class _wrap_class_btCapsuleShapeData = { "btCapsuleShapeData", &SWIGTYPE_p_btCapsuleShapeData,_wrap_new_btCapsuleShapeData, swig_delete_btCapsuleShapeData, swig_btCapsuleShapeData_methods, swig_btCapsuleShapeData_attributes, { "btCapsuleShapeData", swig_btCapsuleShapeData_cls_methods, swig_btCapsuleShapeData_cls_attributes, swig_btCapsuleShapeData_cls_constants }, swig_btCapsuleShapeData_bases, swig_btCapsuleShapeData_base_names };

static int _wrap_btCompoundShape_addChildShape(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btTransform *arg2 = 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  
  SWIG_check_num_args("btCompoundShape::addChildShape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShape::addChildShape",1,"btCompoundShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCompoundShape::addChildShape",2,"btTransform const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCompoundShape::addChildShape",3,"btCollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShape,0))){
    SWIG_fail_ptr("btCompoundShape_addChildShape",1,SWIGTYPE_p_btCompoundShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btCompoundShape_addChildShape",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCompoundShape_addChildShape",3,SWIGTYPE_p_btCollisionShape);
  }
  
  (arg1)->addChildShape((btTransform const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShape_getNumChildShapes(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btCompoundShape::getNumChildShapes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShape::getNumChildShapes",1,"btCompoundShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShape,0))){
    SWIG_fail_ptr("btCompoundShape_getNumChildShapes",1,SWIGTYPE_p_btCompoundShape);
  }
  
  result = (int)((btCompoundShape const *)arg1)->getNumChildShapes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShape_getChildShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btCollisionShape *result = 0 ;
  
  SWIG_check_num_args("btCompoundShape::getChildShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShape::getChildShape",1,"btCompoundShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCompoundShape::getChildShape",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShape,0))){
    SWIG_fail_ptr("btCompoundShape_getChildShape",1,SWIGTYPE_p_btCompoundShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btCollisionShape *)(arg1)->getChildShape(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShape_getChildShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btCollisionShape *result = 0 ;
  
  SWIG_check_num_args("btCompoundShape::getChildShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShape::getChildShape",1,"btCompoundShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCompoundShape::getChildShape",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShape,0))){
    SWIG_fail_ptr("btCompoundShape_getChildShape",1,SWIGTYPE_p_btCompoundShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btCollisionShape *)((btCompoundShape const *)arg1)->getChildShape(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShape_getChildShape(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCompoundShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btCompoundShape_getChildShape__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCompoundShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btCompoundShape_getChildShape__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btCompoundShape_getChildShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCompoundShape::getChildShape(int)\n"
    "    btCompoundShape::getChildShape(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_btCompoundShape_getChildTransform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btTransform result;
  
  SWIG_check_num_args("btCompoundShape::getChildTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShape::getChildTransform",1,"btCompoundShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCompoundShape::getChildTransform",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShape,0))){
    SWIG_fail_ptr("btCompoundShape_getChildTransform",1,SWIGTYPE_p_btCompoundShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->getChildTransform(arg2);
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShape_getChildTransform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btTransform result;
  
  SWIG_check_num_args("btCompoundShape::getChildTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShape::getChildTransform",1,"btCompoundShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCompoundShape::getChildTransform",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShape,0))){
    SWIG_fail_ptr("btCompoundShape_getChildTransform",1,SWIGTYPE_p_btCompoundShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((btCompoundShape const *)arg1)->getChildTransform(arg2);
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShape_getChildTransform(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCompoundShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btCompoundShape_getChildTransform__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCompoundShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btCompoundShape_getChildTransform__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btCompoundShape_getChildTransform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCompoundShape::getChildTransform(int)\n"
    "    btCompoundShape::getChildTransform(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_btCompoundShape_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btCompoundShape::getAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShape::getAabb",1,"btCompoundShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCompoundShape::getAabb",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btCompoundShape::getAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btCompoundShape::getAabb",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShape,0))){
    SWIG_fail_ptr("btCompoundShape_getAabb",1,SWIGTYPE_p_btCompoundShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btCompoundShape_getAabb",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCompoundShape_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCompoundShape_getAabb",4,SWIGTYPE_p_btVector3);
  }
  
  ((btCompoundShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShape_setLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btCompoundShape::setLocalScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShape::setLocalScaling",1,"btCompoundShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCompoundShape::setLocalScaling",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShape,0))){
    SWIG_fail_ptr("btCompoundShape_setLocalScaling",1,SWIGTYPE_p_btCompoundShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCompoundShape_setLocalScaling",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShape_getLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btCompoundShape::getLocalScaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShape::getLocalScaling",1,"btCompoundShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShape,0))){
    SWIG_fail_ptr("btCompoundShape_getLocalScaling",1,SWIGTYPE_p_btCompoundShape);
  }
  
  result = (btVector3 *) &((btCompoundShape const *)arg1)->getLocalScaling();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShape_calculateLocalInertia(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btCompoundShape::calculateLocalInertia",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShape::calculateLocalInertia",1,"btCompoundShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCompoundShape::calculateLocalInertia",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btCompoundShape::calculateLocalInertia",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShape,0))){
    SWIG_fail_ptr("btCompoundShape_calculateLocalInertia",1,SWIGTYPE_p_btCompoundShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCompoundShape_calculateLocalInertia",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->calculateLocalInertia(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShape_getShapeType(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btCompoundShape::getShapeType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShape::getShapeType",1,"btCompoundShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShape,0))){
    SWIG_fail_ptr("btCompoundShape_getShapeType",1,SWIGTYPE_p_btCompoundShape);
  }
  
  result = (int)((btCompoundShape const *)arg1)->getShapeType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShape_setMargin(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btCompoundShape::setMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShape::setMargin",1,"btCompoundShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCompoundShape::setMargin",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShape,0))){
    SWIG_fail_ptr("btCompoundShape_setMargin",1,SWIGTYPE_p_btCompoundShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setMargin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShape_getMargin(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCompoundShape::getMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShape::getMargin",1,"btCompoundShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShape,0))){
    SWIG_fail_ptr("btCompoundShape_getMargin",1,SWIGTYPE_p_btCompoundShape);
  }
  
  result = (btScalar)((btCompoundShape const *)arg1)->getMargin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShape_getName(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCompoundShape::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShape::getName",1,"btCompoundShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShape,0))){
    SWIG_fail_ptr("btCompoundShape_getName",1,SWIGTYPE_p_btCompoundShape);
  }
  
  result = (char *)((btCompoundShape const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShape_getAabbTree(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btOptimizedBvh *result = 0 ;
  
  SWIG_check_num_args("btCompoundShape::getAabbTree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShape::getAabbTree",1,"btCompoundShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShape,0))){
    SWIG_fail_ptr("btCompoundShape_getAabbTree",1,SWIGTYPE_p_btCompoundShape);
  }
  
  result = (btOptimizedBvh *)((btCompoundShape const *)arg1)->getAabbTree();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btOptimizedBvh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCompoundShape(void *obj) {
btCompoundShape *arg1 = (btCompoundShape *) obj;
delete arg1;
}
static swig_lua_method swig_btCompoundShape_methods[] = {
    {"addChildShape", _wrap_btCompoundShape_addChildShape}, 
    {"getNumChildShapes", _wrap_btCompoundShape_getNumChildShapes}, 
    {"getChildShape", _wrap_btCompoundShape_getChildShape}, 
    {"getChildTransform", _wrap_btCompoundShape_getChildTransform}, 
    {"getAabb", _wrap_btCompoundShape_getAabb}, 
    {"setLocalScaling", _wrap_btCompoundShape_setLocalScaling}, 
    {"getLocalScaling", _wrap_btCompoundShape_getLocalScaling}, 
    {"calculateLocalInertia", _wrap_btCompoundShape_calculateLocalInertia}, 
    {"getShapeType", _wrap_btCompoundShape_getShapeType}, 
    {"setMargin", _wrap_btCompoundShape_setMargin}, 
    {"getMargin", _wrap_btCompoundShape_getMargin}, 
    {"getName", _wrap_btCompoundShape_getName}, 
    {"getAabbTree", _wrap_btCompoundShape_getAabbTree}, 
    {0,0}
};
static swig_lua_attribute swig_btCompoundShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btCompoundShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCompoundShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCompoundShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCompoundShape_bases[] = {0,0};
static const char *swig_btCompoundShape_base_names[] = {"btCollisionShape *",0};
static swig_lua_class _wrap_class_btCompoundShape = { "btCompoundShape", &SWIGTYPE_p_btCompoundShape,0, swig_delete_btCompoundShape, swig_btCompoundShape_methods, swig_btCompoundShape_attributes, { "btCompoundShape", swig_btCompoundShape_cls_methods, swig_btCompoundShape_cls_attributes, swig_btCompoundShape_cls_constants }, swig_btCompoundShape_bases, swig_btCompoundShape_base_names };

static int _wrap_btCompoundShapeChild_m_transform_set(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  SWIG_check_num_args("btCompoundShapeChild::m_transform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChild::m_transform",1,"btCompoundShapeChild *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCompoundShapeChild::m_transform",2,"btTransform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChild,0))){
    SWIG_fail_ptr("btCompoundShapeChild_m_transform_set",1,SWIGTYPE_p_btCompoundShapeChild);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btCompoundShapeChild_m_transform_set",2,SWIGTYPE_p_btTransform);
  }
  
  if (arg1) (arg1)->m_transform = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeChild_m_transform_get(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btCompoundShapeChild::m_transform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChild::m_transform",1,"btCompoundShapeChild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChild,0))){
    SWIG_fail_ptr("btCompoundShapeChild_m_transform_get",1,SWIGTYPE_p_btCompoundShapeChild);
  }
  
  result = (btTransform *)& ((arg1)->m_transform);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeChild_m_childShape_set(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  SWIG_check_num_args("btCompoundShapeChild::m_childShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChild::m_childShape",1,"btCompoundShapeChild *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCompoundShapeChild::m_childShape",2,"btCollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChild,0))){
    SWIG_fail_ptr("btCompoundShapeChild_m_childShape_set",1,SWIGTYPE_p_btCompoundShapeChild);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionShape,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btCompoundShapeChild_m_childShape_set",2,SWIGTYPE_p_btCollisionShape);
  }
  
  if (arg1) (arg1)->m_childShape = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeChild_m_childShape_get(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btCollisionShape *result = 0 ;
  
  SWIG_check_num_args("btCompoundShapeChild::m_childShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChild::m_childShape",1,"btCompoundShapeChild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChild,0))){
    SWIG_fail_ptr("btCompoundShapeChild_m_childShape_get",1,SWIGTYPE_p_btCompoundShapeChild);
  }
  
  result = (btCollisionShape *) ((arg1)->m_childShape);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeChild_m_childShapeType_set(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCompoundShapeChild::m_childShapeType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChild::m_childShapeType",1,"btCompoundShapeChild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCompoundShapeChild::m_childShapeType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChild,0))){
    SWIG_fail_ptr("btCompoundShapeChild_m_childShapeType_set",1,SWIGTYPE_p_btCompoundShapeChild);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_childShapeType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeChild_m_childShapeType_get(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  int result;
  
  SWIG_check_num_args("btCompoundShapeChild::m_childShapeType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChild::m_childShapeType",1,"btCompoundShapeChild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChild,0))){
    SWIG_fail_ptr("btCompoundShapeChild_m_childShapeType_get",1,SWIGTYPE_p_btCompoundShapeChild);
  }
  
  result = (int) ((arg1)->m_childShapeType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeChild_m_childMargin_set(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btCompoundShapeChild::m_childMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChild::m_childMargin",1,"btCompoundShapeChild *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCompoundShapeChild::m_childMargin",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChild,0))){
    SWIG_fail_ptr("btCompoundShapeChild_m_childMargin_set",1,SWIGTYPE_p_btCompoundShapeChild);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_childMargin = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeChild_m_childMargin_get(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCompoundShapeChild::m_childMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChild::m_childMargin",1,"btCompoundShapeChild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChild,0))){
    SWIG_fail_ptr("btCompoundShapeChild_m_childMargin_get",1,SWIGTYPE_p_btCompoundShapeChild);
  }
  
  result = (btScalar) ((arg1)->m_childMargin);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeChild_m_node_set(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  SWIG_check_num_args("btCompoundShapeChild::m_node",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChild::m_node",1,"btCompoundShapeChild *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCompoundShapeChild::m_node",2,"btDbvtNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChild,0))){
    SWIG_fail_ptr("btCompoundShapeChild_m_node_set",1,SWIGTYPE_p_btCompoundShapeChild);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDbvtNode,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btCompoundShapeChild_m_node_set",2,SWIGTYPE_p_btDbvtNode);
  }
  
  if (arg1) (arg1)->m_node = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeChild_m_node_get(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btDbvtNode *result = 0 ;
  
  SWIG_check_num_args("btCompoundShapeChild::m_node",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChild::m_node",1,"btCompoundShapeChild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChild,0))){
    SWIG_fail_ptr("btCompoundShapeChild_m_node_get",1,SWIGTYPE_p_btCompoundShapeChild);
  }
  
  result = (btDbvtNode *) ((arg1)->m_node);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDbvtNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCompoundShapeChild(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChild *result = 0 ;
  
  SWIG_check_num_args("btCompoundShapeChild::btCompoundShapeChild",0,0)
  result = (btCompoundShapeChild *)new btCompoundShapeChild();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCompoundShapeChild,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCompoundShapeChild(void *obj) {
btCompoundShapeChild *arg1 = (btCompoundShapeChild *) obj;
delete arg1;
}
static swig_lua_method swig_btCompoundShapeChild_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btCompoundShapeChild_attributes[] = {
    { "m_transform", _wrap_btCompoundShapeChild_m_transform_get, _wrap_btCompoundShapeChild_m_transform_set},
    { "m_childShape", _wrap_btCompoundShapeChild_m_childShape_get, _wrap_btCompoundShapeChild_m_childShape_set},
    { "m_childShapeType", _wrap_btCompoundShapeChild_m_childShapeType_get, _wrap_btCompoundShapeChild_m_childShapeType_set},
    { "m_childMargin", _wrap_btCompoundShapeChild_m_childMargin_get, _wrap_btCompoundShapeChild_m_childMargin_set},
    { "m_node", _wrap_btCompoundShapeChild_m_node_get, _wrap_btCompoundShapeChild_m_node_set},
    {0,0,0}
};
static swig_lua_attribute swig_btCompoundShapeChild_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCompoundShapeChild_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCompoundShapeChild_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCompoundShapeChild_bases[] = {0};
static const char *swig_btCompoundShapeChild_base_names[] = {0};
static swig_lua_class _wrap_class_btCompoundShapeChild = { "btCompoundShapeChild", &SWIGTYPE_p_btCompoundShapeChild,_wrap_new_btCompoundShapeChild, swig_delete_btCompoundShapeChild, swig_btCompoundShapeChild_methods, swig_btCompoundShapeChild_attributes, { "btCompoundShapeChild", swig_btCompoundShapeChild_cls_methods, swig_btCompoundShapeChild_cls_attributes, swig_btCompoundShapeChild_cls_constants }, swig_btCompoundShapeChild_bases, swig_btCompoundShapeChild_base_names };

static int _wrap_btCompoundShapeChildData_m_transform_set(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  SWIG_check_num_args("btCompoundShapeChildData::m_transform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChildData::m_transform",1,"btCompoundShapeChildData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCompoundShapeChildData::m_transform",2,"btTransformFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChildData,0))){
    SWIG_fail_ptr("btCompoundShapeChildData_m_transform_set",1,SWIGTYPE_p_btCompoundShapeChildData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransformFloatData,0))){
    SWIG_fail_ptr("btCompoundShapeChildData_m_transform_set",2,SWIGTYPE_p_btTransformFloatData);
  }
  
  if (arg1) (arg1)->m_transform = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeChildData_m_transform_get(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  SWIG_check_num_args("btCompoundShapeChildData::m_transform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChildData::m_transform",1,"btCompoundShapeChildData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChildData,0))){
    SWIG_fail_ptr("btCompoundShapeChildData_m_transform_get",1,SWIGTYPE_p_btCompoundShapeChildData);
  }
  
  result = (btTransformFloatData *)& ((arg1)->m_transform);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransformFloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeChildData_m_childShape_set(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  SWIG_check_num_args("btCompoundShapeChildData::m_childShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChildData::m_childShape",1,"btCompoundShapeChildData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCompoundShapeChildData::m_childShape",2,"btCollisionShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChildData,0))){
    SWIG_fail_ptr("btCompoundShapeChildData_m_childShape_set",1,SWIGTYPE_p_btCompoundShapeChildData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionShapeData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btCompoundShapeChildData_m_childShape_set",2,SWIGTYPE_p_btCollisionShapeData);
  }
  
  if (arg1) (arg1)->m_childShape = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeChildData_m_childShape_get(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  SWIG_check_num_args("btCompoundShapeChildData::m_childShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChildData::m_childShape",1,"btCompoundShapeChildData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChildData,0))){
    SWIG_fail_ptr("btCompoundShapeChildData_m_childShape_get",1,SWIGTYPE_p_btCompoundShapeChildData);
  }
  
  result = (btCollisionShapeData *) ((arg1)->m_childShape);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShapeData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeChildData_m_childShapeType_set(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCompoundShapeChildData::m_childShapeType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChildData::m_childShapeType",1,"btCompoundShapeChildData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCompoundShapeChildData::m_childShapeType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChildData,0))){
    SWIG_fail_ptr("btCompoundShapeChildData_m_childShapeType_set",1,SWIGTYPE_p_btCompoundShapeChildData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_childShapeType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeChildData_m_childShapeType_get(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCompoundShapeChildData::m_childShapeType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChildData::m_childShapeType",1,"btCompoundShapeChildData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChildData,0))){
    SWIG_fail_ptr("btCompoundShapeChildData_m_childShapeType_get",1,SWIGTYPE_p_btCompoundShapeChildData);
  }
  
  result = (int) ((arg1)->m_childShapeType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeChildData_m_childMargin_set(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btCompoundShapeChildData::m_childMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChildData::m_childMargin",1,"btCompoundShapeChildData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCompoundShapeChildData::m_childMargin",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChildData,0))){
    SWIG_fail_ptr("btCompoundShapeChildData_m_childMargin_set",1,SWIGTYPE_p_btCompoundShapeChildData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_childMargin = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeChildData_m_childMargin_get(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  float result;
  
  SWIG_check_num_args("btCompoundShapeChildData::m_childMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeChildData::m_childMargin",1,"btCompoundShapeChildData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeChildData,0))){
    SWIG_fail_ptr("btCompoundShapeChildData_m_childMargin_get",1,SWIGTYPE_p_btCompoundShapeChildData);
  }
  
  result = (float) ((arg1)->m_childMargin);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCompoundShapeChildData(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeChildData *result = 0 ;
  
  SWIG_check_num_args("btCompoundShapeChildData::btCompoundShapeChildData",0,0)
  result = (btCompoundShapeChildData *)new btCompoundShapeChildData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCompoundShapeChildData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCompoundShapeChildData(void *obj) {
btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) obj;
delete arg1;
}
static swig_lua_method swig_btCompoundShapeChildData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btCompoundShapeChildData_attributes[] = {
    { "m_transform", _wrap_btCompoundShapeChildData_m_transform_get, _wrap_btCompoundShapeChildData_m_transform_set},
    { "m_childShape", _wrap_btCompoundShapeChildData_m_childShape_get, _wrap_btCompoundShapeChildData_m_childShape_set},
    { "m_childShapeType", _wrap_btCompoundShapeChildData_m_childShapeType_get, _wrap_btCompoundShapeChildData_m_childShapeType_set},
    { "m_childMargin", _wrap_btCompoundShapeChildData_m_childMargin_get, _wrap_btCompoundShapeChildData_m_childMargin_set},
    {0,0,0}
};
static swig_lua_attribute swig_btCompoundShapeChildData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCompoundShapeChildData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCompoundShapeChildData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCompoundShapeChildData_bases[] = {0};
static const char *swig_btCompoundShapeChildData_base_names[] = {0};
static swig_lua_class _wrap_class_btCompoundShapeChildData = { "btCompoundShapeChildData", &SWIGTYPE_p_btCompoundShapeChildData,_wrap_new_btCompoundShapeChildData, swig_delete_btCompoundShapeChildData, swig_btCompoundShapeChildData_methods, swig_btCompoundShapeChildData_attributes, { "btCompoundShapeChildData", swig_btCompoundShapeChildData_cls_methods, swig_btCompoundShapeChildData_cls_attributes, swig_btCompoundShapeChildData_cls_constants }, swig_btCompoundShapeChildData_bases, swig_btCompoundShapeChildData_base_names };

static int _wrap_btCompoundShapeData_m_collisionShapeData_set(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  SWIG_check_num_args("btCompoundShapeData::m_collisionShapeData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeData::m_collisionShapeData",1,"btCompoundShapeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCompoundShapeData::m_collisionShapeData",2,"btCollisionShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeData,0))){
    SWIG_fail_ptr("btCompoundShapeData_m_collisionShapeData_set",1,SWIGTYPE_p_btCompoundShapeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionShapeData,0))){
    SWIG_fail_ptr("btCompoundShapeData_m_collisionShapeData_set",2,SWIGTYPE_p_btCollisionShapeData);
  }
  
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeData_m_collisionShapeData_get(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  SWIG_check_num_args("btCompoundShapeData::m_collisionShapeData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeData::m_collisionShapeData",1,"btCompoundShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeData,0))){
    SWIG_fail_ptr("btCompoundShapeData_m_collisionShapeData_get",1,SWIGTYPE_p_btCompoundShapeData);
  }
  
  result = (btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShapeData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeData_m_childShapePtr_set(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  btCompoundShapeChildData *arg2 = (btCompoundShapeChildData *) 0 ;
  
  SWIG_check_num_args("btCompoundShapeData::m_childShapePtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeData::m_childShapePtr",1,"btCompoundShapeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCompoundShapeData::m_childShapePtr",2,"btCompoundShapeChildData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeData,0))){
    SWIG_fail_ptr("btCompoundShapeData_m_childShapePtr_set",1,SWIGTYPE_p_btCompoundShapeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCompoundShapeChildData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btCompoundShapeData_m_childShapePtr_set",2,SWIGTYPE_p_btCompoundShapeChildData);
  }
  
  if (arg1) (arg1)->m_childShapePtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeData_m_childShapePtr_get(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  btCompoundShapeChildData *result = 0 ;
  
  SWIG_check_num_args("btCompoundShapeData::m_childShapePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeData::m_childShapePtr",1,"btCompoundShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeData,0))){
    SWIG_fail_ptr("btCompoundShapeData_m_childShapePtr_get",1,SWIGTYPE_p_btCompoundShapeData);
  }
  
  result = (btCompoundShapeChildData *) ((arg1)->m_childShapePtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCompoundShapeChildData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeData_m_numChildShapes_set(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCompoundShapeData::m_numChildShapes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeData::m_numChildShapes",1,"btCompoundShapeData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCompoundShapeData::m_numChildShapes",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeData,0))){
    SWIG_fail_ptr("btCompoundShapeData_m_numChildShapes_set",1,SWIGTYPE_p_btCompoundShapeData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numChildShapes = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeData_m_numChildShapes_get(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCompoundShapeData::m_numChildShapes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeData::m_numChildShapes",1,"btCompoundShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeData,0))){
    SWIG_fail_ptr("btCompoundShapeData_m_numChildShapes_get",1,SWIGTYPE_p_btCompoundShapeData);
  }
  
  result = (int) ((arg1)->m_numChildShapes);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeData_m_collisionMargin_set(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btCompoundShapeData::m_collisionMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeData::m_collisionMargin",1,"btCompoundShapeData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCompoundShapeData::m_collisionMargin",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeData,0))){
    SWIG_fail_ptr("btCompoundShapeData_m_collisionMargin_set",1,SWIGTYPE_p_btCompoundShapeData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_collisionMargin = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundShapeData_m_collisionMargin_get(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  float result;
  
  SWIG_check_num_args("btCompoundShapeData::m_collisionMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundShapeData::m_collisionMargin",1,"btCompoundShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundShapeData,0))){
    SWIG_fail_ptr("btCompoundShapeData_m_collisionMargin_get",1,SWIGTYPE_p_btCompoundShapeData);
  }
  
  result = (float) ((arg1)->m_collisionMargin);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCompoundShapeData(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundShapeData *result = 0 ;
  
  SWIG_check_num_args("btCompoundShapeData::btCompoundShapeData",0,0)
  result = (btCompoundShapeData *)new btCompoundShapeData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCompoundShapeData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCompoundShapeData(void *obj) {
btCompoundShapeData *arg1 = (btCompoundShapeData *) obj;
delete arg1;
}
static swig_lua_method swig_btCompoundShapeData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btCompoundShapeData_attributes[] = {
    { "m_collisionShapeData", _wrap_btCompoundShapeData_m_collisionShapeData_get, _wrap_btCompoundShapeData_m_collisionShapeData_set},
    { "m_childShapePtr", _wrap_btCompoundShapeData_m_childShapePtr_get, _wrap_btCompoundShapeData_m_childShapePtr_set},
    { "m_numChildShapes", _wrap_btCompoundShapeData_m_numChildShapes_get, _wrap_btCompoundShapeData_m_numChildShapes_set},
    { "m_collisionMargin", _wrap_btCompoundShapeData_m_collisionMargin_get, _wrap_btCompoundShapeData_m_collisionMargin_set},
    {0,0,0}
};
static swig_lua_attribute swig_btCompoundShapeData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCompoundShapeData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCompoundShapeData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCompoundShapeData_bases[] = {0};
static const char *swig_btCompoundShapeData_base_names[] = {0};
static swig_lua_class _wrap_class_btCompoundShapeData = { "btCompoundShapeData", &SWIGTYPE_p_btCompoundShapeData,_wrap_new_btCompoundShapeData, swig_delete_btCompoundShapeData, swig_btCompoundShapeData_methods, swig_btCompoundShapeData_attributes, { "btCompoundShapeData", swig_btCompoundShapeData_cls_methods, swig_btCompoundShapeData_cls_attributes, swig_btCompoundShapeData_cls_constants }, swig_btCompoundShapeData_bases, swig_btCompoundShapeData_base_names };

static int _wrap_new_btConeShape(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btConeShape *result = 0 ;
  
  SWIG_check_num_args("btConeShape::btConeShape",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btConeShape::btConeShape",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConeShape::btConeShape",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (btConeShape *)new btConeShape(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConeShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConeShape_localGetSupportingVertex(lua_State* L) {
  int SWIG_arg = 0;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btConeShape::localGetSupportingVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConeShape::localGetSupportingVertex",1,"btConeShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConeShape::localGetSupportingVertex",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConeShape,0))){
    SWIG_fail_ptr("btConeShape_localGetSupportingVertex",1,SWIGTYPE_p_btConeShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConeShape_localGetSupportingVertex",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btConeShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConeShape_localGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btConeShape::localGetSupportingVertexWithoutMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConeShape::localGetSupportingVertexWithoutMargin",1,"btConeShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConeShape::localGetSupportingVertexWithoutMargin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConeShape,0))){
    SWIG_fail_ptr("btConeShape_localGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btConeShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConeShape_localGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btConeShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConeShape_batchedUnitVectorGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btConeShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConeShape::batchedUnitVectorGetSupportingVertexWithoutMargin",1,"btConeShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConeShape::batchedUnitVectorGetSupportingVertexWithoutMargin",2,"btVector3 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btConeShape::batchedUnitVectorGetSupportingVertexWithoutMargin",3,"btVector3 *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btConeShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConeShape,0))){
    SWIG_fail_ptr("btConeShape_batchedUnitVectorGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btConeShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConeShape_batchedUnitVectorGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConeShape_batchedUnitVectorGetSupportingVertexWithoutMargin",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btConeShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConeShape_getRadius(lua_State* L) {
  int SWIG_arg = 0;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConeShape::getRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConeShape::getRadius",1,"btConeShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConeShape,0))){
    SWIG_fail_ptr("btConeShape_getRadius",1,SWIGTYPE_p_btConeShape);
  }
  
  result = (btScalar)((btConeShape const *)arg1)->getRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConeShape_getHeight(lua_State* L) {
  int SWIG_arg = 0;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConeShape::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConeShape::getHeight",1,"btConeShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConeShape,0))){
    SWIG_fail_ptr("btConeShape_getHeight",1,SWIGTYPE_p_btConeShape);
  }
  
  result = (btScalar)((btConeShape const *)arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConeShape_calculateLocalInertia(lua_State* L) {
  int SWIG_arg = 0;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btConeShape::calculateLocalInertia",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConeShape::calculateLocalInertia",1,"btConeShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConeShape::calculateLocalInertia",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btConeShape::calculateLocalInertia",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConeShape,0))){
    SWIG_fail_ptr("btConeShape_calculateLocalInertia",1,SWIGTYPE_p_btConeShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConeShape_calculateLocalInertia",3,SWIGTYPE_p_btVector3);
  }
  
  ((btConeShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConeShape_getName(lua_State* L) {
  int SWIG_arg = 0;
  btConeShape *arg1 = (btConeShape *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btConeShape::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConeShape::getName",1,"btConeShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConeShape,0))){
    SWIG_fail_ptr("btConeShape_getName",1,SWIGTYPE_p_btConeShape);
  }
  
  result = (char *)((btConeShape const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConeShape_setConeUpIndex(lua_State* L) {
  int SWIG_arg = 0;
  btConeShape *arg1 = (btConeShape *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btConeShape::setConeUpIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConeShape::setConeUpIndex",1,"btConeShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConeShape::setConeUpIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConeShape,0))){
    SWIG_fail_ptr("btConeShape_setConeUpIndex",1,SWIGTYPE_p_btConeShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setConeUpIndex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConeShape_getConeUpIndex(lua_State* L) {
  int SWIG_arg = 0;
  btConeShape *arg1 = (btConeShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btConeShape::getConeUpIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConeShape::getConeUpIndex",1,"btConeShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConeShape,0))){
    SWIG_fail_ptr("btConeShape_getConeUpIndex",1,SWIGTYPE_p_btConeShape);
  }
  
  result = (int)((btConeShape const *)arg1)->getConeUpIndex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConeShape_getAnisotropicRollingFrictionDirection(lua_State* L) {
  int SWIG_arg = 0;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btConeShape::getAnisotropicRollingFrictionDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConeShape::getAnisotropicRollingFrictionDirection",1,"btConeShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConeShape,0))){
    SWIG_fail_ptr("btConeShape_getAnisotropicRollingFrictionDirection",1,SWIGTYPE_p_btConeShape);
  }
  
  result = ((btConeShape const *)arg1)->getAnisotropicRollingFrictionDirection();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConeShape_setLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btConeShape::setLocalScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConeShape::setLocalScaling",1,"btConeShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConeShape::setLocalScaling",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConeShape,0))){
    SWIG_fail_ptr("btConeShape_setLocalScaling",1,SWIGTYPE_p_btConeShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConeShape_setLocalScaling",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConeShape(void *obj) {
btConeShape *arg1 = (btConeShape *) obj;
delete arg1;
}
static swig_lua_method swig_btConeShape_methods[] = {
    {"localGetSupportingVertex", _wrap_btConeShape_localGetSupportingVertex}, 
    {"localGetSupportingVertexWithoutMargin", _wrap_btConeShape_localGetSupportingVertexWithoutMargin}, 
    {"batchedUnitVectorGetSupportingVertexWithoutMargin", _wrap_btConeShape_batchedUnitVectorGetSupportingVertexWithoutMargin}, 
    {"getRadius", _wrap_btConeShape_getRadius}, 
    {"getHeight", _wrap_btConeShape_getHeight}, 
    {"calculateLocalInertia", _wrap_btConeShape_calculateLocalInertia}, 
    {"getName", _wrap_btConeShape_getName}, 
    {"setConeUpIndex", _wrap_btConeShape_setConeUpIndex}, 
    {"getConeUpIndex", _wrap_btConeShape_getConeUpIndex}, 
    {"getAnisotropicRollingFrictionDirection", _wrap_btConeShape_getAnisotropicRollingFrictionDirection}, 
    {"setLocalScaling", _wrap_btConeShape_setLocalScaling}, 
    {0,0}
};
static swig_lua_attribute swig_btConeShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btConeShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConeShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConeShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConeShape_bases[] = {0,0};
static const char *swig_btConeShape_base_names[] = {"btConvexInternalShape *",0};
static swig_lua_class _wrap_class_btConeShape = { "btConeShape", &SWIGTYPE_p_btConeShape,_wrap_new_btConeShape, swig_delete_btConeShape, swig_btConeShape_methods, swig_btConeShape_attributes, { "btConeShape", swig_btConeShape_cls_methods, swig_btConeShape_cls_attributes, swig_btConeShape_cls_constants }, swig_btConeShape_bases, swig_btConeShape_base_names };

static int _wrap_new_btConeShapeX(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btConeShapeX *result = 0 ;
  
  SWIG_check_num_args("btConeShapeX::btConeShapeX",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btConeShapeX::btConeShapeX",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConeShapeX::btConeShapeX",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (btConeShapeX *)new btConeShapeX(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConeShapeX,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConeShapeX_getAnisotropicRollingFrictionDirection(lua_State* L) {
  int SWIG_arg = 0;
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btConeShapeX::getAnisotropicRollingFrictionDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConeShapeX::getAnisotropicRollingFrictionDirection",1,"btConeShapeX const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConeShapeX,0))){
    SWIG_fail_ptr("btConeShapeX_getAnisotropicRollingFrictionDirection",1,SWIGTYPE_p_btConeShapeX);
  }
  
  result = ((btConeShapeX const *)arg1)->getAnisotropicRollingFrictionDirection();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConeShapeX(void *obj) {
btConeShapeX *arg1 = (btConeShapeX *) obj;
delete arg1;
}
static swig_lua_method swig_btConeShapeX_methods[] = {
    {"getAnisotropicRollingFrictionDirection", _wrap_btConeShapeX_getAnisotropicRollingFrictionDirection}, 
    {0,0}
};
static swig_lua_attribute swig_btConeShapeX_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btConeShapeX_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConeShapeX_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConeShapeX_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConeShapeX_bases[] = {0,0};
static const char *swig_btConeShapeX_base_names[] = {"btConeShape *",0};
static swig_lua_class _wrap_class_btConeShapeX = { "btConeShapeX", &SWIGTYPE_p_btConeShapeX,_wrap_new_btConeShapeX, swig_delete_btConeShapeX, swig_btConeShapeX_methods, swig_btConeShapeX_attributes, { "btConeShapeX", swig_btConeShapeX_cls_methods, swig_btConeShapeX_cls_attributes, swig_btConeShapeX_cls_constants }, swig_btConeShapeX_bases, swig_btConeShapeX_base_names };

static int _wrap_new_btConeShapeZ(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btConeShapeZ *result = 0 ;
  
  SWIG_check_num_args("btConeShapeZ::btConeShapeZ",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btConeShapeZ::btConeShapeZ",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConeShapeZ::btConeShapeZ",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (btConeShapeZ *)new btConeShapeZ(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConeShapeZ,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConeShapeZ_getAnisotropicRollingFrictionDirection(lua_State* L) {
  int SWIG_arg = 0;
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btConeShapeZ::getAnisotropicRollingFrictionDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConeShapeZ::getAnisotropicRollingFrictionDirection",1,"btConeShapeZ const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConeShapeZ,0))){
    SWIG_fail_ptr("btConeShapeZ_getAnisotropicRollingFrictionDirection",1,SWIGTYPE_p_btConeShapeZ);
  }
  
  result = ((btConeShapeZ const *)arg1)->getAnisotropicRollingFrictionDirection();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConeShapeZ(void *obj) {
btConeShapeZ *arg1 = (btConeShapeZ *) obj;
delete arg1;
}
static swig_lua_method swig_btConeShapeZ_methods[] = {
    {"getAnisotropicRollingFrictionDirection", _wrap_btConeShapeZ_getAnisotropicRollingFrictionDirection}, 
    {0,0}
};
static swig_lua_attribute swig_btConeShapeZ_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btConeShapeZ_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConeShapeZ_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConeShapeZ_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConeShapeZ_bases[] = {0,0};
static const char *swig_btConeShapeZ_base_names[] = {"btConeShape *",0};
static swig_lua_class _wrap_class_btConeShapeZ = { "btConeShapeZ", &SWIGTYPE_p_btConeShapeZ,_wrap_new_btConeShapeZ, swig_delete_btConeShapeZ, swig_btConeShapeZ_methods, swig_btConeShapeZ_attributes, { "btConeShapeZ", swig_btConeShapeZ_cls_methods, swig_btConeShapeZ_cls_attributes, swig_btConeShapeZ_cls_constants }, swig_btConeShapeZ_bases, swig_btConeShapeZ_base_names };

static int _wrap_new_btConvexHullShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btScalar *arg1 = (btScalar *) 0 ;
  int arg2 ;
  int arg3 ;
  btConvexHullShape *result = 0 ;
  
  SWIG_check_num_args("btConvexHullShape::btConvexHullShape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::btConvexHullShape",1,"btScalar const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConvexHullShape::btConvexHullShape",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btConvexHullShape::btConvexHullShape",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_btConvexHullShape",1,SWIGTYPE_p_float);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (btConvexHullShape *)new btConvexHullShape((btScalar const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexHullShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btConvexHullShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btScalar *arg1 = (btScalar *) 0 ;
  int arg2 ;
  btConvexHullShape *result = 0 ;
  
  SWIG_check_num_args("btConvexHullShape::btConvexHullShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::btConvexHullShape",1,"btScalar const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConvexHullShape::btConvexHullShape",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_btConvexHullShape",1,SWIGTYPE_p_float);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btConvexHullShape *)new btConvexHullShape((btScalar const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexHullShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btConvexHullShape__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btScalar *arg1 = (btScalar *) 0 ;
  btConvexHullShape *result = 0 ;
  
  SWIG_check_num_args("btConvexHullShape::btConvexHullShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::btConvexHullShape",1,"btScalar const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_btConvexHullShape",1,SWIGTYPE_p_float);
  }
  
  result = (btConvexHullShape *)new btConvexHullShape((btScalar const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexHullShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btConvexHullShape__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *result = 0 ;
  
  SWIG_check_num_args("btConvexHullShape::btConvexHullShape",0,0)
  result = (btConvexHullShape *)new btConvexHullShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexHullShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btConvexHullShape(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btConvexHullShape__SWIG_3(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_btConvexHullShape__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_btConvexHullShape__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_btConvexHullShape__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btConvexHullShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btConvexHullShape::btConvexHullShape(btScalar const *,int,int)\n"
    "    btConvexHullShape::btConvexHullShape(btScalar const *,int)\n"
    "    btConvexHullShape::btConvexHullShape(btScalar const *)\n"
    "    btConvexHullShape::btConvexHullShape()\n");
  lua_error(L);return 0;
}


static int _wrap_btConvexHullShape_addPoint(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btConvexHullShape::addPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::addPoint",1,"btConvexHullShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexHullShape::addPoint",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_addPoint",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexHullShape_addPoint",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->addPoint((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_getUnscaledPoints__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btConvexHullShape::getUnscaledPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::getUnscaledPoints",1,"btConvexHullShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_getUnscaledPoints",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  result = (btVector3 *)(arg1)->getUnscaledPoints();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_getUnscaledPoints__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btConvexHullShape::getUnscaledPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::getUnscaledPoints",1,"btConvexHullShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_getUnscaledPoints",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  result = (btVector3 *)((btConvexHullShape const *)arg1)->getUnscaledPoints();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_getUnscaledPoints(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btConvexHullShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btConvexHullShape_getUnscaledPoints__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btConvexHullShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btConvexHullShape_getUnscaledPoints__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btConvexHullShape_getUnscaledPoints'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btConvexHullShape::getUnscaledPoints()\n"
    "    btConvexHullShape::getUnscaledPoints() const\n");
  lua_error(L);return 0;
}


static int _wrap_btConvexHullShape_getPoints(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btConvexHullShape::getPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::getPoints",1,"btConvexHullShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_getPoints",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  result = (btVector3 *)((btConvexHullShape const *)arg1)->getPoints();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_getScaledPoint(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int arg2 ;
  btVector3 result;
  
  SWIG_check_num_args("btConvexHullShape::getScaledPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::getScaledPoint",1,"btConvexHullShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConvexHullShape::getScaledPoint",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_getScaledPoint",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((btConvexHullShape const *)arg1)->getScaledPoint(arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_getNumPoints(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btConvexHullShape::getNumPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::getNumPoints",1,"btConvexHullShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_getNumPoints",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  result = (int)((btConvexHullShape const *)arg1)->getNumPoints();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_localGetSupportingVertex(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btConvexHullShape::localGetSupportingVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::localGetSupportingVertex",1,"btConvexHullShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexHullShape::localGetSupportingVertex",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_localGetSupportingVertex",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexHullShape_localGetSupportingVertex",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btConvexHullShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_localGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btConvexHullShape::localGetSupportingVertexWithoutMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::localGetSupportingVertexWithoutMargin",1,"btConvexHullShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexHullShape::localGetSupportingVertexWithoutMargin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_localGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexHullShape_localGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btConvexHullShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_batchedUnitVectorGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btConvexHullShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::batchedUnitVectorGetSupportingVertexWithoutMargin",1,"btConvexHullShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConvexHullShape::batchedUnitVectorGetSupportingVertexWithoutMargin",2,"btVector3 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btConvexHullShape::batchedUnitVectorGetSupportingVertexWithoutMargin",3,"btVector3 *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btConvexHullShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_batchedUnitVectorGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexHullShape_batchedUnitVectorGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexHullShape_batchedUnitVectorGetSupportingVertexWithoutMargin",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btConvexHullShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_project(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  SWIG_check_num_args("btConvexHullShape::project",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::project",1,"btConvexHullShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexHullShape::project",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btConvexHullShape::project",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btConvexHullShape::project",4,"btScalar &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btConvexHullShape::project",5,"btScalar &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btConvexHullShape::project",6,"btVector3 &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btConvexHullShape::project",7,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_project",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btConvexHullShape_project",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexHullShape_project",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btConvexHullShape_project",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btConvexHullShape_project",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexHullShape_project",6,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexHullShape_project",7,SWIGTYPE_p_btVector3);
  }
  
  ((btConvexHullShape const *)arg1)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5,*arg6,*arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_getName(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btConvexHullShape::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::getName",1,"btConvexHullShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_getName",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  result = (char *)((btConvexHullShape const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_getNumVertices(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btConvexHullShape::getNumVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::getNumVertices",1,"btConvexHullShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_getNumVertices",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  result = (int)((btConvexHullShape const *)arg1)->getNumVertices();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_getNumEdges(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btConvexHullShape::getNumEdges",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::getNumEdges",1,"btConvexHullShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_getNumEdges",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  result = (int)((btConvexHullShape const *)arg1)->getNumEdges();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_getEdge(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btConvexHullShape::getEdge",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::getEdge",1,"btConvexHullShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConvexHullShape::getEdge",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btConvexHullShape::getEdge",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btConvexHullShape::getEdge",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_getEdge",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexHullShape_getEdge",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexHullShape_getEdge",4,SWIGTYPE_p_btVector3);
  }
  
  ((btConvexHullShape const *)arg1)->getEdge(arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_getVertex(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btConvexHullShape::getVertex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::getVertex",1,"btConvexHullShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConvexHullShape::getVertex",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btConvexHullShape::getVertex",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_getVertex",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexHullShape_getVertex",3,SWIGTYPE_p_btVector3);
  }
  
  ((btConvexHullShape const *)arg1)->getVertex(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_getNumPlanes(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btConvexHullShape::getNumPlanes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::getNumPlanes",1,"btConvexHullShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_getNumPlanes",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  result = (int)((btConvexHullShape const *)arg1)->getNumPlanes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_getPlane(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btConvexHullShape::getPlane",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::getPlane",1,"btConvexHullShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexHullShape::getPlane",2,"btVector3 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btConvexHullShape::getPlane",3,"btVector3 &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btConvexHullShape::getPlane",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_getPlane",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexHullShape_getPlane",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexHullShape_getPlane",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btConvexHullShape const *)arg1)->getPlane(*arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_isInside(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  SWIG_check_num_args("btConvexHullShape::isInside",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::isInside",1,"btConvexHullShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexHullShape::isInside",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btConvexHullShape::isInside",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_isInside",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexHullShape_isInside",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  result = (bool)((btConvexHullShape const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_setLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btConvexHullShape::setLocalScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::setLocalScaling",1,"btConvexHullShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexHullShape::setLocalScaling",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_setLocalScaling",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexHullShape_setLocalScaling",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btConvexHullShape::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::calculateSerializeBufferSize",1,"btConvexHullShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_calculateSerializeBufferSize",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  result = (int)((btConvexHullShape const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShape_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btConvexHullShape::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShape::serialize",1,"btConvexHullShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConvexHullShape::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btConvexHullShape::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("btConvexHullShape_serialize",1,SWIGTYPE_p_btConvexHullShape);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btConvexHullShape_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btConvexHullShape_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  result = (char *)((btConvexHullShape const *)arg1)->serialize(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConvexHullShape(void *obj) {
btConvexHullShape *arg1 = (btConvexHullShape *) obj;
delete arg1;
}
static swig_lua_method swig_btConvexHullShape_methods[] = {
    {"addPoint", _wrap_btConvexHullShape_addPoint}, 
    {"getUnscaledPoints", _wrap_btConvexHullShape_getUnscaledPoints}, 
    {"getPoints", _wrap_btConvexHullShape_getPoints}, 
    {"getScaledPoint", _wrap_btConvexHullShape_getScaledPoint}, 
    {"getNumPoints", _wrap_btConvexHullShape_getNumPoints}, 
    {"localGetSupportingVertex", _wrap_btConvexHullShape_localGetSupportingVertex}, 
    {"localGetSupportingVertexWithoutMargin", _wrap_btConvexHullShape_localGetSupportingVertexWithoutMargin}, 
    {"batchedUnitVectorGetSupportingVertexWithoutMargin", _wrap_btConvexHullShape_batchedUnitVectorGetSupportingVertexWithoutMargin}, 
    {"project", _wrap_btConvexHullShape_project}, 
    {"getName", _wrap_btConvexHullShape_getName}, 
    {"getNumVertices", _wrap_btConvexHullShape_getNumVertices}, 
    {"getNumEdges", _wrap_btConvexHullShape_getNumEdges}, 
    {"getEdge", _wrap_btConvexHullShape_getEdge}, 
    {"getVertex", _wrap_btConvexHullShape_getVertex}, 
    {"getNumPlanes", _wrap_btConvexHullShape_getNumPlanes}, 
    {"getPlane", _wrap_btConvexHullShape_getPlane}, 
    {"isInside", _wrap_btConvexHullShape_isInside}, 
    {"setLocalScaling", _wrap_btConvexHullShape_setLocalScaling}, 
    {"calculateSerializeBufferSize", _wrap_btConvexHullShape_calculateSerializeBufferSize}, 
    {"serialize", _wrap_btConvexHullShape_serialize}, 
    {0,0}
};
static swig_lua_attribute swig_btConvexHullShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btConvexHullShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConvexHullShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConvexHullShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConvexHullShape_bases[] = {0,0};
static const char *swig_btConvexHullShape_base_names[] = {"btPolyhedralConvexAabbCachingShape *",0};
static swig_lua_class _wrap_class_btConvexHullShape = { "btConvexHullShape", &SWIGTYPE_p_btConvexHullShape,_wrap_new_btConvexHullShape, swig_delete_btConvexHullShape, swig_btConvexHullShape_methods, swig_btConvexHullShape_attributes, { "btConvexHullShape", swig_btConvexHullShape_cls_methods, swig_btConvexHullShape_cls_attributes, swig_btConvexHullShape_cls_constants }, swig_btConvexHullShape_bases, swig_btConvexHullShape_base_names };

static int _wrap_btConvexHullShapeData_m_convexInternalShapeData_set(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btConvexInternalShapeData *arg2 = (btConvexInternalShapeData *) 0 ;
  
  SWIG_check_num_args("btConvexHullShapeData::m_convexInternalShapeData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShapeData::m_convexInternalShapeData",1,"btConvexHullShapeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConvexHullShapeData::m_convexInternalShapeData",2,"btConvexInternalShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShapeData,0))){
    SWIG_fail_ptr("btConvexHullShapeData_m_convexInternalShapeData_set",1,SWIGTYPE_p_btConvexHullShapeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConvexInternalShapeData,0))){
    SWIG_fail_ptr("btConvexHullShapeData_m_convexInternalShapeData_set",2,SWIGTYPE_p_btConvexInternalShapeData);
  }
  
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShapeData_m_convexInternalShapeData_get(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btConvexInternalShapeData *result = 0 ;
  
  SWIG_check_num_args("btConvexHullShapeData::m_convexInternalShapeData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShapeData::m_convexInternalShapeData",1,"btConvexHullShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShapeData,0))){
    SWIG_fail_ptr("btConvexHullShapeData_m_convexInternalShapeData_get",1,SWIGTYPE_p_btConvexHullShapeData);
  }
  
  result = (btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexInternalShapeData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShapeData_m_unscaledPointsFloatPtr_set(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btConvexHullShapeData::m_unscaledPointsFloatPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShapeData::m_unscaledPointsFloatPtr",1,"btConvexHullShapeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConvexHullShapeData::m_unscaledPointsFloatPtr",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShapeData,0))){
    SWIG_fail_ptr("btConvexHullShapeData_m_unscaledPointsFloatPtr_set",1,SWIGTYPE_p_btConvexHullShapeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btConvexHullShapeData_m_unscaledPointsFloatPtr_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_unscaledPointsFloatPtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShapeData_m_unscaledPointsFloatPtr_get(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btConvexHullShapeData::m_unscaledPointsFloatPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShapeData::m_unscaledPointsFloatPtr",1,"btConvexHullShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShapeData,0))){
    SWIG_fail_ptr("btConvexHullShapeData_m_unscaledPointsFloatPtr_get",1,SWIGTYPE_p_btConvexHullShapeData);
  }
  
  result = (btVector3FloatData *) ((arg1)->m_unscaledPointsFloatPtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShapeData_m_unscaledPointsDoublePtr_set(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btConvexHullShapeData::m_unscaledPointsDoublePtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShapeData::m_unscaledPointsDoublePtr",1,"btConvexHullShapeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConvexHullShapeData::m_unscaledPointsDoublePtr",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShapeData,0))){
    SWIG_fail_ptr("btConvexHullShapeData_m_unscaledPointsDoublePtr_set",1,SWIGTYPE_p_btConvexHullShapeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btConvexHullShapeData_m_unscaledPointsDoublePtr_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_unscaledPointsDoublePtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShapeData_m_unscaledPointsDoublePtr_get(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btConvexHullShapeData::m_unscaledPointsDoublePtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShapeData::m_unscaledPointsDoublePtr",1,"btConvexHullShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShapeData,0))){
    SWIG_fail_ptr("btConvexHullShapeData_m_unscaledPointsDoublePtr_get",1,SWIGTYPE_p_btConvexHullShapeData);
  }
  
  result = (btVector3DoubleData *) ((arg1)->m_unscaledPointsDoublePtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShapeData_m_numUnscaledPoints_set(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btConvexHullShapeData::m_numUnscaledPoints",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShapeData::m_numUnscaledPoints",1,"btConvexHullShapeData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConvexHullShapeData::m_numUnscaledPoints",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShapeData,0))){
    SWIG_fail_ptr("btConvexHullShapeData_m_numUnscaledPoints_set",1,SWIGTYPE_p_btConvexHullShapeData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numUnscaledPoints = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShapeData_m_numUnscaledPoints_get(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  int result;
  
  SWIG_check_num_args("btConvexHullShapeData::m_numUnscaledPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShapeData::m_numUnscaledPoints",1,"btConvexHullShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShapeData,0))){
    SWIG_fail_ptr("btConvexHullShapeData_m_numUnscaledPoints_get",1,SWIGTYPE_p_btConvexHullShapeData);
  }
  
  result = (int) ((arg1)->m_numUnscaledPoints);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShapeData_m_padding3_set(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btConvexHullShapeData::m_padding3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShapeData::m_padding3",1,"btConvexHullShapeData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btConvexHullShapeData::m_padding3",2,"char [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShapeData,0))){
    SWIG_fail_ptr("btConvexHullShapeData_m_padding3_set",1,SWIGTYPE_p_btConvexHullShapeData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding3, (const char *)arg2, 4-1);
      arg1->m_padding3[4-1] = 0;
    } else {
      arg1->m_padding3[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexHullShapeData_m_padding3_get(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btConvexHullShapeData::m_padding3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexHullShapeData::m_padding3",1,"btConvexHullShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexHullShapeData,0))){
    SWIG_fail_ptr("btConvexHullShapeData_m_padding3_get",1,SWIGTYPE_p_btConvexHullShapeData);
  }
  
  result = (char *)(char *) ((arg1)->m_padding3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btConvexHullShapeData(lua_State* L) {
  int SWIG_arg = 0;
  btConvexHullShapeData *result = 0 ;
  
  SWIG_check_num_args("btConvexHullShapeData::btConvexHullShapeData",0,0)
  result = (btConvexHullShapeData *)new btConvexHullShapeData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexHullShapeData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConvexHullShapeData(void *obj) {
btConvexHullShapeData *arg1 = (btConvexHullShapeData *) obj;
delete arg1;
}
static swig_lua_method swig_btConvexHullShapeData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btConvexHullShapeData_attributes[] = {
    { "m_convexInternalShapeData", _wrap_btConvexHullShapeData_m_convexInternalShapeData_get, _wrap_btConvexHullShapeData_m_convexInternalShapeData_set},
    { "m_unscaledPointsFloatPtr", _wrap_btConvexHullShapeData_m_unscaledPointsFloatPtr_get, _wrap_btConvexHullShapeData_m_unscaledPointsFloatPtr_set},
    { "m_unscaledPointsDoublePtr", _wrap_btConvexHullShapeData_m_unscaledPointsDoublePtr_get, _wrap_btConvexHullShapeData_m_unscaledPointsDoublePtr_set},
    { "m_numUnscaledPoints", _wrap_btConvexHullShapeData_m_numUnscaledPoints_get, _wrap_btConvexHullShapeData_m_numUnscaledPoints_set},
    { "m_padding3", _wrap_btConvexHullShapeData_m_padding3_get, _wrap_btConvexHullShapeData_m_padding3_set},
    {0,0,0}
};
static swig_lua_attribute swig_btConvexHullShapeData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConvexHullShapeData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConvexHullShapeData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConvexHullShapeData_bases[] = {0};
static const char *swig_btConvexHullShapeData_base_names[] = {0};
static swig_lua_class _wrap_class_btConvexHullShapeData = { "btConvexHullShapeData", &SWIGTYPE_p_btConvexHullShapeData,_wrap_new_btConvexHullShapeData, swig_delete_btConvexHullShapeData, swig_btConvexHullShapeData_methods, swig_btConvexHullShapeData_attributes, { "btConvexHullShapeData", swig_btConvexHullShapeData_cls_methods, swig_btConvexHullShapeData_cls_attributes, swig_btConvexHullShapeData_cls_constants }, swig_btConvexHullShapeData_bases, swig_btConvexHullShapeData_base_names };

static int _wrap_btCylinderShape_getHalfExtentsWithMargin(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btCylinderShape::getHalfExtentsWithMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShape::getHalfExtentsWithMargin",1,"btCylinderShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShape,0))){
    SWIG_fail_ptr("btCylinderShape_getHalfExtentsWithMargin",1,SWIGTYPE_p_btCylinderShape);
  }
  
  result = ((btCylinderShape const *)arg1)->getHalfExtentsWithMargin();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShape_getHalfExtentsWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btCylinderShape::getHalfExtentsWithoutMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShape::getHalfExtentsWithoutMargin",1,"btCylinderShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShape,0))){
    SWIG_fail_ptr("btCylinderShape_getHalfExtentsWithoutMargin",1,SWIGTYPE_p_btCylinderShape);
  }
  
  result = (btVector3 *) &((btCylinderShape const *)arg1)->getHalfExtentsWithoutMargin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCylinderShape(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btCylinderShape *result = 0 ;
  
  SWIG_check_num_args("btCylinderShape::btCylinderShape",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btCylinderShape::btCylinderShape",1,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btCylinderShape",1,SWIGTYPE_p_btVector3);
  }
  
  result = (btCylinderShape *)new btCylinderShape((btVector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCylinderShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShape_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btCylinderShape::getAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShape::getAabb",1,"btCylinderShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCylinderShape::getAabb",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btCylinderShape::getAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btCylinderShape::getAabb",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShape,0))){
    SWIG_fail_ptr("btCylinderShape_getAabb",1,SWIGTYPE_p_btCylinderShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btCylinderShape_getAabb",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCylinderShape_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCylinderShape_getAabb",4,SWIGTYPE_p_btVector3);
  }
  
  ((btCylinderShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShape_calculateLocalInertia(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btCylinderShape::calculateLocalInertia",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShape::calculateLocalInertia",1,"btCylinderShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCylinderShape::calculateLocalInertia",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btCylinderShape::calculateLocalInertia",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShape,0))){
    SWIG_fail_ptr("btCylinderShape_calculateLocalInertia",1,SWIGTYPE_p_btCylinderShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCylinderShape_calculateLocalInertia",3,SWIGTYPE_p_btVector3);
  }
  
  ((btCylinderShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShape_localGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btCylinderShape::localGetSupportingVertexWithoutMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShape::localGetSupportingVertexWithoutMargin",1,"btCylinderShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCylinderShape::localGetSupportingVertexWithoutMargin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShape,0))){
    SWIG_fail_ptr("btCylinderShape_localGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btCylinderShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCylinderShape_localGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btCylinderShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShape_batchedUnitVectorGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btCylinderShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShape::batchedUnitVectorGetSupportingVertexWithoutMargin",1,"btCylinderShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCylinderShape::batchedUnitVectorGetSupportingVertexWithoutMargin",2,"btVector3 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCylinderShape::batchedUnitVectorGetSupportingVertexWithoutMargin",3,"btVector3 *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btCylinderShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShape,0))){
    SWIG_fail_ptr("btCylinderShape_batchedUnitVectorGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btCylinderShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCylinderShape_batchedUnitVectorGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCylinderShape_batchedUnitVectorGetSupportingVertexWithoutMargin",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btCylinderShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShape_setMargin(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btCylinderShape::setMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShape::setMargin",1,"btCylinderShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCylinderShape::setMargin",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShape,0))){
    SWIG_fail_ptr("btCylinderShape_setMargin",1,SWIGTYPE_p_btCylinderShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setMargin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShape_localGetSupportingVertex(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btCylinderShape::localGetSupportingVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShape::localGetSupportingVertex",1,"btCylinderShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCylinderShape::localGetSupportingVertex",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShape,0))){
    SWIG_fail_ptr("btCylinderShape_localGetSupportingVertex",1,SWIGTYPE_p_btCylinderShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCylinderShape_localGetSupportingVertex",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btCylinderShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShape_getUpAxis(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btCylinderShape::getUpAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShape::getUpAxis",1,"btCylinderShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShape,0))){
    SWIG_fail_ptr("btCylinderShape_getUpAxis",1,SWIGTYPE_p_btCylinderShape);
  }
  
  result = (int)((btCylinderShape const *)arg1)->getUpAxis();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShape_getAnisotropicRollingFrictionDirection(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btCylinderShape::getAnisotropicRollingFrictionDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShape::getAnisotropicRollingFrictionDirection",1,"btCylinderShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShape,0))){
    SWIG_fail_ptr("btCylinderShape_getAnisotropicRollingFrictionDirection",1,SWIGTYPE_p_btCylinderShape);
  }
  
  result = ((btCylinderShape const *)arg1)->getAnisotropicRollingFrictionDirection();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShape_getRadius(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCylinderShape::getRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShape::getRadius",1,"btCylinderShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShape,0))){
    SWIG_fail_ptr("btCylinderShape_getRadius",1,SWIGTYPE_p_btCylinderShape);
  }
  
  result = (btScalar)((btCylinderShape const *)arg1)->getRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShape_setLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btCylinderShape::setLocalScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShape::setLocalScaling",1,"btCylinderShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCylinderShape::setLocalScaling",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShape,0))){
    SWIG_fail_ptr("btCylinderShape_setLocalScaling",1,SWIGTYPE_p_btCylinderShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCylinderShape_setLocalScaling",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShape_getName(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCylinderShape::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShape::getName",1,"btCylinderShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShape,0))){
    SWIG_fail_ptr("btCylinderShape_getName",1,SWIGTYPE_p_btCylinderShape);
  }
  
  result = (char *)((btCylinderShape const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShape_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btCylinderShape::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShape::calculateSerializeBufferSize",1,"btCylinderShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShape,0))){
    SWIG_fail_ptr("btCylinderShape_calculateSerializeBufferSize",1,SWIGTYPE_p_btCylinderShape);
  }
  
  result = (int)((btCylinderShape const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShape_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCylinderShape::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShape::serialize",1,"btCylinderShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCylinderShape::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCylinderShape::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShape,0))){
    SWIG_fail_ptr("btCylinderShape_serialize",1,SWIGTYPE_p_btCylinderShape);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btCylinderShape_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btCylinderShape_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  result = (char *)((btCylinderShape const *)arg1)->serialize(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCylinderShape(void *obj) {
btCylinderShape *arg1 = (btCylinderShape *) obj;
delete arg1;
}
static swig_lua_method swig_btCylinderShape_methods[] = {
    {"getHalfExtentsWithMargin", _wrap_btCylinderShape_getHalfExtentsWithMargin}, 
    {"getHalfExtentsWithoutMargin", _wrap_btCylinderShape_getHalfExtentsWithoutMargin}, 
    {"getAabb", _wrap_btCylinderShape_getAabb}, 
    {"calculateLocalInertia", _wrap_btCylinderShape_calculateLocalInertia}, 
    {"localGetSupportingVertexWithoutMargin", _wrap_btCylinderShape_localGetSupportingVertexWithoutMargin}, 
    {"batchedUnitVectorGetSupportingVertexWithoutMargin", _wrap_btCylinderShape_batchedUnitVectorGetSupportingVertexWithoutMargin}, 
    {"setMargin", _wrap_btCylinderShape_setMargin}, 
    {"localGetSupportingVertex", _wrap_btCylinderShape_localGetSupportingVertex}, 
    {"getUpAxis", _wrap_btCylinderShape_getUpAxis}, 
    {"getAnisotropicRollingFrictionDirection", _wrap_btCylinderShape_getAnisotropicRollingFrictionDirection}, 
    {"getRadius", _wrap_btCylinderShape_getRadius}, 
    {"setLocalScaling", _wrap_btCylinderShape_setLocalScaling}, 
    {"getName", _wrap_btCylinderShape_getName}, 
    {"calculateSerializeBufferSize", _wrap_btCylinderShape_calculateSerializeBufferSize}, 
    {"serialize", _wrap_btCylinderShape_serialize}, 
    {0,0}
};
static swig_lua_attribute swig_btCylinderShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btCylinderShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCylinderShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCylinderShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCylinderShape_bases[] = {0,0};
static const char *swig_btCylinderShape_base_names[] = {"btConvexInternalShape *",0};
static swig_lua_class _wrap_class_btCylinderShape = { "btCylinderShape", &SWIGTYPE_p_btCylinderShape,_wrap_new_btCylinderShape, swig_delete_btCylinderShape, swig_btCylinderShape_methods, swig_btCylinderShape_attributes, { "btCylinderShape", swig_btCylinderShape_cls_methods, swig_btCylinderShape_cls_attributes, swig_btCylinderShape_cls_constants }, swig_btCylinderShape_bases, swig_btCylinderShape_base_names };

static int _wrap_new_btCylinderShapeX(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btCylinderShapeX *result = 0 ;
  
  SWIG_check_num_args("btCylinderShapeX::btCylinderShapeX",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btCylinderShapeX::btCylinderShapeX",1,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btCylinderShapeX",1,SWIGTYPE_p_btVector3);
  }
  
  result = (btCylinderShapeX *)new btCylinderShapeX((btVector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCylinderShapeX,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShapeX_localGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btCylinderShapeX::localGetSupportingVertexWithoutMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShapeX::localGetSupportingVertexWithoutMargin",1,"btCylinderShapeX const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCylinderShapeX::localGetSupportingVertexWithoutMargin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShapeX,0))){
    SWIG_fail_ptr("btCylinderShapeX_localGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btCylinderShapeX);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCylinderShapeX_localGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btCylinderShapeX const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShapeX_batchedUnitVectorGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btCylinderShapeX::batchedUnitVectorGetSupportingVertexWithoutMargin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShapeX::batchedUnitVectorGetSupportingVertexWithoutMargin",1,"btCylinderShapeX const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCylinderShapeX::batchedUnitVectorGetSupportingVertexWithoutMargin",2,"btVector3 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCylinderShapeX::batchedUnitVectorGetSupportingVertexWithoutMargin",3,"btVector3 *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btCylinderShapeX::batchedUnitVectorGetSupportingVertexWithoutMargin",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShapeX,0))){
    SWIG_fail_ptr("btCylinderShapeX_batchedUnitVectorGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btCylinderShapeX);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCylinderShapeX_batchedUnitVectorGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCylinderShapeX_batchedUnitVectorGetSupportingVertexWithoutMargin",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btCylinderShapeX const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShapeX_getName(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCylinderShapeX::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShapeX::getName",1,"btCylinderShapeX const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShapeX,0))){
    SWIG_fail_ptr("btCylinderShapeX_getName",1,SWIGTYPE_p_btCylinderShapeX);
  }
  
  result = (char *)((btCylinderShapeX const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShapeX_getRadius(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCylinderShapeX::getRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShapeX::getRadius",1,"btCylinderShapeX const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShapeX,0))){
    SWIG_fail_ptr("btCylinderShapeX_getRadius",1,SWIGTYPE_p_btCylinderShapeX);
  }
  
  result = (btScalar)((btCylinderShapeX const *)arg1)->getRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCylinderShapeX(void *obj) {
btCylinderShapeX *arg1 = (btCylinderShapeX *) obj;
delete arg1;
}
static swig_lua_method swig_btCylinderShapeX_methods[] = {
    {"localGetSupportingVertexWithoutMargin", _wrap_btCylinderShapeX_localGetSupportingVertexWithoutMargin}, 
    {"batchedUnitVectorGetSupportingVertexWithoutMargin", _wrap_btCylinderShapeX_batchedUnitVectorGetSupportingVertexWithoutMargin}, 
    {"getName", _wrap_btCylinderShapeX_getName}, 
    {"getRadius", _wrap_btCylinderShapeX_getRadius}, 
    {0,0}
};
static swig_lua_attribute swig_btCylinderShapeX_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btCylinderShapeX_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCylinderShapeX_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCylinderShapeX_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCylinderShapeX_bases[] = {0,0};
static const char *swig_btCylinderShapeX_base_names[] = {"btCylinderShape *",0};
static swig_lua_class _wrap_class_btCylinderShapeX = { "btCylinderShapeX", &SWIGTYPE_p_btCylinderShapeX,_wrap_new_btCylinderShapeX, swig_delete_btCylinderShapeX, swig_btCylinderShapeX_methods, swig_btCylinderShapeX_attributes, { "btCylinderShapeX", swig_btCylinderShapeX_cls_methods, swig_btCylinderShapeX_cls_attributes, swig_btCylinderShapeX_cls_constants }, swig_btCylinderShapeX_bases, swig_btCylinderShapeX_base_names };

static int _wrap_new_btCylinderShapeZ(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btCylinderShapeZ *result = 0 ;
  
  SWIG_check_num_args("btCylinderShapeZ::btCylinderShapeZ",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btCylinderShapeZ::btCylinderShapeZ",1,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btCylinderShapeZ",1,SWIGTYPE_p_btVector3);
  }
  
  result = (btCylinderShapeZ *)new btCylinderShapeZ((btVector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCylinderShapeZ,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShapeZ_localGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btCylinderShapeZ::localGetSupportingVertexWithoutMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShapeZ::localGetSupportingVertexWithoutMargin",1,"btCylinderShapeZ const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCylinderShapeZ::localGetSupportingVertexWithoutMargin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShapeZ,0))){
    SWIG_fail_ptr("btCylinderShapeZ_localGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btCylinderShapeZ);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCylinderShapeZ_localGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btCylinderShapeZ const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShapeZ_batchedUnitVectorGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btCylinderShapeZ::batchedUnitVectorGetSupportingVertexWithoutMargin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShapeZ::batchedUnitVectorGetSupportingVertexWithoutMargin",1,"btCylinderShapeZ const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCylinderShapeZ::batchedUnitVectorGetSupportingVertexWithoutMargin",2,"btVector3 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCylinderShapeZ::batchedUnitVectorGetSupportingVertexWithoutMargin",3,"btVector3 *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btCylinderShapeZ::batchedUnitVectorGetSupportingVertexWithoutMargin",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShapeZ,0))){
    SWIG_fail_ptr("btCylinderShapeZ_batchedUnitVectorGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btCylinderShapeZ);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCylinderShapeZ_batchedUnitVectorGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCylinderShapeZ_batchedUnitVectorGetSupportingVertexWithoutMargin",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btCylinderShapeZ const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShapeZ_getName(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCylinderShapeZ::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShapeZ::getName",1,"btCylinderShapeZ const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShapeZ,0))){
    SWIG_fail_ptr("btCylinderShapeZ_getName",1,SWIGTYPE_p_btCylinderShapeZ);
  }
  
  result = (char *)((btCylinderShapeZ const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShapeZ_getRadius(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCylinderShapeZ::getRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShapeZ::getRadius",1,"btCylinderShapeZ const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShapeZ,0))){
    SWIG_fail_ptr("btCylinderShapeZ_getRadius",1,SWIGTYPE_p_btCylinderShapeZ);
  }
  
  result = (btScalar)((btCylinderShapeZ const *)arg1)->getRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCylinderShapeZ(void *obj) {
btCylinderShapeZ *arg1 = (btCylinderShapeZ *) obj;
delete arg1;
}
static swig_lua_method swig_btCylinderShapeZ_methods[] = {
    {"localGetSupportingVertexWithoutMargin", _wrap_btCylinderShapeZ_localGetSupportingVertexWithoutMargin}, 
    {"batchedUnitVectorGetSupportingVertexWithoutMargin", _wrap_btCylinderShapeZ_batchedUnitVectorGetSupportingVertexWithoutMargin}, 
    {"getName", _wrap_btCylinderShapeZ_getName}, 
    {"getRadius", _wrap_btCylinderShapeZ_getRadius}, 
    {0,0}
};
static swig_lua_attribute swig_btCylinderShapeZ_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btCylinderShapeZ_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCylinderShapeZ_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCylinderShapeZ_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCylinderShapeZ_bases[] = {0,0};
static const char *swig_btCylinderShapeZ_base_names[] = {"btCylinderShape *",0};
static swig_lua_class _wrap_class_btCylinderShapeZ = { "btCylinderShapeZ", &SWIGTYPE_p_btCylinderShapeZ,_wrap_new_btCylinderShapeZ, swig_delete_btCylinderShapeZ, swig_btCylinderShapeZ_methods, swig_btCylinderShapeZ_attributes, { "btCylinderShapeZ", swig_btCylinderShapeZ_cls_methods, swig_btCylinderShapeZ_cls_attributes, swig_btCylinderShapeZ_cls_constants }, swig_btCylinderShapeZ_bases, swig_btCylinderShapeZ_base_names };

static int _wrap_btCylinderShapeData_m_convexInternalShapeData_set(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  btConvexInternalShapeData *arg2 = (btConvexInternalShapeData *) 0 ;
  
  SWIG_check_num_args("btCylinderShapeData::m_convexInternalShapeData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShapeData::m_convexInternalShapeData",1,"btCylinderShapeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCylinderShapeData::m_convexInternalShapeData",2,"btConvexInternalShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShapeData,0))){
    SWIG_fail_ptr("btCylinderShapeData_m_convexInternalShapeData_set",1,SWIGTYPE_p_btCylinderShapeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConvexInternalShapeData,0))){
    SWIG_fail_ptr("btCylinderShapeData_m_convexInternalShapeData_set",2,SWIGTYPE_p_btConvexInternalShapeData);
  }
  
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShapeData_m_convexInternalShapeData_get(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  btConvexInternalShapeData *result = 0 ;
  
  SWIG_check_num_args("btCylinderShapeData::m_convexInternalShapeData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShapeData::m_convexInternalShapeData",1,"btCylinderShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShapeData,0))){
    SWIG_fail_ptr("btCylinderShapeData_m_convexInternalShapeData_get",1,SWIGTYPE_p_btCylinderShapeData);
  }
  
  result = (btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexInternalShapeData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShapeData_m_upAxis_set(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCylinderShapeData::m_upAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShapeData::m_upAxis",1,"btCylinderShapeData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCylinderShapeData::m_upAxis",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShapeData,0))){
    SWIG_fail_ptr("btCylinderShapeData_m_upAxis_set",1,SWIGTYPE_p_btCylinderShapeData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_upAxis = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShapeData_m_upAxis_get(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCylinderShapeData::m_upAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShapeData::m_upAxis",1,"btCylinderShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShapeData,0))){
    SWIG_fail_ptr("btCylinderShapeData_m_upAxis_get",1,SWIGTYPE_p_btCylinderShapeData);
  }
  
  result = (int) ((arg1)->m_upAxis);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShapeData_m_padding_set(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btCylinderShapeData::m_padding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShapeData::m_padding",1,"btCylinderShapeData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btCylinderShapeData::m_padding",2,"char [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShapeData,0))){
    SWIG_fail_ptr("btCylinderShapeData_m_padding_set",1,SWIGTYPE_p_btCylinderShapeData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCylinderShapeData_m_padding_get(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCylinderShapeData::m_padding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCylinderShapeData::m_padding",1,"btCylinderShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCylinderShapeData,0))){
    SWIG_fail_ptr("btCylinderShapeData_m_padding_get",1,SWIGTYPE_p_btCylinderShapeData);
  }
  
  result = (char *)(char *) ((arg1)->m_padding);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCylinderShapeData(lua_State* L) {
  int SWIG_arg = 0;
  btCylinderShapeData *result = 0 ;
  
  SWIG_check_num_args("btCylinderShapeData::btCylinderShapeData",0,0)
  result = (btCylinderShapeData *)new btCylinderShapeData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCylinderShapeData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCylinderShapeData(void *obj) {
btCylinderShapeData *arg1 = (btCylinderShapeData *) obj;
delete arg1;
}
static swig_lua_method swig_btCylinderShapeData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btCylinderShapeData_attributes[] = {
    { "m_convexInternalShapeData", _wrap_btCylinderShapeData_m_convexInternalShapeData_get, _wrap_btCylinderShapeData_m_convexInternalShapeData_set},
    { "m_upAxis", _wrap_btCylinderShapeData_m_upAxis_get, _wrap_btCylinderShapeData_m_upAxis_set},
    { "m_padding", _wrap_btCylinderShapeData_m_padding_get, _wrap_btCylinderShapeData_m_padding_set},
    {0,0,0}
};
static swig_lua_attribute swig_btCylinderShapeData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCylinderShapeData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCylinderShapeData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCylinderShapeData_bases[] = {0};
static const char *swig_btCylinderShapeData_base_names[] = {0};
static swig_lua_class _wrap_class_btCylinderShapeData = { "btCylinderShapeData", &SWIGTYPE_p_btCylinderShapeData,_wrap_new_btCylinderShapeData, swig_delete_btCylinderShapeData, swig_btCylinderShapeData_methods, swig_btCylinderShapeData_attributes, { "btCylinderShapeData", swig_btCylinderShapeData_cls_methods, swig_btCylinderShapeData_cls_attributes, swig_btCylinderShapeData_cls_constants }, swig_btCylinderShapeData_bases, swig_btCylinderShapeData_base_names };

static int _wrap_new_btEmptyShape(lua_State* L) {
  int SWIG_arg = 0;
  btEmptyShape *result = 0 ;
  
  SWIG_check_num_args("btEmptyShape::btEmptyShape",0,0)
  result = (btEmptyShape *)new btEmptyShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btEmptyShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btEmptyShape_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btEmptyShape::getAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btEmptyShape::getAabb",1,"btEmptyShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btEmptyShape::getAabb",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btEmptyShape::getAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btEmptyShape::getAabb",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btEmptyShape,0))){
    SWIG_fail_ptr("btEmptyShape_getAabb",1,SWIGTYPE_p_btEmptyShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btEmptyShape_getAabb",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btEmptyShape_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btEmptyShape_getAabb",4,SWIGTYPE_p_btVector3);
  }
  
  ((btEmptyShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btEmptyShape_setLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btEmptyShape::setLocalScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btEmptyShape::setLocalScaling",1,"btEmptyShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btEmptyShape::setLocalScaling",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btEmptyShape,0))){
    SWIG_fail_ptr("btEmptyShape_setLocalScaling",1,SWIGTYPE_p_btEmptyShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btEmptyShape_setLocalScaling",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btEmptyShape_getLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btEmptyShape::getLocalScaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btEmptyShape::getLocalScaling",1,"btEmptyShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btEmptyShape,0))){
    SWIG_fail_ptr("btEmptyShape_getLocalScaling",1,SWIGTYPE_p_btEmptyShape);
  }
  
  result = (btVector3 *) &((btEmptyShape const *)arg1)->getLocalScaling();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btEmptyShape_calculateLocalInertia(lua_State* L) {
  int SWIG_arg = 0;
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btEmptyShape::calculateLocalInertia",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btEmptyShape::calculateLocalInertia",1,"btEmptyShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btEmptyShape::calculateLocalInertia",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btEmptyShape::calculateLocalInertia",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btEmptyShape,0))){
    SWIG_fail_ptr("btEmptyShape_calculateLocalInertia",1,SWIGTYPE_p_btEmptyShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btEmptyShape_calculateLocalInertia",3,SWIGTYPE_p_btVector3);
  }
  
  ((btEmptyShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btEmptyShape_getName(lua_State* L) {
  int SWIG_arg = 0;
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btEmptyShape::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btEmptyShape::getName",1,"btEmptyShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btEmptyShape,0))){
    SWIG_fail_ptr("btEmptyShape_getName",1,SWIGTYPE_p_btEmptyShape);
  }
  
  result = (char *)((btEmptyShape const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btEmptyShape_processAllTriangles(lua_State* L) {
  int SWIG_arg = 0;
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btEmptyShape::processAllTriangles",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btEmptyShape::processAllTriangles",1,"btEmptyShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btEmptyShape::processAllTriangles",2,"btTriangleCallback *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btEmptyShape::processAllTriangles",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btEmptyShape::processAllTriangles",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btEmptyShape,0))){
    SWIG_fail_ptr("btEmptyShape_processAllTriangles",1,SWIGTYPE_p_btEmptyShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTriangleCallback,0))){
    SWIG_fail_ptr("btEmptyShape_processAllTriangles",2,SWIGTYPE_p_btTriangleCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btEmptyShape_processAllTriangles",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btEmptyShape_processAllTriangles",4,SWIGTYPE_p_btVector3);
  }
  
  ((btEmptyShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btEmptyShape(void *obj) {
btEmptyShape *arg1 = (btEmptyShape *) obj;
delete arg1;
}
static swig_lua_method swig_btEmptyShape_methods[] = {
    {"getAabb", _wrap_btEmptyShape_getAabb}, 
    {"setLocalScaling", _wrap_btEmptyShape_setLocalScaling}, 
    {"getLocalScaling", _wrap_btEmptyShape_getLocalScaling}, 
    {"calculateLocalInertia", _wrap_btEmptyShape_calculateLocalInertia}, 
    {"getName", _wrap_btEmptyShape_getName}, 
    {"processAllTriangles", _wrap_btEmptyShape_processAllTriangles}, 
    {0,0}
};
static swig_lua_attribute swig_btEmptyShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btEmptyShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btEmptyShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btEmptyShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btEmptyShape_bases[] = {0,0};
static const char *swig_btEmptyShape_base_names[] = {"btConcaveShape *",0};
static swig_lua_class _wrap_class_btEmptyShape = { "btEmptyShape", &SWIGTYPE_p_btEmptyShape,_wrap_new_btEmptyShape, swig_delete_btEmptyShape, swig_btEmptyShape_methods, swig_btEmptyShape_attributes, { "btEmptyShape", swig_btEmptyShape_cls_methods, swig_btEmptyShape_cls_attributes, swig_btEmptyShape_cls_constants }, swig_btEmptyShape_bases, swig_btEmptyShape_base_names };

static int _wrap_new_btHeightfieldTerrainShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  int arg7 ;
  PHY_ScalarType arg8 ;
  bool arg9 ;
  btHeightfieldTerrainShape *result = 0 ;
  
  SWIG_check_num_args("btHeightfieldTerrainShape::btHeightfieldTerrainShape",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btHeightfieldTerrainShape::btHeightfieldTerrainShape",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHeightfieldTerrainShape::btHeightfieldTerrainShape",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btHeightfieldTerrainShape::btHeightfieldTerrainShape",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btHeightfieldTerrainShape::btHeightfieldTerrainShape",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btHeightfieldTerrainShape::btHeightfieldTerrainShape",5,"btScalar");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btHeightfieldTerrainShape::btHeightfieldTerrainShape",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("btHeightfieldTerrainShape::btHeightfieldTerrainShape",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("btHeightfieldTerrainShape::btHeightfieldTerrainShape",8,"PHY_ScalarType");
  if(!lua_isboolean(L,9)) SWIG_fail_arg("btHeightfieldTerrainShape::btHeightfieldTerrainShape",9,"bool");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"new_btHeightfieldTerrainShape");
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (btScalar)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (PHY_ScalarType)(int)lua_tonumber(L, 8);
  arg9 = (lua_toboolean(L, 9)!=0);
  result = (btHeightfieldTerrainShape *)new btHeightfieldTerrainShape(arg1,arg2,(void const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHeightfieldTerrainShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btHeightfieldTerrainShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  btScalar arg4 ;
  int arg5 ;
  bool arg6 ;
  bool arg7 ;
  btHeightfieldTerrainShape *result = 0 ;
  
  SWIG_check_num_args("btHeightfieldTerrainShape::btHeightfieldTerrainShape",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btHeightfieldTerrainShape::btHeightfieldTerrainShape",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHeightfieldTerrainShape::btHeightfieldTerrainShape",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btHeightfieldTerrainShape::btHeightfieldTerrainShape",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btHeightfieldTerrainShape::btHeightfieldTerrainShape",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btHeightfieldTerrainShape::btHeightfieldTerrainShape",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("btHeightfieldTerrainShape::btHeightfieldTerrainShape",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("btHeightfieldTerrainShape::btHeightfieldTerrainShape",7,"bool");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"new_btHeightfieldTerrainShape");
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (btHeightfieldTerrainShape *)new btHeightfieldTerrainShape(arg1,arg2,(void const *)arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHeightfieldTerrainShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btHeightfieldTerrainShape(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 7) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_new_btHeightfieldTerrainShape__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isboolean(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_new_btHeightfieldTerrainShape__SWIG_0(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btHeightfieldTerrainShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btHeightfieldTerrainShape::btHeightfieldTerrainShape(int,int,void const *,btScalar,btScalar,btScalar,int,PHY_ScalarType,bool)\n"
    "    btHeightfieldTerrainShape::btHeightfieldTerrainShape(int,int,void const *,btScalar,int,bool,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_btHeightfieldTerrainShape_setUseDiamondSubdivision__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btHeightfieldTerrainShape *arg1 = (btHeightfieldTerrainShape *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btHeightfieldTerrainShape::setUseDiamondSubdivision",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHeightfieldTerrainShape::setUseDiamondSubdivision",1,"btHeightfieldTerrainShape *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btHeightfieldTerrainShape::setUseDiamondSubdivision",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHeightfieldTerrainShape,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_setUseDiamondSubdivision",1,SWIGTYPE_p_btHeightfieldTerrainShape);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setUseDiamondSubdivision(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHeightfieldTerrainShape_setUseDiamondSubdivision__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btHeightfieldTerrainShape *arg1 = (btHeightfieldTerrainShape *) 0 ;
  
  SWIG_check_num_args("btHeightfieldTerrainShape::setUseDiamondSubdivision",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHeightfieldTerrainShape::setUseDiamondSubdivision",1,"btHeightfieldTerrainShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHeightfieldTerrainShape,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_setUseDiamondSubdivision",1,SWIGTYPE_p_btHeightfieldTerrainShape);
  }
  
  (arg1)->setUseDiamondSubdivision();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHeightfieldTerrainShape_setUseDiamondSubdivision(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHeightfieldTerrainShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btHeightfieldTerrainShape_setUseDiamondSubdivision__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHeightfieldTerrainShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_btHeightfieldTerrainShape_setUseDiamondSubdivision__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btHeightfieldTerrainShape_setUseDiamondSubdivision'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btHeightfieldTerrainShape::setUseDiamondSubdivision(bool)\n"
    "    btHeightfieldTerrainShape::setUseDiamondSubdivision()\n");
  lua_error(L);return 0;
}


static int _wrap_btHeightfieldTerrainShape_setUseZigzagSubdivision__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btHeightfieldTerrainShape *arg1 = (btHeightfieldTerrainShape *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btHeightfieldTerrainShape::setUseZigzagSubdivision",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHeightfieldTerrainShape::setUseZigzagSubdivision",1,"btHeightfieldTerrainShape *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btHeightfieldTerrainShape::setUseZigzagSubdivision",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHeightfieldTerrainShape,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_setUseZigzagSubdivision",1,SWIGTYPE_p_btHeightfieldTerrainShape);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setUseZigzagSubdivision(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHeightfieldTerrainShape_setUseZigzagSubdivision__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btHeightfieldTerrainShape *arg1 = (btHeightfieldTerrainShape *) 0 ;
  
  SWIG_check_num_args("btHeightfieldTerrainShape::setUseZigzagSubdivision",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHeightfieldTerrainShape::setUseZigzagSubdivision",1,"btHeightfieldTerrainShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHeightfieldTerrainShape,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_setUseZigzagSubdivision",1,SWIGTYPE_p_btHeightfieldTerrainShape);
  }
  
  (arg1)->setUseZigzagSubdivision();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHeightfieldTerrainShape_setUseZigzagSubdivision(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHeightfieldTerrainShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btHeightfieldTerrainShape_setUseZigzagSubdivision__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHeightfieldTerrainShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_btHeightfieldTerrainShape_setUseZigzagSubdivision__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btHeightfieldTerrainShape_setUseZigzagSubdivision'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btHeightfieldTerrainShape::setUseZigzagSubdivision(bool)\n"
    "    btHeightfieldTerrainShape::setUseZigzagSubdivision()\n");
  lua_error(L);return 0;
}


static int _wrap_btHeightfieldTerrainShape_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btHeightfieldTerrainShape *arg1 = (btHeightfieldTerrainShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btHeightfieldTerrainShape::getAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHeightfieldTerrainShape::getAabb",1,"btHeightfieldTerrainShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHeightfieldTerrainShape::getAabb",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btHeightfieldTerrainShape::getAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btHeightfieldTerrainShape::getAabb",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHeightfieldTerrainShape,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_getAabb",1,SWIGTYPE_p_btHeightfieldTerrainShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_getAabb",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_getAabb",4,SWIGTYPE_p_btVector3);
  }
  
  ((btHeightfieldTerrainShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHeightfieldTerrainShape_processAllTriangles(lua_State* L) {
  int SWIG_arg = 0;
  btHeightfieldTerrainShape *arg1 = (btHeightfieldTerrainShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btHeightfieldTerrainShape::processAllTriangles",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHeightfieldTerrainShape::processAllTriangles",1,"btHeightfieldTerrainShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHeightfieldTerrainShape::processAllTriangles",2,"btTriangleCallback *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btHeightfieldTerrainShape::processAllTriangles",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btHeightfieldTerrainShape::processAllTriangles",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHeightfieldTerrainShape,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_processAllTriangles",1,SWIGTYPE_p_btHeightfieldTerrainShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTriangleCallback,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_processAllTriangles",2,SWIGTYPE_p_btTriangleCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_processAllTriangles",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_processAllTriangles",4,SWIGTYPE_p_btVector3);
  }
  
  ((btHeightfieldTerrainShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHeightfieldTerrainShape_calculateLocalInertia(lua_State* L) {
  int SWIG_arg = 0;
  btHeightfieldTerrainShape *arg1 = (btHeightfieldTerrainShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btHeightfieldTerrainShape::calculateLocalInertia",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHeightfieldTerrainShape::calculateLocalInertia",1,"btHeightfieldTerrainShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHeightfieldTerrainShape::calculateLocalInertia",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btHeightfieldTerrainShape::calculateLocalInertia",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHeightfieldTerrainShape,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_calculateLocalInertia",1,SWIGTYPE_p_btHeightfieldTerrainShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_calculateLocalInertia",3,SWIGTYPE_p_btVector3);
  }
  
  ((btHeightfieldTerrainShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHeightfieldTerrainShape_setLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btHeightfieldTerrainShape *arg1 = (btHeightfieldTerrainShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btHeightfieldTerrainShape::setLocalScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHeightfieldTerrainShape::setLocalScaling",1,"btHeightfieldTerrainShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHeightfieldTerrainShape::setLocalScaling",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHeightfieldTerrainShape,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_setLocalScaling",1,SWIGTYPE_p_btHeightfieldTerrainShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_setLocalScaling",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHeightfieldTerrainShape_getLocalScaling(lua_State* L) {
  int SWIG_arg = 0;
  btHeightfieldTerrainShape *arg1 = (btHeightfieldTerrainShape *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btHeightfieldTerrainShape::getLocalScaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHeightfieldTerrainShape::getLocalScaling",1,"btHeightfieldTerrainShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHeightfieldTerrainShape,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_getLocalScaling",1,SWIGTYPE_p_btHeightfieldTerrainShape);
  }
  
  result = (btVector3 *) &((btHeightfieldTerrainShape const *)arg1)->getLocalScaling();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHeightfieldTerrainShape_getName(lua_State* L) {
  int SWIG_arg = 0;
  btHeightfieldTerrainShape *arg1 = (btHeightfieldTerrainShape *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btHeightfieldTerrainShape::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHeightfieldTerrainShape::getName",1,"btHeightfieldTerrainShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHeightfieldTerrainShape,0))){
    SWIG_fail_ptr("btHeightfieldTerrainShape_getName",1,SWIGTYPE_p_btHeightfieldTerrainShape);
  }
  
  result = (char *)((btHeightfieldTerrainShape const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btHeightfieldTerrainShape(void *obj) {
btHeightfieldTerrainShape *arg1 = (btHeightfieldTerrainShape *) obj;
delete arg1;
}
static swig_lua_method swig_btHeightfieldTerrainShape_methods[] = {
    {"setUseDiamondSubdivision", _wrap_btHeightfieldTerrainShape_setUseDiamondSubdivision}, 
    {"setUseZigzagSubdivision", _wrap_btHeightfieldTerrainShape_setUseZigzagSubdivision}, 
    {"getAabb", _wrap_btHeightfieldTerrainShape_getAabb}, 
    {"processAllTriangles", _wrap_btHeightfieldTerrainShape_processAllTriangles}, 
    {"calculateLocalInertia", _wrap_btHeightfieldTerrainShape_calculateLocalInertia}, 
    {"setLocalScaling", _wrap_btHeightfieldTerrainShape_setLocalScaling}, 
    {"getLocalScaling", _wrap_btHeightfieldTerrainShape_getLocalScaling}, 
    {"getName", _wrap_btHeightfieldTerrainShape_getName}, 
    {0,0}
};
static swig_lua_attribute swig_btHeightfieldTerrainShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btHeightfieldTerrainShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btHeightfieldTerrainShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btHeightfieldTerrainShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btHeightfieldTerrainShape_bases[] = {0,0};
static const char *swig_btHeightfieldTerrainShape_base_names[] = {"btConcaveShape *",0};
static swig_lua_class _wrap_class_btHeightfieldTerrainShape = { "btHeightfieldTerrainShape", &SWIGTYPE_p_btHeightfieldTerrainShape,_wrap_new_btHeightfieldTerrainShape, swig_delete_btHeightfieldTerrainShape, swig_btHeightfieldTerrainShape_methods, swig_btHeightfieldTerrainShape_attributes, { "btHeightfieldTerrainShape", swig_btHeightfieldTerrainShape_cls_methods, swig_btHeightfieldTerrainShape_cls_attributes, swig_btHeightfieldTerrainShape_cls_constants }, swig_btHeightfieldTerrainShape_bases, swig_btHeightfieldTerrainShape_base_names };

static int _wrap_new_btMinkowskiSumShape(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btMinkowskiSumShape *result = 0 ;
  
  SWIG_check_num_args("btMinkowskiSumShape::btMinkowskiSumShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMinkowskiSumShape::btMinkowskiSumShape",1,"btConvexShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btMinkowskiSumShape::btMinkowskiSumShape",2,"btConvexShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("new_btMinkowskiSumShape",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("new_btMinkowskiSumShape",2,SWIGTYPE_p_btConvexShape);
  }
  
  result = (btMinkowskiSumShape *)new btMinkowskiSumShape((btConvexShape const *)arg1,(btConvexShape const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMinkowskiSumShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMinkowskiSumShape_localGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btMinkowskiSumShape *arg1 = (btMinkowskiSumShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btMinkowskiSumShape::localGetSupportingVertexWithoutMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMinkowskiSumShape::localGetSupportingVertexWithoutMargin",1,"btMinkowskiSumShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMinkowskiSumShape::localGetSupportingVertexWithoutMargin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMinkowskiSumShape,0))){
    SWIG_fail_ptr("btMinkowskiSumShape_localGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btMinkowskiSumShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btMinkowskiSumShape_localGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btMinkowskiSumShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMinkowskiSumShape_batchedUnitVectorGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btMinkowskiSumShape *arg1 = (btMinkowskiSumShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btMinkowskiSumShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMinkowskiSumShape::batchedUnitVectorGetSupportingVertexWithoutMargin",1,"btMinkowskiSumShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btMinkowskiSumShape::batchedUnitVectorGetSupportingVertexWithoutMargin",2,"btVector3 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btMinkowskiSumShape::batchedUnitVectorGetSupportingVertexWithoutMargin",3,"btVector3 *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btMinkowskiSumShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMinkowskiSumShape,0))){
    SWIG_fail_ptr("btMinkowskiSumShape_batchedUnitVectorGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btMinkowskiSumShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btMinkowskiSumShape_batchedUnitVectorGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btMinkowskiSumShape_batchedUnitVectorGetSupportingVertexWithoutMargin",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btMinkowskiSumShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMinkowskiSumShape_calculateLocalInertia(lua_State* L) {
  int SWIG_arg = 0;
  btMinkowskiSumShape *arg1 = (btMinkowskiSumShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btMinkowskiSumShape::calculateLocalInertia",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMinkowskiSumShape::calculateLocalInertia",1,"btMinkowskiSumShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btMinkowskiSumShape::calculateLocalInertia",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btMinkowskiSumShape::calculateLocalInertia",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMinkowskiSumShape,0))){
    SWIG_fail_ptr("btMinkowskiSumShape_calculateLocalInertia",1,SWIGTYPE_p_btMinkowskiSumShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btMinkowskiSumShape_calculateLocalInertia",3,SWIGTYPE_p_btVector3);
  }
  
  ((btMinkowskiSumShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMinkowskiSumShape_setTransformA(lua_State* L) {
  int SWIG_arg = 0;
  btMinkowskiSumShape *arg1 = (btMinkowskiSumShape *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("btMinkowskiSumShape::setTransformA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMinkowskiSumShape::setTransformA",1,"btMinkowskiSumShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMinkowskiSumShape::setTransformA",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMinkowskiSumShape,0))){
    SWIG_fail_ptr("btMinkowskiSumShape_setTransformA",1,SWIGTYPE_p_btMinkowskiSumShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btMinkowskiSumShape_setTransformA",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setTransformA((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMinkowskiSumShape_setTransformB(lua_State* L) {
  int SWIG_arg = 0;
  btMinkowskiSumShape *arg1 = (btMinkowskiSumShape *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("btMinkowskiSumShape::setTransformB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMinkowskiSumShape::setTransformB",1,"btMinkowskiSumShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMinkowskiSumShape::setTransformB",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMinkowskiSumShape,0))){
    SWIG_fail_ptr("btMinkowskiSumShape_setTransformB",1,SWIGTYPE_p_btMinkowskiSumShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btMinkowskiSumShape_setTransformB",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setTransformB((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMinkowskiSumShape_getTransformA(lua_State* L) {
  int SWIG_arg = 0;
  btMinkowskiSumShape *arg1 = (btMinkowskiSumShape *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btMinkowskiSumShape::getTransformA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMinkowskiSumShape::getTransformA",1,"btMinkowskiSumShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMinkowskiSumShape,0))){
    SWIG_fail_ptr("btMinkowskiSumShape_getTransformA",1,SWIGTYPE_p_btMinkowskiSumShape);
  }
  
  result = (btTransform *) &((btMinkowskiSumShape const *)arg1)->getTransformA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMinkowskiSumShape_GetTransformB(lua_State* L) {
  int SWIG_arg = 0;
  btMinkowskiSumShape *arg1 = (btMinkowskiSumShape *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btMinkowskiSumShape::GetTransformB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMinkowskiSumShape::GetTransformB",1,"btMinkowskiSumShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMinkowskiSumShape,0))){
    SWIG_fail_ptr("btMinkowskiSumShape_GetTransformB",1,SWIGTYPE_p_btMinkowskiSumShape);
  }
  
  result = (btTransform *) &((btMinkowskiSumShape const *)arg1)->GetTransformB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMinkowskiSumShape_getMargin(lua_State* L) {
  int SWIG_arg = 0;
  btMinkowskiSumShape *arg1 = (btMinkowskiSumShape *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btMinkowskiSumShape::getMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMinkowskiSumShape::getMargin",1,"btMinkowskiSumShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMinkowskiSumShape,0))){
    SWIG_fail_ptr("btMinkowskiSumShape_getMargin",1,SWIGTYPE_p_btMinkowskiSumShape);
  }
  
  result = (btScalar)((btMinkowskiSumShape const *)arg1)->getMargin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMinkowskiSumShape_getShapeA(lua_State* L) {
  int SWIG_arg = 0;
  btMinkowskiSumShape *arg1 = (btMinkowskiSumShape *) 0 ;
  btConvexShape *result = 0 ;
  
  SWIG_check_num_args("btMinkowskiSumShape::getShapeA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMinkowskiSumShape::getShapeA",1,"btMinkowskiSumShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMinkowskiSumShape,0))){
    SWIG_fail_ptr("btMinkowskiSumShape_getShapeA",1,SWIGTYPE_p_btMinkowskiSumShape);
  }
  
  result = (btConvexShape *)((btMinkowskiSumShape const *)arg1)->getShapeA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMinkowskiSumShape_getShapeB(lua_State* L) {
  int SWIG_arg = 0;
  btMinkowskiSumShape *arg1 = (btMinkowskiSumShape *) 0 ;
  btConvexShape *result = 0 ;
  
  SWIG_check_num_args("btMinkowskiSumShape::getShapeB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMinkowskiSumShape::getShapeB",1,"btMinkowskiSumShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMinkowskiSumShape,0))){
    SWIG_fail_ptr("btMinkowskiSumShape_getShapeB",1,SWIGTYPE_p_btMinkowskiSumShape);
  }
  
  result = (btConvexShape *)((btMinkowskiSumShape const *)arg1)->getShapeB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMinkowskiSumShape_getName(lua_State* L) {
  int SWIG_arg = 0;
  btMinkowskiSumShape *arg1 = (btMinkowskiSumShape *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btMinkowskiSumShape::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMinkowskiSumShape::getName",1,"btMinkowskiSumShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMinkowskiSumShape,0))){
    SWIG_fail_ptr("btMinkowskiSumShape_getName",1,SWIGTYPE_p_btMinkowskiSumShape);
  }
  
  result = (char *)((btMinkowskiSumShape const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btMinkowskiSumShape(void *obj) {
btMinkowskiSumShape *arg1 = (btMinkowskiSumShape *) obj;
delete arg1;
}
static swig_lua_method swig_btMinkowskiSumShape_methods[] = {
    {"localGetSupportingVertexWithoutMargin", _wrap_btMinkowskiSumShape_localGetSupportingVertexWithoutMargin}, 
    {"batchedUnitVectorGetSupportingVertexWithoutMargin", _wrap_btMinkowskiSumShape_batchedUnitVectorGetSupportingVertexWithoutMargin}, 
    {"calculateLocalInertia", _wrap_btMinkowskiSumShape_calculateLocalInertia}, 
    {"setTransformA", _wrap_btMinkowskiSumShape_setTransformA}, 
    {"setTransformB", _wrap_btMinkowskiSumShape_setTransformB}, 
    {"getTransformA", _wrap_btMinkowskiSumShape_getTransformA}, 
    {"GetTransformB", _wrap_btMinkowskiSumShape_GetTransformB}, 
    {"getMargin", _wrap_btMinkowskiSumShape_getMargin}, 
    {"getShapeA", _wrap_btMinkowskiSumShape_getShapeA}, 
    {"getShapeB", _wrap_btMinkowskiSumShape_getShapeB}, 
    {"getName", _wrap_btMinkowskiSumShape_getName}, 
    {0,0}
};
static swig_lua_attribute swig_btMinkowskiSumShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btMinkowskiSumShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btMinkowskiSumShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btMinkowskiSumShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btMinkowskiSumShape_bases[] = {0,0};
static const char *swig_btMinkowskiSumShape_base_names[] = {"btConvexInternalShape *",0};
static swig_lua_class _wrap_class_btMinkowskiSumShape = { "btMinkowskiSumShape", &SWIGTYPE_p_btMinkowskiSumShape,_wrap_new_btMinkowskiSumShape, swig_delete_btMinkowskiSumShape, swig_btMinkowskiSumShape_methods, swig_btMinkowskiSumShape_attributes, { "btMinkowskiSumShape", swig_btMinkowskiSumShape_cls_methods, swig_btMinkowskiSumShape_cls_attributes, swig_btMinkowskiSumShape_cls_constants }, swig_btMinkowskiSumShape_bases, swig_btMinkowskiSumShape_base_names };

static int _wrap_new_btMultiSphereShape(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  int arg3 ;
  btMultiSphereShape *result = 0 ;
  
  SWIG_check_num_args("btMultiSphereShape::btMultiSphereShape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShape::btMultiSphereShape",1,"btVector3 const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btMultiSphereShape::btMultiSphereShape",2,"btScalar const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btMultiSphereShape::btMultiSphereShape",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btMultiSphereShape",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_btMultiSphereShape",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (btMultiSphereShape *)new btMultiSphereShape((btVector3 const *)arg1,(btScalar const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMultiSphereShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMultiSphereShape_calculateLocalInertia(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btMultiSphereShape::calculateLocalInertia",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShape::calculateLocalInertia",1,"btMultiSphereShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btMultiSphereShape::calculateLocalInertia",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btMultiSphereShape::calculateLocalInertia",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMultiSphereShape,0))){
    SWIG_fail_ptr("btMultiSphereShape_calculateLocalInertia",1,SWIGTYPE_p_btMultiSphereShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btMultiSphereShape_calculateLocalInertia",3,SWIGTYPE_p_btVector3);
  }
  
  ((btMultiSphereShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMultiSphereShape_localGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btMultiSphereShape::localGetSupportingVertexWithoutMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShape::localGetSupportingVertexWithoutMargin",1,"btMultiSphereShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMultiSphereShape::localGetSupportingVertexWithoutMargin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMultiSphereShape,0))){
    SWIG_fail_ptr("btMultiSphereShape_localGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btMultiSphereShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btMultiSphereShape_localGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btMultiSphereShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btMultiSphereShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShape::batchedUnitVectorGetSupportingVertexWithoutMargin",1,"btMultiSphereShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btMultiSphereShape::batchedUnitVectorGetSupportingVertexWithoutMargin",2,"btVector3 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btMultiSphereShape::batchedUnitVectorGetSupportingVertexWithoutMargin",3,"btVector3 *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btMultiSphereShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMultiSphereShape,0))){
    SWIG_fail_ptr("btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btMultiSphereShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btMultiSphereShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMultiSphereShape_getSphereCount(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btMultiSphereShape::getSphereCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShape::getSphereCount",1,"btMultiSphereShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMultiSphereShape,0))){
    SWIG_fail_ptr("btMultiSphereShape_getSphereCount",1,SWIGTYPE_p_btMultiSphereShape);
  }
  
  result = (int)((btMultiSphereShape const *)arg1)->getSphereCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMultiSphereShape_getSpherePosition(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int arg2 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btMultiSphereShape::getSpherePosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShape::getSpherePosition",1,"btMultiSphereShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btMultiSphereShape::getSpherePosition",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMultiSphereShape,0))){
    SWIG_fail_ptr("btMultiSphereShape_getSpherePosition",1,SWIGTYPE_p_btMultiSphereShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btVector3 *) &((btMultiSphereShape const *)arg1)->getSpherePosition(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMultiSphereShape_getSphereRadius(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int arg2 ;
  btScalar result;
  
  SWIG_check_num_args("btMultiSphereShape::getSphereRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShape::getSphereRadius",1,"btMultiSphereShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btMultiSphereShape::getSphereRadius",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMultiSphereShape,0))){
    SWIG_fail_ptr("btMultiSphereShape_getSphereRadius",1,SWIGTYPE_p_btMultiSphereShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btScalar)((btMultiSphereShape const *)arg1)->getSphereRadius(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMultiSphereShape_getName(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btMultiSphereShape::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShape::getName",1,"btMultiSphereShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMultiSphereShape,0))){
    SWIG_fail_ptr("btMultiSphereShape_getName",1,SWIGTYPE_p_btMultiSphereShape);
  }
  
  result = (char *)((btMultiSphereShape const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMultiSphereShape_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btMultiSphereShape::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShape::calculateSerializeBufferSize",1,"btMultiSphereShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMultiSphereShape,0))){
    SWIG_fail_ptr("btMultiSphereShape_calculateSerializeBufferSize",1,SWIGTYPE_p_btMultiSphereShape);
  }
  
  result = (int)((btMultiSphereShape const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMultiSphereShape_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btMultiSphereShape::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShape::serialize",1,"btMultiSphereShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btMultiSphereShape::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btMultiSphereShape::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMultiSphereShape,0))){
    SWIG_fail_ptr("btMultiSphereShape_serialize",1,SWIGTYPE_p_btMultiSphereShape);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btMultiSphereShape_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btMultiSphereShape_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  result = (char *)((btMultiSphereShape const *)arg1)->serialize(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btMultiSphereShape(void *obj) {
btMultiSphereShape *arg1 = (btMultiSphereShape *) obj;
delete arg1;
}
static swig_lua_method swig_btMultiSphereShape_methods[] = {
    {"calculateLocalInertia", _wrap_btMultiSphereShape_calculateLocalInertia}, 
    {"localGetSupportingVertexWithoutMargin", _wrap_btMultiSphereShape_localGetSupportingVertexWithoutMargin}, 
    {"batchedUnitVectorGetSupportingVertexWithoutMargin", _wrap_btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin}, 
    {"getSphereCount", _wrap_btMultiSphereShape_getSphereCount}, 
    {"getSpherePosition", _wrap_btMultiSphereShape_getSpherePosition}, 
    {"getSphereRadius", _wrap_btMultiSphereShape_getSphereRadius}, 
    {"getName", _wrap_btMultiSphereShape_getName}, 
    {"calculateSerializeBufferSize", _wrap_btMultiSphereShape_calculateSerializeBufferSize}, 
    {"serialize", _wrap_btMultiSphereShape_serialize}, 
    {0,0}
};
static swig_lua_attribute swig_btMultiSphereShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btMultiSphereShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btMultiSphereShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btMultiSphereShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btMultiSphereShape_bases[] = {0,0};
static const char *swig_btMultiSphereShape_base_names[] = {"btConvexInternalAabbCachingShape *",0};
static swig_lua_class _wrap_class_btMultiSphereShape = { "btMultiSphereShape", &SWIGTYPE_p_btMultiSphereShape,_wrap_new_btMultiSphereShape, swig_delete_btMultiSphereShape, swig_btMultiSphereShape_methods, swig_btMultiSphereShape_attributes, { "btMultiSphereShape", swig_btMultiSphereShape_cls_methods, swig_btMultiSphereShape_cls_attributes, swig_btMultiSphereShape_cls_constants }, swig_btMultiSphereShape_bases, swig_btMultiSphereShape_base_names };

static int _wrap_btPositionAndRadius_m_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btPositionAndRadius::m_pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPositionAndRadius::m_pos",1,"btPositionAndRadius *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPositionAndRadius::m_pos",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPositionAndRadius,0))){
    SWIG_fail_ptr("btPositionAndRadius_m_pos_set",1,SWIGTYPE_p_btPositionAndRadius);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btPositionAndRadius_m_pos_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_pos = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPositionAndRadius_m_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btPositionAndRadius::m_pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPositionAndRadius::m_pos",1,"btPositionAndRadius *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPositionAndRadius,0))){
    SWIG_fail_ptr("btPositionAndRadius_m_pos_get",1,SWIGTYPE_p_btPositionAndRadius);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_pos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPositionAndRadius_m_radius_set(lua_State* L) {
  int SWIG_arg = 0;
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btPositionAndRadius::m_radius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPositionAndRadius::m_radius",1,"btPositionAndRadius *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPositionAndRadius::m_radius",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPositionAndRadius,0))){
    SWIG_fail_ptr("btPositionAndRadius_m_radius_set",1,SWIGTYPE_p_btPositionAndRadius);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_radius = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPositionAndRadius_m_radius_get(lua_State* L) {
  int SWIG_arg = 0;
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  float result;
  
  SWIG_check_num_args("btPositionAndRadius::m_radius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPositionAndRadius::m_radius",1,"btPositionAndRadius *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPositionAndRadius,0))){
    SWIG_fail_ptr("btPositionAndRadius_m_radius_get",1,SWIGTYPE_p_btPositionAndRadius);
  }
  
  result = (float) ((arg1)->m_radius);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btPositionAndRadius(lua_State* L) {
  int SWIG_arg = 0;
  btPositionAndRadius *result = 0 ;
  
  SWIG_check_num_args("btPositionAndRadius::btPositionAndRadius",0,0)
  result = (btPositionAndRadius *)new btPositionAndRadius();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPositionAndRadius,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btPositionAndRadius(void *obj) {
btPositionAndRadius *arg1 = (btPositionAndRadius *) obj;
delete arg1;
}
static swig_lua_method swig_btPositionAndRadius_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btPositionAndRadius_attributes[] = {
    { "m_pos", _wrap_btPositionAndRadius_m_pos_get, _wrap_btPositionAndRadius_m_pos_set},
    { "m_radius", _wrap_btPositionAndRadius_m_radius_get, _wrap_btPositionAndRadius_m_radius_set},
    {0,0,0}
};
static swig_lua_attribute swig_btPositionAndRadius_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btPositionAndRadius_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btPositionAndRadius_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btPositionAndRadius_bases[] = {0};
static const char *swig_btPositionAndRadius_base_names[] = {0};
static swig_lua_class _wrap_class_btPositionAndRadius = { "btPositionAndRadius", &SWIGTYPE_p_btPositionAndRadius,_wrap_new_btPositionAndRadius, swig_delete_btPositionAndRadius, swig_btPositionAndRadius_methods, swig_btPositionAndRadius_attributes, { "btPositionAndRadius", swig_btPositionAndRadius_cls_methods, swig_btPositionAndRadius_cls_attributes, swig_btPositionAndRadius_cls_constants }, swig_btPositionAndRadius_bases, swig_btPositionAndRadius_base_names };

static int _wrap_btMultiSphereShapeData_m_convexInternalShapeData_set(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  btConvexInternalShapeData *arg2 = (btConvexInternalShapeData *) 0 ;
  
  SWIG_check_num_args("btMultiSphereShapeData::m_convexInternalShapeData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShapeData::m_convexInternalShapeData",1,"btMultiSphereShapeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btMultiSphereShapeData::m_convexInternalShapeData",2,"btConvexInternalShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMultiSphereShapeData,0))){
    SWIG_fail_ptr("btMultiSphereShapeData_m_convexInternalShapeData_set",1,SWIGTYPE_p_btMultiSphereShapeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConvexInternalShapeData,0))){
    SWIG_fail_ptr("btMultiSphereShapeData_m_convexInternalShapeData_set",2,SWIGTYPE_p_btConvexInternalShapeData);
  }
  
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMultiSphereShapeData_m_convexInternalShapeData_get(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  btConvexInternalShapeData *result = 0 ;
  
  SWIG_check_num_args("btMultiSphereShapeData::m_convexInternalShapeData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShapeData::m_convexInternalShapeData",1,"btMultiSphereShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMultiSphereShapeData,0))){
    SWIG_fail_ptr("btMultiSphereShapeData_m_convexInternalShapeData_get",1,SWIGTYPE_p_btMultiSphereShapeData);
  }
  
  result = (btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexInternalShapeData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMultiSphereShapeData_m_localPositionArrayPtr_set(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  btPositionAndRadius *arg2 = (btPositionAndRadius *) 0 ;
  
  SWIG_check_num_args("btMultiSphereShapeData::m_localPositionArrayPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShapeData::m_localPositionArrayPtr",1,"btMultiSphereShapeData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btMultiSphereShapeData::m_localPositionArrayPtr",2,"btPositionAndRadius *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMultiSphereShapeData,0))){
    SWIG_fail_ptr("btMultiSphereShapeData_m_localPositionArrayPtr_set",1,SWIGTYPE_p_btMultiSphereShapeData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btPositionAndRadius,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btMultiSphereShapeData_m_localPositionArrayPtr_set",2,SWIGTYPE_p_btPositionAndRadius);
  }
  
  if (arg1) (arg1)->m_localPositionArrayPtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMultiSphereShapeData_m_localPositionArrayPtr_get(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  btPositionAndRadius *result = 0 ;
  
  SWIG_check_num_args("btMultiSphereShapeData::m_localPositionArrayPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShapeData::m_localPositionArrayPtr",1,"btMultiSphereShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMultiSphereShapeData,0))){
    SWIG_fail_ptr("btMultiSphereShapeData_m_localPositionArrayPtr_get",1,SWIGTYPE_p_btMultiSphereShapeData);
  }
  
  result = (btPositionAndRadius *) ((arg1)->m_localPositionArrayPtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPositionAndRadius,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMultiSphereShapeData_m_localPositionArraySize_set(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btMultiSphereShapeData::m_localPositionArraySize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShapeData::m_localPositionArraySize",1,"btMultiSphereShapeData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btMultiSphereShapeData::m_localPositionArraySize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMultiSphereShapeData,0))){
    SWIG_fail_ptr("btMultiSphereShapeData_m_localPositionArraySize_set",1,SWIGTYPE_p_btMultiSphereShapeData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_localPositionArraySize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMultiSphereShapeData_m_localPositionArraySize_get(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  int result;
  
  SWIG_check_num_args("btMultiSphereShapeData::m_localPositionArraySize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShapeData::m_localPositionArraySize",1,"btMultiSphereShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMultiSphereShapeData,0))){
    SWIG_fail_ptr("btMultiSphereShapeData_m_localPositionArraySize_get",1,SWIGTYPE_p_btMultiSphereShapeData);
  }
  
  result = (int) ((arg1)->m_localPositionArraySize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMultiSphereShapeData_m_padding_set(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btMultiSphereShapeData::m_padding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShapeData::m_padding",1,"btMultiSphereShapeData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btMultiSphereShapeData::m_padding",2,"char [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMultiSphereShapeData,0))){
    SWIG_fail_ptr("btMultiSphereShapeData_m_padding_set",1,SWIGTYPE_p_btMultiSphereShapeData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMultiSphereShapeData_m_padding_get(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btMultiSphereShapeData::m_padding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMultiSphereShapeData::m_padding",1,"btMultiSphereShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMultiSphereShapeData,0))){
    SWIG_fail_ptr("btMultiSphereShapeData_m_padding_get",1,SWIGTYPE_p_btMultiSphereShapeData);
  }
  
  result = (char *)(char *) ((arg1)->m_padding);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btMultiSphereShapeData(lua_State* L) {
  int SWIG_arg = 0;
  btMultiSphereShapeData *result = 0 ;
  
  SWIG_check_num_args("btMultiSphereShapeData::btMultiSphereShapeData",0,0)
  result = (btMultiSphereShapeData *)new btMultiSphereShapeData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMultiSphereShapeData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btMultiSphereShapeData(void *obj) {
btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) obj;
delete arg1;
}
static swig_lua_method swig_btMultiSphereShapeData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btMultiSphereShapeData_attributes[] = {
    { "m_convexInternalShapeData", _wrap_btMultiSphereShapeData_m_convexInternalShapeData_get, _wrap_btMultiSphereShapeData_m_convexInternalShapeData_set},
    { "m_localPositionArrayPtr", _wrap_btMultiSphereShapeData_m_localPositionArrayPtr_get, _wrap_btMultiSphereShapeData_m_localPositionArrayPtr_set},
    { "m_localPositionArraySize", _wrap_btMultiSphereShapeData_m_localPositionArraySize_get, _wrap_btMultiSphereShapeData_m_localPositionArraySize_set},
    { "m_padding", _wrap_btMultiSphereShapeData_m_padding_get, _wrap_btMultiSphereShapeData_m_padding_set},
    {0,0,0}
};
static swig_lua_attribute swig_btMultiSphereShapeData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btMultiSphereShapeData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btMultiSphereShapeData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btMultiSphereShapeData_bases[] = {0};
static const char *swig_btMultiSphereShapeData_base_names[] = {0};
static swig_lua_class _wrap_class_btMultiSphereShapeData = { "btMultiSphereShapeData", &SWIGTYPE_p_btMultiSphereShapeData,_wrap_new_btMultiSphereShapeData, swig_delete_btMultiSphereShapeData, swig_btMultiSphereShapeData_methods, swig_btMultiSphereShapeData_attributes, { "btMultiSphereShapeData", swig_btMultiSphereShapeData_cls_methods, swig_btMultiSphereShapeData_cls_attributes, swig_btMultiSphereShapeData_cls_constants }, swig_btMultiSphereShapeData_bases, swig_btMultiSphereShapeData_base_names };

static int _wrap_new_btSphereShape(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btSphereShape *result = 0 ;
  
  SWIG_check_num_args("btSphereShape::btSphereShape",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btSphereShape::btSphereShape",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (btSphereShape *)new btSphereShape(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSphereShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereShape_localGetSupportingVertex(lua_State* L) {
  int SWIG_arg = 0;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btSphereShape::localGetSupportingVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereShape::localGetSupportingVertex",1,"btSphereShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSphereShape::localGetSupportingVertex",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereShape,0))){
    SWIG_fail_ptr("btSphereShape_localGetSupportingVertex",1,SWIGTYPE_p_btSphereShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSphereShape_localGetSupportingVertex",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btSphereShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereShape_localGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btSphereShape::localGetSupportingVertexWithoutMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereShape::localGetSupportingVertexWithoutMargin",1,"btSphereShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSphereShape::localGetSupportingVertexWithoutMargin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereShape,0))){
    SWIG_fail_ptr("btSphereShape_localGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btSphereShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSphereShape_localGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btSphereShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btSphereShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereShape::batchedUnitVectorGetSupportingVertexWithoutMargin",1,"btSphereShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSphereShape::batchedUnitVectorGetSupportingVertexWithoutMargin",2,"btVector3 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSphereShape::batchedUnitVectorGetSupportingVertexWithoutMargin",3,"btVector3 *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSphereShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereShape,0))){
    SWIG_fail_ptr("btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btSphereShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btSphereShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereShape_calculateLocalInertia(lua_State* L) {
  int SWIG_arg = 0;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btSphereShape::calculateLocalInertia",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereShape::calculateLocalInertia",1,"btSphereShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSphereShape::calculateLocalInertia",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSphereShape::calculateLocalInertia",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereShape,0))){
    SWIG_fail_ptr("btSphereShape_calculateLocalInertia",1,SWIGTYPE_p_btSphereShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSphereShape_calculateLocalInertia",3,SWIGTYPE_p_btVector3);
  }
  
  ((btSphereShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereShape_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btSphereShape::getAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereShape::getAabb",1,"btSphereShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSphereShape::getAabb",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSphereShape::getAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSphereShape::getAabb",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereShape,0))){
    SWIG_fail_ptr("btSphereShape_getAabb",1,SWIGTYPE_p_btSphereShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btSphereShape_getAabb",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSphereShape_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSphereShape_getAabb",4,SWIGTYPE_p_btVector3);
  }
  
  ((btSphereShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereShape_getRadius(lua_State* L) {
  int SWIG_arg = 0;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSphereShape::getRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereShape::getRadius",1,"btSphereShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereShape,0))){
    SWIG_fail_ptr("btSphereShape_getRadius",1,SWIGTYPE_p_btSphereShape);
  }
  
  result = (btScalar)((btSphereShape const *)arg1)->getRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereShape_setUnscaledRadius(lua_State* L) {
  int SWIG_arg = 0;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSphereShape::setUnscaledRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereShape::setUnscaledRadius",1,"btSphereShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSphereShape::setUnscaledRadius",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereShape,0))){
    SWIG_fail_ptr("btSphereShape_setUnscaledRadius",1,SWIGTYPE_p_btSphereShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setUnscaledRadius(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereShape_getName(lua_State* L) {
  int SWIG_arg = 0;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btSphereShape::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereShape::getName",1,"btSphereShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereShape,0))){
    SWIG_fail_ptr("btSphereShape_getName",1,SWIGTYPE_p_btSphereShape);
  }
  
  result = (char *)((btSphereShape const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereShape_setMargin(lua_State* L) {
  int SWIG_arg = 0;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSphereShape::setMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereShape::setMargin",1,"btSphereShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSphereShape::setMargin",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereShape,0))){
    SWIG_fail_ptr("btSphereShape_setMargin",1,SWIGTYPE_p_btSphereShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setMargin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereShape_getMargin(lua_State* L) {
  int SWIG_arg = 0;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSphereShape::getMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereShape::getMargin",1,"btSphereShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereShape,0))){
    SWIG_fail_ptr("btSphereShape_getMargin",1,SWIGTYPE_p_btSphereShape);
  }
  
  result = (btScalar)((btSphereShape const *)arg1)->getMargin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSphereShape(void *obj) {
btSphereShape *arg1 = (btSphereShape *) obj;
delete arg1;
}
static swig_lua_method swig_btSphereShape_methods[] = {
    {"localGetSupportingVertex", _wrap_btSphereShape_localGetSupportingVertex}, 
    {"localGetSupportingVertexWithoutMargin", _wrap_btSphereShape_localGetSupportingVertexWithoutMargin}, 
    {"batchedUnitVectorGetSupportingVertexWithoutMargin", _wrap_btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin}, 
    {"calculateLocalInertia", _wrap_btSphereShape_calculateLocalInertia}, 
    {"getAabb", _wrap_btSphereShape_getAabb}, 
    {"getRadius", _wrap_btSphereShape_getRadius}, 
    {"setUnscaledRadius", _wrap_btSphereShape_setUnscaledRadius}, 
    {"getName", _wrap_btSphereShape_getName}, 
    {"setMargin", _wrap_btSphereShape_setMargin}, 
    {"getMargin", _wrap_btSphereShape_getMargin}, 
    {0,0}
};
static swig_lua_attribute swig_btSphereShape_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btSphereShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSphereShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btSphereShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSphereShape_bases[] = {0,0};
static const char *swig_btSphereShape_base_names[] = {"btConvexInternalShape *",0};
static swig_lua_class _wrap_class_btSphereShape = { "btSphereShape", &SWIGTYPE_p_btSphereShape,_wrap_new_btSphereShape, swig_delete_btSphereShape, swig_btSphereShape_methods, swig_btSphereShape_attributes, { "btSphereShape", swig_btSphereShape_cls_methods, swig_btSphereShape_cls_attributes, swig_btSphereShape_cls_constants }, swig_btSphereShape_bases, swig_btSphereShape_base_names };

static int _wrap_new_btBU_Simplex1to4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btBU_Simplex1to4 *result = 0 ;
  
  SWIG_check_num_args("btBU_Simplex1to4::btBU_Simplex1to4",0,0)
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBU_Simplex1to4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBU_Simplex1to4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btBU_Simplex1to4 *result = 0 ;
  
  SWIG_check_num_args("btBU_Simplex1to4::btBU_Simplex1to4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btBU_Simplex1to4::btBU_Simplex1to4",1,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBU_Simplex1to4",1,SWIGTYPE_p_btVector3);
  }
  
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4((btVector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBU_Simplex1to4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBU_Simplex1to4__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btBU_Simplex1to4 *result = 0 ;
  
  SWIG_check_num_args("btBU_Simplex1to4::btBU_Simplex1to4",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btBU_Simplex1to4::btBU_Simplex1to4",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBU_Simplex1to4::btBU_Simplex1to4",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBU_Simplex1to4",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBU_Simplex1to4",2,SWIGTYPE_p_btVector3);
  }
  
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBU_Simplex1to4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBU_Simplex1to4__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBU_Simplex1to4 *result = 0 ;
  
  SWIG_check_num_args("btBU_Simplex1to4::btBU_Simplex1to4",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btBU_Simplex1to4::btBU_Simplex1to4",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBU_Simplex1to4::btBU_Simplex1to4",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBU_Simplex1to4::btBU_Simplex1to4",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBU_Simplex1to4",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBU_Simplex1to4",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBU_Simplex1to4",3,SWIGTYPE_p_btVector3);
  }
  
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBU_Simplex1to4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBU_Simplex1to4__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btBU_Simplex1to4 *result = 0 ;
  
  SWIG_check_num_args("btBU_Simplex1to4::btBU_Simplex1to4",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btBU_Simplex1to4::btBU_Simplex1to4",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBU_Simplex1to4::btBU_Simplex1to4",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBU_Simplex1to4::btBU_Simplex1to4",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btBU_Simplex1to4::btBU_Simplex1to4",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBU_Simplex1to4",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBU_Simplex1to4",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBU_Simplex1to4",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btBU_Simplex1to4",4,SWIGTYPE_p_btVector3);
  }
  
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBU_Simplex1to4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btBU_Simplex1to4(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btBU_Simplex1to4__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_btBU_Simplex1to4__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_btBU_Simplex1to4__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_btBU_Simplex1to4__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_btBU_Simplex1to4__SWIG_4(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btBU_Simplex1to4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btBU_Simplex1to4::btBU_Simplex1to4()\n"
    "    btBU_Simplex1to4::btBU_Simplex1to4(btVector3 const &)\n"
    "    btBU_Simplex1to4::btBU_Simplex1to4(btVector3 const &,btVector3 const &)\n"
    "    btBU_Simplex1to4::btBU_Simplex1to4(btVector3 const &,btVector3 const &,btVector3 const &)\n"
    "    btBU_Simplex1to4::btBU_Simplex1to4(btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btBU_Simplex1to4_reset(lua_State* L) {
  int SWIG_arg = 0;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  
  SWIG_check_num_args("btBU_Simplex1to4::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBU_Simplex1to4::reset",1,"btBU_Simplex1to4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBU_Simplex1to4,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_reset",1,SWIGTYPE_p_btBU_Simplex1to4);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBU_Simplex1to4_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btBU_Simplex1to4::getAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBU_Simplex1to4::getAabb",1,"btBU_Simplex1to4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBU_Simplex1to4::getAabb",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBU_Simplex1to4::getAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btBU_Simplex1to4::getAabb",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBU_Simplex1to4,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_getAabb",1,SWIGTYPE_p_btBU_Simplex1to4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_getAabb",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_getAabb",4,SWIGTYPE_p_btVector3);
  }
  
  ((btBU_Simplex1to4 const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBU_Simplex1to4_addVertex(lua_State* L) {
  int SWIG_arg = 0;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btBU_Simplex1to4::addVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBU_Simplex1to4::addVertex",1,"btBU_Simplex1to4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBU_Simplex1to4::addVertex",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBU_Simplex1to4,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_addVertex",1,SWIGTYPE_p_btBU_Simplex1to4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_addVertex",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->addVertex((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBU_Simplex1to4_getNumVertices(lua_State* L) {
  int SWIG_arg = 0;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int result;
  
  SWIG_check_num_args("btBU_Simplex1to4::getNumVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBU_Simplex1to4::getNumVertices",1,"btBU_Simplex1to4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBU_Simplex1to4,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_getNumVertices",1,SWIGTYPE_p_btBU_Simplex1to4);
  }
  
  result = (int)((btBU_Simplex1to4 const *)arg1)->getNumVertices();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBU_Simplex1to4_getNumEdges(lua_State* L) {
  int SWIG_arg = 0;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int result;
  
  SWIG_check_num_args("btBU_Simplex1to4::getNumEdges",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBU_Simplex1to4::getNumEdges",1,"btBU_Simplex1to4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBU_Simplex1to4,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_getNumEdges",1,SWIGTYPE_p_btBU_Simplex1to4);
  }
  
  result = (int)((btBU_Simplex1to4 const *)arg1)->getNumEdges();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBU_Simplex1to4_getEdge(lua_State* L) {
  int SWIG_arg = 0;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btBU_Simplex1to4::getEdge",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBU_Simplex1to4::getEdge",1,"btBU_Simplex1to4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btBU_Simplex1to4::getEdge",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBU_Simplex1to4::getEdge",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btBU_Simplex1to4::getEdge",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBU_Simplex1to4,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_getEdge",1,SWIGTYPE_p_btBU_Simplex1to4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_getEdge",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_getEdge",4,SWIGTYPE_p_btVector3);
  }
  
  ((btBU_Simplex1to4 const *)arg1)->getEdge(arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBU_Simplex1to4_getVertex(lua_State* L) {
  int SWIG_arg = 0;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btBU_Simplex1to4::getVertex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBU_Simplex1to4::getVertex",1,"btBU_Simplex1to4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btBU_Simplex1to4::getVertex",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBU_Simplex1to4::getVertex",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBU_Simplex1to4,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_getVertex",1,SWIGTYPE_p_btBU_Simplex1to4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_getVertex",3,SWIGTYPE_p_btVector3);
  }
  
  ((btBU_Simplex1to4 const *)arg1)->getVertex(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBU_Simplex1to4_getNumPlanes(lua_State* L) {
  int SWIG_arg = 0;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int result;
  
  SWIG_check_num_args("btBU_Simplex1to4::getNumPlanes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBU_Simplex1to4::getNumPlanes",1,"btBU_Simplex1to4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBU_Simplex1to4,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_getNumPlanes",1,SWIGTYPE_p_btBU_Simplex1to4);
  }
  
  result = (int)((btBU_Simplex1to4 const *)arg1)->getNumPlanes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBU_Simplex1to4_getPlane(lua_State* L) {
  int SWIG_arg = 0;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btBU_Simplex1to4::getPlane",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBU_Simplex1to4::getPlane",1,"btBU_Simplex1to4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBU_Simplex1to4::getPlane",2,"btVector3 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btBU_Simplex1to4::getPlane",3,"btVector3 &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btBU_Simplex1to4::getPlane",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBU_Simplex1to4,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_getPlane",1,SWIGTYPE_p_btBU_Simplex1to4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_getPlane",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_getPlane",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btBU_Simplex1to4 const *)arg1)->getPlane(*arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBU_Simplex1to4_getIndex(lua_State* L) {
  int SWIG_arg = 0;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("btBU_Simplex1to4::getIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBU_Simplex1to4::getIndex",1,"btBU_Simplex1to4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btBU_Simplex1to4::getIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBU_Simplex1to4,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_getIndex",1,SWIGTYPE_p_btBU_Simplex1to4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)((btBU_Simplex1to4 const *)arg1)->getIndex(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBU_Simplex1to4_isInside(lua_State* L) {
  int SWIG_arg = 0;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  SWIG_check_num_args("btBU_Simplex1to4::isInside",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBU_Simplex1to4::isInside",1,"btBU_Simplex1to4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btBU_Simplex1to4::isInside",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btBU_Simplex1to4::isInside",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBU_Simplex1to4,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_isInside",1,SWIGTYPE_p_btBU_Simplex1to4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_isInside",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  result = (bool)((btBU_Simplex1to4 const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btBU_Simplex1to4_getName(lua_State* L) {
  int SWIG_arg = 0;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btBU_Simplex1to4::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btBU_Simplex1to4::getName",1,"btBU_Simplex1to4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBU_Simplex1to4,0))){
    SWIG_fail_ptr("btBU_Simplex1to4_getName",1,SWIGTYPE_p_btBU_Simplex1to4);
  }
  
  result = (char *)((btBU_Simplex1to4 const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btBU_Simplex1to4(void *obj) {
btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) obj;
delete arg1;
}
static swig_lua_method swig_btBU_Simplex1to4_methods[] = {
    {"reset", _wrap_btBU_Simplex1to4_reset}, 
    {"getAabb", _wrap_btBU_Simplex1to4_getAabb}, 
    {"addVertex", _wrap_btBU_Simplex1to4_addVertex}, 
    {"getNumVertices", _wrap_btBU_Simplex1to4_getNumVertices}, 
    {"getNumEdges", _wrap_btBU_Simplex1to4_getNumEdges}, 
    {"getEdge", _wrap_btBU_Simplex1to4_getEdge}, 
    {"getVertex", _wrap_btBU_Simplex1to4_getVertex}, 
    {"getNumPlanes", _wrap_btBU_Simplex1to4_getNumPlanes}, 
    {"getPlane", _wrap_btBU_Simplex1to4_getPlane}, 
    {"getIndex", _wrap_btBU_Simplex1to4_getIndex}, 
    {"isInside", _wrap_btBU_Simplex1to4_isInside}, 
    {"getName", _wrap_btBU_Simplex1to4_getName}, 
    {0,0}
};
static swig_lua_attribute swig_btBU_Simplex1to4_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btBU_Simplex1to4_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btBU_Simplex1to4_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btBU_Simplex1to4_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btBU_Simplex1to4_bases[] = {0,0};
static const char *swig_btBU_Simplex1to4_base_names[] = {"btPolyhedralConvexAabbCachingShape *",0};
static swig_lua_class _wrap_class_btBU_Simplex1to4 = { "btBU_Simplex1to4", &SWIGTYPE_p_btBU_Simplex1to4,_wrap_new_btBU_Simplex1to4, swig_delete_btBU_Simplex1to4, swig_btBU_Simplex1to4_methods, swig_btBU_Simplex1to4_attributes, { "btBU_Simplex1to4", swig_btBU_Simplex1to4_cls_methods, swig_btBU_Simplex1to4_cls_attributes, swig_btBU_Simplex1to4_cls_constants }, swig_btBU_Simplex1to4_bases, swig_btBU_Simplex1to4_base_names };

static int _wrap_btTriangle_m_vertex0_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangle *arg1 = (btTriangle *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btTriangle::m_vertex0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangle::m_vertex0",1,"btTriangle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangle::m_vertex0",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangle,0))){
    SWIG_fail_ptr("btTriangle_m_vertex0_set",1,SWIGTYPE_p_btTriangle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangle_m_vertex0_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_vertex0 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangle_m_vertex0_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangle *arg1 = (btTriangle *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTriangle::m_vertex0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangle::m_vertex0",1,"btTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangle,0))){
    SWIG_fail_ptr("btTriangle_m_vertex0_get",1,SWIGTYPE_p_btTriangle);
  }
  
  result = (btVector3 *)& ((arg1)->m_vertex0);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangle_m_vertex1_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangle *arg1 = (btTriangle *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btTriangle::m_vertex1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangle::m_vertex1",1,"btTriangle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangle::m_vertex1",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangle,0))){
    SWIG_fail_ptr("btTriangle_m_vertex1_set",1,SWIGTYPE_p_btTriangle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangle_m_vertex1_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_vertex1 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangle_m_vertex1_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangle *arg1 = (btTriangle *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTriangle::m_vertex1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangle::m_vertex1",1,"btTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangle,0))){
    SWIG_fail_ptr("btTriangle_m_vertex1_get",1,SWIGTYPE_p_btTriangle);
  }
  
  result = (btVector3 *)& ((arg1)->m_vertex1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangle_m_vertex2_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangle *arg1 = (btTriangle *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btTriangle::m_vertex2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangle::m_vertex2",1,"btTriangle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangle::m_vertex2",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangle,0))){
    SWIG_fail_ptr("btTriangle_m_vertex2_set",1,SWIGTYPE_p_btTriangle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangle_m_vertex2_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_vertex2 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangle_m_vertex2_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangle *arg1 = (btTriangle *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTriangle::m_vertex2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangle::m_vertex2",1,"btTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangle,0))){
    SWIG_fail_ptr("btTriangle_m_vertex2_get",1,SWIGTYPE_p_btTriangle);
  }
  
  result = (btVector3 *)& ((arg1)->m_vertex2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangle_m_partId_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangle *arg1 = (btTriangle *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTriangle::m_partId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangle::m_partId",1,"btTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangle::m_partId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangle,0))){
    SWIG_fail_ptr("btTriangle_m_partId_set",1,SWIGTYPE_p_btTriangle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_partId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangle_m_partId_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangle *arg1 = (btTriangle *) 0 ;
  int result;
  
  SWIG_check_num_args("btTriangle::m_partId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangle::m_partId",1,"btTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangle,0))){
    SWIG_fail_ptr("btTriangle_m_partId_get",1,SWIGTYPE_p_btTriangle);
  }
  
  result = (int) ((arg1)->m_partId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangle_m_triangleIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangle *arg1 = (btTriangle *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTriangle::m_triangleIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangle::m_triangleIndex",1,"btTriangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangle::m_triangleIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangle,0))){
    SWIG_fail_ptr("btTriangle_m_triangleIndex_set",1,SWIGTYPE_p_btTriangle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_triangleIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangle_m_triangleIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangle *arg1 = (btTriangle *) 0 ;
  int result;
  
  SWIG_check_num_args("btTriangle::m_triangleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangle::m_triangleIndex",1,"btTriangle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangle,0))){
    SWIG_fail_ptr("btTriangle_m_triangleIndex_get",1,SWIGTYPE_p_btTriangle);
  }
  
  result = (int) ((arg1)->m_triangleIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTriangle(lua_State* L) {
  int SWIG_arg = 0;
  btTriangle *result = 0 ;
  
  SWIG_check_num_args("btTriangle::btTriangle",0,0)
  result = (btTriangle *)new btTriangle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTriangle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTriangle(void *obj) {
btTriangle *arg1 = (btTriangle *) obj;
delete arg1;
}
static swig_lua_method swig_btTriangle_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btTriangle_attributes[] = {
    { "m_vertex0", _wrap_btTriangle_m_vertex0_get, _wrap_btTriangle_m_vertex0_set},
    { "m_vertex1", _wrap_btTriangle_m_vertex1_get, _wrap_btTriangle_m_vertex1_set},
    { "m_vertex2", _wrap_btTriangle_m_vertex2_get, _wrap_btTriangle_m_vertex2_set},
    { "m_partId", _wrap_btTriangle_m_partId_get, _wrap_btTriangle_m_partId_set},
    { "m_triangleIndex", _wrap_btTriangle_m_triangleIndex_get, _wrap_btTriangle_m_triangleIndex_set},
    {0,0,0}
};
static swig_lua_attribute swig_btTriangle_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTriangle_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTriangle_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTriangle_bases[] = {0};
static const char *swig_btTriangle_base_names[] = {0};
static swig_lua_class _wrap_class_btTriangle = { "btTriangle", &SWIGTYPE_p_btTriangle,_wrap_new_btTriangle, swig_delete_btTriangle, swig_btTriangle_methods, swig_btTriangle_attributes, { "btTriangle", swig_btTriangle_cls_methods, swig_btTriangle_cls_attributes, swig_btTriangle_cls_constants }, swig_btTriangle_bases, swig_btTriangle_base_names };

static int _wrap_btTriangleBuffer_processTriangle(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleBuffer *arg1 = (btTriangleBuffer *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("btTriangleBuffer::processTriangle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleBuffer::processTriangle",1,"btTriangleBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleBuffer::processTriangle",2,"btVector3 *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btTriangleBuffer::processTriangle",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btTriangleBuffer::processTriangle",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleBuffer,0))){
    SWIG_fail_ptr("btTriangleBuffer_processTriangle",1,SWIGTYPE_p_btTriangleBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleBuffer_processTriangle",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->processTriangle(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleBuffer_getNumTriangles(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleBuffer *arg1 = (btTriangleBuffer *) 0 ;
  int result;
  
  SWIG_check_num_args("btTriangleBuffer::getNumTriangles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleBuffer::getNumTriangles",1,"btTriangleBuffer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleBuffer,0))){
    SWIG_fail_ptr("btTriangleBuffer_getNumTriangles",1,SWIGTYPE_p_btTriangleBuffer);
  }
  
  result = (int)((btTriangleBuffer const *)arg1)->getNumTriangles();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleBuffer_getTriangle(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleBuffer *arg1 = (btTriangleBuffer *) 0 ;
  int arg2 ;
  btTriangle *result = 0 ;
  
  SWIG_check_num_args("btTriangleBuffer::getTriangle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleBuffer::getTriangle",1,"btTriangleBuffer const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleBuffer::getTriangle",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleBuffer,0))){
    SWIG_fail_ptr("btTriangleBuffer_getTriangle",1,SWIGTYPE_p_btTriangleBuffer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btTriangle *) &((btTriangleBuffer const *)arg1)->getTriangle(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTriangle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleBuffer_clearBuffer(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleBuffer *arg1 = (btTriangleBuffer *) 0 ;
  
  SWIG_check_num_args("btTriangleBuffer::clearBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleBuffer::clearBuffer",1,"btTriangleBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleBuffer,0))){
    SWIG_fail_ptr("btTriangleBuffer_clearBuffer",1,SWIGTYPE_p_btTriangleBuffer);
  }
  
  (arg1)->clearBuffer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTriangleBuffer(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleBuffer *result = 0 ;
  
  SWIG_check_num_args("btTriangleBuffer::btTriangleBuffer",0,0)
  result = (btTriangleBuffer *)new btTriangleBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTriangleBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTriangleBuffer(void *obj) {
btTriangleBuffer *arg1 = (btTriangleBuffer *) obj;
delete arg1;
}
static swig_lua_method swig_btTriangleBuffer_methods[] = {
    {"processTriangle", _wrap_btTriangleBuffer_processTriangle}, 
    {"getNumTriangles", _wrap_btTriangleBuffer_getNumTriangles}, 
    {"getTriangle", _wrap_btTriangleBuffer_getTriangle}, 
    {"clearBuffer", _wrap_btTriangleBuffer_clearBuffer}, 
    {0,0}
};
static swig_lua_attribute swig_btTriangleBuffer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btTriangleBuffer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTriangleBuffer_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTriangleBuffer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTriangleBuffer_bases[] = {0,0};
static const char *swig_btTriangleBuffer_base_names[] = {"btTriangleCallback *",0};
static swig_lua_class _wrap_class_btTriangleBuffer = { "btTriangleBuffer", &SWIGTYPE_p_btTriangleBuffer,_wrap_new_btTriangleBuffer, swig_delete_btTriangleBuffer, swig_btTriangleBuffer_methods, swig_btTriangleBuffer_attributes, { "btTriangleBuffer", swig_btTriangleBuffer_cls_methods, swig_btTriangleBuffer_cls_attributes, swig_btTriangleBuffer_cls_constants }, swig_btTriangleBuffer_bases, swig_btTriangleBuffer_base_names };

static int _wrap_btIndexedMesh_m_numTriangles_set(lua_State* L) {
  int SWIG_arg = 0;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btIndexedMesh::m_numTriangles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIndexedMesh::m_numTriangles",1,"btIndexedMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btIndexedMesh::m_numTriangles",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btIndexedMesh_m_numTriangles_set",1,SWIGTYPE_p_btIndexedMesh);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numTriangles = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIndexedMesh_m_numTriangles_get(lua_State* L) {
  int SWIG_arg = 0;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int result;
  
  SWIG_check_num_args("btIndexedMesh::m_numTriangles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIndexedMesh::m_numTriangles",1,"btIndexedMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btIndexedMesh_m_numTriangles_get",1,SWIGTYPE_p_btIndexedMesh);
  }
  
  result = (int) ((arg1)->m_numTriangles);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIndexedMesh_m_triangleIndexBase_set(lua_State* L) {
  int SWIG_arg = 0;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  SWIG_check_num_args("btIndexedMesh::m_triangleIndexBase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIndexedMesh::m_triangleIndexBase",1,"btIndexedMesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btIndexedMesh::m_triangleIndexBase",2,"unsigned char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btIndexedMesh_m_triangleIndexBase_set",1,SWIGTYPE_p_btIndexedMesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btIndexedMesh_m_triangleIndexBase_set",2,SWIGTYPE_p_unsigned_char);
  }
  
  if (arg1) (arg1)->m_triangleIndexBase = (unsigned char const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIndexedMesh_m_triangleIndexBase_get(lua_State* L) {
  int SWIG_arg = 0;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("btIndexedMesh::m_triangleIndexBase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIndexedMesh::m_triangleIndexBase",1,"btIndexedMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btIndexedMesh_m_triangleIndexBase_get",1,SWIGTYPE_p_btIndexedMesh);
  }
  
  result = (unsigned char *) ((arg1)->m_triangleIndexBase);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIndexedMesh_m_triangleIndexStride_set(lua_State* L) {
  int SWIG_arg = 0;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btIndexedMesh::m_triangleIndexStride",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIndexedMesh::m_triangleIndexStride",1,"btIndexedMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btIndexedMesh::m_triangleIndexStride",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btIndexedMesh_m_triangleIndexStride_set",1,SWIGTYPE_p_btIndexedMesh);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_triangleIndexStride = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIndexedMesh_m_triangleIndexStride_get(lua_State* L) {
  int SWIG_arg = 0;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int result;
  
  SWIG_check_num_args("btIndexedMesh::m_triangleIndexStride",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIndexedMesh::m_triangleIndexStride",1,"btIndexedMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btIndexedMesh_m_triangleIndexStride_get",1,SWIGTYPE_p_btIndexedMesh);
  }
  
  result = (int) ((arg1)->m_triangleIndexStride);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIndexedMesh_m_numVertices_set(lua_State* L) {
  int SWIG_arg = 0;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btIndexedMesh::m_numVertices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIndexedMesh::m_numVertices",1,"btIndexedMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btIndexedMesh::m_numVertices",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btIndexedMesh_m_numVertices_set",1,SWIGTYPE_p_btIndexedMesh);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numVertices = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIndexedMesh_m_numVertices_get(lua_State* L) {
  int SWIG_arg = 0;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int result;
  
  SWIG_check_num_args("btIndexedMesh::m_numVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIndexedMesh::m_numVertices",1,"btIndexedMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btIndexedMesh_m_numVertices_get",1,SWIGTYPE_p_btIndexedMesh);
  }
  
  result = (int) ((arg1)->m_numVertices);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIndexedMesh_m_vertexBase_set(lua_State* L) {
  int SWIG_arg = 0;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  SWIG_check_num_args("btIndexedMesh::m_vertexBase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIndexedMesh::m_vertexBase",1,"btIndexedMesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btIndexedMesh::m_vertexBase",2,"unsigned char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btIndexedMesh_m_vertexBase_set",1,SWIGTYPE_p_btIndexedMesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btIndexedMesh_m_vertexBase_set",2,SWIGTYPE_p_unsigned_char);
  }
  
  if (arg1) (arg1)->m_vertexBase = (unsigned char const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIndexedMesh_m_vertexBase_get(lua_State* L) {
  int SWIG_arg = 0;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("btIndexedMesh::m_vertexBase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIndexedMesh::m_vertexBase",1,"btIndexedMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btIndexedMesh_m_vertexBase_get",1,SWIGTYPE_p_btIndexedMesh);
  }
  
  result = (unsigned char *) ((arg1)->m_vertexBase);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIndexedMesh_m_vertexStride_set(lua_State* L) {
  int SWIG_arg = 0;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btIndexedMesh::m_vertexStride",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIndexedMesh::m_vertexStride",1,"btIndexedMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btIndexedMesh::m_vertexStride",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btIndexedMesh_m_vertexStride_set",1,SWIGTYPE_p_btIndexedMesh);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_vertexStride = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIndexedMesh_m_vertexStride_get(lua_State* L) {
  int SWIG_arg = 0;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int result;
  
  SWIG_check_num_args("btIndexedMesh::m_vertexStride",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIndexedMesh::m_vertexStride",1,"btIndexedMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btIndexedMesh_m_vertexStride_get",1,SWIGTYPE_p_btIndexedMesh);
  }
  
  result = (int) ((arg1)->m_vertexStride);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIndexedMesh_m_indexType_set(lua_State* L) {
  int SWIG_arg = 0;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  PHY_ScalarType arg2 ;
  
  SWIG_check_num_args("btIndexedMesh::m_indexType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIndexedMesh::m_indexType",1,"btIndexedMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btIndexedMesh::m_indexType",2,"PHY_ScalarType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btIndexedMesh_m_indexType_set",1,SWIGTYPE_p_btIndexedMesh);
  }
  
  arg2 = (PHY_ScalarType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_indexType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIndexedMesh_m_indexType_get(lua_State* L) {
  int SWIG_arg = 0;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  PHY_ScalarType result;
  
  SWIG_check_num_args("btIndexedMesh::m_indexType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIndexedMesh::m_indexType",1,"btIndexedMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btIndexedMesh_m_indexType_get",1,SWIGTYPE_p_btIndexedMesh);
  }
  
  result = (PHY_ScalarType) ((arg1)->m_indexType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIndexedMesh_m_vertexType_set(lua_State* L) {
  int SWIG_arg = 0;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  PHY_ScalarType arg2 ;
  
  SWIG_check_num_args("btIndexedMesh::m_vertexType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIndexedMesh::m_vertexType",1,"btIndexedMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btIndexedMesh::m_vertexType",2,"PHY_ScalarType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btIndexedMesh_m_vertexType_set",1,SWIGTYPE_p_btIndexedMesh);
  }
  
  arg2 = (PHY_ScalarType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_vertexType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btIndexedMesh_m_vertexType_get(lua_State* L) {
  int SWIG_arg = 0;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  PHY_ScalarType result;
  
  SWIG_check_num_args("btIndexedMesh::m_vertexType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btIndexedMesh::m_vertexType",1,"btIndexedMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btIndexedMesh_m_vertexType_get",1,SWIGTYPE_p_btIndexedMesh);
  }
  
  result = (PHY_ScalarType) ((arg1)->m_vertexType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btIndexedMesh(lua_State* L) {
  int SWIG_arg = 0;
  btIndexedMesh *result = 0 ;
  
  SWIG_check_num_args("btIndexedMesh::btIndexedMesh",0,0)
  result = (btIndexedMesh *)new btIndexedMesh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btIndexedMesh,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btIndexedMesh(void *obj) {
btIndexedMesh *arg1 = (btIndexedMesh *) obj;
delete arg1;
}
static swig_lua_method swig_btIndexedMesh_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btIndexedMesh_attributes[] = {
    { "m_numTriangles", _wrap_btIndexedMesh_m_numTriangles_get, _wrap_btIndexedMesh_m_numTriangles_set},
    { "m_triangleIndexBase", _wrap_btIndexedMesh_m_triangleIndexBase_get, _wrap_btIndexedMesh_m_triangleIndexBase_set},
    { "m_triangleIndexStride", _wrap_btIndexedMesh_m_triangleIndexStride_get, _wrap_btIndexedMesh_m_triangleIndexStride_set},
    { "m_numVertices", _wrap_btIndexedMesh_m_numVertices_get, _wrap_btIndexedMesh_m_numVertices_set},
    { "m_vertexBase", _wrap_btIndexedMesh_m_vertexBase_get, _wrap_btIndexedMesh_m_vertexBase_set},
    { "m_vertexStride", _wrap_btIndexedMesh_m_vertexStride_get, _wrap_btIndexedMesh_m_vertexStride_set},
    { "m_indexType", _wrap_btIndexedMesh_m_indexType_get, _wrap_btIndexedMesh_m_indexType_set},
    { "m_vertexType", _wrap_btIndexedMesh_m_vertexType_get, _wrap_btIndexedMesh_m_vertexType_set},
    {0,0,0}
};
static swig_lua_attribute swig_btIndexedMesh_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btIndexedMesh_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btIndexedMesh_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btIndexedMesh_bases[] = {0};
static const char *swig_btIndexedMesh_base_names[] = {0};
static swig_lua_class _wrap_class_btIndexedMesh = { "btIndexedMesh", &SWIGTYPE_p_btIndexedMesh,_wrap_new_btIndexedMesh, swig_delete_btIndexedMesh, swig_btIndexedMesh_methods, swig_btIndexedMesh_attributes, { "btIndexedMesh", swig_btIndexedMesh_cls_methods, swig_btIndexedMesh_cls_attributes, swig_btIndexedMesh_cls_constants }, swig_btIndexedMesh_bases, swig_btIndexedMesh_base_names };

static int _wrap_new_btTriangleIndexVertexArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleIndexVertexArray *result = 0 ;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::btTriangleIndexVertexArray",0,0)
  result = (btTriangleIndexVertexArray *)new btTriangleIndexVertexArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTriangleIndexVertexArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTriangleIndexVertexArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  btScalar *arg5 = (btScalar *) 0 ;
  int arg6 ;
  btTriangleIndexVertexArray *result = 0 ;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::btTriangleIndexVertexArray",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btTriangleIndexVertexArray::btTriangleIndexVertexArray",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleIndexVertexArray::btTriangleIndexVertexArray",2,"int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btTriangleIndexVertexArray::btTriangleIndexVertexArray",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btTriangleIndexVertexArray::btTriangleIndexVertexArray",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btTriangleIndexVertexArray::btTriangleIndexVertexArray",5,"btScalar *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btTriangleIndexVertexArray::btTriangleIndexVertexArray",6,"int");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("new_btTriangleIndexVertexArray",2,SWIGTYPE_p_int);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_btTriangleIndexVertexArray",5,SWIGTYPE_p_float);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (btTriangleIndexVertexArray *)new btTriangleIndexVertexArray(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTriangleIndexVertexArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTriangleIndexVertexArray(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btTriangleIndexVertexArray__SWIG_0(L);
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_btTriangleIndexVertexArray__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btTriangleIndexVertexArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTriangleIndexVertexArray::btTriangleIndexVertexArray()\n"
    "    btTriangleIndexVertexArray::btTriangleIndexVertexArray(int,int *,int,int,btScalar *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_btTriangleIndexVertexArray_addIndexedMesh__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btIndexedMesh *arg2 = 0 ;
  PHY_ScalarType arg3 ;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::addIndexedMesh",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleIndexVertexArray::addIndexedMesh",1,"btTriangleIndexVertexArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTriangleIndexVertexArray::addIndexedMesh",2,"btIndexedMesh const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btTriangleIndexVertexArray::addIndexedMesh",3,"PHY_ScalarType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleIndexVertexArray,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_addIndexedMesh",1,SWIGTYPE_p_btTriangleIndexVertexArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_addIndexedMesh",2,SWIGTYPE_p_btIndexedMesh);
  }
  
  arg3 = (PHY_ScalarType)(int)lua_tonumber(L, 3);
  (arg1)->addIndexedMesh((btIndexedMesh const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleIndexVertexArray_addIndexedMesh__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btIndexedMesh *arg2 = 0 ;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::addIndexedMesh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleIndexVertexArray::addIndexedMesh",1,"btTriangleIndexVertexArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTriangleIndexVertexArray::addIndexedMesh",2,"btIndexedMesh const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleIndexVertexArray,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_addIndexedMesh",1,SWIGTYPE_p_btTriangleIndexVertexArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btIndexedMesh,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_addIndexedMesh",2,SWIGTYPE_p_btIndexedMesh);
  }
  
  (arg1)->addIndexedMesh((btIndexedMesh const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleIndexVertexArray_addIndexedMesh(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTriangleIndexVertexArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btIndexedMesh, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btTriangleIndexVertexArray_addIndexedMesh__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTriangleIndexVertexArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btIndexedMesh, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btTriangleIndexVertexArray_addIndexedMesh__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btTriangleIndexVertexArray_addIndexedMesh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTriangleIndexVertexArray::addIndexedMesh(btIndexedMesh const &,PHY_ScalarType)\n"
    "    btTriangleIndexVertexArray::addIndexedMesh(btIndexedMesh const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  int arg10 ;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::getLockedVertexIndexBase",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",1,"btTriangleIndexVertexArray *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",2,"unsigned char **");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",3,"int &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",4,"PHY_ScalarType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",5,"int &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",6,"unsigned char **");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",7,"int &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",8,"int &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",9,"PHY_ScalarType &");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleIndexVertexArray,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",1,SWIGTYPE_p_btTriangleIndexVertexArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",2,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_PHY_ScalarType,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",4,SWIGTYPE_p_PHY_ScalarType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",5,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",6,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",7,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",8,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_PHY_ScalarType,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",9,SWIGTYPE_p_PHY_ScalarType);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  (arg1)->getLockedVertexIndexBase(arg2,*arg3,*arg4,*arg5,arg6,*arg7,*arg8,*arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::getLockedVertexIndexBase",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",1,"btTriangleIndexVertexArray *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",2,"unsigned char **");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",3,"int &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",4,"PHY_ScalarType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",5,"int &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",6,"unsigned char **");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",7,"int &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",8,"int &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedVertexIndexBase",9,"PHY_ScalarType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleIndexVertexArray,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",1,SWIGTYPE_p_btTriangleIndexVertexArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",2,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_PHY_ScalarType,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",4,SWIGTYPE_p_PHY_ScalarType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",5,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",6,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",7,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",8,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_PHY_ScalarType,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedVertexIndexBase",9,SWIGTYPE_p_PHY_ScalarType);
  }
  
  (arg1)->getLockedVertexIndexBase(arg2,*arg3,*arg4,*arg5,arg6,*arg7,*arg8,*arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleIndexVertexArray_getLockedVertexIndexBase(lua_State* L) {
  int argc;
  int argv[11]={
    1,2,3,4,5,6,7,8,9,10,11
  };
  
  argc = lua_gettop(L);
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTriangleIndexVertexArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_PHY_ScalarType, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_PHY_ScalarType, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      return _wrap_btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_1(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTriangleIndexVertexArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_PHY_ScalarType, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_PHY_ScalarType, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_0(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btTriangleIndexVertexArray_getLockedVertexIndexBase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTriangleIndexVertexArray::getLockedVertexIndexBase(unsigned char **,int &,PHY_ScalarType &,int &,unsigned char **,int &,int &,PHY_ScalarType &,int)\n"
    "    btTriangleIndexVertexArray::getLockedVertexIndexBase(unsigned char **,int &,PHY_ScalarType &,int &,unsigned char **,int &,int &,PHY_ScalarType &)\n");
  lua_error(L);return 0;
}


static int _wrap_btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  int arg10 ;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",1,"btTriangleIndexVertexArray const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",2,"unsigned char const **");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",3,"int &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",4,"PHY_ScalarType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",5,"int &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",6,"unsigned char const **");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",7,"int &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",8,"int &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",9,"PHY_ScalarType &");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleIndexVertexArray,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",1,SWIGTYPE_p_btTriangleIndexVertexArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",2,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_PHY_ScalarType,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",4,SWIGTYPE_p_PHY_ScalarType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",5,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",6,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",7,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",8,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_PHY_ScalarType,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",9,SWIGTYPE_p_PHY_ScalarType);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  ((btTriangleIndexVertexArray const *)arg1)->getLockedReadOnlyVertexIndexBase((unsigned char const **)arg2,*arg3,*arg4,*arg5,(unsigned char const **)arg6,*arg7,*arg8,*arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",1,"btTriangleIndexVertexArray const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",2,"unsigned char const **");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",3,"int &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",4,"PHY_ScalarType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",5,"int &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",6,"unsigned char const **");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",7,"int &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",8,"int &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase",9,"PHY_ScalarType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleIndexVertexArray,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",1,SWIGTYPE_p_btTriangleIndexVertexArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",2,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_PHY_ScalarType,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",4,SWIGTYPE_p_PHY_ScalarType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",5,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_unsigned_char,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",6,SWIGTYPE_p_p_unsigned_char);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",7,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",8,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_PHY_ScalarType,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase",9,SWIGTYPE_p_PHY_ScalarType);
  }
  
  ((btTriangleIndexVertexArray const *)arg1)->getLockedReadOnlyVertexIndexBase((unsigned char const **)arg2,*arg3,*arg4,*arg5,(unsigned char const **)arg6,*arg7,*arg8,*arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase(lua_State* L) {
  int argc;
  int argv[11]={
    1,2,3,4,5,6,7,8,9,10,11
  };
  
  argc = lua_gettop(L);
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTriangleIndexVertexArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_PHY_ScalarType, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_PHY_ScalarType, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      return _wrap_btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_1(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTriangleIndexVertexArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_PHY_ScalarType, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_p_unsigned_char, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_PHY_ScalarType, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_0(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase(unsigned char const **,int &,PHY_ScalarType &,int &,unsigned char const **,int &,int &,PHY_ScalarType &,int) const\n"
    "    btTriangleIndexVertexArray::getLockedReadOnlyVertexIndexBase(unsigned char const **,int &,PHY_ScalarType &,int &,unsigned char const **,int &,int &,PHY_ScalarType &) const\n");
  lua_error(L);return 0;
}


static int _wrap_btTriangleIndexVertexArray_unLockVertexBase(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::unLockVertexBase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleIndexVertexArray::unLockVertexBase",1,"btTriangleIndexVertexArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleIndexVertexArray::unLockVertexBase",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleIndexVertexArray,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_unLockVertexBase",1,SWIGTYPE_p_btTriangleIndexVertexArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->unLockVertexBase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleIndexVertexArray_unLockReadOnlyVertexBase(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::unLockReadOnlyVertexBase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleIndexVertexArray::unLockReadOnlyVertexBase",1,"btTriangleIndexVertexArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleIndexVertexArray::unLockReadOnlyVertexBase",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleIndexVertexArray,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_unLockReadOnlyVertexBase",1,SWIGTYPE_p_btTriangleIndexVertexArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  ((btTriangleIndexVertexArray const *)arg1)->unLockReadOnlyVertexBase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleIndexVertexArray_getNumSubParts(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int result;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::getNumSubParts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleIndexVertexArray::getNumSubParts",1,"btTriangleIndexVertexArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleIndexVertexArray,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getNumSubParts",1,SWIGTYPE_p_btTriangleIndexVertexArray);
  }
  
  result = (int)((btTriangleIndexVertexArray const *)arg1)->getNumSubParts();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleIndexVertexArray_getIndexedMeshArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  IndexedMeshArray *result = 0 ;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::getIndexedMeshArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleIndexVertexArray::getIndexedMeshArray",1,"btTriangleIndexVertexArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleIndexVertexArray,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getIndexedMeshArray",1,SWIGTYPE_p_btTriangleIndexVertexArray);
  }
  
  result = (IndexedMeshArray *) &(arg1)->getIndexedMeshArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleIndexVertexArray_getIndexedMeshArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  IndexedMeshArray *result = 0 ;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::getIndexedMeshArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleIndexVertexArray::getIndexedMeshArray",1,"btTriangleIndexVertexArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleIndexVertexArray,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getIndexedMeshArray",1,SWIGTYPE_p_btTriangleIndexVertexArray);
  }
  
  result = (IndexedMeshArray *) &((btTriangleIndexVertexArray const *)arg1)->getIndexedMeshArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleIndexVertexArray_getIndexedMeshArray(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTriangleIndexVertexArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btTriangleIndexVertexArray_getIndexedMeshArray__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTriangleIndexVertexArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btTriangleIndexVertexArray_getIndexedMeshArray__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btTriangleIndexVertexArray_getIndexedMeshArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTriangleIndexVertexArray::getIndexedMeshArray()\n"
    "    btTriangleIndexVertexArray::getIndexedMeshArray() const\n");
  lua_error(L);return 0;
}


static int _wrap_btTriangleIndexVertexArray_preallocateVertices(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::preallocateVertices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleIndexVertexArray::preallocateVertices",1,"btTriangleIndexVertexArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleIndexVertexArray::preallocateVertices",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleIndexVertexArray,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_preallocateVertices",1,SWIGTYPE_p_btTriangleIndexVertexArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->preallocateVertices(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleIndexVertexArray_preallocateIndices(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::preallocateIndices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleIndexVertexArray::preallocateIndices",1,"btTriangleIndexVertexArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleIndexVertexArray::preallocateIndices",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleIndexVertexArray,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_preallocateIndices",1,SWIGTYPE_p_btTriangleIndexVertexArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->preallocateIndices(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleIndexVertexArray_hasPremadeAabb(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::hasPremadeAabb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleIndexVertexArray::hasPremadeAabb",1,"btTriangleIndexVertexArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleIndexVertexArray,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_hasPremadeAabb",1,SWIGTYPE_p_btTriangleIndexVertexArray);
  }
  
  result = (bool)((btTriangleIndexVertexArray const *)arg1)->hasPremadeAabb();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleIndexVertexArray_setPremadeAabb(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::setPremadeAabb",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleIndexVertexArray::setPremadeAabb",1,"btTriangleIndexVertexArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTriangleIndexVertexArray::setPremadeAabb",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriangleIndexVertexArray::setPremadeAabb",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleIndexVertexArray,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_setPremadeAabb",1,SWIGTYPE_p_btTriangleIndexVertexArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_setPremadeAabb",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_setPremadeAabb",3,SWIGTYPE_p_btVector3);
  }
  
  ((btTriangleIndexVertexArray const *)arg1)->setPremadeAabb((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleIndexVertexArray_getPremadeAabb(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btTriangleIndexVertexArray::getPremadeAabb",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleIndexVertexArray::getPremadeAabb",1,"btTriangleIndexVertexArray const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleIndexVertexArray::getPremadeAabb",2,"btVector3 *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btTriangleIndexVertexArray::getPremadeAabb",3,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleIndexVertexArray,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getPremadeAabb",1,SWIGTYPE_p_btTriangleIndexVertexArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getPremadeAabb",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleIndexVertexArray_getPremadeAabb",3,SWIGTYPE_p_btVector3);
  }
  
  ((btTriangleIndexVertexArray const *)arg1)->getPremadeAabb(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTriangleIndexVertexArray(void *obj) {
btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) obj;
delete arg1;
}
static swig_lua_method swig_btTriangleIndexVertexArray_methods[] = {
    {"addIndexedMesh", _wrap_btTriangleIndexVertexArray_addIndexedMesh}, 
    {"getLockedVertexIndexBase", _wrap_btTriangleIndexVertexArray_getLockedVertexIndexBase}, 
    {"getLockedReadOnlyVertexIndexBase", _wrap_btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase}, 
    {"unLockVertexBase", _wrap_btTriangleIndexVertexArray_unLockVertexBase}, 
    {"unLockReadOnlyVertexBase", _wrap_btTriangleIndexVertexArray_unLockReadOnlyVertexBase}, 
    {"getNumSubParts", _wrap_btTriangleIndexVertexArray_getNumSubParts}, 
    {"getIndexedMeshArray", _wrap_btTriangleIndexVertexArray_getIndexedMeshArray}, 
    {"preallocateVertices", _wrap_btTriangleIndexVertexArray_preallocateVertices}, 
    {"preallocateIndices", _wrap_btTriangleIndexVertexArray_preallocateIndices}, 
    {"hasPremadeAabb", _wrap_btTriangleIndexVertexArray_hasPremadeAabb}, 
    {"setPremadeAabb", _wrap_btTriangleIndexVertexArray_setPremadeAabb}, 
    {"getPremadeAabb", _wrap_btTriangleIndexVertexArray_getPremadeAabb}, 
    {0,0}
};
static swig_lua_attribute swig_btTriangleIndexVertexArray_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btTriangleIndexVertexArray_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTriangleIndexVertexArray_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTriangleIndexVertexArray_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTriangleIndexVertexArray_bases[] = {0,0};
static const char *swig_btTriangleIndexVertexArray_base_names[] = {"btStridingMeshInterface *",0};
static swig_lua_class _wrap_class_btTriangleIndexVertexArray = { "btTriangleIndexVertexArray", &SWIGTYPE_p_btTriangleIndexVertexArray,_wrap_new_btTriangleIndexVertexArray, swig_delete_btTriangleIndexVertexArray, swig_btTriangleIndexVertexArray_methods, swig_btTriangleIndexVertexArray_attributes, { "btTriangleIndexVertexArray", swig_btTriangleIndexVertexArray_cls_methods, swig_btTriangleIndexVertexArray_cls_attributes, swig_btTriangleIndexVertexArray_cls_constants }, swig_btTriangleIndexVertexArray_bases, swig_btTriangleIndexVertexArray_base_names };

static int _wrap_btTriangleShape_m_vertices1_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  btVector3 *arg2 ;
  
  SWIG_check_num_args("btTriangleShape::m_vertices1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::m_vertices1",1,"btTriangleShape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleShape::m_vertices1",2,"btVector3 [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_m_vertices1_set",1,SWIGTYPE_p_btTriangleShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleShape_m_vertices1_set",2,SWIGTYPE_p_btVector3);
  }
  
  {
    size_t ii;
    btVector3 *b = (btVector3 *) arg1->m_vertices1;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((btVector3 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_m_vertices1_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTriangleShape::m_vertices1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::m_vertices1",1,"btTriangleShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_m_vertices1_get",1,SWIGTYPE_p_btTriangleShape);
  }
  
  result = (btVector3 *)(btVector3 *) ((arg1)->m_vertices1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_getNumVertices(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btTriangleShape::getNumVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::getNumVertices",1,"btTriangleShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_getNumVertices",1,SWIGTYPE_p_btTriangleShape);
  }
  
  result = (int)((btTriangleShape const *)arg1)->getNumVertices();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_getVertexPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  int arg2 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTriangleShape::getVertexPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::getVertexPtr",1,"btTriangleShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleShape::getVertexPtr",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_getVertexPtr",1,SWIGTYPE_p_btTriangleShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btVector3 *) &(arg1)->getVertexPtr(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_getVertexPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  int arg2 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTriangleShape::getVertexPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::getVertexPtr",1,"btTriangleShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleShape::getVertexPtr",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_getVertexPtr",1,SWIGTYPE_p_btTriangleShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btVector3 *) &((btTriangleShape const *)arg1)->getVertexPtr(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_getVertexPtr(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTriangleShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btTriangleShape_getVertexPtr__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTriangleShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btTriangleShape_getVertexPtr__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btTriangleShape_getVertexPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTriangleShape::getVertexPtr(int)\n"
    "    btTriangleShape::getVertexPtr(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_btTriangleShape_getVertex(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btTriangleShape::getVertex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::getVertex",1,"btTriangleShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleShape::getVertex",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriangleShape::getVertex",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_getVertex",1,SWIGTYPE_p_btTriangleShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleShape_getVertex",3,SWIGTYPE_p_btVector3);
  }
  
  ((btTriangleShape const *)arg1)->getVertex(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_getNumEdges(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btTriangleShape::getNumEdges",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::getNumEdges",1,"btTriangleShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_getNumEdges",1,SWIGTYPE_p_btTriangleShape);
  }
  
  result = (int)((btTriangleShape const *)arg1)->getNumEdges();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_getEdge(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btTriangleShape::getEdge",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::getEdge",1,"btTriangleShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleShape::getEdge",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriangleShape::getEdge",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btTriangleShape::getEdge",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_getEdge",1,SWIGTYPE_p_btTriangleShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleShape_getEdge",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleShape_getEdge",4,SWIGTYPE_p_btVector3);
  }
  
  ((btTriangleShape const *)arg1)->getEdge(arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btTriangleShape::getAabb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::getAabb",1,"btTriangleShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTriangleShape::getAabb",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriangleShape::getAabb",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btTriangleShape::getAabb",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_getAabb",1,SWIGTYPE_p_btTriangleShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTriangleShape_getAabb",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleShape_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleShape_getAabb",4,SWIGTYPE_p_btVector3);
  }
  
  ((btTriangleShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_localGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btTriangleShape::localGetSupportingVertexWithoutMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::localGetSupportingVertexWithoutMargin",1,"btTriangleShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTriangleShape::localGetSupportingVertexWithoutMargin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_localGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btTriangleShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleShape_localGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btTriangleShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_batchedUnitVectorGetSupportingVertexWithoutMargin(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btTriangleShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::batchedUnitVectorGetSupportingVertexWithoutMargin",1,"btTriangleShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleShape::batchedUnitVectorGetSupportingVertexWithoutMargin",2,"btVector3 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btTriangleShape::batchedUnitVectorGetSupportingVertexWithoutMargin",3,"btVector3 *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btTriangleShape::batchedUnitVectorGetSupportingVertexWithoutMargin",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_batchedUnitVectorGetSupportingVertexWithoutMargin",1,SWIGTYPE_p_btTriangleShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleShape_batchedUnitVectorGetSupportingVertexWithoutMargin",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleShape_batchedUnitVectorGetSupportingVertexWithoutMargin",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btTriangleShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTriangleShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *result = 0 ;
  
  SWIG_check_num_args("btTriangleShape::btTriangleShape",0,0)
  result = (btTriangleShape *)new btTriangleShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTriangleShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTriangleShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btTriangleShape *result = 0 ;
  
  SWIG_check_num_args("btTriangleShape::btTriangleShape",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btTriangleShape::btTriangleShape",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTriangleShape::btTriangleShape",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriangleShape::btTriangleShape",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btTriangleShape",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btTriangleShape",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btTriangleShape",3,SWIGTYPE_p_btVector3);
  }
  
  result = (btTriangleShape *)new btTriangleShape((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTriangleShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTriangleShape(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btTriangleShape__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_btTriangleShape__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btTriangleShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTriangleShape::btTriangleShape()\n"
    "    btTriangleShape::btTriangleShape(btVector3 const &,btVector3 const &,btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btTriangleShape_getPlane(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  SWIG_check_num_args("btTriangleShape::getPlane",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::getPlane",1,"btTriangleShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTriangleShape::getPlane",2,"btVector3 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriangleShape::getPlane",3,"btVector3 &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btTriangleShape::getPlane",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_getPlane",1,SWIGTYPE_p_btTriangleShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleShape_getPlane",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleShape_getPlane",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  ((btTriangleShape const *)arg1)->getPlane(*arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_getNumPlanes(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btTriangleShape::getNumPlanes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::getNumPlanes",1,"btTriangleShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_getNumPlanes",1,SWIGTYPE_p_btTriangleShape);
  }
  
  result = (int)((btTriangleShape const *)arg1)->getNumPlanes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_calcNormal(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btTriangleShape::calcNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::calcNormal",1,"btTriangleShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTriangleShape::calcNormal",2,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_calcNormal",1,SWIGTYPE_p_btTriangleShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleShape_calcNormal",2,SWIGTYPE_p_btVector3);
  }
  
  ((btTriangleShape const *)arg1)->calcNormal(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_getPlaneEquation(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btTriangleShape::getPlaneEquation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::getPlaneEquation",1,"btTriangleShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleShape::getPlaneEquation",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriangleShape::getPlaneEquation",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btTriangleShape::getPlaneEquation",4,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_getPlaneEquation",1,SWIGTYPE_p_btTriangleShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleShape_getPlaneEquation",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleShape_getPlaneEquation",4,SWIGTYPE_p_btVector3);
  }
  
  ((btTriangleShape const *)arg1)->getPlaneEquation(arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_calculateLocalInertia(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btTriangleShape::calculateLocalInertia",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::calculateLocalInertia",1,"btTriangleShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleShape::calculateLocalInertia",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriangleShape::calculateLocalInertia",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_calculateLocalInertia",1,SWIGTYPE_p_btTriangleShape);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleShape_calculateLocalInertia",3,SWIGTYPE_p_btVector3);
  }
  
  ((btTriangleShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_isInside(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  SWIG_check_num_args("btTriangleShape::isInside",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::isInside",1,"btTriangleShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTriangleShape::isInside",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btTriangleShape::isInside",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_isInside",1,SWIGTYPE_p_btTriangleShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleShape_isInside",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  result = (bool)((btTriangleShape const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_getName(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btTriangleShape::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::getName",1,"btTriangleShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_getName",1,SWIGTYPE_p_btTriangleShape);
  }
  
  result = (char *)((btTriangleShape const *)arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_getNumPreferredPenetrationDirections(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  int result;
  
  SWIG_check_num_args("btTriangleShape::getNumPreferredPenetrationDirections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::getNumPreferredPenetrationDirections",1,"btTriangleShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_getNumPreferredPenetrationDirections",1,SWIGTYPE_p_btTriangleShape);
  }
  
  result = (int)((btTriangleShape const *)arg1)->getNumPreferredPenetrationDirections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleShape_getPreferredPenetrationDirection(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleShape *arg1 = (btTriangleShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btTriangleShape::getPreferredPenetrationDirection",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleShape::getPreferredPenetrationDirection",1,"btTriangleShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleShape::getPreferredPenetrationDirection",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriangleShape::getPreferredPenetrationDirection",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleShape,0))){
    SWIG_fail_ptr("btTriangleShape_getPreferredPenetrationDirection",1,SWIGTYPE_p_btTriangleShape);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleShape_getPreferredPenetrationDirection",3,SWIGTYPE_p_btVector3);
  }
  
  ((btTriangleShape const *)arg1)->getPreferredPenetrationDirection(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTriangleShape(void *obj) {
btTriangleShape *arg1 = (btTriangleShape *) obj;
delete arg1;
}
static swig_lua_method swig_btTriangleShape_methods[] = {
    {"getNumVertices", _wrap_btTriangleShape_getNumVertices}, 
    {"getVertexPtr", _wrap_btTriangleShape_getVertexPtr}, 
    {"getVertex", _wrap_btTriangleShape_getVertex}, 
    {"getNumEdges", _wrap_btTriangleShape_getNumEdges}, 
    {"getEdge", _wrap_btTriangleShape_getEdge}, 
    {"getAabb", _wrap_btTriangleShape_getAabb}, 
    {"localGetSupportingVertexWithoutMargin", _wrap_btTriangleShape_localGetSupportingVertexWithoutMargin}, 
    {"batchedUnitVectorGetSupportingVertexWithoutMargin", _wrap_btTriangleShape_batchedUnitVectorGetSupportingVertexWithoutMargin}, 
    {"getPlane", _wrap_btTriangleShape_getPlane}, 
    {"getNumPlanes", _wrap_btTriangleShape_getNumPlanes}, 
    {"calcNormal", _wrap_btTriangleShape_calcNormal}, 
    {"getPlaneEquation", _wrap_btTriangleShape_getPlaneEquation}, 
    {"calculateLocalInertia", _wrap_btTriangleShape_calculateLocalInertia}, 
    {"isInside", _wrap_btTriangleShape_isInside}, 
    {"getName", _wrap_btTriangleShape_getName}, 
    {"getNumPreferredPenetrationDirections", _wrap_btTriangleShape_getNumPreferredPenetrationDirections}, 
    {"getPreferredPenetrationDirection", _wrap_btTriangleShape_getPreferredPenetrationDirection}, 
    {0,0}
};
static swig_lua_attribute swig_btTriangleShape_attributes[] = {
    { "m_vertices1", _wrap_btTriangleShape_m_vertices1_get, _wrap_btTriangleShape_m_vertices1_set},
    {0,0,0}
};
static swig_lua_attribute swig_btTriangleShape_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTriangleShape_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTriangleShape_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTriangleShape_bases[] = {0,0};
static const char *swig_btTriangleShape_base_names[] = {"btPolyhedralConvexShape *",0};
static swig_lua_class _wrap_class_btTriangleShape = { "btTriangleShape", &SWIGTYPE_p_btTriangleShape,_wrap_new_btTriangleShape, swig_delete_btTriangleShape, swig_btTriangleShape_methods, swig_btTriangleShape_attributes, { "btTriangleShape", swig_btTriangleShape_cls_methods, swig_btTriangleShape_cls_attributes, swig_btTriangleShape_cls_constants }, swig_btTriangleShape_bases, swig_btTriangleShape_base_names };

static int _wrap_new_btUsageBitfield(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *result = 0 ;
  
  SWIG_check_num_args("btUsageBitfield::btUsageBitfield",0,0)
  result = (btUsageBitfield *)new btUsageBitfield();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btUsageBitfield,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUsageBitfield_reset(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  
  SWIG_check_num_args("btUsageBitfield::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUsageBitfield::reset",1,"btUsageBitfield *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btUsageBitfield_reset",1,SWIGTYPE_p_btUsageBitfield);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUsageBitfield_usedVertexA_set(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("btUsageBitfield::usedVertexA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUsageBitfield::usedVertexA",1,"btUsageBitfield *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btUsageBitfield::usedVertexA",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btUsageBitfield_usedVertexA_set",1,SWIGTYPE_p_btUsageBitfield);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  if (arg1) (arg1)->usedVertexA = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUsageBitfield_usedVertexA_get(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("btUsageBitfield::usedVertexA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUsageBitfield::usedVertexA",1,"btUsageBitfield *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btUsageBitfield_usedVertexA_get",1,SWIGTYPE_p_btUsageBitfield);
  }
  
  result = (unsigned short) ((arg1)->usedVertexA);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUsageBitfield_usedVertexB_set(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("btUsageBitfield::usedVertexB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUsageBitfield::usedVertexB",1,"btUsageBitfield *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btUsageBitfield::usedVertexB",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btUsageBitfield_usedVertexB_set",1,SWIGTYPE_p_btUsageBitfield);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  if (arg1) (arg1)->usedVertexB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUsageBitfield_usedVertexB_get(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("btUsageBitfield::usedVertexB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUsageBitfield::usedVertexB",1,"btUsageBitfield *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btUsageBitfield_usedVertexB_get",1,SWIGTYPE_p_btUsageBitfield);
  }
  
  result = (unsigned short) ((arg1)->usedVertexB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUsageBitfield_usedVertexC_set(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("btUsageBitfield::usedVertexC",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUsageBitfield::usedVertexC",1,"btUsageBitfield *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btUsageBitfield::usedVertexC",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btUsageBitfield_usedVertexC_set",1,SWIGTYPE_p_btUsageBitfield);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  if (arg1) (arg1)->usedVertexC = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUsageBitfield_usedVertexC_get(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("btUsageBitfield::usedVertexC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUsageBitfield::usedVertexC",1,"btUsageBitfield *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btUsageBitfield_usedVertexC_get",1,SWIGTYPE_p_btUsageBitfield);
  }
  
  result = (unsigned short) ((arg1)->usedVertexC);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUsageBitfield_usedVertexD_set(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("btUsageBitfield::usedVertexD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUsageBitfield::usedVertexD",1,"btUsageBitfield *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btUsageBitfield::usedVertexD",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btUsageBitfield_usedVertexD_set",1,SWIGTYPE_p_btUsageBitfield);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  if (arg1) (arg1)->usedVertexD = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUsageBitfield_usedVertexD_get(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("btUsageBitfield::usedVertexD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUsageBitfield::usedVertexD",1,"btUsageBitfield *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btUsageBitfield_usedVertexD_get",1,SWIGTYPE_p_btUsageBitfield);
  }
  
  result = (unsigned short) ((arg1)->usedVertexD);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUsageBitfield_unused1_set(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("btUsageBitfield::unused1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUsageBitfield::unused1",1,"btUsageBitfield *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btUsageBitfield::unused1",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btUsageBitfield_unused1_set",1,SWIGTYPE_p_btUsageBitfield);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  if (arg1) (arg1)->unused1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUsageBitfield_unused1_get(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("btUsageBitfield::unused1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUsageBitfield::unused1",1,"btUsageBitfield *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btUsageBitfield_unused1_get",1,SWIGTYPE_p_btUsageBitfield);
  }
  
  result = (unsigned short) ((arg1)->unused1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUsageBitfield_unused2_set(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("btUsageBitfield::unused2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUsageBitfield::unused2",1,"btUsageBitfield *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btUsageBitfield::unused2",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btUsageBitfield_unused2_set",1,SWIGTYPE_p_btUsageBitfield);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  if (arg1) (arg1)->unused2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUsageBitfield_unused2_get(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("btUsageBitfield::unused2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUsageBitfield::unused2",1,"btUsageBitfield *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btUsageBitfield_unused2_get",1,SWIGTYPE_p_btUsageBitfield);
  }
  
  result = (unsigned short) ((arg1)->unused2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUsageBitfield_unused3_set(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("btUsageBitfield::unused3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUsageBitfield::unused3",1,"btUsageBitfield *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btUsageBitfield::unused3",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btUsageBitfield_unused3_set",1,SWIGTYPE_p_btUsageBitfield);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  if (arg1) (arg1)->unused3 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUsageBitfield_unused3_get(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("btUsageBitfield::unused3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUsageBitfield::unused3",1,"btUsageBitfield *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btUsageBitfield_unused3_get",1,SWIGTYPE_p_btUsageBitfield);
  }
  
  result = (unsigned short) ((arg1)->unused3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUsageBitfield_unused4_set(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("btUsageBitfield::unused4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUsageBitfield::unused4",1,"btUsageBitfield *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btUsageBitfield::unused4",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btUsageBitfield_unused4_set",1,SWIGTYPE_p_btUsageBitfield);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  if (arg1) (arg1)->unused4 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUsageBitfield_unused4_get(lua_State* L) {
  int SWIG_arg = 0;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("btUsageBitfield::unused4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUsageBitfield::unused4",1,"btUsageBitfield *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btUsageBitfield_unused4_get",1,SWIGTYPE_p_btUsageBitfield);
  }
  
  result = (unsigned short) ((arg1)->unused4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btUsageBitfield(void *obj) {
btUsageBitfield *arg1 = (btUsageBitfield *) obj;
delete arg1;
}
static swig_lua_method swig_btUsageBitfield_methods[] = {
    {"reset", _wrap_btUsageBitfield_reset}, 
    {0,0}
};
static swig_lua_attribute swig_btUsageBitfield_attributes[] = {
    { "usedVertexA", _wrap_btUsageBitfield_usedVertexA_get, _wrap_btUsageBitfield_usedVertexA_set},
    { "usedVertexB", _wrap_btUsageBitfield_usedVertexB_get, _wrap_btUsageBitfield_usedVertexB_set},
    { "usedVertexC", _wrap_btUsageBitfield_usedVertexC_get, _wrap_btUsageBitfield_usedVertexC_set},
    { "usedVertexD", _wrap_btUsageBitfield_usedVertexD_get, _wrap_btUsageBitfield_usedVertexD_set},
    { "unused1", _wrap_btUsageBitfield_unused1_get, _wrap_btUsageBitfield_unused1_set},
    { "unused2", _wrap_btUsageBitfield_unused2_get, _wrap_btUsageBitfield_unused2_set},
    { "unused3", _wrap_btUsageBitfield_unused3_get, _wrap_btUsageBitfield_unused3_set},
    { "unused4", _wrap_btUsageBitfield_unused4_get, _wrap_btUsageBitfield_unused4_set},
    {0,0,0}
};
static swig_lua_attribute swig_btUsageBitfield_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btUsageBitfield_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btUsageBitfield_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btUsageBitfield_bases[] = {0};
static const char *swig_btUsageBitfield_base_names[] = {0};
static swig_lua_class _wrap_class_btUsageBitfield = { "btUsageBitfield", &SWIGTYPE_p_btUsageBitfield,_wrap_new_btUsageBitfield, swig_delete_btUsageBitfield, swig_btUsageBitfield_methods, swig_btUsageBitfield_attributes, { "btUsageBitfield", swig_btUsageBitfield_cls_methods, swig_btUsageBitfield_cls_attributes, swig_btUsageBitfield_cls_constants }, swig_btUsageBitfield_bases, swig_btUsageBitfield_base_names };

static int _wrap_btSubSimplexClosestResult_m_closestPointOnSimplex_set(lua_State* L) {
  int SWIG_arg = 0;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSubSimplexClosestResult::m_closestPointOnSimplex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSubSimplexClosestResult::m_closestPointOnSimplex",1,"btSubSimplexClosestResult *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSubSimplexClosestResult::m_closestPointOnSimplex",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_m_closestPointOnSimplex_set",1,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_m_closestPointOnSimplex_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_closestPointOnSimplex = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSubSimplexClosestResult_m_closestPointOnSimplex_get(lua_State* L) {
  int SWIG_arg = 0;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSubSimplexClosestResult::m_closestPointOnSimplex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSubSimplexClosestResult::m_closestPointOnSimplex",1,"btSubSimplexClosestResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_m_closestPointOnSimplex_get",1,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  result = (btVector3 *)& ((arg1)->m_closestPointOnSimplex);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSubSimplexClosestResult_m_usedVertices_set(lua_State* L) {
  int SWIG_arg = 0;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btUsageBitfield *arg2 = (btUsageBitfield *) 0 ;
  
  SWIG_check_num_args("btSubSimplexClosestResult::m_usedVertices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSubSimplexClosestResult::m_usedVertices",1,"btSubSimplexClosestResult *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSubSimplexClosestResult::m_usedVertices",2,"btUsageBitfield *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_m_usedVertices_set",1,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_m_usedVertices_set",2,SWIGTYPE_p_btUsageBitfield);
  }
  
  if (arg1) (arg1)->m_usedVertices = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSubSimplexClosestResult_m_usedVertices_get(lua_State* L) {
  int SWIG_arg = 0;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btUsageBitfield *result = 0 ;
  
  SWIG_check_num_args("btSubSimplexClosestResult::m_usedVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSubSimplexClosestResult::m_usedVertices",1,"btSubSimplexClosestResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_m_usedVertices_get",1,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  result = (btUsageBitfield *)& ((arg1)->m_usedVertices);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btUsageBitfield,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSubSimplexClosestResult_m_barycentricCoords_set(lua_State* L) {
  int SWIG_arg = 0;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btScalar *arg2 ;
  
  SWIG_check_num_args("btSubSimplexClosestResult::m_barycentricCoords",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSubSimplexClosestResult::m_barycentricCoords",1,"btSubSimplexClosestResult *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSubSimplexClosestResult::m_barycentricCoords",2,"btScalar [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_m_barycentricCoords_set",1,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_m_barycentricCoords_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    btScalar *b = (btScalar *) arg1->m_barycentricCoords;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((btScalar *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSubSimplexClosestResult_m_barycentricCoords_get(lua_State* L) {
  int SWIG_arg = 0;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btSubSimplexClosestResult::m_barycentricCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSubSimplexClosestResult::m_barycentricCoords",1,"btSubSimplexClosestResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_m_barycentricCoords_get",1,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  result = (btScalar *)(btScalar *) ((arg1)->m_barycentricCoords);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSubSimplexClosestResult_m_degenerate_set(lua_State* L) {
  int SWIG_arg = 0;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btSubSimplexClosestResult::m_degenerate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSubSimplexClosestResult::m_degenerate",1,"btSubSimplexClosestResult *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btSubSimplexClosestResult::m_degenerate",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_m_degenerate_set",1,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_degenerate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSubSimplexClosestResult_m_degenerate_get(lua_State* L) {
  int SWIG_arg = 0;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  bool result;
  
  SWIG_check_num_args("btSubSimplexClosestResult::m_degenerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSubSimplexClosestResult::m_degenerate",1,"btSubSimplexClosestResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_m_degenerate_get",1,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  result = (bool) ((arg1)->m_degenerate);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSubSimplexClosestResult_reset(lua_State* L) {
  int SWIG_arg = 0;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  
  SWIG_check_num_args("btSubSimplexClosestResult::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSubSimplexClosestResult::reset",1,"btSubSimplexClosestResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_reset",1,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSubSimplexClosestResult_isValid(lua_State* L) {
  int SWIG_arg = 0;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  bool result;
  
  SWIG_check_num_args("btSubSimplexClosestResult::isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSubSimplexClosestResult::isValid",1,"btSubSimplexClosestResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_isValid",1,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  result = (bool)(arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSubSimplexClosestResult_setBarycentricCoordinates__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  
  SWIG_check_num_args("btSubSimplexClosestResult::setBarycentricCoordinates",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSubSimplexClosestResult::setBarycentricCoordinates",1,"btSubSimplexClosestResult *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSubSimplexClosestResult::setBarycentricCoordinates",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSubSimplexClosestResult::setBarycentricCoordinates",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSubSimplexClosestResult::setBarycentricCoordinates",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btSubSimplexClosestResult::setBarycentricCoordinates",5,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_setBarycentricCoordinates",1,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (btScalar)lua_tonumber(L, 5);
  (arg1)->setBarycentricCoordinates(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSubSimplexClosestResult_setBarycentricCoordinates__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  SWIG_check_num_args("btSubSimplexClosestResult::setBarycentricCoordinates",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSubSimplexClosestResult::setBarycentricCoordinates",1,"btSubSimplexClosestResult *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSubSimplexClosestResult::setBarycentricCoordinates",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSubSimplexClosestResult::setBarycentricCoordinates",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSubSimplexClosestResult::setBarycentricCoordinates",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_setBarycentricCoordinates",1,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  (arg1)->setBarycentricCoordinates(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSubSimplexClosestResult_setBarycentricCoordinates__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btSubSimplexClosestResult::setBarycentricCoordinates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSubSimplexClosestResult::setBarycentricCoordinates",1,"btSubSimplexClosestResult *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSubSimplexClosestResult::setBarycentricCoordinates",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSubSimplexClosestResult::setBarycentricCoordinates",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_setBarycentricCoordinates",1,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->setBarycentricCoordinates(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSubSimplexClosestResult_setBarycentricCoordinates__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSubSimplexClosestResult::setBarycentricCoordinates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSubSimplexClosestResult::setBarycentricCoordinates",1,"btSubSimplexClosestResult *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSubSimplexClosestResult::setBarycentricCoordinates",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_setBarycentricCoordinates",1,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setBarycentricCoordinates(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSubSimplexClosestResult_setBarycentricCoordinates__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  
  SWIG_check_num_args("btSubSimplexClosestResult::setBarycentricCoordinates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSubSimplexClosestResult::setBarycentricCoordinates",1,"btSubSimplexClosestResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btSubSimplexClosestResult_setBarycentricCoordinates",1,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  (arg1)->setBarycentricCoordinates();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSubSimplexClosestResult_setBarycentricCoordinates(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSubSimplexClosestResult, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSubSimplexClosestResult_setBarycentricCoordinates__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSubSimplexClosestResult, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btSubSimplexClosestResult_setBarycentricCoordinates__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSubSimplexClosestResult, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btSubSimplexClosestResult_setBarycentricCoordinates__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSubSimplexClosestResult, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btSubSimplexClosestResult_setBarycentricCoordinates__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSubSimplexClosestResult, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_btSubSimplexClosestResult_setBarycentricCoordinates__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSubSimplexClosestResult_setBarycentricCoordinates'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSubSimplexClosestResult::setBarycentricCoordinates(btScalar,btScalar,btScalar,btScalar)\n"
    "    btSubSimplexClosestResult::setBarycentricCoordinates(btScalar,btScalar,btScalar)\n"
    "    btSubSimplexClosestResult::setBarycentricCoordinates(btScalar,btScalar)\n"
    "    btSubSimplexClosestResult::setBarycentricCoordinates(btScalar)\n"
    "    btSubSimplexClosestResult::setBarycentricCoordinates()\n");
  lua_error(L);return 0;
}


static int _wrap_new_btSubSimplexClosestResult(lua_State* L) {
  int SWIG_arg = 0;
  btSubSimplexClosestResult *result = 0 ;
  
  SWIG_check_num_args("btSubSimplexClosestResult::btSubSimplexClosestResult",0,0)
  result = (btSubSimplexClosestResult *)new btSubSimplexClosestResult();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSubSimplexClosestResult,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSubSimplexClosestResult(void *obj) {
btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) obj;
delete arg1;
}
static swig_lua_method swig_btSubSimplexClosestResult_methods[] = {
    {"reset", _wrap_btSubSimplexClosestResult_reset}, 
    {"isValid", _wrap_btSubSimplexClosestResult_isValid}, 
    {"setBarycentricCoordinates", _wrap_btSubSimplexClosestResult_setBarycentricCoordinates}, 
    {0,0}
};
static swig_lua_attribute swig_btSubSimplexClosestResult_attributes[] = {
    { "m_closestPointOnSimplex", _wrap_btSubSimplexClosestResult_m_closestPointOnSimplex_get, _wrap_btSubSimplexClosestResult_m_closestPointOnSimplex_set},
    { "m_usedVertices", _wrap_btSubSimplexClosestResult_m_usedVertices_get, _wrap_btSubSimplexClosestResult_m_usedVertices_set},
    { "m_barycentricCoords", _wrap_btSubSimplexClosestResult_m_barycentricCoords_get, _wrap_btSubSimplexClosestResult_m_barycentricCoords_set},
    { "m_degenerate", _wrap_btSubSimplexClosestResult_m_degenerate_get, _wrap_btSubSimplexClosestResult_m_degenerate_set},
    {0,0,0}
};
static swig_lua_attribute swig_btSubSimplexClosestResult_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSubSimplexClosestResult_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btSubSimplexClosestResult_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSubSimplexClosestResult_bases[] = {0};
static const char *swig_btSubSimplexClosestResult_base_names[] = {0};
static swig_lua_class _wrap_class_btSubSimplexClosestResult = { "btSubSimplexClosestResult", &SWIGTYPE_p_btSubSimplexClosestResult,_wrap_new_btSubSimplexClosestResult, swig_delete_btSubSimplexClosestResult, swig_btSubSimplexClosestResult_methods, swig_btSubSimplexClosestResult_attributes, { "btSubSimplexClosestResult", swig_btSubSimplexClosestResult_cls_methods, swig_btSubSimplexClosestResult_cls_attributes, swig_btSubSimplexClosestResult_cls_constants }, swig_btSubSimplexClosestResult_bases, swig_btSubSimplexClosestResult_base_names };

static int _wrap_btVoronoiSimplexSolver_m_numVertices_set(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_numVertices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_numVertices",1,"btVoronoiSimplexSolver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::m_numVertices",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_numVertices_set",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numVertices = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_numVertices_get(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  int result;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_numVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_numVertices",1,"btVoronoiSimplexSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_numVertices_get",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (int) ((arg1)->m_numVertices);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_simplexVectorW_set(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_simplexVectorW",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_simplexVectorW",1,"btVoronoiSimplexSolver *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::m_simplexVectorW",2,"btVector3 [5]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_simplexVectorW_set",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_simplexVectorW_set",2,SWIGTYPE_p_btVector3);
  }
  
  {
    size_t ii;
    btVector3 *b = (btVector3 *) arg1->m_simplexVectorW;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((btVector3 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_simplexVectorW_get(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_simplexVectorW",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_simplexVectorW",1,"btVoronoiSimplexSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_simplexVectorW_get",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (btVector3 *)(btVector3 *) ((arg1)->m_simplexVectorW);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_simplexPointsP_set(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_simplexPointsP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_simplexPointsP",1,"btVoronoiSimplexSolver *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::m_simplexPointsP",2,"btVector3 [5]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_simplexPointsP_set",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_simplexPointsP_set",2,SWIGTYPE_p_btVector3);
  }
  
  {
    size_t ii;
    btVector3 *b = (btVector3 *) arg1->m_simplexPointsP;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((btVector3 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_simplexPointsP_get(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_simplexPointsP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_simplexPointsP",1,"btVoronoiSimplexSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_simplexPointsP_get",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (btVector3 *)(btVector3 *) ((arg1)->m_simplexPointsP);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_simplexPointsQ_set(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_simplexPointsQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_simplexPointsQ",1,"btVoronoiSimplexSolver *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::m_simplexPointsQ",2,"btVector3 [5]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_simplexPointsQ_set",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_simplexPointsQ_set",2,SWIGTYPE_p_btVector3);
  }
  
  {
    size_t ii;
    btVector3 *b = (btVector3 *) arg1->m_simplexPointsQ;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((btVector3 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_simplexPointsQ_get(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_simplexPointsQ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_simplexPointsQ",1,"btVoronoiSimplexSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_simplexPointsQ_get",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (btVector3 *)(btVector3 *) ((arg1)->m_simplexPointsQ);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_cachedP1_set(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_cachedP1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_cachedP1",1,"btVoronoiSimplexSolver *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::m_cachedP1",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_cachedP1_set",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_cachedP1_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_cachedP1 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_cachedP1_get(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_cachedP1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_cachedP1",1,"btVoronoiSimplexSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_cachedP1_get",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (btVector3 *)& ((arg1)->m_cachedP1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_cachedP2_set(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_cachedP2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_cachedP2",1,"btVoronoiSimplexSolver *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::m_cachedP2",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_cachedP2_set",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_cachedP2_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_cachedP2 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_cachedP2_get(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_cachedP2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_cachedP2",1,"btVoronoiSimplexSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_cachedP2_get",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (btVector3 *)& ((arg1)->m_cachedP2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_cachedV_set(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_cachedV",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_cachedV",1,"btVoronoiSimplexSolver *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::m_cachedV",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_cachedV_set",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_cachedV_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_cachedV = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_cachedV_get(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_cachedV",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_cachedV",1,"btVoronoiSimplexSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_cachedV_get",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (btVector3 *)& ((arg1)->m_cachedV);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_lastW_set(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_lastW",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_lastW",1,"btVoronoiSimplexSolver *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::m_lastW",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_lastW_set",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_lastW_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_lastW = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_lastW_get(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_lastW",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_lastW",1,"btVoronoiSimplexSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_lastW_get",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (btVector3 *)& ((arg1)->m_lastW);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_equalVertexThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_equalVertexThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_equalVertexThreshold",1,"btVoronoiSimplexSolver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::m_equalVertexThreshold",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_equalVertexThreshold_set",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_equalVertexThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_equalVertexThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_equalVertexThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_equalVertexThreshold",1,"btVoronoiSimplexSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_equalVertexThreshold_get",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (btScalar) ((arg1)->m_equalVertexThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_cachedValidClosest_set(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_cachedValidClosest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_cachedValidClosest",1,"btVoronoiSimplexSolver *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::m_cachedValidClosest",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_cachedValidClosest_set",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_cachedValidClosest = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_cachedValidClosest_get(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  bool result;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_cachedValidClosest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_cachedValidClosest",1,"btVoronoiSimplexSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_cachedValidClosest_get",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (bool) ((arg1)->m_cachedValidClosest);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_cachedBC_set(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btSubSimplexClosestResult *arg2 = (btSubSimplexClosestResult *) 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_cachedBC",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_cachedBC",1,"btVoronoiSimplexSolver *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::m_cachedBC",2,"btSubSimplexClosestResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_cachedBC_set",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_cachedBC_set",2,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  if (arg1) (arg1)->m_cachedBC = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_cachedBC_get(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btSubSimplexClosestResult *result = 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_cachedBC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_cachedBC",1,"btVoronoiSimplexSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_cachedBC_get",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (btSubSimplexClosestResult *)& ((arg1)->m_cachedBC);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSubSimplexClosestResult,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_needsUpdate_set(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_needsUpdate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_needsUpdate",1,"btVoronoiSimplexSolver *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::m_needsUpdate",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_needsUpdate_set",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_needsUpdate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_m_needsUpdate_get(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  bool result;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::m_needsUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::m_needsUpdate",1,"btVoronoiSimplexSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_m_needsUpdate_get",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (bool) ((arg1)->m_needsUpdate);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_removeVertex(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::removeVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::removeVertex",1,"btVoronoiSimplexSolver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::removeVertex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_removeVertex",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->removeVertex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_reduceVertices(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btUsageBitfield *arg2 = 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::reduceVertices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::reduceVertices",1,"btVoronoiSimplexSolver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::reduceVertices",2,"btUsageBitfield const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_reduceVertices",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btUsageBitfield,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_reduceVertices",2,SWIGTYPE_p_btUsageBitfield);
  }
  
  (arg1)->reduceVertices((btUsageBitfield const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_updateClosestVectorAndPoints(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  bool result;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::updateClosestVectorAndPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::updateClosestVectorAndPoints",1,"btVoronoiSimplexSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_updateClosestVectorAndPoints",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (bool)(arg1)->updateClosestVectorAndPoints();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_closestPtPointTetrahedron(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btSubSimplexClosestResult *arg7 = 0 ;
  bool result;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::closestPtPointTetrahedron",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::closestPtPointTetrahedron",1,"btVoronoiSimplexSolver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::closestPtPointTetrahedron",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btVoronoiSimplexSolver::closestPtPointTetrahedron",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btVoronoiSimplexSolver::closestPtPointTetrahedron",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btVoronoiSimplexSolver::closestPtPointTetrahedron",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btVoronoiSimplexSolver::closestPtPointTetrahedron",6,"btVector3 const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btVoronoiSimplexSolver::closestPtPointTetrahedron",7,"btSubSimplexClosestResult &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_closestPtPointTetrahedron",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_closestPtPointTetrahedron",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_closestPtPointTetrahedron",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_closestPtPointTetrahedron",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_closestPtPointTetrahedron",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_closestPtPointTetrahedron",6,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_closestPtPointTetrahedron",7,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  result = (bool)(arg1)->closestPtPointTetrahedron((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,*arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_pointOutsideOfPlane(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  int result;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::pointOutsideOfPlane",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::pointOutsideOfPlane",1,"btVoronoiSimplexSolver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::pointOutsideOfPlane",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btVoronoiSimplexSolver::pointOutsideOfPlane",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btVoronoiSimplexSolver::pointOutsideOfPlane",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btVoronoiSimplexSolver::pointOutsideOfPlane",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btVoronoiSimplexSolver::pointOutsideOfPlane",6,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_pointOutsideOfPlane",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_pointOutsideOfPlane",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_pointOutsideOfPlane",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_pointOutsideOfPlane",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_pointOutsideOfPlane",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_pointOutsideOfPlane",6,SWIGTYPE_p_btVector3);
  }
  
  result = (int)(arg1)->pointOutsideOfPlane((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_closestPtPointTriangle(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btSubSimplexClosestResult *arg6 = 0 ;
  bool result;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::closestPtPointTriangle",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::closestPtPointTriangle",1,"btVoronoiSimplexSolver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::closestPtPointTriangle",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btVoronoiSimplexSolver::closestPtPointTriangle",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btVoronoiSimplexSolver::closestPtPointTriangle",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btVoronoiSimplexSolver::closestPtPointTriangle",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btVoronoiSimplexSolver::closestPtPointTriangle",6,"btSubSimplexClosestResult &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_closestPtPointTriangle",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_closestPtPointTriangle",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_closestPtPointTriangle",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_closestPtPointTriangle",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_closestPtPointTriangle",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btSubSimplexClosestResult,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_closestPtPointTriangle",6,SWIGTYPE_p_btSubSimplexClosestResult);
  }
  
  result = (bool)(arg1)->closestPtPointTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,*arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btVoronoiSimplexSolver(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *result = 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::btVoronoiSimplexSolver",0,0)
  result = (btVoronoiSimplexSolver *)new btVoronoiSimplexSolver();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVoronoiSimplexSolver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_reset(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::reset",1,"btVoronoiSimplexSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_reset",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_addVertex(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::addVertex",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::addVertex",1,"btVoronoiSimplexSolver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::addVertex",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btVoronoiSimplexSolver::addVertex",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btVoronoiSimplexSolver::addVertex",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_addVertex",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_addVertex",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_addVertex",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_addVertex",4,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->addVertex((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_setEqualVertexThreshold(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::setEqualVertexThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::setEqualVertexThreshold",1,"btVoronoiSimplexSolver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::setEqualVertexThreshold",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_setEqualVertexThreshold",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setEqualVertexThreshold(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_getEqualVertexThreshold(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::getEqualVertexThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::getEqualVertexThreshold",1,"btVoronoiSimplexSolver const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_getEqualVertexThreshold",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (btScalar)((btVoronoiSimplexSolver const *)arg1)->getEqualVertexThreshold();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_closest(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::closest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::closest",1,"btVoronoiSimplexSolver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::closest",2,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_closest",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_closest",2,SWIGTYPE_p_btVector3);
  }
  
  result = (bool)(arg1)->closest(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_maxVertex(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::maxVertex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::maxVertex",1,"btVoronoiSimplexSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_maxVertex",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (btScalar)(arg1)->maxVertex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_fullSimplex(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  bool result;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::fullSimplex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::fullSimplex",1,"btVoronoiSimplexSolver const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_fullSimplex",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (bool)((btVoronoiSimplexSolver const *)arg1)->fullSimplex();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_getSimplex(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  btVector3 *arg4 = (btVector3 *) 0 ;
  int result;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::getSimplex",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::getSimplex",1,"btVoronoiSimplexSolver const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::getSimplex",2,"btVector3 *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btVoronoiSimplexSolver::getSimplex",3,"btVector3 *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btVoronoiSimplexSolver::getSimplex",4,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_getSimplex",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_getSimplex",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_getSimplex",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_getSimplex",4,SWIGTYPE_p_btVector3);
  }
  
  result = (int)((btVoronoiSimplexSolver const *)arg1)->getSimplex(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_inSimplex(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::inSimplex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::inSimplex",1,"btVoronoiSimplexSolver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::inSimplex",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_inSimplex",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_inSimplex",2,SWIGTYPE_p_btVector3);
  }
  
  result = (bool)(arg1)->inSimplex((btVector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_backup_closest(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::backup_closest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::backup_closest",1,"btVoronoiSimplexSolver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::backup_closest",2,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_backup_closest",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_backup_closest",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->backup_closest(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_emptySimplex(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  bool result;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::emptySimplex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::emptySimplex",1,"btVoronoiSimplexSolver const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_emptySimplex",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (bool)((btVoronoiSimplexSolver const *)arg1)->emptySimplex();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_compute_points(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::compute_points",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::compute_points",1,"btVoronoiSimplexSolver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btVoronoiSimplexSolver::compute_points",2,"btVector3 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btVoronoiSimplexSolver::compute_points",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_compute_points",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_compute_points",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_compute_points",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->compute_points(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVoronoiSimplexSolver_numVertices(lua_State* L) {
  int SWIG_arg = 0;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  int result;
  
  SWIG_check_num_args("btVoronoiSimplexSolver::numVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btVoronoiSimplexSolver::numVertices",1,"btVoronoiSimplexSolver const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btVoronoiSimplexSolver_numVertices",1,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (int)((btVoronoiSimplexSolver const *)arg1)->numVertices();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btVoronoiSimplexSolver(void *obj) {
btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) obj;
delete arg1;
}
static swig_lua_method swig_btVoronoiSimplexSolver_methods[] = {
    {"removeVertex", _wrap_btVoronoiSimplexSolver_removeVertex}, 
    {"reduceVertices", _wrap_btVoronoiSimplexSolver_reduceVertices}, 
    {"updateClosestVectorAndPoints", _wrap_btVoronoiSimplexSolver_updateClosestVectorAndPoints}, 
    {"closestPtPointTetrahedron", _wrap_btVoronoiSimplexSolver_closestPtPointTetrahedron}, 
    {"pointOutsideOfPlane", _wrap_btVoronoiSimplexSolver_pointOutsideOfPlane}, 
    {"closestPtPointTriangle", _wrap_btVoronoiSimplexSolver_closestPtPointTriangle}, 
    {"reset", _wrap_btVoronoiSimplexSolver_reset}, 
    {"addVertex", _wrap_btVoronoiSimplexSolver_addVertex}, 
    {"setEqualVertexThreshold", _wrap_btVoronoiSimplexSolver_setEqualVertexThreshold}, 
    {"getEqualVertexThreshold", _wrap_btVoronoiSimplexSolver_getEqualVertexThreshold}, 
    {"closest", _wrap_btVoronoiSimplexSolver_closest}, 
    {"maxVertex", _wrap_btVoronoiSimplexSolver_maxVertex}, 
    {"fullSimplex", _wrap_btVoronoiSimplexSolver_fullSimplex}, 
    {"getSimplex", _wrap_btVoronoiSimplexSolver_getSimplex}, 
    {"inSimplex", _wrap_btVoronoiSimplexSolver_inSimplex}, 
    {"backup_closest", _wrap_btVoronoiSimplexSolver_backup_closest}, 
    {"emptySimplex", _wrap_btVoronoiSimplexSolver_emptySimplex}, 
    {"compute_points", _wrap_btVoronoiSimplexSolver_compute_points}, 
    {"numVertices", _wrap_btVoronoiSimplexSolver_numVertices}, 
    {0,0}
};
static swig_lua_attribute swig_btVoronoiSimplexSolver_attributes[] = {
    { "m_numVertices", _wrap_btVoronoiSimplexSolver_m_numVertices_get, _wrap_btVoronoiSimplexSolver_m_numVertices_set},
    { "m_simplexVectorW", _wrap_btVoronoiSimplexSolver_m_simplexVectorW_get, _wrap_btVoronoiSimplexSolver_m_simplexVectorW_set},
    { "m_simplexPointsP", _wrap_btVoronoiSimplexSolver_m_simplexPointsP_get, _wrap_btVoronoiSimplexSolver_m_simplexPointsP_set},
    { "m_simplexPointsQ", _wrap_btVoronoiSimplexSolver_m_simplexPointsQ_get, _wrap_btVoronoiSimplexSolver_m_simplexPointsQ_set},
    { "m_cachedP1", _wrap_btVoronoiSimplexSolver_m_cachedP1_get, _wrap_btVoronoiSimplexSolver_m_cachedP1_set},
    { "m_cachedP2", _wrap_btVoronoiSimplexSolver_m_cachedP2_get, _wrap_btVoronoiSimplexSolver_m_cachedP2_set},
    { "m_cachedV", _wrap_btVoronoiSimplexSolver_m_cachedV_get, _wrap_btVoronoiSimplexSolver_m_cachedV_set},
    { "m_lastW", _wrap_btVoronoiSimplexSolver_m_lastW_get, _wrap_btVoronoiSimplexSolver_m_lastW_set},
    { "m_equalVertexThreshold", _wrap_btVoronoiSimplexSolver_m_equalVertexThreshold_get, _wrap_btVoronoiSimplexSolver_m_equalVertexThreshold_set},
    { "m_cachedValidClosest", _wrap_btVoronoiSimplexSolver_m_cachedValidClosest_get, _wrap_btVoronoiSimplexSolver_m_cachedValidClosest_set},
    { "m_cachedBC", _wrap_btVoronoiSimplexSolver_m_cachedBC_get, _wrap_btVoronoiSimplexSolver_m_cachedBC_set},
    { "m_needsUpdate", _wrap_btVoronoiSimplexSolver_m_needsUpdate_get, _wrap_btVoronoiSimplexSolver_m_needsUpdate_set},
    {0,0,0}
};
static swig_lua_attribute swig_btVoronoiSimplexSolver_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btVoronoiSimplexSolver_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btVoronoiSimplexSolver_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btVoronoiSimplexSolver_bases[] = {0};
static const char *swig_btVoronoiSimplexSolver_base_names[] = {0};
static swig_lua_class _wrap_class_btVoronoiSimplexSolver = { "btVoronoiSimplexSolver", &SWIGTYPE_p_btVoronoiSimplexSolver,_wrap_new_btVoronoiSimplexSolver, swig_delete_btVoronoiSimplexSolver, swig_btVoronoiSimplexSolver_methods, swig_btVoronoiSimplexSolver_attributes, { "btVoronoiSimplexSolver", swig_btVoronoiSimplexSolver_cls_methods, swig_btVoronoiSimplexSolver_cls_attributes, swig_btVoronoiSimplexSolver_cls_constants }, swig_btVoronoiSimplexSolver_bases, swig_btVoronoiSimplexSolver_base_names };

static int _wrap_btConvexPenetrationDepthSolver_calcPenDepth(lua_State* L) {
  int SWIG_arg = 0;
  btConvexPenetrationDepthSolver *arg1 = (btConvexPenetrationDepthSolver *) 0 ;
  btVoronoiSimplexSolver *arg2 = 0 ;
  btConvexShape *arg3 = (btConvexShape *) 0 ;
  btConvexShape *arg4 = (btConvexShape *) 0 ;
  btTransform *arg5 = 0 ;
  btTransform *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  btVector3 *arg9 = 0 ;
  btIDebugDraw *arg10 = (btIDebugDraw *) 0 ;
  btStackAlloc *arg11 = (btStackAlloc *) 0 ;
  bool result;
  
  SWIG_check_num_args("btConvexPenetrationDepthSolver::calcPenDepth",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexPenetrationDepthSolver::calcPenDepth",1,"btConvexPenetrationDepthSolver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexPenetrationDepthSolver::calcPenDepth",2,"btVoronoiSimplexSolver &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btConvexPenetrationDepthSolver::calcPenDepth",3,"btConvexShape const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btConvexPenetrationDepthSolver::calcPenDepth",4,"btConvexShape const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btConvexPenetrationDepthSolver::calcPenDepth",5,"btTransform const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btConvexPenetrationDepthSolver::calcPenDepth",6,"btTransform const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btConvexPenetrationDepthSolver::calcPenDepth",7,"btVector3 &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btConvexPenetrationDepthSolver::calcPenDepth",8,"btVector3 &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("btConvexPenetrationDepthSolver::calcPenDepth",9,"btVector3 &");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("btConvexPenetrationDepthSolver::calcPenDepth",10,"btIDebugDraw *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("btConvexPenetrationDepthSolver::calcPenDepth",11,"btStackAlloc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexPenetrationDepthSolver,0))){
    SWIG_fail_ptr("btConvexPenetrationDepthSolver_calcPenDepth",1,SWIGTYPE_p_btConvexPenetrationDepthSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btConvexPenetrationDepthSolver_calcPenDepth",2,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexPenetrationDepthSolver_calcPenDepth",3,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btConvexPenetrationDepthSolver_calcPenDepth",4,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btConvexPenetrationDepthSolver_calcPenDepth",5,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btConvexPenetrationDepthSolver_calcPenDepth",6,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexPenetrationDepthSolver_calcPenDepth",7,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexPenetrationDepthSolver_calcPenDepth",8,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexPenetrationDepthSolver_calcPenDepth",9,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btConvexPenetrationDepthSolver_calcPenDepth",10,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_btStackAlloc,0))){
    SWIG_fail_ptr("btConvexPenetrationDepthSolver_calcPenDepth",11,SWIGTYPE_p_btStackAlloc);
  }
  
  result = (bool)(arg1)->calcPenDepth(*arg2,(btConvexShape const *)arg3,(btConvexShape const *)arg4,(btTransform const &)*arg5,(btTransform const &)*arg6,*arg7,*arg8,*arg9,arg10,arg11);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConvexPenetrationDepthSolver(void *obj) {
btConvexPenetrationDepthSolver *arg1 = (btConvexPenetrationDepthSolver *) obj;
delete arg1;
}
static swig_lua_method swig_btConvexPenetrationDepthSolver_methods[] = {
    {"calcPenDepth", _wrap_btConvexPenetrationDepthSolver_calcPenDepth}, 
    {0,0}
};
static swig_lua_attribute swig_btConvexPenetrationDepthSolver_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btConvexPenetrationDepthSolver_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConvexPenetrationDepthSolver_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConvexPenetrationDepthSolver_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConvexPenetrationDepthSolver_bases[] = {0};
static const char *swig_btConvexPenetrationDepthSolver_base_names[] = {0};
static swig_lua_class _wrap_class_btConvexPenetrationDepthSolver = { "btConvexPenetrationDepthSolver", &SWIGTYPE_p_btConvexPenetrationDepthSolver,0, swig_delete_btConvexPenetrationDepthSolver, swig_btConvexPenetrationDepthSolver_methods, swig_btConvexPenetrationDepthSolver_attributes, { "btConvexPenetrationDepthSolver", swig_btConvexPenetrationDepthSolver_cls_methods, swig_btConvexPenetrationDepthSolver_cls_attributes, swig_btConvexPenetrationDepthSolver_cls_constants }, swig_btConvexPenetrationDepthSolver_bases, swig_btConvexPenetrationDepthSolver_base_names };

static int _wrap_new_btGjkConvexCast(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btVoronoiSimplexSolver *arg3 = (btVoronoiSimplexSolver *) 0 ;
  btGjkConvexCast *result = 0 ;
  
  SWIG_check_num_args("btGjkConvexCast::btGjkConvexCast",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkConvexCast::btGjkConvexCast",1,"btConvexShape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGjkConvexCast::btGjkConvexCast",2,"btConvexShape *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btGjkConvexCast::btGjkConvexCast",3,"btVoronoiSimplexSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("new_btGjkConvexCast",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("new_btGjkConvexCast",2,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("new_btGjkConvexCast",3,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (btGjkConvexCast *)new btGjkConvexCast(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGjkConvexCast,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btGjkConvexCast(void *obj) {
btGjkConvexCast *arg1 = (btGjkConvexCast *) obj;
delete arg1;
}
static swig_lua_method swig_btGjkConvexCast_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btGjkConvexCast_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btGjkConvexCast_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btGjkConvexCast_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btGjkConvexCast_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btGjkConvexCast_bases[] = {0};
static const char *swig_btGjkConvexCast_base_names[] = {0};
static swig_lua_class _wrap_class_btGjkConvexCast = { "btGjkConvexCast", &SWIGTYPE_p_btGjkConvexCast,_wrap_new_btGjkConvexCast, swig_delete_btGjkConvexCast, swig_btGjkConvexCast_methods, swig_btGjkConvexCast_attributes, { "btGjkConvexCast", swig_btGjkConvexCast_cls_methods, swig_btGjkConvexCast_cls_attributes, swig_btGjkConvexCast_cls_constants }, swig_btGjkConvexCast_bases, swig_btGjkConvexCast_base_names };

static int _wrap_new_btGjkEpaSolver(lua_State* L) {
  int SWIG_arg = 0;
  btGjkEpaSolver *result = 0 ;
  
  SWIG_check_num_args("btGjkEpaSolver::btGjkEpaSolver",0,0)
  result = (btGjkEpaSolver *)new btGjkEpaSolver();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGjkEpaSolver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btGjkEpaSolver(void *obj) {
btGjkEpaSolver *arg1 = (btGjkEpaSolver *) obj;
delete arg1;
}
static swig_lua_method swig_btGjkEpaSolver_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btGjkEpaSolver_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btGjkEpaSolver_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btGjkEpaSolver_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btGjkEpaSolver_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btGjkEpaSolver_bases[] = {0};
static const char *swig_btGjkEpaSolver_base_names[] = {0};
static swig_lua_class _wrap_class_btGjkEpaSolver = { "btGjkEpaSolver", &SWIGTYPE_p_btGjkEpaSolver,_wrap_new_btGjkEpaSolver, swig_delete_btGjkEpaSolver, swig_btGjkEpaSolver_methods, swig_btGjkEpaSolver_attributes, { "btGjkEpaSolver", swig_btGjkEpaSolver_cls_methods, swig_btGjkEpaSolver_cls_attributes, swig_btGjkEpaSolver_cls_constants }, swig_btGjkEpaSolver_bases, swig_btGjkEpaSolver_base_names };

static int _wrap_new_btGjkEpaPenetrationDepthSolver(lua_State* L) {
  int SWIG_arg = 0;
  btGjkEpaPenetrationDepthSolver *result = 0 ;
  
  SWIG_check_num_args("btGjkEpaPenetrationDepthSolver::btGjkEpaPenetrationDepthSolver",0,0)
  result = (btGjkEpaPenetrationDepthSolver *)new btGjkEpaPenetrationDepthSolver();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGjkEpaPenetrationDepthSolver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkEpaPenetrationDepthSolver_calcPenDepth(lua_State* L) {
  int SWIG_arg = 0;
  btGjkEpaPenetrationDepthSolver *arg1 = (btGjkEpaPenetrationDepthSolver *) 0 ;
  btVoronoiSimplexSolver *arg2 = 0 ;
  btConvexShape *arg3 = (btConvexShape *) 0 ;
  btConvexShape *arg4 = (btConvexShape *) 0 ;
  btTransform *arg5 = 0 ;
  btTransform *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  btVector3 *arg9 = 0 ;
  btIDebugDraw *arg10 = (btIDebugDraw *) 0 ;
  btStackAlloc *arg11 = (btStackAlloc *) 0 ;
  bool result;
  
  SWIG_check_num_args("btGjkEpaPenetrationDepthSolver::calcPenDepth",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkEpaPenetrationDepthSolver::calcPenDepth",1,"btGjkEpaPenetrationDepthSolver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGjkEpaPenetrationDepthSolver::calcPenDepth",2,"btVoronoiSimplexSolver &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btGjkEpaPenetrationDepthSolver::calcPenDepth",3,"btConvexShape const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btGjkEpaPenetrationDepthSolver::calcPenDepth",4,"btConvexShape const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btGjkEpaPenetrationDepthSolver::calcPenDepth",5,"btTransform const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btGjkEpaPenetrationDepthSolver::calcPenDepth",6,"btTransform const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btGjkEpaPenetrationDepthSolver::calcPenDepth",7,"btVector3 &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btGjkEpaPenetrationDepthSolver::calcPenDepth",8,"btVector3 &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("btGjkEpaPenetrationDepthSolver::calcPenDepth",9,"btVector3 &");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("btGjkEpaPenetrationDepthSolver::calcPenDepth",10,"btIDebugDraw *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("btGjkEpaPenetrationDepthSolver::calcPenDepth",11,"btStackAlloc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGjkEpaPenetrationDepthSolver,0))){
    SWIG_fail_ptr("btGjkEpaPenetrationDepthSolver_calcPenDepth",1,SWIGTYPE_p_btGjkEpaPenetrationDepthSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btGjkEpaPenetrationDepthSolver_calcPenDepth",2,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btGjkEpaPenetrationDepthSolver_calcPenDepth",3,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btGjkEpaPenetrationDepthSolver_calcPenDepth",4,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGjkEpaPenetrationDepthSolver_calcPenDepth",5,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGjkEpaPenetrationDepthSolver_calcPenDepth",6,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGjkEpaPenetrationDepthSolver_calcPenDepth",7,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGjkEpaPenetrationDepthSolver_calcPenDepth",8,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGjkEpaPenetrationDepthSolver_calcPenDepth",9,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btGjkEpaPenetrationDepthSolver_calcPenDepth",10,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_btStackAlloc,0))){
    SWIG_fail_ptr("btGjkEpaPenetrationDepthSolver_calcPenDepth",11,SWIGTYPE_p_btStackAlloc);
  }
  
  result = (bool)(arg1)->calcPenDepth(*arg2,(btConvexShape const *)arg3,(btConvexShape const *)arg4,(btTransform const &)*arg5,(btTransform const &)*arg6,*arg7,*arg8,*arg9,arg10,arg11);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btGjkEpaPenetrationDepthSolver(void *obj) {
btGjkEpaPenetrationDepthSolver *arg1 = (btGjkEpaPenetrationDepthSolver *) obj;
delete arg1;
}
static swig_lua_method swig_btGjkEpaPenetrationDepthSolver_methods[] = {
    {"calcPenDepth", _wrap_btGjkEpaPenetrationDepthSolver_calcPenDepth}, 
    {0,0}
};
static swig_lua_attribute swig_btGjkEpaPenetrationDepthSolver_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btGjkEpaPenetrationDepthSolver_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btGjkEpaPenetrationDepthSolver_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btGjkEpaPenetrationDepthSolver_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btGjkEpaPenetrationDepthSolver_bases[] = {0,0};
static const char *swig_btGjkEpaPenetrationDepthSolver_base_names[] = {"btConvexPenetrationDepthSolver *",0};
static swig_lua_class _wrap_class_btGjkEpaPenetrationDepthSolver = { "btGjkEpaPenetrationDepthSolver", &SWIGTYPE_p_btGjkEpaPenetrationDepthSolver,_wrap_new_btGjkEpaPenetrationDepthSolver, swig_delete_btGjkEpaPenetrationDepthSolver, swig_btGjkEpaPenetrationDepthSolver_methods, swig_btGjkEpaPenetrationDepthSolver_attributes, { "btGjkEpaPenetrationDepthSolver", swig_btGjkEpaPenetrationDepthSolver_cls_methods, swig_btGjkEpaPenetrationDepthSolver_cls_attributes, swig_btGjkEpaPenetrationDepthSolver_cls_constants }, swig_btGjkEpaPenetrationDepthSolver_bases, swig_btGjkEpaPenetrationDepthSolver_base_names };

static int _wrap_btGjkPairDetector_m_lastUsedMethod_set(lua_State* L) {
  int SWIG_arg = 0;
  btGjkPairDetector *arg1 = (btGjkPairDetector *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btGjkPairDetector::m_lastUsedMethod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkPairDetector::m_lastUsedMethod",1,"btGjkPairDetector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGjkPairDetector::m_lastUsedMethod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGjkPairDetector,0))){
    SWIG_fail_ptr("btGjkPairDetector_m_lastUsedMethod_set",1,SWIGTYPE_p_btGjkPairDetector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_lastUsedMethod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkPairDetector_m_lastUsedMethod_get(lua_State* L) {
  int SWIG_arg = 0;
  btGjkPairDetector *arg1 = (btGjkPairDetector *) 0 ;
  int result;
  
  SWIG_check_num_args("btGjkPairDetector::m_lastUsedMethod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkPairDetector::m_lastUsedMethod",1,"btGjkPairDetector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGjkPairDetector,0))){
    SWIG_fail_ptr("btGjkPairDetector_m_lastUsedMethod_get",1,SWIGTYPE_p_btGjkPairDetector);
  }
  
  result = (int) ((arg1)->m_lastUsedMethod);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkPairDetector_m_curIter_set(lua_State* L) {
  int SWIG_arg = 0;
  btGjkPairDetector *arg1 = (btGjkPairDetector *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btGjkPairDetector::m_curIter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkPairDetector::m_curIter",1,"btGjkPairDetector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGjkPairDetector::m_curIter",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGjkPairDetector,0))){
    SWIG_fail_ptr("btGjkPairDetector_m_curIter_set",1,SWIGTYPE_p_btGjkPairDetector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_curIter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkPairDetector_m_curIter_get(lua_State* L) {
  int SWIG_arg = 0;
  btGjkPairDetector *arg1 = (btGjkPairDetector *) 0 ;
  int result;
  
  SWIG_check_num_args("btGjkPairDetector::m_curIter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkPairDetector::m_curIter",1,"btGjkPairDetector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGjkPairDetector,0))){
    SWIG_fail_ptr("btGjkPairDetector_m_curIter_get",1,SWIGTYPE_p_btGjkPairDetector);
  }
  
  result = (int) ((arg1)->m_curIter);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkPairDetector_m_degenerateSimplex_set(lua_State* L) {
  int SWIG_arg = 0;
  btGjkPairDetector *arg1 = (btGjkPairDetector *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btGjkPairDetector::m_degenerateSimplex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkPairDetector::m_degenerateSimplex",1,"btGjkPairDetector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGjkPairDetector::m_degenerateSimplex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGjkPairDetector,0))){
    SWIG_fail_ptr("btGjkPairDetector_m_degenerateSimplex_set",1,SWIGTYPE_p_btGjkPairDetector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_degenerateSimplex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkPairDetector_m_degenerateSimplex_get(lua_State* L) {
  int SWIG_arg = 0;
  btGjkPairDetector *arg1 = (btGjkPairDetector *) 0 ;
  int result;
  
  SWIG_check_num_args("btGjkPairDetector::m_degenerateSimplex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkPairDetector::m_degenerateSimplex",1,"btGjkPairDetector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGjkPairDetector,0))){
    SWIG_fail_ptr("btGjkPairDetector_m_degenerateSimplex_get",1,SWIGTYPE_p_btGjkPairDetector);
  }
  
  result = (int) ((arg1)->m_degenerateSimplex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkPairDetector_m_catchDegeneracies_set(lua_State* L) {
  int SWIG_arg = 0;
  btGjkPairDetector *arg1 = (btGjkPairDetector *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btGjkPairDetector::m_catchDegeneracies",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkPairDetector::m_catchDegeneracies",1,"btGjkPairDetector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGjkPairDetector::m_catchDegeneracies",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGjkPairDetector,0))){
    SWIG_fail_ptr("btGjkPairDetector_m_catchDegeneracies_set",1,SWIGTYPE_p_btGjkPairDetector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_catchDegeneracies = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkPairDetector_m_catchDegeneracies_get(lua_State* L) {
  int SWIG_arg = 0;
  btGjkPairDetector *arg1 = (btGjkPairDetector *) 0 ;
  int result;
  
  SWIG_check_num_args("btGjkPairDetector::m_catchDegeneracies",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkPairDetector::m_catchDegeneracies",1,"btGjkPairDetector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGjkPairDetector,0))){
    SWIG_fail_ptr("btGjkPairDetector_m_catchDegeneracies_get",1,SWIGTYPE_p_btGjkPairDetector);
  }
  
  result = (int) ((arg1)->m_catchDegeneracies);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btGjkPairDetector(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btVoronoiSimplexSolver *arg3 = (btVoronoiSimplexSolver *) 0 ;
  btConvexPenetrationDepthSolver *arg4 = (btConvexPenetrationDepthSolver *) 0 ;
  btGjkPairDetector *result = 0 ;
  
  SWIG_check_num_args("btGjkPairDetector::btGjkPairDetector",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkPairDetector::btGjkPairDetector",1,"btConvexShape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGjkPairDetector::btGjkPairDetector",2,"btConvexShape *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btGjkPairDetector::btGjkPairDetector",3,"btVoronoiSimplexSolver *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btGjkPairDetector::btGjkPairDetector",4,"btConvexPenetrationDepthSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("new_btGjkPairDetector",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("new_btGjkPairDetector",2,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("new_btGjkPairDetector",3,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btConvexPenetrationDepthSolver,0))){
    SWIG_fail_ptr("new_btGjkPairDetector",4,SWIGTYPE_p_btConvexPenetrationDepthSolver);
  }
  
  result = (btGjkPairDetector *)new btGjkPairDetector(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGjkPairDetector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkPairDetector_setMinkowskiA(lua_State* L) {
  int SWIG_arg = 0;
  btGjkPairDetector *arg1 = (btGjkPairDetector *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  
  SWIG_check_num_args("btGjkPairDetector::setMinkowskiA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkPairDetector::setMinkowskiA",1,"btGjkPairDetector *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGjkPairDetector::setMinkowskiA",2,"btConvexShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGjkPairDetector,0))){
    SWIG_fail_ptr("btGjkPairDetector_setMinkowskiA",1,SWIGTYPE_p_btGjkPairDetector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btGjkPairDetector_setMinkowskiA",2,SWIGTYPE_p_btConvexShape);
  }
  
  (arg1)->setMinkowskiA(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkPairDetector_setMinkowskiB(lua_State* L) {
  int SWIG_arg = 0;
  btGjkPairDetector *arg1 = (btGjkPairDetector *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  
  SWIG_check_num_args("btGjkPairDetector::setMinkowskiB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkPairDetector::setMinkowskiB",1,"btGjkPairDetector *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGjkPairDetector::setMinkowskiB",2,"btConvexShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGjkPairDetector,0))){
    SWIG_fail_ptr("btGjkPairDetector_setMinkowskiB",1,SWIGTYPE_p_btGjkPairDetector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btGjkPairDetector_setMinkowskiB",2,SWIGTYPE_p_btConvexShape);
  }
  
  (arg1)->setMinkowskiB(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkPairDetector_setCachedSeperatingAxis(lua_State* L) {
  int SWIG_arg = 0;
  btGjkPairDetector *arg1 = (btGjkPairDetector *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btGjkPairDetector::setCachedSeperatingAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkPairDetector::setCachedSeperatingAxis",1,"btGjkPairDetector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGjkPairDetector::setCachedSeperatingAxis",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGjkPairDetector,0))){
    SWIG_fail_ptr("btGjkPairDetector_setCachedSeperatingAxis",1,SWIGTYPE_p_btGjkPairDetector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGjkPairDetector_setCachedSeperatingAxis",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setCachedSeperatingAxis((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkPairDetector_setPenetrationDepthSolver(lua_State* L) {
  int SWIG_arg = 0;
  btGjkPairDetector *arg1 = (btGjkPairDetector *) 0 ;
  btConvexPenetrationDepthSolver *arg2 = (btConvexPenetrationDepthSolver *) 0 ;
  
  SWIG_check_num_args("btGjkPairDetector::setPenetrationDepthSolver",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkPairDetector::setPenetrationDepthSolver",1,"btGjkPairDetector *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGjkPairDetector::setPenetrationDepthSolver",2,"btConvexPenetrationDepthSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGjkPairDetector,0))){
    SWIG_fail_ptr("btGjkPairDetector_setPenetrationDepthSolver",1,SWIGTYPE_p_btGjkPairDetector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConvexPenetrationDepthSolver,0))){
    SWIG_fail_ptr("btGjkPairDetector_setPenetrationDepthSolver",2,SWIGTYPE_p_btConvexPenetrationDepthSolver);
  }
  
  (arg1)->setPenetrationDepthSolver(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkPairDetector_setIgnoreMargin(lua_State* L) {
  int SWIG_arg = 0;
  btGjkPairDetector *arg1 = (btGjkPairDetector *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btGjkPairDetector::setIgnoreMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkPairDetector::setIgnoreMargin",1,"btGjkPairDetector *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btGjkPairDetector::setIgnoreMargin",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGjkPairDetector,0))){
    SWIG_fail_ptr("btGjkPairDetector_setIgnoreMargin",1,SWIGTYPE_p_btGjkPairDetector);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setIgnoreMargin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btGjkPairDetector(void *obj) {
btGjkPairDetector *arg1 = (btGjkPairDetector *) obj;
delete arg1;
}
static swig_lua_method swig_btGjkPairDetector_methods[] = {
    {"setMinkowskiA", _wrap_btGjkPairDetector_setMinkowskiA}, 
    {"setMinkowskiB", _wrap_btGjkPairDetector_setMinkowskiB}, 
    {"setCachedSeperatingAxis", _wrap_btGjkPairDetector_setCachedSeperatingAxis}, 
    {"setPenetrationDepthSolver", _wrap_btGjkPairDetector_setPenetrationDepthSolver}, 
    {"setIgnoreMargin", _wrap_btGjkPairDetector_setIgnoreMargin}, 
    {0,0}
};
static swig_lua_attribute swig_btGjkPairDetector_attributes[] = {
    { "m_lastUsedMethod", _wrap_btGjkPairDetector_m_lastUsedMethod_get, _wrap_btGjkPairDetector_m_lastUsedMethod_set},
    { "m_curIter", _wrap_btGjkPairDetector_m_curIter_get, _wrap_btGjkPairDetector_m_curIter_set},
    { "m_degenerateSimplex", _wrap_btGjkPairDetector_m_degenerateSimplex_get, _wrap_btGjkPairDetector_m_degenerateSimplex_set},
    { "m_catchDegeneracies", _wrap_btGjkPairDetector_m_catchDegeneracies_get, _wrap_btGjkPairDetector_m_catchDegeneracies_set},
    {0,0,0}
};
static swig_lua_attribute swig_btGjkPairDetector_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btGjkPairDetector_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btGjkPairDetector_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btGjkPairDetector_bases[] = {0};
static const char *swig_btGjkPairDetector_base_names[] = {0};
static swig_lua_class _wrap_class_btGjkPairDetector = { "btGjkPairDetector", &SWIGTYPE_p_btGjkPairDetector,_wrap_new_btGjkPairDetector, swig_delete_btGjkPairDetector, swig_btGjkPairDetector_methods, swig_btGjkPairDetector_attributes, { "btGjkPairDetector", swig_btGjkPairDetector_cls_methods, swig_btGjkPairDetector_cls_attributes, swig_btGjkPairDetector_cls_constants }, swig_btGjkPairDetector_bases, swig_btGjkPairDetector_base_names };

static int _wrap_btConstraintRow_m_normal_set(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar *arg2 ;
  
  SWIG_check_num_args("btConstraintRow::m_normal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintRow::m_normal",1,"btConstraintRow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConstraintRow::m_normal",2,"btScalar [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintRow,0))){
    SWIG_fail_ptr("btConstraintRow_m_normal_set",1,SWIGTYPE_p_btConstraintRow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btConstraintRow_m_normal_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    btScalar *b = (btScalar *) arg1->m_normal;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((btScalar *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintRow_m_normal_get(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("btConstraintRow::m_normal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintRow::m_normal",1,"btConstraintRow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintRow,0))){
    SWIG_fail_ptr("btConstraintRow_m_normal_get",1,SWIGTYPE_p_btConstraintRow);
  }
  
  result = (btScalar *)(btScalar *) ((arg1)->m_normal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintRow_m_rhs_set(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btConstraintRow::m_rhs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintRow::m_rhs",1,"btConstraintRow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConstraintRow::m_rhs",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintRow,0))){
    SWIG_fail_ptr("btConstraintRow_m_rhs_set",1,SWIGTYPE_p_btConstraintRow);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_rhs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintRow_m_rhs_get(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConstraintRow::m_rhs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintRow::m_rhs",1,"btConstraintRow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintRow,0))){
    SWIG_fail_ptr("btConstraintRow_m_rhs_get",1,SWIGTYPE_p_btConstraintRow);
  }
  
  result = (btScalar) ((arg1)->m_rhs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintRow_m_jacDiagInv_set(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btConstraintRow::m_jacDiagInv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintRow::m_jacDiagInv",1,"btConstraintRow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConstraintRow::m_jacDiagInv",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintRow,0))){
    SWIG_fail_ptr("btConstraintRow_m_jacDiagInv_set",1,SWIGTYPE_p_btConstraintRow);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_jacDiagInv = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintRow_m_jacDiagInv_get(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConstraintRow::m_jacDiagInv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintRow::m_jacDiagInv",1,"btConstraintRow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintRow,0))){
    SWIG_fail_ptr("btConstraintRow_m_jacDiagInv_get",1,SWIGTYPE_p_btConstraintRow);
  }
  
  result = (btScalar) ((arg1)->m_jacDiagInv);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintRow_m_lowerLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btConstraintRow::m_lowerLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintRow::m_lowerLimit",1,"btConstraintRow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConstraintRow::m_lowerLimit",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintRow,0))){
    SWIG_fail_ptr("btConstraintRow_m_lowerLimit_set",1,SWIGTYPE_p_btConstraintRow);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_lowerLimit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintRow_m_lowerLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConstraintRow::m_lowerLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintRow::m_lowerLimit",1,"btConstraintRow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintRow,0))){
    SWIG_fail_ptr("btConstraintRow_m_lowerLimit_get",1,SWIGTYPE_p_btConstraintRow);
  }
  
  result = (btScalar) ((arg1)->m_lowerLimit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintRow_m_upperLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btConstraintRow::m_upperLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintRow::m_upperLimit",1,"btConstraintRow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConstraintRow::m_upperLimit",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintRow,0))){
    SWIG_fail_ptr("btConstraintRow_m_upperLimit_set",1,SWIGTYPE_p_btConstraintRow);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_upperLimit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintRow_m_upperLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConstraintRow::m_upperLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintRow::m_upperLimit",1,"btConstraintRow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintRow,0))){
    SWIG_fail_ptr("btConstraintRow_m_upperLimit_get",1,SWIGTYPE_p_btConstraintRow);
  }
  
  result = (btScalar) ((arg1)->m_upperLimit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintRow_m_accumImpulse_set(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btConstraintRow::m_accumImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintRow::m_accumImpulse",1,"btConstraintRow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConstraintRow::m_accumImpulse",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintRow,0))){
    SWIG_fail_ptr("btConstraintRow_m_accumImpulse_set",1,SWIGTYPE_p_btConstraintRow);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_accumImpulse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintRow_m_accumImpulse_get(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConstraintRow::m_accumImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintRow::m_accumImpulse",1,"btConstraintRow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintRow,0))){
    SWIG_fail_ptr("btConstraintRow_m_accumImpulse_get",1,SWIGTYPE_p_btConstraintRow);
  }
  
  result = (btScalar) ((arg1)->m_accumImpulse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btConstraintRow(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintRow *result = 0 ;
  
  SWIG_check_num_args("btConstraintRow::btConstraintRow",0,0)
  result = (btConstraintRow *)new btConstraintRow();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConstraintRow,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConstraintRow(void *obj) {
btConstraintRow *arg1 = (btConstraintRow *) obj;
delete arg1;
}
static swig_lua_method swig_btConstraintRow_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btConstraintRow_attributes[] = {
    { "m_normal", _wrap_btConstraintRow_m_normal_get, _wrap_btConstraintRow_m_normal_set},
    { "m_rhs", _wrap_btConstraintRow_m_rhs_get, _wrap_btConstraintRow_m_rhs_set},
    { "m_jacDiagInv", _wrap_btConstraintRow_m_jacDiagInv_get, _wrap_btConstraintRow_m_jacDiagInv_set},
    { "m_lowerLimit", _wrap_btConstraintRow_m_lowerLimit_get, _wrap_btConstraintRow_m_lowerLimit_set},
    { "m_upperLimit", _wrap_btConstraintRow_m_upperLimit_get, _wrap_btConstraintRow_m_upperLimit_set},
    { "m_accumImpulse", _wrap_btConstraintRow_m_accumImpulse_get, _wrap_btConstraintRow_m_accumImpulse_set},
    {0,0,0}
};
static swig_lua_attribute swig_btConstraintRow_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConstraintRow_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConstraintRow_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConstraintRow_bases[] = {0};
static const char *swig_btConstraintRow_base_names[] = {0};
static swig_lua_class _wrap_class_btConstraintRow = { "btConstraintRow", &SWIGTYPE_p_btConstraintRow,_wrap_new_btConstraintRow, swig_delete_btConstraintRow, swig_btConstraintRow_methods, swig_btConstraintRow_attributes, { "btConstraintRow", swig_btConstraintRow_cls_methods, swig_btConstraintRow_cls_attributes, swig_btConstraintRow_cls_constants }, swig_btConstraintRow_bases, swig_btConstraintRow_base_names };

static int _wrap_new_btManifoldPoint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *result = 0 ;
  
  SWIG_check_num_args("btManifoldPoint::btManifoldPoint",0,0)
  result = (btManifoldPoint *)new btManifoldPoint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btManifoldPoint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btManifoldPoint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  btManifoldPoint *result = 0 ;
  
  SWIG_check_num_args("btManifoldPoint::btManifoldPoint",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btManifoldPoint::btManifoldPoint",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btManifoldPoint::btManifoldPoint",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btManifoldPoint::btManifoldPoint",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btManifoldPoint::btManifoldPoint",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btManifoldPoint",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btManifoldPoint",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btManifoldPoint",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  result = (btManifoldPoint *)new btManifoldPoint((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btManifoldPoint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btManifoldPoint(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btManifoldPoint__SWIG_0(L);
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_btManifoldPoint__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btManifoldPoint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btManifoldPoint::btManifoldPoint()\n"
    "    btManifoldPoint::btManifoldPoint(btVector3 const &,btVector3 const &,btVector3 const &,btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btManifoldPoint_m_localPointA_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btManifoldPoint::m_localPointA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_localPointA",1,"btManifoldPoint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btManifoldPoint::m_localPointA",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_localPointA_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btManifoldPoint_m_localPointA_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_localPointA = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_localPointA_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btManifoldPoint::m_localPointA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_localPointA",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_localPointA_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btVector3 *)& ((arg1)->m_localPointA);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_localPointB_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btManifoldPoint::m_localPointB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_localPointB",1,"btManifoldPoint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btManifoldPoint::m_localPointB",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_localPointB_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btManifoldPoint_m_localPointB_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_localPointB = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_localPointB_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btManifoldPoint::m_localPointB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_localPointB",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_localPointB_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btVector3 *)& ((arg1)->m_localPointB);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_positionWorldOnB_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btManifoldPoint::m_positionWorldOnB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_positionWorldOnB",1,"btManifoldPoint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btManifoldPoint::m_positionWorldOnB",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_positionWorldOnB_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btManifoldPoint_m_positionWorldOnB_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_positionWorldOnB = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_positionWorldOnB_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btManifoldPoint::m_positionWorldOnB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_positionWorldOnB",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_positionWorldOnB_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btVector3 *)& ((arg1)->m_positionWorldOnB);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_positionWorldOnA_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btManifoldPoint::m_positionWorldOnA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_positionWorldOnA",1,"btManifoldPoint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btManifoldPoint::m_positionWorldOnA",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_positionWorldOnA_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btManifoldPoint_m_positionWorldOnA_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_positionWorldOnA = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_positionWorldOnA_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btManifoldPoint::m_positionWorldOnA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_positionWorldOnA",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_positionWorldOnA_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btVector3 *)& ((arg1)->m_positionWorldOnA);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_normalWorldOnB_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btManifoldPoint::m_normalWorldOnB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_normalWorldOnB",1,"btManifoldPoint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btManifoldPoint::m_normalWorldOnB",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_normalWorldOnB_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btManifoldPoint_m_normalWorldOnB_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_normalWorldOnB = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_normalWorldOnB_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btManifoldPoint::m_normalWorldOnB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_normalWorldOnB",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_normalWorldOnB_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btVector3 *)& ((arg1)->m_normalWorldOnB);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_distance1_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::m_distance1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_distance1",1,"btManifoldPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldPoint::m_distance1",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_distance1_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_distance1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_distance1_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btManifoldPoint::m_distance1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_distance1",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_distance1_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btScalar) ((arg1)->m_distance1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_combinedFriction_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::m_combinedFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_combinedFriction",1,"btManifoldPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldPoint::m_combinedFriction",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_combinedFriction_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_combinedFriction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_combinedFriction_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btManifoldPoint::m_combinedFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_combinedFriction",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_combinedFriction_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btScalar) ((arg1)->m_combinedFriction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_combinedRollingFriction_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::m_combinedRollingFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_combinedRollingFriction",1,"btManifoldPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldPoint::m_combinedRollingFriction",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_combinedRollingFriction_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_combinedRollingFriction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_combinedRollingFriction_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btManifoldPoint::m_combinedRollingFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_combinedRollingFriction",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_combinedRollingFriction_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btScalar) ((arg1)->m_combinedRollingFriction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_combinedRestitution_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::m_combinedRestitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_combinedRestitution",1,"btManifoldPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldPoint::m_combinedRestitution",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_combinedRestitution_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_combinedRestitution = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_combinedRestitution_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btManifoldPoint::m_combinedRestitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_combinedRestitution",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_combinedRestitution_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btScalar) ((arg1)->m_combinedRestitution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_partId0_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::m_partId0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_partId0",1,"btManifoldPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldPoint::m_partId0",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_partId0_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_partId0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_partId0_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  SWIG_check_num_args("btManifoldPoint::m_partId0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_partId0",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_partId0_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (int) ((arg1)->m_partId0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_partId1_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::m_partId1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_partId1",1,"btManifoldPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldPoint::m_partId1",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_partId1_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_partId1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_partId1_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  SWIG_check_num_args("btManifoldPoint::m_partId1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_partId1",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_partId1_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (int) ((arg1)->m_partId1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_index0_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::m_index0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_index0",1,"btManifoldPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldPoint::m_index0",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_index0_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_index0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_index0_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  SWIG_check_num_args("btManifoldPoint::m_index0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_index0",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_index0_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (int) ((arg1)->m_index0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_index1_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::m_index1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_index1",1,"btManifoldPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldPoint::m_index1",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_index1_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_index1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_index1_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  SWIG_check_num_args("btManifoldPoint::m_index1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_index1",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_index1_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (int) ((arg1)->m_index1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_userPersistentData_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btManifoldPoint::m_userPersistentData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_userPersistentData",1,"btManifoldPoint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btManifoldPoint::m_userPersistentData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_userPersistentData_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btManifoldPoint_m_userPersistentData_set");
  if (arg1) (arg1)->m_userPersistentData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_userPersistentData_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btManifoldPoint::m_userPersistentData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_userPersistentData",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_userPersistentData_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (void *) ((arg1)->m_userPersistentData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_lateralFrictionInitialized_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::m_lateralFrictionInitialized",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_lateralFrictionInitialized",1,"btManifoldPoint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btManifoldPoint::m_lateralFrictionInitialized",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_lateralFrictionInitialized_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_lateralFrictionInitialized = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_lateralFrictionInitialized_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  bool result;
  
  SWIG_check_num_args("btManifoldPoint::m_lateralFrictionInitialized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_lateralFrictionInitialized",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_lateralFrictionInitialized_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (bool) ((arg1)->m_lateralFrictionInitialized);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_appliedImpulse_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::m_appliedImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_appliedImpulse",1,"btManifoldPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldPoint::m_appliedImpulse",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_appliedImpulse_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_appliedImpulse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_appliedImpulse_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btManifoldPoint::m_appliedImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_appliedImpulse",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_appliedImpulse_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btScalar) ((arg1)->m_appliedImpulse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_appliedImpulseLateral1_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::m_appliedImpulseLateral1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_appliedImpulseLateral1",1,"btManifoldPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldPoint::m_appliedImpulseLateral1",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_appliedImpulseLateral1_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_appliedImpulseLateral1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_appliedImpulseLateral1_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btManifoldPoint::m_appliedImpulseLateral1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_appliedImpulseLateral1",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_appliedImpulseLateral1_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btScalar) ((arg1)->m_appliedImpulseLateral1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_appliedImpulseLateral2_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::m_appliedImpulseLateral2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_appliedImpulseLateral2",1,"btManifoldPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldPoint::m_appliedImpulseLateral2",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_appliedImpulseLateral2_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_appliedImpulseLateral2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_appliedImpulseLateral2_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btManifoldPoint::m_appliedImpulseLateral2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_appliedImpulseLateral2",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_appliedImpulseLateral2_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btScalar) ((arg1)->m_appliedImpulseLateral2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_contactMotion1_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::m_contactMotion1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_contactMotion1",1,"btManifoldPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldPoint::m_contactMotion1",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_contactMotion1_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_contactMotion1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_contactMotion1_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btManifoldPoint::m_contactMotion1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_contactMotion1",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_contactMotion1_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btScalar) ((arg1)->m_contactMotion1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_contactMotion2_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::m_contactMotion2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_contactMotion2",1,"btManifoldPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldPoint::m_contactMotion2",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_contactMotion2_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_contactMotion2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_contactMotion2_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btManifoldPoint::m_contactMotion2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_contactMotion2",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_contactMotion2_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btScalar) ((arg1)->m_contactMotion2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_contactCFM1_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::m_contactCFM1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_contactCFM1",1,"btManifoldPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldPoint::m_contactCFM1",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_contactCFM1_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_contactCFM1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_contactCFM1_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btManifoldPoint::m_contactCFM1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_contactCFM1",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_contactCFM1_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btScalar) ((arg1)->m_contactCFM1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_contactCFM2_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::m_contactCFM2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_contactCFM2",1,"btManifoldPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldPoint::m_contactCFM2",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_contactCFM2_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_contactCFM2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_contactCFM2_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btManifoldPoint::m_contactCFM2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_contactCFM2",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_contactCFM2_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btScalar) ((arg1)->m_contactCFM2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_lifeTime_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::m_lifeTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_lifeTime",1,"btManifoldPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldPoint::m_lifeTime",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_lifeTime_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_lifeTime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_lifeTime_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  SWIG_check_num_args("btManifoldPoint::m_lifeTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_lifeTime",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_lifeTime_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (int) ((arg1)->m_lifeTime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_lateralFrictionDir1_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btManifoldPoint::m_lateralFrictionDir1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_lateralFrictionDir1",1,"btManifoldPoint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btManifoldPoint::m_lateralFrictionDir1",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_lateralFrictionDir1_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btManifoldPoint_m_lateralFrictionDir1_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_lateralFrictionDir1 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_lateralFrictionDir1_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btManifoldPoint::m_lateralFrictionDir1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_lateralFrictionDir1",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_lateralFrictionDir1_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btVector3 *)& ((arg1)->m_lateralFrictionDir1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_lateralFrictionDir2_set(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btManifoldPoint::m_lateralFrictionDir2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_lateralFrictionDir2",1,"btManifoldPoint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btManifoldPoint::m_lateralFrictionDir2",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_lateralFrictionDir2_set",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btManifoldPoint_m_lateralFrictionDir2_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_lateralFrictionDir2 = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_m_lateralFrictionDir2_get(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btManifoldPoint::m_lateralFrictionDir2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::m_lateralFrictionDir2",1,"btManifoldPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_m_lateralFrictionDir2_get",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btVector3 *)& ((arg1)->m_lateralFrictionDir2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_getDistance(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btManifoldPoint::getDistance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::getDistance",1,"btManifoldPoint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_getDistance",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btScalar)((btManifoldPoint const *)arg1)->getDistance();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_getLifeTime(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  SWIG_check_num_args("btManifoldPoint::getLifeTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::getLifeTime",1,"btManifoldPoint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_getLifeTime",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (int)((btManifoldPoint const *)arg1)->getLifeTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_getPositionWorldOnA(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btManifoldPoint::getPositionWorldOnA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::getPositionWorldOnA",1,"btManifoldPoint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_getPositionWorldOnA",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btVector3 *) &((btManifoldPoint const *)arg1)->getPositionWorldOnA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_getPositionWorldOnB(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btManifoldPoint::getPositionWorldOnB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::getPositionWorldOnB",1,"btManifoldPoint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_getPositionWorldOnB",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btVector3 *) &((btManifoldPoint const *)arg1)->getPositionWorldOnB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_setDistance(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btManifoldPoint::setDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::setDistance",1,"btManifoldPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldPoint::setDistance",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_setDistance",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setDistance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPoint_getAppliedImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btManifoldPoint::getAppliedImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldPoint::getAppliedImpulse",1,"btManifoldPoint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPoint_getAppliedImpulse",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (btScalar)((btManifoldPoint const *)arg1)->getAppliedImpulse();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btManifoldPoint(void *obj) {
btManifoldPoint *arg1 = (btManifoldPoint *) obj;
delete arg1;
}
static swig_lua_method swig_btManifoldPoint_methods[] = {
    {"getDistance", _wrap_btManifoldPoint_getDistance}, 
    {"getLifeTime", _wrap_btManifoldPoint_getLifeTime}, 
    {"getPositionWorldOnA", _wrap_btManifoldPoint_getPositionWorldOnA}, 
    {"getPositionWorldOnB", _wrap_btManifoldPoint_getPositionWorldOnB}, 
    {"setDistance", _wrap_btManifoldPoint_setDistance}, 
    {"getAppliedImpulse", _wrap_btManifoldPoint_getAppliedImpulse}, 
    {0,0}
};
static swig_lua_attribute swig_btManifoldPoint_attributes[] = {
    { "m_localPointA", _wrap_btManifoldPoint_m_localPointA_get, _wrap_btManifoldPoint_m_localPointA_set},
    { "m_localPointB", _wrap_btManifoldPoint_m_localPointB_get, _wrap_btManifoldPoint_m_localPointB_set},
    { "m_positionWorldOnB", _wrap_btManifoldPoint_m_positionWorldOnB_get, _wrap_btManifoldPoint_m_positionWorldOnB_set},
    { "m_positionWorldOnA", _wrap_btManifoldPoint_m_positionWorldOnA_get, _wrap_btManifoldPoint_m_positionWorldOnA_set},
    { "m_normalWorldOnB", _wrap_btManifoldPoint_m_normalWorldOnB_get, _wrap_btManifoldPoint_m_normalWorldOnB_set},
    { "m_distance1", _wrap_btManifoldPoint_m_distance1_get, _wrap_btManifoldPoint_m_distance1_set},
    { "m_combinedFriction", _wrap_btManifoldPoint_m_combinedFriction_get, _wrap_btManifoldPoint_m_combinedFriction_set},
    { "m_combinedRollingFriction", _wrap_btManifoldPoint_m_combinedRollingFriction_get, _wrap_btManifoldPoint_m_combinedRollingFriction_set},
    { "m_combinedRestitution", _wrap_btManifoldPoint_m_combinedRestitution_get, _wrap_btManifoldPoint_m_combinedRestitution_set},
    { "m_partId0", _wrap_btManifoldPoint_m_partId0_get, _wrap_btManifoldPoint_m_partId0_set},
    { "m_partId1", _wrap_btManifoldPoint_m_partId1_get, _wrap_btManifoldPoint_m_partId1_set},
    { "m_index0", _wrap_btManifoldPoint_m_index0_get, _wrap_btManifoldPoint_m_index0_set},
    { "m_index1", _wrap_btManifoldPoint_m_index1_get, _wrap_btManifoldPoint_m_index1_set},
    { "m_userPersistentData", _wrap_btManifoldPoint_m_userPersistentData_get, _wrap_btManifoldPoint_m_userPersistentData_set},
    { "m_lateralFrictionInitialized", _wrap_btManifoldPoint_m_lateralFrictionInitialized_get, _wrap_btManifoldPoint_m_lateralFrictionInitialized_set},
    { "m_appliedImpulse", _wrap_btManifoldPoint_m_appliedImpulse_get, _wrap_btManifoldPoint_m_appliedImpulse_set},
    { "m_appliedImpulseLateral1", _wrap_btManifoldPoint_m_appliedImpulseLateral1_get, _wrap_btManifoldPoint_m_appliedImpulseLateral1_set},
    { "m_appliedImpulseLateral2", _wrap_btManifoldPoint_m_appliedImpulseLateral2_get, _wrap_btManifoldPoint_m_appliedImpulseLateral2_set},
    { "m_contactMotion1", _wrap_btManifoldPoint_m_contactMotion1_get, _wrap_btManifoldPoint_m_contactMotion1_set},
    { "m_contactMotion2", _wrap_btManifoldPoint_m_contactMotion2_get, _wrap_btManifoldPoint_m_contactMotion2_set},
    { "m_contactCFM1", _wrap_btManifoldPoint_m_contactCFM1_get, _wrap_btManifoldPoint_m_contactCFM1_set},
    { "m_contactCFM2", _wrap_btManifoldPoint_m_contactCFM2_get, _wrap_btManifoldPoint_m_contactCFM2_set},
    { "m_lifeTime", _wrap_btManifoldPoint_m_lifeTime_get, _wrap_btManifoldPoint_m_lifeTime_set},
    { "m_lateralFrictionDir1", _wrap_btManifoldPoint_m_lateralFrictionDir1_get, _wrap_btManifoldPoint_m_lateralFrictionDir1_set},
    { "m_lateralFrictionDir2", _wrap_btManifoldPoint_m_lateralFrictionDir2_get, _wrap_btManifoldPoint_m_lateralFrictionDir2_set},
    {0,0,0}
};
static swig_lua_attribute swig_btManifoldPoint_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btManifoldPoint_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btManifoldPoint_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btManifoldPoint_bases[] = {0};
static const char *swig_btManifoldPoint_base_names[] = {0};
static swig_lua_class _wrap_class_btManifoldPoint = { "btManifoldPoint", &SWIGTYPE_p_btManifoldPoint,_wrap_new_btManifoldPoint, swig_delete_btManifoldPoint, swig_btManifoldPoint_methods, swig_btManifoldPoint_attributes, { "btManifoldPoint", swig_btManifoldPoint_cls_methods, swig_btManifoldPoint_cls_attributes, swig_btManifoldPoint_cls_constants }, swig_btManifoldPoint_bases, swig_btManifoldPoint_base_names };

static int _wrap_btMinkowskiPenetrationDepthSolver_calcPenDepth(lua_State* L) {
  int SWIG_arg = 0;
  btMinkowskiPenetrationDepthSolver *arg1 = (btMinkowskiPenetrationDepthSolver *) 0 ;
  btVoronoiSimplexSolver *arg2 = 0 ;
  btConvexShape *arg3 = (btConvexShape *) 0 ;
  btConvexShape *arg4 = (btConvexShape *) 0 ;
  btTransform *arg5 = 0 ;
  btTransform *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  btVector3 *arg9 = 0 ;
  btIDebugDraw *arg10 = (btIDebugDraw *) 0 ;
  btStackAlloc *arg11 = (btStackAlloc *) 0 ;
  bool result;
  
  SWIG_check_num_args("btMinkowskiPenetrationDepthSolver::calcPenDepth",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btMinkowskiPenetrationDepthSolver::calcPenDepth",1,"btMinkowskiPenetrationDepthSolver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btMinkowskiPenetrationDepthSolver::calcPenDepth",2,"btVoronoiSimplexSolver &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btMinkowskiPenetrationDepthSolver::calcPenDepth",3,"btConvexShape const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btMinkowskiPenetrationDepthSolver::calcPenDepth",4,"btConvexShape const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btMinkowskiPenetrationDepthSolver::calcPenDepth",5,"btTransform const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btMinkowskiPenetrationDepthSolver::calcPenDepth",6,"btTransform const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btMinkowskiPenetrationDepthSolver::calcPenDepth",7,"btVector3 &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btMinkowskiPenetrationDepthSolver::calcPenDepth",8,"btVector3 &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("btMinkowskiPenetrationDepthSolver::calcPenDepth",9,"btVector3 &");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("btMinkowskiPenetrationDepthSolver::calcPenDepth",10,"btIDebugDraw *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("btMinkowskiPenetrationDepthSolver::calcPenDepth",11,"btStackAlloc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMinkowskiPenetrationDepthSolver,0))){
    SWIG_fail_ptr("btMinkowskiPenetrationDepthSolver_calcPenDepth",1,SWIGTYPE_p_btMinkowskiPenetrationDepthSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("btMinkowskiPenetrationDepthSolver_calcPenDepth",2,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btMinkowskiPenetrationDepthSolver_calcPenDepth",3,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btMinkowskiPenetrationDepthSolver_calcPenDepth",4,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btMinkowskiPenetrationDepthSolver_calcPenDepth",5,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btMinkowskiPenetrationDepthSolver_calcPenDepth",6,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btMinkowskiPenetrationDepthSolver_calcPenDepth",7,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btMinkowskiPenetrationDepthSolver_calcPenDepth",8,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btMinkowskiPenetrationDepthSolver_calcPenDepth",9,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btMinkowskiPenetrationDepthSolver_calcPenDepth",10,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_btStackAlloc,0))){
    SWIG_fail_ptr("btMinkowskiPenetrationDepthSolver_calcPenDepth",11,SWIGTYPE_p_btStackAlloc);
  }
  
  result = (bool)(arg1)->calcPenDepth(*arg2,(btConvexShape const *)arg3,(btConvexShape const *)arg4,(btTransform const &)*arg5,(btTransform const &)*arg6,*arg7,*arg8,*arg9,arg10,arg11);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btMinkowskiPenetrationDepthSolver(lua_State* L) {
  int SWIG_arg = 0;
  btMinkowskiPenetrationDepthSolver *result = 0 ;
  
  SWIG_check_num_args("btMinkowskiPenetrationDepthSolver::btMinkowskiPenetrationDepthSolver",0,0)
  result = (btMinkowskiPenetrationDepthSolver *)new btMinkowskiPenetrationDepthSolver();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMinkowskiPenetrationDepthSolver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btMinkowskiPenetrationDepthSolver(void *obj) {
btMinkowskiPenetrationDepthSolver *arg1 = (btMinkowskiPenetrationDepthSolver *) obj;
delete arg1;
}
static swig_lua_method swig_btMinkowskiPenetrationDepthSolver_methods[] = {
    {"calcPenDepth", _wrap_btMinkowskiPenetrationDepthSolver_calcPenDepth}, 
    {0,0}
};
static swig_lua_attribute swig_btMinkowskiPenetrationDepthSolver_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btMinkowskiPenetrationDepthSolver_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btMinkowskiPenetrationDepthSolver_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btMinkowskiPenetrationDepthSolver_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btMinkowskiPenetrationDepthSolver_bases[] = {0,0};
static const char *swig_btMinkowskiPenetrationDepthSolver_base_names[] = {"btConvexPenetrationDepthSolver *",0};
static swig_lua_class _wrap_class_btMinkowskiPenetrationDepthSolver = { "btMinkowskiPenetrationDepthSolver", &SWIGTYPE_p_btMinkowskiPenetrationDepthSolver,_wrap_new_btMinkowskiPenetrationDepthSolver, swig_delete_btMinkowskiPenetrationDepthSolver, swig_btMinkowskiPenetrationDepthSolver_methods, swig_btMinkowskiPenetrationDepthSolver_attributes, { "btMinkowskiPenetrationDepthSolver", swig_btMinkowskiPenetrationDepthSolver_cls_methods, swig_btMinkowskiPenetrationDepthSolver_cls_attributes, swig_btMinkowskiPenetrationDepthSolver_cls_constants }, swig_btMinkowskiPenetrationDepthSolver_bases, swig_btMinkowskiPenetrationDepthSolver_base_names };

static int _wrap_gContactBreakingThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  
  SWIG_check_num_args("gContactBreakingThreshold",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gContactBreakingThreshold",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  gContactBreakingThreshold = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gContactBreakingThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btScalar result;
  
  SWIG_check_num_args("gContactBreakingThreshold",0,0)
  result = (btScalar)gContactBreakingThreshold;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gContactDestroyedCallback_set(lua_State* L) {
  int SWIG_arg = 0;
  ContactDestroyedCallback arg1 = (ContactDestroyedCallback) 0 ;
  
  SWIG_check_num_args("gContactDestroyedCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gContactDestroyedCallback",1,"ContactDestroyedCallback");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_f_p_void__bool,0))){
    SWIG_fail_ptr("gContactDestroyedCallback_set",1,SWIGTYPE_p_f_p_void__bool);
  }
  
  gContactDestroyedCallback = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gContactDestroyedCallback_get(lua_State* L) {
  int SWIG_arg = 0;
  ContactDestroyedCallback result;
  
  SWIG_check_num_args("gContactDestroyedCallback",0,0)
  result = (ContactDestroyedCallback)gContactDestroyedCallback;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_void__bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gContactProcessedCallback_set(lua_State* L) {
  int SWIG_arg = 0;
  ContactProcessedCallback arg1 = (ContactProcessedCallback) 0 ;
  
  SWIG_check_num_args("gContactProcessedCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gContactProcessedCallback",1,"ContactProcessedCallback");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_f_r_btManifoldPoint_p_void_p_void__bool,0))){
    SWIG_fail_ptr("gContactProcessedCallback_set",1,SWIGTYPE_p_f_r_btManifoldPoint_p_void_p_void__bool);
  }
  
  gContactProcessedCallback = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gContactProcessedCallback_get(lua_State* L) {
  int SWIG_arg = 0;
  ContactProcessedCallback result;
  
  SWIG_check_num_args("gContactProcessedCallback",0,0)
  result = (ContactProcessedCallback)gContactProcessedCallback;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_r_btManifoldPoint_p_void_p_void__bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_m_companionIdA_set(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btPersistentManifold::m_companionIdA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::m_companionIdA",1,"btPersistentManifold *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPersistentManifold::m_companionIdA",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_m_companionIdA_set",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_companionIdA = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_m_companionIdA_get(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int result;
  
  SWIG_check_num_args("btPersistentManifold::m_companionIdA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::m_companionIdA",1,"btPersistentManifold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_m_companionIdA_get",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  result = (int) ((arg1)->m_companionIdA);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_m_companionIdB_set(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btPersistentManifold::m_companionIdB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::m_companionIdB",1,"btPersistentManifold *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPersistentManifold::m_companionIdB",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_m_companionIdB_set",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_companionIdB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_m_companionIdB_get(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int result;
  
  SWIG_check_num_args("btPersistentManifold::m_companionIdB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::m_companionIdB",1,"btPersistentManifold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_m_companionIdB_get",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  result = (int) ((arg1)->m_companionIdB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_m_index1a_set(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btPersistentManifold::m_index1a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::m_index1a",1,"btPersistentManifold *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPersistentManifold::m_index1a",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_m_index1a_set",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_index1a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_m_index1a_get(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int result;
  
  SWIG_check_num_args("btPersistentManifold::m_index1a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::m_index1a",1,"btPersistentManifold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_m_index1a_get",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  result = (int) ((arg1)->m_index1a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btPersistentManifold__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *result = 0 ;
  
  SWIG_check_num_args("btPersistentManifold::btPersistentManifold",0,0)
  result = (btPersistentManifold *)new btPersistentManifold();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPersistentManifold,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btPersistentManifold__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  int arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btPersistentManifold *result = 0 ;
  
  SWIG_check_num_args("btPersistentManifold::btPersistentManifold",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::btPersistentManifold",1,"btCollisionObject const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPersistentManifold::btPersistentManifold",2,"btCollisionObject const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btPersistentManifold::btPersistentManifold",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btPersistentManifold::btPersistentManifold",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btPersistentManifold::btPersistentManifold",5,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("new_btPersistentManifold",1,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("new_btPersistentManifold",2,SWIGTYPE_p_btCollisionObject);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (btScalar)lua_tonumber(L, 5);
  result = (btPersistentManifold *)new btPersistentManifold((btCollisionObject const *)arg1,(btCollisionObject const *)arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPersistentManifold,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btPersistentManifold(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btPersistentManifold__SWIG_0(L);
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_btPersistentManifold__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btPersistentManifold'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btPersistentManifold::btPersistentManifold()\n"
    "    btPersistentManifold::btPersistentManifold(btCollisionObject const *,btCollisionObject const *,int,btScalar,btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btPersistentManifold_getBody0(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btCollisionObject *result = 0 ;
  
  SWIG_check_num_args("btPersistentManifold::getBody0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::getBody0",1,"btPersistentManifold const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_getBody0",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  result = (btCollisionObject *)((btPersistentManifold const *)arg1)->getBody0();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_getBody1(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btCollisionObject *result = 0 ;
  
  SWIG_check_num_args("btPersistentManifold::getBody1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::getBody1",1,"btPersistentManifold const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_getBody1",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  result = (btCollisionObject *)((btPersistentManifold const *)arg1)->getBody1();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_setBodies(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  
  SWIG_check_num_args("btPersistentManifold::setBodies",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::setBodies",1,"btPersistentManifold *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPersistentManifold::setBodies",2,"btCollisionObject const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btPersistentManifold::setBodies",3,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_setBodies",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btPersistentManifold_setBodies",2,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btPersistentManifold_setBodies",3,SWIGTYPE_p_btCollisionObject);
  }
  
  (arg1)->setBodies((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_clearUserCache(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  
  SWIG_check_num_args("btPersistentManifold::clearUserCache",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::clearUserCache",1,"btPersistentManifold *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPersistentManifold::clearUserCache",2,"btManifoldPoint &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_clearUserCache",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btPersistentManifold_clearUserCache",2,SWIGTYPE_p_btManifoldPoint);
  }
  
  (arg1)->clearUserCache(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_getNumContacts(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int result;
  
  SWIG_check_num_args("btPersistentManifold::getNumContacts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::getNumContacts",1,"btPersistentManifold const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_getNumContacts",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  result = (int)((btPersistentManifold const *)arg1)->getNumContacts();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_setNumContacts(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btPersistentManifold::setNumContacts",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::setNumContacts",1,"btPersistentManifold *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPersistentManifold::setNumContacts",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_setNumContacts",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setNumContacts(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_getContactPoint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  btManifoldPoint *result = 0 ;
  
  SWIG_check_num_args("btPersistentManifold::getContactPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::getContactPoint",1,"btPersistentManifold const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPersistentManifold::getContactPoint",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_getContactPoint",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btManifoldPoint *) &((btPersistentManifold const *)arg1)->getContactPoint(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btManifoldPoint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_getContactPoint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  btManifoldPoint *result = 0 ;
  
  SWIG_check_num_args("btPersistentManifold::getContactPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::getContactPoint",1,"btPersistentManifold *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPersistentManifold::getContactPoint",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_getContactPoint",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btManifoldPoint *) &(arg1)->getContactPoint(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btManifoldPoint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_getContactPoint(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btPersistentManifold, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btPersistentManifold_getContactPoint__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btPersistentManifold, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btPersistentManifold_getContactPoint__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btPersistentManifold_getContactPoint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btPersistentManifold::getContactPoint(int) const\n"
    "    btPersistentManifold::getContactPoint(int)\n");
  lua_error(L);return 0;
}


static int _wrap_btPersistentManifold_getContactBreakingThreshold(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btPersistentManifold::getContactBreakingThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::getContactBreakingThreshold",1,"btPersistentManifold const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_getContactBreakingThreshold",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  result = (btScalar)((btPersistentManifold const *)arg1)->getContactBreakingThreshold();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_getContactProcessingThreshold(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btPersistentManifold::getContactProcessingThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::getContactProcessingThreshold",1,"btPersistentManifold const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_getContactProcessingThreshold",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  result = (btScalar)((btPersistentManifold const *)arg1)->getContactProcessingThreshold();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_setContactBreakingThreshold(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btPersistentManifold::setContactBreakingThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::setContactBreakingThreshold",1,"btPersistentManifold *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPersistentManifold::setContactBreakingThreshold",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_setContactBreakingThreshold",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setContactBreakingThreshold(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_setContactProcessingThreshold(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btPersistentManifold::setContactProcessingThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::setContactProcessingThreshold",1,"btPersistentManifold *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPersistentManifold::setContactProcessingThreshold",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_setContactProcessingThreshold",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setContactProcessingThreshold(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_getCacheEntry(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("btPersistentManifold::getCacheEntry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::getCacheEntry",1,"btPersistentManifold const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPersistentManifold::getCacheEntry",2,"btManifoldPoint const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_getCacheEntry",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btPersistentManifold_getCacheEntry",2,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (int)((btPersistentManifold const *)arg1)->getCacheEntry((btManifoldPoint const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_addManifoldPoint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  SWIG_check_num_args("btPersistentManifold::addManifoldPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::addManifoldPoint",1,"btPersistentManifold *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPersistentManifold::addManifoldPoint",2,"btManifoldPoint const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("btPersistentManifold::addManifoldPoint",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_addManifoldPoint",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btPersistentManifold_addManifoldPoint",2,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (int)(arg1)->addManifoldPoint((btManifoldPoint const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_addManifoldPoint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("btPersistentManifold::addManifoldPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::addManifoldPoint",1,"btPersistentManifold *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPersistentManifold::addManifoldPoint",2,"btManifoldPoint const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_addManifoldPoint",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btPersistentManifold_addManifoldPoint",2,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (int)(arg1)->addManifoldPoint((btManifoldPoint const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_addManifoldPoint(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btPersistentManifold, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btManifoldPoint, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btPersistentManifold_addManifoldPoint__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btPersistentManifold, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btManifoldPoint, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_btPersistentManifold_addManifoldPoint__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btPersistentManifold_addManifoldPoint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btPersistentManifold::addManifoldPoint(btManifoldPoint const &,bool)\n"
    "    btPersistentManifold::addManifoldPoint(btManifoldPoint const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btPersistentManifold_removeContactPoint(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btPersistentManifold::removeContactPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::removeContactPoint",1,"btPersistentManifold *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPersistentManifold::removeContactPoint",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_removeContactPoint",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->removeContactPoint(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_replaceContactPoint(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("btPersistentManifold::replaceContactPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::replaceContactPoint",1,"btPersistentManifold *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPersistentManifold::replaceContactPoint",2,"btManifoldPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btPersistentManifold::replaceContactPoint",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_replaceContactPoint",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btPersistentManifold_replaceContactPoint",2,SWIGTYPE_p_btManifoldPoint);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->replaceContactPoint((btManifoldPoint const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_validContactDistance(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("btPersistentManifold::validContactDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::validContactDistance",1,"btPersistentManifold const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPersistentManifold::validContactDistance",2,"btManifoldPoint const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_validContactDistance",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btPersistentManifold_validContactDistance",2,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = (bool)((btPersistentManifold const *)arg1)->validContactDistance((btManifoldPoint const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_refreshContactPoints(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  SWIG_check_num_args("btPersistentManifold::refreshContactPoints",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::refreshContactPoints",1,"btPersistentManifold *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPersistentManifold::refreshContactPoints",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btPersistentManifold::refreshContactPoints",3,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_refreshContactPoints",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btPersistentManifold_refreshContactPoints",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btPersistentManifold_refreshContactPoints",3,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->refreshContactPoints((btTransform const &)*arg2,(btTransform const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPersistentManifold_clearManifold(lua_State* L) {
  int SWIG_arg = 0;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  
  SWIG_check_num_args("btPersistentManifold::clearManifold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPersistentManifold::clearManifold",1,"btPersistentManifold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btPersistentManifold_clearManifold",1,SWIGTYPE_p_btPersistentManifold);
  }
  
  (arg1)->clearManifold();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btPersistentManifold(void *obj) {
btPersistentManifold *arg1 = (btPersistentManifold *) obj;
delete arg1;
}
static swig_lua_method swig_btPersistentManifold_methods[] = {
    {"getBody0", _wrap_btPersistentManifold_getBody0}, 
    {"getBody1", _wrap_btPersistentManifold_getBody1}, 
    {"setBodies", _wrap_btPersistentManifold_setBodies}, 
    {"clearUserCache", _wrap_btPersistentManifold_clearUserCache}, 
    {"getNumContacts", _wrap_btPersistentManifold_getNumContacts}, 
    {"setNumContacts", _wrap_btPersistentManifold_setNumContacts}, 
    {"getContactPoint", _wrap_btPersistentManifold_getContactPoint}, 
    {"getContactBreakingThreshold", _wrap_btPersistentManifold_getContactBreakingThreshold}, 
    {"getContactProcessingThreshold", _wrap_btPersistentManifold_getContactProcessingThreshold}, 
    {"setContactBreakingThreshold", _wrap_btPersistentManifold_setContactBreakingThreshold}, 
    {"setContactProcessingThreshold", _wrap_btPersistentManifold_setContactProcessingThreshold}, 
    {"getCacheEntry", _wrap_btPersistentManifold_getCacheEntry}, 
    {"addManifoldPoint", _wrap_btPersistentManifold_addManifoldPoint}, 
    {"removeContactPoint", _wrap_btPersistentManifold_removeContactPoint}, 
    {"replaceContactPoint", _wrap_btPersistentManifold_replaceContactPoint}, 
    {"validContactDistance", _wrap_btPersistentManifold_validContactDistance}, 
    {"refreshContactPoints", _wrap_btPersistentManifold_refreshContactPoints}, 
    {"clearManifold", _wrap_btPersistentManifold_clearManifold}, 
    {0,0}
};
static swig_lua_attribute swig_btPersistentManifold_attributes[] = {
    { "m_companionIdA", _wrap_btPersistentManifold_m_companionIdA_get, _wrap_btPersistentManifold_m_companionIdA_set},
    { "m_companionIdB", _wrap_btPersistentManifold_m_companionIdB_get, _wrap_btPersistentManifold_m_companionIdB_set},
    { "m_index1a", _wrap_btPersistentManifold_m_index1a_get, _wrap_btPersistentManifold_m_index1a_set},
    {0,0,0}
};
static swig_lua_attribute swig_btPersistentManifold_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btPersistentManifold_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btPersistentManifold_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btPersistentManifold_bases[] = {0,0};
static const char *swig_btPersistentManifold_base_names[] = {"btTypedObject *",0};
static swig_lua_class _wrap_class_btPersistentManifold = { "btPersistentManifold", &SWIGTYPE_p_btPersistentManifold,_wrap_new_btPersistentManifold, swig_delete_btPersistentManifold, swig_btPersistentManifold_methods, swig_btPersistentManifold_attributes, { "btPersistentManifold", swig_btPersistentManifold_cls_methods, swig_btPersistentManifold_cls_attributes, swig_btPersistentManifold_cls_constants }, swig_btPersistentManifold_bases, swig_btPersistentManifold_base_names };

static int _wrap_btDiscreteCollisionDetectorInterface_getClosestPoints__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteCollisionDetectorInterface *arg1 = (btDiscreteCollisionDetectorInterface *) 0 ;
  btDiscreteCollisionDetectorInterface::ClosestPointInput *arg2 = 0 ;
  btDiscreteCollisionDetectorInterface::Result *arg3 = 0 ;
  btIDebugDraw *arg4 = (btIDebugDraw *) 0 ;
  bool arg5 ;
  
  SWIG_check_num_args("btDiscreteCollisionDetectorInterface::getClosestPoints",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteCollisionDetectorInterface::getClosestPoints",1,"btDiscreteCollisionDetectorInterface *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btDiscreteCollisionDetectorInterface::getClosestPoints",2,"btDiscreteCollisionDetectorInterface::ClosestPointInput const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btDiscreteCollisionDetectorInterface::getClosestPoints",3,"btDiscreteCollisionDetectorInterface::Result &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btDiscreteCollisionDetectorInterface::getClosestPoints",4,"btIDebugDraw *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("btDiscreteCollisionDetectorInterface::getClosestPoints",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteCollisionDetectorInterface,0))){
    SWIG_fail_ptr("btDiscreteCollisionDetectorInterface_getClosestPoints",1,SWIGTYPE_p_btDiscreteCollisionDetectorInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDiscreteCollisionDetectorInterface__ClosestPointInput,0))){
    SWIG_fail_ptr("btDiscreteCollisionDetectorInterface_getClosestPoints",2,SWIGTYPE_p_btDiscreteCollisionDetectorInterface__ClosestPointInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDiscreteCollisionDetectorInterface__Result,0))){
    SWIG_fail_ptr("btDiscreteCollisionDetectorInterface_getClosestPoints",3,SWIGTYPE_p_btDiscreteCollisionDetectorInterface__Result);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btDiscreteCollisionDetectorInterface_getClosestPoints",4,SWIGTYPE_p_btIDebugDraw);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->getClosestPoints((btDiscreteCollisionDetectorInterface::ClosestPointInput const &)*arg2,*arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteCollisionDetectorInterface_getClosestPoints__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteCollisionDetectorInterface *arg1 = (btDiscreteCollisionDetectorInterface *) 0 ;
  btDiscreteCollisionDetectorInterface::ClosestPointInput *arg2 = 0 ;
  btDiscreteCollisionDetectorInterface::Result *arg3 = 0 ;
  btIDebugDraw *arg4 = (btIDebugDraw *) 0 ;
  
  SWIG_check_num_args("btDiscreteCollisionDetectorInterface::getClosestPoints",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteCollisionDetectorInterface::getClosestPoints",1,"btDiscreteCollisionDetectorInterface *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btDiscreteCollisionDetectorInterface::getClosestPoints",2,"btDiscreteCollisionDetectorInterface::ClosestPointInput const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btDiscreteCollisionDetectorInterface::getClosestPoints",3,"btDiscreteCollisionDetectorInterface::Result &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btDiscreteCollisionDetectorInterface::getClosestPoints",4,"btIDebugDraw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteCollisionDetectorInterface,0))){
    SWIG_fail_ptr("btDiscreteCollisionDetectorInterface_getClosestPoints",1,SWIGTYPE_p_btDiscreteCollisionDetectorInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDiscreteCollisionDetectorInterface__ClosestPointInput,0))){
    SWIG_fail_ptr("btDiscreteCollisionDetectorInterface_getClosestPoints",2,SWIGTYPE_p_btDiscreteCollisionDetectorInterface__ClosestPointInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDiscreteCollisionDetectorInterface__Result,0))){
    SWIG_fail_ptr("btDiscreteCollisionDetectorInterface_getClosestPoints",3,SWIGTYPE_p_btDiscreteCollisionDetectorInterface__Result);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btDiscreteCollisionDetectorInterface_getClosestPoints",4,SWIGTYPE_p_btIDebugDraw);
  }
  
  (arg1)->getClosestPoints((btDiscreteCollisionDetectorInterface::ClosestPointInput const &)*arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteCollisionDetectorInterface_getClosestPoints(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDiscreteCollisionDetectorInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btDiscreteCollisionDetectorInterface__ClosestPointInput, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btDiscreteCollisionDetectorInterface__Result, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btIDebugDraw, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btDiscreteCollisionDetectorInterface_getClosestPoints__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDiscreteCollisionDetectorInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btDiscreteCollisionDetectorInterface__ClosestPointInput, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btDiscreteCollisionDetectorInterface__Result, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btIDebugDraw, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_btDiscreteCollisionDetectorInterface_getClosestPoints__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btDiscreteCollisionDetectorInterface_getClosestPoints'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btDiscreteCollisionDetectorInterface::getClosestPoints(btDiscreteCollisionDetectorInterface::ClosestPointInput const &,btDiscreteCollisionDetectorInterface::Result &,btIDebugDraw *,bool)\n"
    "    btDiscreteCollisionDetectorInterface::getClosestPoints(btDiscreteCollisionDetectorInterface::ClosestPointInput const &,btDiscreteCollisionDetectorInterface::Result &,btIDebugDraw *)\n");
  lua_error(L);return 0;
}


static void swig_delete_btDiscreteCollisionDetectorInterface(void *obj) {
btDiscreteCollisionDetectorInterface *arg1 = (btDiscreteCollisionDetectorInterface *) obj;
delete arg1;
}
static swig_lua_method swig_btDiscreteCollisionDetectorInterface_methods[] = {
    {"getClosestPoints", _wrap_btDiscreteCollisionDetectorInterface_getClosestPoints}, 
    {0,0}
};
static swig_lua_attribute swig_btDiscreteCollisionDetectorInterface_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btDiscreteCollisionDetectorInterface_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btDiscreteCollisionDetectorInterface_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btDiscreteCollisionDetectorInterface_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btDiscreteCollisionDetectorInterface_bases[] = {0};
static const char *swig_btDiscreteCollisionDetectorInterface_base_names[] = {0};
static swig_lua_class _wrap_class_btDiscreteCollisionDetectorInterface = { "btDiscreteCollisionDetectorInterface", &SWIGTYPE_p_btDiscreteCollisionDetectorInterface,0, swig_delete_btDiscreteCollisionDetectorInterface, swig_btDiscreteCollisionDetectorInterface_methods, swig_btDiscreteCollisionDetectorInterface_attributes, { "btDiscreteCollisionDetectorInterface", swig_btDiscreteCollisionDetectorInterface_cls_methods, swig_btDiscreteCollisionDetectorInterface_cls_attributes, swig_btDiscreteCollisionDetectorInterface_cls_constants }, swig_btDiscreteCollisionDetectorInterface_bases, swig_btDiscreteCollisionDetectorInterface_base_names };

static int _wrap_btStorageResult_m_normalOnSurfaceB_set(lua_State* L) {
  int SWIG_arg = 0;
  btStorageResult *arg1 = (btStorageResult *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btStorageResult::m_normalOnSurfaceB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStorageResult::m_normalOnSurfaceB",1,"btStorageResult *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btStorageResult::m_normalOnSurfaceB",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStorageResult,0))){
    SWIG_fail_ptr("btStorageResult_m_normalOnSurfaceB_set",1,SWIGTYPE_p_btStorageResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btStorageResult_m_normalOnSurfaceB_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_normalOnSurfaceB = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStorageResult_m_normalOnSurfaceB_get(lua_State* L) {
  int SWIG_arg = 0;
  btStorageResult *arg1 = (btStorageResult *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btStorageResult::m_normalOnSurfaceB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStorageResult::m_normalOnSurfaceB",1,"btStorageResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStorageResult,0))){
    SWIG_fail_ptr("btStorageResult_m_normalOnSurfaceB_get",1,SWIGTYPE_p_btStorageResult);
  }
  
  result = (btVector3 *)& ((arg1)->m_normalOnSurfaceB);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStorageResult_m_closestPointInB_set(lua_State* L) {
  int SWIG_arg = 0;
  btStorageResult *arg1 = (btStorageResult *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btStorageResult::m_closestPointInB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStorageResult::m_closestPointInB",1,"btStorageResult *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btStorageResult::m_closestPointInB",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStorageResult,0))){
    SWIG_fail_ptr("btStorageResult_m_closestPointInB_set",1,SWIGTYPE_p_btStorageResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btStorageResult_m_closestPointInB_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_closestPointInB = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStorageResult_m_closestPointInB_get(lua_State* L) {
  int SWIG_arg = 0;
  btStorageResult *arg1 = (btStorageResult *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btStorageResult::m_closestPointInB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStorageResult::m_closestPointInB",1,"btStorageResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStorageResult,0))){
    SWIG_fail_ptr("btStorageResult_m_closestPointInB_get",1,SWIGTYPE_p_btStorageResult);
  }
  
  result = (btVector3 *)& ((arg1)->m_closestPointInB);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStorageResult_m_distance_set(lua_State* L) {
  int SWIG_arg = 0;
  btStorageResult *arg1 = (btStorageResult *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btStorageResult::m_distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStorageResult::m_distance",1,"btStorageResult *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btStorageResult::m_distance",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStorageResult,0))){
    SWIG_fail_ptr("btStorageResult_m_distance_set",1,SWIGTYPE_p_btStorageResult);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_distance = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStorageResult_m_distance_get(lua_State* L) {
  int SWIG_arg = 0;
  btStorageResult *arg1 = (btStorageResult *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btStorageResult::m_distance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStorageResult::m_distance",1,"btStorageResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStorageResult,0))){
    SWIG_fail_ptr("btStorageResult_m_distance_get",1,SWIGTYPE_p_btStorageResult);
  }
  
  result = (btScalar) ((arg1)->m_distance);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btStorageResult(lua_State* L) {
  int SWIG_arg = 0;
  btStorageResult *result = 0 ;
  
  SWIG_check_num_args("btStorageResult::btStorageResult",0,0)
  result = (btStorageResult *)new btStorageResult();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btStorageResult,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btStorageResult_addContactPoint(lua_State* L) {
  int SWIG_arg = 0;
  btStorageResult *arg1 = (btStorageResult *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  SWIG_check_num_args("btStorageResult::addContactPoint",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btStorageResult::addContactPoint",1,"btStorageResult *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btStorageResult::addContactPoint",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btStorageResult::addContactPoint",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btStorageResult::addContactPoint",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btStorageResult,0))){
    SWIG_fail_ptr("btStorageResult_addContactPoint",1,SWIGTYPE_p_btStorageResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btStorageResult_addContactPoint",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btStorageResult_addContactPoint",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  (arg1)->addContactPoint((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btStorageResult(void *obj) {
btStorageResult *arg1 = (btStorageResult *) obj;
delete arg1;
}
static swig_lua_method swig_btStorageResult_methods[] = {
    {"addContactPoint", _wrap_btStorageResult_addContactPoint}, 
    {0,0}
};
static swig_lua_attribute swig_btStorageResult_attributes[] = {
    { "m_normalOnSurfaceB", _wrap_btStorageResult_m_normalOnSurfaceB_get, _wrap_btStorageResult_m_normalOnSurfaceB_set},
    { "m_closestPointInB", _wrap_btStorageResult_m_closestPointInB_get, _wrap_btStorageResult_m_closestPointInB_set},
    { "m_distance", _wrap_btStorageResult_m_distance_get, _wrap_btStorageResult_m_distance_set},
    {0,0,0}
};
static swig_lua_attribute swig_btStorageResult_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btStorageResult_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btStorageResult_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btStorageResult_bases[] = {0};
static const char *swig_btStorageResult_base_names[] = {0};
static swig_lua_class _wrap_class_btStorageResult = { "btStorageResult", &SWIGTYPE_p_btStorageResult,_wrap_new_btStorageResult, swig_delete_btStorageResult, swig_btStorageResult_methods, swig_btStorageResult_attributes, { "btStorageResult", swig_btStorageResult_cls_methods, swig_btStorageResult_cls_attributes, swig_btStorageResult_cls_constants }, swig_btStorageResult_bases, swig_btStorageResult_base_names };

static int _wrap_btPointCollector_m_normalOnBInWorld_set(lua_State* L) {
  int SWIG_arg = 0;
  btPointCollector *arg1 = (btPointCollector *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btPointCollector::m_normalOnBInWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPointCollector::m_normalOnBInWorld",1,"btPointCollector *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPointCollector::m_normalOnBInWorld",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPointCollector,0))){
    SWIG_fail_ptr("btPointCollector_m_normalOnBInWorld_set",1,SWIGTYPE_p_btPointCollector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPointCollector_m_normalOnBInWorld_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_normalOnBInWorld = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPointCollector_m_normalOnBInWorld_get(lua_State* L) {
  int SWIG_arg = 0;
  btPointCollector *arg1 = (btPointCollector *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btPointCollector::m_normalOnBInWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPointCollector::m_normalOnBInWorld",1,"btPointCollector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPointCollector,0))){
    SWIG_fail_ptr("btPointCollector_m_normalOnBInWorld_get",1,SWIGTYPE_p_btPointCollector);
  }
  
  result = (btVector3 *)& ((arg1)->m_normalOnBInWorld);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPointCollector_m_pointInWorld_set(lua_State* L) {
  int SWIG_arg = 0;
  btPointCollector *arg1 = (btPointCollector *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btPointCollector::m_pointInWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPointCollector::m_pointInWorld",1,"btPointCollector *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPointCollector::m_pointInWorld",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPointCollector,0))){
    SWIG_fail_ptr("btPointCollector_m_pointInWorld_set",1,SWIGTYPE_p_btPointCollector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPointCollector_m_pointInWorld_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_pointInWorld = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPointCollector_m_pointInWorld_get(lua_State* L) {
  int SWIG_arg = 0;
  btPointCollector *arg1 = (btPointCollector *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btPointCollector::m_pointInWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPointCollector::m_pointInWorld",1,"btPointCollector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPointCollector,0))){
    SWIG_fail_ptr("btPointCollector_m_pointInWorld_get",1,SWIGTYPE_p_btPointCollector);
  }
  
  result = (btVector3 *)& ((arg1)->m_pointInWorld);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPointCollector_m_distance_set(lua_State* L) {
  int SWIG_arg = 0;
  btPointCollector *arg1 = (btPointCollector *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btPointCollector::m_distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPointCollector::m_distance",1,"btPointCollector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPointCollector::m_distance",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPointCollector,0))){
    SWIG_fail_ptr("btPointCollector_m_distance_set",1,SWIGTYPE_p_btPointCollector);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_distance = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPointCollector_m_distance_get(lua_State* L) {
  int SWIG_arg = 0;
  btPointCollector *arg1 = (btPointCollector *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btPointCollector::m_distance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPointCollector::m_distance",1,"btPointCollector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPointCollector,0))){
    SWIG_fail_ptr("btPointCollector_m_distance_get",1,SWIGTYPE_p_btPointCollector);
  }
  
  result = (btScalar) ((arg1)->m_distance);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPointCollector_m_hasResult_set(lua_State* L) {
  int SWIG_arg = 0;
  btPointCollector *arg1 = (btPointCollector *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btPointCollector::m_hasResult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPointCollector::m_hasResult",1,"btPointCollector *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btPointCollector::m_hasResult",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPointCollector,0))){
    SWIG_fail_ptr("btPointCollector_m_hasResult_set",1,SWIGTYPE_p_btPointCollector);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_hasResult = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPointCollector_m_hasResult_get(lua_State* L) {
  int SWIG_arg = 0;
  btPointCollector *arg1 = (btPointCollector *) 0 ;
  bool result;
  
  SWIG_check_num_args("btPointCollector::m_hasResult",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPointCollector::m_hasResult",1,"btPointCollector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPointCollector,0))){
    SWIG_fail_ptr("btPointCollector_m_hasResult_get",1,SWIGTYPE_p_btPointCollector);
  }
  
  result = (bool) ((arg1)->m_hasResult);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btPointCollector(lua_State* L) {
  int SWIG_arg = 0;
  btPointCollector *result = 0 ;
  
  SWIG_check_num_args("btPointCollector::btPointCollector",0,0)
  result = (btPointCollector *)new btPointCollector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPointCollector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPointCollector_setShapeIdentifiersA(lua_State* L) {
  int SWIG_arg = 0;
  btPointCollector *arg1 = (btPointCollector *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("btPointCollector::setShapeIdentifiersA",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPointCollector::setShapeIdentifiersA",1,"btPointCollector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPointCollector::setShapeIdentifiersA",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btPointCollector::setShapeIdentifiersA",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPointCollector,0))){
    SWIG_fail_ptr("btPointCollector_setShapeIdentifiersA",1,SWIGTYPE_p_btPointCollector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setShapeIdentifiersA(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPointCollector_setShapeIdentifiersB(lua_State* L) {
  int SWIG_arg = 0;
  btPointCollector *arg1 = (btPointCollector *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("btPointCollector::setShapeIdentifiersB",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPointCollector::setShapeIdentifiersB",1,"btPointCollector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPointCollector::setShapeIdentifiersB",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btPointCollector::setShapeIdentifiersB",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPointCollector,0))){
    SWIG_fail_ptr("btPointCollector_setShapeIdentifiersB",1,SWIGTYPE_p_btPointCollector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setShapeIdentifiersB(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPointCollector_addContactPoint(lua_State* L) {
  int SWIG_arg = 0;
  btPointCollector *arg1 = (btPointCollector *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  SWIG_check_num_args("btPointCollector::addContactPoint",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPointCollector::addContactPoint",1,"btPointCollector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPointCollector::addContactPoint",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btPointCollector::addContactPoint",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btPointCollector::addContactPoint",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPointCollector,0))){
    SWIG_fail_ptr("btPointCollector_addContactPoint",1,SWIGTYPE_p_btPointCollector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPointCollector_addContactPoint",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPointCollector_addContactPoint",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  (arg1)->addContactPoint((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btPointCollector(void *obj) {
btPointCollector *arg1 = (btPointCollector *) obj;
delete arg1;
}
static swig_lua_method swig_btPointCollector_methods[] = {
    {"setShapeIdentifiersA", _wrap_btPointCollector_setShapeIdentifiersA}, 
    {"setShapeIdentifiersB", _wrap_btPointCollector_setShapeIdentifiersB}, 
    {"addContactPoint", _wrap_btPointCollector_addContactPoint}, 
    {0,0}
};
static swig_lua_attribute swig_btPointCollector_attributes[] = {
    { "m_normalOnBInWorld", _wrap_btPointCollector_m_normalOnBInWorld_get, _wrap_btPointCollector_m_normalOnBInWorld_set},
    { "m_pointInWorld", _wrap_btPointCollector_m_pointInWorld_get, _wrap_btPointCollector_m_pointInWorld_set},
    { "m_distance", _wrap_btPointCollector_m_distance_get, _wrap_btPointCollector_m_distance_set},
    { "m_hasResult", _wrap_btPointCollector_m_hasResult_get, _wrap_btPointCollector_m_hasResult_set},
    {0,0,0}
};
static swig_lua_attribute swig_btPointCollector_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btPointCollector_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btPointCollector_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btPointCollector_bases[] = {0};
static const char *swig_btPointCollector_base_names[] = {0};
static swig_lua_class _wrap_class_btPointCollector = { "btPointCollector", &SWIGTYPE_p_btPointCollector,_wrap_new_btPointCollector, swig_delete_btPointCollector, swig_btPointCollector_methods, swig_btPointCollector_attributes, { "btPointCollector", swig_btPointCollector_cls_methods, swig_btPointCollector_cls_attributes, swig_btPointCollector_cls_constants }, swig_btPointCollector_bases, swig_btPointCollector_base_names };

static int _wrap_btTriangleRaycastCallback_m_from_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleRaycastCallback *arg1 = (btTriangleRaycastCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btTriangleRaycastCallback::m_from",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleRaycastCallback::m_from",1,"btTriangleRaycastCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleRaycastCallback::m_from",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleRaycastCallback,0))){
    SWIG_fail_ptr("btTriangleRaycastCallback_m_from_set",1,SWIGTYPE_p_btTriangleRaycastCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleRaycastCallback_m_from_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_from = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleRaycastCallback_m_from_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleRaycastCallback *arg1 = (btTriangleRaycastCallback *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTriangleRaycastCallback::m_from",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleRaycastCallback::m_from",1,"btTriangleRaycastCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleRaycastCallback,0))){
    SWIG_fail_ptr("btTriangleRaycastCallback_m_from_get",1,SWIGTYPE_p_btTriangleRaycastCallback);
  }
  
  result = (btVector3 *)& ((arg1)->m_from);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleRaycastCallback_m_to_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleRaycastCallback *arg1 = (btTriangleRaycastCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btTriangleRaycastCallback::m_to",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleRaycastCallback::m_to",1,"btTriangleRaycastCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleRaycastCallback::m_to",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleRaycastCallback,0))){
    SWIG_fail_ptr("btTriangleRaycastCallback_m_to_set",1,SWIGTYPE_p_btTriangleRaycastCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleRaycastCallback_m_to_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_to = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleRaycastCallback_m_to_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleRaycastCallback *arg1 = (btTriangleRaycastCallback *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTriangleRaycastCallback::m_to",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleRaycastCallback::m_to",1,"btTriangleRaycastCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleRaycastCallback,0))){
    SWIG_fail_ptr("btTriangleRaycastCallback_m_to_get",1,SWIGTYPE_p_btTriangleRaycastCallback);
  }
  
  result = (btVector3 *)& ((arg1)->m_to);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleRaycastCallback_m_flags_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleRaycastCallback *arg1 = (btTriangleRaycastCallback *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("btTriangleRaycastCallback::m_flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleRaycastCallback::m_flags",1,"btTriangleRaycastCallback *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleRaycastCallback::m_flags",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleRaycastCallback,0))){
    SWIG_fail_ptr("btTriangleRaycastCallback_m_flags_set",1,SWIGTYPE_p_btTriangleRaycastCallback);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleRaycastCallback_m_flags_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleRaycastCallback *arg1 = (btTriangleRaycastCallback *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("btTriangleRaycastCallback::m_flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleRaycastCallback::m_flags",1,"btTriangleRaycastCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleRaycastCallback,0))){
    SWIG_fail_ptr("btTriangleRaycastCallback_m_flags_get",1,SWIGTYPE_p_btTriangleRaycastCallback);
  }
  
  result = (unsigned int) ((arg1)->m_flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleRaycastCallback_m_hitFraction_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleRaycastCallback *arg1 = (btTriangleRaycastCallback *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTriangleRaycastCallback::m_hitFraction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleRaycastCallback::m_hitFraction",1,"btTriangleRaycastCallback *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleRaycastCallback::m_hitFraction",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleRaycastCallback,0))){
    SWIG_fail_ptr("btTriangleRaycastCallback_m_hitFraction_set",1,SWIGTYPE_p_btTriangleRaycastCallback);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_hitFraction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleRaycastCallback_m_hitFraction_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleRaycastCallback *arg1 = (btTriangleRaycastCallback *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTriangleRaycastCallback::m_hitFraction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleRaycastCallback::m_hitFraction",1,"btTriangleRaycastCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleRaycastCallback,0))){
    SWIG_fail_ptr("btTriangleRaycastCallback_m_hitFraction_get",1,SWIGTYPE_p_btTriangleRaycastCallback);
  }
  
  result = (btScalar) ((arg1)->m_hitFraction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleRaycastCallback_processTriangle(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleRaycastCallback *arg1 = (btTriangleRaycastCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("btTriangleRaycastCallback::processTriangle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleRaycastCallback::processTriangle",1,"btTriangleRaycastCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleRaycastCallback::processTriangle",2,"btVector3 *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btTriangleRaycastCallback::processTriangle",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btTriangleRaycastCallback::processTriangle",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleRaycastCallback,0))){
    SWIG_fail_ptr("btTriangleRaycastCallback_processTriangle",1,SWIGTYPE_p_btTriangleRaycastCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleRaycastCallback_processTriangle",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->processTriangle(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleRaycastCallback_reportHit(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleRaycastCallback *arg1 = (btTriangleRaycastCallback *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  int arg4 ;
  int arg5 ;
  btScalar result;
  
  SWIG_check_num_args("btTriangleRaycastCallback::reportHit",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleRaycastCallback::reportHit",1,"btTriangleRaycastCallback *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTriangleRaycastCallback::reportHit",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btTriangleRaycastCallback::reportHit",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btTriangleRaycastCallback::reportHit",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btTriangleRaycastCallback::reportHit",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleRaycastCallback,0))){
    SWIG_fail_ptr("btTriangleRaycastCallback_reportHit",1,SWIGTYPE_p_btTriangleRaycastCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleRaycastCallback_reportHit",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (btScalar)(arg1)->reportHit((btVector3 const &)*arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTriangleRaycastCallback(void *obj) {
btTriangleRaycastCallback *arg1 = (btTriangleRaycastCallback *) obj;
delete arg1;
}
static swig_lua_method swig_btTriangleRaycastCallback_methods[] = {
    {"processTriangle", _wrap_btTriangleRaycastCallback_processTriangle}, 
    {"reportHit", _wrap_btTriangleRaycastCallback_reportHit}, 
    {0,0}
};
static swig_lua_attribute swig_btTriangleRaycastCallback_attributes[] = {
    { "m_from", _wrap_btTriangleRaycastCallback_m_from_get, _wrap_btTriangleRaycastCallback_m_from_set},
    { "m_to", _wrap_btTriangleRaycastCallback_m_to_get, _wrap_btTriangleRaycastCallback_m_to_set},
    { "m_flags", _wrap_btTriangleRaycastCallback_m_flags_get, _wrap_btTriangleRaycastCallback_m_flags_set},
    { "m_hitFraction", _wrap_btTriangleRaycastCallback_m_hitFraction_get, _wrap_btTriangleRaycastCallback_m_hitFraction_set},
    {0,0,0}
};
static swig_lua_attribute swig_btTriangleRaycastCallback_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTriangleRaycastCallback_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTriangleRaycastCallback_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("kF_None", btTriangleRaycastCallback::kF_None)},
    {SWIG_LUA_CONSTTAB_INT("kF_FilterBackfaces", btTriangleRaycastCallback::kF_FilterBackfaces)},
    {SWIG_LUA_CONSTTAB_INT("kF_KeepUnflippedNormal", btTriangleRaycastCallback::kF_KeepUnflippedNormal)},
    {SWIG_LUA_CONSTTAB_INT("kF_Terminator", btTriangleRaycastCallback::kF_Terminator)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTriangleRaycastCallback_bases[] = {0,0};
static const char *swig_btTriangleRaycastCallback_base_names[] = {"btTriangleCallback *",0};
static swig_lua_class _wrap_class_btTriangleRaycastCallback = { "btTriangleRaycastCallback", &SWIGTYPE_p_btTriangleRaycastCallback,0, swig_delete_btTriangleRaycastCallback, swig_btTriangleRaycastCallback_methods, swig_btTriangleRaycastCallback_attributes, { "btTriangleRaycastCallback", swig_btTriangleRaycastCallback_cls_methods, swig_btTriangleRaycastCallback_cls_attributes, swig_btTriangleRaycastCallback_cls_constants }, swig_btTriangleRaycastCallback_bases, swig_btTriangleRaycastCallback_base_names };

static int _wrap_btTriangleConvexcastCallback_m_convexShape_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleConvexcastCallback *arg1 = (btTriangleConvexcastCallback *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  
  SWIG_check_num_args("btTriangleConvexcastCallback::m_convexShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleConvexcastCallback::m_convexShape",1,"btTriangleConvexcastCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleConvexcastCallback::m_convexShape",2,"btConvexShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleConvexcastCallback,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_convexShape_set",1,SWIGTYPE_p_btTriangleConvexcastCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConvexShape,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_convexShape_set",2,SWIGTYPE_p_btConvexShape);
  }
  
  if (arg1) (arg1)->m_convexShape = (btConvexShape const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleConvexcastCallback_m_convexShape_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleConvexcastCallback *arg1 = (btTriangleConvexcastCallback *) 0 ;
  btConvexShape *result = 0 ;
  
  SWIG_check_num_args("btTriangleConvexcastCallback::m_convexShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleConvexcastCallback::m_convexShape",1,"btTriangleConvexcastCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleConvexcastCallback,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_convexShape_get",1,SWIGTYPE_p_btTriangleConvexcastCallback);
  }
  
  result = (btConvexShape *) ((arg1)->m_convexShape);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleConvexcastCallback_m_convexShapeFrom_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleConvexcastCallback *arg1 = (btTriangleConvexcastCallback *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  SWIG_check_num_args("btTriangleConvexcastCallback::m_convexShapeFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleConvexcastCallback::m_convexShapeFrom",1,"btTriangleConvexcastCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleConvexcastCallback::m_convexShapeFrom",2,"btTransform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleConvexcastCallback,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_convexShapeFrom_set",1,SWIGTYPE_p_btTriangleConvexcastCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_convexShapeFrom_set",2,SWIGTYPE_p_btTransform);
  }
  
  if (arg1) (arg1)->m_convexShapeFrom = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleConvexcastCallback_m_convexShapeFrom_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleConvexcastCallback *arg1 = (btTriangleConvexcastCallback *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btTriangleConvexcastCallback::m_convexShapeFrom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleConvexcastCallback::m_convexShapeFrom",1,"btTriangleConvexcastCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleConvexcastCallback,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_convexShapeFrom_get",1,SWIGTYPE_p_btTriangleConvexcastCallback);
  }
  
  result = (btTransform *)& ((arg1)->m_convexShapeFrom);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleConvexcastCallback_m_convexShapeTo_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleConvexcastCallback *arg1 = (btTriangleConvexcastCallback *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  SWIG_check_num_args("btTriangleConvexcastCallback::m_convexShapeTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleConvexcastCallback::m_convexShapeTo",1,"btTriangleConvexcastCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleConvexcastCallback::m_convexShapeTo",2,"btTransform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleConvexcastCallback,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_convexShapeTo_set",1,SWIGTYPE_p_btTriangleConvexcastCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_convexShapeTo_set",2,SWIGTYPE_p_btTransform);
  }
  
  if (arg1) (arg1)->m_convexShapeTo = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleConvexcastCallback_m_convexShapeTo_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleConvexcastCallback *arg1 = (btTriangleConvexcastCallback *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btTriangleConvexcastCallback::m_convexShapeTo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleConvexcastCallback::m_convexShapeTo",1,"btTriangleConvexcastCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleConvexcastCallback,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_convexShapeTo_get",1,SWIGTYPE_p_btTriangleConvexcastCallback);
  }
  
  result = (btTransform *)& ((arg1)->m_convexShapeTo);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleConvexcastCallback_m_triangleToWorld_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleConvexcastCallback *arg1 = (btTriangleConvexcastCallback *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  SWIG_check_num_args("btTriangleConvexcastCallback::m_triangleToWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleConvexcastCallback::m_triangleToWorld",1,"btTriangleConvexcastCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleConvexcastCallback::m_triangleToWorld",2,"btTransform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleConvexcastCallback,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_triangleToWorld_set",1,SWIGTYPE_p_btTriangleConvexcastCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_triangleToWorld_set",2,SWIGTYPE_p_btTransform);
  }
  
  if (arg1) (arg1)->m_triangleToWorld = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleConvexcastCallback_m_triangleToWorld_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleConvexcastCallback *arg1 = (btTriangleConvexcastCallback *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btTriangleConvexcastCallback::m_triangleToWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleConvexcastCallback::m_triangleToWorld",1,"btTriangleConvexcastCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleConvexcastCallback,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_triangleToWorld_get",1,SWIGTYPE_p_btTriangleConvexcastCallback);
  }
  
  result = (btTransform *)& ((arg1)->m_triangleToWorld);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleConvexcastCallback_m_hitFraction_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleConvexcastCallback *arg1 = (btTriangleConvexcastCallback *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTriangleConvexcastCallback::m_hitFraction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleConvexcastCallback::m_hitFraction",1,"btTriangleConvexcastCallback *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleConvexcastCallback::m_hitFraction",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleConvexcastCallback,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_hitFraction_set",1,SWIGTYPE_p_btTriangleConvexcastCallback);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_hitFraction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleConvexcastCallback_m_hitFraction_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleConvexcastCallback *arg1 = (btTriangleConvexcastCallback *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTriangleConvexcastCallback::m_hitFraction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleConvexcastCallback::m_hitFraction",1,"btTriangleConvexcastCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleConvexcastCallback,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_hitFraction_get",1,SWIGTYPE_p_btTriangleConvexcastCallback);
  }
  
  result = (btScalar) ((arg1)->m_hitFraction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleConvexcastCallback_m_triangleCollisionMargin_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleConvexcastCallback *arg1 = (btTriangleConvexcastCallback *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTriangleConvexcastCallback::m_triangleCollisionMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleConvexcastCallback::m_triangleCollisionMargin",1,"btTriangleConvexcastCallback *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleConvexcastCallback::m_triangleCollisionMargin",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleConvexcastCallback,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_triangleCollisionMargin_set",1,SWIGTYPE_p_btTriangleConvexcastCallback);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_triangleCollisionMargin = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleConvexcastCallback_m_triangleCollisionMargin_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleConvexcastCallback *arg1 = (btTriangleConvexcastCallback *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTriangleConvexcastCallback::m_triangleCollisionMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleConvexcastCallback::m_triangleCollisionMargin",1,"btTriangleConvexcastCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleConvexcastCallback,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_triangleCollisionMargin_get",1,SWIGTYPE_p_btTriangleConvexcastCallback);
  }
  
  result = (btScalar) ((arg1)->m_triangleCollisionMargin);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleConvexcastCallback_m_allowedPenetration_set(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleConvexcastCallback *arg1 = (btTriangleConvexcastCallback *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTriangleConvexcastCallback::m_allowedPenetration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleConvexcastCallback::m_allowedPenetration",1,"btTriangleConvexcastCallback *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTriangleConvexcastCallback::m_allowedPenetration",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleConvexcastCallback,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_allowedPenetration_set",1,SWIGTYPE_p_btTriangleConvexcastCallback);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_allowedPenetration = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleConvexcastCallback_m_allowedPenetration_get(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleConvexcastCallback *arg1 = (btTriangleConvexcastCallback *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTriangleConvexcastCallback::m_allowedPenetration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleConvexcastCallback::m_allowedPenetration",1,"btTriangleConvexcastCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleConvexcastCallback,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_m_allowedPenetration_get",1,SWIGTYPE_p_btTriangleConvexcastCallback);
  }
  
  result = (btScalar) ((arg1)->m_allowedPenetration);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleConvexcastCallback_processTriangle(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleConvexcastCallback *arg1 = (btTriangleConvexcastCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("btTriangleConvexcastCallback::processTriangle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleConvexcastCallback::processTriangle",1,"btTriangleConvexcastCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTriangleConvexcastCallback::processTriangle",2,"btVector3 *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btTriangleConvexcastCallback::processTriangle",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btTriangleConvexcastCallback::processTriangle",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleConvexcastCallback,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_processTriangle",1,SWIGTYPE_p_btTriangleConvexcastCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_processTriangle",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->processTriangle(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTriangleConvexcastCallback_reportHit(lua_State* L) {
  int SWIG_arg = 0;
  btTriangleConvexcastCallback *arg1 = (btTriangleConvexcastCallback *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  int arg5 ;
  int arg6 ;
  btScalar result;
  
  SWIG_check_num_args("btTriangleConvexcastCallback::reportHit",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTriangleConvexcastCallback::reportHit",1,"btTriangleConvexcastCallback *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTriangleConvexcastCallback::reportHit",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTriangleConvexcastCallback::reportHit",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btTriangleConvexcastCallback::reportHit",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btTriangleConvexcastCallback::reportHit",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btTriangleConvexcastCallback::reportHit",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTriangleConvexcastCallback,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_reportHit",1,SWIGTYPE_p_btTriangleConvexcastCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_reportHit",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTriangleConvexcastCallback_reportHit",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  result = (btScalar)(arg1)->reportHit((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTriangleConvexcastCallback(void *obj) {
btTriangleConvexcastCallback *arg1 = (btTriangleConvexcastCallback *) obj;
delete arg1;
}
static swig_lua_method swig_btTriangleConvexcastCallback_methods[] = {
    {"processTriangle", _wrap_btTriangleConvexcastCallback_processTriangle}, 
    {"reportHit", _wrap_btTriangleConvexcastCallback_reportHit}, 
    {0,0}
};
static swig_lua_attribute swig_btTriangleConvexcastCallback_attributes[] = {
    { "m_convexShape", _wrap_btTriangleConvexcastCallback_m_convexShape_get, _wrap_btTriangleConvexcastCallback_m_convexShape_set},
    { "m_convexShapeFrom", _wrap_btTriangleConvexcastCallback_m_convexShapeFrom_get, _wrap_btTriangleConvexcastCallback_m_convexShapeFrom_set},
    { "m_convexShapeTo", _wrap_btTriangleConvexcastCallback_m_convexShapeTo_get, _wrap_btTriangleConvexcastCallback_m_convexShapeTo_set},
    { "m_triangleToWorld", _wrap_btTriangleConvexcastCallback_m_triangleToWorld_get, _wrap_btTriangleConvexcastCallback_m_triangleToWorld_set},
    { "m_hitFraction", _wrap_btTriangleConvexcastCallback_m_hitFraction_get, _wrap_btTriangleConvexcastCallback_m_hitFraction_set},
    { "m_triangleCollisionMargin", _wrap_btTriangleConvexcastCallback_m_triangleCollisionMargin_get, _wrap_btTriangleConvexcastCallback_m_triangleCollisionMargin_set},
    { "m_allowedPenetration", _wrap_btTriangleConvexcastCallback_m_allowedPenetration_get, _wrap_btTriangleConvexcastCallback_m_allowedPenetration_set},
    {0,0,0}
};
static swig_lua_attribute swig_btTriangleConvexcastCallback_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTriangleConvexcastCallback_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTriangleConvexcastCallback_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTriangleConvexcastCallback_bases[] = {0,0};
static const char *swig_btTriangleConvexcastCallback_base_names[] = {"btTriangleCallback *",0};
static swig_lua_class _wrap_class_btTriangleConvexcastCallback = { "btTriangleConvexcastCallback", &SWIGTYPE_p_btTriangleConvexcastCallback,0, swig_delete_btTriangleConvexcastCallback, swig_btTriangleConvexcastCallback_methods, swig_btTriangleConvexcastCallback_attributes, { "btTriangleConvexcastCallback", swig_btTriangleConvexcastCallback_cls_methods, swig_btTriangleConvexcastCallback_cls_attributes, swig_btTriangleConvexcastCallback_cls_constants }, swig_btTriangleConvexcastCallback_bases, swig_btTriangleConvexcastCallback_base_names };

static int _wrap_new_btSubsimplexConvexCast(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btVoronoiSimplexSolver *arg3 = (btVoronoiSimplexSolver *) 0 ;
  btSubsimplexConvexCast *result = 0 ;
  
  SWIG_check_num_args("btSubsimplexConvexCast::btSubsimplexConvexCast",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSubsimplexConvexCast::btSubsimplexConvexCast",1,"btConvexShape const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSubsimplexConvexCast::btSubsimplexConvexCast",2,"btConvexShape const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSubsimplexConvexCast::btSubsimplexConvexCast",3,"btVoronoiSimplexSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("new_btSubsimplexConvexCast",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("new_btSubsimplexConvexCast",2,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVoronoiSimplexSolver,0))){
    SWIG_fail_ptr("new_btSubsimplexConvexCast",3,SWIGTYPE_p_btVoronoiSimplexSolver);
  }
  
  result = (btSubsimplexConvexCast *)new btSubsimplexConvexCast((btConvexShape const *)arg1,(btConvexShape const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSubsimplexConvexCast,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSubsimplexConvexCast(void *obj) {
btSubsimplexConvexCast *arg1 = (btSubsimplexConvexCast *) obj;
delete arg1;
}
static swig_lua_method swig_btSubsimplexConvexCast_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btSubsimplexConvexCast_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btSubsimplexConvexCast_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSubsimplexConvexCast_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btSubsimplexConvexCast_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSubsimplexConvexCast_bases[] = {0};
static const char *swig_btSubsimplexConvexCast_base_names[] = {0};
static swig_lua_class _wrap_class_btSubsimplexConvexCast = { "btSubsimplexConvexCast", &SWIGTYPE_p_btSubsimplexConvexCast,_wrap_new_btSubsimplexConvexCast, swig_delete_btSubsimplexConvexCast, swig_btSubsimplexConvexCast_methods, swig_btSubsimplexConvexCast_attributes, { "btSubsimplexConvexCast", swig_btSubsimplexConvexCast_cls_methods, swig_btSubsimplexConvexCast_cls_attributes, swig_btSubsimplexConvexCast_cls_constants }, swig_btSubsimplexConvexCast_bases, swig_btSubsimplexConvexCast_base_names };

static int _wrap_btCollisionAlgorithmCreateFunc_m_swapped_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionAlgorithmCreateFunc *arg1 = (btCollisionAlgorithmCreateFunc *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btCollisionAlgorithmCreateFunc::m_swapped",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionAlgorithmCreateFunc::m_swapped",1,"btCollisionAlgorithmCreateFunc *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btCollisionAlgorithmCreateFunc::m_swapped",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionAlgorithmCreateFunc,0))){
    SWIG_fail_ptr("btCollisionAlgorithmCreateFunc_m_swapped_set",1,SWIGTYPE_p_btCollisionAlgorithmCreateFunc);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_swapped = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionAlgorithmCreateFunc_m_swapped_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionAlgorithmCreateFunc *arg1 = (btCollisionAlgorithmCreateFunc *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionAlgorithmCreateFunc::m_swapped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionAlgorithmCreateFunc::m_swapped",1,"btCollisionAlgorithmCreateFunc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionAlgorithmCreateFunc,0))){
    SWIG_fail_ptr("btCollisionAlgorithmCreateFunc_m_swapped_get",1,SWIGTYPE_p_btCollisionAlgorithmCreateFunc);
  }
  
  result = (bool) ((arg1)->m_swapped);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCollisionAlgorithmCreateFunc(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionAlgorithmCreateFunc *result = 0 ;
  
  SWIG_check_num_args("btCollisionAlgorithmCreateFunc::btCollisionAlgorithmCreateFunc",0,0)
  result = (btCollisionAlgorithmCreateFunc *)new btCollisionAlgorithmCreateFunc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionAlgorithmCreateFunc,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionAlgorithmCreateFunc_CreateCollisionAlgorithm(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionAlgorithmCreateFunc *arg1 = (btCollisionAlgorithmCreateFunc *) 0 ;
  btCollisionAlgorithmConstructionInfo *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg4 = (btCollisionObjectWrapper *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  SWIG_check_num_args("btCollisionAlgorithmCreateFunc::CreateCollisionAlgorithm",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionAlgorithmCreateFunc::CreateCollisionAlgorithm",1,"btCollisionAlgorithmCreateFunc *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCollisionAlgorithmCreateFunc::CreateCollisionAlgorithm",2,"btCollisionAlgorithmConstructionInfo &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCollisionAlgorithmCreateFunc::CreateCollisionAlgorithm",3,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btCollisionAlgorithmCreateFunc::CreateCollisionAlgorithm",4,"btCollisionObjectWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionAlgorithmCreateFunc,0))){
    SWIG_fail_ptr("btCollisionAlgorithmCreateFunc_CreateCollisionAlgorithm",1,SWIGTYPE_p_btCollisionAlgorithmCreateFunc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionAlgorithmConstructionInfo,0))){
    SWIG_fail_ptr("btCollisionAlgorithmCreateFunc_CreateCollisionAlgorithm",2,SWIGTYPE_p_btCollisionAlgorithmConstructionInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCollisionAlgorithmCreateFunc_CreateCollisionAlgorithm",3,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCollisionAlgorithmCreateFunc_CreateCollisionAlgorithm",4,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  result = (btCollisionAlgorithm *)(arg1)->CreateCollisionAlgorithm(*arg2,(btCollisionObjectWrapper const *)arg3,(btCollisionObjectWrapper const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionAlgorithm,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCollisionAlgorithmCreateFunc(void *obj) {
btCollisionAlgorithmCreateFunc *arg1 = (btCollisionAlgorithmCreateFunc *) obj;
delete arg1;
}
static swig_lua_method swig_btCollisionAlgorithmCreateFunc_methods[] = {
    {"CreateCollisionAlgorithm", _wrap_btCollisionAlgorithmCreateFunc_CreateCollisionAlgorithm}, 
    {0,0}
};
static swig_lua_attribute swig_btCollisionAlgorithmCreateFunc_attributes[] = {
    { "m_swapped", _wrap_btCollisionAlgorithmCreateFunc_m_swapped_get, _wrap_btCollisionAlgorithmCreateFunc_m_swapped_set},
    {0,0,0}
};
static swig_lua_attribute swig_btCollisionAlgorithmCreateFunc_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCollisionAlgorithmCreateFunc_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCollisionAlgorithmCreateFunc_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCollisionAlgorithmCreateFunc_bases[] = {0};
static const char *swig_btCollisionAlgorithmCreateFunc_base_names[] = {0};
static swig_lua_class _wrap_class_btCollisionAlgorithmCreateFunc = { "btCollisionAlgorithmCreateFunc", &SWIGTYPE_p_btCollisionAlgorithmCreateFunc,_wrap_new_btCollisionAlgorithmCreateFunc, swig_delete_btCollisionAlgorithmCreateFunc, swig_btCollisionAlgorithmCreateFunc_methods, swig_btCollisionAlgorithmCreateFunc_attributes, { "btCollisionAlgorithmCreateFunc", swig_btCollisionAlgorithmCreateFunc_cls_methods, swig_btCollisionAlgorithmCreateFunc_cls_attributes, swig_btCollisionAlgorithmCreateFunc_cls_constants }, swig_btCollisionAlgorithmCreateFunc_bases, swig_btCollisionAlgorithmCreateFunc_base_names };

static int _wrap_btCollisionObjectWrapper_m_parent_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectWrapper::m_parent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectWrapper::m_parent",1,"btCollisionObjectWrapper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectWrapper::m_parent",2,"btCollisionObjectWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCollisionObjectWrapper_m_parent_set",1,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btCollisionObjectWrapper_m_parent_set",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  if (arg1) (arg1)->m_parent = (btCollisionObjectWrapper const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectWrapper_m_parent_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectWrapper::m_parent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectWrapper::m_parent",1,"btCollisionObjectWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCollisionObjectWrapper_m_parent_get",1,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  result = (btCollisionObjectWrapper *) ((arg1)->m_parent);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObjectWrapper,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectWrapper_m_shape_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectWrapper::m_shape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectWrapper::m_shape",1,"btCollisionObjectWrapper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectWrapper::m_shape",2,"btCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCollisionObjectWrapper_m_shape_set",1,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionShape,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btCollisionObjectWrapper_m_shape_set",2,SWIGTYPE_p_btCollisionShape);
  }
  
  if (arg1) (arg1)->m_shape = (btCollisionShape const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectWrapper_m_shape_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionShape *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectWrapper::m_shape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectWrapper::m_shape",1,"btCollisionObjectWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCollisionObjectWrapper_m_shape_get",1,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  result = (btCollisionShape *) ((arg1)->m_shape);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectWrapper_m_collisionObject_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectWrapper::m_collisionObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectWrapper::m_collisionObject",1,"btCollisionObjectWrapper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectWrapper::m_collisionObject",2,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCollisionObjectWrapper_m_collisionObject_set",1,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btCollisionObjectWrapper_m_collisionObject_set",2,SWIGTYPE_p_btCollisionObject);
  }
  
  if (arg1) (arg1)->m_collisionObject = (btCollisionObject const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectWrapper_m_collisionObject_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObject *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectWrapper::m_collisionObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectWrapper::m_collisionObject",1,"btCollisionObjectWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCollisionObjectWrapper_m_collisionObject_get",1,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  result = (btCollisionObject *) ((arg1)->m_collisionObject);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectWrapper_m_worldTransform_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectWrapper::m_worldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectWrapper::m_worldTransform",1,"btCollisionObjectWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCollisionObjectWrapper_m_worldTransform_get",1,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  result = (btTransform *) &(btTransform const &) ((arg1)->m_worldTransform);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCollisionObjectWrapper(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btTransform *arg4 = 0 ;
  btCollisionObjectWrapper *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectWrapper::btCollisionObjectWrapper",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectWrapper::btCollisionObjectWrapper",1,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectWrapper::btCollisionObjectWrapper",2,"btCollisionShape const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCollisionObjectWrapper::btCollisionObjectWrapper",3,"btCollisionObject const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btCollisionObjectWrapper::btCollisionObjectWrapper",4,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("new_btCollisionObjectWrapper",1,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("new_btCollisionObjectWrapper",2,SWIGTYPE_p_btCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("new_btCollisionObjectWrapper",3,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("new_btCollisionObjectWrapper",4,SWIGTYPE_p_btTransform);
  }
  
  result = (btCollisionObjectWrapper *)new btCollisionObjectWrapper((btCollisionObjectWrapper const *)arg1,(btCollisionShape const *)arg2,(btCollisionObject const *)arg3,(btTransform const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObjectWrapper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectWrapper_getWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectWrapper::getWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectWrapper::getWorldTransform",1,"btCollisionObjectWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCollisionObjectWrapper_getWorldTransform",1,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  result = (btTransform *) &((btCollisionObjectWrapper const *)arg1)->getWorldTransform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectWrapper_getCollisionObject(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObject *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectWrapper::getCollisionObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectWrapper::getCollisionObject",1,"btCollisionObjectWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCollisionObjectWrapper_getCollisionObject",1,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  result = (btCollisionObject *)((btCollisionObjectWrapper const *)arg1)->getCollisionObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectWrapper_getCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionShape *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectWrapper::getCollisionShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectWrapper::getCollisionShape",1,"btCollisionObjectWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCollisionObjectWrapper_getCollisionShape",1,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  result = (btCollisionShape *)((btCollisionObjectWrapper const *)arg1)->getCollisionShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCollisionObjectWrapper(void *obj) {
btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) obj;
delete arg1;
}
static swig_lua_method swig_btCollisionObjectWrapper_methods[] = {
    {"getWorldTransform", _wrap_btCollisionObjectWrapper_getWorldTransform}, 
    {"getCollisionObject", _wrap_btCollisionObjectWrapper_getCollisionObject}, 
    {"getCollisionShape", _wrap_btCollisionObjectWrapper_getCollisionShape}, 
    {0,0}
};
static swig_lua_attribute swig_btCollisionObjectWrapper_attributes[] = {
    { "m_parent", _wrap_btCollisionObjectWrapper_m_parent_get, _wrap_btCollisionObjectWrapper_m_parent_set},
    { "m_shape", _wrap_btCollisionObjectWrapper_m_shape_get, _wrap_btCollisionObjectWrapper_m_shape_set},
    { "m_collisionObject", _wrap_btCollisionObjectWrapper_m_collisionObject_get, _wrap_btCollisionObjectWrapper_m_collisionObject_set},
    { "m_worldTransform", _wrap_btCollisionObjectWrapper_m_worldTransform_get, SWIG_Lua_set_immutable},
    {0,0,0}
};
static swig_lua_attribute swig_btCollisionObjectWrapper_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCollisionObjectWrapper_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCollisionObjectWrapper_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCollisionObjectWrapper_bases[] = {0};
static const char *swig_btCollisionObjectWrapper_base_names[] = {0};
static swig_lua_class _wrap_class_btCollisionObjectWrapper = { "btCollisionObjectWrapper", &SWIGTYPE_p_btCollisionObjectWrapper,_wrap_new_btCollisionObjectWrapper, swig_delete_btCollisionObjectWrapper, swig_btCollisionObjectWrapper_methods, swig_btCollisionObjectWrapper_attributes, { "btCollisionObjectWrapper", swig_btCollisionObjectWrapper_cls_methods, swig_btCollisionObjectWrapper_cls_attributes, swig_btCollisionObjectWrapper_cls_constants }, swig_btCollisionObjectWrapper_bases, swig_btCollisionObjectWrapper_base_names };

static int _wrap_btCollisionObject_mergesSimulationIslands(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionObject::mergesSimulationIslands",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::mergesSimulationIslands",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_mergesSimulationIslands",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (bool)((btCollisionObject const *)arg1)->mergesSimulationIslands();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getAnisotropicFriction(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btCollisionObject::getAnisotropicFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getAnisotropicFriction",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getAnisotropicFriction",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btVector3 *) &((btCollisionObject const *)arg1)->getAnisotropicFriction();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setAnisotropicFriction__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("btCollisionObject::setAnisotropicFriction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setAnisotropicFriction",1,"btCollisionObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCollisionObject::setAnisotropicFriction",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btCollisionObject::setAnisotropicFriction",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setAnisotropicFriction",1,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCollisionObject_setAnisotropicFriction",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setAnisotropicFriction((btVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setAnisotropicFriction__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btCollisionObject::setAnisotropicFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setAnisotropicFriction",1,"btCollisionObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCollisionObject::setAnisotropicFriction",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setAnisotropicFriction",1,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCollisionObject_setAnisotropicFriction",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setAnisotropicFriction((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setAnisotropicFriction(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btCollisionObject_setAnisotropicFriction__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btCollisionObject_setAnisotropicFriction__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btCollisionObject_setAnisotropicFriction'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCollisionObject::setAnisotropicFriction(btVector3 const &,int)\n"
    "    btCollisionObject::setAnisotropicFriction(btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btCollisionObject_hasAnisotropicFriction__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("btCollisionObject::hasAnisotropicFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::hasAnisotropicFriction",1,"btCollisionObject const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObject::hasAnisotropicFriction",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_hasAnisotropicFriction",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)((btCollisionObject const *)arg1)->hasAnisotropicFriction(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_hasAnisotropicFriction__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionObject::hasAnisotropicFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::hasAnisotropicFriction",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_hasAnisotropicFriction",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (bool)((btCollisionObject const *)arg1)->hasAnisotropicFriction();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_hasAnisotropicFriction(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btCollisionObject_hasAnisotropicFriction__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btCollisionObject_hasAnisotropicFriction__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btCollisionObject_hasAnisotropicFriction'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCollisionObject::hasAnisotropicFriction(int) const\n"
    "    btCollisionObject::hasAnisotropicFriction() const\n");
  lua_error(L);return 0;
}


static int _wrap_btCollisionObject_setContactProcessingThreshold(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btCollisionObject::setContactProcessingThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setContactProcessingThreshold",1,"btCollisionObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObject::setContactProcessingThreshold",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setContactProcessingThreshold",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setContactProcessingThreshold(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getContactProcessingThreshold(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCollisionObject::getContactProcessingThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getContactProcessingThreshold",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getContactProcessingThreshold",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btScalar)((btCollisionObject const *)arg1)->getContactProcessingThreshold();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_isStaticObject(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionObject::isStaticObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::isStaticObject",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_isStaticObject",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (bool)((btCollisionObject const *)arg1)->isStaticObject();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_isKinematicObject(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionObject::isKinematicObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::isKinematicObject",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_isKinematicObject",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (bool)((btCollisionObject const *)arg1)->isKinematicObject();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_isStaticOrKinematicObject(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionObject::isStaticOrKinematicObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::isStaticOrKinematicObject",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_isStaticOrKinematicObject",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (bool)((btCollisionObject const *)arg1)->isStaticOrKinematicObject();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_hasContactResponse(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionObject::hasContactResponse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::hasContactResponse",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_hasContactResponse",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (bool)((btCollisionObject const *)arg1)->hasContactResponse();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCollisionObject(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *result = 0 ;
  
  SWIG_check_num_args("btCollisionObject::btCollisionObject",0,0)
  result = (btCollisionObject *)new btCollisionObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  SWIG_check_num_args("btCollisionObject::setCollisionShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setCollisionShape",1,"btCollisionObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObject::setCollisionShape",2,"btCollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setCollisionShape",1,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btCollisionObject_setCollisionShape",2,SWIGTYPE_p_btCollisionShape);
  }
  
  (arg1)->setCollisionShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getCollisionShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionShape *result = 0 ;
  
  SWIG_check_num_args("btCollisionObject::getCollisionShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getCollisionShape",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getCollisionShape",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btCollisionShape *)((btCollisionObject const *)arg1)->getCollisionShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getCollisionShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionShape *result = 0 ;
  
  SWIG_check_num_args("btCollisionObject::getCollisionShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getCollisionShape",1,"btCollisionObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getCollisionShape",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btCollisionShape *)(arg1)->getCollisionShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getCollisionShape(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btCollisionObject_getCollisionShape__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btCollisionObject_getCollisionShape__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btCollisionObject_getCollisionShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCollisionObject::getCollisionShape() const\n"
    "    btCollisionObject::getCollisionShape()\n");
  lua_error(L);return 0;
}


static int _wrap_btCollisionObject_internalGetExtensionPointer(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btCollisionObject::internalGetExtensionPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::internalGetExtensionPointer",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_internalGetExtensionPointer",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (void *)((btCollisionObject const *)arg1)->internalGetExtensionPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_internalSetExtensionPointer(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btCollisionObject::internalSetExtensionPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::internalSetExtensionPointer",1,"btCollisionObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObject::internalSetExtensionPointer",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_internalSetExtensionPointer",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btCollisionObject_internalSetExtensionPointer");
  (arg1)->internalSetExtensionPointer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getActivationState(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObject::getActivationState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getActivationState",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getActivationState",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (int)((btCollisionObject const *)arg1)->getActivationState();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setActivationState(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObject::setActivationState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setActivationState",1,"btCollisionObject const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObject::setActivationState",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setActivationState",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  ((btCollisionObject const *)arg1)->setActivationState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setDeactivationTime(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btCollisionObject::setDeactivationTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setDeactivationTime",1,"btCollisionObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObject::setDeactivationTime",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setDeactivationTime",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setDeactivationTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getDeactivationTime(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCollisionObject::getDeactivationTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getDeactivationTime",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getDeactivationTime",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btScalar)((btCollisionObject const *)arg1)->getDeactivationTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_forceActivationState(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObject::forceActivationState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::forceActivationState",1,"btCollisionObject const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObject::forceActivationState",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_forceActivationState",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  ((btCollisionObject const *)arg1)->forceActivationState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_activate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btCollisionObject::activate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::activate",1,"btCollisionObject const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btCollisionObject::activate",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_activate",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  ((btCollisionObject const *)arg1)->activate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_activate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  
  SWIG_check_num_args("btCollisionObject::activate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::activate",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_activate",1,SWIGTYPE_p_btCollisionObject);
  }
  
  ((btCollisionObject const *)arg1)->activate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_activate(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btCollisionObject_activate__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_btCollisionObject_activate__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btCollisionObject_activate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCollisionObject::activate(bool) const\n"
    "    btCollisionObject::activate() const\n");
  lua_error(L);return 0;
}


static int _wrap_btCollisionObject_isActive(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionObject::isActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::isActive",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_isActive",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (bool)((btCollisionObject const *)arg1)->isActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setRestitution(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btCollisionObject::setRestitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setRestitution",1,"btCollisionObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObject::setRestitution",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setRestitution",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setRestitution(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getRestitution(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCollisionObject::getRestitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getRestitution",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getRestitution",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btScalar)((btCollisionObject const *)arg1)->getRestitution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setFriction(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btCollisionObject::setFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setFriction",1,"btCollisionObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObject::setFriction",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setFriction",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setFriction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getFriction(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCollisionObject::getFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getFriction",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getFriction",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btScalar)((btCollisionObject const *)arg1)->getFriction();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setRollingFriction(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btCollisionObject::setRollingFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setRollingFriction",1,"btCollisionObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObject::setRollingFriction",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setRollingFriction",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setRollingFriction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getRollingFriction(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCollisionObject::getRollingFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getRollingFriction",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getRollingFriction",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btScalar)((btCollisionObject const *)arg1)->getRollingFriction();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getInternalType(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObject::getInternalType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getInternalType",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getInternalType",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (int)((btCollisionObject const *)arg1)->getInternalType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getWorldTransform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btCollisionObject::getWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getWorldTransform",1,"btCollisionObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getWorldTransform",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btTransform *) &(arg1)->getWorldTransform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getWorldTransform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btCollisionObject::getWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getWorldTransform",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getWorldTransform",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btTransform *) &((btCollisionObject const *)arg1)->getWorldTransform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getWorldTransform(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btCollisionObject_getWorldTransform__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btCollisionObject_getWorldTransform__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btCollisionObject_getWorldTransform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCollisionObject::getWorldTransform()\n"
    "    btCollisionObject::getWorldTransform() const\n");
  lua_error(L);return 0;
}


static int _wrap_btCollisionObject_setWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("btCollisionObject::setWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setWorldTransform",1,"btCollisionObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCollisionObject::setWorldTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setWorldTransform",1,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btCollisionObject_setWorldTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getBroadphaseHandle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  SWIG_check_num_args("btCollisionObject::getBroadphaseHandle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getBroadphaseHandle",1,"btCollisionObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getBroadphaseHandle",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btBroadphaseProxy *)(arg1)->getBroadphaseHandle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphaseProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getBroadphaseHandle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  SWIG_check_num_args("btCollisionObject::getBroadphaseHandle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getBroadphaseHandle",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getBroadphaseHandle",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btBroadphaseProxy *)((btCollisionObject const *)arg1)->getBroadphaseHandle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphaseProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getBroadphaseHandle(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btCollisionObject_getBroadphaseHandle__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btCollisionObject_getBroadphaseHandle__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btCollisionObject_getBroadphaseHandle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCollisionObject::getBroadphaseHandle()\n"
    "    btCollisionObject::getBroadphaseHandle() const\n");
  lua_error(L);return 0;
}


static int _wrap_btCollisionObject_setBroadphaseHandle(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  SWIG_check_num_args("btCollisionObject::setBroadphaseHandle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setBroadphaseHandle",1,"btCollisionObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObject::setBroadphaseHandle",2,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setBroadphaseHandle",1,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btCollisionObject_setBroadphaseHandle",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  (arg1)->setBroadphaseHandle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getInterpolationWorldTransform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btCollisionObject::getInterpolationWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getInterpolationWorldTransform",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getInterpolationWorldTransform",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btTransform *) &((btCollisionObject const *)arg1)->getInterpolationWorldTransform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getInterpolationWorldTransform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btCollisionObject::getInterpolationWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getInterpolationWorldTransform",1,"btCollisionObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getInterpolationWorldTransform",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btTransform *) &(arg1)->getInterpolationWorldTransform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getInterpolationWorldTransform(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btCollisionObject_getInterpolationWorldTransform__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btCollisionObject_getInterpolationWorldTransform__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btCollisionObject_getInterpolationWorldTransform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCollisionObject::getInterpolationWorldTransform() const\n"
    "    btCollisionObject::getInterpolationWorldTransform()\n");
  lua_error(L);return 0;
}


static int _wrap_btCollisionObject_setInterpolationWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("btCollisionObject::setInterpolationWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setInterpolationWorldTransform",1,"btCollisionObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCollisionObject::setInterpolationWorldTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setInterpolationWorldTransform",1,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btCollisionObject_setInterpolationWorldTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setInterpolationWorldTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setInterpolationLinearVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btCollisionObject::setInterpolationLinearVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setInterpolationLinearVelocity",1,"btCollisionObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCollisionObject::setInterpolationLinearVelocity",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setInterpolationLinearVelocity",1,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCollisionObject_setInterpolationLinearVelocity",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setInterpolationLinearVelocity((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setInterpolationAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btCollisionObject::setInterpolationAngularVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setInterpolationAngularVelocity",1,"btCollisionObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCollisionObject::setInterpolationAngularVelocity",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setInterpolationAngularVelocity",1,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btCollisionObject_setInterpolationAngularVelocity",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setInterpolationAngularVelocity((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getInterpolationLinearVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btCollisionObject::getInterpolationLinearVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getInterpolationLinearVelocity",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getInterpolationLinearVelocity",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btVector3 *) &((btCollisionObject const *)arg1)->getInterpolationLinearVelocity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getInterpolationAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btCollisionObject::getInterpolationAngularVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getInterpolationAngularVelocity",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getInterpolationAngularVelocity",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btVector3 *) &((btCollisionObject const *)arg1)->getInterpolationAngularVelocity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getIslandTag(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObject::getIslandTag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getIslandTag",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getIslandTag",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (int)((btCollisionObject const *)arg1)->getIslandTag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setIslandTag(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObject::setIslandTag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setIslandTag",1,"btCollisionObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObject::setIslandTag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setIslandTag",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setIslandTag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getCompanionId(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObject::getCompanionId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getCompanionId",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getCompanionId",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (int)((btCollisionObject const *)arg1)->getCompanionId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setCompanionId(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObject::setCompanionId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setCompanionId",1,"btCollisionObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObject::setCompanionId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setCompanionId",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setCompanionId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getHitFraction(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCollisionObject::getHitFraction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getHitFraction",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getHitFraction",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btScalar)((btCollisionObject const *)arg1)->getHitFraction();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setHitFraction(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btCollisionObject::setHitFraction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setHitFraction",1,"btCollisionObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObject::setHitFraction",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setHitFraction",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setHitFraction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getCollisionFlags(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObject::getCollisionFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getCollisionFlags",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getCollisionFlags",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (int)((btCollisionObject const *)arg1)->getCollisionFlags();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setCollisionFlags(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObject::setCollisionFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setCollisionFlags",1,"btCollisionObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObject::setCollisionFlags",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setCollisionFlags",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setCollisionFlags(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getCcdSweptSphereRadius(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCollisionObject::getCcdSweptSphereRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getCcdSweptSphereRadius",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getCcdSweptSphereRadius",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btScalar)((btCollisionObject const *)arg1)->getCcdSweptSphereRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setCcdSweptSphereRadius(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btCollisionObject::setCcdSweptSphereRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setCcdSweptSphereRadius",1,"btCollisionObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObject::setCcdSweptSphereRadius",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setCcdSweptSphereRadius",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setCcdSweptSphereRadius(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getCcdMotionThreshold(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCollisionObject::getCcdMotionThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getCcdMotionThreshold",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getCcdMotionThreshold",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btScalar)((btCollisionObject const *)arg1)->getCcdMotionThreshold();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getCcdSquareMotionThreshold(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCollisionObject::getCcdSquareMotionThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getCcdSquareMotionThreshold",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getCcdSquareMotionThreshold",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btScalar)((btCollisionObject const *)arg1)->getCcdSquareMotionThreshold();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setCcdMotionThreshold(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btCollisionObject::setCcdMotionThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setCcdMotionThreshold",1,"btCollisionObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObject::setCcdMotionThreshold",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setCcdMotionThreshold",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setCcdMotionThreshold(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_getUserPointer(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btCollisionObject::getUserPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::getUserPointer",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_getUserPointer",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (void *)((btCollisionObject const *)arg1)->getUserPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_setUserPointer(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btCollisionObject::setUserPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::setUserPointer",1,"btCollisionObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObject::setUserPointer",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_setUserPointer",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btCollisionObject_setUserPointer");
  (arg1)->setUserPointer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_checkCollideWith(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionObject::checkCollideWith",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::checkCollideWith",1,"btCollisionObject const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObject::checkCollideWith",2,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_checkCollideWith",1,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_checkCollideWith",2,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (bool)((btCollisionObject const *)arg1)->checkCollideWith((btCollisionObject const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObject::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::calculateSerializeBufferSize",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_calculateSerializeBufferSize",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (int)((btCollisionObject const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCollisionObject::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::serialize",1,"btCollisionObject const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObject::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCollisionObject::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_serialize",1,SWIGTYPE_p_btCollisionObject);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btCollisionObject_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btCollisionObject_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  result = (char *)((btCollisionObject const *)arg1)->serialize(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObject_serializeSingleObject(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("btCollisionObject::serializeSingleObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObject::serializeSingleObject",1,"btCollisionObject const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObject::serializeSingleObject",2,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionObject_serializeSingleObject",1,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btCollisionObject_serializeSingleObject",2,SWIGTYPE_p_btSerializer);
  }
  
  ((btCollisionObject const *)arg1)->serializeSingleObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCollisionObject(void *obj) {
btCollisionObject *arg1 = (btCollisionObject *) obj;
delete arg1;
}
static swig_lua_method swig_btCollisionObject_methods[] = {
    {"mergesSimulationIslands", _wrap_btCollisionObject_mergesSimulationIslands}, 
    {"getAnisotropicFriction", _wrap_btCollisionObject_getAnisotropicFriction}, 
    {"setAnisotropicFriction", _wrap_btCollisionObject_setAnisotropicFriction}, 
    {"hasAnisotropicFriction", _wrap_btCollisionObject_hasAnisotropicFriction}, 
    {"setContactProcessingThreshold", _wrap_btCollisionObject_setContactProcessingThreshold}, 
    {"getContactProcessingThreshold", _wrap_btCollisionObject_getContactProcessingThreshold}, 
    {"isStaticObject", _wrap_btCollisionObject_isStaticObject}, 
    {"isKinematicObject", _wrap_btCollisionObject_isKinematicObject}, 
    {"isStaticOrKinematicObject", _wrap_btCollisionObject_isStaticOrKinematicObject}, 
    {"hasContactResponse", _wrap_btCollisionObject_hasContactResponse}, 
    {"setCollisionShape", _wrap_btCollisionObject_setCollisionShape}, 
    {"getCollisionShape", _wrap_btCollisionObject_getCollisionShape}, 
    {"internalGetExtensionPointer", _wrap_btCollisionObject_internalGetExtensionPointer}, 
    {"internalSetExtensionPointer", _wrap_btCollisionObject_internalSetExtensionPointer}, 
    {"getActivationState", _wrap_btCollisionObject_getActivationState}, 
    {"setActivationState", _wrap_btCollisionObject_setActivationState}, 
    {"setDeactivationTime", _wrap_btCollisionObject_setDeactivationTime}, 
    {"getDeactivationTime", _wrap_btCollisionObject_getDeactivationTime}, 
    {"forceActivationState", _wrap_btCollisionObject_forceActivationState}, 
    {"activate", _wrap_btCollisionObject_activate}, 
    {"isActive", _wrap_btCollisionObject_isActive}, 
    {"setRestitution", _wrap_btCollisionObject_setRestitution}, 
    {"getRestitution", _wrap_btCollisionObject_getRestitution}, 
    {"setFriction", _wrap_btCollisionObject_setFriction}, 
    {"getFriction", _wrap_btCollisionObject_getFriction}, 
    {"setRollingFriction", _wrap_btCollisionObject_setRollingFriction}, 
    {"getRollingFriction", _wrap_btCollisionObject_getRollingFriction}, 
    {"getInternalType", _wrap_btCollisionObject_getInternalType}, 
    {"getWorldTransform", _wrap_btCollisionObject_getWorldTransform}, 
    {"setWorldTransform", _wrap_btCollisionObject_setWorldTransform}, 
    {"getBroadphaseHandle", _wrap_btCollisionObject_getBroadphaseHandle}, 
    {"setBroadphaseHandle", _wrap_btCollisionObject_setBroadphaseHandle}, 
    {"getInterpolationWorldTransform", _wrap_btCollisionObject_getInterpolationWorldTransform}, 
    {"setInterpolationWorldTransform", _wrap_btCollisionObject_setInterpolationWorldTransform}, 
    {"setInterpolationLinearVelocity", _wrap_btCollisionObject_setInterpolationLinearVelocity}, 
    {"setInterpolationAngularVelocity", _wrap_btCollisionObject_setInterpolationAngularVelocity}, 
    {"getInterpolationLinearVelocity", _wrap_btCollisionObject_getInterpolationLinearVelocity}, 
    {"getInterpolationAngularVelocity", _wrap_btCollisionObject_getInterpolationAngularVelocity}, 
    {"getIslandTag", _wrap_btCollisionObject_getIslandTag}, 
    {"setIslandTag", _wrap_btCollisionObject_setIslandTag}, 
    {"getCompanionId", _wrap_btCollisionObject_getCompanionId}, 
    {"setCompanionId", _wrap_btCollisionObject_setCompanionId}, 
    {"getHitFraction", _wrap_btCollisionObject_getHitFraction}, 
    {"setHitFraction", _wrap_btCollisionObject_setHitFraction}, 
    {"getCollisionFlags", _wrap_btCollisionObject_getCollisionFlags}, 
    {"setCollisionFlags", _wrap_btCollisionObject_setCollisionFlags}, 
    {"getCcdSweptSphereRadius", _wrap_btCollisionObject_getCcdSweptSphereRadius}, 
    {"setCcdSweptSphereRadius", _wrap_btCollisionObject_setCcdSweptSphereRadius}, 
    {"getCcdMotionThreshold", _wrap_btCollisionObject_getCcdMotionThreshold}, 
    {"getCcdSquareMotionThreshold", _wrap_btCollisionObject_getCcdSquareMotionThreshold}, 
    {"setCcdMotionThreshold", _wrap_btCollisionObject_setCcdMotionThreshold}, 
    {"getUserPointer", _wrap_btCollisionObject_getUserPointer}, 
    {"setUserPointer", _wrap_btCollisionObject_setUserPointer}, 
    {"checkCollideWith", _wrap_btCollisionObject_checkCollideWith}, 
    {"calculateSerializeBufferSize", _wrap_btCollisionObject_calculateSerializeBufferSize}, 
    {"serialize", _wrap_btCollisionObject_serialize}, 
    {"serializeSingleObject", _wrap_btCollisionObject_serializeSingleObject}, 
    {0,0}
};
static swig_lua_attribute swig_btCollisionObject_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btCollisionObject_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCollisionObject_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCollisionObject_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("CF_STATIC_OBJECT", btCollisionObject::CF_STATIC_OBJECT)},
    {SWIG_LUA_CONSTTAB_INT("CF_KINEMATIC_OBJECT", btCollisionObject::CF_KINEMATIC_OBJECT)},
    {SWIG_LUA_CONSTTAB_INT("CF_NO_CONTACT_RESPONSE", btCollisionObject::CF_NO_CONTACT_RESPONSE)},
    {SWIG_LUA_CONSTTAB_INT("CF_CUSTOM_MATERIAL_CALLBACK", btCollisionObject::CF_CUSTOM_MATERIAL_CALLBACK)},
    {SWIG_LUA_CONSTTAB_INT("CF_CHARACTER_OBJECT", btCollisionObject::CF_CHARACTER_OBJECT)},
    {SWIG_LUA_CONSTTAB_INT("CF_DISABLE_VISUALIZE_OBJECT", btCollisionObject::CF_DISABLE_VISUALIZE_OBJECT)},
    {SWIG_LUA_CONSTTAB_INT("CF_DISABLE_SPU_COLLISION_PROCESSING", btCollisionObject::CF_DISABLE_SPU_COLLISION_PROCESSING)},
    {SWIG_LUA_CONSTTAB_INT("CO_COLLISION_OBJECT", btCollisionObject::CO_COLLISION_OBJECT)},
    {SWIG_LUA_CONSTTAB_INT("CO_RIGID_BODY", btCollisionObject::CO_RIGID_BODY)},
    {SWIG_LUA_CONSTTAB_INT("CO_GHOST_OBJECT", btCollisionObject::CO_GHOST_OBJECT)},
    {SWIG_LUA_CONSTTAB_INT("CO_SOFT_BODY", btCollisionObject::CO_SOFT_BODY)},
    {SWIG_LUA_CONSTTAB_INT("CO_HF_FLUID", btCollisionObject::CO_HF_FLUID)},
    {SWIG_LUA_CONSTTAB_INT("CO_USER_TYPE", btCollisionObject::CO_USER_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("CF_ANISOTROPIC_FRICTION_DISABLED", btCollisionObject::CF_ANISOTROPIC_FRICTION_DISABLED)},
    {SWIG_LUA_CONSTTAB_INT("CF_ANISOTROPIC_FRICTION", btCollisionObject::CF_ANISOTROPIC_FRICTION)},
    {SWIG_LUA_CONSTTAB_INT("CF_ANISOTROPIC_ROLLING_FRICTION", btCollisionObject::CF_ANISOTROPIC_ROLLING_FRICTION)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCollisionObject_bases[] = {0};
static const char *swig_btCollisionObject_base_names[] = {0};
static swig_lua_class _wrap_class_btCollisionObject = { "btCollisionObject", &SWIGTYPE_p_btCollisionObject,_wrap_new_btCollisionObject, swig_delete_btCollisionObject, swig_btCollisionObject_methods, swig_btCollisionObject_attributes, { "btCollisionObject", swig_btCollisionObject_cls_methods, swig_btCollisionObject_cls_attributes, swig_btCollisionObject_cls_constants }, swig_btCollisionObject_bases, swig_btCollisionObject_base_names };

static int _wrap_btCollisionObjectDoubleData_m_broadphaseHandle_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_broadphaseHandle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_broadphaseHandle",1,"btCollisionObjectDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_broadphaseHandle",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_broadphaseHandle_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btCollisionObjectDoubleData_m_broadphaseHandle_set");
  if (arg1) (arg1)->m_broadphaseHandle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_broadphaseHandle_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_broadphaseHandle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_broadphaseHandle",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_broadphaseHandle_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (void *) ((arg1)->m_broadphaseHandle);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_collisionShape_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_collisionShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_collisionShape",1,"btCollisionObjectDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_collisionShape",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_collisionShape_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btCollisionObjectDoubleData_m_collisionShape_set");
  if (arg1) (arg1)->m_collisionShape = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_collisionShape_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_collisionShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_collisionShape",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_collisionShape_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (void *) ((arg1)->m_collisionShape);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_rootCollisionShape_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_rootCollisionShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_rootCollisionShape",1,"btCollisionObjectDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_rootCollisionShape",2,"btCollisionShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_rootCollisionShape_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionShapeData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_rootCollisionShape_set",2,SWIGTYPE_p_btCollisionShapeData);
  }
  
  if (arg1) (arg1)->m_rootCollisionShape = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_rootCollisionShape_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_rootCollisionShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_rootCollisionShape",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_rootCollisionShape_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (btCollisionShapeData *) ((arg1)->m_rootCollisionShape);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShapeData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_name_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_name",1,"btCollisionObjectDoubleData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_name",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_name_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_name_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_name",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_name_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (char *) ((arg1)->m_name);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_worldTransform_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_worldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_worldTransform",1,"btCollisionObjectDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_worldTransform",2,"btTransformDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_worldTransform_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransformDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_worldTransform_set",2,SWIGTYPE_p_btTransformDoubleData);
  }
  
  if (arg1) (arg1)->m_worldTransform = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_worldTransform_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_worldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_worldTransform",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_worldTransform_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (btTransformDoubleData *)& ((arg1)->m_worldTransform);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransformDoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_interpolationWorldTransform_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_interpolationWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_interpolationWorldTransform",1,"btCollisionObjectDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_interpolationWorldTransform",2,"btTransformDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_interpolationWorldTransform_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransformDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_interpolationWorldTransform_set",2,SWIGTYPE_p_btTransformDoubleData);
  }
  
  if (arg1) (arg1)->m_interpolationWorldTransform = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_interpolationWorldTransform_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_interpolationWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_interpolationWorldTransform",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_interpolationWorldTransform_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (btTransformDoubleData *)& ((arg1)->m_interpolationWorldTransform);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransformDoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_interpolationLinearVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_interpolationLinearVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_interpolationLinearVelocity",1,"btCollisionObjectDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_interpolationLinearVelocity",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_interpolationLinearVelocity_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_interpolationLinearVelocity_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_interpolationLinearVelocity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_interpolationLinearVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_interpolationLinearVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_interpolationLinearVelocity",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_interpolationLinearVelocity_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_interpolationLinearVelocity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_interpolationAngularVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_interpolationAngularVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_interpolationAngularVelocity",1,"btCollisionObjectDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_interpolationAngularVelocity",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_interpolationAngularVelocity_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_interpolationAngularVelocity_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_interpolationAngularVelocity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_interpolationAngularVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_interpolationAngularVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_interpolationAngularVelocity",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_interpolationAngularVelocity_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_interpolationAngularVelocity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_anisotropicFriction_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_anisotropicFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_anisotropicFriction",1,"btCollisionObjectDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_anisotropicFriction",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_anisotropicFriction_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_anisotropicFriction_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_anisotropicFriction = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_anisotropicFriction_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_anisotropicFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_anisotropicFriction",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_anisotropicFriction_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_anisotropicFriction);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_contactProcessingThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_contactProcessingThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_contactProcessingThreshold",1,"btCollisionObjectDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_contactProcessingThreshold",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_contactProcessingThreshold_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_contactProcessingThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_contactProcessingThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_contactProcessingThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_contactProcessingThreshold",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_contactProcessingThreshold_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (double) ((arg1)->m_contactProcessingThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_deactivationTime_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_deactivationTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_deactivationTime",1,"btCollisionObjectDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_deactivationTime",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_deactivationTime_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_deactivationTime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_deactivationTime_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_deactivationTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_deactivationTime",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_deactivationTime_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (double) ((arg1)->m_deactivationTime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_friction_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_friction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_friction",1,"btCollisionObjectDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_friction",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_friction_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_friction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_friction_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_friction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_friction",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_friction_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (double) ((arg1)->m_friction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_rollingFriction_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_rollingFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_rollingFriction",1,"btCollisionObjectDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_rollingFriction",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_rollingFriction_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_rollingFriction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_rollingFriction_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_rollingFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_rollingFriction",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_rollingFriction_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (double) ((arg1)->m_rollingFriction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_restitution_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_restitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_restitution",1,"btCollisionObjectDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_restitution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_restitution_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_restitution = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_restitution_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_restitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_restitution",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_restitution_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (double) ((arg1)->m_restitution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_hitFraction_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_hitFraction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_hitFraction",1,"btCollisionObjectDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_hitFraction",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_hitFraction_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_hitFraction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_hitFraction_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_hitFraction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_hitFraction",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_hitFraction_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (double) ((arg1)->m_hitFraction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_ccdSweptSphereRadius_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_ccdSweptSphereRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_ccdSweptSphereRadius",1,"btCollisionObjectDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_ccdSweptSphereRadius",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_ccdSweptSphereRadius_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_ccdSweptSphereRadius = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_ccdSweptSphereRadius_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_ccdSweptSphereRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_ccdSweptSphereRadius",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_ccdSweptSphereRadius_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (double) ((arg1)->m_ccdSweptSphereRadius);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_ccdMotionThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_ccdMotionThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_ccdMotionThreshold",1,"btCollisionObjectDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_ccdMotionThreshold",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_ccdMotionThreshold_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_ccdMotionThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_ccdMotionThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_ccdMotionThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_ccdMotionThreshold",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_ccdMotionThreshold_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (double) ((arg1)->m_ccdMotionThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_hasAnisotropicFriction_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_hasAnisotropicFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_hasAnisotropicFriction",1,"btCollisionObjectDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_hasAnisotropicFriction",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_hasAnisotropicFriction_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_hasAnisotropicFriction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_hasAnisotropicFriction_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_hasAnisotropicFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_hasAnisotropicFriction",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_hasAnisotropicFriction_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (int) ((arg1)->m_hasAnisotropicFriction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_collisionFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_collisionFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_collisionFlags",1,"btCollisionObjectDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_collisionFlags",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_collisionFlags_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_collisionFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_collisionFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_collisionFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_collisionFlags",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_collisionFlags_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (int) ((arg1)->m_collisionFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_islandTag1_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_islandTag1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_islandTag1",1,"btCollisionObjectDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_islandTag1",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_islandTag1_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_islandTag1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_islandTag1_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_islandTag1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_islandTag1",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_islandTag1_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (int) ((arg1)->m_islandTag1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_companionId_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_companionId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_companionId",1,"btCollisionObjectDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_companionId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_companionId_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_companionId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_companionId_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_companionId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_companionId",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_companionId_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (int) ((arg1)->m_companionId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_activationState1_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_activationState1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_activationState1",1,"btCollisionObjectDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_activationState1",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_activationState1_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_activationState1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_activationState1_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_activationState1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_activationState1",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_activationState1_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (int) ((arg1)->m_activationState1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_internalType_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_internalType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_internalType",1,"btCollisionObjectDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_internalType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_internalType_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_internalType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_internalType_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_internalType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_internalType",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_internalType_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (int) ((arg1)->m_internalType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_checkCollideWith_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_checkCollideWith",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_checkCollideWith",1,"btCollisionObjectDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_checkCollideWith",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_checkCollideWith_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_checkCollideWith = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_checkCollideWith_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_checkCollideWith",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_checkCollideWith",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_checkCollideWith_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (int) ((arg1)->m_checkCollideWith);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_padding_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_padding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_padding",1,"btCollisionObjectDoubleData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btCollisionObjectDoubleData::m_padding",2,"char [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_padding_set",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectDoubleData_m_padding_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::m_padding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectDoubleData::m_padding",1,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btCollisionObjectDoubleData_m_padding_get",1,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  result = (char *)(char *) ((arg1)->m_padding);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCollisionObjectDoubleData(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectDoubleData *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectDoubleData::btCollisionObjectDoubleData",0,0)
  result = (btCollisionObjectDoubleData *)new btCollisionObjectDoubleData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObjectDoubleData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCollisionObjectDoubleData(void *obj) {
btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) obj;
delete arg1;
}
static swig_lua_method swig_btCollisionObjectDoubleData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btCollisionObjectDoubleData_attributes[] = {
    { "m_broadphaseHandle", _wrap_btCollisionObjectDoubleData_m_broadphaseHandle_get, _wrap_btCollisionObjectDoubleData_m_broadphaseHandle_set},
    { "m_collisionShape", _wrap_btCollisionObjectDoubleData_m_collisionShape_get, _wrap_btCollisionObjectDoubleData_m_collisionShape_set},
    { "m_rootCollisionShape", _wrap_btCollisionObjectDoubleData_m_rootCollisionShape_get, _wrap_btCollisionObjectDoubleData_m_rootCollisionShape_set},
    { "m_name", _wrap_btCollisionObjectDoubleData_m_name_get, _wrap_btCollisionObjectDoubleData_m_name_set},
    { "m_worldTransform", _wrap_btCollisionObjectDoubleData_m_worldTransform_get, _wrap_btCollisionObjectDoubleData_m_worldTransform_set},
    { "m_interpolationWorldTransform", _wrap_btCollisionObjectDoubleData_m_interpolationWorldTransform_get, _wrap_btCollisionObjectDoubleData_m_interpolationWorldTransform_set},
    { "m_interpolationLinearVelocity", _wrap_btCollisionObjectDoubleData_m_interpolationLinearVelocity_get, _wrap_btCollisionObjectDoubleData_m_interpolationLinearVelocity_set},
    { "m_interpolationAngularVelocity", _wrap_btCollisionObjectDoubleData_m_interpolationAngularVelocity_get, _wrap_btCollisionObjectDoubleData_m_interpolationAngularVelocity_set},
    { "m_anisotropicFriction", _wrap_btCollisionObjectDoubleData_m_anisotropicFriction_get, _wrap_btCollisionObjectDoubleData_m_anisotropicFriction_set},
    { "m_contactProcessingThreshold", _wrap_btCollisionObjectDoubleData_m_contactProcessingThreshold_get, _wrap_btCollisionObjectDoubleData_m_contactProcessingThreshold_set},
    { "m_deactivationTime", _wrap_btCollisionObjectDoubleData_m_deactivationTime_get, _wrap_btCollisionObjectDoubleData_m_deactivationTime_set},
    { "m_friction", _wrap_btCollisionObjectDoubleData_m_friction_get, _wrap_btCollisionObjectDoubleData_m_friction_set},
    { "m_rollingFriction", _wrap_btCollisionObjectDoubleData_m_rollingFriction_get, _wrap_btCollisionObjectDoubleData_m_rollingFriction_set},
    { "m_restitution", _wrap_btCollisionObjectDoubleData_m_restitution_get, _wrap_btCollisionObjectDoubleData_m_restitution_set},
    { "m_hitFraction", _wrap_btCollisionObjectDoubleData_m_hitFraction_get, _wrap_btCollisionObjectDoubleData_m_hitFraction_set},
    { "m_ccdSweptSphereRadius", _wrap_btCollisionObjectDoubleData_m_ccdSweptSphereRadius_get, _wrap_btCollisionObjectDoubleData_m_ccdSweptSphereRadius_set},
    { "m_ccdMotionThreshold", _wrap_btCollisionObjectDoubleData_m_ccdMotionThreshold_get, _wrap_btCollisionObjectDoubleData_m_ccdMotionThreshold_set},
    { "m_hasAnisotropicFriction", _wrap_btCollisionObjectDoubleData_m_hasAnisotropicFriction_get, _wrap_btCollisionObjectDoubleData_m_hasAnisotropicFriction_set},
    { "m_collisionFlags", _wrap_btCollisionObjectDoubleData_m_collisionFlags_get, _wrap_btCollisionObjectDoubleData_m_collisionFlags_set},
    { "m_islandTag1", _wrap_btCollisionObjectDoubleData_m_islandTag1_get, _wrap_btCollisionObjectDoubleData_m_islandTag1_set},
    { "m_companionId", _wrap_btCollisionObjectDoubleData_m_companionId_get, _wrap_btCollisionObjectDoubleData_m_companionId_set},
    { "m_activationState1", _wrap_btCollisionObjectDoubleData_m_activationState1_get, _wrap_btCollisionObjectDoubleData_m_activationState1_set},
    { "m_internalType", _wrap_btCollisionObjectDoubleData_m_internalType_get, _wrap_btCollisionObjectDoubleData_m_internalType_set},
    { "m_checkCollideWith", _wrap_btCollisionObjectDoubleData_m_checkCollideWith_get, _wrap_btCollisionObjectDoubleData_m_checkCollideWith_set},
    { "m_padding", _wrap_btCollisionObjectDoubleData_m_padding_get, _wrap_btCollisionObjectDoubleData_m_padding_set},
    {0,0,0}
};
static swig_lua_attribute swig_btCollisionObjectDoubleData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCollisionObjectDoubleData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCollisionObjectDoubleData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCollisionObjectDoubleData_bases[] = {0};
static const char *swig_btCollisionObjectDoubleData_base_names[] = {0};
static swig_lua_class _wrap_class_btCollisionObjectDoubleData = { "btCollisionObjectDoubleData", &SWIGTYPE_p_btCollisionObjectDoubleData,_wrap_new_btCollisionObjectDoubleData, swig_delete_btCollisionObjectDoubleData, swig_btCollisionObjectDoubleData_methods, swig_btCollisionObjectDoubleData_attributes, { "btCollisionObjectDoubleData", swig_btCollisionObjectDoubleData_cls_methods, swig_btCollisionObjectDoubleData_cls_attributes, swig_btCollisionObjectDoubleData_cls_constants }, swig_btCollisionObjectDoubleData_bases, swig_btCollisionObjectDoubleData_base_names };

static int _wrap_btCollisionObjectFloatData_m_broadphaseHandle_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_broadphaseHandle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_broadphaseHandle",1,"btCollisionObjectFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_broadphaseHandle",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_broadphaseHandle_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btCollisionObjectFloatData_m_broadphaseHandle_set");
  if (arg1) (arg1)->m_broadphaseHandle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_broadphaseHandle_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_broadphaseHandle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_broadphaseHandle",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_broadphaseHandle_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (void *) ((arg1)->m_broadphaseHandle);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_collisionShape_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_collisionShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_collisionShape",1,"btCollisionObjectFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_collisionShape",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_collisionShape_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btCollisionObjectFloatData_m_collisionShape_set");
  if (arg1) (arg1)->m_collisionShape = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_collisionShape_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_collisionShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_collisionShape",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_collisionShape_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (void *) ((arg1)->m_collisionShape);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_rootCollisionShape_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_rootCollisionShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_rootCollisionShape",1,"btCollisionObjectFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_rootCollisionShape",2,"btCollisionShapeData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_rootCollisionShape_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionShapeData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_rootCollisionShape_set",2,SWIGTYPE_p_btCollisionShapeData);
  }
  
  if (arg1) (arg1)->m_rootCollisionShape = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_rootCollisionShape_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_rootCollisionShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_rootCollisionShape",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_rootCollisionShape_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (btCollisionShapeData *) ((arg1)->m_rootCollisionShape);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShapeData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_name_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_name",1,"btCollisionObjectFloatData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_name",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_name_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_name_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_name",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_name_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (char *) ((arg1)->m_name);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_worldTransform_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_worldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_worldTransform",1,"btCollisionObjectFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_worldTransform",2,"btTransformFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_worldTransform_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransformFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_worldTransform_set",2,SWIGTYPE_p_btTransformFloatData);
  }
  
  if (arg1) (arg1)->m_worldTransform = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_worldTransform_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_worldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_worldTransform",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_worldTransform_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (btTransformFloatData *)& ((arg1)->m_worldTransform);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransformFloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_interpolationWorldTransform_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_interpolationWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_interpolationWorldTransform",1,"btCollisionObjectFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_interpolationWorldTransform",2,"btTransformFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_interpolationWorldTransform_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransformFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_interpolationWorldTransform_set",2,SWIGTYPE_p_btTransformFloatData);
  }
  
  if (arg1) (arg1)->m_interpolationWorldTransform = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_interpolationWorldTransform_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_interpolationWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_interpolationWorldTransform",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_interpolationWorldTransform_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (btTransformFloatData *)& ((arg1)->m_interpolationWorldTransform);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransformFloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_interpolationLinearVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_interpolationLinearVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_interpolationLinearVelocity",1,"btCollisionObjectFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_interpolationLinearVelocity",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_interpolationLinearVelocity_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_interpolationLinearVelocity_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_interpolationLinearVelocity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_interpolationLinearVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_interpolationLinearVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_interpolationLinearVelocity",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_interpolationLinearVelocity_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_interpolationLinearVelocity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_interpolationAngularVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_interpolationAngularVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_interpolationAngularVelocity",1,"btCollisionObjectFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_interpolationAngularVelocity",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_interpolationAngularVelocity_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_interpolationAngularVelocity_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_interpolationAngularVelocity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_interpolationAngularVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_interpolationAngularVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_interpolationAngularVelocity",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_interpolationAngularVelocity_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_interpolationAngularVelocity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_anisotropicFriction_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_anisotropicFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_anisotropicFriction",1,"btCollisionObjectFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_anisotropicFriction",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_anisotropicFriction_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_anisotropicFriction_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_anisotropicFriction = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_anisotropicFriction_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_anisotropicFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_anisotropicFriction",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_anisotropicFriction_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_anisotropicFriction);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_contactProcessingThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_contactProcessingThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_contactProcessingThreshold",1,"btCollisionObjectFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_contactProcessingThreshold",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_contactProcessingThreshold_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_contactProcessingThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_contactProcessingThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_contactProcessingThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_contactProcessingThreshold",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_contactProcessingThreshold_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (float) ((arg1)->m_contactProcessingThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_deactivationTime_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_deactivationTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_deactivationTime",1,"btCollisionObjectFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_deactivationTime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_deactivationTime_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_deactivationTime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_deactivationTime_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_deactivationTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_deactivationTime",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_deactivationTime_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (float) ((arg1)->m_deactivationTime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_friction_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_friction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_friction",1,"btCollisionObjectFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_friction",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_friction_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_friction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_friction_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_friction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_friction",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_friction_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (float) ((arg1)->m_friction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_rollingFriction_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_rollingFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_rollingFriction",1,"btCollisionObjectFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_rollingFriction",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_rollingFriction_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_rollingFriction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_rollingFriction_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_rollingFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_rollingFriction",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_rollingFriction_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (float) ((arg1)->m_rollingFriction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_restitution_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_restitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_restitution",1,"btCollisionObjectFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_restitution",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_restitution_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_restitution = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_restitution_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_restitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_restitution",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_restitution_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (float) ((arg1)->m_restitution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_hitFraction_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_hitFraction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_hitFraction",1,"btCollisionObjectFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_hitFraction",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_hitFraction_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_hitFraction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_hitFraction_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_hitFraction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_hitFraction",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_hitFraction_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (float) ((arg1)->m_hitFraction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_ccdSweptSphereRadius_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_ccdSweptSphereRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_ccdSweptSphereRadius",1,"btCollisionObjectFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_ccdSweptSphereRadius",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_ccdSweptSphereRadius_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_ccdSweptSphereRadius = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_ccdSweptSphereRadius_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_ccdSweptSphereRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_ccdSweptSphereRadius",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_ccdSweptSphereRadius_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (float) ((arg1)->m_ccdSweptSphereRadius);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_ccdMotionThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_ccdMotionThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_ccdMotionThreshold",1,"btCollisionObjectFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_ccdMotionThreshold",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_ccdMotionThreshold_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_ccdMotionThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_ccdMotionThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_ccdMotionThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_ccdMotionThreshold",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_ccdMotionThreshold_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (float) ((arg1)->m_ccdMotionThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_hasAnisotropicFriction_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_hasAnisotropicFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_hasAnisotropicFriction",1,"btCollisionObjectFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_hasAnisotropicFriction",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_hasAnisotropicFriction_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_hasAnisotropicFriction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_hasAnisotropicFriction_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_hasAnisotropicFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_hasAnisotropicFriction",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_hasAnisotropicFriction_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (int) ((arg1)->m_hasAnisotropicFriction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_collisionFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_collisionFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_collisionFlags",1,"btCollisionObjectFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_collisionFlags",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_collisionFlags_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_collisionFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_collisionFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_collisionFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_collisionFlags",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_collisionFlags_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (int) ((arg1)->m_collisionFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_islandTag1_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_islandTag1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_islandTag1",1,"btCollisionObjectFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_islandTag1",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_islandTag1_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_islandTag1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_islandTag1_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_islandTag1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_islandTag1",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_islandTag1_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (int) ((arg1)->m_islandTag1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_companionId_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_companionId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_companionId",1,"btCollisionObjectFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_companionId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_companionId_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_companionId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_companionId_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_companionId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_companionId",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_companionId_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (int) ((arg1)->m_companionId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_activationState1_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_activationState1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_activationState1",1,"btCollisionObjectFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_activationState1",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_activationState1_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_activationState1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_activationState1_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_activationState1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_activationState1",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_activationState1_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (int) ((arg1)->m_activationState1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_internalType_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_internalType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_internalType",1,"btCollisionObjectFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_internalType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_internalType_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_internalType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_internalType_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_internalType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_internalType",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_internalType_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (int) ((arg1)->m_internalType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_checkCollideWith_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_checkCollideWith",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_checkCollideWith",1,"btCollisionObjectFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_checkCollideWith",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_checkCollideWith_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_checkCollideWith = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_checkCollideWith_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_checkCollideWith",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_checkCollideWith",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_checkCollideWith_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (int) ((arg1)->m_checkCollideWith);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_padding_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_padding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_padding",1,"btCollisionObjectFloatData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btCollisionObjectFloatData::m_padding",2,"char [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_padding_set",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionObjectFloatData_m_padding_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::m_padding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionObjectFloatData::m_padding",1,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btCollisionObjectFloatData_m_padding_get",1,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  result = (char *)(char *) ((arg1)->m_padding);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCollisionObjectFloatData(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectFloatData *result = 0 ;
  
  SWIG_check_num_args("btCollisionObjectFloatData::btCollisionObjectFloatData",0,0)
  result = (btCollisionObjectFloatData *)new btCollisionObjectFloatData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObjectFloatData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCollisionObjectFloatData(void *obj) {
btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) obj;
delete arg1;
}
static swig_lua_method swig_btCollisionObjectFloatData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btCollisionObjectFloatData_attributes[] = {
    { "m_broadphaseHandle", _wrap_btCollisionObjectFloatData_m_broadphaseHandle_get, _wrap_btCollisionObjectFloatData_m_broadphaseHandle_set},
    { "m_collisionShape", _wrap_btCollisionObjectFloatData_m_collisionShape_get, _wrap_btCollisionObjectFloatData_m_collisionShape_set},
    { "m_rootCollisionShape", _wrap_btCollisionObjectFloatData_m_rootCollisionShape_get, _wrap_btCollisionObjectFloatData_m_rootCollisionShape_set},
    { "m_name", _wrap_btCollisionObjectFloatData_m_name_get, _wrap_btCollisionObjectFloatData_m_name_set},
    { "m_worldTransform", _wrap_btCollisionObjectFloatData_m_worldTransform_get, _wrap_btCollisionObjectFloatData_m_worldTransform_set},
    { "m_interpolationWorldTransform", _wrap_btCollisionObjectFloatData_m_interpolationWorldTransform_get, _wrap_btCollisionObjectFloatData_m_interpolationWorldTransform_set},
    { "m_interpolationLinearVelocity", _wrap_btCollisionObjectFloatData_m_interpolationLinearVelocity_get, _wrap_btCollisionObjectFloatData_m_interpolationLinearVelocity_set},
    { "m_interpolationAngularVelocity", _wrap_btCollisionObjectFloatData_m_interpolationAngularVelocity_get, _wrap_btCollisionObjectFloatData_m_interpolationAngularVelocity_set},
    { "m_anisotropicFriction", _wrap_btCollisionObjectFloatData_m_anisotropicFriction_get, _wrap_btCollisionObjectFloatData_m_anisotropicFriction_set},
    { "m_contactProcessingThreshold", _wrap_btCollisionObjectFloatData_m_contactProcessingThreshold_get, _wrap_btCollisionObjectFloatData_m_contactProcessingThreshold_set},
    { "m_deactivationTime", _wrap_btCollisionObjectFloatData_m_deactivationTime_get, _wrap_btCollisionObjectFloatData_m_deactivationTime_set},
    { "m_friction", _wrap_btCollisionObjectFloatData_m_friction_get, _wrap_btCollisionObjectFloatData_m_friction_set},
    { "m_rollingFriction", _wrap_btCollisionObjectFloatData_m_rollingFriction_get, _wrap_btCollisionObjectFloatData_m_rollingFriction_set},
    { "m_restitution", _wrap_btCollisionObjectFloatData_m_restitution_get, _wrap_btCollisionObjectFloatData_m_restitution_set},
    { "m_hitFraction", _wrap_btCollisionObjectFloatData_m_hitFraction_get, _wrap_btCollisionObjectFloatData_m_hitFraction_set},
    { "m_ccdSweptSphereRadius", _wrap_btCollisionObjectFloatData_m_ccdSweptSphereRadius_get, _wrap_btCollisionObjectFloatData_m_ccdSweptSphereRadius_set},
    { "m_ccdMotionThreshold", _wrap_btCollisionObjectFloatData_m_ccdMotionThreshold_get, _wrap_btCollisionObjectFloatData_m_ccdMotionThreshold_set},
    { "m_hasAnisotropicFriction", _wrap_btCollisionObjectFloatData_m_hasAnisotropicFriction_get, _wrap_btCollisionObjectFloatData_m_hasAnisotropicFriction_set},
    { "m_collisionFlags", _wrap_btCollisionObjectFloatData_m_collisionFlags_get, _wrap_btCollisionObjectFloatData_m_collisionFlags_set},
    { "m_islandTag1", _wrap_btCollisionObjectFloatData_m_islandTag1_get, _wrap_btCollisionObjectFloatData_m_islandTag1_set},
    { "m_companionId", _wrap_btCollisionObjectFloatData_m_companionId_get, _wrap_btCollisionObjectFloatData_m_companionId_set},
    { "m_activationState1", _wrap_btCollisionObjectFloatData_m_activationState1_get, _wrap_btCollisionObjectFloatData_m_activationState1_set},
    { "m_internalType", _wrap_btCollisionObjectFloatData_m_internalType_get, _wrap_btCollisionObjectFloatData_m_internalType_set},
    { "m_checkCollideWith", _wrap_btCollisionObjectFloatData_m_checkCollideWith_get, _wrap_btCollisionObjectFloatData_m_checkCollideWith_set},
    { "m_padding", _wrap_btCollisionObjectFloatData_m_padding_get, _wrap_btCollisionObjectFloatData_m_padding_set},
    {0,0,0}
};
static swig_lua_attribute swig_btCollisionObjectFloatData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCollisionObjectFloatData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCollisionObjectFloatData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCollisionObjectFloatData_bases[] = {0};
static const char *swig_btCollisionObjectFloatData_base_names[] = {0};
static swig_lua_class _wrap_class_btCollisionObjectFloatData = { "btCollisionObjectFloatData", &SWIGTYPE_p_btCollisionObjectFloatData,_wrap_new_btCollisionObjectFloatData, swig_delete_btCollisionObjectFloatData, swig_btCollisionObjectFloatData_methods, swig_btCollisionObjectFloatData_attributes, { "btCollisionObjectFloatData", swig_btCollisionObjectFloatData_cls_methods, swig_btCollisionObjectFloatData_cls_attributes, swig_btCollisionObjectFloatData_cls_constants }, swig_btCollisionObjectFloatData_bases, swig_btCollisionObjectFloatData_base_names };

static int _wrap_gContactAddedCallback_set(lua_State* L) {
  int SWIG_arg = 0;
  ContactAddedCallback arg1 = (ContactAddedCallback) 0 ;
  
  SWIG_check_num_args("gContactAddedCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gContactAddedCallback",1,"ContactAddedCallback");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool,0))){
    SWIG_fail_ptr("gContactAddedCallback_set",1,SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool);
  }
  
  gContactAddedCallback = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gContactAddedCallback_get(lua_State* L) {
  int SWIG_arg = 0;
  ContactAddedCallback result;
  
  SWIG_check_num_args("gContactAddedCallback",0,0)
  result = (ContactAddedCallback)gContactAddedCallback;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btManifoldResult__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldResult *result = 0 ;
  
  SWIG_check_num_args("btManifoldResult::btManifoldResult",0,0)
  result = (btManifoldResult *)new btManifoldResult();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btManifoldResult,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btManifoldResult__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btManifoldResult *result = 0 ;
  
  SWIG_check_num_args("btManifoldResult::btManifoldResult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldResult::btManifoldResult",1,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btManifoldResult::btManifoldResult",2,"btCollisionObjectWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("new_btManifoldResult",1,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("new_btManifoldResult",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  result = (btManifoldResult *)new btManifoldResult((btCollisionObjectWrapper const *)arg1,(btCollisionObjectWrapper const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btManifoldResult,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btManifoldResult(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btManifoldResult__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObjectWrapper, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btCollisionObjectWrapper, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_btManifoldResult__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btManifoldResult'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btManifoldResult::btManifoldResult()\n"
    "    btManifoldResult::btManifoldResult(btCollisionObjectWrapper const *,btCollisionObjectWrapper const *)\n");
  lua_error(L);return 0;
}


static int _wrap_btManifoldResult_setPersistentManifold(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  SWIG_check_num_args("btManifoldResult::setPersistentManifold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldResult::setPersistentManifold",1,"btManifoldResult *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btManifoldResult::setPersistentManifold",2,"btPersistentManifold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btManifoldResult_setPersistentManifold",1,SWIGTYPE_p_btManifoldResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btManifoldResult_setPersistentManifold",2,SWIGTYPE_p_btPersistentManifold);
  }
  
  (arg1)->setPersistentManifold(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldResult_getPersistentManifold__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btPersistentManifold *result = 0 ;
  
  SWIG_check_num_args("btManifoldResult::getPersistentManifold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldResult::getPersistentManifold",1,"btManifoldResult const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btManifoldResult_getPersistentManifold",1,SWIGTYPE_p_btManifoldResult);
  }
  
  result = (btPersistentManifold *)((btManifoldResult const *)arg1)->getPersistentManifold();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPersistentManifold,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldResult_getPersistentManifold__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btPersistentManifold *result = 0 ;
  
  SWIG_check_num_args("btManifoldResult::getPersistentManifold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldResult::getPersistentManifold",1,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btManifoldResult_getPersistentManifold",1,SWIGTYPE_p_btManifoldResult);
  }
  
  result = (btPersistentManifold *)(arg1)->getPersistentManifold();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPersistentManifold,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldResult_getPersistentManifold(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btManifoldResult, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btManifoldResult_getPersistentManifold__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btManifoldResult, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btManifoldResult_getPersistentManifold__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btManifoldResult_getPersistentManifold'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btManifoldResult::getPersistentManifold() const\n"
    "    btManifoldResult::getPersistentManifold()\n");
  lua_error(L);return 0;
}


static int _wrap_btManifoldResult_setShapeIdentifiersA(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("btManifoldResult::setShapeIdentifiersA",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldResult::setShapeIdentifiersA",1,"btManifoldResult *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldResult::setShapeIdentifiersA",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btManifoldResult::setShapeIdentifiersA",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btManifoldResult_setShapeIdentifiersA",1,SWIGTYPE_p_btManifoldResult);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setShapeIdentifiersA(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldResult_setShapeIdentifiersB(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("btManifoldResult::setShapeIdentifiersB",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldResult::setShapeIdentifiersB",1,"btManifoldResult *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btManifoldResult::setShapeIdentifiersB",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btManifoldResult::setShapeIdentifiersB",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btManifoldResult_setShapeIdentifiersB",1,SWIGTYPE_p_btManifoldResult);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setShapeIdentifiersB(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldResult_addContactPoint(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  SWIG_check_num_args("btManifoldResult::addContactPoint",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldResult::addContactPoint",1,"btManifoldResult *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btManifoldResult::addContactPoint",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btManifoldResult::addContactPoint",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btManifoldResult::addContactPoint",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btManifoldResult_addContactPoint",1,SWIGTYPE_p_btManifoldResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btManifoldResult_addContactPoint",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btManifoldResult_addContactPoint",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  (arg1)->addContactPoint((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldResult_refreshContactPoints(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  
  SWIG_check_num_args("btManifoldResult::refreshContactPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldResult::refreshContactPoints",1,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btManifoldResult_refreshContactPoints",1,SWIGTYPE_p_btManifoldResult);
  }
  
  (arg1)->refreshContactPoints();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldResult_getBody0Wrap(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObjectWrapper *result = 0 ;
  
  SWIG_check_num_args("btManifoldResult::getBody0Wrap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldResult::getBody0Wrap",1,"btManifoldResult const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btManifoldResult_getBody0Wrap",1,SWIGTYPE_p_btManifoldResult);
  }
  
  result = (btCollisionObjectWrapper *)((btManifoldResult const *)arg1)->getBody0Wrap();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObjectWrapper,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldResult_getBody1Wrap(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObjectWrapper *result = 0 ;
  
  SWIG_check_num_args("btManifoldResult::getBody1Wrap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldResult::getBody1Wrap",1,"btManifoldResult const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btManifoldResult_getBody1Wrap",1,SWIGTYPE_p_btManifoldResult);
  }
  
  result = (btCollisionObjectWrapper *)((btManifoldResult const *)arg1)->getBody1Wrap();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObjectWrapper,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldResult_setBody0Wrap(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  
  SWIG_check_num_args("btManifoldResult::setBody0Wrap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldResult::setBody0Wrap",1,"btManifoldResult *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btManifoldResult::setBody0Wrap",2,"btCollisionObjectWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btManifoldResult_setBody0Wrap",1,SWIGTYPE_p_btManifoldResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btManifoldResult_setBody0Wrap",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  (arg1)->setBody0Wrap((btCollisionObjectWrapper const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldResult_setBody1Wrap(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  
  SWIG_check_num_args("btManifoldResult::setBody1Wrap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldResult::setBody1Wrap",1,"btManifoldResult *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btManifoldResult::setBody1Wrap",2,"btCollisionObjectWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btManifoldResult_setBody1Wrap",1,SWIGTYPE_p_btManifoldResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btManifoldResult_setBody1Wrap",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  (arg1)->setBody1Wrap((btCollisionObjectWrapper const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldResult_getBody0Internal(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObject *result = 0 ;
  
  SWIG_check_num_args("btManifoldResult::getBody0Internal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldResult::getBody0Internal",1,"btManifoldResult const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btManifoldResult_getBody0Internal",1,SWIGTYPE_p_btManifoldResult);
  }
  
  result = (btCollisionObject *)((btManifoldResult const *)arg1)->getBody0Internal();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldResult_getBody1Internal(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObject *result = 0 ;
  
  SWIG_check_num_args("btManifoldResult::getBody1Internal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldResult::getBody1Internal",1,"btManifoldResult const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btManifoldResult_getBody1Internal",1,SWIGTYPE_p_btManifoldResult);
  }
  
  result = (btCollisionObject *)((btManifoldResult const *)arg1)->getBody1Internal();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldResult_calculateCombinedRestitution(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btManifoldResult::calculateCombinedRestitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldResult::calculateCombinedRestitution",1,"btCollisionObject const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btManifoldResult::calculateCombinedRestitution",2,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btManifoldResult_calculateCombinedRestitution",1,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btManifoldResult_calculateCombinedRestitution",2,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btScalar)btManifoldResult::calculateCombinedRestitution((btCollisionObject const *)arg1,(btCollisionObject const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldResult_calculateCombinedFriction(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btManifoldResult::calculateCombinedFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btManifoldResult::calculateCombinedFriction",1,"btCollisionObject const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btManifoldResult::calculateCombinedFriction",2,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btManifoldResult_calculateCombinedFriction",1,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btManifoldResult_calculateCombinedFriction",2,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btScalar)btManifoldResult::calculateCombinedFriction((btCollisionObject const *)arg1,(btCollisionObject const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btManifoldResult(void *obj) {
btManifoldResult *arg1 = (btManifoldResult *) obj;
delete arg1;
}
static swig_lua_method swig_btManifoldResult_methods[] = {
    {"setPersistentManifold", _wrap_btManifoldResult_setPersistentManifold}, 
    {"getPersistentManifold", _wrap_btManifoldResult_getPersistentManifold}, 
    {"setShapeIdentifiersA", _wrap_btManifoldResult_setShapeIdentifiersA}, 
    {"setShapeIdentifiersB", _wrap_btManifoldResult_setShapeIdentifiersB}, 
    {"addContactPoint", _wrap_btManifoldResult_addContactPoint}, 
    {"refreshContactPoints", _wrap_btManifoldResult_refreshContactPoints}, 
    {"getBody0Wrap", _wrap_btManifoldResult_getBody0Wrap}, 
    {"getBody1Wrap", _wrap_btManifoldResult_getBody1Wrap}, 
    {"setBody0Wrap", _wrap_btManifoldResult_setBody0Wrap}, 
    {"setBody1Wrap", _wrap_btManifoldResult_setBody1Wrap}, 
    {"getBody0Internal", _wrap_btManifoldResult_getBody0Internal}, 
    {"getBody1Internal", _wrap_btManifoldResult_getBody1Internal}, 
    {0,0}
};
static swig_lua_attribute swig_btManifoldResult_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btManifoldResult_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btManifoldResult_cls_methods[] = {
    {"calculateCombinedRestitution", _wrap_btManifoldResult_calculateCombinedRestitution}, 
    {"calculateCombinedFriction", _wrap_btManifoldResult_calculateCombinedFriction}, 
    {0,0}
};
static swig_lua_const_info swig_btManifoldResult_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btManifoldResult_bases[] = {0};
static const char *swig_btManifoldResult_base_names[] = {0};
static swig_lua_class _wrap_class_btManifoldResult = { "btManifoldResult", &SWIGTYPE_p_btManifoldResult,_wrap_new_btManifoldResult, swig_delete_btManifoldResult, swig_btManifoldResult_methods, swig_btManifoldResult_attributes, { "btManifoldResult", swig_btManifoldResult_cls_methods, swig_btManifoldResult_cls_attributes, swig_btManifoldResult_cls_constants }, swig_btManifoldResult_bases, swig_btManifoldResult_base_names };

static int _wrap_btCollisionDispatcher_getDispatcherFlags(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionDispatcher::getDispatcherFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::getDispatcherFlags",1,"btCollisionDispatcher const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_getDispatcherFlags",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  result = (int)((btCollisionDispatcher const *)arg1)->getDispatcherFlags();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_setDispatcherFlags(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btCollisionDispatcher::setDispatcherFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::setDispatcherFlags",1,"btCollisionDispatcher *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionDispatcher::setDispatcherFlags",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_setDispatcherFlags",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDispatcherFlags(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_registerCollisionCreateFunc(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  int arg3 ;
  btCollisionAlgorithmCreateFunc *arg4 = (btCollisionAlgorithmCreateFunc *) 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::registerCollisionCreateFunc",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::registerCollisionCreateFunc",1,"btCollisionDispatcher *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionDispatcher::registerCollisionCreateFunc",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btCollisionDispatcher::registerCollisionCreateFunc",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btCollisionDispatcher::registerCollisionCreateFunc",4,"btCollisionAlgorithmCreateFunc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_registerCollisionCreateFunc",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btCollisionAlgorithmCreateFunc,0))){
    SWIG_fail_ptr("btCollisionDispatcher_registerCollisionCreateFunc",4,SWIGTYPE_p_btCollisionAlgorithmCreateFunc);
  }
  
  (arg1)->registerCollisionCreateFunc(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_getNumManifolds(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionDispatcher::getNumManifolds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::getNumManifolds",1,"btCollisionDispatcher const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_getNumManifolds",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  result = (int)((btCollisionDispatcher const *)arg1)->getNumManifolds();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_getInternalManifoldPointer(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPersistentManifold **result = 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::getInternalManifoldPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::getInternalManifoldPointer",1,"btCollisionDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_getInternalManifoldPointer",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  result = (btPersistentManifold **)(arg1)->getInternalManifoldPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_btPersistentManifold,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_getManifoldByIndexInternal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  btPersistentManifold *result = 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::getManifoldByIndexInternal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::getManifoldByIndexInternal",1,"btCollisionDispatcher *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionDispatcher::getManifoldByIndexInternal",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_getManifoldByIndexInternal",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btPersistentManifold *)(arg1)->getManifoldByIndexInternal(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPersistentManifold,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_getManifoldByIndexInternal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  btPersistentManifold *result = 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::getManifoldByIndexInternal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::getManifoldByIndexInternal",1,"btCollisionDispatcher const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionDispatcher::getManifoldByIndexInternal",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_getManifoldByIndexInternal",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btPersistentManifold *)((btCollisionDispatcher const *)arg1)->getManifoldByIndexInternal(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPersistentManifold,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_getManifoldByIndexInternal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionDispatcher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btCollisionDispatcher_getManifoldByIndexInternal__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionDispatcher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btCollisionDispatcher_getManifoldByIndexInternal__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btCollisionDispatcher_getManifoldByIndexInternal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCollisionDispatcher::getManifoldByIndexInternal(int)\n"
    "    btCollisionDispatcher::getManifoldByIndexInternal(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_new_btCollisionDispatcher(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionConfiguration *arg1 = (btCollisionConfiguration *) 0 ;
  btCollisionDispatcher *result = 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::btCollisionDispatcher",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::btCollisionDispatcher",1,"btCollisionConfiguration *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionConfiguration,0))){
    SWIG_fail_ptr("new_btCollisionDispatcher",1,SWIGTYPE_p_btCollisionConfiguration);
  }
  
  result = (btCollisionDispatcher *)new btCollisionDispatcher(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionDispatcher,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_getNewManifold(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btPersistentManifold *result = 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::getNewManifold",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::getNewManifold",1,"btCollisionDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionDispatcher::getNewManifold",2,"btCollisionObject const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCollisionDispatcher::getNewManifold",3,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_getNewManifold",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionDispatcher_getNewManifold",2,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionDispatcher_getNewManifold",3,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btPersistentManifold *)(arg1)->getNewManifold((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPersistentManifold,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_releaseManifold(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::releaseManifold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::releaseManifold",1,"btCollisionDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionDispatcher::releaseManifold",2,"btPersistentManifold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_releaseManifold",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btCollisionDispatcher_releaseManifold",2,SWIGTYPE_p_btPersistentManifold);
  }
  
  (arg1)->releaseManifold(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_clearManifold(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::clearManifold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::clearManifold",1,"btCollisionDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionDispatcher::clearManifold",2,"btPersistentManifold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_clearManifold",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btCollisionDispatcher_clearManifold",2,SWIGTYPE_p_btPersistentManifold);
  }
  
  (arg1)->clearManifold(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_findAlgorithm__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btPersistentManifold *arg4 = (btPersistentManifold *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::findAlgorithm",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::findAlgorithm",1,"btCollisionDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionDispatcher::findAlgorithm",2,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCollisionDispatcher::findAlgorithm",3,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btCollisionDispatcher::findAlgorithm",4,"btPersistentManifold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_findAlgorithm",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCollisionDispatcher_findAlgorithm",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCollisionDispatcher_findAlgorithm",3,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btCollisionDispatcher_findAlgorithm",4,SWIGTYPE_p_btPersistentManifold);
  }
  
  result = (btCollisionAlgorithm *)(arg1)->findAlgorithm((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionAlgorithm,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_findAlgorithm__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::findAlgorithm",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::findAlgorithm",1,"btCollisionDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionDispatcher::findAlgorithm",2,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCollisionDispatcher::findAlgorithm",3,"btCollisionObjectWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_findAlgorithm",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCollisionDispatcher_findAlgorithm",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCollisionDispatcher_findAlgorithm",3,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  result = (btCollisionAlgorithm *)(arg1)->findAlgorithm((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionAlgorithm,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_findAlgorithm(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionDispatcher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btCollisionObjectWrapper, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btCollisionObjectWrapper, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btCollisionDispatcher_findAlgorithm__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionDispatcher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btCollisionObjectWrapper, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btCollisionObjectWrapper, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btPersistentManifold, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btCollisionDispatcher_findAlgorithm__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btCollisionDispatcher_findAlgorithm'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCollisionDispatcher::findAlgorithm(btCollisionObjectWrapper const *,btCollisionObjectWrapper const *,btPersistentManifold *)\n"
    "    btCollisionDispatcher::findAlgorithm(btCollisionObjectWrapper const *,btCollisionObjectWrapper const *)\n");
  lua_error(L);return 0;
}


static int _wrap_btCollisionDispatcher_needsCollision(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionDispatcher::needsCollision",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::needsCollision",1,"btCollisionDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionDispatcher::needsCollision",2,"btCollisionObject const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCollisionDispatcher::needsCollision",3,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_needsCollision",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionDispatcher_needsCollision",2,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionDispatcher_needsCollision",3,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (bool)(arg1)->needsCollision((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_needsResponse(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("btCollisionDispatcher::needsResponse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::needsResponse",1,"btCollisionDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionDispatcher::needsResponse",2,"btCollisionObject const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCollisionDispatcher::needsResponse",3,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_needsResponse",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionDispatcher_needsResponse",2,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionDispatcher_needsResponse",3,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (bool)(arg1)->needsResponse((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_dispatchAllCollisionPairs(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btOverlappingPairCache *arg2 = (btOverlappingPairCache *) 0 ;
  btDispatcherInfo *arg3 = 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::dispatchAllCollisionPairs",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::dispatchAllCollisionPairs",1,"btCollisionDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionDispatcher::dispatchAllCollisionPairs",2,"btOverlappingPairCache *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btCollisionDispatcher::dispatchAllCollisionPairs",3,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btCollisionDispatcher::dispatchAllCollisionPairs",4,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_dispatchAllCollisionPairs",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOverlappingPairCache,0))){
    SWIG_fail_ptr("btCollisionDispatcher_dispatchAllCollisionPairs",2,SWIGTYPE_p_btOverlappingPairCache);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btCollisionDispatcher_dispatchAllCollisionPairs",3,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_dispatchAllCollisionPairs",4,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->dispatchAllCollisionPairs(arg2,(btDispatcherInfo const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_setNearCallback(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btNearCallback arg2 = (btNearCallback) 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::setNearCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::setNearCallback",1,"btCollisionDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionDispatcher::setNearCallback",2,"btNearCallback");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_setNearCallback",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void,0))){
    SWIG_fail_ptr("btCollisionDispatcher_setNearCallback",2,SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void);
  }
  
  (arg1)->setNearCallback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_getNearCallback(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btNearCallback result;
  
  SWIG_check_num_args("btCollisionDispatcher::getNearCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::getNearCallback",1,"btCollisionDispatcher const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_getNearCallback",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  result = (btNearCallback)((btCollisionDispatcher const *)arg1)->getNearCallback();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_defaultNearCallback(lua_State* L) {
  int SWIG_arg = 0;
  btBroadphasePair *arg1 = 0 ;
  btCollisionDispatcher *arg2 = 0 ;
  btDispatcherInfo *arg3 = 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::defaultNearCallback",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btCollisionDispatcher::defaultNearCallback",1,"btBroadphasePair &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCollisionDispatcher::defaultNearCallback",2,"btCollisionDispatcher &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btCollisionDispatcher::defaultNearCallback",3,"btDispatcherInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btBroadphasePair,0))){
    SWIG_fail_ptr("btCollisionDispatcher_defaultNearCallback",1,SWIGTYPE_p_btBroadphasePair);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_defaultNearCallback",2,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btCollisionDispatcher_defaultNearCallback",3,SWIGTYPE_p_btDispatcherInfo);
  }
  
  btCollisionDispatcher::defaultNearCallback(*arg1,*arg2,(btDispatcherInfo const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_allocateCollisionAlgorithm(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::allocateCollisionAlgorithm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::allocateCollisionAlgorithm",1,"btCollisionDispatcher *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btCollisionDispatcher::allocateCollisionAlgorithm",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_allocateCollisionAlgorithm",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (void *)(arg1)->allocateCollisionAlgorithm(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_freeCollisionAlgorithm(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::freeCollisionAlgorithm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::freeCollisionAlgorithm",1,"btCollisionDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionDispatcher::freeCollisionAlgorithm",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_freeCollisionAlgorithm",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btCollisionDispatcher_freeCollisionAlgorithm");
  (arg1)->freeCollisionAlgorithm(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_getCollisionConfiguration__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionConfiguration *result = 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::getCollisionConfiguration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::getCollisionConfiguration",1,"btCollisionDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_getCollisionConfiguration",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  result = (btCollisionConfiguration *)(arg1)->getCollisionConfiguration();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionConfiguration,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_getCollisionConfiguration__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionConfiguration *result = 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::getCollisionConfiguration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::getCollisionConfiguration",1,"btCollisionDispatcher const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_getCollisionConfiguration",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  result = (btCollisionConfiguration *)((btCollisionDispatcher const *)arg1)->getCollisionConfiguration();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionConfiguration,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_getCollisionConfiguration(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionDispatcher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btCollisionDispatcher_getCollisionConfiguration__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionDispatcher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btCollisionDispatcher_getCollisionConfiguration__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btCollisionDispatcher_getCollisionConfiguration'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCollisionDispatcher::getCollisionConfiguration()\n"
    "    btCollisionDispatcher::getCollisionConfiguration() const\n");
  lua_error(L);return 0;
}


static int _wrap_btCollisionDispatcher_setCollisionConfiguration(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionConfiguration *arg2 = (btCollisionConfiguration *) 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::setCollisionConfiguration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::setCollisionConfiguration",1,"btCollisionDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionDispatcher::setCollisionConfiguration",2,"btCollisionConfiguration *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_setCollisionConfiguration",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionConfiguration,0))){
    SWIG_fail_ptr("btCollisionDispatcher_setCollisionConfiguration",2,SWIGTYPE_p_btCollisionConfiguration);
  }
  
  (arg1)->setCollisionConfiguration(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_getInternalManifoldPool__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPoolAllocator *result = 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::getInternalManifoldPool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::getInternalManifoldPool",1,"btCollisionDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_getInternalManifoldPool",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  result = (btPoolAllocator *)(arg1)->getInternalManifoldPool();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPoolAllocator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_getInternalManifoldPool__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPoolAllocator *result = 0 ;
  
  SWIG_check_num_args("btCollisionDispatcher::getInternalManifoldPool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionDispatcher::getInternalManifoldPool",1,"btCollisionDispatcher const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionDispatcher,0))){
    SWIG_fail_ptr("btCollisionDispatcher_getInternalManifoldPool",1,SWIGTYPE_p_btCollisionDispatcher);
  }
  
  result = (btPoolAllocator *)((btCollisionDispatcher const *)arg1)->getInternalManifoldPool();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPoolAllocator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionDispatcher_getInternalManifoldPool(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionDispatcher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btCollisionDispatcher_getInternalManifoldPool__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionDispatcher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btCollisionDispatcher_getInternalManifoldPool__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btCollisionDispatcher_getInternalManifoldPool'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCollisionDispatcher::getInternalManifoldPool()\n"
    "    btCollisionDispatcher::getInternalManifoldPool() const\n");
  lua_error(L);return 0;
}


static void swig_delete_btCollisionDispatcher(void *obj) {
btCollisionDispatcher *arg1 = (btCollisionDispatcher *) obj;
delete arg1;
}
static swig_lua_method swig_btCollisionDispatcher_methods[] = {
    {"getDispatcherFlags", _wrap_btCollisionDispatcher_getDispatcherFlags}, 
    {"setDispatcherFlags", _wrap_btCollisionDispatcher_setDispatcherFlags}, 
    {"registerCollisionCreateFunc", _wrap_btCollisionDispatcher_registerCollisionCreateFunc}, 
    {"getNumManifolds", _wrap_btCollisionDispatcher_getNumManifolds}, 
    {"getInternalManifoldPointer", _wrap_btCollisionDispatcher_getInternalManifoldPointer}, 
    {"getManifoldByIndexInternal", _wrap_btCollisionDispatcher_getManifoldByIndexInternal}, 
    {"getNewManifold", _wrap_btCollisionDispatcher_getNewManifold}, 
    {"releaseManifold", _wrap_btCollisionDispatcher_releaseManifold}, 
    {"clearManifold", _wrap_btCollisionDispatcher_clearManifold}, 
    {"findAlgorithm", _wrap_btCollisionDispatcher_findAlgorithm}, 
    {"needsCollision", _wrap_btCollisionDispatcher_needsCollision}, 
    {"needsResponse", _wrap_btCollisionDispatcher_needsResponse}, 
    {"dispatchAllCollisionPairs", _wrap_btCollisionDispatcher_dispatchAllCollisionPairs}, 
    {"setNearCallback", _wrap_btCollisionDispatcher_setNearCallback}, 
    {"getNearCallback", _wrap_btCollisionDispatcher_getNearCallback}, 
    {"allocateCollisionAlgorithm", _wrap_btCollisionDispatcher_allocateCollisionAlgorithm}, 
    {"freeCollisionAlgorithm", _wrap_btCollisionDispatcher_freeCollisionAlgorithm}, 
    {"getCollisionConfiguration", _wrap_btCollisionDispatcher_getCollisionConfiguration}, 
    {"setCollisionConfiguration", _wrap_btCollisionDispatcher_setCollisionConfiguration}, 
    {"getInternalManifoldPool", _wrap_btCollisionDispatcher_getInternalManifoldPool}, 
    {0,0}
};
static swig_lua_attribute swig_btCollisionDispatcher_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btCollisionDispatcher_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCollisionDispatcher_cls_methods[] = {
    {"defaultNearCallback", _wrap_btCollisionDispatcher_defaultNearCallback}, 
    {0,0}
};
static swig_lua_const_info swig_btCollisionDispatcher_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("CD_STATIC_STATIC_REPORTED", btCollisionDispatcher::CD_STATIC_STATIC_REPORTED)},
    {SWIG_LUA_CONSTTAB_INT("CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD", btCollisionDispatcher::CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD)},
    {SWIG_LUA_CONSTTAB_INT("CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION", btCollisionDispatcher::CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCollisionDispatcher_bases[] = {0,0};
static const char *swig_btCollisionDispatcher_base_names[] = {"btDispatcher *",0};
static swig_lua_class _wrap_class_btCollisionDispatcher = { "btCollisionDispatcher", &SWIGTYPE_p_btCollisionDispatcher,_wrap_new_btCollisionDispatcher, swig_delete_btCollisionDispatcher, swig_btCollisionDispatcher_methods, swig_btCollisionDispatcher_attributes, { "btCollisionDispatcher", swig_btCollisionDispatcher_cls_methods, swig_btCollisionDispatcher_cls_attributes, swig_btCollisionDispatcher_cls_constants }, swig_btCollisionDispatcher_bases, swig_btCollisionDispatcher_base_names };

static int _wrap_new_btCollisionWorld__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btOverlappingPairCache *arg2 = (btOverlappingPairCache *) 0 ;
  int arg3 ;
  btCollisionWorld *result = 0 ;
  
  SWIG_check_num_args("btCollisionWorld::btCollisionWorld",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionWorld::btCollisionWorld",1,"btDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionWorld::btCollisionWorld",2,"btOverlappingPairCache *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btCollisionWorld::btCollisionWorld",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("new_btCollisionWorld",1,SWIGTYPE_p_btDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOverlappingPairCache,0))){
    SWIG_fail_ptr("new_btCollisionWorld",2,SWIGTYPE_p_btOverlappingPairCache);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (btCollisionWorld *)new btCollisionWorld(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionWorld,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCollisionWorld__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btOverlappingPairCache *arg2 = (btOverlappingPairCache *) 0 ;
  btCollisionWorld *result = 0 ;
  
  SWIG_check_num_args("btCollisionWorld::btCollisionWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionWorld::btCollisionWorld",1,"btDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionWorld::btCollisionWorld",2,"btOverlappingPairCache *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("new_btCollisionWorld",1,SWIGTYPE_p_btDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btOverlappingPairCache,0))){
    SWIG_fail_ptr("new_btCollisionWorld",2,SWIGTYPE_p_btOverlappingPairCache);
  }
  
  result = (btCollisionWorld *)new btCollisionWorld(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionWorld,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCollisionWorld(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDispatcher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btOverlappingPairCache, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_btCollisionWorld__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDispatcher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btOverlappingPairCache, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_btCollisionWorld__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btCollisionWorld'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCollisionWorld::btCollisionWorld(btDispatcher *,btOverlappingPairCache *,int)\n"
    "    btCollisionWorld::btCollisionWorld(btDispatcher *,btOverlappingPairCache *)\n");
  lua_error(L);return 0;
}


static int _wrap_btCollisionWorld_getBroadphase(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btBroadphaseInterface *result = 0 ;
  
  SWIG_check_num_args("btCollisionWorld::getBroadphase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionWorld::getBroadphase",1,"btCollisionWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("btCollisionWorld_getBroadphase",1,SWIGTYPE_p_btCollisionWorld);
  }
  
  result = (btBroadphaseInterface *)(arg1)->getBroadphase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphaseInterface,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionWorld_getPairCache(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  SWIG_check_num_args("btCollisionWorld::getPairCache",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionWorld::getPairCache",1,"btCollisionWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("btCollisionWorld_getPairCache",1,SWIGTYPE_p_btCollisionWorld);
  }
  
  result = (btOverlappingPairCache *)(arg1)->getPairCache();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btOverlappingPairCache,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionWorld_getDispatcher(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btDispatcher *result = 0 ;
  
  SWIG_check_num_args("btCollisionWorld::getDispatcher",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionWorld::getDispatcher",1,"btCollisionWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("btCollisionWorld_getDispatcher",1,SWIGTYPE_p_btCollisionWorld);
  }
  
  result = (btDispatcher *)(arg1)->getDispatcher();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDispatcher,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionWorld_getNumCollisionObjects(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  int result;
  
  SWIG_check_num_args("btCollisionWorld::getNumCollisionObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionWorld::getNumCollisionObjects",1,"btCollisionWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("btCollisionWorld_getNumCollisionObjects",1,SWIGTYPE_p_btCollisionWorld);
  }
  
  result = (int)((btCollisionWorld const *)arg1)->getNumCollisionObjects();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionWorld_addCollisionObject__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  short arg4 ;
  
  SWIG_check_num_args("btCollisionWorld::addCollisionObject",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionWorld::addCollisionObject",1,"btCollisionWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionWorld::addCollisionObject",2,"btCollisionObject *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btCollisionWorld::addCollisionObject",3,"short");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btCollisionWorld::addCollisionObject",4,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("btCollisionWorld_addCollisionObject",1,SWIGTYPE_p_btCollisionWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionWorld_addCollisionObject",2,SWIGTYPE_p_btCollisionObject);
  }
  
  arg3 = (short)lua_tonumber(L, 3);
  arg4 = (short)lua_tonumber(L, 4);
  (arg1)->addCollisionObject(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionWorld_addCollisionObject__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  
  SWIG_check_num_args("btCollisionWorld::addCollisionObject",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionWorld::addCollisionObject",1,"btCollisionWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionWorld::addCollisionObject",2,"btCollisionObject *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btCollisionWorld::addCollisionObject",3,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("btCollisionWorld_addCollisionObject",1,SWIGTYPE_p_btCollisionWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionWorld_addCollisionObject",2,SWIGTYPE_p_btCollisionObject);
  }
  
  arg3 = (short)lua_tonumber(L, 3);
  (arg1)->addCollisionObject(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionWorld_addCollisionObject__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  SWIG_check_num_args("btCollisionWorld::addCollisionObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionWorld::addCollisionObject",1,"btCollisionWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionWorld::addCollisionObject",2,"btCollisionObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("btCollisionWorld_addCollisionObject",1,SWIGTYPE_p_btCollisionWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionWorld_addCollisionObject",2,SWIGTYPE_p_btCollisionObject);
  }
  
  (arg1)->addCollisionObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionWorld_addCollisionObject(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btCollisionWorld_addCollisionObject__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btCollisionWorld_addCollisionObject__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btCollisionWorld_addCollisionObject__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btCollisionWorld_addCollisionObject'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCollisionWorld::addCollisionObject(btCollisionObject *,short,short)\n"
    "    btCollisionWorld::addCollisionObject(btCollisionObject *,short)\n"
    "    btCollisionWorld::addCollisionObject(btCollisionObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_btCollisionWorld_getCollisionObjectArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObjectArray *result = 0 ;
  
  SWIG_check_num_args("btCollisionWorld::getCollisionObjectArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionWorld::getCollisionObjectArray",1,"btCollisionWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("btCollisionWorld_getCollisionObjectArray",1,SWIGTYPE_p_btCollisionWorld);
  }
  
  result = (btCollisionObjectArray *) &(arg1)->getCollisionObjectArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionWorld_getCollisionObjectArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObjectArray *result = 0 ;
  
  SWIG_check_num_args("btCollisionWorld::getCollisionObjectArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionWorld::getCollisionObjectArray",1,"btCollisionWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("btCollisionWorld_getCollisionObjectArray",1,SWIGTYPE_p_btCollisionWorld);
  }
  
  result = (btCollisionObjectArray *) &((btCollisionWorld const *)arg1)->getCollisionObjectArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionWorld_getCollisionObjectArray(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btCollisionWorld_getCollisionObjectArray__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btCollisionWorld_getCollisionObjectArray__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btCollisionWorld_getCollisionObjectArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btCollisionWorld::getCollisionObjectArray()\n"
    "    btCollisionWorld::getCollisionObjectArray() const\n");
  lua_error(L);return 0;
}


static int _wrap_btCollisionWorld_removeCollisionObject(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  SWIG_check_num_args("btCollisionWorld::removeCollisionObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionWorld::removeCollisionObject",1,"btCollisionWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionWorld::removeCollisionObject",2,"btCollisionObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("btCollisionWorld_removeCollisionObject",1,SWIGTYPE_p_btCollisionWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCollisionWorld_removeCollisionObject",2,SWIGTYPE_p_btCollisionObject);
  }
  
  (arg1)->removeCollisionObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionWorld_performDiscreteCollisionDetection(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  SWIG_check_num_args("btCollisionWorld::performDiscreteCollisionDetection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionWorld::performDiscreteCollisionDetection",1,"btCollisionWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("btCollisionWorld_performDiscreteCollisionDetection",1,SWIGTYPE_p_btCollisionWorld);
  }
  
  (arg1)->performDiscreteCollisionDetection();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionWorld_getDispatchInfo(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btDispatcherInfo *result = 0 ;
  
  SWIG_check_num_args("btCollisionWorld::getDispatchInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionWorld::getDispatchInfo",1,"btCollisionWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("btCollisionWorld_getDispatchInfo",1,SWIGTYPE_p_btCollisionWorld);
  }
  
  result = (btDispatcherInfo *) &(arg1)->getDispatchInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDispatcherInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCollisionWorld(void *obj) {
btCollisionWorld *arg1 = (btCollisionWorld *) obj;
delete arg1;
}
static swig_lua_method swig_btCollisionWorld_methods[] = {
    {"getBroadphase", _wrap_btCollisionWorld_getBroadphase}, 
    {"getPairCache", _wrap_btCollisionWorld_getPairCache}, 
    {"getDispatcher", _wrap_btCollisionWorld_getDispatcher}, 
    {"getNumCollisionObjects", _wrap_btCollisionWorld_getNumCollisionObjects}, 
    {"addCollisionObject", _wrap_btCollisionWorld_addCollisionObject}, 
    {"getCollisionObjectArray", _wrap_btCollisionWorld_getCollisionObjectArray}, 
    {"removeCollisionObject", _wrap_btCollisionWorld_removeCollisionObject}, 
    {"performDiscreteCollisionDetection", _wrap_btCollisionWorld_performDiscreteCollisionDetection}, 
    {"getDispatchInfo", _wrap_btCollisionWorld_getDispatchInfo}, 
    {0,0}
};
static swig_lua_attribute swig_btCollisionWorld_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btCollisionWorld_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCollisionWorld_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCollisionWorld_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCollisionWorld_bases[] = {0};
static const char *swig_btCollisionWorld_base_names[] = {0};
static swig_lua_class _wrap_class_btCollisionWorld = { "btCollisionWorld", &SWIGTYPE_p_btCollisionWorld,_wrap_new_btCollisionWorld, swig_delete_btCollisionWorld, swig_btCollisionWorld_methods, swig_btCollisionWorld_attributes, { "btCollisionWorld", swig_btCollisionWorld_cls_methods, swig_btCollisionWorld_cls_attributes, swig_btCollisionWorld_cls_constants }, swig_btCollisionWorld_bases, swig_btCollisionWorld_base_names };

static void swig_delete_btActivatingCollisionAlgorithm(void *obj) {
btActivatingCollisionAlgorithm *arg1 = (btActivatingCollisionAlgorithm *) obj;
delete arg1;
}
static swig_lua_method swig_btActivatingCollisionAlgorithm_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btActivatingCollisionAlgorithm_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btActivatingCollisionAlgorithm_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btActivatingCollisionAlgorithm_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btActivatingCollisionAlgorithm_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btActivatingCollisionAlgorithm_bases[] = {0,0};
static const char *swig_btActivatingCollisionAlgorithm_base_names[] = {"btCollisionAlgorithm *",0};
static swig_lua_class _wrap_class_btActivatingCollisionAlgorithm = { "btActivatingCollisionAlgorithm", &SWIGTYPE_p_btActivatingCollisionAlgorithm,0, swig_delete_btActivatingCollisionAlgorithm, swig_btActivatingCollisionAlgorithm_methods, swig_btActivatingCollisionAlgorithm_attributes, { "btActivatingCollisionAlgorithm", swig_btActivatingCollisionAlgorithm_cls_methods, swig_btActivatingCollisionAlgorithm_cls_attributes, swig_btActivatingCollisionAlgorithm_cls_constants }, swig_btActivatingCollisionAlgorithm_bases, swig_btActivatingCollisionAlgorithm_base_names };

static int _wrap_btCompoundCollisionAlgorithm_processCollision(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundCollisionAlgorithm *arg1 = (btCompoundCollisionAlgorithm *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  SWIG_check_num_args("btCompoundCollisionAlgorithm::processCollision",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundCollisionAlgorithm::processCollision",1,"btCompoundCollisionAlgorithm *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCompoundCollisionAlgorithm::processCollision",2,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCompoundCollisionAlgorithm::processCollision",3,"btCollisionObjectWrapper const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btCompoundCollisionAlgorithm::processCollision",4,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btCompoundCollisionAlgorithm::processCollision",5,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundCollisionAlgorithm,0))){
    SWIG_fail_ptr("btCompoundCollisionAlgorithm_processCollision",1,SWIGTYPE_p_btCompoundCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCompoundCollisionAlgorithm_processCollision",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btCompoundCollisionAlgorithm_processCollision",3,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btCompoundCollisionAlgorithm_processCollision",4,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btCompoundCollisionAlgorithm_processCollision",5,SWIGTYPE_p_btManifoldResult);
  }
  
  (arg1)->processCollision((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,(btDispatcherInfo const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundCollisionAlgorithm_calculateTimeOfImpact(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundCollisionAlgorithm *arg1 = (btCompoundCollisionAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btCompoundCollisionAlgorithm::calculateTimeOfImpact",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundCollisionAlgorithm::calculateTimeOfImpact",1,"btCompoundCollisionAlgorithm *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCompoundCollisionAlgorithm::calculateTimeOfImpact",2,"btCollisionObject *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btCompoundCollisionAlgorithm::calculateTimeOfImpact",3,"btCollisionObject *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btCompoundCollisionAlgorithm::calculateTimeOfImpact",4,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btCompoundCollisionAlgorithm::calculateTimeOfImpact",5,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundCollisionAlgorithm,0))){
    SWIG_fail_ptr("btCompoundCollisionAlgorithm_calculateTimeOfImpact",1,SWIGTYPE_p_btCompoundCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCompoundCollisionAlgorithm_calculateTimeOfImpact",2,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btCompoundCollisionAlgorithm_calculateTimeOfImpact",3,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btCompoundCollisionAlgorithm_calculateTimeOfImpact",4,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btCompoundCollisionAlgorithm_calculateTimeOfImpact",5,SWIGTYPE_p_btManifoldResult);
  }
  
  result = (btScalar)(arg1)->calculateTimeOfImpact(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCompoundCollisionAlgorithm_getAllContactManifolds(lua_State* L) {
  int SWIG_arg = 0;
  btCompoundCollisionAlgorithm *arg1 = (btCompoundCollisionAlgorithm *) 0 ;
  btManifoldArray *arg2 = 0 ;
  
  SWIG_check_num_args("btCompoundCollisionAlgorithm::getAllContactManifolds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCompoundCollisionAlgorithm::getAllContactManifolds",1,"btCompoundCollisionAlgorithm *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btCompoundCollisionAlgorithm::getAllContactManifolds",2,"btManifoldArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCompoundCollisionAlgorithm,0))){
    SWIG_fail_ptr("btCompoundCollisionAlgorithm_getAllContactManifolds",1,SWIGTYPE_p_btCompoundCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t,0))){
    SWIG_fail_ptr("btCompoundCollisionAlgorithm_getAllContactManifolds",2,SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t);
  }
  
  (arg1)->getAllContactManifolds(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCompoundCollisionAlgorithm(void *obj) {
btCompoundCollisionAlgorithm *arg1 = (btCompoundCollisionAlgorithm *) obj;
delete arg1;
}
static swig_lua_method swig_btCompoundCollisionAlgorithm_methods[] = {
    {"processCollision", _wrap_btCompoundCollisionAlgorithm_processCollision}, 
    {"calculateTimeOfImpact", _wrap_btCompoundCollisionAlgorithm_calculateTimeOfImpact}, 
    {"getAllContactManifolds", _wrap_btCompoundCollisionAlgorithm_getAllContactManifolds}, 
    {0,0}
};
static swig_lua_attribute swig_btCompoundCollisionAlgorithm_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btCompoundCollisionAlgorithm_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCompoundCollisionAlgorithm_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCompoundCollisionAlgorithm_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCompoundCollisionAlgorithm_bases[] = {0,0};
static const char *swig_btCompoundCollisionAlgorithm_base_names[] = {"btActivatingCollisionAlgorithm *",0};
static swig_lua_class _wrap_class_btCompoundCollisionAlgorithm = { "btCompoundCollisionAlgorithm", &SWIGTYPE_p_btCompoundCollisionAlgorithm,0, swig_delete_btCompoundCollisionAlgorithm, swig_btCompoundCollisionAlgorithm_methods, swig_btCompoundCollisionAlgorithm_attributes, { "btCompoundCollisionAlgorithm", swig_btCompoundCollisionAlgorithm_cls_methods, swig_btCompoundCollisionAlgorithm_cls_attributes, swig_btCompoundCollisionAlgorithm_cls_constants }, swig_btCompoundCollisionAlgorithm_bases, swig_btCompoundCollisionAlgorithm_base_names };

static int _wrap_btConvexTriangleCallback_m_triangleCount_set(lua_State* L) {
  int SWIG_arg = 0;
  btConvexTriangleCallback *arg1 = (btConvexTriangleCallback *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btConvexTriangleCallback::m_triangleCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexTriangleCallback::m_triangleCount",1,"btConvexTriangleCallback *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConvexTriangleCallback::m_triangleCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexTriangleCallback,0))){
    SWIG_fail_ptr("btConvexTriangleCallback_m_triangleCount_set",1,SWIGTYPE_p_btConvexTriangleCallback);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_triangleCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexTriangleCallback_m_triangleCount_get(lua_State* L) {
  int SWIG_arg = 0;
  btConvexTriangleCallback *arg1 = (btConvexTriangleCallback *) 0 ;
  int result;
  
  SWIG_check_num_args("btConvexTriangleCallback::m_triangleCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexTriangleCallback::m_triangleCount",1,"btConvexTriangleCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexTriangleCallback,0))){
    SWIG_fail_ptr("btConvexTriangleCallback_m_triangleCount_get",1,SWIGTYPE_p_btConvexTriangleCallback);
  }
  
  result = (int) ((arg1)->m_triangleCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexTriangleCallback_m_manifoldPtr_set(lua_State* L) {
  int SWIG_arg = 0;
  btConvexTriangleCallback *arg1 = (btConvexTriangleCallback *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  SWIG_check_num_args("btConvexTriangleCallback::m_manifoldPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexTriangleCallback::m_manifoldPtr",1,"btConvexTriangleCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConvexTriangleCallback::m_manifoldPtr",2,"btPersistentManifold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexTriangleCallback,0))){
    SWIG_fail_ptr("btConvexTriangleCallback_m_manifoldPtr_set",1,SWIGTYPE_p_btConvexTriangleCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btPersistentManifold,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btConvexTriangleCallback_m_manifoldPtr_set",2,SWIGTYPE_p_btPersistentManifold);
  }
  
  if (arg1) (arg1)->m_manifoldPtr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexTriangleCallback_m_manifoldPtr_get(lua_State* L) {
  int SWIG_arg = 0;
  btConvexTriangleCallback *arg1 = (btConvexTriangleCallback *) 0 ;
  btPersistentManifold *result = 0 ;
  
  SWIG_check_num_args("btConvexTriangleCallback::m_manifoldPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexTriangleCallback::m_manifoldPtr",1,"btConvexTriangleCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexTriangleCallback,0))){
    SWIG_fail_ptr("btConvexTriangleCallback_m_manifoldPtr_get",1,SWIGTYPE_p_btConvexTriangleCallback);
  }
  
  result = (btPersistentManifold *) ((arg1)->m_manifoldPtr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPersistentManifold,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btConvexTriangleCallback(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  bool arg4 ;
  btConvexTriangleCallback *result = 0 ;
  
  SWIG_check_num_args("btConvexTriangleCallback::btConvexTriangleCallback",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexTriangleCallback::btConvexTriangleCallback",1,"btDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConvexTriangleCallback::btConvexTriangleCallback",2,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btConvexTriangleCallback::btConvexTriangleCallback",3,"btCollisionObjectWrapper const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("btConvexTriangleCallback::btConvexTriangleCallback",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("new_btConvexTriangleCallback",1,SWIGTYPE_p_btDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("new_btConvexTriangleCallback",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("new_btConvexTriangleCallback",3,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (btConvexTriangleCallback *)new btConvexTriangleCallback(arg1,(btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexTriangleCallback,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexTriangleCallback_setTimeStepAndCounters(lua_State* L) {
  int SWIG_arg = 0;
  btConvexTriangleCallback *arg1 = (btConvexTriangleCallback *) 0 ;
  btScalar arg2 ;
  btDispatcherInfo *arg3 = 0 ;
  btCollisionObjectWrapper *arg4 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg5 = (btCollisionObjectWrapper *) 0 ;
  btManifoldResult *arg6 = (btManifoldResult *) 0 ;
  
  SWIG_check_num_args("btConvexTriangleCallback::setTimeStepAndCounters",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexTriangleCallback::setTimeStepAndCounters",1,"btConvexTriangleCallback *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConvexTriangleCallback::setTimeStepAndCounters",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btConvexTriangleCallback::setTimeStepAndCounters",3,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btConvexTriangleCallback::setTimeStepAndCounters",4,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btConvexTriangleCallback::setTimeStepAndCounters",5,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("btConvexTriangleCallback::setTimeStepAndCounters",6,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexTriangleCallback,0))){
    SWIG_fail_ptr("btConvexTriangleCallback_setTimeStepAndCounters",1,SWIGTYPE_p_btConvexTriangleCallback);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btConvexTriangleCallback_setTimeStepAndCounters",3,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btConvexTriangleCallback_setTimeStepAndCounters",4,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btConvexTriangleCallback_setTimeStepAndCounters",5,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btConvexTriangleCallback_setTimeStepAndCounters",6,SWIGTYPE_p_btManifoldResult);
  }
  
  (arg1)->setTimeStepAndCounters(arg2,(btDispatcherInfo const &)*arg3,(btCollisionObjectWrapper const *)arg4,(btCollisionObjectWrapper const *)arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexTriangleCallback_clearWrapperData(lua_State* L) {
  int SWIG_arg = 0;
  btConvexTriangleCallback *arg1 = (btConvexTriangleCallback *) 0 ;
  
  SWIG_check_num_args("btConvexTriangleCallback::clearWrapperData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexTriangleCallback::clearWrapperData",1,"btConvexTriangleCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexTriangleCallback,0))){
    SWIG_fail_ptr("btConvexTriangleCallback_clearWrapperData",1,SWIGTYPE_p_btConvexTriangleCallback);
  }
  
  (arg1)->clearWrapperData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexTriangleCallback_processTriangle(lua_State* L) {
  int SWIG_arg = 0;
  btConvexTriangleCallback *arg1 = (btConvexTriangleCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("btConvexTriangleCallback::processTriangle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexTriangleCallback::processTriangle",1,"btConvexTriangleCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConvexTriangleCallback::processTriangle",2,"btVector3 *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btConvexTriangleCallback::processTriangle",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btConvexTriangleCallback::processTriangle",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexTriangleCallback,0))){
    SWIG_fail_ptr("btConvexTriangleCallback_processTriangle",1,SWIGTYPE_p_btConvexTriangleCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btConvexTriangleCallback_processTriangle",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->processTriangle(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexTriangleCallback_clearCache(lua_State* L) {
  int SWIG_arg = 0;
  btConvexTriangleCallback *arg1 = (btConvexTriangleCallback *) 0 ;
  
  SWIG_check_num_args("btConvexTriangleCallback::clearCache",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexTriangleCallback::clearCache",1,"btConvexTriangleCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexTriangleCallback,0))){
    SWIG_fail_ptr("btConvexTriangleCallback_clearCache",1,SWIGTYPE_p_btConvexTriangleCallback);
  }
  
  (arg1)->clearCache();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexTriangleCallback_getAabbMin(lua_State* L) {
  int SWIG_arg = 0;
  btConvexTriangleCallback *arg1 = (btConvexTriangleCallback *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btConvexTriangleCallback::getAabbMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexTriangleCallback::getAabbMin",1,"btConvexTriangleCallback const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexTriangleCallback,0))){
    SWIG_fail_ptr("btConvexTriangleCallback_getAabbMin",1,SWIGTYPE_p_btConvexTriangleCallback);
  }
  
  result = (btVector3 *) &((btConvexTriangleCallback const *)arg1)->getAabbMin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexTriangleCallback_getAabbMax(lua_State* L) {
  int SWIG_arg = 0;
  btConvexTriangleCallback *arg1 = (btConvexTriangleCallback *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btConvexTriangleCallback::getAabbMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexTriangleCallback::getAabbMax",1,"btConvexTriangleCallback const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexTriangleCallback,0))){
    SWIG_fail_ptr("btConvexTriangleCallback_getAabbMax",1,SWIGTYPE_p_btConvexTriangleCallback);
  }
  
  result = (btVector3 *) &((btConvexTriangleCallback const *)arg1)->getAabbMax();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConvexTriangleCallback(void *obj) {
btConvexTriangleCallback *arg1 = (btConvexTriangleCallback *) obj;
delete arg1;
}
static swig_lua_method swig_btConvexTriangleCallback_methods[] = {
    {"setTimeStepAndCounters", _wrap_btConvexTriangleCallback_setTimeStepAndCounters}, 
    {"clearWrapperData", _wrap_btConvexTriangleCallback_clearWrapperData}, 
    {"processTriangle", _wrap_btConvexTriangleCallback_processTriangle}, 
    {"clearCache", _wrap_btConvexTriangleCallback_clearCache}, 
    {"getAabbMin", _wrap_btConvexTriangleCallback_getAabbMin}, 
    {"getAabbMax", _wrap_btConvexTriangleCallback_getAabbMax}, 
    {0,0}
};
static swig_lua_attribute swig_btConvexTriangleCallback_attributes[] = {
    { "m_triangleCount", _wrap_btConvexTriangleCallback_m_triangleCount_get, _wrap_btConvexTriangleCallback_m_triangleCount_set},
    { "m_manifoldPtr", _wrap_btConvexTriangleCallback_m_manifoldPtr_get, _wrap_btConvexTriangleCallback_m_manifoldPtr_set},
    {0,0,0}
};
static swig_lua_attribute swig_btConvexTriangleCallback_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConvexTriangleCallback_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConvexTriangleCallback_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConvexTriangleCallback_bases[] = {0,0};
static const char *swig_btConvexTriangleCallback_base_names[] = {"btTriangleCallback *",0};
static swig_lua_class _wrap_class_btConvexTriangleCallback = { "btConvexTriangleCallback", &SWIGTYPE_p_btConvexTriangleCallback,_wrap_new_btConvexTriangleCallback, swig_delete_btConvexTriangleCallback, swig_btConvexTriangleCallback_methods, swig_btConvexTriangleCallback_attributes, { "btConvexTriangleCallback", swig_btConvexTriangleCallback_cls_methods, swig_btConvexTriangleCallback_cls_attributes, swig_btConvexTriangleCallback_cls_constants }, swig_btConvexTriangleCallback_bases, swig_btConvexTriangleCallback_base_names };

static int _wrap_btConvexConcaveCollisionAlgorithm_processCollision(lua_State* L) {
  int SWIG_arg = 0;
  btConvexConcaveCollisionAlgorithm *arg1 = (btConvexConcaveCollisionAlgorithm *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  SWIG_check_num_args("btConvexConcaveCollisionAlgorithm::processCollision",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexConcaveCollisionAlgorithm::processCollision",1,"btConvexConcaveCollisionAlgorithm *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConvexConcaveCollisionAlgorithm::processCollision",2,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btConvexConcaveCollisionAlgorithm::processCollision",3,"btCollisionObjectWrapper const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btConvexConcaveCollisionAlgorithm::processCollision",4,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btConvexConcaveCollisionAlgorithm::processCollision",5,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexConcaveCollisionAlgorithm,0))){
    SWIG_fail_ptr("btConvexConcaveCollisionAlgorithm_processCollision",1,SWIGTYPE_p_btConvexConcaveCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btConvexConcaveCollisionAlgorithm_processCollision",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btConvexConcaveCollisionAlgorithm_processCollision",3,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btConvexConcaveCollisionAlgorithm_processCollision",4,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btConvexConcaveCollisionAlgorithm_processCollision",5,SWIGTYPE_p_btManifoldResult);
  }
  
  (arg1)->processCollision((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,(btDispatcherInfo const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexConcaveCollisionAlgorithm_calculateTimeOfImpact(lua_State* L) {
  int SWIG_arg = 0;
  btConvexConcaveCollisionAlgorithm *arg1 = (btConvexConcaveCollisionAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConvexConcaveCollisionAlgorithm::calculateTimeOfImpact",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexConcaveCollisionAlgorithm::calculateTimeOfImpact",1,"btConvexConcaveCollisionAlgorithm *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConvexConcaveCollisionAlgorithm::calculateTimeOfImpact",2,"btCollisionObject *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btConvexConcaveCollisionAlgorithm::calculateTimeOfImpact",3,"btCollisionObject *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btConvexConcaveCollisionAlgorithm::calculateTimeOfImpact",4,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btConvexConcaveCollisionAlgorithm::calculateTimeOfImpact",5,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexConcaveCollisionAlgorithm,0))){
    SWIG_fail_ptr("btConvexConcaveCollisionAlgorithm_calculateTimeOfImpact",1,SWIGTYPE_p_btConvexConcaveCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btConvexConcaveCollisionAlgorithm_calculateTimeOfImpact",2,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btConvexConcaveCollisionAlgorithm_calculateTimeOfImpact",3,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btConvexConcaveCollisionAlgorithm_calculateTimeOfImpact",4,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btConvexConcaveCollisionAlgorithm_calculateTimeOfImpact",5,SWIGTYPE_p_btManifoldResult);
  }
  
  result = (btScalar)(arg1)->calculateTimeOfImpact(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexConcaveCollisionAlgorithm_getAllContactManifolds(lua_State* L) {
  int SWIG_arg = 0;
  btConvexConcaveCollisionAlgorithm *arg1 = (btConvexConcaveCollisionAlgorithm *) 0 ;
  btManifoldArray *arg2 = 0 ;
  
  SWIG_check_num_args("btConvexConcaveCollisionAlgorithm::getAllContactManifolds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexConcaveCollisionAlgorithm::getAllContactManifolds",1,"btConvexConcaveCollisionAlgorithm *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexConcaveCollisionAlgorithm::getAllContactManifolds",2,"btManifoldArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexConcaveCollisionAlgorithm,0))){
    SWIG_fail_ptr("btConvexConcaveCollisionAlgorithm_getAllContactManifolds",1,SWIGTYPE_p_btConvexConcaveCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t,0))){
    SWIG_fail_ptr("btConvexConcaveCollisionAlgorithm_getAllContactManifolds",2,SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t);
  }
  
  (arg1)->getAllContactManifolds(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexConcaveCollisionAlgorithm_clearCache(lua_State* L) {
  int SWIG_arg = 0;
  btConvexConcaveCollisionAlgorithm *arg1 = (btConvexConcaveCollisionAlgorithm *) 0 ;
  
  SWIG_check_num_args("btConvexConcaveCollisionAlgorithm::clearCache",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexConcaveCollisionAlgorithm::clearCache",1,"btConvexConcaveCollisionAlgorithm *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexConcaveCollisionAlgorithm,0))){
    SWIG_fail_ptr("btConvexConcaveCollisionAlgorithm_clearCache",1,SWIGTYPE_p_btConvexConcaveCollisionAlgorithm);
  }
  
  (arg1)->clearCache();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConvexConcaveCollisionAlgorithm(void *obj) {
btConvexConcaveCollisionAlgorithm *arg1 = (btConvexConcaveCollisionAlgorithm *) obj;
delete arg1;
}
static swig_lua_method swig_btConvexConcaveCollisionAlgorithm_methods[] = {
    {"processCollision", _wrap_btConvexConcaveCollisionAlgorithm_processCollision}, 
    {"calculateTimeOfImpact", _wrap_btConvexConcaveCollisionAlgorithm_calculateTimeOfImpact}, 
    {"getAllContactManifolds", _wrap_btConvexConcaveCollisionAlgorithm_getAllContactManifolds}, 
    {"clearCache", _wrap_btConvexConcaveCollisionAlgorithm_clearCache}, 
    {0,0}
};
static swig_lua_attribute swig_btConvexConcaveCollisionAlgorithm_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btConvexConcaveCollisionAlgorithm_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConvexConcaveCollisionAlgorithm_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConvexConcaveCollisionAlgorithm_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConvexConcaveCollisionAlgorithm_bases[] = {0,0};
static const char *swig_btConvexConcaveCollisionAlgorithm_base_names[] = {"btActivatingCollisionAlgorithm *",0};
static swig_lua_class _wrap_class_btConvexConcaveCollisionAlgorithm = { "btConvexConcaveCollisionAlgorithm", &SWIGTYPE_p_btConvexConcaveCollisionAlgorithm,0, swig_delete_btConvexConcaveCollisionAlgorithm, swig_btConvexConcaveCollisionAlgorithm_methods, swig_btConvexConcaveCollisionAlgorithm_attributes, { "btConvexConcaveCollisionAlgorithm", swig_btConvexConcaveCollisionAlgorithm_cls_methods, swig_btConvexConcaveCollisionAlgorithm_cls_attributes, swig_btConvexConcaveCollisionAlgorithm_cls_constants }, swig_btConvexConcaveCollisionAlgorithm_bases, swig_btConvexConcaveCollisionAlgorithm_base_names };

static int _wrap_btConvexConvexAlgorithm_processCollision(lua_State* L) {
  int SWIG_arg = 0;
  btConvexConvexAlgorithm *arg1 = (btConvexConvexAlgorithm *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  SWIG_check_num_args("btConvexConvexAlgorithm::processCollision",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexConvexAlgorithm::processCollision",1,"btConvexConvexAlgorithm *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConvexConvexAlgorithm::processCollision",2,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btConvexConvexAlgorithm::processCollision",3,"btCollisionObjectWrapper const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btConvexConvexAlgorithm::processCollision",4,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btConvexConvexAlgorithm::processCollision",5,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexConvexAlgorithm,0))){
    SWIG_fail_ptr("btConvexConvexAlgorithm_processCollision",1,SWIGTYPE_p_btConvexConvexAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btConvexConvexAlgorithm_processCollision",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btConvexConvexAlgorithm_processCollision",3,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btConvexConvexAlgorithm_processCollision",4,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btConvexConvexAlgorithm_processCollision",5,SWIGTYPE_p_btManifoldResult);
  }
  
  (arg1)->processCollision((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,(btDispatcherInfo const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexConvexAlgorithm_calculateTimeOfImpact(lua_State* L) {
  int SWIG_arg = 0;
  btConvexConvexAlgorithm *arg1 = (btConvexConvexAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConvexConvexAlgorithm::calculateTimeOfImpact",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexConvexAlgorithm::calculateTimeOfImpact",1,"btConvexConvexAlgorithm *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConvexConvexAlgorithm::calculateTimeOfImpact",2,"btCollisionObject *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btConvexConvexAlgorithm::calculateTimeOfImpact",3,"btCollisionObject *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btConvexConvexAlgorithm::calculateTimeOfImpact",4,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btConvexConvexAlgorithm::calculateTimeOfImpact",5,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexConvexAlgorithm,0))){
    SWIG_fail_ptr("btConvexConvexAlgorithm_calculateTimeOfImpact",1,SWIGTYPE_p_btConvexConvexAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btConvexConvexAlgorithm_calculateTimeOfImpact",2,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btConvexConvexAlgorithm_calculateTimeOfImpact",3,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btConvexConvexAlgorithm_calculateTimeOfImpact",4,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btConvexConvexAlgorithm_calculateTimeOfImpact",5,SWIGTYPE_p_btManifoldResult);
  }
  
  result = (btScalar)(arg1)->calculateTimeOfImpact(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexConvexAlgorithm_getAllContactManifolds(lua_State* L) {
  int SWIG_arg = 0;
  btConvexConvexAlgorithm *arg1 = (btConvexConvexAlgorithm *) 0 ;
  btManifoldArray *arg2 = 0 ;
  
  SWIG_check_num_args("btConvexConvexAlgorithm::getAllContactManifolds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexConvexAlgorithm::getAllContactManifolds",1,"btConvexConvexAlgorithm *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConvexConvexAlgorithm::getAllContactManifolds",2,"btManifoldArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexConvexAlgorithm,0))){
    SWIG_fail_ptr("btConvexConvexAlgorithm_getAllContactManifolds",1,SWIGTYPE_p_btConvexConvexAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t,0))){
    SWIG_fail_ptr("btConvexConvexAlgorithm_getAllContactManifolds",2,SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t);
  }
  
  (arg1)->getAllContactManifolds(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexConvexAlgorithm_setLowLevelOfDetail(lua_State* L) {
  int SWIG_arg = 0;
  btConvexConvexAlgorithm *arg1 = (btConvexConvexAlgorithm *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btConvexConvexAlgorithm::setLowLevelOfDetail",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexConvexAlgorithm::setLowLevelOfDetail",1,"btConvexConvexAlgorithm *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btConvexConvexAlgorithm::setLowLevelOfDetail",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexConvexAlgorithm,0))){
    SWIG_fail_ptr("btConvexConvexAlgorithm_setLowLevelOfDetail",1,SWIGTYPE_p_btConvexConvexAlgorithm);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setLowLevelOfDetail(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConvexConvexAlgorithm_getManifold(lua_State* L) {
  int SWIG_arg = 0;
  btConvexConvexAlgorithm *arg1 = (btConvexConvexAlgorithm *) 0 ;
  btPersistentManifold *result = 0 ;
  
  SWIG_check_num_args("btConvexConvexAlgorithm::getManifold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConvexConvexAlgorithm::getManifold",1,"btConvexConvexAlgorithm *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexConvexAlgorithm,0))){
    SWIG_fail_ptr("btConvexConvexAlgorithm_getManifold",1,SWIGTYPE_p_btConvexConvexAlgorithm);
  }
  
  result = (btPersistentManifold *)(arg1)->getManifold();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPersistentManifold,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConvexConvexAlgorithm(void *obj) {
btConvexConvexAlgorithm *arg1 = (btConvexConvexAlgorithm *) obj;
delete arg1;
}
static swig_lua_method swig_btConvexConvexAlgorithm_methods[] = {
    {"processCollision", _wrap_btConvexConvexAlgorithm_processCollision}, 
    {"calculateTimeOfImpact", _wrap_btConvexConvexAlgorithm_calculateTimeOfImpact}, 
    {"getAllContactManifolds", _wrap_btConvexConvexAlgorithm_getAllContactManifolds}, 
    {"setLowLevelOfDetail", _wrap_btConvexConvexAlgorithm_setLowLevelOfDetail}, 
    {"getManifold", _wrap_btConvexConvexAlgorithm_getManifold}, 
    {0,0}
};
static swig_lua_attribute swig_btConvexConvexAlgorithm_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btConvexConvexAlgorithm_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConvexConvexAlgorithm_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConvexConvexAlgorithm_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConvexConvexAlgorithm_bases[] = {0,0};
static const char *swig_btConvexConvexAlgorithm_base_names[] = {"btActivatingCollisionAlgorithm *",0};
static swig_lua_class _wrap_class_btConvexConvexAlgorithm = { "btConvexConvexAlgorithm", &SWIGTYPE_p_btConvexConvexAlgorithm,0, swig_delete_btConvexConvexAlgorithm, swig_btConvexConvexAlgorithm_methods, swig_btConvexConvexAlgorithm_attributes, { "btConvexConvexAlgorithm", swig_btConvexConvexAlgorithm_cls_methods, swig_btConvexConvexAlgorithm_cls_attributes, swig_btConvexConvexAlgorithm_cls_constants }, swig_btConvexConvexAlgorithm_bases, swig_btConvexConvexAlgorithm_base_names };

static int _wrap_btEmptyAlgorithm_processCollision(lua_State* L) {
  int SWIG_arg = 0;
  btEmptyAlgorithm *arg1 = (btEmptyAlgorithm *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  SWIG_check_num_args("btEmptyAlgorithm::processCollision",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btEmptyAlgorithm::processCollision",1,"btEmptyAlgorithm *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btEmptyAlgorithm::processCollision",2,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btEmptyAlgorithm::processCollision",3,"btCollisionObjectWrapper const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btEmptyAlgorithm::processCollision",4,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btEmptyAlgorithm::processCollision",5,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btEmptyAlgorithm,0))){
    SWIG_fail_ptr("btEmptyAlgorithm_processCollision",1,SWIGTYPE_p_btEmptyAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btEmptyAlgorithm_processCollision",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btEmptyAlgorithm_processCollision",3,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btEmptyAlgorithm_processCollision",4,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btEmptyAlgorithm_processCollision",5,SWIGTYPE_p_btManifoldResult);
  }
  
  (arg1)->processCollision((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,(btDispatcherInfo const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btEmptyAlgorithm_calculateTimeOfImpact(lua_State* L) {
  int SWIG_arg = 0;
  btEmptyAlgorithm *arg1 = (btEmptyAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btEmptyAlgorithm::calculateTimeOfImpact",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btEmptyAlgorithm::calculateTimeOfImpact",1,"btEmptyAlgorithm *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btEmptyAlgorithm::calculateTimeOfImpact",2,"btCollisionObject *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btEmptyAlgorithm::calculateTimeOfImpact",3,"btCollisionObject *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btEmptyAlgorithm::calculateTimeOfImpact",4,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btEmptyAlgorithm::calculateTimeOfImpact",5,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btEmptyAlgorithm,0))){
    SWIG_fail_ptr("btEmptyAlgorithm_calculateTimeOfImpact",1,SWIGTYPE_p_btEmptyAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btEmptyAlgorithm_calculateTimeOfImpact",2,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btEmptyAlgorithm_calculateTimeOfImpact",3,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btEmptyAlgorithm_calculateTimeOfImpact",4,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btEmptyAlgorithm_calculateTimeOfImpact",5,SWIGTYPE_p_btManifoldResult);
  }
  
  result = (btScalar)(arg1)->calculateTimeOfImpact(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btEmptyAlgorithm_getAllContactManifolds(lua_State* L) {
  int SWIG_arg = 0;
  btEmptyAlgorithm *arg1 = (btEmptyAlgorithm *) 0 ;
  btManifoldArray *arg2 = 0 ;
  
  SWIG_check_num_args("btEmptyAlgorithm::getAllContactManifolds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btEmptyAlgorithm::getAllContactManifolds",1,"btEmptyAlgorithm *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btEmptyAlgorithm::getAllContactManifolds",2,"btManifoldArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btEmptyAlgorithm,0))){
    SWIG_fail_ptr("btEmptyAlgorithm_getAllContactManifolds",1,SWIGTYPE_p_btEmptyAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t,0))){
    SWIG_fail_ptr("btEmptyAlgorithm_getAllContactManifolds",2,SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t);
  }
  
  (arg1)->getAllContactManifolds(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btEmptyAlgorithm(void *obj) {
btEmptyAlgorithm *arg1 = (btEmptyAlgorithm *) obj;
delete arg1;
}
static swig_lua_method swig_btEmptyAlgorithm_methods[] = {
    {"processCollision", _wrap_btEmptyAlgorithm_processCollision}, 
    {"calculateTimeOfImpact", _wrap_btEmptyAlgorithm_calculateTimeOfImpact}, 
    {"getAllContactManifolds", _wrap_btEmptyAlgorithm_getAllContactManifolds}, 
    {0,0}
};
static swig_lua_attribute swig_btEmptyAlgorithm_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btEmptyAlgorithm_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btEmptyAlgorithm_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btEmptyAlgorithm_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btEmptyAlgorithm_bases[] = {0,0};
static const char *swig_btEmptyAlgorithm_base_names[] = {"btCollisionAlgorithm *",0};
static swig_lua_class _wrap_class_btEmptyAlgorithm = { "btEmptyAlgorithm", &SWIGTYPE_p_btEmptyAlgorithm,0, swig_delete_btEmptyAlgorithm, swig_btEmptyAlgorithm_methods, swig_btEmptyAlgorithm_attributes, { "btEmptyAlgorithm", swig_btEmptyAlgorithm_cls_methods, swig_btEmptyAlgorithm_cls_attributes, swig_btEmptyAlgorithm_cls_constants }, swig_btEmptyAlgorithm_bases, swig_btEmptyAlgorithm_base_names };

static int _wrap_new_btSimulationIslandManager(lua_State* L) {
  int SWIG_arg = 0;
  btSimulationIslandManager *result = 0 ;
  
  SWIG_check_num_args("btSimulationIslandManager::btSimulationIslandManager",0,0)
  result = (btSimulationIslandManager *)new btSimulationIslandManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSimulationIslandManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimulationIslandManager_initUnionFind(lua_State* L) {
  int SWIG_arg = 0;
  btSimulationIslandManager *arg1 = (btSimulationIslandManager *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btSimulationIslandManager::initUnionFind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimulationIslandManager::initUnionFind",1,"btSimulationIslandManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSimulationIslandManager::initUnionFind",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimulationIslandManager,0))){
    SWIG_fail_ptr("btSimulationIslandManager_initUnionFind",1,SWIGTYPE_p_btSimulationIslandManager);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->initUnionFind(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimulationIslandManager_getUnionFind(lua_State* L) {
  int SWIG_arg = 0;
  btSimulationIslandManager *arg1 = (btSimulationIslandManager *) 0 ;
  btUnionFind *result = 0 ;
  
  SWIG_check_num_args("btSimulationIslandManager::getUnionFind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimulationIslandManager::getUnionFind",1,"btSimulationIslandManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimulationIslandManager,0))){
    SWIG_fail_ptr("btSimulationIslandManager_getUnionFind",1,SWIGTYPE_p_btSimulationIslandManager);
  }
  
  result = (btUnionFind *) &(arg1)->getUnionFind();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btUnionFind,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimulationIslandManager_updateActivationState(lua_State* L) {
  int SWIG_arg = 0;
  btSimulationIslandManager *arg1 = (btSimulationIslandManager *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btSimulationIslandManager::updateActivationState",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimulationIslandManager::updateActivationState",1,"btSimulationIslandManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimulationIslandManager::updateActivationState",2,"btCollisionWorld *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSimulationIslandManager::updateActivationState",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimulationIslandManager,0))){
    SWIG_fail_ptr("btSimulationIslandManager_updateActivationState",1,SWIGTYPE_p_btSimulationIslandManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("btSimulationIslandManager_updateActivationState",2,SWIGTYPE_p_btCollisionWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btSimulationIslandManager_updateActivationState",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->updateActivationState(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimulationIslandManager_storeIslandActivationState(lua_State* L) {
  int SWIG_arg = 0;
  btSimulationIslandManager *arg1 = (btSimulationIslandManager *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  
  SWIG_check_num_args("btSimulationIslandManager::storeIslandActivationState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimulationIslandManager::storeIslandActivationState",1,"btSimulationIslandManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimulationIslandManager::storeIslandActivationState",2,"btCollisionWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimulationIslandManager,0))){
    SWIG_fail_ptr("btSimulationIslandManager_storeIslandActivationState",1,SWIGTYPE_p_btSimulationIslandManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("btSimulationIslandManager_storeIslandActivationState",2,SWIGTYPE_p_btCollisionWorld);
  }
  
  (arg1)->storeIslandActivationState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimulationIslandManager_findUnions(lua_State* L) {
  int SWIG_arg = 0;
  btSimulationIslandManager *arg1 = (btSimulationIslandManager *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btSimulationIslandManager::findUnions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimulationIslandManager::findUnions",1,"btSimulationIslandManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimulationIslandManager::findUnions",2,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimulationIslandManager,0))){
    SWIG_fail_ptr("btSimulationIslandManager_findUnions",1,SWIGTYPE_p_btSimulationIslandManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btSimulationIslandManager_findUnions",2,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->findUnions(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSimulationIslandManager(void *obj) {
btSimulationIslandManager *arg1 = (btSimulationIslandManager *) obj;
delete arg1;
}
static swig_lua_method swig_btSimulationIslandManager_methods[] = {
    {"initUnionFind", _wrap_btSimulationIslandManager_initUnionFind}, 
    {"getUnionFind", _wrap_btSimulationIslandManager_getUnionFind}, 
    {"updateActivationState", _wrap_btSimulationIslandManager_updateActivationState}, 
    {"storeIslandActivationState", _wrap_btSimulationIslandManager_storeIslandActivationState}, 
    {"findUnions", _wrap_btSimulationIslandManager_findUnions}, 
    {0,0}
};
static swig_lua_attribute swig_btSimulationIslandManager_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btSimulationIslandManager_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSimulationIslandManager_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btSimulationIslandManager_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSimulationIslandManager_bases[] = {0};
static const char *swig_btSimulationIslandManager_base_names[] = {0};
static swig_lua_class _wrap_class_btSimulationIslandManager = { "btSimulationIslandManager", &SWIGTYPE_p_btSimulationIslandManager,_wrap_new_btSimulationIslandManager, swig_delete_btSimulationIslandManager, swig_btSimulationIslandManager_methods, swig_btSimulationIslandManager_attributes, { "btSimulationIslandManager", swig_btSimulationIslandManager_cls_methods, swig_btSimulationIslandManager_cls_attributes, swig_btSimulationIslandManager_cls_constants }, swig_btSimulationIslandManager_bases, swig_btSimulationIslandManager_base_names };

static int _wrap_btSphereBoxCollisionAlgorithm_processCollision(lua_State* L) {
  int SWIG_arg = 0;
  btSphereBoxCollisionAlgorithm *arg1 = (btSphereBoxCollisionAlgorithm *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  SWIG_check_num_args("btSphereBoxCollisionAlgorithm::processCollision",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::processCollision",1,"btSphereBoxCollisionAlgorithm *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::processCollision",2,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::processCollision",3,"btCollisionObjectWrapper const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::processCollision",4,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::processCollision",5,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereBoxCollisionAlgorithm,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_processCollision",1,SWIGTYPE_p_btSphereBoxCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_processCollision",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_processCollision",3,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_processCollision",4,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_processCollision",5,SWIGTYPE_p_btManifoldResult);
  }
  
  (arg1)->processCollision((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,(btDispatcherInfo const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereBoxCollisionAlgorithm_calculateTimeOfImpact(lua_State* L) {
  int SWIG_arg = 0;
  btSphereBoxCollisionAlgorithm *arg1 = (btSphereBoxCollisionAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSphereBoxCollisionAlgorithm::calculateTimeOfImpact",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::calculateTimeOfImpact",1,"btSphereBoxCollisionAlgorithm *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::calculateTimeOfImpact",2,"btCollisionObject *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::calculateTimeOfImpact",3,"btCollisionObject *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::calculateTimeOfImpact",4,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::calculateTimeOfImpact",5,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereBoxCollisionAlgorithm,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_calculateTimeOfImpact",1,SWIGTYPE_p_btSphereBoxCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_calculateTimeOfImpact",2,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_calculateTimeOfImpact",3,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_calculateTimeOfImpact",4,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_calculateTimeOfImpact",5,SWIGTYPE_p_btManifoldResult);
  }
  
  result = (btScalar)(arg1)->calculateTimeOfImpact(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereBoxCollisionAlgorithm_getAllContactManifolds(lua_State* L) {
  int SWIG_arg = 0;
  btSphereBoxCollisionAlgorithm *arg1 = (btSphereBoxCollisionAlgorithm *) 0 ;
  btManifoldArray *arg2 = 0 ;
  
  SWIG_check_num_args("btSphereBoxCollisionAlgorithm::getAllContactManifolds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::getAllContactManifolds",1,"btSphereBoxCollisionAlgorithm *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::getAllContactManifolds",2,"btManifoldArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereBoxCollisionAlgorithm,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_getAllContactManifolds",1,SWIGTYPE_p_btSphereBoxCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_getAllContactManifolds",2,SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t);
  }
  
  (arg1)->getAllContactManifolds(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereBoxCollisionAlgorithm_getSphereDistance(lua_State* L) {
  int SWIG_arg = 0;
  btSphereBoxCollisionAlgorithm *arg1 = (btSphereBoxCollisionAlgorithm *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btScalar arg7 ;
  btScalar arg8 ;
  bool result;
  
  SWIG_check_num_args("btSphereBoxCollisionAlgorithm::getSphereDistance",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::getSphereDistance",1,"btSphereBoxCollisionAlgorithm *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::getSphereDistance",2,"btCollisionObjectWrapper const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::getSphereDistance",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::getSphereDistance",4,"btVector3 &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::getSphereDistance",5,"btScalar &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::getSphereDistance",6,"btVector3 const &");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::getSphereDistance",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::getSphereDistance",8,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereBoxCollisionAlgorithm,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_getSphereDistance",1,SWIGTYPE_p_btSphereBoxCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_getSphereDistance",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_getSphereDistance",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_getSphereDistance",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_getSphereDistance",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_getSphereDistance",6,SWIGTYPE_p_btVector3);
  }
  
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (btScalar)lua_tonumber(L, 8);
  result = (bool)(arg1)->getSphereDistance((btCollisionObjectWrapper const *)arg2,*arg3,*arg4,*arg5,(btVector3 const &)*arg6,arg7,arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereBoxCollisionAlgorithm_getSpherePenetration(lua_State* L) {
  int SWIG_arg = 0;
  btSphereBoxCollisionAlgorithm *arg1 = (btSphereBoxCollisionAlgorithm *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSphereBoxCollisionAlgorithm::getSpherePenetration",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::getSpherePenetration",1,"btSphereBoxCollisionAlgorithm *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::getSpherePenetration",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::getSpherePenetration",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::getSpherePenetration",4,"btVector3 &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btSphereBoxCollisionAlgorithm::getSpherePenetration",5,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereBoxCollisionAlgorithm,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_getSpherePenetration",1,SWIGTYPE_p_btSphereBoxCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_getSpherePenetration",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_getSpherePenetration",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_getSpherePenetration",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSphereBoxCollisionAlgorithm_getSpherePenetration",5,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)(arg1)->getSpherePenetration((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSphereBoxCollisionAlgorithm(void *obj) {
btSphereBoxCollisionAlgorithm *arg1 = (btSphereBoxCollisionAlgorithm *) obj;
delete arg1;
}
static swig_lua_method swig_btSphereBoxCollisionAlgorithm_methods[] = {
    {"processCollision", _wrap_btSphereBoxCollisionAlgorithm_processCollision}, 
    {"calculateTimeOfImpact", _wrap_btSphereBoxCollisionAlgorithm_calculateTimeOfImpact}, 
    {"getAllContactManifolds", _wrap_btSphereBoxCollisionAlgorithm_getAllContactManifolds}, 
    {"getSphereDistance", _wrap_btSphereBoxCollisionAlgorithm_getSphereDistance}, 
    {"getSpherePenetration", _wrap_btSphereBoxCollisionAlgorithm_getSpherePenetration}, 
    {0,0}
};
static swig_lua_attribute swig_btSphereBoxCollisionAlgorithm_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btSphereBoxCollisionAlgorithm_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSphereBoxCollisionAlgorithm_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btSphereBoxCollisionAlgorithm_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSphereBoxCollisionAlgorithm_bases[] = {0,0};
static const char *swig_btSphereBoxCollisionAlgorithm_base_names[] = {"btActivatingCollisionAlgorithm *",0};
static swig_lua_class _wrap_class_btSphereBoxCollisionAlgorithm = { "btSphereBoxCollisionAlgorithm", &SWIGTYPE_p_btSphereBoxCollisionAlgorithm,0, swig_delete_btSphereBoxCollisionAlgorithm, swig_btSphereBoxCollisionAlgorithm_methods, swig_btSphereBoxCollisionAlgorithm_attributes, { "btSphereBoxCollisionAlgorithm", swig_btSphereBoxCollisionAlgorithm_cls_methods, swig_btSphereBoxCollisionAlgorithm_cls_attributes, swig_btSphereBoxCollisionAlgorithm_cls_constants }, swig_btSphereBoxCollisionAlgorithm_bases, swig_btSphereBoxCollisionAlgorithm_base_names };

static int _wrap_btSphereSphereCollisionAlgorithm_processCollision(lua_State* L) {
  int SWIG_arg = 0;
  btSphereSphereCollisionAlgorithm *arg1 = (btSphereSphereCollisionAlgorithm *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  SWIG_check_num_args("btSphereSphereCollisionAlgorithm::processCollision",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereSphereCollisionAlgorithm::processCollision",1,"btSphereSphereCollisionAlgorithm *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSphereSphereCollisionAlgorithm::processCollision",2,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSphereSphereCollisionAlgorithm::processCollision",3,"btCollisionObjectWrapper const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSphereSphereCollisionAlgorithm::processCollision",4,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btSphereSphereCollisionAlgorithm::processCollision",5,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereSphereCollisionAlgorithm,0))){
    SWIG_fail_ptr("btSphereSphereCollisionAlgorithm_processCollision",1,SWIGTYPE_p_btSphereSphereCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btSphereSphereCollisionAlgorithm_processCollision",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btSphereSphereCollisionAlgorithm_processCollision",3,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btSphereSphereCollisionAlgorithm_processCollision",4,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btSphereSphereCollisionAlgorithm_processCollision",5,SWIGTYPE_p_btManifoldResult);
  }
  
  (arg1)->processCollision((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,(btDispatcherInfo const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereSphereCollisionAlgorithm_calculateTimeOfImpact(lua_State* L) {
  int SWIG_arg = 0;
  btSphereSphereCollisionAlgorithm *arg1 = (btSphereSphereCollisionAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSphereSphereCollisionAlgorithm::calculateTimeOfImpact",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereSphereCollisionAlgorithm::calculateTimeOfImpact",1,"btSphereSphereCollisionAlgorithm *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSphereSphereCollisionAlgorithm::calculateTimeOfImpact",2,"btCollisionObject *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSphereSphereCollisionAlgorithm::calculateTimeOfImpact",3,"btCollisionObject *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSphereSphereCollisionAlgorithm::calculateTimeOfImpact",4,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btSphereSphereCollisionAlgorithm::calculateTimeOfImpact",5,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereSphereCollisionAlgorithm,0))){
    SWIG_fail_ptr("btSphereSphereCollisionAlgorithm_calculateTimeOfImpact",1,SWIGTYPE_p_btSphereSphereCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btSphereSphereCollisionAlgorithm_calculateTimeOfImpact",2,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btSphereSphereCollisionAlgorithm_calculateTimeOfImpact",3,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btSphereSphereCollisionAlgorithm_calculateTimeOfImpact",4,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btSphereSphereCollisionAlgorithm_calculateTimeOfImpact",5,SWIGTYPE_p_btManifoldResult);
  }
  
  result = (btScalar)(arg1)->calculateTimeOfImpact(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereSphereCollisionAlgorithm_getAllContactManifolds(lua_State* L) {
  int SWIG_arg = 0;
  btSphereSphereCollisionAlgorithm *arg1 = (btSphereSphereCollisionAlgorithm *) 0 ;
  btManifoldArray *arg2 = 0 ;
  
  SWIG_check_num_args("btSphereSphereCollisionAlgorithm::getAllContactManifolds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereSphereCollisionAlgorithm::getAllContactManifolds",1,"btSphereSphereCollisionAlgorithm *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSphereSphereCollisionAlgorithm::getAllContactManifolds",2,"btManifoldArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereSphereCollisionAlgorithm,0))){
    SWIG_fail_ptr("btSphereSphereCollisionAlgorithm_getAllContactManifolds",1,SWIGTYPE_p_btSphereSphereCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t,0))){
    SWIG_fail_ptr("btSphereSphereCollisionAlgorithm_getAllContactManifolds",2,SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t);
  }
  
  (arg1)->getAllContactManifolds(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSphereSphereCollisionAlgorithm(void *obj) {
btSphereSphereCollisionAlgorithm *arg1 = (btSphereSphereCollisionAlgorithm *) obj;
delete arg1;
}
static swig_lua_method swig_btSphereSphereCollisionAlgorithm_methods[] = {
    {"processCollision", _wrap_btSphereSphereCollisionAlgorithm_processCollision}, 
    {"calculateTimeOfImpact", _wrap_btSphereSphereCollisionAlgorithm_calculateTimeOfImpact}, 
    {"getAllContactManifolds", _wrap_btSphereSphereCollisionAlgorithm_getAllContactManifolds}, 
    {0,0}
};
static swig_lua_attribute swig_btSphereSphereCollisionAlgorithm_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btSphereSphereCollisionAlgorithm_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSphereSphereCollisionAlgorithm_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btSphereSphereCollisionAlgorithm_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSphereSphereCollisionAlgorithm_bases[] = {0,0};
static const char *swig_btSphereSphereCollisionAlgorithm_base_names[] = {"btActivatingCollisionAlgorithm *",0};
static swig_lua_class _wrap_class_btSphereSphereCollisionAlgorithm = { "btSphereSphereCollisionAlgorithm", &SWIGTYPE_p_btSphereSphereCollisionAlgorithm,0, swig_delete_btSphereSphereCollisionAlgorithm, swig_btSphereSphereCollisionAlgorithm_methods, swig_btSphereSphereCollisionAlgorithm_attributes, { "btSphereSphereCollisionAlgorithm", swig_btSphereSphereCollisionAlgorithm_cls_methods, swig_btSphereSphereCollisionAlgorithm_cls_attributes, swig_btSphereSphereCollisionAlgorithm_cls_constants }, swig_btSphereSphereCollisionAlgorithm_bases, swig_btSphereSphereCollisionAlgorithm_base_names };

static int _wrap_btSphereTriangleCollisionAlgorithm_processCollision(lua_State* L) {
  int SWIG_arg = 0;
  btSphereTriangleCollisionAlgorithm *arg1 = (btSphereTriangleCollisionAlgorithm *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  SWIG_check_num_args("btSphereTriangleCollisionAlgorithm::processCollision",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereTriangleCollisionAlgorithm::processCollision",1,"btSphereTriangleCollisionAlgorithm *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSphereTriangleCollisionAlgorithm::processCollision",2,"btCollisionObjectWrapper const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSphereTriangleCollisionAlgorithm::processCollision",3,"btCollisionObjectWrapper const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSphereTriangleCollisionAlgorithm::processCollision",4,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btSphereTriangleCollisionAlgorithm::processCollision",5,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereTriangleCollisionAlgorithm,0))){
    SWIG_fail_ptr("btSphereTriangleCollisionAlgorithm_processCollision",1,SWIGTYPE_p_btSphereTriangleCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btSphereTriangleCollisionAlgorithm_processCollision",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btSphereTriangleCollisionAlgorithm_processCollision",3,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btSphereTriangleCollisionAlgorithm_processCollision",4,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btSphereTriangleCollisionAlgorithm_processCollision",5,SWIGTYPE_p_btManifoldResult);
  }
  
  (arg1)->processCollision((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,(btDispatcherInfo const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereTriangleCollisionAlgorithm_calculateTimeOfImpact(lua_State* L) {
  int SWIG_arg = 0;
  btSphereTriangleCollisionAlgorithm *arg1 = (btSphereTriangleCollisionAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSphereTriangleCollisionAlgorithm::calculateTimeOfImpact",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereTriangleCollisionAlgorithm::calculateTimeOfImpact",1,"btSphereTriangleCollisionAlgorithm *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSphereTriangleCollisionAlgorithm::calculateTimeOfImpact",2,"btCollisionObject *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSphereTriangleCollisionAlgorithm::calculateTimeOfImpact",3,"btCollisionObject *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSphereTriangleCollisionAlgorithm::calculateTimeOfImpact",4,"btDispatcherInfo const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btSphereTriangleCollisionAlgorithm::calculateTimeOfImpact",5,"btManifoldResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereTriangleCollisionAlgorithm,0))){
    SWIG_fail_ptr("btSphereTriangleCollisionAlgorithm_calculateTimeOfImpact",1,SWIGTYPE_p_btSphereTriangleCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btSphereTriangleCollisionAlgorithm_calculateTimeOfImpact",2,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btSphereTriangleCollisionAlgorithm_calculateTimeOfImpact",3,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcherInfo,0))){
    SWIG_fail_ptr("btSphereTriangleCollisionAlgorithm_calculateTimeOfImpact",4,SWIGTYPE_p_btDispatcherInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btManifoldResult,0))){
    SWIG_fail_ptr("btSphereTriangleCollisionAlgorithm_calculateTimeOfImpact",5,SWIGTYPE_p_btManifoldResult);
  }
  
  result = (btScalar)(arg1)->calculateTimeOfImpact(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSphereTriangleCollisionAlgorithm_getAllContactManifolds(lua_State* L) {
  int SWIG_arg = 0;
  btSphereTriangleCollisionAlgorithm *arg1 = (btSphereTriangleCollisionAlgorithm *) 0 ;
  btManifoldArray *arg2 = 0 ;
  
  SWIG_check_num_args("btSphereTriangleCollisionAlgorithm::getAllContactManifolds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSphereTriangleCollisionAlgorithm::getAllContactManifolds",1,"btSphereTriangleCollisionAlgorithm *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSphereTriangleCollisionAlgorithm::getAllContactManifolds",2,"btManifoldArray &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSphereTriangleCollisionAlgorithm,0))){
    SWIG_fail_ptr("btSphereTriangleCollisionAlgorithm_getAllContactManifolds",1,SWIGTYPE_p_btSphereTriangleCollisionAlgorithm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t,0))){
    SWIG_fail_ptr("btSphereTriangleCollisionAlgorithm_getAllContactManifolds",2,SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t);
  }
  
  (arg1)->getAllContactManifolds(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSphereTriangleCollisionAlgorithm(void *obj) {
btSphereTriangleCollisionAlgorithm *arg1 = (btSphereTriangleCollisionAlgorithm *) obj;
delete arg1;
}
static swig_lua_method swig_btSphereTriangleCollisionAlgorithm_methods[] = {
    {"processCollision", _wrap_btSphereTriangleCollisionAlgorithm_processCollision}, 
    {"calculateTimeOfImpact", _wrap_btSphereTriangleCollisionAlgorithm_calculateTimeOfImpact}, 
    {"getAllContactManifolds", _wrap_btSphereTriangleCollisionAlgorithm_getAllContactManifolds}, 
    {0,0}
};
static swig_lua_attribute swig_btSphereTriangleCollisionAlgorithm_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btSphereTriangleCollisionAlgorithm_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSphereTriangleCollisionAlgorithm_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btSphereTriangleCollisionAlgorithm_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSphereTriangleCollisionAlgorithm_bases[] = {0,0};
static const char *swig_btSphereTriangleCollisionAlgorithm_base_names[] = {"btActivatingCollisionAlgorithm *",0};
static swig_lua_class _wrap_class_btSphereTriangleCollisionAlgorithm = { "btSphereTriangleCollisionAlgorithm", &SWIGTYPE_p_btSphereTriangleCollisionAlgorithm,0, swig_delete_btSphereTriangleCollisionAlgorithm, swig_btSphereTriangleCollisionAlgorithm_methods, swig_btSphereTriangleCollisionAlgorithm_attributes, { "btSphereTriangleCollisionAlgorithm", swig_btSphereTriangleCollisionAlgorithm_cls_methods, swig_btSphereTriangleCollisionAlgorithm_cls_attributes, swig_btSphereTriangleCollisionAlgorithm_cls_constants }, swig_btSphereTriangleCollisionAlgorithm_bases, swig_btSphereTriangleCollisionAlgorithm_base_names };

static int _wrap_btElement_m_id_set(lua_State* L) {
  int SWIG_arg = 0;
  btElement *arg1 = (btElement *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btElement::m_id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btElement::m_id",1,"btElement *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btElement::m_id",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btElement,0))){
    SWIG_fail_ptr("btElement_m_id_set",1,SWIGTYPE_p_btElement);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btElement_m_id_get(lua_State* L) {
  int SWIG_arg = 0;
  btElement *arg1 = (btElement *) 0 ;
  int result;
  
  SWIG_check_num_args("btElement::m_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btElement::m_id",1,"btElement *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btElement,0))){
    SWIG_fail_ptr("btElement_m_id_get",1,SWIGTYPE_p_btElement);
  }
  
  result = (int) ((arg1)->m_id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btElement_m_sz_set(lua_State* L) {
  int SWIG_arg = 0;
  btElement *arg1 = (btElement *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btElement::m_sz",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btElement::m_sz",1,"btElement *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btElement::m_sz",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btElement,0))){
    SWIG_fail_ptr("btElement_m_sz_set",1,SWIGTYPE_p_btElement);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_sz = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btElement_m_sz_get(lua_State* L) {
  int SWIG_arg = 0;
  btElement *arg1 = (btElement *) 0 ;
  int result;
  
  SWIG_check_num_args("btElement::m_sz",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btElement::m_sz",1,"btElement *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btElement,0))){
    SWIG_fail_ptr("btElement_m_sz_get",1,SWIGTYPE_p_btElement);
  }
  
  result = (int) ((arg1)->m_sz);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btElement(lua_State* L) {
  int SWIG_arg = 0;
  btElement *result = 0 ;
  
  SWIG_check_num_args("btElement::btElement",0,0)
  result = (btElement *)new btElement();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btElement,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btElement(void *obj) {
btElement *arg1 = (btElement *) obj;
delete arg1;
}
static swig_lua_method swig_btElement_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btElement_attributes[] = {
    { "m_id", _wrap_btElement_m_id_get, _wrap_btElement_m_id_set},
    { "m_sz", _wrap_btElement_m_sz_get, _wrap_btElement_m_sz_set},
    {0,0,0}
};
static swig_lua_attribute swig_btElement_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btElement_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btElement_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btElement_bases[] = {0};
static const char *swig_btElement_base_names[] = {0};
static swig_lua_class _wrap_class_btElement = { "btElement", &SWIGTYPE_p_btElement,_wrap_new_btElement, swig_delete_btElement, swig_btElement_methods, swig_btElement_attributes, { "btElement", swig_btElement_cls_methods, swig_btElement_cls_attributes, swig_btElement_cls_constants }, swig_btElement_bases, swig_btElement_base_names };

static int _wrap_new_btUnionFind(lua_State* L) {
  int SWIG_arg = 0;
  btUnionFind *result = 0 ;
  
  SWIG_check_num_args("btUnionFind::btUnionFind",0,0)
  result = (btUnionFind *)new btUnionFind();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btUnionFind,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUnionFind_sortIslands(lua_State* L) {
  int SWIG_arg = 0;
  btUnionFind *arg1 = (btUnionFind *) 0 ;
  
  SWIG_check_num_args("btUnionFind::sortIslands",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUnionFind::sortIslands",1,"btUnionFind *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUnionFind,0))){
    SWIG_fail_ptr("btUnionFind_sortIslands",1,SWIGTYPE_p_btUnionFind);
  }
  
  (arg1)->sortIslands();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUnionFind_reset(lua_State* L) {
  int SWIG_arg = 0;
  btUnionFind *arg1 = (btUnionFind *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btUnionFind::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUnionFind::reset",1,"btUnionFind *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btUnionFind::reset",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUnionFind,0))){
    SWIG_fail_ptr("btUnionFind_reset",1,SWIGTYPE_p_btUnionFind);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUnionFind_getNumElements(lua_State* L) {
  int SWIG_arg = 0;
  btUnionFind *arg1 = (btUnionFind *) 0 ;
  int result;
  
  SWIG_check_num_args("btUnionFind::getNumElements",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUnionFind::getNumElements",1,"btUnionFind const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUnionFind,0))){
    SWIG_fail_ptr("btUnionFind_getNumElements",1,SWIGTYPE_p_btUnionFind);
  }
  
  result = (int)((btUnionFind const *)arg1)->getNumElements();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUnionFind_isRoot(lua_State* L) {
  int SWIG_arg = 0;
  btUnionFind *arg1 = (btUnionFind *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("btUnionFind::isRoot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUnionFind::isRoot",1,"btUnionFind const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btUnionFind::isRoot",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUnionFind,0))){
    SWIG_fail_ptr("btUnionFind_isRoot",1,SWIGTYPE_p_btUnionFind);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)((btUnionFind const *)arg1)->isRoot(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUnionFind_getElement__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btUnionFind *arg1 = (btUnionFind *) 0 ;
  int arg2 ;
  btElement *result = 0 ;
  
  SWIG_check_num_args("btUnionFind::getElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUnionFind::getElement",1,"btUnionFind *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btUnionFind::getElement",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUnionFind,0))){
    SWIG_fail_ptr("btUnionFind_getElement",1,SWIGTYPE_p_btUnionFind);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btElement *) &(arg1)->getElement(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUnionFind_getElement__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btUnionFind *arg1 = (btUnionFind *) 0 ;
  int arg2 ;
  btElement *result = 0 ;
  
  SWIG_check_num_args("btUnionFind::getElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUnionFind::getElement",1,"btUnionFind const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btUnionFind::getElement",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUnionFind,0))){
    SWIG_fail_ptr("btUnionFind_getElement",1,SWIGTYPE_p_btUnionFind);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btElement *) &((btUnionFind const *)arg1)->getElement(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUnionFind_getElement(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btUnionFind, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btUnionFind_getElement__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btUnionFind, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btUnionFind_getElement__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btUnionFind_getElement'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btUnionFind::getElement(int)\n"
    "    btUnionFind::getElement(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_btUnionFind_allocate(lua_State* L) {
  int SWIG_arg = 0;
  btUnionFind *arg1 = (btUnionFind *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btUnionFind::allocate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUnionFind::allocate",1,"btUnionFind *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btUnionFind::allocate",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUnionFind,0))){
    SWIG_fail_ptr("btUnionFind_allocate",1,SWIGTYPE_p_btUnionFind);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->allocate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUnionFind_Free(lua_State* L) {
  int SWIG_arg = 0;
  btUnionFind *arg1 = (btUnionFind *) 0 ;
  
  SWIG_check_num_args("btUnionFind::Free",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUnionFind::Free",1,"btUnionFind *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUnionFind,0))){
    SWIG_fail_ptr("btUnionFind_Free",1,SWIGTYPE_p_btUnionFind);
  }
  
  (arg1)->Free();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUnionFind_find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btUnionFind *arg1 = (btUnionFind *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("btUnionFind::find",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUnionFind::find",1,"btUnionFind *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btUnionFind::find",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btUnionFind::find",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUnionFind,0))){
    SWIG_fail_ptr("btUnionFind_find",1,SWIGTYPE_p_btUnionFind);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->find(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUnionFind_unite(lua_State* L) {
  int SWIG_arg = 0;
  btUnionFind *arg1 = (btUnionFind *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("btUnionFind::unite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUnionFind::unite",1,"btUnionFind *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btUnionFind::unite",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btUnionFind::unite",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUnionFind,0))){
    SWIG_fail_ptr("btUnionFind_unite",1,SWIGTYPE_p_btUnionFind);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->unite(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUnionFind_find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btUnionFind *arg1 = (btUnionFind *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("btUnionFind::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btUnionFind::find",1,"btUnionFind *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btUnionFind::find",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btUnionFind,0))){
    SWIG_fail_ptr("btUnionFind_find",1,SWIGTYPE_p_btUnionFind);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->find(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btUnionFind_find(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btUnionFind, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btUnionFind_find__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btUnionFind, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btUnionFind_find__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btUnionFind_find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btUnionFind::find(int,int)\n"
    "    btUnionFind::find(int)\n");
  lua_error(L);return 0;
}


static void swig_delete_btUnionFind(void *obj) {
btUnionFind *arg1 = (btUnionFind *) obj;
delete arg1;
}
static swig_lua_method swig_btUnionFind_methods[] = {
    {"sortIslands", _wrap_btUnionFind_sortIslands}, 
    {"reset", _wrap_btUnionFind_reset}, 
    {"getNumElements", _wrap_btUnionFind_getNumElements}, 
    {"isRoot", _wrap_btUnionFind_isRoot}, 
    {"getElement", _wrap_btUnionFind_getElement}, 
    {"allocate", _wrap_btUnionFind_allocate}, 
    {"Free", _wrap_btUnionFind_Free}, 
    {"unite", _wrap_btUnionFind_unite}, 
    {"find", _wrap_btUnionFind_find}, 
    {0,0}
};
static swig_lua_attribute swig_btUnionFind_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btUnionFind_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btUnionFind_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btUnionFind_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btUnionFind_bases[] = {0};
static const char *swig_btUnionFind_base_names[] = {0};
static swig_lua_class _wrap_class_btUnionFind = { "btUnionFind", &SWIGTYPE_p_btUnionFind,_wrap_new_btUnionFind, swig_delete_btUnionFind, swig_btUnionFind_methods, swig_btUnionFind_attributes, { "btUnionFind", swig_btUnionFind_cls_methods, swig_btUnionFind_cls_attributes, swig_btUnionFind_cls_constants }, swig_btUnionFind_bases, swig_btUnionFind_base_names };

static void swig_delete_SphereTriangleDetector(void *obj) {
SphereTriangleDetector *arg1 = (SphereTriangleDetector *) obj;
delete arg1;
}
static swig_lua_method swig_SphereTriangleDetector_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_SphereTriangleDetector_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_SphereTriangleDetector_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SphereTriangleDetector_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_SphereTriangleDetector_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_SphereTriangleDetector_bases[] = {0,0};
static const char *swig_SphereTriangleDetector_base_names[] = {"btDiscreteCollisionDetectorInterface *",0};
static swig_lua_class _wrap_class_SphereTriangleDetector = { "SphereTriangleDetector", &SWIGTYPE_p_SphereTriangleDetector,0, swig_delete_SphereTriangleDetector, swig_SphereTriangleDetector_methods, swig_SphereTriangleDetector_attributes, { "SphereTriangleDetector", swig_SphereTriangleDetector_cls_methods, swig_SphereTriangleDetector_cls_attributes, swig_SphereTriangleDetector_cls_constants }, swig_SphereTriangleDetector_bases, swig_SphereTriangleDetector_base_names };

static int _wrap_btConstraintSolver_prepareSolve(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintSolver *arg1 = (btConstraintSolver *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("btConstraintSolver::prepareSolve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintSolver::prepareSolve",1,"btConstraintSolver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConstraintSolver::prepareSolve",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btConstraintSolver::prepareSolve",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintSolver,0))){
    SWIG_fail_ptr("btConstraintSolver_prepareSolve",1,SWIGTYPE_p_btConstraintSolver);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->prepareSolve(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintSolver_solveGroup(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintSolver *arg1 = (btConstraintSolver *) 0 ;
  btCollisionObject **arg2 = (btCollisionObject **) 0 ;
  int arg3 ;
  btPersistentManifold **arg4 = (btPersistentManifold **) 0 ;
  int arg5 ;
  btTypedConstraint **arg6 = (btTypedConstraint **) 0 ;
  int arg7 ;
  btContactSolverInfo *arg8 = 0 ;
  btIDebugDraw *arg9 = (btIDebugDraw *) 0 ;
  btStackAlloc *arg10 = (btStackAlloc *) 0 ;
  btDispatcher *arg11 = (btDispatcher *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConstraintSolver::solveGroup",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintSolver::solveGroup",1,"btConstraintSolver *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btConstraintSolver::solveGroup",2,"btCollisionObject **");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btConstraintSolver::solveGroup",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btConstraintSolver::solveGroup",4,"btPersistentManifold **");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btConstraintSolver::solveGroup",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("btConstraintSolver::solveGroup",6,"btTypedConstraint **");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("btConstraintSolver::solveGroup",7,"int");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btConstraintSolver::solveGroup",8,"btContactSolverInfo const &");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("btConstraintSolver::solveGroup",9,"btIDebugDraw *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("btConstraintSolver::solveGroup",10,"btStackAlloc *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("btConstraintSolver::solveGroup",11,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintSolver,0))){
    SWIG_fail_ptr("btConstraintSolver_solveGroup",1,SWIGTYPE_p_btConstraintSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_btCollisionObject,0))){
    SWIG_fail_ptr("btConstraintSolver_solveGroup",2,SWIGTYPE_p_p_btCollisionObject);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btConstraintSolver_solveGroup",4,SWIGTYPE_p_p_btPersistentManifold);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btConstraintSolver_solveGroup",6,SWIGTYPE_p_p_btTypedConstraint);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_btContactSolverInfo,0))){
    SWIG_fail_ptr("btConstraintSolver_solveGroup",8,SWIGTYPE_p_btContactSolverInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btConstraintSolver_solveGroup",9,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_btStackAlloc,0))){
    SWIG_fail_ptr("btConstraintSolver_solveGroup",10,SWIGTYPE_p_btStackAlloc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btConstraintSolver_solveGroup",11,SWIGTYPE_p_btDispatcher);
  }
  
  result = (btScalar)(arg1)->solveGroup(arg2,arg3,arg4,arg5,arg6,arg7,(btContactSolverInfo const &)*arg8,arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintSolver_allSolved(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintSolver *arg1 = (btConstraintSolver *) 0 ;
  btContactSolverInfo *arg2 = 0 ;
  btIDebugDraw *arg3 = (btIDebugDraw *) 0 ;
  btStackAlloc *arg4 = (btStackAlloc *) 0 ;
  
  SWIG_check_num_args("btConstraintSolver::allSolved",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintSolver::allSolved",1,"btConstraintSolver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btConstraintSolver::allSolved",2,"btContactSolverInfo const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btConstraintSolver::allSolved",3,"btIDebugDraw *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btConstraintSolver::allSolved",4,"btStackAlloc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintSolver,0))){
    SWIG_fail_ptr("btConstraintSolver_allSolved",1,SWIGTYPE_p_btConstraintSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btContactSolverInfo,0))){
    SWIG_fail_ptr("btConstraintSolver_allSolved",2,SWIGTYPE_p_btContactSolverInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btConstraintSolver_allSolved",3,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btStackAlloc,0))){
    SWIG_fail_ptr("btConstraintSolver_allSolved",4,SWIGTYPE_p_btStackAlloc);
  }
  
  (arg1)->allSolved((btContactSolverInfo const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintSolver_reset(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintSolver *arg1 = (btConstraintSolver *) 0 ;
  
  SWIG_check_num_args("btConstraintSolver::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintSolver::reset",1,"btConstraintSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintSolver,0))){
    SWIG_fail_ptr("btConstraintSolver_reset",1,SWIGTYPE_p_btConstraintSolver);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConstraintSolver(void *obj) {
btConstraintSolver *arg1 = (btConstraintSolver *) obj;
delete arg1;
}
static swig_lua_method swig_btConstraintSolver_methods[] = {
    {"prepareSolve", _wrap_btConstraintSolver_prepareSolve}, 
    {"solveGroup", _wrap_btConstraintSolver_solveGroup}, 
    {"allSolved", _wrap_btConstraintSolver_allSolved}, 
    {"reset", _wrap_btConstraintSolver_reset}, 
    {0,0}
};
static swig_lua_attribute swig_btConstraintSolver_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btConstraintSolver_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConstraintSolver_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConstraintSolver_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConstraintSolver_bases[] = {0};
static const char *swig_btConstraintSolver_base_names[] = {0};
static swig_lua_class _wrap_class_btConstraintSolver = { "btConstraintSolver", &SWIGTYPE_p_btConstraintSolver,0, swig_delete_btConstraintSolver, swig_btConstraintSolver_methods, swig_btConstraintSolver_attributes, { "btConstraintSolver", swig_btConstraintSolver_cls_methods, swig_btConstraintSolver_cls_attributes, swig_btConstraintSolver_cls_constants }, swig_btConstraintSolver_bases, swig_btConstraintSolver_base_names };

static int _wrap_new_btJacobianEntry__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btJacobianEntry *result = 0 ;
  
  SWIG_check_num_args("btJacobianEntry::btJacobianEntry",0,0)
  result = (btJacobianEntry *)new btJacobianEntry();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btJacobianEntry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btJacobianEntry__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btScalar arg7 ;
  btVector3 *arg8 = 0 ;
  btScalar arg9 ;
  btJacobianEntry *result = 0 ;
  
  SWIG_check_num_args("btJacobianEntry::btJacobianEntry",9,9)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",1,"btMatrix3x3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",2,"btMatrix3x3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",6,"btVector3 const &");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",7,"btScalar const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",8,"btVector3 const &");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",9,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",2,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",6,SWIGTYPE_p_btVector3);
  }
  
  arg7 = (btScalar const)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",8,SWIGTYPE_p_btVector3);
  }
  
  arg9 = (btScalar const)lua_tonumber(L, 9);
  result = (btJacobianEntry *)new btJacobianEntry((btMatrix3x3 const &)*arg1,(btMatrix3x3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,arg7,(btVector3 const &)*arg8,arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btJacobianEntry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btJacobianEntry__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btMatrix3x3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btJacobianEntry *result = 0 ;
  
  SWIG_check_num_args("btJacobianEntry::btJacobianEntry",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",2,"btMatrix3x3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",3,"btMatrix3x3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",5,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",2,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",3,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",5,SWIGTYPE_p_btVector3);
  }
  
  result = (btJacobianEntry *)new btJacobianEntry((btVector3 const &)*arg1,(btMatrix3x3 const &)*arg2,(btMatrix3x3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btJacobianEntry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btJacobianEntry__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btJacobianEntry *result = 0 ;
  
  SWIG_check_num_args("btJacobianEntry::btJacobianEntry",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",4,SWIGTYPE_p_btVector3);
  }
  
  result = (btJacobianEntry *)new btJacobianEntry((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btJacobianEntry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btJacobianEntry__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btScalar arg6 ;
  btJacobianEntry *result = 0 ;
  
  SWIG_check_num_args("btJacobianEntry::btJacobianEntry",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",1,"btMatrix3x3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",5,"btVector3 const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btJacobianEntry::btJacobianEntry",6,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btJacobianEntry",5,SWIGTYPE_p_btVector3);
  }
  
  arg6 = (btScalar const)lua_tonumber(L, 6);
  result = (btJacobianEntry *)new btJacobianEntry((btMatrix3x3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btJacobianEntry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btJacobianEntry(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btJacobianEntry__SWIG_0(L);
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_btJacobianEntry__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btMatrix3x3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btMatrix3x3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_new_btJacobianEntry__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btMatrix3x3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_btJacobianEntry__SWIG_4(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btMatrix3x3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btMatrix3x3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_new_btJacobianEntry__SWIG_1(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btJacobianEntry'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btJacobianEntry::btJacobianEntry()\n"
    "    btJacobianEntry::btJacobianEntry(btMatrix3x3 const &,btMatrix3x3 const &,btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &,btScalar const,btVector3 const &,btScalar const)\n"
    "    btJacobianEntry::btJacobianEntry(btVector3 const &,btMatrix3x3 const &,btMatrix3x3 const &,btVector3 const &,btVector3 const &)\n"
    "    btJacobianEntry::btJacobianEntry(btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &)\n"
    "    btJacobianEntry::btJacobianEntry(btMatrix3x3 const &,btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &,btScalar const)\n");
  lua_error(L);return 0;
}


static int _wrap_btJacobianEntry_getDiagonal(lua_State* L) {
  int SWIG_arg = 0;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btJacobianEntry::getDiagonal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJacobianEntry::getDiagonal",1,"btJacobianEntry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_getDiagonal",1,SWIGTYPE_p_btJacobianEntry);
  }
  
  result = (btScalar)((btJacobianEntry const *)arg1)->getDiagonal();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJacobianEntry_getNonDiagonal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btJacobianEntry *arg2 = 0 ;
  btScalar arg3 ;
  btScalar result;
  
  SWIG_check_num_args("btJacobianEntry::getNonDiagonal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJacobianEntry::getNonDiagonal",1,"btJacobianEntry const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btJacobianEntry::getNonDiagonal",2,"btJacobianEntry const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btJacobianEntry::getNonDiagonal",3,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_getNonDiagonal",1,SWIGTYPE_p_btJacobianEntry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_getNonDiagonal",2,SWIGTYPE_p_btJacobianEntry);
  }
  
  arg3 = (btScalar const)lua_tonumber(L, 3);
  result = (btScalar)((btJacobianEntry const *)arg1)->getNonDiagonal((btJacobianEntry const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJacobianEntry_getNonDiagonal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btJacobianEntry *arg2 = 0 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar result;
  
  SWIG_check_num_args("btJacobianEntry::getNonDiagonal",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJacobianEntry::getNonDiagonal",1,"btJacobianEntry const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btJacobianEntry::getNonDiagonal",2,"btJacobianEntry const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btJacobianEntry::getNonDiagonal",3,"btScalar const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btJacobianEntry::getNonDiagonal",4,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_getNonDiagonal",1,SWIGTYPE_p_btJacobianEntry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_getNonDiagonal",2,SWIGTYPE_p_btJacobianEntry);
  }
  
  arg3 = (btScalar const)lua_tonumber(L, 3);
  arg4 = (btScalar const)lua_tonumber(L, 4);
  result = (btScalar)((btJacobianEntry const *)arg1)->getNonDiagonal((btJacobianEntry const &)*arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJacobianEntry_getNonDiagonal(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btJacobianEntry, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btJacobianEntry, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btJacobianEntry_getNonDiagonal__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btJacobianEntry, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btJacobianEntry, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btJacobianEntry_getNonDiagonal__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btJacobianEntry_getNonDiagonal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btJacobianEntry::getNonDiagonal(btJacobianEntry const &,btScalar const) const\n"
    "    btJacobianEntry::getNonDiagonal(btJacobianEntry const &,btScalar const,btScalar const) const\n");
  lua_error(L);return 0;
}


static int _wrap_btJacobianEntry_getRelativeVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btJacobianEntry::getRelativeVelocity",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJacobianEntry::getRelativeVelocity",1,"btJacobianEntry *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btJacobianEntry::getRelativeVelocity",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btJacobianEntry::getRelativeVelocity",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btJacobianEntry::getRelativeVelocity",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btJacobianEntry::getRelativeVelocity",5,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_getRelativeVelocity",1,SWIGTYPE_p_btJacobianEntry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btJacobianEntry_getRelativeVelocity",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btJacobianEntry_getRelativeVelocity",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btJacobianEntry_getRelativeVelocity",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btJacobianEntry_getRelativeVelocity",5,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)(arg1)->getRelativeVelocity((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJacobianEntry_m_linearJointAxis_set(lua_State* L) {
  int SWIG_arg = 0;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btJacobianEntry::m_linearJointAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJacobianEntry::m_linearJointAxis",1,"btJacobianEntry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btJacobianEntry::m_linearJointAxis",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_m_linearJointAxis_set",1,SWIGTYPE_p_btJacobianEntry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btJacobianEntry_m_linearJointAxis_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_linearJointAxis = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJacobianEntry_m_linearJointAxis_get(lua_State* L) {
  int SWIG_arg = 0;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btJacobianEntry::m_linearJointAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJacobianEntry::m_linearJointAxis",1,"btJacobianEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_m_linearJointAxis_get",1,SWIGTYPE_p_btJacobianEntry);
  }
  
  result = (btVector3 *)& ((arg1)->m_linearJointAxis);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJacobianEntry_m_aJ_set(lua_State* L) {
  int SWIG_arg = 0;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btJacobianEntry::m_aJ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJacobianEntry::m_aJ",1,"btJacobianEntry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btJacobianEntry::m_aJ",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_m_aJ_set",1,SWIGTYPE_p_btJacobianEntry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btJacobianEntry_m_aJ_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_aJ = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJacobianEntry_m_aJ_get(lua_State* L) {
  int SWIG_arg = 0;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btJacobianEntry::m_aJ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJacobianEntry::m_aJ",1,"btJacobianEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_m_aJ_get",1,SWIGTYPE_p_btJacobianEntry);
  }
  
  result = (btVector3 *)& ((arg1)->m_aJ);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJacobianEntry_m_bJ_set(lua_State* L) {
  int SWIG_arg = 0;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btJacobianEntry::m_bJ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJacobianEntry::m_bJ",1,"btJacobianEntry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btJacobianEntry::m_bJ",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_m_bJ_set",1,SWIGTYPE_p_btJacobianEntry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btJacobianEntry_m_bJ_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_bJ = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJacobianEntry_m_bJ_get(lua_State* L) {
  int SWIG_arg = 0;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btJacobianEntry::m_bJ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJacobianEntry::m_bJ",1,"btJacobianEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_m_bJ_get",1,SWIGTYPE_p_btJacobianEntry);
  }
  
  result = (btVector3 *)& ((arg1)->m_bJ);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJacobianEntry_m_0MinvJt_set(lua_State* L) {
  int SWIG_arg = 0;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btJacobianEntry::m_0MinvJt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJacobianEntry::m_0MinvJt",1,"btJacobianEntry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btJacobianEntry::m_0MinvJt",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_m_0MinvJt_set",1,SWIGTYPE_p_btJacobianEntry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btJacobianEntry_m_0MinvJt_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_0MinvJt = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJacobianEntry_m_0MinvJt_get(lua_State* L) {
  int SWIG_arg = 0;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btJacobianEntry::m_0MinvJt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJacobianEntry::m_0MinvJt",1,"btJacobianEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_m_0MinvJt_get",1,SWIGTYPE_p_btJacobianEntry);
  }
  
  result = (btVector3 *)& ((arg1)->m_0MinvJt);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJacobianEntry_m_1MinvJt_set(lua_State* L) {
  int SWIG_arg = 0;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btJacobianEntry::m_1MinvJt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJacobianEntry::m_1MinvJt",1,"btJacobianEntry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btJacobianEntry::m_1MinvJt",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_m_1MinvJt_set",1,SWIGTYPE_p_btJacobianEntry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btJacobianEntry_m_1MinvJt_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_1MinvJt = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJacobianEntry_m_1MinvJt_get(lua_State* L) {
  int SWIG_arg = 0;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btJacobianEntry::m_1MinvJt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJacobianEntry::m_1MinvJt",1,"btJacobianEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_m_1MinvJt_get",1,SWIGTYPE_p_btJacobianEntry);
  }
  
  result = (btVector3 *)& ((arg1)->m_1MinvJt);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJacobianEntry_m_Adiag_set(lua_State* L) {
  int SWIG_arg = 0;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btJacobianEntry::m_Adiag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJacobianEntry::m_Adiag",1,"btJacobianEntry *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btJacobianEntry::m_Adiag",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_m_Adiag_set",1,SWIGTYPE_p_btJacobianEntry);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_Adiag = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJacobianEntry_m_Adiag_get(lua_State* L) {
  int SWIG_arg = 0;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btJacobianEntry::m_Adiag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJacobianEntry::m_Adiag",1,"btJacobianEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJacobianEntry,0))){
    SWIG_fail_ptr("btJacobianEntry_m_Adiag_get",1,SWIGTYPE_p_btJacobianEntry);
  }
  
  result = (btScalar) ((arg1)->m_Adiag);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btJacobianEntry(void *obj) {
btJacobianEntry *arg1 = (btJacobianEntry *) obj;
delete arg1;
}
static swig_lua_method swig_btJacobianEntry_methods[] = {
    {"getDiagonal", _wrap_btJacobianEntry_getDiagonal}, 
    {"getNonDiagonal", _wrap_btJacobianEntry_getNonDiagonal}, 
    {"getRelativeVelocity", _wrap_btJacobianEntry_getRelativeVelocity}, 
    {0,0}
};
static swig_lua_attribute swig_btJacobianEntry_attributes[] = {
    { "m_linearJointAxis", _wrap_btJacobianEntry_m_linearJointAxis_get, _wrap_btJacobianEntry_m_linearJointAxis_set},
    { "m_aJ", _wrap_btJacobianEntry_m_aJ_get, _wrap_btJacobianEntry_m_aJ_set},
    { "m_bJ", _wrap_btJacobianEntry_m_bJ_get, _wrap_btJacobianEntry_m_bJ_set},
    { "m_0MinvJt", _wrap_btJacobianEntry_m_0MinvJt_get, _wrap_btJacobianEntry_m_0MinvJt_set},
    { "m_1MinvJt", _wrap_btJacobianEntry_m_1MinvJt_get, _wrap_btJacobianEntry_m_1MinvJt_set},
    { "m_Adiag", _wrap_btJacobianEntry_m_Adiag_get, _wrap_btJacobianEntry_m_Adiag_set},
    {0,0,0}
};
static swig_lua_attribute swig_btJacobianEntry_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btJacobianEntry_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btJacobianEntry_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btJacobianEntry_bases[] = {0};
static const char *swig_btJacobianEntry_base_names[] = {0};
static swig_lua_class _wrap_class_btJacobianEntry = { "btJacobianEntry", &SWIGTYPE_p_btJacobianEntry,_wrap_new_btJacobianEntry, swig_delete_btJacobianEntry, swig_btJacobianEntry_methods, swig_btJacobianEntry_attributes, { "btJacobianEntry", swig_btJacobianEntry_cls_methods, swig_btJacobianEntry_cls_attributes, swig_btJacobianEntry_cls_constants }, swig_btJacobianEntry_bases, swig_btJacobianEntry_base_names };

static int _wrap_btSolverBody_m_worldTransform_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  SWIG_check_num_args("btSolverBody::m_worldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_worldTransform",1,"btSolverBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolverBody::m_worldTransform",2,"btTransform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_worldTransform_set",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btSolverBody_m_worldTransform_set",2,SWIGTYPE_p_btTransform);
  }
  
  if (arg1) (arg1)->m_worldTransform = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_worldTransform_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::m_worldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_worldTransform",1,"btSolverBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_worldTransform_get",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btTransform *)& ((arg1)->m_worldTransform);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_deltaLinearVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSolverBody::m_deltaLinearVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_deltaLinearVelocity",1,"btSolverBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolverBody::m_deltaLinearVelocity",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_deltaLinearVelocity_set",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_m_deltaLinearVelocity_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_deltaLinearVelocity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_deltaLinearVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::m_deltaLinearVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_deltaLinearVelocity",1,"btSolverBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_deltaLinearVelocity_get",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *)& ((arg1)->m_deltaLinearVelocity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_deltaAngularVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSolverBody::m_deltaAngularVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_deltaAngularVelocity",1,"btSolverBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolverBody::m_deltaAngularVelocity",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_deltaAngularVelocity_set",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_m_deltaAngularVelocity_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_deltaAngularVelocity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_deltaAngularVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::m_deltaAngularVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_deltaAngularVelocity",1,"btSolverBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_deltaAngularVelocity_get",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *)& ((arg1)->m_deltaAngularVelocity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_angularFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSolverBody::m_angularFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_angularFactor",1,"btSolverBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolverBody::m_angularFactor",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_angularFactor_set",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_m_angularFactor_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_angularFactor = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_angularFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::m_angularFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_angularFactor",1,"btSolverBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_angularFactor_get",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *)& ((arg1)->m_angularFactor);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_linearFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSolverBody::m_linearFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_linearFactor",1,"btSolverBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolverBody::m_linearFactor",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_linearFactor_set",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_m_linearFactor_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_linearFactor = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_linearFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::m_linearFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_linearFactor",1,"btSolverBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_linearFactor_get",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *)& ((arg1)->m_linearFactor);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_invMass_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSolverBody::m_invMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_invMass",1,"btSolverBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolverBody::m_invMass",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_invMass_set",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_m_invMass_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_invMass = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_invMass_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::m_invMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_invMass",1,"btSolverBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_invMass_get",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *)& ((arg1)->m_invMass);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_pushVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSolverBody::m_pushVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_pushVelocity",1,"btSolverBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolverBody::m_pushVelocity",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_pushVelocity_set",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_m_pushVelocity_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_pushVelocity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_pushVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::m_pushVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_pushVelocity",1,"btSolverBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_pushVelocity_get",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *)& ((arg1)->m_pushVelocity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_turnVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSolverBody::m_turnVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_turnVelocity",1,"btSolverBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolverBody::m_turnVelocity",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_turnVelocity_set",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_m_turnVelocity_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_turnVelocity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_turnVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::m_turnVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_turnVelocity",1,"btSolverBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_turnVelocity_get",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *)& ((arg1)->m_turnVelocity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_linearVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSolverBody::m_linearVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_linearVelocity",1,"btSolverBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolverBody::m_linearVelocity",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_linearVelocity_set",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_m_linearVelocity_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_linearVelocity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_linearVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::m_linearVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_linearVelocity",1,"btSolverBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_linearVelocity_get",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *)& ((arg1)->m_linearVelocity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_angularVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSolverBody::m_angularVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_angularVelocity",1,"btSolverBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolverBody::m_angularVelocity",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_angularVelocity_set",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_m_angularVelocity_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_angularVelocity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_angularVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::m_angularVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_angularVelocity",1,"btSolverBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_angularVelocity_get",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *)& ((arg1)->m_angularVelocity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_originalBody_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  SWIG_check_num_args("btSolverBody::m_originalBody",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_originalBody",1,"btSolverBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolverBody::m_originalBody",2,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_originalBody_set",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btSolverBody_m_originalBody_set",2,SWIGTYPE_p_btRigidBody);
  }
  
  if (arg1) (arg1)->m_originalBody = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_m_originalBody_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::m_originalBody",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::m_originalBody",1,"btSolverBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_m_originalBody_get",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btRigidBody *) ((arg1)->m_originalBody);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_setWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("btSolverBody::setWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::setWorldTransform",1,"btSolverBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSolverBody::setWorldTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_setWorldTransform",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btSolverBody_setWorldTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_getWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::getWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::getWorldTransform",1,"btSolverBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_getWorldTransform",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btTransform *) &((btSolverBody const *)arg1)->getWorldTransform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_getVelocityInLocalPointObsolete(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btSolverBody::getVelocityInLocalPointObsolete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::getVelocityInLocalPointObsolete",1,"btSolverBody const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSolverBody::getVelocityInLocalPointObsolete",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSolverBody::getVelocityInLocalPointObsolete",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_getVelocityInLocalPointObsolete",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_getVelocityInLocalPointObsolete",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_getVelocityInLocalPointObsolete",3,SWIGTYPE_p_btVector3);
  }
  
  ((btSolverBody const *)arg1)->getVelocityInLocalPointObsolete((btVector3 const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_getAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btSolverBody::getAngularVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::getAngularVelocity",1,"btSolverBody const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSolverBody::getAngularVelocity",2,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_getAngularVelocity",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_getAngularVelocity",2,SWIGTYPE_p_btVector3);
  }
  
  ((btSolverBody const *)arg1)->getAngularVelocity(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_applyImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  SWIG_check_num_args("btSolverBody::applyImpulse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::applyImpulse",1,"btSolverBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSolverBody::applyImpulse",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSolverBody::applyImpulse",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSolverBody::applyImpulse",4,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_applyImpulse",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_applyImpulse",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_applyImpulse",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (btScalar const)lua_tonumber(L, 4);
  (arg1)->applyImpulse((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_internalApplyPushImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  SWIG_check_num_args("btSolverBody::internalApplyPushImpulse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::internalApplyPushImpulse",1,"btSolverBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSolverBody::internalApplyPushImpulse",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSolverBody::internalApplyPushImpulse",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSolverBody::internalApplyPushImpulse",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_internalApplyPushImpulse",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_internalApplyPushImpulse",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_internalApplyPushImpulse",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  (arg1)->internalApplyPushImpulse((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_getDeltaLinearVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::getDeltaLinearVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::getDeltaLinearVelocity",1,"btSolverBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_getDeltaLinearVelocity",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *) &((btSolverBody const *)arg1)->getDeltaLinearVelocity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_getDeltaAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::getDeltaAngularVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::getDeltaAngularVelocity",1,"btSolverBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_getDeltaAngularVelocity",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *) &((btSolverBody const *)arg1)->getDeltaAngularVelocity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_getPushVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::getPushVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::getPushVelocity",1,"btSolverBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_getPushVelocity",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *) &((btSolverBody const *)arg1)->getPushVelocity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_getTurnVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::getTurnVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::getTurnVelocity",1,"btSolverBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_getTurnVelocity",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *) &((btSolverBody const *)arg1)->getTurnVelocity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_internalGetDeltaLinearVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::internalGetDeltaLinearVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::internalGetDeltaLinearVelocity",1,"btSolverBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_internalGetDeltaLinearVelocity",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *) &(arg1)->internalGetDeltaLinearVelocity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_internalGetDeltaAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::internalGetDeltaAngularVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::internalGetDeltaAngularVelocity",1,"btSolverBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_internalGetDeltaAngularVelocity",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *) &(arg1)->internalGetDeltaAngularVelocity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_internalGetAngularFactor(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::internalGetAngularFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::internalGetAngularFactor",1,"btSolverBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_internalGetAngularFactor",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *) &((btSolverBody const *)arg1)->internalGetAngularFactor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_internalGetInvMass(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::internalGetInvMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::internalGetInvMass",1,"btSolverBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_internalGetInvMass",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *) &((btSolverBody const *)arg1)->internalGetInvMass();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_internalSetInvMass(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btSolverBody::internalSetInvMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::internalSetInvMass",1,"btSolverBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSolverBody::internalSetInvMass",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_internalSetInvMass",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_internalSetInvMass",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->internalSetInvMass((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_internalGetPushVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::internalGetPushVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::internalGetPushVelocity",1,"btSolverBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_internalGetPushVelocity",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *) &(arg1)->internalGetPushVelocity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_internalGetTurnVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::internalGetTurnVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::internalGetTurnVelocity",1,"btSolverBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_internalGetTurnVelocity",1,SWIGTYPE_p_btSolverBody);
  }
  
  result = (btVector3 *) &(arg1)->internalGetTurnVelocity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_internalGetVelocityInLocalPointObsolete(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btSolverBody::internalGetVelocityInLocalPointObsolete",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::internalGetVelocityInLocalPointObsolete",1,"btSolverBody const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSolverBody::internalGetVelocityInLocalPointObsolete",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSolverBody::internalGetVelocityInLocalPointObsolete",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_internalGetVelocityInLocalPointObsolete",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_internalGetVelocityInLocalPointObsolete",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_internalGetVelocityInLocalPointObsolete",3,SWIGTYPE_p_btVector3);
  }
  
  ((btSolverBody const *)arg1)->internalGetVelocityInLocalPointObsolete((btVector3 const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_internalGetAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btSolverBody::internalGetAngularVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::internalGetAngularVelocity",1,"btSolverBody const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSolverBody::internalGetAngularVelocity",2,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_internalGetAngularVelocity",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_internalGetAngularVelocity",2,SWIGTYPE_p_btVector3);
  }
  
  ((btSolverBody const *)arg1)->internalGetAngularVelocity(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_internalApplyImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  SWIG_check_num_args("btSolverBody::internalApplyImpulse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::internalApplyImpulse",1,"btSolverBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSolverBody::internalApplyImpulse",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSolverBody::internalApplyImpulse",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSolverBody::internalApplyImpulse",4,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_internalApplyImpulse",1,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_internalApplyImpulse",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverBody_internalApplyImpulse",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (btScalar const)lua_tonumber(L, 4);
  (arg1)->internalApplyImpulse((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_writebackVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  
  SWIG_check_num_args("btSolverBody::writebackVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::writebackVelocity",1,"btSolverBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_writebackVelocity",1,SWIGTYPE_p_btSolverBody);
  }
  
  (arg1)->writebackVelocity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverBody_writebackVelocityAndTransform(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btSolverBody::writebackVelocityAndTransform",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverBody::writebackVelocityAndTransform",1,"btSolverBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSolverBody::writebackVelocityAndTransform",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSolverBody::writebackVelocityAndTransform",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btSolverBody_writebackVelocityAndTransform",1,SWIGTYPE_p_btSolverBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->writebackVelocityAndTransform(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btSolverBody(lua_State* L) {
  int SWIG_arg = 0;
  btSolverBody *result = 0 ;
  
  SWIG_check_num_args("btSolverBody::btSolverBody",0,0)
  result = (btSolverBody *)new btSolverBody();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSolverBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSolverBody(void *obj) {
btSolverBody *arg1 = (btSolverBody *) obj;
delete arg1;
}
static swig_lua_method swig_btSolverBody_methods[] = {
    {"setWorldTransform", _wrap_btSolverBody_setWorldTransform}, 
    {"getWorldTransform", _wrap_btSolverBody_getWorldTransform}, 
    {"getVelocityInLocalPointObsolete", _wrap_btSolverBody_getVelocityInLocalPointObsolete}, 
    {"getAngularVelocity", _wrap_btSolverBody_getAngularVelocity}, 
    {"applyImpulse", _wrap_btSolverBody_applyImpulse}, 
    {"internalApplyPushImpulse", _wrap_btSolverBody_internalApplyPushImpulse}, 
    {"getDeltaLinearVelocity", _wrap_btSolverBody_getDeltaLinearVelocity}, 
    {"getDeltaAngularVelocity", _wrap_btSolverBody_getDeltaAngularVelocity}, 
    {"getPushVelocity", _wrap_btSolverBody_getPushVelocity}, 
    {"getTurnVelocity", _wrap_btSolverBody_getTurnVelocity}, 
    {"internalGetDeltaLinearVelocity", _wrap_btSolverBody_internalGetDeltaLinearVelocity}, 
    {"internalGetDeltaAngularVelocity", _wrap_btSolverBody_internalGetDeltaAngularVelocity}, 
    {"internalGetAngularFactor", _wrap_btSolverBody_internalGetAngularFactor}, 
    {"internalGetInvMass", _wrap_btSolverBody_internalGetInvMass}, 
    {"internalSetInvMass", _wrap_btSolverBody_internalSetInvMass}, 
    {"internalGetPushVelocity", _wrap_btSolverBody_internalGetPushVelocity}, 
    {"internalGetTurnVelocity", _wrap_btSolverBody_internalGetTurnVelocity}, 
    {"internalGetVelocityInLocalPointObsolete", _wrap_btSolverBody_internalGetVelocityInLocalPointObsolete}, 
    {"internalGetAngularVelocity", _wrap_btSolverBody_internalGetAngularVelocity}, 
    {"internalApplyImpulse", _wrap_btSolverBody_internalApplyImpulse}, 
    {"writebackVelocity", _wrap_btSolverBody_writebackVelocity}, 
    {"writebackVelocityAndTransform", _wrap_btSolverBody_writebackVelocityAndTransform}, 
    {0,0}
};
static swig_lua_attribute swig_btSolverBody_attributes[] = {
    { "m_worldTransform", _wrap_btSolverBody_m_worldTransform_get, _wrap_btSolverBody_m_worldTransform_set},
    { "m_deltaLinearVelocity", _wrap_btSolverBody_m_deltaLinearVelocity_get, _wrap_btSolverBody_m_deltaLinearVelocity_set},
    { "m_deltaAngularVelocity", _wrap_btSolverBody_m_deltaAngularVelocity_get, _wrap_btSolverBody_m_deltaAngularVelocity_set},
    { "m_angularFactor", _wrap_btSolverBody_m_angularFactor_get, _wrap_btSolverBody_m_angularFactor_set},
    { "m_linearFactor", _wrap_btSolverBody_m_linearFactor_get, _wrap_btSolverBody_m_linearFactor_set},
    { "m_invMass", _wrap_btSolverBody_m_invMass_get, _wrap_btSolverBody_m_invMass_set},
    { "m_pushVelocity", _wrap_btSolverBody_m_pushVelocity_get, _wrap_btSolverBody_m_pushVelocity_set},
    { "m_turnVelocity", _wrap_btSolverBody_m_turnVelocity_get, _wrap_btSolverBody_m_turnVelocity_set},
    { "m_linearVelocity", _wrap_btSolverBody_m_linearVelocity_get, _wrap_btSolverBody_m_linearVelocity_set},
    { "m_angularVelocity", _wrap_btSolverBody_m_angularVelocity_get, _wrap_btSolverBody_m_angularVelocity_set},
    { "m_originalBody", _wrap_btSolverBody_m_originalBody_get, _wrap_btSolverBody_m_originalBody_set},
    {0,0,0}
};
static swig_lua_attribute swig_btSolverBody_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSolverBody_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btSolverBody_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSolverBody_bases[] = {0};
static const char *swig_btSolverBody_base_names[] = {0};
static swig_lua_class _wrap_class_btSolverBody = { "btSolverBody", &SWIGTYPE_p_btSolverBody,_wrap_new_btSolverBody, swig_delete_btSolverBody, swig_btSolverBody_methods, swig_btSolverBody_attributes, { "btSolverBody", swig_btSolverBody_cls_methods, swig_btSolverBody_cls_attributes, swig_btSolverBody_cls_constants }, swig_btSolverBody_bases, swig_btSolverBody_base_names };

static int _wrap_btSolverConstraint_m_relpos1CrossNormal_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSolverConstraint::m_relpos1CrossNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_relpos1CrossNormal",1,"btSolverConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolverConstraint::m_relpos1CrossNormal",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_relpos1CrossNormal_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverConstraint_m_relpos1CrossNormal_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_relpos1CrossNormal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_relpos1CrossNormal_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverConstraint::m_relpos1CrossNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_relpos1CrossNormal",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_relpos1CrossNormal_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (btVector3 *)& ((arg1)->m_relpos1CrossNormal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_contactNormal_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSolverConstraint::m_contactNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_contactNormal",1,"btSolverConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolverConstraint::m_contactNormal",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_contactNormal_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverConstraint_m_contactNormal_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_contactNormal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_contactNormal_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverConstraint::m_contactNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_contactNormal",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_contactNormal_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (btVector3 *)& ((arg1)->m_contactNormal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_relpos2CrossNormal_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSolverConstraint::m_relpos2CrossNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_relpos2CrossNormal",1,"btSolverConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolverConstraint::m_relpos2CrossNormal",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_relpos2CrossNormal_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverConstraint_m_relpos2CrossNormal_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_relpos2CrossNormal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_relpos2CrossNormal_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverConstraint::m_relpos2CrossNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_relpos2CrossNormal",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_relpos2CrossNormal_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (btVector3 *)& ((arg1)->m_relpos2CrossNormal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_angularComponentA_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSolverConstraint::m_angularComponentA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_angularComponentA",1,"btSolverConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolverConstraint::m_angularComponentA",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_angularComponentA_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverConstraint_m_angularComponentA_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_angularComponentA = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_angularComponentA_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverConstraint::m_angularComponentA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_angularComponentA",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_angularComponentA_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (btVector3 *)& ((arg1)->m_angularComponentA);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_angularComponentB_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSolverConstraint::m_angularComponentB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_angularComponentB",1,"btSolverConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolverConstraint::m_angularComponentB",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_angularComponentB_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolverConstraint_m_angularComponentB_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_angularComponentB = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_angularComponentB_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSolverConstraint::m_angularComponentB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_angularComponentB",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_angularComponentB_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (btVector3 *)& ((arg1)->m_angularComponentB);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_appliedPushImpulse_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSolverConstraint::m_appliedPushImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_appliedPushImpulse",1,"btSolverConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSolverConstraint::m_appliedPushImpulse",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_appliedPushImpulse_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_appliedPushImpulse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_appliedPushImpulse_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSolverConstraint::m_appliedPushImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_appliedPushImpulse",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_appliedPushImpulse_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (btScalar) ((arg1)->m_appliedPushImpulse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_appliedImpulse_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSolverConstraint::m_appliedImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_appliedImpulse",1,"btSolverConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSolverConstraint::m_appliedImpulse",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_appliedImpulse_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_appliedImpulse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_appliedImpulse_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSolverConstraint::m_appliedImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_appliedImpulse",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_appliedImpulse_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (btScalar) ((arg1)->m_appliedImpulse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_friction_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSolverConstraint::m_friction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_friction",1,"btSolverConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSolverConstraint::m_friction",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_friction_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_friction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_friction_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSolverConstraint::m_friction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_friction",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_friction_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (btScalar) ((arg1)->m_friction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_jacDiagABInv_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSolverConstraint::m_jacDiagABInv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_jacDiagABInv",1,"btSolverConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSolverConstraint::m_jacDiagABInv",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_jacDiagABInv_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_jacDiagABInv = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_jacDiagABInv_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSolverConstraint::m_jacDiagABInv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_jacDiagABInv",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_jacDiagABInv_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (btScalar) ((arg1)->m_jacDiagABInv);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_rhs_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSolverConstraint::m_rhs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_rhs",1,"btSolverConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSolverConstraint::m_rhs",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_rhs_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_rhs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_rhs_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSolverConstraint::m_rhs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_rhs",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_rhs_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (btScalar) ((arg1)->m_rhs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_cfm_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSolverConstraint::m_cfm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_cfm",1,"btSolverConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSolverConstraint::m_cfm",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_cfm_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_cfm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_cfm_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSolverConstraint::m_cfm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_cfm",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_cfm_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (btScalar) ((arg1)->m_cfm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_lowerLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSolverConstraint::m_lowerLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_lowerLimit",1,"btSolverConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSolverConstraint::m_lowerLimit",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_lowerLimit_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_lowerLimit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_lowerLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSolverConstraint::m_lowerLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_lowerLimit",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_lowerLimit_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (btScalar) ((arg1)->m_lowerLimit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_upperLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSolverConstraint::m_upperLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_upperLimit",1,"btSolverConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSolverConstraint::m_upperLimit",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_upperLimit_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_upperLimit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_upperLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSolverConstraint::m_upperLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_upperLimit",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_upperLimit_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (btScalar) ((arg1)->m_upperLimit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_rhsPenetration_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSolverConstraint::m_rhsPenetration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_rhsPenetration",1,"btSolverConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSolverConstraint::m_rhsPenetration",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_rhsPenetration_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_rhsPenetration = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_rhsPenetration_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSolverConstraint::m_rhsPenetration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_rhsPenetration",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_rhsPenetration_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (btScalar) ((arg1)->m_rhsPenetration);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_overrideNumSolverIterations_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btSolverConstraint::m_overrideNumSolverIterations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_overrideNumSolverIterations",1,"btSolverConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSolverConstraint::m_overrideNumSolverIterations",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_overrideNumSolverIterations_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_overrideNumSolverIterations = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_overrideNumSolverIterations_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int result;
  
  SWIG_check_num_args("btSolverConstraint::m_overrideNumSolverIterations",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_overrideNumSolverIterations",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_overrideNumSolverIterations_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (int) ((arg1)->m_overrideNumSolverIterations);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_frictionIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btSolverConstraint::m_frictionIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_frictionIndex",1,"btSolverConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSolverConstraint::m_frictionIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_frictionIndex_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_frictionIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_frictionIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int result;
  
  SWIG_check_num_args("btSolverConstraint::m_frictionIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_frictionIndex",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_frictionIndex_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (int) ((arg1)->m_frictionIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_solverBodyIdA_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btSolverConstraint::m_solverBodyIdA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_solverBodyIdA",1,"btSolverConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSolverConstraint::m_solverBodyIdA",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_solverBodyIdA_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_solverBodyIdA = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_solverBodyIdA_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int result;
  
  SWIG_check_num_args("btSolverConstraint::m_solverBodyIdA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_solverBodyIdA",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_solverBodyIdA_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (int) ((arg1)->m_solverBodyIdA);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_solverBodyIdB_set(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btSolverConstraint::m_solverBodyIdB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_solverBodyIdB",1,"btSolverConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSolverConstraint::m_solverBodyIdB",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_solverBodyIdB_set",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_solverBodyIdB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolverConstraint_m_solverBodyIdB_get(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int result;
  
  SWIG_check_num_args("btSolverConstraint::m_solverBodyIdB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolverConstraint::m_solverBodyIdB",1,"btSolverConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolverConstraint,0))){
    SWIG_fail_ptr("btSolverConstraint_m_solverBodyIdB_get",1,SWIGTYPE_p_btSolverConstraint);
  }
  
  result = (int) ((arg1)->m_solverBodyIdB);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btSolverConstraint(lua_State* L) {
  int SWIG_arg = 0;
  btSolverConstraint *result = 0 ;
  
  SWIG_check_num_args("btSolverConstraint::btSolverConstraint",0,0)
  result = (btSolverConstraint *)new btSolverConstraint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSolverConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSolverConstraint(void *obj) {
btSolverConstraint *arg1 = (btSolverConstraint *) obj;
delete arg1;
}
static swig_lua_method swig_btSolverConstraint_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btSolverConstraint_attributes[] = {
    { "m_relpos1CrossNormal", _wrap_btSolverConstraint_m_relpos1CrossNormal_get, _wrap_btSolverConstraint_m_relpos1CrossNormal_set},
    { "m_contactNormal", _wrap_btSolverConstraint_m_contactNormal_get, _wrap_btSolverConstraint_m_contactNormal_set},
    { "m_relpos2CrossNormal", _wrap_btSolverConstraint_m_relpos2CrossNormal_get, _wrap_btSolverConstraint_m_relpos2CrossNormal_set},
    { "m_angularComponentA", _wrap_btSolverConstraint_m_angularComponentA_get, _wrap_btSolverConstraint_m_angularComponentA_set},
    { "m_angularComponentB", _wrap_btSolverConstraint_m_angularComponentB_get, _wrap_btSolverConstraint_m_angularComponentB_set},
    { "m_appliedPushImpulse", _wrap_btSolverConstraint_m_appliedPushImpulse_get, _wrap_btSolverConstraint_m_appliedPushImpulse_set},
    { "m_appliedImpulse", _wrap_btSolverConstraint_m_appliedImpulse_get, _wrap_btSolverConstraint_m_appliedImpulse_set},
    { "m_friction", _wrap_btSolverConstraint_m_friction_get, _wrap_btSolverConstraint_m_friction_set},
    { "m_jacDiagABInv", _wrap_btSolverConstraint_m_jacDiagABInv_get, _wrap_btSolverConstraint_m_jacDiagABInv_set},
    { "m_rhs", _wrap_btSolverConstraint_m_rhs_get, _wrap_btSolverConstraint_m_rhs_set},
    { "m_cfm", _wrap_btSolverConstraint_m_cfm_get, _wrap_btSolverConstraint_m_cfm_set},
    { "m_lowerLimit", _wrap_btSolverConstraint_m_lowerLimit_get, _wrap_btSolverConstraint_m_lowerLimit_set},
    { "m_upperLimit", _wrap_btSolverConstraint_m_upperLimit_get, _wrap_btSolverConstraint_m_upperLimit_set},
    { "m_rhsPenetration", _wrap_btSolverConstraint_m_rhsPenetration_get, _wrap_btSolverConstraint_m_rhsPenetration_set},
    { "m_overrideNumSolverIterations", _wrap_btSolverConstraint_m_overrideNumSolverIterations_get, _wrap_btSolverConstraint_m_overrideNumSolverIterations_set},
    { "m_frictionIndex", _wrap_btSolverConstraint_m_frictionIndex_get, _wrap_btSolverConstraint_m_frictionIndex_set},
    { "m_solverBodyIdA", _wrap_btSolverConstraint_m_solverBodyIdA_get, _wrap_btSolverConstraint_m_solverBodyIdA_set},
    { "m_solverBodyIdB", _wrap_btSolverConstraint_m_solverBodyIdB_get, _wrap_btSolverConstraint_m_solverBodyIdB_set},
    {0,0,0}
};
static swig_lua_attribute swig_btSolverConstraint_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSolverConstraint_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btSolverConstraint_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("BT_SOLVER_CONTACT_1D", btSolverConstraint::BT_SOLVER_CONTACT_1D)},
    {SWIG_LUA_CONSTTAB_INT("BT_SOLVER_FRICTION_1D", btSolverConstraint::BT_SOLVER_FRICTION_1D)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSolverConstraint_bases[] = {0};
static const char *swig_btSolverConstraint_base_names[] = {0};
static swig_lua_class _wrap_class_btSolverConstraint = { "btSolverConstraint", &SWIGTYPE_p_btSolverConstraint,_wrap_new_btSolverConstraint, swig_delete_btSolverConstraint, swig_btSolverConstraint_methods, swig_btSolverConstraint_attributes, { "btSolverConstraint", swig_btSolverConstraint_cls_methods, swig_btSolverConstraint_cls_attributes, swig_btSolverConstraint_cls_constants }, swig_btSolverConstraint_bases, swig_btSolverConstraint_base_names };

static int _wrap_gDeactivationTime_set(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  
  SWIG_check_num_args("gDeactivationTime",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gDeactivationTime",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  gDeactivationTime = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gDeactivationTime_get(lua_State* L) {
  int SWIG_arg = 0;
  btScalar result;
  
  SWIG_check_num_args("gDeactivationTime",0,0)
  result = (btScalar)gDeactivationTime;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gDisableDeactivation_set(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("gDisableDeactivation",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("gDisableDeactivation",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  gDisableDeactivation = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gDisableDeactivation_get(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("gDisableDeactivation",0,0)
  result = (bool)gDisableDeactivation;
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btRigidBody__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::btRigidBody",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btRigidBody::btRigidBody",1,"btRigidBody::btRigidBodyConstructionInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody__btRigidBodyConstructionInfo,0))){
    SWIG_fail_ptr("new_btRigidBody",1,SWIGTYPE_p_btRigidBody__btRigidBodyConstructionInfo);
  }
  
  result = (btRigidBody *)new btRigidBody((btRigidBody::btRigidBodyConstructionInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btRigidBody__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btVector3 *arg4 = 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::btRigidBody",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btRigidBody::btRigidBody",1,"btScalar");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBody::btRigidBody",2,"btMotionState *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btRigidBody::btRigidBody",3,"btCollisionShape *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btRigidBody::btRigidBody",4,"btVector3 const &");
  arg1 = (btScalar)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMotionState,0))){
    SWIG_fail_ptr("new_btRigidBody",2,SWIGTYPE_p_btMotionState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("new_btRigidBody",3,SWIGTYPE_p_btCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btRigidBody",4,SWIGTYPE_p_btVector3);
  }
  
  result = (btRigidBody *)new btRigidBody(arg1,arg2,arg3,(btVector3 const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btRigidBody__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::btRigidBody",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btRigidBody::btRigidBody",1,"btScalar");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBody::btRigidBody",2,"btMotionState *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btRigidBody::btRigidBody",3,"btCollisionShape *");
  arg1 = (btScalar)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMotionState,0))){
    SWIG_fail_ptr("new_btRigidBody",2,SWIGTYPE_p_btMotionState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("new_btRigidBody",3,SWIGTYPE_p_btCollisionShape);
  }
  
  result = (btRigidBody *)new btRigidBody(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btRigidBody(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody__btRigidBodyConstructionInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_btRigidBody__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btMotionState, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btCollisionShape, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_btRigidBody__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btMotionState, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btCollisionShape, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_btRigidBody__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btRigidBody'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btRigidBody::btRigidBody(btRigidBody::btRigidBodyConstructionInfo const &)\n"
    "    btRigidBody::btRigidBody(btScalar,btMotionState *,btCollisionShape *,btVector3 const &)\n"
    "    btRigidBody::btRigidBody(btScalar,btMotionState *,btCollisionShape *)\n");
  lua_error(L);return 0;
}


static int _wrap_btRigidBody_proceedToTransform(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("btRigidBody::proceedToTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::proceedToTransform",1,"btRigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::proceedToTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_proceedToTransform",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btRigidBody_proceedToTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->proceedToTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_upcast__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::upcast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::upcast",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btRigidBody_upcast",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btRigidBody *)btRigidBody::upcast((btCollisionObject const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_upcast__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::upcast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::upcast",1,"btCollisionObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btRigidBody_upcast",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btRigidBody *)btRigidBody::upcast(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_upcast(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btRigidBody_upcast__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btRigidBody_upcast__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btRigidBody_upcast'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btRigidBody::upcast(btCollisionObject const *)\n"
    "    btRigidBody::upcast(btCollisionObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_btRigidBody_predictIntegratedTransform(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btTransform *arg3 = 0 ;
  
  SWIG_check_num_args("btRigidBody::predictIntegratedTransform",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::predictIntegratedTransform",1,"btRigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBody::predictIntegratedTransform",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btRigidBody::predictIntegratedTransform",3,"btTransform &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_predictIntegratedTransform",1,SWIGTYPE_p_btRigidBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btRigidBody_predictIntegratedTransform",3,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->predictIntegratedTransform(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_saveKinematicState(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRigidBody::saveKinematicState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::saveKinematicState",1,"btRigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBody::saveKinematicState",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_saveKinematicState",1,SWIGTYPE_p_btRigidBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->saveKinematicState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_applyGravity(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  SWIG_check_num_args("btRigidBody::applyGravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::applyGravity",1,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_applyGravity",1,SWIGTYPE_p_btRigidBody);
  }
  
  (arg1)->applyGravity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_setGravity(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btRigidBody::setGravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::setGravity",1,"btRigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::setGravity",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_setGravity",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_setGravity",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setGravity((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getGravity(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getGravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getGravity",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getGravity",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getGravity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_setDamping(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btRigidBody::setDamping",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::setDamping",1,"btRigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBody::setDamping",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btRigidBody::setDamping",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_setDamping",1,SWIGTYPE_p_btRigidBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->setDamping(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getLinearDamping(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRigidBody::getLinearDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getLinearDamping",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getLinearDamping",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btScalar)((btRigidBody const *)arg1)->getLinearDamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getAngularDamping(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRigidBody::getAngularDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getAngularDamping",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getAngularDamping",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btScalar)((btRigidBody const *)arg1)->getAngularDamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getLinearSleepingThreshold(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRigidBody::getLinearSleepingThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getLinearSleepingThreshold",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getLinearSleepingThreshold",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btScalar)((btRigidBody const *)arg1)->getLinearSleepingThreshold();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getAngularSleepingThreshold(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRigidBody::getAngularSleepingThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getAngularSleepingThreshold",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getAngularSleepingThreshold",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btScalar)((btRigidBody const *)arg1)->getAngularSleepingThreshold();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_applyDamping(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRigidBody::applyDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::applyDamping",1,"btRigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBody::applyDamping",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_applyDamping",1,SWIGTYPE_p_btRigidBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->applyDamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getCollisionShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btCollisionShape *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getCollisionShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getCollisionShape",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getCollisionShape",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btCollisionShape *)((btRigidBody const *)arg1)->getCollisionShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getCollisionShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btCollisionShape *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getCollisionShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getCollisionShape",1,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getCollisionShape",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btCollisionShape *)(arg1)->getCollisionShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getCollisionShape(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btRigidBody_getCollisionShape__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btRigidBody_getCollisionShape__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btRigidBody_getCollisionShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btRigidBody::getCollisionShape() const\n"
    "    btRigidBody::getCollisionShape()\n");
  lua_error(L);return 0;
}


static int _wrap_btRigidBody_setMassProps(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btRigidBody::setMassProps",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::setMassProps",1,"btRigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBody::setMassProps",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btRigidBody::setMassProps",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_setMassProps",1,SWIGTYPE_p_btRigidBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_setMassProps",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setMassProps(arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getLinearFactor(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getLinearFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getLinearFactor",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getLinearFactor",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getLinearFactor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_setLinearFactor(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btRigidBody::setLinearFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::setLinearFactor",1,"btRigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::setLinearFactor",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_setLinearFactor",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_setLinearFactor",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLinearFactor((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getInvMass(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRigidBody::getInvMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getInvMass",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getInvMass",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btScalar)((btRigidBody const *)arg1)->getInvMass();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getInvInertiaTensorWorld(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btMatrix3x3 *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getInvInertiaTensorWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getInvInertiaTensorWorld",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getInvInertiaTensorWorld",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btMatrix3x3 *) &((btRigidBody const *)arg1)->getInvInertiaTensorWorld();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMatrix3x3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_integrateVelocities(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRigidBody::integrateVelocities",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::integrateVelocities",1,"btRigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBody::integrateVelocities",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_integrateVelocities",1,SWIGTYPE_p_btRigidBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->integrateVelocities(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_setCenterOfMassTransform(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("btRigidBody::setCenterOfMassTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::setCenterOfMassTransform",1,"btRigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::setCenterOfMassTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_setCenterOfMassTransform",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btRigidBody_setCenterOfMassTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setCenterOfMassTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_applyCentralForce(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btRigidBody::applyCentralForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::applyCentralForce",1,"btRigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::applyCentralForce",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_applyCentralForce",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_applyCentralForce",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->applyCentralForce((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getTotalForce(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getTotalForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getTotalForce",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getTotalForce",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getTotalForce();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getTotalTorque(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getTotalTorque",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getTotalTorque",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getTotalTorque",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getTotalTorque();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getInvInertiaDiagLocal(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getInvInertiaDiagLocal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getInvInertiaDiagLocal",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getInvInertiaDiagLocal",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getInvInertiaDiagLocal();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_setInvInertiaDiagLocal(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btRigidBody::setInvInertiaDiagLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::setInvInertiaDiagLocal",1,"btRigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::setInvInertiaDiagLocal",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_setInvInertiaDiagLocal",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_setInvInertiaDiagLocal",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setInvInertiaDiagLocal((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_setSleepingThresholds(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btRigidBody::setSleepingThresholds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::setSleepingThresholds",1,"btRigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBody::setSleepingThresholds",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btRigidBody::setSleepingThresholds",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_setSleepingThresholds",1,SWIGTYPE_p_btRigidBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->setSleepingThresholds(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_applyTorque(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btRigidBody::applyTorque",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::applyTorque",1,"btRigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::applyTorque",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_applyTorque",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_applyTorque",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->applyTorque((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_applyForce(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btRigidBody::applyForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::applyForce",1,"btRigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::applyForce",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btRigidBody::applyForce",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_applyForce",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_applyForce",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_applyForce",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->applyForce((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_applyCentralImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btRigidBody::applyCentralImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::applyCentralImpulse",1,"btRigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::applyCentralImpulse",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_applyCentralImpulse",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_applyCentralImpulse",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->applyCentralImpulse((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_applyTorqueImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btRigidBody::applyTorqueImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::applyTorqueImpulse",1,"btRigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::applyTorqueImpulse",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_applyTorqueImpulse",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_applyTorqueImpulse",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->applyTorqueImpulse((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_applyImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btRigidBody::applyImpulse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::applyImpulse",1,"btRigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::applyImpulse",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btRigidBody::applyImpulse",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_applyImpulse",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_applyImpulse",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_applyImpulse",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->applyImpulse((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_clearForces(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  SWIG_check_num_args("btRigidBody::clearForces",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::clearForces",1,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_clearForces",1,SWIGTYPE_p_btRigidBody);
  }
  
  (arg1)->clearForces();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_updateInertiaTensor(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  SWIG_check_num_args("btRigidBody::updateInertiaTensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::updateInertiaTensor",1,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_updateInertiaTensor",1,SWIGTYPE_p_btRigidBody);
  }
  
  (arg1)->updateInertiaTensor();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getCenterOfMassPosition(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getCenterOfMassPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getCenterOfMassPosition",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getCenterOfMassPosition",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getCenterOfMassPosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getOrientation(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("btRigidBody::getOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getOrientation",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getOrientation",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = ((btRigidBody const *)arg1)->getOrientation();
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getCenterOfMassTransform(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getCenterOfMassTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getCenterOfMassTransform",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getCenterOfMassTransform",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btTransform *) &((btRigidBody const *)arg1)->getCenterOfMassTransform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getLinearVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getLinearVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getLinearVelocity",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getLinearVelocity",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getLinearVelocity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getAngularVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getAngularVelocity",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getAngularVelocity",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getAngularVelocity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_setLinearVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btRigidBody::setLinearVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::setLinearVelocity",1,"btRigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::setLinearVelocity",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_setLinearVelocity",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_setLinearVelocity",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLinearVelocity((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_setAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btRigidBody::setAngularVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::setAngularVelocity",1,"btRigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::setAngularVelocity",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_setAngularVelocity",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_setAngularVelocity",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setAngularVelocity((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getVelocityInLocalPoint(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btRigidBody::getVelocityInLocalPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getVelocityInLocalPoint",1,"btRigidBody const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::getVelocityInLocalPoint",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getVelocityInLocalPoint",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_getVelocityInLocalPoint",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((btRigidBody const *)arg1)->getVelocityInLocalPoint((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_translate(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btRigidBody::translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::translate",1,"btRigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::translate",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_translate",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_translate",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->translate((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btRigidBody::getAabb",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getAabb",1,"btRigidBody const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::getAabb",2,"btVector3 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btRigidBody::getAabb",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getAabb",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_getAabb",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  ((btRigidBody const *)arg1)->getAabb(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_computeImpulseDenominator(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRigidBody::computeImpulseDenominator",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::computeImpulseDenominator",1,"btRigidBody const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::computeImpulseDenominator",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btRigidBody::computeImpulseDenominator",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_computeImpulseDenominator",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_computeImpulseDenominator",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_computeImpulseDenominator",3,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)((btRigidBody const *)arg1)->computeImpulseDenominator((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_computeAngularImpulseDenominator(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRigidBody::computeAngularImpulseDenominator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::computeAngularImpulseDenominator",1,"btRigidBody const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::computeAngularImpulseDenominator",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_computeAngularImpulseDenominator",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_computeAngularImpulseDenominator",2,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)((btRigidBody const *)arg1)->computeAngularImpulseDenominator((btVector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_updateDeactivation(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRigidBody::updateDeactivation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::updateDeactivation",1,"btRigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBody::updateDeactivation",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_updateDeactivation",1,SWIGTYPE_p_btRigidBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->updateDeactivation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_wantsSleeping(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool result;
  
  SWIG_check_num_args("btRigidBody::wantsSleeping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::wantsSleeping",1,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_wantsSleeping",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (bool)(arg1)->wantsSleeping();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getBroadphaseProxy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getBroadphaseProxy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getBroadphaseProxy",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getBroadphaseProxy",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btBroadphaseProxy *)((btRigidBody const *)arg1)->getBroadphaseProxy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphaseProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getBroadphaseProxy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getBroadphaseProxy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getBroadphaseProxy",1,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getBroadphaseProxy",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btBroadphaseProxy *)(arg1)->getBroadphaseProxy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphaseProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getBroadphaseProxy(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btRigidBody_getBroadphaseProxy__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btRigidBody_getBroadphaseProxy__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btRigidBody_getBroadphaseProxy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btRigidBody::getBroadphaseProxy() const\n"
    "    btRigidBody::getBroadphaseProxy()\n");
  lua_error(L);return 0;
}


static int _wrap_btRigidBody_setNewBroadphaseProxy(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  SWIG_check_num_args("btRigidBody::setNewBroadphaseProxy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::setNewBroadphaseProxy",1,"btRigidBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBody::setNewBroadphaseProxy",2,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_setNewBroadphaseProxy",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btRigidBody_setNewBroadphaseProxy",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  (arg1)->setNewBroadphaseProxy(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getMotionState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btMotionState *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getMotionState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getMotionState",1,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getMotionState",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btMotionState *)(arg1)->getMotionState();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMotionState,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getMotionState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btMotionState *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getMotionState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getMotionState",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getMotionState",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btMotionState *)((btRigidBody const *)arg1)->getMotionState();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMotionState,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getMotionState(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btRigidBody_getMotionState__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btRigidBody_getMotionState__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btRigidBody_getMotionState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btRigidBody::getMotionState()\n"
    "    btRigidBody::getMotionState() const\n");
  lua_error(L);return 0;
}


static int _wrap_btRigidBody_setMotionState(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  
  SWIG_check_num_args("btRigidBody::setMotionState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::setMotionState",1,"btRigidBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBody::setMotionState",2,"btMotionState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_setMotionState",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMotionState,0))){
    SWIG_fail_ptr("btRigidBody_setMotionState",2,SWIGTYPE_p_btMotionState);
  }
  
  (arg1)->setMotionState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_m_contactSolverType_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btRigidBody::m_contactSolverType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::m_contactSolverType",1,"btRigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBody::m_contactSolverType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_m_contactSolverType_set",1,SWIGTYPE_p_btRigidBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_contactSolverType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_m_contactSolverType_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  SWIG_check_num_args("btRigidBody::m_contactSolverType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::m_contactSolverType",1,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_m_contactSolverType_get",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (int) ((arg1)->m_contactSolverType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_m_frictionSolverType_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btRigidBody::m_frictionSolverType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::m_frictionSolverType",1,"btRigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBody::m_frictionSolverType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_m_frictionSolverType_set",1,SWIGTYPE_p_btRigidBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_frictionSolverType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_m_frictionSolverType_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  SWIG_check_num_args("btRigidBody::m_frictionSolverType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::m_frictionSolverType",1,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_m_frictionSolverType_get",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (int) ((arg1)->m_frictionSolverType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_setAngularFactor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btRigidBody::setAngularFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::setAngularFactor",1,"btRigidBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRigidBody::setAngularFactor",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_setAngularFactor",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBody_setAngularFactor",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setAngularFactor((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_setAngularFactor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRigidBody::setAngularFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::setAngularFactor",1,"btRigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBody::setAngularFactor",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_setAngularFactor",1,SWIGTYPE_p_btRigidBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setAngularFactor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_setAngularFactor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btRigidBody_setAngularFactor__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btRigidBody_setAngularFactor__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btRigidBody_setAngularFactor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btRigidBody::setAngularFactor(btVector3 const &)\n"
    "    btRigidBody::setAngularFactor(btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btRigidBody_getAngularFactor(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getAngularFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getAngularFactor",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getAngularFactor",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btVector3 *) &((btRigidBody const *)arg1)->getAngularFactor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_isInWorld(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool result;
  
  SWIG_check_num_args("btRigidBody::isInWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::isInWorld",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_isInWorld",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (bool)((btRigidBody const *)arg1)->isInWorld();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_checkCollideWithOverride(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("btRigidBody::checkCollideWithOverride",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::checkCollideWithOverride",1,"btRigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBody::checkCollideWithOverride",2,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_checkCollideWithOverride",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btRigidBody_checkCollideWithOverride",2,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (bool)((btRigidBody const *)arg1)->checkCollideWithOverride((btCollisionObject const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_addConstraintRef(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  SWIG_check_num_args("btRigidBody::addConstraintRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::addConstraintRef",1,"btRigidBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBody::addConstraintRef",2,"btTypedConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_addConstraintRef",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btRigidBody_addConstraintRef",2,SWIGTYPE_p_btTypedConstraint);
  }
  
  (arg1)->addConstraintRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_removeConstraintRef(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  SWIG_check_num_args("btRigidBody::removeConstraintRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::removeConstraintRef",1,"btRigidBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBody::removeConstraintRef",2,"btTypedConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_removeConstraintRef",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btRigidBody_removeConstraintRef",2,SWIGTYPE_p_btTypedConstraint);
  }
  
  (arg1)->removeConstraintRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getConstraintRef(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::getConstraintRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getConstraintRef",1,"btRigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBody::getConstraintRef",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getConstraintRef",1,SWIGTYPE_p_btRigidBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btTypedConstraint *)(arg1)->getConstraintRef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getNumConstraintRefs(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  SWIG_check_num_args("btRigidBody::getNumConstraintRefs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getNumConstraintRefs",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getNumConstraintRefs",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (int)((btRigidBody const *)arg1)->getNumConstraintRefs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_setFlags(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btRigidBody::setFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::setFlags",1,"btRigidBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBody::setFlags",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_setFlags",1,SWIGTYPE_p_btRigidBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setFlags(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_getFlags(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  SWIG_check_num_args("btRigidBody::getFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::getFlags",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_getFlags",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (int)((btRigidBody const *)arg1)->getFlags();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_computeGyroscopicForce(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btVector3 result;
  
  SWIG_check_num_args("btRigidBody::computeGyroscopicForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::computeGyroscopicForce",1,"btRigidBody const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBody::computeGyroscopicForce",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_computeGyroscopicForce",1,SWIGTYPE_p_btRigidBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = ((btRigidBody const *)arg1)->computeGyroscopicForce(arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  SWIG_check_num_args("btRigidBody::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::calculateSerializeBufferSize",1,"btRigidBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_calculateSerializeBufferSize",1,SWIGTYPE_p_btRigidBody);
  }
  
  result = (int)((btRigidBody const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btRigidBody::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::serialize",1,"btRigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBody::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btRigidBody::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_serialize",1,SWIGTYPE_p_btRigidBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btRigidBody_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btRigidBody_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  result = (char *)((btRigidBody const *)arg1)->serialize(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBody_serializeSingleObject(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("btRigidBody::serializeSingleObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBody::serializeSingleObject",1,"btRigidBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBody::serializeSingleObject",2,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRigidBody_serializeSingleObject",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btRigidBody_serializeSingleObject",2,SWIGTYPE_p_btSerializer);
  }
  
  ((btRigidBody const *)arg1)->serializeSingleObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btRigidBody(void *obj) {
btRigidBody *arg1 = (btRigidBody *) obj;
delete arg1;
}
static swig_lua_method swig_btRigidBody_methods[] = {
    {"proceedToTransform", _wrap_btRigidBody_proceedToTransform}, 
    {"predictIntegratedTransform", _wrap_btRigidBody_predictIntegratedTransform}, 
    {"saveKinematicState", _wrap_btRigidBody_saveKinematicState}, 
    {"applyGravity", _wrap_btRigidBody_applyGravity}, 
    {"setGravity", _wrap_btRigidBody_setGravity}, 
    {"getGravity", _wrap_btRigidBody_getGravity}, 
    {"setDamping", _wrap_btRigidBody_setDamping}, 
    {"getLinearDamping", _wrap_btRigidBody_getLinearDamping}, 
    {"getAngularDamping", _wrap_btRigidBody_getAngularDamping}, 
    {"getLinearSleepingThreshold", _wrap_btRigidBody_getLinearSleepingThreshold}, 
    {"getAngularSleepingThreshold", _wrap_btRigidBody_getAngularSleepingThreshold}, 
    {"applyDamping", _wrap_btRigidBody_applyDamping}, 
    {"getCollisionShape", _wrap_btRigidBody_getCollisionShape}, 
    {"setMassProps", _wrap_btRigidBody_setMassProps}, 
    {"getLinearFactor", _wrap_btRigidBody_getLinearFactor}, 
    {"setLinearFactor", _wrap_btRigidBody_setLinearFactor}, 
    {"getInvMass", _wrap_btRigidBody_getInvMass}, 
    {"getInvInertiaTensorWorld", _wrap_btRigidBody_getInvInertiaTensorWorld}, 
    {"integrateVelocities", _wrap_btRigidBody_integrateVelocities}, 
    {"setCenterOfMassTransform", _wrap_btRigidBody_setCenterOfMassTransform}, 
    {"applyCentralForce", _wrap_btRigidBody_applyCentralForce}, 
    {"getTotalForce", _wrap_btRigidBody_getTotalForce}, 
    {"getTotalTorque", _wrap_btRigidBody_getTotalTorque}, 
    {"getInvInertiaDiagLocal", _wrap_btRigidBody_getInvInertiaDiagLocal}, 
    {"setInvInertiaDiagLocal", _wrap_btRigidBody_setInvInertiaDiagLocal}, 
    {"setSleepingThresholds", _wrap_btRigidBody_setSleepingThresholds}, 
    {"applyTorque", _wrap_btRigidBody_applyTorque}, 
    {"applyForce", _wrap_btRigidBody_applyForce}, 
    {"applyCentralImpulse", _wrap_btRigidBody_applyCentralImpulse}, 
    {"applyTorqueImpulse", _wrap_btRigidBody_applyTorqueImpulse}, 
    {"applyImpulse", _wrap_btRigidBody_applyImpulse}, 
    {"clearForces", _wrap_btRigidBody_clearForces}, 
    {"updateInertiaTensor", _wrap_btRigidBody_updateInertiaTensor}, 
    {"getCenterOfMassPosition", _wrap_btRigidBody_getCenterOfMassPosition}, 
    {"getOrientation", _wrap_btRigidBody_getOrientation}, 
    {"getCenterOfMassTransform", _wrap_btRigidBody_getCenterOfMassTransform}, 
    {"getLinearVelocity", _wrap_btRigidBody_getLinearVelocity}, 
    {"getAngularVelocity", _wrap_btRigidBody_getAngularVelocity}, 
    {"setLinearVelocity", _wrap_btRigidBody_setLinearVelocity}, 
    {"setAngularVelocity", _wrap_btRigidBody_setAngularVelocity}, 
    {"getVelocityInLocalPoint", _wrap_btRigidBody_getVelocityInLocalPoint}, 
    {"translate", _wrap_btRigidBody_translate}, 
    {"getAabb", _wrap_btRigidBody_getAabb}, 
    {"computeImpulseDenominator", _wrap_btRigidBody_computeImpulseDenominator}, 
    {"computeAngularImpulseDenominator", _wrap_btRigidBody_computeAngularImpulseDenominator}, 
    {"updateDeactivation", _wrap_btRigidBody_updateDeactivation}, 
    {"wantsSleeping", _wrap_btRigidBody_wantsSleeping}, 
    {"getBroadphaseProxy", _wrap_btRigidBody_getBroadphaseProxy}, 
    {"setNewBroadphaseProxy", _wrap_btRigidBody_setNewBroadphaseProxy}, 
    {"getMotionState", _wrap_btRigidBody_getMotionState}, 
    {"setMotionState", _wrap_btRigidBody_setMotionState}, 
    {"setAngularFactor", _wrap_btRigidBody_setAngularFactor}, 
    {"getAngularFactor", _wrap_btRigidBody_getAngularFactor}, 
    {"isInWorld", _wrap_btRigidBody_isInWorld}, 
    {"checkCollideWithOverride", _wrap_btRigidBody_checkCollideWithOverride}, 
    {"addConstraintRef", _wrap_btRigidBody_addConstraintRef}, 
    {"removeConstraintRef", _wrap_btRigidBody_removeConstraintRef}, 
    {"getConstraintRef", _wrap_btRigidBody_getConstraintRef}, 
    {"getNumConstraintRefs", _wrap_btRigidBody_getNumConstraintRefs}, 
    {"setFlags", _wrap_btRigidBody_setFlags}, 
    {"getFlags", _wrap_btRigidBody_getFlags}, 
    {"computeGyroscopicForce", _wrap_btRigidBody_computeGyroscopicForce}, 
    {"calculateSerializeBufferSize", _wrap_btRigidBody_calculateSerializeBufferSize}, 
    {"serialize", _wrap_btRigidBody_serialize}, 
    {"serializeSingleObject", _wrap_btRigidBody_serializeSingleObject}, 
    {0,0}
};
static swig_lua_attribute swig_btRigidBody_attributes[] = {
    { "m_contactSolverType", _wrap_btRigidBody_m_contactSolverType_get, _wrap_btRigidBody_m_contactSolverType_set},
    { "m_frictionSolverType", _wrap_btRigidBody_m_frictionSolverType_get, _wrap_btRigidBody_m_frictionSolverType_set},
    {0,0,0}
};
static swig_lua_attribute swig_btRigidBody_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btRigidBody_cls_methods[] = {
    {"upcast", _wrap_btRigidBody_upcast}, 
    {0,0}
};
static swig_lua_const_info swig_btRigidBody_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btRigidBody_bases[] = {0,0};
static const char *swig_btRigidBody_base_names[] = {"btCollisionObject *",0};
static swig_lua_class _wrap_class_btRigidBody = { "btRigidBody", &SWIGTYPE_p_btRigidBody,_wrap_new_btRigidBody, swig_delete_btRigidBody, swig_btRigidBody_methods, swig_btRigidBody_attributes, { "btRigidBody", swig_btRigidBody_cls_methods, swig_btRigidBody_cls_attributes, swig_btRigidBody_cls_constants }, swig_btRigidBody_bases, swig_btRigidBody_base_names };

static int _wrap_btRigidBodyFloatData_m_collisionObjectData_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btCollisionObjectFloatData *arg2 = (btCollisionObjectFloatData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_collisionObjectData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_collisionObjectData",1,"btRigidBodyFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_collisionObjectData",2,"btCollisionObjectFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_collisionObjectData_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_collisionObjectData_set",2,SWIGTYPE_p_btCollisionObjectFloatData);
  }
  
  if (arg1) (arg1)->m_collisionObjectData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_collisionObjectData_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btCollisionObjectFloatData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_collisionObjectData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_collisionObjectData",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_collisionObjectData_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (btCollisionObjectFloatData *)& ((arg1)->m_collisionObjectData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObjectFloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_invInertiaTensorWorld_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btMatrix3x3FloatData *arg2 = (btMatrix3x3FloatData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_invInertiaTensorWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_invInertiaTensorWorld",1,"btRigidBodyFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_invInertiaTensorWorld",2,"btMatrix3x3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_invInertiaTensorWorld_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMatrix3x3FloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_invInertiaTensorWorld_set",2,SWIGTYPE_p_btMatrix3x3FloatData);
  }
  
  if (arg1) (arg1)->m_invInertiaTensorWorld = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_invInertiaTensorWorld_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btMatrix3x3FloatData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_invInertiaTensorWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_invInertiaTensorWorld",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_invInertiaTensorWorld_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (btMatrix3x3FloatData *)& ((arg1)->m_invInertiaTensorWorld);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMatrix3x3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_linearVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_linearVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_linearVelocity",1,"btRigidBodyFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_linearVelocity",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_linearVelocity_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_linearVelocity_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_linearVelocity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_linearVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_linearVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_linearVelocity",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_linearVelocity_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_linearVelocity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_angularVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_angularVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_angularVelocity",1,"btRigidBodyFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_angularVelocity",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_angularVelocity_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_angularVelocity_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_angularVelocity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_angularVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_angularVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_angularVelocity",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_angularVelocity_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_angularVelocity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_angularFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_angularFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_angularFactor",1,"btRigidBodyFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_angularFactor",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_angularFactor_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_angularFactor_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_angularFactor = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_angularFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_angularFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_angularFactor",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_angularFactor_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_angularFactor);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_linearFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_linearFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_linearFactor",1,"btRigidBodyFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_linearFactor",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_linearFactor_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_linearFactor_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_linearFactor = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_linearFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_linearFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_linearFactor",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_linearFactor_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_linearFactor);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_gravity_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_gravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_gravity",1,"btRigidBodyFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_gravity",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_gravity_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_gravity_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_gravity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_gravity_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_gravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_gravity",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_gravity_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_gravity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_gravity_acceleration_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_gravity_acceleration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_gravity_acceleration",1,"btRigidBodyFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_gravity_acceleration",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_gravity_acceleration_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_gravity_acceleration_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_gravity_acceleration = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_gravity_acceleration_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_gravity_acceleration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_gravity_acceleration",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_gravity_acceleration_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_gravity_acceleration);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_invInertiaLocal_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_invInertiaLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_invInertiaLocal",1,"btRigidBodyFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_invInertiaLocal",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_invInertiaLocal_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_invInertiaLocal_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_invInertiaLocal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_invInertiaLocal_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_invInertiaLocal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_invInertiaLocal",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_invInertiaLocal_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_invInertiaLocal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_totalForce_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_totalForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_totalForce",1,"btRigidBodyFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_totalForce",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_totalForce_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_totalForce_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_totalForce = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_totalForce_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_totalForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_totalForce",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_totalForce_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_totalForce);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_totalTorque_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_totalTorque",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_totalTorque",1,"btRigidBodyFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_totalTorque",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_totalTorque_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_totalTorque_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_totalTorque = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_totalTorque_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_totalTorque",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_totalTorque",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_totalTorque_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_totalTorque);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_inverseMass_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_inverseMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_inverseMass",1,"btRigidBodyFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_inverseMass",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_inverseMass_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_inverseMass = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_inverseMass_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_inverseMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_inverseMass",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_inverseMass_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (float) ((arg1)->m_inverseMass);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_linearDamping_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_linearDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_linearDamping",1,"btRigidBodyFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_linearDamping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_linearDamping_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_linearDamping = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_linearDamping_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_linearDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_linearDamping",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_linearDamping_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (float) ((arg1)->m_linearDamping);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_angularDamping_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_angularDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_angularDamping",1,"btRigidBodyFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_angularDamping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_angularDamping_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_angularDamping = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_angularDamping_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_angularDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_angularDamping",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_angularDamping_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (float) ((arg1)->m_angularDamping);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_additionalDampingFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_additionalDampingFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_additionalDampingFactor",1,"btRigidBodyFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_additionalDampingFactor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_additionalDampingFactor_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_additionalDampingFactor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_additionalDampingFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_additionalDampingFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_additionalDampingFactor",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_additionalDampingFactor_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (float) ((arg1)->m_additionalDampingFactor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_additionalLinearDampingThresholdSqr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_additionalLinearDampingThresholdSqr",1,"btRigidBodyFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_additionalLinearDampingThresholdSqr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_additionalLinearDampingThresholdSqr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_additionalLinearDampingThresholdSqr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_additionalLinearDampingThresholdSqr",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (float) ((arg1)->m_additionalLinearDampingThresholdSqr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_additionalAngularDampingThresholdSqr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_additionalAngularDampingThresholdSqr",1,"btRigidBodyFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_additionalAngularDampingThresholdSqr",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_additionalAngularDampingThresholdSqr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_additionalAngularDampingThresholdSqr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_additionalAngularDampingThresholdSqr",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (float) ((arg1)->m_additionalAngularDampingThresholdSqr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_additionalAngularDampingFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_additionalAngularDampingFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_additionalAngularDampingFactor",1,"btRigidBodyFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_additionalAngularDampingFactor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_additionalAngularDampingFactor_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_additionalAngularDampingFactor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_additionalAngularDampingFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_additionalAngularDampingFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_additionalAngularDampingFactor",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_additionalAngularDampingFactor_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (float) ((arg1)->m_additionalAngularDampingFactor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_linearSleepingThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_linearSleepingThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_linearSleepingThreshold",1,"btRigidBodyFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_linearSleepingThreshold",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_linearSleepingThreshold_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_linearSleepingThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_linearSleepingThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_linearSleepingThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_linearSleepingThreshold",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_linearSleepingThreshold_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (float) ((arg1)->m_linearSleepingThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_angularSleepingThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_angularSleepingThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_angularSleepingThreshold",1,"btRigidBodyFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_angularSleepingThreshold",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_angularSleepingThreshold_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_angularSleepingThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_angularSleepingThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_angularSleepingThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_angularSleepingThreshold",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_angularSleepingThreshold_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (float) ((arg1)->m_angularSleepingThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_additionalDamping_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_additionalDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_additionalDamping",1,"btRigidBodyFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyFloatData::m_additionalDamping",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_additionalDamping_set",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_additionalDamping = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyFloatData_m_additionalDamping_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btRigidBodyFloatData::m_additionalDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyFloatData::m_additionalDamping",1,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyFloatData,0))){
    SWIG_fail_ptr("btRigidBodyFloatData_m_additionalDamping_get",1,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  result = (int) ((arg1)->m_additionalDamping);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btRigidBodyFloatData(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyFloatData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyFloatData::btRigidBodyFloatData",0,0)
  result = (btRigidBodyFloatData *)new btRigidBodyFloatData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBodyFloatData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btRigidBodyFloatData(void *obj) {
btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) obj;
delete arg1;
}
static swig_lua_method swig_btRigidBodyFloatData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btRigidBodyFloatData_attributes[] = {
    { "m_collisionObjectData", _wrap_btRigidBodyFloatData_m_collisionObjectData_get, _wrap_btRigidBodyFloatData_m_collisionObjectData_set},
    { "m_invInertiaTensorWorld", _wrap_btRigidBodyFloatData_m_invInertiaTensorWorld_get, _wrap_btRigidBodyFloatData_m_invInertiaTensorWorld_set},
    { "m_linearVelocity", _wrap_btRigidBodyFloatData_m_linearVelocity_get, _wrap_btRigidBodyFloatData_m_linearVelocity_set},
    { "m_angularVelocity", _wrap_btRigidBodyFloatData_m_angularVelocity_get, _wrap_btRigidBodyFloatData_m_angularVelocity_set},
    { "m_angularFactor", _wrap_btRigidBodyFloatData_m_angularFactor_get, _wrap_btRigidBodyFloatData_m_angularFactor_set},
    { "m_linearFactor", _wrap_btRigidBodyFloatData_m_linearFactor_get, _wrap_btRigidBodyFloatData_m_linearFactor_set},
    { "m_gravity", _wrap_btRigidBodyFloatData_m_gravity_get, _wrap_btRigidBodyFloatData_m_gravity_set},
    { "m_gravity_acceleration", _wrap_btRigidBodyFloatData_m_gravity_acceleration_get, _wrap_btRigidBodyFloatData_m_gravity_acceleration_set},
    { "m_invInertiaLocal", _wrap_btRigidBodyFloatData_m_invInertiaLocal_get, _wrap_btRigidBodyFloatData_m_invInertiaLocal_set},
    { "m_totalForce", _wrap_btRigidBodyFloatData_m_totalForce_get, _wrap_btRigidBodyFloatData_m_totalForce_set},
    { "m_totalTorque", _wrap_btRigidBodyFloatData_m_totalTorque_get, _wrap_btRigidBodyFloatData_m_totalTorque_set},
    { "m_inverseMass", _wrap_btRigidBodyFloatData_m_inverseMass_get, _wrap_btRigidBodyFloatData_m_inverseMass_set},
    { "m_linearDamping", _wrap_btRigidBodyFloatData_m_linearDamping_get, _wrap_btRigidBodyFloatData_m_linearDamping_set},
    { "m_angularDamping", _wrap_btRigidBodyFloatData_m_angularDamping_get, _wrap_btRigidBodyFloatData_m_angularDamping_set},
    { "m_additionalDampingFactor", _wrap_btRigidBodyFloatData_m_additionalDampingFactor_get, _wrap_btRigidBodyFloatData_m_additionalDampingFactor_set},
    { "m_additionalLinearDampingThresholdSqr", _wrap_btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_get, _wrap_btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_set},
    { "m_additionalAngularDampingThresholdSqr", _wrap_btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_get, _wrap_btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_set},
    { "m_additionalAngularDampingFactor", _wrap_btRigidBodyFloatData_m_additionalAngularDampingFactor_get, _wrap_btRigidBodyFloatData_m_additionalAngularDampingFactor_set},
    { "m_linearSleepingThreshold", _wrap_btRigidBodyFloatData_m_linearSleepingThreshold_get, _wrap_btRigidBodyFloatData_m_linearSleepingThreshold_set},
    { "m_angularSleepingThreshold", _wrap_btRigidBodyFloatData_m_angularSleepingThreshold_get, _wrap_btRigidBodyFloatData_m_angularSleepingThreshold_set},
    { "m_additionalDamping", _wrap_btRigidBodyFloatData_m_additionalDamping_get, _wrap_btRigidBodyFloatData_m_additionalDamping_set},
    {0,0,0}
};
static swig_lua_attribute swig_btRigidBodyFloatData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btRigidBodyFloatData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btRigidBodyFloatData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btRigidBodyFloatData_bases[] = {0};
static const char *swig_btRigidBodyFloatData_base_names[] = {0};
static swig_lua_class _wrap_class_btRigidBodyFloatData = { "btRigidBodyFloatData", &SWIGTYPE_p_btRigidBodyFloatData,_wrap_new_btRigidBodyFloatData, swig_delete_btRigidBodyFloatData, swig_btRigidBodyFloatData_methods, swig_btRigidBodyFloatData_attributes, { "btRigidBodyFloatData", swig_btRigidBodyFloatData_cls_methods, swig_btRigidBodyFloatData_cls_attributes, swig_btRigidBodyFloatData_cls_constants }, swig_btRigidBodyFloatData_bases, swig_btRigidBodyFloatData_base_names };

static int _wrap_btRigidBodyDoubleData_m_collisionObjectData_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btCollisionObjectDoubleData *arg2 = (btCollisionObjectDoubleData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_collisionObjectData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_collisionObjectData",1,"btRigidBodyDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_collisionObjectData",2,"btCollisionObjectDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_collisionObjectData_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_collisionObjectData_set",2,SWIGTYPE_p_btCollisionObjectDoubleData);
  }
  
  if (arg1) (arg1)->m_collisionObjectData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_collisionObjectData_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btCollisionObjectDoubleData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_collisionObjectData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_collisionObjectData",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_collisionObjectData_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (btCollisionObjectDoubleData *)& ((arg1)->m_collisionObjectData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObjectDoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_invInertiaTensorWorld_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btMatrix3x3DoubleData *arg2 = (btMatrix3x3DoubleData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_invInertiaTensorWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_invInertiaTensorWorld",1,"btRigidBodyDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_invInertiaTensorWorld",2,"btMatrix3x3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_invInertiaTensorWorld_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMatrix3x3DoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_invInertiaTensorWorld_set",2,SWIGTYPE_p_btMatrix3x3DoubleData);
  }
  
  if (arg1) (arg1)->m_invInertiaTensorWorld = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_invInertiaTensorWorld_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btMatrix3x3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_invInertiaTensorWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_invInertiaTensorWorld",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_invInertiaTensorWorld_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (btMatrix3x3DoubleData *)& ((arg1)->m_invInertiaTensorWorld);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMatrix3x3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_linearVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_linearVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_linearVelocity",1,"btRigidBodyDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_linearVelocity",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_linearVelocity_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_linearVelocity_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_linearVelocity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_linearVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_linearVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_linearVelocity",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_linearVelocity_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_linearVelocity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_angularVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_angularVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_angularVelocity",1,"btRigidBodyDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_angularVelocity",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_angularVelocity_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_angularVelocity_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_angularVelocity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_angularVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_angularVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_angularVelocity",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_angularVelocity_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_angularVelocity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_angularFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_angularFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_angularFactor",1,"btRigidBodyDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_angularFactor",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_angularFactor_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_angularFactor_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_angularFactor = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_angularFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_angularFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_angularFactor",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_angularFactor_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_angularFactor);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_linearFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_linearFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_linearFactor",1,"btRigidBodyDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_linearFactor",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_linearFactor_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_linearFactor_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_linearFactor = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_linearFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_linearFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_linearFactor",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_linearFactor_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_linearFactor);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_gravity_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_gravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_gravity",1,"btRigidBodyDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_gravity",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_gravity_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_gravity_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_gravity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_gravity_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_gravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_gravity",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_gravity_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_gravity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_gravity_acceleration_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_gravity_acceleration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_gravity_acceleration",1,"btRigidBodyDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_gravity_acceleration",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_gravity_acceleration_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_gravity_acceleration_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_gravity_acceleration = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_gravity_acceleration_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_gravity_acceleration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_gravity_acceleration",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_gravity_acceleration_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_gravity_acceleration);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_invInertiaLocal_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_invInertiaLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_invInertiaLocal",1,"btRigidBodyDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_invInertiaLocal",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_invInertiaLocal_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_invInertiaLocal_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_invInertiaLocal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_invInertiaLocal_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_invInertiaLocal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_invInertiaLocal",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_invInertiaLocal_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_invInertiaLocal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_totalForce_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_totalForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_totalForce",1,"btRigidBodyDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_totalForce",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_totalForce_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_totalForce_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_totalForce = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_totalForce_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_totalForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_totalForce",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_totalForce_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_totalForce);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_totalTorque_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_totalTorque",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_totalTorque",1,"btRigidBodyDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_totalTorque",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_totalTorque_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_totalTorque_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_totalTorque = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_totalTorque_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_totalTorque",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_totalTorque",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_totalTorque_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_totalTorque);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_inverseMass_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_inverseMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_inverseMass",1,"btRigidBodyDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_inverseMass",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_inverseMass_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_inverseMass = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_inverseMass_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_inverseMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_inverseMass",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_inverseMass_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (double) ((arg1)->m_inverseMass);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_linearDamping_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_linearDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_linearDamping",1,"btRigidBodyDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_linearDamping",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_linearDamping_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_linearDamping = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_linearDamping_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_linearDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_linearDamping",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_linearDamping_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (double) ((arg1)->m_linearDamping);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_angularDamping_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_angularDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_angularDamping",1,"btRigidBodyDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_angularDamping",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_angularDamping_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_angularDamping = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_angularDamping_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_angularDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_angularDamping",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_angularDamping_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (double) ((arg1)->m_angularDamping);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_additionalDampingFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_additionalDampingFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_additionalDampingFactor",1,"btRigidBodyDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_additionalDampingFactor",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_additionalDampingFactor_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_additionalDampingFactor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_additionalDampingFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_additionalDampingFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_additionalDampingFactor",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_additionalDampingFactor_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (double) ((arg1)->m_additionalDampingFactor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_additionalLinearDampingThresholdSqr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_additionalLinearDampingThresholdSqr",1,"btRigidBodyDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_additionalLinearDampingThresholdSqr",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_additionalLinearDampingThresholdSqr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_additionalLinearDampingThresholdSqr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_additionalLinearDampingThresholdSqr",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (double) ((arg1)->m_additionalLinearDampingThresholdSqr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_additionalAngularDampingThresholdSqr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_additionalAngularDampingThresholdSqr",1,"btRigidBodyDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_additionalAngularDampingThresholdSqr",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_additionalAngularDampingThresholdSqr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_additionalAngularDampingThresholdSqr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_additionalAngularDampingThresholdSqr",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (double) ((arg1)->m_additionalAngularDampingThresholdSqr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_additionalAngularDampingFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_additionalAngularDampingFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_additionalAngularDampingFactor",1,"btRigidBodyDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_additionalAngularDampingFactor",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_additionalAngularDampingFactor_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_additionalAngularDampingFactor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_additionalAngularDampingFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_additionalAngularDampingFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_additionalAngularDampingFactor",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_additionalAngularDampingFactor_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (double) ((arg1)->m_additionalAngularDampingFactor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_linearSleepingThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_linearSleepingThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_linearSleepingThreshold",1,"btRigidBodyDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_linearSleepingThreshold",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_linearSleepingThreshold_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_linearSleepingThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_linearSleepingThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_linearSleepingThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_linearSleepingThreshold",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_linearSleepingThreshold_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (double) ((arg1)->m_linearSleepingThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_angularSleepingThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_angularSleepingThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_angularSleepingThreshold",1,"btRigidBodyDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_angularSleepingThreshold",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_angularSleepingThreshold_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_angularSleepingThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_angularSleepingThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_angularSleepingThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_angularSleepingThreshold",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_angularSleepingThreshold_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (double) ((arg1)->m_angularSleepingThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_additionalDamping_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_additionalDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_additionalDamping",1,"btRigidBodyDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_additionalDamping",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_additionalDamping_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_additionalDamping = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_additionalDamping_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_additionalDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_additionalDamping",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_additionalDamping_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (int) ((arg1)->m_additionalDamping);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_padding_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_padding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_padding",1,"btRigidBodyDoubleData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btRigidBodyDoubleData::m_padding",2,"char [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_padding_set",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyDoubleData_m_padding_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::m_padding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyDoubleData::m_padding",1,"btRigidBodyDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyDoubleData,0))){
    SWIG_fail_ptr("btRigidBodyDoubleData_m_padding_get",1,SWIGTYPE_p_btRigidBodyDoubleData);
  }
  
  result = (char *)(char *) ((arg1)->m_padding);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btRigidBodyDoubleData(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyDoubleData *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyDoubleData::btRigidBodyDoubleData",0,0)
  result = (btRigidBodyDoubleData *)new btRigidBodyDoubleData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBodyDoubleData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btRigidBodyDoubleData(void *obj) {
btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) obj;
delete arg1;
}
static swig_lua_method swig_btRigidBodyDoubleData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btRigidBodyDoubleData_attributes[] = {
    { "m_collisionObjectData", _wrap_btRigidBodyDoubleData_m_collisionObjectData_get, _wrap_btRigidBodyDoubleData_m_collisionObjectData_set},
    { "m_invInertiaTensorWorld", _wrap_btRigidBodyDoubleData_m_invInertiaTensorWorld_get, _wrap_btRigidBodyDoubleData_m_invInertiaTensorWorld_set},
    { "m_linearVelocity", _wrap_btRigidBodyDoubleData_m_linearVelocity_get, _wrap_btRigidBodyDoubleData_m_linearVelocity_set},
    { "m_angularVelocity", _wrap_btRigidBodyDoubleData_m_angularVelocity_get, _wrap_btRigidBodyDoubleData_m_angularVelocity_set},
    { "m_angularFactor", _wrap_btRigidBodyDoubleData_m_angularFactor_get, _wrap_btRigidBodyDoubleData_m_angularFactor_set},
    { "m_linearFactor", _wrap_btRigidBodyDoubleData_m_linearFactor_get, _wrap_btRigidBodyDoubleData_m_linearFactor_set},
    { "m_gravity", _wrap_btRigidBodyDoubleData_m_gravity_get, _wrap_btRigidBodyDoubleData_m_gravity_set},
    { "m_gravity_acceleration", _wrap_btRigidBodyDoubleData_m_gravity_acceleration_get, _wrap_btRigidBodyDoubleData_m_gravity_acceleration_set},
    { "m_invInertiaLocal", _wrap_btRigidBodyDoubleData_m_invInertiaLocal_get, _wrap_btRigidBodyDoubleData_m_invInertiaLocal_set},
    { "m_totalForce", _wrap_btRigidBodyDoubleData_m_totalForce_get, _wrap_btRigidBodyDoubleData_m_totalForce_set},
    { "m_totalTorque", _wrap_btRigidBodyDoubleData_m_totalTorque_get, _wrap_btRigidBodyDoubleData_m_totalTorque_set},
    { "m_inverseMass", _wrap_btRigidBodyDoubleData_m_inverseMass_get, _wrap_btRigidBodyDoubleData_m_inverseMass_set},
    { "m_linearDamping", _wrap_btRigidBodyDoubleData_m_linearDamping_get, _wrap_btRigidBodyDoubleData_m_linearDamping_set},
    { "m_angularDamping", _wrap_btRigidBodyDoubleData_m_angularDamping_get, _wrap_btRigidBodyDoubleData_m_angularDamping_set},
    { "m_additionalDampingFactor", _wrap_btRigidBodyDoubleData_m_additionalDampingFactor_get, _wrap_btRigidBodyDoubleData_m_additionalDampingFactor_set},
    { "m_additionalLinearDampingThresholdSqr", _wrap_btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_get, _wrap_btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_set},
    { "m_additionalAngularDampingThresholdSqr", _wrap_btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_get, _wrap_btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_set},
    { "m_additionalAngularDampingFactor", _wrap_btRigidBodyDoubleData_m_additionalAngularDampingFactor_get, _wrap_btRigidBodyDoubleData_m_additionalAngularDampingFactor_set},
    { "m_linearSleepingThreshold", _wrap_btRigidBodyDoubleData_m_linearSleepingThreshold_get, _wrap_btRigidBodyDoubleData_m_linearSleepingThreshold_set},
    { "m_angularSleepingThreshold", _wrap_btRigidBodyDoubleData_m_angularSleepingThreshold_get, _wrap_btRigidBodyDoubleData_m_angularSleepingThreshold_set},
    { "m_additionalDamping", _wrap_btRigidBodyDoubleData_m_additionalDamping_get, _wrap_btRigidBodyDoubleData_m_additionalDamping_set},
    { "m_padding", _wrap_btRigidBodyDoubleData_m_padding_get, _wrap_btRigidBodyDoubleData_m_padding_set},
    {0,0,0}
};
static swig_lua_attribute swig_btRigidBodyDoubleData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btRigidBodyDoubleData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btRigidBodyDoubleData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btRigidBodyDoubleData_bases[] = {0};
static const char *swig_btRigidBodyDoubleData_base_names[] = {0};
static swig_lua_class _wrap_class_btRigidBodyDoubleData = { "btRigidBodyDoubleData", &SWIGTYPE_p_btRigidBodyDoubleData,_wrap_new_btRigidBodyDoubleData, swig_delete_btRigidBodyDoubleData, swig_btRigidBodyDoubleData_methods, swig_btRigidBodyDoubleData_attributes, { "btRigidBodyDoubleData", swig_btRigidBodyDoubleData_cls_methods, swig_btRigidBodyDoubleData_cls_attributes, swig_btRigidBodyDoubleData_cls_constants }, swig_btRigidBodyDoubleData_bases, swig_btRigidBodyDoubleData_base_names };

static int _wrap_btJointFeedback_m_appliedForceBodyA_set(lua_State* L) {
  int SWIG_arg = 0;
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btJointFeedback::m_appliedForceBodyA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJointFeedback::m_appliedForceBodyA",1,"btJointFeedback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btJointFeedback::m_appliedForceBodyA",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJointFeedback,0))){
    SWIG_fail_ptr("btJointFeedback_m_appliedForceBodyA_set",1,SWIGTYPE_p_btJointFeedback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btJointFeedback_m_appliedForceBodyA_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_appliedForceBodyA = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJointFeedback_m_appliedForceBodyA_get(lua_State* L) {
  int SWIG_arg = 0;
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btJointFeedback::m_appliedForceBodyA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJointFeedback::m_appliedForceBodyA",1,"btJointFeedback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJointFeedback,0))){
    SWIG_fail_ptr("btJointFeedback_m_appliedForceBodyA_get",1,SWIGTYPE_p_btJointFeedback);
  }
  
  result = (btVector3 *)& ((arg1)->m_appliedForceBodyA);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJointFeedback_m_appliedTorqueBodyA_set(lua_State* L) {
  int SWIG_arg = 0;
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btJointFeedback::m_appliedTorqueBodyA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJointFeedback::m_appliedTorqueBodyA",1,"btJointFeedback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btJointFeedback::m_appliedTorqueBodyA",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJointFeedback,0))){
    SWIG_fail_ptr("btJointFeedback_m_appliedTorqueBodyA_set",1,SWIGTYPE_p_btJointFeedback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btJointFeedback_m_appliedTorqueBodyA_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_appliedTorqueBodyA = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJointFeedback_m_appliedTorqueBodyA_get(lua_State* L) {
  int SWIG_arg = 0;
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btJointFeedback::m_appliedTorqueBodyA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJointFeedback::m_appliedTorqueBodyA",1,"btJointFeedback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJointFeedback,0))){
    SWIG_fail_ptr("btJointFeedback_m_appliedTorqueBodyA_get",1,SWIGTYPE_p_btJointFeedback);
  }
  
  result = (btVector3 *)& ((arg1)->m_appliedTorqueBodyA);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJointFeedback_m_appliedForceBodyB_set(lua_State* L) {
  int SWIG_arg = 0;
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btJointFeedback::m_appliedForceBodyB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJointFeedback::m_appliedForceBodyB",1,"btJointFeedback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btJointFeedback::m_appliedForceBodyB",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJointFeedback,0))){
    SWIG_fail_ptr("btJointFeedback_m_appliedForceBodyB_set",1,SWIGTYPE_p_btJointFeedback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btJointFeedback_m_appliedForceBodyB_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_appliedForceBodyB = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJointFeedback_m_appliedForceBodyB_get(lua_State* L) {
  int SWIG_arg = 0;
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btJointFeedback::m_appliedForceBodyB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJointFeedback::m_appliedForceBodyB",1,"btJointFeedback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJointFeedback,0))){
    SWIG_fail_ptr("btJointFeedback_m_appliedForceBodyB_get",1,SWIGTYPE_p_btJointFeedback);
  }
  
  result = (btVector3 *)& ((arg1)->m_appliedForceBodyB);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJointFeedback_m_appliedTorqueBodyB_set(lua_State* L) {
  int SWIG_arg = 0;
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btJointFeedback::m_appliedTorqueBodyB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJointFeedback::m_appliedTorqueBodyB",1,"btJointFeedback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btJointFeedback::m_appliedTorqueBodyB",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJointFeedback,0))){
    SWIG_fail_ptr("btJointFeedback_m_appliedTorqueBodyB_set",1,SWIGTYPE_p_btJointFeedback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btJointFeedback_m_appliedTorqueBodyB_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_appliedTorqueBodyB = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btJointFeedback_m_appliedTorqueBodyB_get(lua_State* L) {
  int SWIG_arg = 0;
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btJointFeedback::m_appliedTorqueBodyB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btJointFeedback::m_appliedTorqueBodyB",1,"btJointFeedback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btJointFeedback,0))){
    SWIG_fail_ptr("btJointFeedback_m_appliedTorqueBodyB_get",1,SWIGTYPE_p_btJointFeedback);
  }
  
  result = (btVector3 *)& ((arg1)->m_appliedTorqueBodyB);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btJointFeedback(lua_State* L) {
  int SWIG_arg = 0;
  btJointFeedback *result = 0 ;
  
  SWIG_check_num_args("btJointFeedback::btJointFeedback",0,0)
  result = (btJointFeedback *)new btJointFeedback();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btJointFeedback,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btJointFeedback(void *obj) {
btJointFeedback *arg1 = (btJointFeedback *) obj;
delete arg1;
}
static swig_lua_method swig_btJointFeedback_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btJointFeedback_attributes[] = {
    { "m_appliedForceBodyA", _wrap_btJointFeedback_m_appliedForceBodyA_get, _wrap_btJointFeedback_m_appliedForceBodyA_set},
    { "m_appliedTorqueBodyA", _wrap_btJointFeedback_m_appliedTorqueBodyA_get, _wrap_btJointFeedback_m_appliedTorqueBodyA_set},
    { "m_appliedForceBodyB", _wrap_btJointFeedback_m_appliedForceBodyB_get, _wrap_btJointFeedback_m_appliedForceBodyB_set},
    { "m_appliedTorqueBodyB", _wrap_btJointFeedback_m_appliedTorqueBodyB_get, _wrap_btJointFeedback_m_appliedTorqueBodyB_set},
    {0,0,0}
};
static swig_lua_attribute swig_btJointFeedback_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btJointFeedback_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btJointFeedback_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btJointFeedback_bases[] = {0};
static const char *swig_btJointFeedback_base_names[] = {0};
static swig_lua_class _wrap_class_btJointFeedback = { "btJointFeedback", &SWIGTYPE_p_btJointFeedback,_wrap_new_btJointFeedback, swig_delete_btJointFeedback, swig_btJointFeedback_methods, swig_btJointFeedback_attributes, { "btJointFeedback", swig_btJointFeedback_cls_methods, swig_btJointFeedback_cls_attributes, swig_btJointFeedback_cls_constants }, swig_btJointFeedback_bases, swig_btJointFeedback_base_names };

static int _wrap_btTypedConstraint_getFixedBody(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btTypedConstraint::getFixedBody",0,0)
  result = (btRigidBody *) &btTypedConstraint::getFixedBody();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getOverrideNumSolverIterations(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int result;
  
  SWIG_check_num_args("btTypedConstraint::getOverrideNumSolverIterations",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getOverrideNumSolverIterations",1,"btTypedConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getOverrideNumSolverIterations",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (int)((btTypedConstraint const *)arg1)->getOverrideNumSolverIterations();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_setOverrideNumSolverIterations(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTypedConstraint::setOverrideNumSolverIterations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::setOverrideNumSolverIterations",1,"btTypedConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraint::setOverrideNumSolverIterations",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_setOverrideNumSolverIterations",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setOverrideNumSolverIterations(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_buildJacobian(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  
  SWIG_check_num_args("btTypedConstraint::buildJacobian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::buildJacobian",1,"btTypedConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_buildJacobian",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  (arg1)->buildJacobian();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_setupSolverConstraint(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btConstraintArray *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  btScalar arg5 ;
  
  SWIG_check_num_args("btTypedConstraint::setupSolverConstraint",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::setupSolverConstraint",1,"btTypedConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTypedConstraint::setupSolverConstraint",2,"btConstraintArray &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btTypedConstraint::setupSolverConstraint",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btTypedConstraint::setupSolverConstraint",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btTypedConstraint::setupSolverConstraint",5,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_setupSolverConstraint",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t,0))){
    SWIG_fail_ptr("btTypedConstraint_setupSolverConstraint",2,SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (btScalar)lua_tonumber(L, 5);
  (arg1)->setupSolverConstraint(*arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getInfo1(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  SWIG_check_num_args("btTypedConstraint::getInfo1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getInfo1",1,"btTypedConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTypedConstraint::getInfo1",2,"btTypedConstraint::btConstraintInfo1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getInfo1",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo1,0))){
    SWIG_fail_ptr("btTypedConstraint_getInfo1",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo1);
  }
  
  (arg1)->getInfo1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getInfo2(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  
  SWIG_check_num_args("btTypedConstraint::getInfo2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getInfo2",1,"btTypedConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTypedConstraint::getInfo2",2,"btTypedConstraint::btConstraintInfo2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getInfo2",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2,0))){
    SWIG_fail_ptr("btTypedConstraint_getInfo2",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2);
  }
  
  (arg1)->getInfo2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_internalSetAppliedImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTypedConstraint::internalSetAppliedImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::internalSetAppliedImpulse",1,"btTypedConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraint::internalSetAppliedImpulse",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_internalSetAppliedImpulse",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->internalSetAppliedImpulse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_internalGetAppliedImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTypedConstraint::internalGetAppliedImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::internalGetAppliedImpulse",1,"btTypedConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_internalGetAppliedImpulse",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (btScalar)(arg1)->internalGetAppliedImpulse();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getBreakingImpulseThreshold(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTypedConstraint::getBreakingImpulseThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getBreakingImpulseThreshold",1,"btTypedConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getBreakingImpulseThreshold",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (btScalar)((btTypedConstraint const *)arg1)->getBreakingImpulseThreshold();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_setBreakingImpulseThreshold(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTypedConstraint::setBreakingImpulseThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::setBreakingImpulseThreshold",1,"btTypedConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraint::setBreakingImpulseThreshold",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_setBreakingImpulseThreshold",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setBreakingImpulseThreshold(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_isEnabled(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  bool result;
  
  SWIG_check_num_args("btTypedConstraint::isEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::isEnabled",1,"btTypedConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_isEnabled",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (bool)((btTypedConstraint const *)arg1)->isEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_setEnabled(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btTypedConstraint::setEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::setEnabled",1,"btTypedConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btTypedConstraint::setEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_setEnabled",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_solveConstraintObsolete(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btSolverBody *arg2 = 0 ;
  btSolverBody *arg3 = 0 ;
  btScalar arg4 ;
  
  SWIG_check_num_args("btTypedConstraint::solveConstraintObsolete",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::solveConstraintObsolete",1,"btTypedConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btTypedConstraint::solveConstraintObsolete",2,"btSolverBody &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btTypedConstraint::solveConstraintObsolete",3,"btSolverBody &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btTypedConstraint::solveConstraintObsolete",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_solveConstraintObsolete",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btTypedConstraint_solveConstraintObsolete",2,SWIGTYPE_p_btSolverBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSolverBody,0))){
    SWIG_fail_ptr("btTypedConstraint_solveConstraintObsolete",3,SWIGTYPE_p_btSolverBody);
  }
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  (arg1)->solveConstraintObsolete(*arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getRigidBodyA__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btTypedConstraint::getRigidBodyA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getRigidBodyA",1,"btTypedConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getRigidBodyA",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (btRigidBody *) &((btTypedConstraint const *)arg1)->getRigidBodyA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getRigidBodyB__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btTypedConstraint::getRigidBodyB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getRigidBodyB",1,"btTypedConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getRigidBodyB",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (btRigidBody *) &((btTypedConstraint const *)arg1)->getRigidBodyB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getRigidBodyA__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btTypedConstraint::getRigidBodyA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getRigidBodyA",1,"btTypedConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getRigidBodyA",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (btRigidBody *) &(arg1)->getRigidBodyA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getRigidBodyA(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTypedConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btTypedConstraint_getRigidBodyA__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTypedConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btTypedConstraint_getRigidBodyA__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btTypedConstraint_getRigidBodyA'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTypedConstraint::getRigidBodyA() const\n"
    "    btTypedConstraint::getRigidBodyA()\n");
  lua_error(L);return 0;
}


static int _wrap_btTypedConstraint_getRigidBodyB__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btTypedConstraint::getRigidBodyB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getRigidBodyB",1,"btTypedConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getRigidBodyB",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (btRigidBody *) &(arg1)->getRigidBodyB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getRigidBodyB(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTypedConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btTypedConstraint_getRigidBodyB__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTypedConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btTypedConstraint_getRigidBodyB__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btTypedConstraint_getRigidBodyB'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTypedConstraint::getRigidBodyB() const\n"
    "    btTypedConstraint::getRigidBodyB()\n");
  lua_error(L);return 0;
}


static int _wrap_btTypedConstraint_getUserConstraintType(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int result;
  
  SWIG_check_num_args("btTypedConstraint::getUserConstraintType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getUserConstraintType",1,"btTypedConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getUserConstraintType",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (int)((btTypedConstraint const *)arg1)->getUserConstraintType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_setUserConstraintType(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTypedConstraint::setUserConstraintType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::setUserConstraintType",1,"btTypedConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraint::setUserConstraintType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_setUserConstraintType",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setUserConstraintType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_setUserConstraintId(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTypedConstraint::setUserConstraintId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::setUserConstraintId",1,"btTypedConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraint::setUserConstraintId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_setUserConstraintId",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setUserConstraintId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getUserConstraintId(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int result;
  
  SWIG_check_num_args("btTypedConstraint::getUserConstraintId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getUserConstraintId",1,"btTypedConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getUserConstraintId",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (int)((btTypedConstraint const *)arg1)->getUserConstraintId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_setUserConstraintPtr(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btTypedConstraint::setUserConstraintPtr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::setUserConstraintPtr",1,"btTypedConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTypedConstraint::setUserConstraintPtr",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_setUserConstraintPtr",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btTypedConstraint_setUserConstraintPtr");
  (arg1)->setUserConstraintPtr(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getUserConstraintPtr(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btTypedConstraint::getUserConstraintPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getUserConstraintPtr",1,"btTypedConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getUserConstraintPtr",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (void *)(arg1)->getUserConstraintPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_setJointFeedback(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btJointFeedback *arg2 = (btJointFeedback *) 0 ;
  
  SWIG_check_num_args("btTypedConstraint::setJointFeedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::setJointFeedback",1,"btTypedConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTypedConstraint::setJointFeedback",2,"btJointFeedback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_setJointFeedback",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btJointFeedback,0))){
    SWIG_fail_ptr("btTypedConstraint_setJointFeedback",2,SWIGTYPE_p_btJointFeedback);
  }
  
  (arg1)->setJointFeedback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getJointFeedback__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  SWIG_check_num_args("btTypedConstraint::getJointFeedback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getJointFeedback",1,"btTypedConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getJointFeedback",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (btJointFeedback *)((btTypedConstraint const *)arg1)->getJointFeedback();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btJointFeedback,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getJointFeedback__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  SWIG_check_num_args("btTypedConstraint::getJointFeedback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getJointFeedback",1,"btTypedConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getJointFeedback",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (btJointFeedback *)(arg1)->getJointFeedback();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btJointFeedback,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getJointFeedback(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTypedConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btTypedConstraint_getJointFeedback__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTypedConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btTypedConstraint_getJointFeedback__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btTypedConstraint_getJointFeedback'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTypedConstraint::getJointFeedback() const\n"
    "    btTypedConstraint::getJointFeedback()\n");
  lua_error(L);return 0;
}


static int _wrap_btTypedConstraint_getUid(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int result;
  
  SWIG_check_num_args("btTypedConstraint::getUid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getUid",1,"btTypedConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getUid",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (int)((btTypedConstraint const *)arg1)->getUid();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_needsFeedback(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  bool result;
  
  SWIG_check_num_args("btTypedConstraint::needsFeedback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::needsFeedback",1,"btTypedConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_needsFeedback",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (bool)((btTypedConstraint const *)arg1)->needsFeedback();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_enableFeedback(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btTypedConstraint::enableFeedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::enableFeedback",1,"btTypedConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btTypedConstraint::enableFeedback",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_enableFeedback",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableFeedback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getAppliedImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTypedConstraint::getAppliedImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getAppliedImpulse",1,"btTypedConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getAppliedImpulse",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (btScalar)((btTypedConstraint const *)arg1)->getAppliedImpulse();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getConstraintType(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btTypedConstraintType result;
  
  SWIG_check_num_args("btTypedConstraint::getConstraintType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getConstraintType",1,"btTypedConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getConstraintType",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (btTypedConstraintType)((btTypedConstraint const *)arg1)->getConstraintType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_setDbgDrawSize(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTypedConstraint::setDbgDrawSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::setDbgDrawSize",1,"btTypedConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraint::setDbgDrawSize",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_setDbgDrawSize",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setDbgDrawSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getDbgDrawSize(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTypedConstraint::getDbgDrawSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getDbgDrawSize",1,"btTypedConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getDbgDrawSize",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (btScalar)(arg1)->getDbgDrawSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_setParam__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("btTypedConstraint::setParam",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::setParam",1,"btTypedConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraint::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btTypedConstraint::setParam",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btTypedConstraint::setParam",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_setParam",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setParam(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_setParam__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btTypedConstraint::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::setParam",1,"btTypedConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraint::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btTypedConstraint::setParam",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_setParam",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_setParam(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTypedConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btTypedConstraint_setParam__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTypedConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btTypedConstraint_setParam__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btTypedConstraint_setParam'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTypedConstraint::setParam(int,btScalar,int)\n"
    "    btTypedConstraint::setParam(int,btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btTypedConstraint_getParam__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  SWIG_check_num_args("btTypedConstraint::getParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getParam",1,"btTypedConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraint::getParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btTypedConstraint::getParam",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getParam",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (btScalar)((btTypedConstraint const *)arg1)->getParam(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getParam__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  SWIG_check_num_args("btTypedConstraint::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::getParam",1,"btTypedConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraint::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_getParam",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btScalar)((btTypedConstraint const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_getParam(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTypedConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btTypedConstraint_getParam__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTypedConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btTypedConstraint_getParam__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btTypedConstraint_getParam'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTypedConstraint::getParam(int,int) const\n"
    "    btTypedConstraint::getParam(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_btTypedConstraint_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int result;
  
  SWIG_check_num_args("btTypedConstraint::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::calculateSerializeBufferSize",1,"btTypedConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_calculateSerializeBufferSize",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  result = (int)((btTypedConstraint const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraint_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btTypedConstraint::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraint::serialize",1,"btTypedConstraint const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTypedConstraint::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btTypedConstraint::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btTypedConstraint_serialize",1,SWIGTYPE_p_btTypedConstraint);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btTypedConstraint_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btTypedConstraint_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  result = (char *)((btTypedConstraint const *)arg1)->serialize(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTypedConstraint(void *obj) {
btTypedConstraint *arg1 = (btTypedConstraint *) obj;
delete arg1;
}
static swig_lua_method swig_btTypedConstraint_methods[] = {
    {"getOverrideNumSolverIterations", _wrap_btTypedConstraint_getOverrideNumSolverIterations}, 
    {"setOverrideNumSolverIterations", _wrap_btTypedConstraint_setOverrideNumSolverIterations}, 
    {"buildJacobian", _wrap_btTypedConstraint_buildJacobian}, 
    {"setupSolverConstraint", _wrap_btTypedConstraint_setupSolverConstraint}, 
    {"getInfo1", _wrap_btTypedConstraint_getInfo1}, 
    {"getInfo2", _wrap_btTypedConstraint_getInfo2}, 
    {"internalSetAppliedImpulse", _wrap_btTypedConstraint_internalSetAppliedImpulse}, 
    {"internalGetAppliedImpulse", _wrap_btTypedConstraint_internalGetAppliedImpulse}, 
    {"getBreakingImpulseThreshold", _wrap_btTypedConstraint_getBreakingImpulseThreshold}, 
    {"setBreakingImpulseThreshold", _wrap_btTypedConstraint_setBreakingImpulseThreshold}, 
    {"isEnabled", _wrap_btTypedConstraint_isEnabled}, 
    {"setEnabled", _wrap_btTypedConstraint_setEnabled}, 
    {"solveConstraintObsolete", _wrap_btTypedConstraint_solveConstraintObsolete}, 
    {"getRigidBodyA", _wrap_btTypedConstraint_getRigidBodyA}, 
    {"getRigidBodyB", _wrap_btTypedConstraint_getRigidBodyB}, 
    {"getUserConstraintType", _wrap_btTypedConstraint_getUserConstraintType}, 
    {"setUserConstraintType", _wrap_btTypedConstraint_setUserConstraintType}, 
    {"setUserConstraintId", _wrap_btTypedConstraint_setUserConstraintId}, 
    {"getUserConstraintId", _wrap_btTypedConstraint_getUserConstraintId}, 
    {"setUserConstraintPtr", _wrap_btTypedConstraint_setUserConstraintPtr}, 
    {"getUserConstraintPtr", _wrap_btTypedConstraint_getUserConstraintPtr}, 
    {"setJointFeedback", _wrap_btTypedConstraint_setJointFeedback}, 
    {"getJointFeedback", _wrap_btTypedConstraint_getJointFeedback}, 
    {"getUid", _wrap_btTypedConstraint_getUid}, 
    {"needsFeedback", _wrap_btTypedConstraint_needsFeedback}, 
    {"enableFeedback", _wrap_btTypedConstraint_enableFeedback}, 
    {"getAppliedImpulse", _wrap_btTypedConstraint_getAppliedImpulse}, 
    {"getConstraintType", _wrap_btTypedConstraint_getConstraintType}, 
    {"setDbgDrawSize", _wrap_btTypedConstraint_setDbgDrawSize}, 
    {"getDbgDrawSize", _wrap_btTypedConstraint_getDbgDrawSize}, 
    {"setParam", _wrap_btTypedConstraint_setParam}, 
    {"getParam", _wrap_btTypedConstraint_getParam}, 
    {"calculateSerializeBufferSize", _wrap_btTypedConstraint_calculateSerializeBufferSize}, 
    {"serialize", _wrap_btTypedConstraint_serialize}, 
    {0,0}
};
static swig_lua_attribute swig_btTypedConstraint_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btTypedConstraint_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTypedConstraint_cls_methods[] = {
    {"getFixedBody", _wrap_btTypedConstraint_getFixedBody}, 
    {0,0}
};
static swig_lua_const_info swig_btTypedConstraint_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTypedConstraint_bases[] = {0,0};
static const char *swig_btTypedConstraint_base_names[] = {"btTypedObject *",0};
static swig_lua_class _wrap_class_btTypedConstraint = { "btTypedConstraint", &SWIGTYPE_p_btTypedConstraint,0, swig_delete_btTypedConstraint, swig_btTypedConstraint_methods, swig_btTypedConstraint_attributes, { "btTypedConstraint", swig_btTypedConstraint_cls_methods, swig_btTypedConstraint_cls_attributes, swig_btTypedConstraint_cls_constants }, swig_btTypedConstraint_bases, swig_btTypedConstraint_base_names };

static int _wrap_btAdjustAngleToLimits(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar result;
  
  SWIG_check_num_args("btAdjustAngleToLimits",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btAdjustAngleToLimits",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btAdjustAngleToLimits",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btAdjustAngleToLimits",3,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  result = (btScalar)btAdjustAngleToLimits(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_rbA_set(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  btRigidBodyFloatData *arg2 = (btRigidBodyFloatData *) 0 ;
  
  SWIG_check_num_args("btTypedConstraintData::m_rbA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_rbA",1,"btTypedConstraintData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTypedConstraintData::m_rbA",2,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_rbA_set",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBodyFloatData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btTypedConstraintData_m_rbA_set",2,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  if (arg1) (arg1)->m_rbA = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_rbA_get(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  btRigidBodyFloatData *result = 0 ;
  
  SWIG_check_num_args("btTypedConstraintData::m_rbA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_rbA",1,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_rbA_get",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  result = (btRigidBodyFloatData *) ((arg1)->m_rbA);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBodyFloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_rbB_set(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  btRigidBodyFloatData *arg2 = (btRigidBodyFloatData *) 0 ;
  
  SWIG_check_num_args("btTypedConstraintData::m_rbB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_rbB",1,"btTypedConstraintData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTypedConstraintData::m_rbB",2,"btRigidBodyFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_rbB_set",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBodyFloatData,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btTypedConstraintData_m_rbB_set",2,SWIGTYPE_p_btRigidBodyFloatData);
  }
  
  if (arg1) (arg1)->m_rbB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_rbB_get(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  btRigidBodyFloatData *result = 0 ;
  
  SWIG_check_num_args("btTypedConstraintData::m_rbB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_rbB",1,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_rbB_get",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  result = (btRigidBodyFloatData *) ((arg1)->m_rbB);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBodyFloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_name_set(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("btTypedConstraintData::m_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_name",1,"btTypedConstraintData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btTypedConstraintData::m_name",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_name_set",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_name_get(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btTypedConstraintData::m_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_name",1,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_name_get",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  result = (char *) ((arg1)->m_name);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_objectType_set(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTypedConstraintData::m_objectType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_objectType",1,"btTypedConstraintData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraintData::m_objectType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_objectType_set",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_objectType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_objectType_get(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  SWIG_check_num_args("btTypedConstraintData::m_objectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_objectType",1,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_objectType_get",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  result = (int) ((arg1)->m_objectType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_userConstraintType_set(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTypedConstraintData::m_userConstraintType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_userConstraintType",1,"btTypedConstraintData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraintData::m_userConstraintType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_userConstraintType_set",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_userConstraintType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_userConstraintType_get(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  SWIG_check_num_args("btTypedConstraintData::m_userConstraintType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_userConstraintType",1,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_userConstraintType_get",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  result = (int) ((arg1)->m_userConstraintType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_userConstraintId_set(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTypedConstraintData::m_userConstraintId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_userConstraintId",1,"btTypedConstraintData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraintData::m_userConstraintId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_userConstraintId_set",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_userConstraintId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_userConstraintId_get(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  SWIG_check_num_args("btTypedConstraintData::m_userConstraintId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_userConstraintId",1,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_userConstraintId_get",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  result = (int) ((arg1)->m_userConstraintId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_needsFeedback_set(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTypedConstraintData::m_needsFeedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_needsFeedback",1,"btTypedConstraintData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraintData::m_needsFeedback",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_needsFeedback_set",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_needsFeedback = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_needsFeedback_get(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  SWIG_check_num_args("btTypedConstraintData::m_needsFeedback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_needsFeedback",1,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_needsFeedback_get",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  result = (int) ((arg1)->m_needsFeedback);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_appliedImpulse_set(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btTypedConstraintData::m_appliedImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_appliedImpulse",1,"btTypedConstraintData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraintData::m_appliedImpulse",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_appliedImpulse_set",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_appliedImpulse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_appliedImpulse_get(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float result;
  
  SWIG_check_num_args("btTypedConstraintData::m_appliedImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_appliedImpulse",1,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_appliedImpulse_get",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  result = (float) ((arg1)->m_appliedImpulse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_dbgDrawSize_set(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btTypedConstraintData::m_dbgDrawSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_dbgDrawSize",1,"btTypedConstraintData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraintData::m_dbgDrawSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_dbgDrawSize_set",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_dbgDrawSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_dbgDrawSize_get(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float result;
  
  SWIG_check_num_args("btTypedConstraintData::m_dbgDrawSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_dbgDrawSize",1,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_dbgDrawSize_get",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  result = (float) ((arg1)->m_dbgDrawSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_set(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTypedConstraintData::m_disableCollisionsBetweenLinkedBodies",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_disableCollisionsBetweenLinkedBodies",1,"btTypedConstraintData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraintData::m_disableCollisionsBetweenLinkedBodies",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_set",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_disableCollisionsBetweenLinkedBodies = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_get(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  SWIG_check_num_args("btTypedConstraintData::m_disableCollisionsBetweenLinkedBodies",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_disableCollisionsBetweenLinkedBodies",1,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_get",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  result = (int) ((arg1)->m_disableCollisionsBetweenLinkedBodies);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_overrideNumSolverIterations_set(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTypedConstraintData::m_overrideNumSolverIterations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_overrideNumSolverIterations",1,"btTypedConstraintData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraintData::m_overrideNumSolverIterations",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_overrideNumSolverIterations_set",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_overrideNumSolverIterations = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_overrideNumSolverIterations_get(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  SWIG_check_num_args("btTypedConstraintData::m_overrideNumSolverIterations",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_overrideNumSolverIterations",1,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_overrideNumSolverIterations_get",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  result = (int) ((arg1)->m_overrideNumSolverIterations);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_breakingImpulseThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btTypedConstraintData::m_breakingImpulseThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_breakingImpulseThreshold",1,"btTypedConstraintData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraintData::m_breakingImpulseThreshold",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_breakingImpulseThreshold_set",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_breakingImpulseThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_breakingImpulseThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float result;
  
  SWIG_check_num_args("btTypedConstraintData::m_breakingImpulseThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_breakingImpulseThreshold",1,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_breakingImpulseThreshold_get",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  result = (float) ((arg1)->m_breakingImpulseThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_isEnabled_set(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btTypedConstraintData::m_isEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_isEnabled",1,"btTypedConstraintData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTypedConstraintData::m_isEnabled",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_isEnabled_set",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_isEnabled = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTypedConstraintData_m_isEnabled_get(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  SWIG_check_num_args("btTypedConstraintData::m_isEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTypedConstraintData::m_isEnabled",1,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btTypedConstraintData_m_isEnabled_get",1,SWIGTYPE_p_btTypedConstraintData);
  }
  
  result = (int) ((arg1)->m_isEnabled);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTypedConstraintData(lua_State* L) {
  int SWIG_arg = 0;
  btTypedConstraintData *result = 0 ;
  
  SWIG_check_num_args("btTypedConstraintData::btTypedConstraintData",0,0)
  result = (btTypedConstraintData *)new btTypedConstraintData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraintData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTypedConstraintData(void *obj) {
btTypedConstraintData *arg1 = (btTypedConstraintData *) obj;
delete arg1;
}
static swig_lua_method swig_btTypedConstraintData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btTypedConstraintData_attributes[] = {
    { "m_rbA", _wrap_btTypedConstraintData_m_rbA_get, _wrap_btTypedConstraintData_m_rbA_set},
    { "m_rbB", _wrap_btTypedConstraintData_m_rbB_get, _wrap_btTypedConstraintData_m_rbB_set},
    { "m_name", _wrap_btTypedConstraintData_m_name_get, _wrap_btTypedConstraintData_m_name_set},
    { "m_objectType", _wrap_btTypedConstraintData_m_objectType_get, _wrap_btTypedConstraintData_m_objectType_set},
    { "m_userConstraintType", _wrap_btTypedConstraintData_m_userConstraintType_get, _wrap_btTypedConstraintData_m_userConstraintType_set},
    { "m_userConstraintId", _wrap_btTypedConstraintData_m_userConstraintId_get, _wrap_btTypedConstraintData_m_userConstraintId_set},
    { "m_needsFeedback", _wrap_btTypedConstraintData_m_needsFeedback_get, _wrap_btTypedConstraintData_m_needsFeedback_set},
    { "m_appliedImpulse", _wrap_btTypedConstraintData_m_appliedImpulse_get, _wrap_btTypedConstraintData_m_appliedImpulse_set},
    { "m_dbgDrawSize", _wrap_btTypedConstraintData_m_dbgDrawSize_get, _wrap_btTypedConstraintData_m_dbgDrawSize_set},
    { "m_disableCollisionsBetweenLinkedBodies", _wrap_btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_get, _wrap_btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_set},
    { "m_overrideNumSolverIterations", _wrap_btTypedConstraintData_m_overrideNumSolverIterations_get, _wrap_btTypedConstraintData_m_overrideNumSolverIterations_set},
    { "m_breakingImpulseThreshold", _wrap_btTypedConstraintData_m_breakingImpulseThreshold_get, _wrap_btTypedConstraintData_m_breakingImpulseThreshold_set},
    { "m_isEnabled", _wrap_btTypedConstraintData_m_isEnabled_get, _wrap_btTypedConstraintData_m_isEnabled_set},
    {0,0,0}
};
static swig_lua_attribute swig_btTypedConstraintData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTypedConstraintData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTypedConstraintData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTypedConstraintData_bases[] = {0};
static const char *swig_btTypedConstraintData_base_names[] = {0};
static swig_lua_class _wrap_class_btTypedConstraintData = { "btTypedConstraintData", &SWIGTYPE_p_btTypedConstraintData,_wrap_new_btTypedConstraintData, swig_delete_btTypedConstraintData, swig_btTypedConstraintData_methods, swig_btTypedConstraintData_attributes, { "btTypedConstraintData", swig_btTypedConstraintData_cls_methods, swig_btTypedConstraintData_cls_attributes, swig_btTypedConstraintData_cls_constants }, swig_btTypedConstraintData_bases, swig_btTypedConstraintData_base_names };

static int _wrap_new_btAngularLimit(lua_State* L) {
  int SWIG_arg = 0;
  btAngularLimit *result = 0 ;
  
  SWIG_check_num_args("btAngularLimit::btAngularLimit",0,0)
  result = (btAngularLimit *)new btAngularLimit();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAngularLimit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngularLimit_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  
  SWIG_check_num_args("btAngularLimit::set",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAngularLimit::set",1,"btAngularLimit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btAngularLimit::set",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btAngularLimit::set",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btAngularLimit::set",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btAngularLimit::set",5,"btScalar");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btAngularLimit::set",6,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAngularLimit,0))){
    SWIG_fail_ptr("btAngularLimit_set",1,SWIGTYPE_p_btAngularLimit);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (btScalar)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  (arg1)->set(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngularLimit_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  
  SWIG_check_num_args("btAngularLimit::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAngularLimit::set",1,"btAngularLimit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btAngularLimit::set",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btAngularLimit::set",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btAngularLimit::set",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btAngularLimit::set",5,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAngularLimit,0))){
    SWIG_fail_ptr("btAngularLimit_set",1,SWIGTYPE_p_btAngularLimit);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (btScalar)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngularLimit_set__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  SWIG_check_num_args("btAngularLimit::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAngularLimit::set",1,"btAngularLimit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btAngularLimit::set",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btAngularLimit::set",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btAngularLimit::set",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAngularLimit,0))){
    SWIG_fail_ptr("btAngularLimit_set",1,SWIGTYPE_p_btAngularLimit);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngularLimit_set__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btAngularLimit::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAngularLimit::set",1,"btAngularLimit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btAngularLimit::set",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btAngularLimit::set",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAngularLimit,0))){
    SWIG_fail_ptr("btAngularLimit_set",1,SWIGTYPE_p_btAngularLimit);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngularLimit_set(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btAngularLimit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btAngularLimit_set__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btAngularLimit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btAngularLimit_set__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btAngularLimit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_btAngularLimit_set__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btAngularLimit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_btAngularLimit_set__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btAngularLimit_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btAngularLimit::set(btScalar,btScalar,btScalar,btScalar,btScalar)\n"
    "    btAngularLimit::set(btScalar,btScalar,btScalar,btScalar)\n"
    "    btAngularLimit::set(btScalar,btScalar,btScalar)\n"
    "    btAngularLimit::set(btScalar,btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btAngularLimit_test(lua_State* L) {
  int SWIG_arg = 0;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btAngularLimit::test",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAngularLimit::test",1,"btAngularLimit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btAngularLimit::test",2,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAngularLimit,0))){
    SWIG_fail_ptr("btAngularLimit_test",1,SWIGTYPE_p_btAngularLimit);
  }
  
  arg2 = (btScalar const)lua_tonumber(L, 2);
  (arg1)->test(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngularLimit_getSoftness(lua_State* L) {
  int SWIG_arg = 0;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btAngularLimit::getSoftness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAngularLimit::getSoftness",1,"btAngularLimit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAngularLimit,0))){
    SWIG_fail_ptr("btAngularLimit_getSoftness",1,SWIGTYPE_p_btAngularLimit);
  }
  
  result = (btScalar)((btAngularLimit const *)arg1)->getSoftness();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngularLimit_getBiasFactor(lua_State* L) {
  int SWIG_arg = 0;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btAngularLimit::getBiasFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAngularLimit::getBiasFactor",1,"btAngularLimit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAngularLimit,0))){
    SWIG_fail_ptr("btAngularLimit_getBiasFactor",1,SWIGTYPE_p_btAngularLimit);
  }
  
  result = (btScalar)((btAngularLimit const *)arg1)->getBiasFactor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngularLimit_getRelaxationFactor(lua_State* L) {
  int SWIG_arg = 0;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btAngularLimit::getRelaxationFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAngularLimit::getRelaxationFactor",1,"btAngularLimit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAngularLimit,0))){
    SWIG_fail_ptr("btAngularLimit_getRelaxationFactor",1,SWIGTYPE_p_btAngularLimit);
  }
  
  result = (btScalar)((btAngularLimit const *)arg1)->getRelaxationFactor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngularLimit_getCorrection(lua_State* L) {
  int SWIG_arg = 0;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btAngularLimit::getCorrection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAngularLimit::getCorrection",1,"btAngularLimit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAngularLimit,0))){
    SWIG_fail_ptr("btAngularLimit_getCorrection",1,SWIGTYPE_p_btAngularLimit);
  }
  
  result = (btScalar)((btAngularLimit const *)arg1)->getCorrection();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngularLimit_getSign(lua_State* L) {
  int SWIG_arg = 0;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btAngularLimit::getSign",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAngularLimit::getSign",1,"btAngularLimit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAngularLimit,0))){
    SWIG_fail_ptr("btAngularLimit_getSign",1,SWIGTYPE_p_btAngularLimit);
  }
  
  result = (btScalar)((btAngularLimit const *)arg1)->getSign();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngularLimit_getHalfRange(lua_State* L) {
  int SWIG_arg = 0;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btAngularLimit::getHalfRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAngularLimit::getHalfRange",1,"btAngularLimit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAngularLimit,0))){
    SWIG_fail_ptr("btAngularLimit_getHalfRange",1,SWIGTYPE_p_btAngularLimit);
  }
  
  result = (btScalar)((btAngularLimit const *)arg1)->getHalfRange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngularLimit_isLimit(lua_State* L) {
  int SWIG_arg = 0;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  bool result;
  
  SWIG_check_num_args("btAngularLimit::isLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAngularLimit::isLimit",1,"btAngularLimit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAngularLimit,0))){
    SWIG_fail_ptr("btAngularLimit_isLimit",1,SWIGTYPE_p_btAngularLimit);
  }
  
  result = (bool)((btAngularLimit const *)arg1)->isLimit();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngularLimit_fit(lua_State* L) {
  int SWIG_arg = 0;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar *arg2 = 0 ;
  
  SWIG_check_num_args("btAngularLimit::fit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAngularLimit::fit",1,"btAngularLimit const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btAngularLimit::fit",2,"btScalar &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAngularLimit,0))){
    SWIG_fail_ptr("btAngularLimit_fit",1,SWIGTYPE_p_btAngularLimit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btAngularLimit_fit",2,SWIGTYPE_p_float);
  }
  
  ((btAngularLimit const *)arg1)->fit(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngularLimit_getError(lua_State* L) {
  int SWIG_arg = 0;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btAngularLimit::getError",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAngularLimit::getError",1,"btAngularLimit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAngularLimit,0))){
    SWIG_fail_ptr("btAngularLimit_getError",1,SWIGTYPE_p_btAngularLimit);
  }
  
  result = (btScalar)((btAngularLimit const *)arg1)->getError();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngularLimit_getLow(lua_State* L) {
  int SWIG_arg = 0;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btAngularLimit::getLow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAngularLimit::getLow",1,"btAngularLimit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAngularLimit,0))){
    SWIG_fail_ptr("btAngularLimit_getLow",1,SWIGTYPE_p_btAngularLimit);
  }
  
  result = (btScalar)((btAngularLimit const *)arg1)->getLow();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btAngularLimit_getHigh(lua_State* L) {
  int SWIG_arg = 0;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btAngularLimit::getHigh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btAngularLimit::getHigh",1,"btAngularLimit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAngularLimit,0))){
    SWIG_fail_ptr("btAngularLimit_getHigh",1,SWIGTYPE_p_btAngularLimit);
  }
  
  result = (btScalar)((btAngularLimit const *)arg1)->getHigh();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btAngularLimit(void *obj) {
btAngularLimit *arg1 = (btAngularLimit *) obj;
delete arg1;
}
static swig_lua_method swig_btAngularLimit_methods[] = {
    {"set", _wrap_btAngularLimit_set}, 
    {"test", _wrap_btAngularLimit_test}, 
    {"getSoftness", _wrap_btAngularLimit_getSoftness}, 
    {"getBiasFactor", _wrap_btAngularLimit_getBiasFactor}, 
    {"getRelaxationFactor", _wrap_btAngularLimit_getRelaxationFactor}, 
    {"getCorrection", _wrap_btAngularLimit_getCorrection}, 
    {"getSign", _wrap_btAngularLimit_getSign}, 
    {"getHalfRange", _wrap_btAngularLimit_getHalfRange}, 
    {"isLimit", _wrap_btAngularLimit_isLimit}, 
    {"fit", _wrap_btAngularLimit_fit}, 
    {"getError", _wrap_btAngularLimit_getError}, 
    {"getLow", _wrap_btAngularLimit_getLow}, 
    {"getHigh", _wrap_btAngularLimit_getHigh}, 
    {0,0}
};
static swig_lua_attribute swig_btAngularLimit_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btAngularLimit_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btAngularLimit_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btAngularLimit_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btAngularLimit_bases[] = {0};
static const char *swig_btAngularLimit_base_names[] = {0};
static swig_lua_class _wrap_class_btAngularLimit = { "btAngularLimit", &SWIGTYPE_p_btAngularLimit,_wrap_new_btAngularLimit, swig_delete_btAngularLimit, swig_btAngularLimit_methods, swig_btAngularLimit_attributes, { "btAngularLimit", swig_btAngularLimit_cls_methods, swig_btAngularLimit_cls_attributes, swig_btAngularLimit_cls_constants }, swig_btAngularLimit_bases, swig_btAngularLimit_base_names };

static int _wrap_btContactConstraint_setContactManifold(lua_State* L) {
  int SWIG_arg = 0;
  btContactConstraint *arg1 = (btContactConstraint *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  SWIG_check_num_args("btContactConstraint::setContactManifold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactConstraint::setContactManifold",1,"btContactConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btContactConstraint::setContactManifold",2,"btPersistentManifold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactConstraint,0))){
    SWIG_fail_ptr("btContactConstraint_setContactManifold",1,SWIGTYPE_p_btContactConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btContactConstraint_setContactManifold",2,SWIGTYPE_p_btPersistentManifold);
  }
  
  (arg1)->setContactManifold(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactConstraint_getContactManifold__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btContactConstraint *arg1 = (btContactConstraint *) 0 ;
  btPersistentManifold *result = 0 ;
  
  SWIG_check_num_args("btContactConstraint::getContactManifold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactConstraint::getContactManifold",1,"btContactConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactConstraint,0))){
    SWIG_fail_ptr("btContactConstraint_getContactManifold",1,SWIGTYPE_p_btContactConstraint);
  }
  
  result = (btPersistentManifold *)(arg1)->getContactManifold();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPersistentManifold,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactConstraint_getContactManifold__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btContactConstraint *arg1 = (btContactConstraint *) 0 ;
  btPersistentManifold *result = 0 ;
  
  SWIG_check_num_args("btContactConstraint::getContactManifold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactConstraint::getContactManifold",1,"btContactConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactConstraint,0))){
    SWIG_fail_ptr("btContactConstraint_getContactManifold",1,SWIGTYPE_p_btContactConstraint);
  }
  
  result = (btPersistentManifold *)((btContactConstraint const *)arg1)->getContactManifold();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPersistentManifold,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactConstraint_getContactManifold(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btContactConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btContactConstraint_getContactManifold__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btContactConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btContactConstraint_getContactManifold__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btContactConstraint_getContactManifold'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btContactConstraint::getContactManifold()\n"
    "    btContactConstraint::getContactManifold() const\n");
  lua_error(L);return 0;
}


static int _wrap_btContactConstraint_getInfo1(lua_State* L) {
  int SWIG_arg = 0;
  btContactConstraint *arg1 = (btContactConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  SWIG_check_num_args("btContactConstraint::getInfo1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactConstraint::getInfo1",1,"btContactConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btContactConstraint::getInfo1",2,"btTypedConstraint::btConstraintInfo1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactConstraint,0))){
    SWIG_fail_ptr("btContactConstraint_getInfo1",1,SWIGTYPE_p_btContactConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo1,0))){
    SWIG_fail_ptr("btContactConstraint_getInfo1",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo1);
  }
  
  (arg1)->getInfo1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactConstraint_getInfo2(lua_State* L) {
  int SWIG_arg = 0;
  btContactConstraint *arg1 = (btContactConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  
  SWIG_check_num_args("btContactConstraint::getInfo2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactConstraint::getInfo2",1,"btContactConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btContactConstraint::getInfo2",2,"btTypedConstraint::btConstraintInfo2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactConstraint,0))){
    SWIG_fail_ptr("btContactConstraint_getInfo2",1,SWIGTYPE_p_btContactConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2,0))){
    SWIG_fail_ptr("btContactConstraint_getInfo2",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2);
  }
  
  (arg1)->getInfo2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactConstraint_buildJacobian(lua_State* L) {
  int SWIG_arg = 0;
  btContactConstraint *arg1 = (btContactConstraint *) 0 ;
  
  SWIG_check_num_args("btContactConstraint::buildJacobian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactConstraint::buildJacobian",1,"btContactConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactConstraint,0))){
    SWIG_fail_ptr("btContactConstraint_buildJacobian",1,SWIGTYPE_p_btContactConstraint);
  }
  
  (arg1)->buildJacobian();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btContactConstraint(void *obj) {
btContactConstraint *arg1 = (btContactConstraint *) obj;
delete arg1;
}
static swig_lua_method swig_btContactConstraint_methods[] = {
    {"setContactManifold", _wrap_btContactConstraint_setContactManifold}, 
    {"getContactManifold", _wrap_btContactConstraint_getContactManifold}, 
    {"getInfo1", _wrap_btContactConstraint_getInfo1}, 
    {"getInfo2", _wrap_btContactConstraint_getInfo2}, 
    {"buildJacobian", _wrap_btContactConstraint_buildJacobian}, 
    {0,0}
};
static swig_lua_attribute swig_btContactConstraint_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btContactConstraint_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btContactConstraint_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btContactConstraint_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btContactConstraint_bases[] = {0,0};
static const char *swig_btContactConstraint_base_names[] = {"btTypedConstraint *",0};
static swig_lua_class _wrap_class_btContactConstraint = { "btContactConstraint", &SWIGTYPE_p_btContactConstraint,0, swig_delete_btContactConstraint, swig_btContactConstraint_methods, swig_btContactConstraint_attributes, { "btContactConstraint", swig_btContactConstraint_cls_methods, swig_btContactConstraint_cls_attributes, swig_btContactConstraint_cls_constants }, swig_btContactConstraint_bases, swig_btContactConstraint_base_names };

static int _wrap_resolveSingleCollision(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btContactSolverInfo *arg5 = 0 ;
  btScalar arg6 ;
  btScalar result;
  
  SWIG_check_num_args("resolveSingleCollision",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("resolveSingleCollision",1,"btRigidBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("resolveSingleCollision",2,"btCollisionObject *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("resolveSingleCollision",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("resolveSingleCollision",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("resolveSingleCollision",5,"btContactSolverInfo const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("resolveSingleCollision",6,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("resolveSingleCollision",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("resolveSingleCollision",2,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("resolveSingleCollision",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("resolveSingleCollision",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btContactSolverInfo,0))){
    SWIG_fail_ptr("resolveSingleCollision",5,SWIGTYPE_p_btContactSolverInfo);
  }
  
  arg6 = (btScalar)lua_tonumber(L, 6);
  result = (btScalar)resolveSingleCollision(arg1,arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btContactSolverInfo const &)*arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_resolveSingleBilateral(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btRigidBody *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btScalar *arg7 = 0 ;
  btScalar arg8 ;
  
  SWIG_check_num_args("resolveSingleBilateral",8,8)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("resolveSingleBilateral",1,"btRigidBody &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("resolveSingleBilateral",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("resolveSingleBilateral",3,"btRigidBody &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("resolveSingleBilateral",4,"btVector3 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("resolveSingleBilateral",5,"btScalar");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("resolveSingleBilateral",6,"btVector3 const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("resolveSingleBilateral",7,"btScalar &");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("resolveSingleBilateral",8,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("resolveSingleBilateral",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("resolveSingleBilateral",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("resolveSingleBilateral",3,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("resolveSingleBilateral",4,SWIGTYPE_p_btVector3);
  }
  
  arg5 = (btScalar)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("resolveSingleBilateral",6,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("resolveSingleBilateral",7,SWIGTYPE_p_float);
  }
  
  arg8 = (btScalar)lua_tonumber(L, 8);
  resolveSingleBilateral(*arg1,(btVector3 const &)*arg2,*arg3,(btVector3 const &)*arg4,arg5,(btVector3 const &)*arg6,*arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_tau_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_tau",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_tau",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_tau",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_tau_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_tau = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_tau_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_tau",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_tau",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_tau_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (btScalar) ((arg1)->m_tau);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_damping_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_damping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_damping",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_damping",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_damping_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_damping = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_damping_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_damping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_damping",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_damping_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (btScalar) ((arg1)->m_damping);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_friction_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_friction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_friction",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_friction",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_friction_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_friction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_friction_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_friction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_friction",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_friction_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (btScalar) ((arg1)->m_friction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_timeStep_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_timeStep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_timeStep",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_timeStep",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_timeStep_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_timeStep = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_timeStep_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_timeStep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_timeStep",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_timeStep_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (btScalar) ((arg1)->m_timeStep);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_restitution_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_restitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_restitution",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_restitution",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_restitution_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_restitution = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_restitution_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_restitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_restitution",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_restitution_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (btScalar) ((arg1)->m_restitution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_numIterations_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_numIterations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_numIterations",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_numIterations",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_numIterations_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numIterations = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_numIterations_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_numIterations",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_numIterations",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_numIterations_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (int) ((arg1)->m_numIterations);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_maxErrorReduction_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_maxErrorReduction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_maxErrorReduction",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_maxErrorReduction",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_maxErrorReduction_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_maxErrorReduction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_maxErrorReduction_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_maxErrorReduction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_maxErrorReduction",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_maxErrorReduction_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (btScalar) ((arg1)->m_maxErrorReduction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_sor_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_sor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_sor",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_sor",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_sor_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_sor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_sor_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_sor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_sor",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_sor_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (btScalar) ((arg1)->m_sor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_erp_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_erp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_erp",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_erp",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_erp_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_erp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_erp_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_erp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_erp",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_erp_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (btScalar) ((arg1)->m_erp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_erp2_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_erp2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_erp2",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_erp2",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_erp2_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_erp2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_erp2_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_erp2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_erp2",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_erp2_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (btScalar) ((arg1)->m_erp2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_globalCfm_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_globalCfm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_globalCfm",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_globalCfm",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_globalCfm_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_globalCfm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_globalCfm_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_globalCfm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_globalCfm",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_globalCfm_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (btScalar) ((arg1)->m_globalCfm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_splitImpulse_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_splitImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_splitImpulse",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_splitImpulse",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_splitImpulse_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_splitImpulse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_splitImpulse_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_splitImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_splitImpulse",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_splitImpulse_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (int) ((arg1)->m_splitImpulse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_splitImpulsePenetrationThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_splitImpulsePenetrationThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_splitImpulsePenetrationThreshold",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_splitImpulsePenetrationThreshold",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_splitImpulsePenetrationThreshold_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_splitImpulsePenetrationThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_splitImpulsePenetrationThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_splitImpulsePenetrationThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_splitImpulsePenetrationThreshold",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_splitImpulsePenetrationThreshold_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (btScalar) ((arg1)->m_splitImpulsePenetrationThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_splitImpulseTurnErp_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_splitImpulseTurnErp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_splitImpulseTurnErp",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_splitImpulseTurnErp",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_splitImpulseTurnErp_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_splitImpulseTurnErp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_splitImpulseTurnErp_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_splitImpulseTurnErp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_splitImpulseTurnErp",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_splitImpulseTurnErp_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (btScalar) ((arg1)->m_splitImpulseTurnErp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_linearSlop_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_linearSlop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_linearSlop",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_linearSlop",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_linearSlop_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_linearSlop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_linearSlop_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_linearSlop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_linearSlop",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_linearSlop_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (btScalar) ((arg1)->m_linearSlop);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_warmstartingFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_warmstartingFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_warmstartingFactor",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_warmstartingFactor",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_warmstartingFactor_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_warmstartingFactor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_warmstartingFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_warmstartingFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_warmstartingFactor",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_warmstartingFactor_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (btScalar) ((arg1)->m_warmstartingFactor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_solverMode_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_solverMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_solverMode",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_solverMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_solverMode_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_solverMode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_solverMode_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_solverMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_solverMode",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_solverMode_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (int) ((arg1)->m_solverMode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_restingContactRestitutionThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_restingContactRestitutionThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_restingContactRestitutionThreshold",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_restingContactRestitutionThreshold",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_restingContactRestitutionThreshold_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_restingContactRestitutionThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_restingContactRestitutionThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_restingContactRestitutionThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_restingContactRestitutionThreshold",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_restingContactRestitutionThreshold_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (int) ((arg1)->m_restingContactRestitutionThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_minimumSolverBatchSize_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_minimumSolverBatchSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_minimumSolverBatchSize",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_minimumSolverBatchSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_minimumSolverBatchSize_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_minimumSolverBatchSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_minimumSolverBatchSize_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_minimumSolverBatchSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_minimumSolverBatchSize",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_minimumSolverBatchSize_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (int) ((arg1)->m_minimumSolverBatchSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_maxGyroscopicForce_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_maxGyroscopicForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_maxGyroscopicForce",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_maxGyroscopicForce",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_maxGyroscopicForce_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_maxGyroscopicForce = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_maxGyroscopicForce_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_maxGyroscopicForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_maxGyroscopicForce",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_maxGyroscopicForce_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (btScalar) ((arg1)->m_maxGyroscopicForce);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_singleAxisRollingFrictionThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoData::m_singleAxisRollingFrictionThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_singleAxisRollingFrictionThreshold",1,"btContactSolverInfoData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoData::m_singleAxisRollingFrictionThreshold",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_singleAxisRollingFrictionThreshold_set",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_singleAxisRollingFrictionThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoData_m_singleAxisRollingFrictionThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btContactSolverInfoData::m_singleAxisRollingFrictionThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoData::m_singleAxisRollingFrictionThreshold",1,"btContactSolverInfoData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoData,0))){
    SWIG_fail_ptr("btContactSolverInfoData_m_singleAxisRollingFrictionThreshold_get",1,SWIGTYPE_p_btContactSolverInfoData);
  }
  
  result = (btScalar) ((arg1)->m_singleAxisRollingFrictionThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btContactSolverInfoData(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoData *result = 0 ;
  
  SWIG_check_num_args("btContactSolverInfoData::btContactSolverInfoData",0,0)
  result = (btContactSolverInfoData *)new btContactSolverInfoData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btContactSolverInfoData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btContactSolverInfoData(void *obj) {
btContactSolverInfoData *arg1 = (btContactSolverInfoData *) obj;
delete arg1;
}
static swig_lua_method swig_btContactSolverInfoData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btContactSolverInfoData_attributes[] = {
    { "m_tau", _wrap_btContactSolverInfoData_m_tau_get, _wrap_btContactSolverInfoData_m_tau_set},
    { "m_damping", _wrap_btContactSolverInfoData_m_damping_get, _wrap_btContactSolverInfoData_m_damping_set},
    { "m_friction", _wrap_btContactSolverInfoData_m_friction_get, _wrap_btContactSolverInfoData_m_friction_set},
    { "m_timeStep", _wrap_btContactSolverInfoData_m_timeStep_get, _wrap_btContactSolverInfoData_m_timeStep_set},
    { "m_restitution", _wrap_btContactSolverInfoData_m_restitution_get, _wrap_btContactSolverInfoData_m_restitution_set},
    { "m_numIterations", _wrap_btContactSolverInfoData_m_numIterations_get, _wrap_btContactSolverInfoData_m_numIterations_set},
    { "m_maxErrorReduction", _wrap_btContactSolverInfoData_m_maxErrorReduction_get, _wrap_btContactSolverInfoData_m_maxErrorReduction_set},
    { "m_sor", _wrap_btContactSolverInfoData_m_sor_get, _wrap_btContactSolverInfoData_m_sor_set},
    { "m_erp", _wrap_btContactSolverInfoData_m_erp_get, _wrap_btContactSolverInfoData_m_erp_set},
    { "m_erp2", _wrap_btContactSolverInfoData_m_erp2_get, _wrap_btContactSolverInfoData_m_erp2_set},
    { "m_globalCfm", _wrap_btContactSolverInfoData_m_globalCfm_get, _wrap_btContactSolverInfoData_m_globalCfm_set},
    { "m_splitImpulse", _wrap_btContactSolverInfoData_m_splitImpulse_get, _wrap_btContactSolverInfoData_m_splitImpulse_set},
    { "m_splitImpulsePenetrationThreshold", _wrap_btContactSolverInfoData_m_splitImpulsePenetrationThreshold_get, _wrap_btContactSolverInfoData_m_splitImpulsePenetrationThreshold_set},
    { "m_splitImpulseTurnErp", _wrap_btContactSolverInfoData_m_splitImpulseTurnErp_get, _wrap_btContactSolverInfoData_m_splitImpulseTurnErp_set},
    { "m_linearSlop", _wrap_btContactSolverInfoData_m_linearSlop_get, _wrap_btContactSolverInfoData_m_linearSlop_set},
    { "m_warmstartingFactor", _wrap_btContactSolverInfoData_m_warmstartingFactor_get, _wrap_btContactSolverInfoData_m_warmstartingFactor_set},
    { "m_solverMode", _wrap_btContactSolverInfoData_m_solverMode_get, _wrap_btContactSolverInfoData_m_solverMode_set},
    { "m_restingContactRestitutionThreshold", _wrap_btContactSolverInfoData_m_restingContactRestitutionThreshold_get, _wrap_btContactSolverInfoData_m_restingContactRestitutionThreshold_set},
    { "m_minimumSolverBatchSize", _wrap_btContactSolverInfoData_m_minimumSolverBatchSize_get, _wrap_btContactSolverInfoData_m_minimumSolverBatchSize_set},
    { "m_maxGyroscopicForce", _wrap_btContactSolverInfoData_m_maxGyroscopicForce_get, _wrap_btContactSolverInfoData_m_maxGyroscopicForce_set},
    { "m_singleAxisRollingFrictionThreshold", _wrap_btContactSolverInfoData_m_singleAxisRollingFrictionThreshold_get, _wrap_btContactSolverInfoData_m_singleAxisRollingFrictionThreshold_set},
    {0,0,0}
};
static swig_lua_attribute swig_btContactSolverInfoData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btContactSolverInfoData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btContactSolverInfoData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btContactSolverInfoData_bases[] = {0};
static const char *swig_btContactSolverInfoData_base_names[] = {0};
static swig_lua_class _wrap_class_btContactSolverInfoData = { "btContactSolverInfoData", &SWIGTYPE_p_btContactSolverInfoData,_wrap_new_btContactSolverInfoData, swig_delete_btContactSolverInfoData, swig_btContactSolverInfoData_methods, swig_btContactSolverInfoData_attributes, { "btContactSolverInfoData", swig_btContactSolverInfoData_cls_methods, swig_btContactSolverInfoData_cls_attributes, swig_btContactSolverInfoData_cls_constants }, swig_btContactSolverInfoData_bases, swig_btContactSolverInfoData_base_names };

static int _wrap_new_btContactSolverInfo(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfo *result = 0 ;
  
  SWIG_check_num_args("btContactSolverInfo::btContactSolverInfo",0,0)
  result = (btContactSolverInfo *)new btContactSolverInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btContactSolverInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btContactSolverInfo(void *obj) {
btContactSolverInfo *arg1 = (btContactSolverInfo *) obj;
delete arg1;
}
static swig_lua_method swig_btContactSolverInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btContactSolverInfo_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btContactSolverInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btContactSolverInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btContactSolverInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btContactSolverInfo_bases[] = {0,0};
static const char *swig_btContactSolverInfo_base_names[] = {"btContactSolverInfoData *",0};
static swig_lua_class _wrap_class_btContactSolverInfo = { "btContactSolverInfo", &SWIGTYPE_p_btContactSolverInfo,_wrap_new_btContactSolverInfo, swig_delete_btContactSolverInfo, swig_btContactSolverInfo_methods, swig_btContactSolverInfo_attributes, { "btContactSolverInfo", swig_btContactSolverInfo_cls_methods, swig_btContactSolverInfo_cls_attributes, swig_btContactSolverInfo_cls_constants }, swig_btContactSolverInfo_bases, swig_btContactSolverInfo_base_names };

static int _wrap_btContactSolverInfoDoubleData_m_tau_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_tau",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_tau",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_tau",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_tau_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_tau = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_tau_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_tau",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_tau",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_tau_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (double) ((arg1)->m_tau);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_damping_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_damping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_damping",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_damping",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_damping_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_damping = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_damping_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_damping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_damping",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_damping_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (double) ((arg1)->m_damping);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_friction_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_friction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_friction",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_friction",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_friction_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_friction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_friction_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_friction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_friction",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_friction_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (double) ((arg1)->m_friction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_timeStep_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_timeStep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_timeStep",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_timeStep",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_timeStep_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_timeStep = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_timeStep_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_timeStep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_timeStep",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_timeStep_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (double) ((arg1)->m_timeStep);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_restitution_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_restitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_restitution",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_restitution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_restitution_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_restitution = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_restitution_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_restitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_restitution",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_restitution_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (double) ((arg1)->m_restitution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_maxErrorReduction_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_maxErrorReduction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_maxErrorReduction",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_maxErrorReduction",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_maxErrorReduction_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_maxErrorReduction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_maxErrorReduction_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_maxErrorReduction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_maxErrorReduction",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_maxErrorReduction_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (double) ((arg1)->m_maxErrorReduction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_sor_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_sor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_sor",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_sor",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_sor_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_sor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_sor_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_sor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_sor",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_sor_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (double) ((arg1)->m_sor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_erp_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_erp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_erp",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_erp",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_erp_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_erp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_erp_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_erp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_erp",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_erp_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (double) ((arg1)->m_erp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_erp2_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_erp2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_erp2",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_erp2",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_erp2_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_erp2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_erp2_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_erp2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_erp2",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_erp2_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (double) ((arg1)->m_erp2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_globalCfm_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_globalCfm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_globalCfm",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_globalCfm",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_globalCfm_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_globalCfm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_globalCfm_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_globalCfm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_globalCfm",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_globalCfm_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (double) ((arg1)->m_globalCfm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_splitImpulsePenetrationThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_splitImpulsePenetrationThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_splitImpulsePenetrationThreshold",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_splitImpulsePenetrationThreshold",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_splitImpulsePenetrationThreshold_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_splitImpulsePenetrationThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_splitImpulsePenetrationThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_splitImpulsePenetrationThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_splitImpulsePenetrationThreshold",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_splitImpulsePenetrationThreshold_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (double) ((arg1)->m_splitImpulsePenetrationThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_splitImpulseTurnErp_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_splitImpulseTurnErp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_splitImpulseTurnErp",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_splitImpulseTurnErp",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_splitImpulseTurnErp_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_splitImpulseTurnErp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_splitImpulseTurnErp_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_splitImpulseTurnErp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_splitImpulseTurnErp",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_splitImpulseTurnErp_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (double) ((arg1)->m_splitImpulseTurnErp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_linearSlop_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_linearSlop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_linearSlop",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_linearSlop",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_linearSlop_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_linearSlop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_linearSlop_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_linearSlop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_linearSlop",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_linearSlop_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (double) ((arg1)->m_linearSlop);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_warmstartingFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_warmstartingFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_warmstartingFactor",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_warmstartingFactor",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_warmstartingFactor_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_warmstartingFactor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_warmstartingFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_warmstartingFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_warmstartingFactor",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_warmstartingFactor_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (double) ((arg1)->m_warmstartingFactor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_maxGyroscopicForce_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_maxGyroscopicForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_maxGyroscopicForce",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_maxGyroscopicForce",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_maxGyroscopicForce_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_maxGyroscopicForce = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_maxGyroscopicForce_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_maxGyroscopicForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_maxGyroscopicForce",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_maxGyroscopicForce_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (double) ((arg1)->m_maxGyroscopicForce);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_singleAxisRollingFrictionThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_singleAxisRollingFrictionThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_singleAxisRollingFrictionThreshold",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_singleAxisRollingFrictionThreshold",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_singleAxisRollingFrictionThreshold_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_singleAxisRollingFrictionThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_singleAxisRollingFrictionThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_singleAxisRollingFrictionThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_singleAxisRollingFrictionThreshold",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_singleAxisRollingFrictionThreshold_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (double) ((arg1)->m_singleAxisRollingFrictionThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_numIterations_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_numIterations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_numIterations",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_numIterations",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_numIterations_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numIterations = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_numIterations_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_numIterations",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_numIterations",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_numIterations_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (int) ((arg1)->m_numIterations);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_solverMode_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_solverMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_solverMode",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_solverMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_solverMode_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_solverMode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_solverMode_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_solverMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_solverMode",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_solverMode_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (int) ((arg1)->m_solverMode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_restingContactRestitutionThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_restingContactRestitutionThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_restingContactRestitutionThreshold",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_restingContactRestitutionThreshold",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_restingContactRestitutionThreshold_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_restingContactRestitutionThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_restingContactRestitutionThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_restingContactRestitutionThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_restingContactRestitutionThreshold",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_restingContactRestitutionThreshold_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (int) ((arg1)->m_restingContactRestitutionThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_minimumSolverBatchSize_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_minimumSolverBatchSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_minimumSolverBatchSize",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_minimumSolverBatchSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_minimumSolverBatchSize_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_minimumSolverBatchSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_minimumSolverBatchSize_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_minimumSolverBatchSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_minimumSolverBatchSize",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_minimumSolverBatchSize_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (int) ((arg1)->m_minimumSolverBatchSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_splitImpulse_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_splitImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_splitImpulse",1,"btContactSolverInfoDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_splitImpulse",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_splitImpulse_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_splitImpulse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_splitImpulse_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_splitImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_splitImpulse",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_splitImpulse_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (int) ((arg1)->m_splitImpulse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_padding_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_padding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_padding",1,"btContactSolverInfoDoubleData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_padding",2,"char [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_padding_set",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoDoubleData_m_padding_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::m_padding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoDoubleData::m_padding",1,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btContactSolverInfoDoubleData_m_padding_get",1,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  result = (char *)(char *) ((arg1)->m_padding);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btContactSolverInfoDoubleData(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoDoubleData *result = 0 ;
  
  SWIG_check_num_args("btContactSolverInfoDoubleData::btContactSolverInfoDoubleData",0,0)
  result = (btContactSolverInfoDoubleData *)new btContactSolverInfoDoubleData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btContactSolverInfoDoubleData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btContactSolverInfoDoubleData(void *obj) {
btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) obj;
delete arg1;
}
static swig_lua_method swig_btContactSolverInfoDoubleData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btContactSolverInfoDoubleData_attributes[] = {
    { "m_tau", _wrap_btContactSolverInfoDoubleData_m_tau_get, _wrap_btContactSolverInfoDoubleData_m_tau_set},
    { "m_damping", _wrap_btContactSolverInfoDoubleData_m_damping_get, _wrap_btContactSolverInfoDoubleData_m_damping_set},
    { "m_friction", _wrap_btContactSolverInfoDoubleData_m_friction_get, _wrap_btContactSolverInfoDoubleData_m_friction_set},
    { "m_timeStep", _wrap_btContactSolverInfoDoubleData_m_timeStep_get, _wrap_btContactSolverInfoDoubleData_m_timeStep_set},
    { "m_restitution", _wrap_btContactSolverInfoDoubleData_m_restitution_get, _wrap_btContactSolverInfoDoubleData_m_restitution_set},
    { "m_maxErrorReduction", _wrap_btContactSolverInfoDoubleData_m_maxErrorReduction_get, _wrap_btContactSolverInfoDoubleData_m_maxErrorReduction_set},
    { "m_sor", _wrap_btContactSolverInfoDoubleData_m_sor_get, _wrap_btContactSolverInfoDoubleData_m_sor_set},
    { "m_erp", _wrap_btContactSolverInfoDoubleData_m_erp_get, _wrap_btContactSolverInfoDoubleData_m_erp_set},
    { "m_erp2", _wrap_btContactSolverInfoDoubleData_m_erp2_get, _wrap_btContactSolverInfoDoubleData_m_erp2_set},
    { "m_globalCfm", _wrap_btContactSolverInfoDoubleData_m_globalCfm_get, _wrap_btContactSolverInfoDoubleData_m_globalCfm_set},
    { "m_splitImpulsePenetrationThreshold", _wrap_btContactSolverInfoDoubleData_m_splitImpulsePenetrationThreshold_get, _wrap_btContactSolverInfoDoubleData_m_splitImpulsePenetrationThreshold_set},
    { "m_splitImpulseTurnErp", _wrap_btContactSolverInfoDoubleData_m_splitImpulseTurnErp_get, _wrap_btContactSolverInfoDoubleData_m_splitImpulseTurnErp_set},
    { "m_linearSlop", _wrap_btContactSolverInfoDoubleData_m_linearSlop_get, _wrap_btContactSolverInfoDoubleData_m_linearSlop_set},
    { "m_warmstartingFactor", _wrap_btContactSolverInfoDoubleData_m_warmstartingFactor_get, _wrap_btContactSolverInfoDoubleData_m_warmstartingFactor_set},
    { "m_maxGyroscopicForce", _wrap_btContactSolverInfoDoubleData_m_maxGyroscopicForce_get, _wrap_btContactSolverInfoDoubleData_m_maxGyroscopicForce_set},
    { "m_singleAxisRollingFrictionThreshold", _wrap_btContactSolverInfoDoubleData_m_singleAxisRollingFrictionThreshold_get, _wrap_btContactSolverInfoDoubleData_m_singleAxisRollingFrictionThreshold_set},
    { "m_numIterations", _wrap_btContactSolverInfoDoubleData_m_numIterations_get, _wrap_btContactSolverInfoDoubleData_m_numIterations_set},
    { "m_solverMode", _wrap_btContactSolverInfoDoubleData_m_solverMode_get, _wrap_btContactSolverInfoDoubleData_m_solverMode_set},
    { "m_restingContactRestitutionThreshold", _wrap_btContactSolverInfoDoubleData_m_restingContactRestitutionThreshold_get, _wrap_btContactSolverInfoDoubleData_m_restingContactRestitutionThreshold_set},
    { "m_minimumSolverBatchSize", _wrap_btContactSolverInfoDoubleData_m_minimumSolverBatchSize_get, _wrap_btContactSolverInfoDoubleData_m_minimumSolverBatchSize_set},
    { "m_splitImpulse", _wrap_btContactSolverInfoDoubleData_m_splitImpulse_get, _wrap_btContactSolverInfoDoubleData_m_splitImpulse_set},
    { "m_padding", _wrap_btContactSolverInfoDoubleData_m_padding_get, _wrap_btContactSolverInfoDoubleData_m_padding_set},
    {0,0,0}
};
static swig_lua_attribute swig_btContactSolverInfoDoubleData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btContactSolverInfoDoubleData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btContactSolverInfoDoubleData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btContactSolverInfoDoubleData_bases[] = {0};
static const char *swig_btContactSolverInfoDoubleData_base_names[] = {0};
static swig_lua_class _wrap_class_btContactSolverInfoDoubleData = { "btContactSolverInfoDoubleData", &SWIGTYPE_p_btContactSolverInfoDoubleData,_wrap_new_btContactSolverInfoDoubleData, swig_delete_btContactSolverInfoDoubleData, swig_btContactSolverInfoDoubleData_methods, swig_btContactSolverInfoDoubleData_attributes, { "btContactSolverInfoDoubleData", swig_btContactSolverInfoDoubleData_cls_methods, swig_btContactSolverInfoDoubleData_cls_attributes, swig_btContactSolverInfoDoubleData_cls_constants }, swig_btContactSolverInfoDoubleData_bases, swig_btContactSolverInfoDoubleData_base_names };

static int _wrap_btContactSolverInfoFloatData_m_tau_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_tau",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_tau",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_tau",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_tau_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_tau = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_tau_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_tau",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_tau",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_tau_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (float) ((arg1)->m_tau);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_damping_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_damping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_damping",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_damping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_damping_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_damping = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_damping_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_damping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_damping",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_damping_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (float) ((arg1)->m_damping);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_friction_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_friction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_friction",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_friction",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_friction_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_friction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_friction_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_friction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_friction",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_friction_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (float) ((arg1)->m_friction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_timeStep_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_timeStep",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_timeStep",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_timeStep",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_timeStep_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_timeStep = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_timeStep_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_timeStep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_timeStep",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_timeStep_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (float) ((arg1)->m_timeStep);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_restitution_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_restitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_restitution",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_restitution",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_restitution_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_restitution = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_restitution_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_restitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_restitution",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_restitution_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (float) ((arg1)->m_restitution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_maxErrorReduction_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_maxErrorReduction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_maxErrorReduction",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_maxErrorReduction",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_maxErrorReduction_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_maxErrorReduction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_maxErrorReduction_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_maxErrorReduction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_maxErrorReduction",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_maxErrorReduction_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (float) ((arg1)->m_maxErrorReduction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_sor_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_sor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_sor",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_sor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_sor_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_sor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_sor_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_sor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_sor",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_sor_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (float) ((arg1)->m_sor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_erp_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_erp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_erp",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_erp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_erp_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_erp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_erp_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_erp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_erp",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_erp_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (float) ((arg1)->m_erp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_erp2_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_erp2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_erp2",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_erp2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_erp2_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_erp2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_erp2_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_erp2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_erp2",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_erp2_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (float) ((arg1)->m_erp2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_globalCfm_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_globalCfm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_globalCfm",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_globalCfm",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_globalCfm_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_globalCfm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_globalCfm_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_globalCfm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_globalCfm",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_globalCfm_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (float) ((arg1)->m_globalCfm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_splitImpulsePenetrationThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_splitImpulsePenetrationThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_splitImpulsePenetrationThreshold",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_splitImpulsePenetrationThreshold",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_splitImpulsePenetrationThreshold_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_splitImpulsePenetrationThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_splitImpulsePenetrationThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_splitImpulsePenetrationThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_splitImpulsePenetrationThreshold",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_splitImpulsePenetrationThreshold_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (float) ((arg1)->m_splitImpulsePenetrationThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_splitImpulseTurnErp_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_splitImpulseTurnErp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_splitImpulseTurnErp",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_splitImpulseTurnErp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_splitImpulseTurnErp_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_splitImpulseTurnErp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_splitImpulseTurnErp_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_splitImpulseTurnErp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_splitImpulseTurnErp",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_splitImpulseTurnErp_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (float) ((arg1)->m_splitImpulseTurnErp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_linearSlop_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_linearSlop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_linearSlop",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_linearSlop",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_linearSlop_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_linearSlop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_linearSlop_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_linearSlop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_linearSlop",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_linearSlop_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (float) ((arg1)->m_linearSlop);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_warmstartingFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_warmstartingFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_warmstartingFactor",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_warmstartingFactor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_warmstartingFactor_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_warmstartingFactor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_warmstartingFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_warmstartingFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_warmstartingFactor",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_warmstartingFactor_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (float) ((arg1)->m_warmstartingFactor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_maxGyroscopicForce_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_maxGyroscopicForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_maxGyroscopicForce",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_maxGyroscopicForce",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_maxGyroscopicForce_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_maxGyroscopicForce = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_maxGyroscopicForce_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_maxGyroscopicForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_maxGyroscopicForce",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_maxGyroscopicForce_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (float) ((arg1)->m_maxGyroscopicForce);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_singleAxisRollingFrictionThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_singleAxisRollingFrictionThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_singleAxisRollingFrictionThreshold",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_singleAxisRollingFrictionThreshold",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_singleAxisRollingFrictionThreshold_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_singleAxisRollingFrictionThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_singleAxisRollingFrictionThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_singleAxisRollingFrictionThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_singleAxisRollingFrictionThreshold",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_singleAxisRollingFrictionThreshold_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (float) ((arg1)->m_singleAxisRollingFrictionThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_numIterations_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_numIterations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_numIterations",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_numIterations",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_numIterations_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_numIterations = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_numIterations_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_numIterations",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_numIterations",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_numIterations_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (int) ((arg1)->m_numIterations);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_solverMode_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_solverMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_solverMode",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_solverMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_solverMode_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_solverMode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_solverMode_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_solverMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_solverMode",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_solverMode_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (int) ((arg1)->m_solverMode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_restingContactRestitutionThreshold_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_restingContactRestitutionThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_restingContactRestitutionThreshold",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_restingContactRestitutionThreshold",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_restingContactRestitutionThreshold_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_restingContactRestitutionThreshold = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_restingContactRestitutionThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_restingContactRestitutionThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_restingContactRestitutionThreshold",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_restingContactRestitutionThreshold_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (int) ((arg1)->m_restingContactRestitutionThreshold);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_minimumSolverBatchSize_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_minimumSolverBatchSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_minimumSolverBatchSize",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_minimumSolverBatchSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_minimumSolverBatchSize_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_minimumSolverBatchSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_minimumSolverBatchSize_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_minimumSolverBatchSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_minimumSolverBatchSize",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_minimumSolverBatchSize_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (int) ((arg1)->m_minimumSolverBatchSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_splitImpulse_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_splitImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_splitImpulse",1,"btContactSolverInfoFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_splitImpulse",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_splitImpulse_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_splitImpulse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_splitImpulse_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_splitImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_splitImpulse",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_splitImpulse_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (int) ((arg1)->m_splitImpulse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_padding_set(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  char *arg2 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_padding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_padding",1,"btContactSolverInfoFloatData *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btContactSolverInfoFloatData::m_padding",2,"char [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_padding_set",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btContactSolverInfoFloatData_m_padding_get(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::m_padding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btContactSolverInfoFloatData::m_padding",1,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btContactSolverInfoFloatData_m_padding_get",1,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  result = (char *)(char *) ((arg1)->m_padding);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btContactSolverInfoFloatData(lua_State* L) {
  int SWIG_arg = 0;
  btContactSolverInfoFloatData *result = 0 ;
  
  SWIG_check_num_args("btContactSolverInfoFloatData::btContactSolverInfoFloatData",0,0)
  result = (btContactSolverInfoFloatData *)new btContactSolverInfoFloatData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btContactSolverInfoFloatData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btContactSolverInfoFloatData(void *obj) {
btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) obj;
delete arg1;
}
static swig_lua_method swig_btContactSolverInfoFloatData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btContactSolverInfoFloatData_attributes[] = {
    { "m_tau", _wrap_btContactSolverInfoFloatData_m_tau_get, _wrap_btContactSolverInfoFloatData_m_tau_set},
    { "m_damping", _wrap_btContactSolverInfoFloatData_m_damping_get, _wrap_btContactSolverInfoFloatData_m_damping_set},
    { "m_friction", _wrap_btContactSolverInfoFloatData_m_friction_get, _wrap_btContactSolverInfoFloatData_m_friction_set},
    { "m_timeStep", _wrap_btContactSolverInfoFloatData_m_timeStep_get, _wrap_btContactSolverInfoFloatData_m_timeStep_set},
    { "m_restitution", _wrap_btContactSolverInfoFloatData_m_restitution_get, _wrap_btContactSolverInfoFloatData_m_restitution_set},
    { "m_maxErrorReduction", _wrap_btContactSolverInfoFloatData_m_maxErrorReduction_get, _wrap_btContactSolverInfoFloatData_m_maxErrorReduction_set},
    { "m_sor", _wrap_btContactSolverInfoFloatData_m_sor_get, _wrap_btContactSolverInfoFloatData_m_sor_set},
    { "m_erp", _wrap_btContactSolverInfoFloatData_m_erp_get, _wrap_btContactSolverInfoFloatData_m_erp_set},
    { "m_erp2", _wrap_btContactSolverInfoFloatData_m_erp2_get, _wrap_btContactSolverInfoFloatData_m_erp2_set},
    { "m_globalCfm", _wrap_btContactSolverInfoFloatData_m_globalCfm_get, _wrap_btContactSolverInfoFloatData_m_globalCfm_set},
    { "m_splitImpulsePenetrationThreshold", _wrap_btContactSolverInfoFloatData_m_splitImpulsePenetrationThreshold_get, _wrap_btContactSolverInfoFloatData_m_splitImpulsePenetrationThreshold_set},
    { "m_splitImpulseTurnErp", _wrap_btContactSolverInfoFloatData_m_splitImpulseTurnErp_get, _wrap_btContactSolverInfoFloatData_m_splitImpulseTurnErp_set},
    { "m_linearSlop", _wrap_btContactSolverInfoFloatData_m_linearSlop_get, _wrap_btContactSolverInfoFloatData_m_linearSlop_set},
    { "m_warmstartingFactor", _wrap_btContactSolverInfoFloatData_m_warmstartingFactor_get, _wrap_btContactSolverInfoFloatData_m_warmstartingFactor_set},
    { "m_maxGyroscopicForce", _wrap_btContactSolverInfoFloatData_m_maxGyroscopicForce_get, _wrap_btContactSolverInfoFloatData_m_maxGyroscopicForce_set},
    { "m_singleAxisRollingFrictionThreshold", _wrap_btContactSolverInfoFloatData_m_singleAxisRollingFrictionThreshold_get, _wrap_btContactSolverInfoFloatData_m_singleAxisRollingFrictionThreshold_set},
    { "m_numIterations", _wrap_btContactSolverInfoFloatData_m_numIterations_get, _wrap_btContactSolverInfoFloatData_m_numIterations_set},
    { "m_solverMode", _wrap_btContactSolverInfoFloatData_m_solverMode_get, _wrap_btContactSolverInfoFloatData_m_solverMode_set},
    { "m_restingContactRestitutionThreshold", _wrap_btContactSolverInfoFloatData_m_restingContactRestitutionThreshold_get, _wrap_btContactSolverInfoFloatData_m_restingContactRestitutionThreshold_set},
    { "m_minimumSolverBatchSize", _wrap_btContactSolverInfoFloatData_m_minimumSolverBatchSize_get, _wrap_btContactSolverInfoFloatData_m_minimumSolverBatchSize_set},
    { "m_splitImpulse", _wrap_btContactSolverInfoFloatData_m_splitImpulse_get, _wrap_btContactSolverInfoFloatData_m_splitImpulse_set},
    { "m_padding", _wrap_btContactSolverInfoFloatData_m_padding_get, _wrap_btContactSolverInfoFloatData_m_padding_set},
    {0,0,0}
};
static swig_lua_attribute swig_btContactSolverInfoFloatData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btContactSolverInfoFloatData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btContactSolverInfoFloatData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btContactSolverInfoFloatData_bases[] = {0};
static const char *swig_btContactSolverInfoFloatData_base_names[] = {0};
static swig_lua_class _wrap_class_btContactSolverInfoFloatData = { "btContactSolverInfoFloatData", &SWIGTYPE_p_btContactSolverInfoFloatData,_wrap_new_btContactSolverInfoFloatData, swig_delete_btContactSolverInfoFloatData, swig_btContactSolverInfoFloatData_methods, swig_btContactSolverInfoFloatData_attributes, { "btContactSolverInfoFloatData", swig_btContactSolverInfoFloatData_cls_methods, swig_btContactSolverInfoFloatData_cls_attributes, swig_btContactSolverInfoFloatData_cls_constants }, swig_btContactSolverInfoFloatData_bases, swig_btContactSolverInfoFloatData_base_names };

static int _wrap_btRotationalLimitMotor_m_loLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_loLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_loLimit",1,"btRotationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRotationalLimitMotor::m_loLimit",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_loLimit_set",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_loLimit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_loLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_loLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_loLimit",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_loLimit_get",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (btScalar) ((arg1)->m_loLimit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_hiLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_hiLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_hiLimit",1,"btRotationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRotationalLimitMotor::m_hiLimit",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_hiLimit_set",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_hiLimit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_hiLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_hiLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_hiLimit",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_hiLimit_get",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (btScalar) ((arg1)->m_hiLimit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_targetVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_targetVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_targetVelocity",1,"btRotationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRotationalLimitMotor::m_targetVelocity",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_targetVelocity_set",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_targetVelocity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_targetVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_targetVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_targetVelocity",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_targetVelocity_get",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (btScalar) ((arg1)->m_targetVelocity);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_maxMotorForce_set(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_maxMotorForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_maxMotorForce",1,"btRotationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRotationalLimitMotor::m_maxMotorForce",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_maxMotorForce_set",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_maxMotorForce = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_maxMotorForce_get(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_maxMotorForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_maxMotorForce",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_maxMotorForce_get",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (btScalar) ((arg1)->m_maxMotorForce);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_maxLimitForce_set(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_maxLimitForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_maxLimitForce",1,"btRotationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRotationalLimitMotor::m_maxLimitForce",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_maxLimitForce_set",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_maxLimitForce = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_maxLimitForce_get(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_maxLimitForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_maxLimitForce",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_maxLimitForce_get",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (btScalar) ((arg1)->m_maxLimitForce);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_damping_set(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_damping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_damping",1,"btRotationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRotationalLimitMotor::m_damping",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_damping_set",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_damping = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_damping_get(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_damping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_damping",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_damping_get",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (btScalar) ((arg1)->m_damping);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_limitSoftness_set(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_limitSoftness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_limitSoftness",1,"btRotationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRotationalLimitMotor::m_limitSoftness",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_limitSoftness_set",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_limitSoftness = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_limitSoftness_get(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_limitSoftness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_limitSoftness",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_limitSoftness_get",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (btScalar) ((arg1)->m_limitSoftness);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_normalCFM_set(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_normalCFM",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_normalCFM",1,"btRotationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRotationalLimitMotor::m_normalCFM",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_normalCFM_set",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_normalCFM = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_normalCFM_get(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_normalCFM",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_normalCFM",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_normalCFM_get",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (btScalar) ((arg1)->m_normalCFM);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_stopERP_set(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_stopERP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_stopERP",1,"btRotationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRotationalLimitMotor::m_stopERP",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_stopERP_set",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_stopERP = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_stopERP_get(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_stopERP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_stopERP",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_stopERP_get",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (btScalar) ((arg1)->m_stopERP);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_stopCFM_set(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_stopCFM",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_stopCFM",1,"btRotationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRotationalLimitMotor::m_stopCFM",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_stopCFM_set",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_stopCFM = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_stopCFM_get(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_stopCFM",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_stopCFM",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_stopCFM_get",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (btScalar) ((arg1)->m_stopCFM);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_bounce_set(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_bounce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_bounce",1,"btRotationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRotationalLimitMotor::m_bounce",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_bounce_set",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_bounce = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_bounce_get(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_bounce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_bounce",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_bounce_get",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (btScalar) ((arg1)->m_bounce);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_enableMotor_set(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_enableMotor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_enableMotor",1,"btRotationalLimitMotor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btRotationalLimitMotor::m_enableMotor",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_enableMotor_set",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_enableMotor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_enableMotor_get(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  bool result;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_enableMotor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_enableMotor",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_enableMotor_get",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (bool) ((arg1)->m_enableMotor);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_currentLimitError_set(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_currentLimitError",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_currentLimitError",1,"btRotationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRotationalLimitMotor::m_currentLimitError",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_currentLimitError_set",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_currentLimitError = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_currentLimitError_get(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_currentLimitError",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_currentLimitError",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_currentLimitError_get",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (btScalar) ((arg1)->m_currentLimitError);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_currentPosition_set(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_currentPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_currentPosition",1,"btRotationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRotationalLimitMotor::m_currentPosition",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_currentPosition_set",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_currentPosition = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_currentPosition_get(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_currentPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_currentPosition",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_currentPosition_get",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (btScalar) ((arg1)->m_currentPosition);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_currentLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_currentLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_currentLimit",1,"btRotationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRotationalLimitMotor::m_currentLimit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_currentLimit_set",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_currentLimit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_currentLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  int result;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_currentLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_currentLimit",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_currentLimit_get",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (int) ((arg1)->m_currentLimit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_accumulatedImpulse_set(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_accumulatedImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_accumulatedImpulse",1,"btRotationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRotationalLimitMotor::m_accumulatedImpulse",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_accumulatedImpulse_set",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_accumulatedImpulse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_m_accumulatedImpulse_get(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRotationalLimitMotor::m_accumulatedImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::m_accumulatedImpulse",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_m_accumulatedImpulse_get",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (btScalar) ((arg1)->m_accumulatedImpulse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btRotationalLimitMotor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *result = 0 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::btRotationalLimitMotor",0,0)
  result = (btRotationalLimitMotor *)new btRotationalLimitMotor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRotationalLimitMotor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btRotationalLimitMotor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = 0 ;
  btRotationalLimitMotor *result = 0 ;
  
  SWIG_check_num_args("btRotationalLimitMotor::btRotationalLimitMotor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btRotationalLimitMotor::btRotationalLimitMotor",1,"btRotationalLimitMotor const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("new_btRotationalLimitMotor",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (btRotationalLimitMotor *)new btRotationalLimitMotor((btRotationalLimitMotor const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRotationalLimitMotor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btRotationalLimitMotor(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btRotationalLimitMotor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRotationalLimitMotor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_btRotationalLimitMotor__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btRotationalLimitMotor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btRotationalLimitMotor::btRotationalLimitMotor()\n"
    "    btRotationalLimitMotor::btRotationalLimitMotor(btRotationalLimitMotor const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btRotationalLimitMotor_isLimited(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  bool result;
  
  SWIG_check_num_args("btRotationalLimitMotor::isLimited",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::isLimited",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_isLimited",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (bool)(arg1)->isLimited();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_needApplyTorques(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  bool result;
  
  SWIG_check_num_args("btRotationalLimitMotor::needApplyTorques",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::needApplyTorques",1,"btRotationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_needApplyTorques",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  result = (bool)(arg1)->needApplyTorques();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_testLimitValue(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  int result;
  
  SWIG_check_num_args("btRotationalLimitMotor::testLimitValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::testLimitValue",1,"btRotationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRotationalLimitMotor::testLimitValue",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_testLimitValue",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (int)(arg1)->testLimitValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRotationalLimitMotor_solveAngularLimits(lua_State* L) {
  int SWIG_arg = 0;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  btRigidBody *arg5 = (btRigidBody *) 0 ;
  btRigidBody *arg6 = (btRigidBody *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRotationalLimitMotor::solveAngularLimits",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRotationalLimitMotor::solveAngularLimits",1,"btRotationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRotationalLimitMotor::solveAngularLimits",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btRotationalLimitMotor::solveAngularLimits",3,"btVector3 &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btRotationalLimitMotor::solveAngularLimits",4,"btScalar");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btRotationalLimitMotor::solveAngularLimits",5,"btRigidBody *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("btRotationalLimitMotor::solveAngularLimits",6,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_solveAngularLimits",1,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_solveAngularLimits",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_solveAngularLimits",5,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btRotationalLimitMotor_solveAngularLimits",6,SWIGTYPE_p_btRigidBody);
  }
  
  result = (btScalar)(arg1)->solveAngularLimits(arg2,*arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btRotationalLimitMotor(void *obj) {
btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) obj;
delete arg1;
}
static swig_lua_method swig_btRotationalLimitMotor_methods[] = {
    {"isLimited", _wrap_btRotationalLimitMotor_isLimited}, 
    {"needApplyTorques", _wrap_btRotationalLimitMotor_needApplyTorques}, 
    {"testLimitValue", _wrap_btRotationalLimitMotor_testLimitValue}, 
    {"solveAngularLimits", _wrap_btRotationalLimitMotor_solveAngularLimits}, 
    {0,0}
};
static swig_lua_attribute swig_btRotationalLimitMotor_attributes[] = {
    { "m_loLimit", _wrap_btRotationalLimitMotor_m_loLimit_get, _wrap_btRotationalLimitMotor_m_loLimit_set},
    { "m_hiLimit", _wrap_btRotationalLimitMotor_m_hiLimit_get, _wrap_btRotationalLimitMotor_m_hiLimit_set},
    { "m_targetVelocity", _wrap_btRotationalLimitMotor_m_targetVelocity_get, _wrap_btRotationalLimitMotor_m_targetVelocity_set},
    { "m_maxMotorForce", _wrap_btRotationalLimitMotor_m_maxMotorForce_get, _wrap_btRotationalLimitMotor_m_maxMotorForce_set},
    { "m_maxLimitForce", _wrap_btRotationalLimitMotor_m_maxLimitForce_get, _wrap_btRotationalLimitMotor_m_maxLimitForce_set},
    { "m_damping", _wrap_btRotationalLimitMotor_m_damping_get, _wrap_btRotationalLimitMotor_m_damping_set},
    { "m_limitSoftness", _wrap_btRotationalLimitMotor_m_limitSoftness_get, _wrap_btRotationalLimitMotor_m_limitSoftness_set},
    { "m_normalCFM", _wrap_btRotationalLimitMotor_m_normalCFM_get, _wrap_btRotationalLimitMotor_m_normalCFM_set},
    { "m_stopERP", _wrap_btRotationalLimitMotor_m_stopERP_get, _wrap_btRotationalLimitMotor_m_stopERP_set},
    { "m_stopCFM", _wrap_btRotationalLimitMotor_m_stopCFM_get, _wrap_btRotationalLimitMotor_m_stopCFM_set},
    { "m_bounce", _wrap_btRotationalLimitMotor_m_bounce_get, _wrap_btRotationalLimitMotor_m_bounce_set},
    { "m_enableMotor", _wrap_btRotationalLimitMotor_m_enableMotor_get, _wrap_btRotationalLimitMotor_m_enableMotor_set},
    { "m_currentLimitError", _wrap_btRotationalLimitMotor_m_currentLimitError_get, _wrap_btRotationalLimitMotor_m_currentLimitError_set},
    { "m_currentPosition", _wrap_btRotationalLimitMotor_m_currentPosition_get, _wrap_btRotationalLimitMotor_m_currentPosition_set},
    { "m_currentLimit", _wrap_btRotationalLimitMotor_m_currentLimit_get, _wrap_btRotationalLimitMotor_m_currentLimit_set},
    { "m_accumulatedImpulse", _wrap_btRotationalLimitMotor_m_accumulatedImpulse_get, _wrap_btRotationalLimitMotor_m_accumulatedImpulse_set},
    {0,0,0}
};
static swig_lua_attribute swig_btRotationalLimitMotor_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btRotationalLimitMotor_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btRotationalLimitMotor_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btRotationalLimitMotor_bases[] = {0};
static const char *swig_btRotationalLimitMotor_base_names[] = {0};
static swig_lua_class _wrap_class_btRotationalLimitMotor = { "btRotationalLimitMotor", &SWIGTYPE_p_btRotationalLimitMotor,_wrap_new_btRotationalLimitMotor, swig_delete_btRotationalLimitMotor, swig_btRotationalLimitMotor_methods, swig_btRotationalLimitMotor_attributes, { "btRotationalLimitMotor", swig_btRotationalLimitMotor_cls_methods, swig_btRotationalLimitMotor_cls_attributes, swig_btRotationalLimitMotor_cls_constants }, swig_btRotationalLimitMotor_bases, swig_btRotationalLimitMotor_base_names };

static int _wrap_btTranslationalLimitMotor_m_lowerLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_lowerLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_lowerLimit",1,"btTranslationalLimitMotor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::m_lowerLimit",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_lowerLimit_set",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_lowerLimit_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_lowerLimit = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_lowerLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_lowerLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_lowerLimit",1,"btTranslationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_lowerLimit_get",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  result = (btVector3 *)& ((arg1)->m_lowerLimit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_upperLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_upperLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_upperLimit",1,"btTranslationalLimitMotor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::m_upperLimit",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_upperLimit_set",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_upperLimit_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_upperLimit = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_upperLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_upperLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_upperLimit",1,"btTranslationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_upperLimit_get",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  result = (btVector3 *)& ((arg1)->m_upperLimit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_accumulatedImpulse_set(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_accumulatedImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_accumulatedImpulse",1,"btTranslationalLimitMotor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::m_accumulatedImpulse",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_accumulatedImpulse_set",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_accumulatedImpulse_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_accumulatedImpulse = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_accumulatedImpulse_get(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_accumulatedImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_accumulatedImpulse",1,"btTranslationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_accumulatedImpulse_get",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  result = (btVector3 *)& ((arg1)->m_accumulatedImpulse);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_limitSoftness_set(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_limitSoftness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_limitSoftness",1,"btTranslationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::m_limitSoftness",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_limitSoftness_set",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_limitSoftness = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_limitSoftness_get(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_limitSoftness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_limitSoftness",1,"btTranslationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_limitSoftness_get",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  result = (btScalar) ((arg1)->m_limitSoftness);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_damping_set(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_damping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_damping",1,"btTranslationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::m_damping",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_damping_set",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_damping = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_damping_get(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_damping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_damping",1,"btTranslationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_damping_get",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  result = (btScalar) ((arg1)->m_damping);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_restitution_set(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_restitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_restitution",1,"btTranslationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::m_restitution",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_restitution_set",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_restitution = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_restitution_get(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_restitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_restitution",1,"btTranslationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_restitution_get",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  result = (btScalar) ((arg1)->m_restitution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_normalCFM_set(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_normalCFM",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_normalCFM",1,"btTranslationalLimitMotor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::m_normalCFM",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_normalCFM_set",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_normalCFM_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_normalCFM = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_normalCFM_get(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_normalCFM",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_normalCFM",1,"btTranslationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_normalCFM_get",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  result = (btVector3 *)& ((arg1)->m_normalCFM);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_stopERP_set(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_stopERP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_stopERP",1,"btTranslationalLimitMotor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::m_stopERP",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_stopERP_set",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_stopERP_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_stopERP = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_stopERP_get(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_stopERP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_stopERP",1,"btTranslationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_stopERP_get",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  result = (btVector3 *)& ((arg1)->m_stopERP);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_stopCFM_set(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_stopCFM",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_stopCFM",1,"btTranslationalLimitMotor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::m_stopCFM",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_stopCFM_set",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_stopCFM_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_stopCFM = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_stopCFM_get(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_stopCFM",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_stopCFM",1,"btTranslationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_stopCFM_get",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  result = (btVector3 *)& ((arg1)->m_stopCFM);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_enableMotor_set(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  bool *arg2 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_enableMotor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_enableMotor",1,"btTranslationalLimitMotor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::m_enableMotor",2,"bool [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_enableMotor_set",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_enableMotor_set",2,SWIGTYPE_p_bool);
  }
  
  {
    size_t ii;
    bool *b = (bool *) arg1->m_enableMotor;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_enableMotor_get(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  bool *result = 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_enableMotor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_enableMotor",1,"btTranslationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_enableMotor_get",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  result = (bool *)(bool *) ((arg1)->m_enableMotor);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_targetVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_targetVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_targetVelocity",1,"btTranslationalLimitMotor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::m_targetVelocity",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_targetVelocity_set",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_targetVelocity_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_targetVelocity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_targetVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_targetVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_targetVelocity",1,"btTranslationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_targetVelocity_get",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  result = (btVector3 *)& ((arg1)->m_targetVelocity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_maxMotorForce_set(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_maxMotorForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_maxMotorForce",1,"btTranslationalLimitMotor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::m_maxMotorForce",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_maxMotorForce_set",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_maxMotorForce_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_maxMotorForce = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_maxMotorForce_get(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_maxMotorForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_maxMotorForce",1,"btTranslationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_maxMotorForce_get",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  result = (btVector3 *)& ((arg1)->m_maxMotorForce);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_currentLimitError_set(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_currentLimitError",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_currentLimitError",1,"btTranslationalLimitMotor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::m_currentLimitError",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_currentLimitError_set",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_currentLimitError_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_currentLimitError = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_currentLimitError_get(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_currentLimitError",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_currentLimitError",1,"btTranslationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_currentLimitError_get",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  result = (btVector3 *)& ((arg1)->m_currentLimitError);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_currentLinearDiff_set(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_currentLinearDiff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_currentLinearDiff",1,"btTranslationalLimitMotor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::m_currentLinearDiff",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_currentLinearDiff_set",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_currentLinearDiff_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_currentLinearDiff = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_currentLinearDiff_get(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_currentLinearDiff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_currentLinearDiff",1,"btTranslationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_currentLinearDiff_get",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  result = (btVector3 *)& ((arg1)->m_currentLinearDiff);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_currentLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int *arg2 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_currentLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_currentLimit",1,"btTranslationalLimitMotor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::m_currentLimit",2,"int [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_currentLimit_set",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_currentLimit_set",2,SWIGTYPE_p_int);
  }
  
  {
    size_t ii;
    int *b = (int *) arg1->m_currentLimit;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_m_currentLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::m_currentLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::m_currentLimit",1,"btTranslationalLimitMotor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_m_currentLimit_get",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  result = (int *)(int *) ((arg1)->m_currentLimit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTranslationalLimitMotor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *result = 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::btTranslationalLimitMotor",0,0)
  result = (btTranslationalLimitMotor *)new btTranslationalLimitMotor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTranslationalLimitMotor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTranslationalLimitMotor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = 0 ;
  btTranslationalLimitMotor *result = 0 ;
  
  SWIG_check_num_args("btTranslationalLimitMotor::btTranslationalLimitMotor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::btTranslationalLimitMotor",1,"btTranslationalLimitMotor const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("new_btTranslationalLimitMotor",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  result = (btTranslationalLimitMotor *)new btTranslationalLimitMotor((btTranslationalLimitMotor const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTranslationalLimitMotor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btTranslationalLimitMotor(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btTranslationalLimitMotor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTranslationalLimitMotor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_btTranslationalLimitMotor__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btTranslationalLimitMotor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btTranslationalLimitMotor::btTranslationalLimitMotor()\n"
    "    btTranslationalLimitMotor::btTranslationalLimitMotor(btTranslationalLimitMotor const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btTranslationalLimitMotor_isLimited(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("btTranslationalLimitMotor::isLimited",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::isLimited",1,"btTranslationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::isLimited",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_isLimited",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->isLimited(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_needApplyForce(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("btTranslationalLimitMotor::needApplyForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::needApplyForce",1,"btTranslationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::needApplyForce",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_needApplyForce",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->needApplyForce(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_testLimitValue(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int result;
  
  SWIG_check_num_args("btTranslationalLimitMotor::testLimitValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::testLimitValue",1,"btTranslationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::testLimitValue",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btTranslationalLimitMotor::testLimitValue",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_testLimitValue",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  result = (int)(arg1)->testLimitValue(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTranslationalLimitMotor_solveLinearAxis(lua_State* L) {
  int SWIG_arg = 0;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btRigidBody *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btRigidBody *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  int arg8 ;
  btVector3 *arg9 = 0 ;
  btVector3 *arg10 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btTranslationalLimitMotor::solveLinearAxis",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btTranslationalLimitMotor::solveLinearAxis",1,"btTranslationalLimitMotor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btTranslationalLimitMotor::solveLinearAxis",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btTranslationalLimitMotor::solveLinearAxis",3,"btScalar");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btTranslationalLimitMotor::solveLinearAxis",4,"btRigidBody &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btTranslationalLimitMotor::solveLinearAxis",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btTranslationalLimitMotor::solveLinearAxis",6,"btRigidBody &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btTranslationalLimitMotor::solveLinearAxis",7,"btVector3 const &");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("btTranslationalLimitMotor::solveLinearAxis",8,"int");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("btTranslationalLimitMotor::solveLinearAxis",9,"btVector3 const &");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("btTranslationalLimitMotor::solveLinearAxis",10,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTranslationalLimitMotor,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_solveLinearAxis",1,SWIGTYPE_p_btTranslationalLimitMotor);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_solveLinearAxis",4,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_solveLinearAxis",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_solveLinearAxis",6,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_solveLinearAxis",7,SWIGTYPE_p_btVector3);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_solveLinearAxis",9,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btTranslationalLimitMotor_solveLinearAxis",10,SWIGTYPE_p_btVector3);
  }
  
  result = (btScalar)(arg1)->solveLinearAxis(arg2,arg3,*arg4,(btVector3 const &)*arg5,*arg6,(btVector3 const &)*arg7,arg8,(btVector3 const &)*arg9,(btVector3 const &)*arg10);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btTranslationalLimitMotor(void *obj) {
btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) obj;
delete arg1;
}
static swig_lua_method swig_btTranslationalLimitMotor_methods[] = {
    {"isLimited", _wrap_btTranslationalLimitMotor_isLimited}, 
    {"needApplyForce", _wrap_btTranslationalLimitMotor_needApplyForce}, 
    {"testLimitValue", _wrap_btTranslationalLimitMotor_testLimitValue}, 
    {"solveLinearAxis", _wrap_btTranslationalLimitMotor_solveLinearAxis}, 
    {0,0}
};
static swig_lua_attribute swig_btTranslationalLimitMotor_attributes[] = {
    { "m_lowerLimit", _wrap_btTranslationalLimitMotor_m_lowerLimit_get, _wrap_btTranslationalLimitMotor_m_lowerLimit_set},
    { "m_upperLimit", _wrap_btTranslationalLimitMotor_m_upperLimit_get, _wrap_btTranslationalLimitMotor_m_upperLimit_set},
    { "m_accumulatedImpulse", _wrap_btTranslationalLimitMotor_m_accumulatedImpulse_get, _wrap_btTranslationalLimitMotor_m_accumulatedImpulse_set},
    { "m_limitSoftness", _wrap_btTranslationalLimitMotor_m_limitSoftness_get, _wrap_btTranslationalLimitMotor_m_limitSoftness_set},
    { "m_damping", _wrap_btTranslationalLimitMotor_m_damping_get, _wrap_btTranslationalLimitMotor_m_damping_set},
    { "m_restitution", _wrap_btTranslationalLimitMotor_m_restitution_get, _wrap_btTranslationalLimitMotor_m_restitution_set},
    { "m_normalCFM", _wrap_btTranslationalLimitMotor_m_normalCFM_get, _wrap_btTranslationalLimitMotor_m_normalCFM_set},
    { "m_stopERP", _wrap_btTranslationalLimitMotor_m_stopERP_get, _wrap_btTranslationalLimitMotor_m_stopERP_set},
    { "m_stopCFM", _wrap_btTranslationalLimitMotor_m_stopCFM_get, _wrap_btTranslationalLimitMotor_m_stopCFM_set},
    { "m_enableMotor", _wrap_btTranslationalLimitMotor_m_enableMotor_get, _wrap_btTranslationalLimitMotor_m_enableMotor_set},
    { "m_targetVelocity", _wrap_btTranslationalLimitMotor_m_targetVelocity_get, _wrap_btTranslationalLimitMotor_m_targetVelocity_set},
    { "m_maxMotorForce", _wrap_btTranslationalLimitMotor_m_maxMotorForce_get, _wrap_btTranslationalLimitMotor_m_maxMotorForce_set},
    { "m_currentLimitError", _wrap_btTranslationalLimitMotor_m_currentLimitError_get, _wrap_btTranslationalLimitMotor_m_currentLimitError_set},
    { "m_currentLinearDiff", _wrap_btTranslationalLimitMotor_m_currentLinearDiff_get, _wrap_btTranslationalLimitMotor_m_currentLinearDiff_set},
    { "m_currentLimit", _wrap_btTranslationalLimitMotor_m_currentLimit_get, _wrap_btTranslationalLimitMotor_m_currentLimit_set},
    {0,0,0}
};
static swig_lua_attribute swig_btTranslationalLimitMotor_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btTranslationalLimitMotor_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btTranslationalLimitMotor_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btTranslationalLimitMotor_bases[] = {0};
static const char *swig_btTranslationalLimitMotor_base_names[] = {0};
static swig_lua_class _wrap_class_btTranslationalLimitMotor = { "btTranslationalLimitMotor", &SWIGTYPE_p_btTranslationalLimitMotor,_wrap_new_btTranslationalLimitMotor, swig_delete_btTranslationalLimitMotor, swig_btTranslationalLimitMotor_methods, swig_btTranslationalLimitMotor_attributes, { "btTranslationalLimitMotor", swig_btTranslationalLimitMotor_cls_methods, swig_btTranslationalLimitMotor_cls_attributes, swig_btTranslationalLimitMotor_cls_constants }, swig_btTranslationalLimitMotor_bases, swig_btTranslationalLimitMotor_base_names };

static int _wrap_btGeneric6DofConstraint_m_useSolveConstraintObsolete_set(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::m_useSolveConstraintObsolete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::m_useSolveConstraintObsolete",1,"btGeneric6DofConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::m_useSolveConstraintObsolete",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_m_useSolveConstraintObsolete_set",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_useSolveConstraintObsolete = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_m_useSolveConstraintObsolete_get(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool result;
  
  SWIG_check_num_args("btGeneric6DofConstraint::m_useSolveConstraintObsolete",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::m_useSolveConstraintObsolete",1,"btGeneric6DofConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_m_useSolveConstraintObsolete_get",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  result = (bool) ((arg1)->m_useSolveConstraintObsolete);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btGeneric6DofConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  bool arg5 ;
  btGeneric6DofConstraint *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::btGeneric6DofConstraint",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::btGeneric6DofConstraint",1,"btRigidBody &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::btGeneric6DofConstraint",2,"btRigidBody &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btGeneric6DofConstraint::btGeneric6DofConstraint",3,"btTransform const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btGeneric6DofConstraint::btGeneric6DofConstraint",4,"btTransform const &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("btGeneric6DofConstraint::btGeneric6DofConstraint",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btGeneric6DofConstraint",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btGeneric6DofConstraint",2,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("new_btGeneric6DofConstraint",3,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("new_btGeneric6DofConstraint",4,SWIGTYPE_p_btTransform);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (btGeneric6DofConstraint *)new btGeneric6DofConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGeneric6DofConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btGeneric6DofConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  bool arg3 ;
  btGeneric6DofConstraint *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::btGeneric6DofConstraint",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::btGeneric6DofConstraint",1,"btRigidBody &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::btGeneric6DofConstraint",2,"btTransform const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("btGeneric6DofConstraint::btGeneric6DofConstraint",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btGeneric6DofConstraint",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("new_btGeneric6DofConstraint",2,SWIGTYPE_p_btTransform);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (btGeneric6DofConstraint *)new btGeneric6DofConstraint(*arg1,(btTransform const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGeneric6DofConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btGeneric6DofConstraint(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_btGeneric6DofConstraint__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_btGeneric6DofConstraint__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btGeneric6DofConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btGeneric6DofConstraint::btGeneric6DofConstraint(btRigidBody &,btRigidBody &,btTransform const &,btTransform const &,bool)\n"
    "    btGeneric6DofConstraint::btGeneric6DofConstraint(btRigidBody &,btTransform const &,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_btGeneric6DofConstraint_calculateTransforms__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::calculateTransforms",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::calculateTransforms",1,"btGeneric6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::calculateTransforms",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btGeneric6DofConstraint::calculateTransforms",3,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_calculateTransforms",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_calculateTransforms",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_calculateTransforms",3,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->calculateTransforms((btTransform const &)*arg2,(btTransform const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_calculateTransforms__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::calculateTransforms",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::calculateTransforms",1,"btGeneric6DofConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_calculateTransforms",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  (arg1)->calculateTransforms();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_calculateTransforms(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGeneric6DofConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btGeneric6DofConstraint_calculateTransforms__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGeneric6DofConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btGeneric6DofConstraint_calculateTransforms__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btGeneric6DofConstraint_calculateTransforms'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btGeneric6DofConstraint::calculateTransforms(btTransform const &,btTransform const &)\n"
    "    btGeneric6DofConstraint::calculateTransforms()\n");
  lua_error(L);return 0;
}


static int _wrap_btGeneric6DofConstraint_getCalculatedTransformA(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getCalculatedTransformA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getCalculatedTransformA",1,"btGeneric6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getCalculatedTransformA",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  result = (btTransform *) &((btGeneric6DofConstraint const *)arg1)->getCalculatedTransformA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getCalculatedTransformB(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getCalculatedTransformB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getCalculatedTransformB",1,"btGeneric6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getCalculatedTransformB",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  result = (btTransform *) &((btGeneric6DofConstraint const *)arg1)->getCalculatedTransformB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getFrameOffsetA__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getFrameOffsetA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getFrameOffsetA",1,"btGeneric6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getFrameOffsetA",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  result = (btTransform *) &((btGeneric6DofConstraint const *)arg1)->getFrameOffsetA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getFrameOffsetB__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getFrameOffsetB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getFrameOffsetB",1,"btGeneric6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getFrameOffsetB",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  result = (btTransform *) &((btGeneric6DofConstraint const *)arg1)->getFrameOffsetB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getFrameOffsetA__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getFrameOffsetA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getFrameOffsetA",1,"btGeneric6DofConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getFrameOffsetA",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  result = (btTransform *) &(arg1)->getFrameOffsetA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getFrameOffsetA(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGeneric6DofConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btGeneric6DofConstraint_getFrameOffsetA__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGeneric6DofConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btGeneric6DofConstraint_getFrameOffsetA__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btGeneric6DofConstraint_getFrameOffsetA'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btGeneric6DofConstraint::getFrameOffsetA() const\n"
    "    btGeneric6DofConstraint::getFrameOffsetA()\n");
  lua_error(L);return 0;
}


static int _wrap_btGeneric6DofConstraint_getFrameOffsetB__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getFrameOffsetB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getFrameOffsetB",1,"btGeneric6DofConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getFrameOffsetB",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  result = (btTransform *) &(arg1)->getFrameOffsetB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getFrameOffsetB(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGeneric6DofConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btGeneric6DofConstraint_getFrameOffsetB__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGeneric6DofConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btGeneric6DofConstraint_getFrameOffsetB__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btGeneric6DofConstraint_getFrameOffsetB'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btGeneric6DofConstraint::getFrameOffsetB() const\n"
    "    btGeneric6DofConstraint::getFrameOffsetB()\n");
  lua_error(L);return 0;
}


static int _wrap_btGeneric6DofConstraint_buildJacobian(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::buildJacobian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::buildJacobian",1,"btGeneric6DofConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_buildJacobian",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  (arg1)->buildJacobian();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getInfo1(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getInfo1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getInfo1",1,"btGeneric6DofConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::getInfo1",2,"btTypedConstraint::btConstraintInfo1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getInfo1",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo1,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getInfo1",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo1);
  }
  
  (arg1)->getInfo1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getInfo1NonVirtual(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getInfo1NonVirtual",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getInfo1NonVirtual",1,"btGeneric6DofConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::getInfo1NonVirtual",2,"btTypedConstraint::btConstraintInfo1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getInfo1NonVirtual",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo1,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getInfo1NonVirtual",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo1);
  }
  
  (arg1)->getInfo1NonVirtual(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getInfo2(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getInfo2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getInfo2",1,"btGeneric6DofConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::getInfo2",2,"btTypedConstraint::btConstraintInfo2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getInfo2",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getInfo2",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2);
  }
  
  (arg1)->getInfo2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getInfo2NonVirtual(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getInfo2NonVirtual",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getInfo2NonVirtual",1,"btGeneric6DofConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::getInfo2NonVirtual",2,"btTypedConstraint::btConstraintInfo2 *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btGeneric6DofConstraint::getInfo2NonVirtual",3,"btTransform const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btGeneric6DofConstraint::getInfo2NonVirtual",4,"btTransform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btGeneric6DofConstraint::getInfo2NonVirtual",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btGeneric6DofConstraint::getInfo2NonVirtual",6,"btVector3 const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btGeneric6DofConstraint::getInfo2NonVirtual",7,"btVector3 const &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btGeneric6DofConstraint::getInfo2NonVirtual",8,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getInfo2NonVirtual",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getInfo2NonVirtual",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getInfo2NonVirtual",3,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getInfo2NonVirtual",4,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getInfo2NonVirtual",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getInfo2NonVirtual",6,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getInfo2NonVirtual",7,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getInfo2NonVirtual",8,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_updateRHS(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::updateRHS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::updateRHS",1,"btGeneric6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::updateRHS",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_updateRHS",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->updateRHS(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getAxis(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btVector3 result;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getAxis",1,"btGeneric6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::getAxis",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getAxis",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((btGeneric6DofConstraint const *)arg1)->getAxis(arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getAngle(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getAngle",1,"btGeneric6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::getAngle",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getAngle",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btScalar)((btGeneric6DofConstraint const *)arg1)->getAngle(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getRelativePivotPosition(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getRelativePivotPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getRelativePivotPosition",1,"btGeneric6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::getRelativePivotPosition",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getRelativePivotPosition",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btScalar)((btGeneric6DofConstraint const *)arg1)->getRelativePivotPosition(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_setFrames(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::setFrames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::setFrames",1,"btGeneric6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::setFrames",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btGeneric6DofConstraint::setFrames",3,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setFrames",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setFrames",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setFrames",3,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setFrames((btTransform const &)*arg2,(btTransform const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_testAngularLimitMotor(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("btGeneric6DofConstraint::testAngularLimitMotor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::testAngularLimitMotor",1,"btGeneric6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::testAngularLimitMotor",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_testAngularLimitMotor",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->testAngularLimitMotor(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_setLinearLowerLimit(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::setLinearLowerLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::setLinearLowerLimit",1,"btGeneric6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::setLinearLowerLimit",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setLinearLowerLimit",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setLinearLowerLimit",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLinearLowerLimit((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getLinearLowerLimit(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getLinearLowerLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getLinearLowerLimit",1,"btGeneric6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::getLinearLowerLimit",2,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getLinearLowerLimit",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getLinearLowerLimit",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->getLinearLowerLimit(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_setLinearUpperLimit(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::setLinearUpperLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::setLinearUpperLimit",1,"btGeneric6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::setLinearUpperLimit",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setLinearUpperLimit",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setLinearUpperLimit",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLinearUpperLimit((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getLinearUpperLimit(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getLinearUpperLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getLinearUpperLimit",1,"btGeneric6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::getLinearUpperLimit",2,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getLinearUpperLimit",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getLinearUpperLimit",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->getLinearUpperLimit(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_setAngularLowerLimit(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::setAngularLowerLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::setAngularLowerLimit",1,"btGeneric6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::setAngularLowerLimit",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setAngularLowerLimit",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setAngularLowerLimit",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setAngularLowerLimit((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getAngularLowerLimit(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getAngularLowerLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getAngularLowerLimit",1,"btGeneric6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::getAngularLowerLimit",2,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getAngularLowerLimit",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getAngularLowerLimit",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->getAngularLowerLimit(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_setAngularUpperLimit(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::setAngularUpperLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::setAngularUpperLimit",1,"btGeneric6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::setAngularUpperLimit",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setAngularUpperLimit",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setAngularUpperLimit",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setAngularUpperLimit((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getAngularUpperLimit(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getAngularUpperLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getAngularUpperLimit",1,"btGeneric6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::getAngularUpperLimit",2,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getAngularUpperLimit",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getAngularUpperLimit",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->getAngularUpperLimit(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getRotationalLimitMotor(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btRotationalLimitMotor *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getRotationalLimitMotor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getRotationalLimitMotor",1,"btGeneric6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::getRotationalLimitMotor",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getRotationalLimitMotor",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btRotationalLimitMotor *)(arg1)->getRotationalLimitMotor(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRotationalLimitMotor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getTranslationalLimitMotor(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTranslationalLimitMotor *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getTranslationalLimitMotor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getTranslationalLimitMotor",1,"btGeneric6DofConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getTranslationalLimitMotor",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  result = (btTranslationalLimitMotor *)(arg1)->getTranslationalLimitMotor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTranslationalLimitMotor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_setLimit(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::setLimit",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::setLimit",1,"btGeneric6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::setLimit",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btGeneric6DofConstraint::setLimit",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btGeneric6DofConstraint::setLimit",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setLimit",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  (arg1)->setLimit(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_isLimited(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("btGeneric6DofConstraint::isLimited",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::isLimited",1,"btGeneric6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::isLimited",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_isLimited",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->isLimited(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_calcAnchorPos(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::calcAnchorPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::calcAnchorPos",1,"btGeneric6DofConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_calcAnchorPos",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  (arg1)->calcAnchorPos();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_get_limit_motor_info2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btRotationalLimitMotor *arg2 = (btRotationalLimitMotor *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  btTypedConstraint::btConstraintInfo2 *arg9 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  int arg10 ;
  btVector3 *arg11 = 0 ;
  int arg12 ;
  int arg13 ;
  int result;
  
  SWIG_check_num_args("btGeneric6DofConstraint::get_limit_motor_info2",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",1,"btGeneric6DofConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",2,"btRotationalLimitMotor *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",3,"btTransform const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",4,"btTransform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",6,"btVector3 const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",7,"btVector3 const &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",8,"btVector3 const &");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",9,"btTypedConstraint::btConstraintInfo2 *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",10,"int");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",11,"btVector3 &");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",12,"int");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",13,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",2,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",3,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",4,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",6,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",7,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",8,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",9,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",11,SWIGTYPE_p_btVector3);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  arg13 = (int)lua_tonumber(L, 13);
  result = (int)(arg1)->get_limit_motor_info2(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8,arg9,arg10,*arg11,arg12,arg13);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_get_limit_motor_info2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btRotationalLimitMotor *arg2 = (btRotationalLimitMotor *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  btTypedConstraint::btConstraintInfo2 *arg9 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  int arg10 ;
  btVector3 *arg11 = 0 ;
  int arg12 ;
  int result;
  
  SWIG_check_num_args("btGeneric6DofConstraint::get_limit_motor_info2",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",1,"btGeneric6DofConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",2,"btRotationalLimitMotor *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",3,"btTransform const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",4,"btTransform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",6,"btVector3 const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",7,"btVector3 const &");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",8,"btVector3 const &");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",9,"btTypedConstraint::btConstraintInfo2 *");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",10,"int");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",11,"btVector3 &");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("btGeneric6DofConstraint::get_limit_motor_info2",12,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRotationalLimitMotor,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",2,SWIGTYPE_p_btRotationalLimitMotor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",3,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",4,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",6,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",7,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",8,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",9,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2);
  }
  
  arg10 = (int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_get_limit_motor_info2",11,SWIGTYPE_p_btVector3);
  }
  
  arg12 = (int)lua_tonumber(L, 12);
  result = (int)(arg1)->get_limit_motor_info2(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8,arg9,arg10,*arg11,arg12);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_get_limit_motor_info2(lua_State* L) {
  int argc;
  int argv[14]={
    1,2,3,4,5,6,7,8,9,10,11,12,13,14
  };
  
  argc = lua_gettop(L);
  if (argc == 12) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGeneric6DofConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btRotationalLimitMotor, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (SWIG_isptrtype(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          void *ptr;
                          if (lua_isuserdata(L,argv[10])==0 || SWIG_ConvertPtr(L,argv[10], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                            _v = 0;
                          } else {
                            _v = 1;
                          }
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            return _wrap_btGeneric6DofConstraint_get_limit_motor_info2__SWIG_1(L);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 13) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGeneric6DofConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btRotationalLimitMotor, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (SWIG_isptrtype(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_btTypedConstraint__btConstraintInfo2, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          void *ptr;
                          if (lua_isuserdata(L,argv[10])==0 || SWIG_ConvertPtr(L,argv[10], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                            _v = 0;
                          } else {
                            _v = 1;
                          }
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              return _wrap_btGeneric6DofConstraint_get_limit_motor_info2__SWIG_0(L);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btGeneric6DofConstraint_get_limit_motor_info2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btGeneric6DofConstraint::get_limit_motor_info2(btRotationalLimitMotor *,btTransform const &,btTransform const &,btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &,btTypedConstraint::btConstraintInfo2 *,int,btVector3 &,int,int)\n"
    "    btGeneric6DofConstraint::get_limit_motor_info2(btRotationalLimitMotor *,btTransform const &,btTransform const &,btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &,btTypedConstraint::btConstraintInfo2 *,int,btVector3 &,int)\n");
  lua_error(L);return 0;
}


static int _wrap_btGeneric6DofConstraint_getUseFrameOffset(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool result;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getUseFrameOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getUseFrameOffset",1,"btGeneric6DofConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getUseFrameOffset",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  result = (bool)(arg1)->getUseFrameOffset();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_setUseFrameOffset(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::setUseFrameOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::setUseFrameOffset",1,"btGeneric6DofConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::setUseFrameOffset",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setUseFrameOffset",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setUseFrameOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_setParam__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::setParam",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::setParam",1,"btGeneric6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btGeneric6DofConstraint::setParam",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btGeneric6DofConstraint::setParam",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setParam",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setParam(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_setParam__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::setParam",1,"btGeneric6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btGeneric6DofConstraint::setParam",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setParam",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_setParam(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGeneric6DofConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btGeneric6DofConstraint_setParam__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGeneric6DofConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btGeneric6DofConstraint_setParam__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btGeneric6DofConstraint_setParam'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btGeneric6DofConstraint::setParam(int,btScalar,int)\n"
    "    btGeneric6DofConstraint::setParam(int,btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btGeneric6DofConstraint_getParam__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getParam",1,"btGeneric6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::getParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btGeneric6DofConstraint::getParam",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getParam",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (btScalar)((btGeneric6DofConstraint const *)arg1)->getParam(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getParam__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  SWIG_check_num_args("btGeneric6DofConstraint::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::getParam",1,"btGeneric6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_getParam",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btScalar)((btGeneric6DofConstraint const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_getParam(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGeneric6DofConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btGeneric6DofConstraint_getParam__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGeneric6DofConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btGeneric6DofConstraint_getParam__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btGeneric6DofConstraint_getParam'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btGeneric6DofConstraint::getParam(int,int) const\n"
    "    btGeneric6DofConstraint::getParam(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_btGeneric6DofConstraint_setAxis(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::setAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::setAxis",1,"btGeneric6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::setAxis",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btGeneric6DofConstraint::setAxis",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setAxis",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setAxis",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_setAxis",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setAxis((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int result;
  
  SWIG_check_num_args("btGeneric6DofConstraint::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::calculateSerializeBufferSize",1,"btGeneric6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_calculateSerializeBufferSize",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  result = (int)((btGeneric6DofConstraint const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraint_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraint::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraint::serialize",1,"btGeneric6DofConstraint const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGeneric6DofConstraint::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btGeneric6DofConstraint::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraint,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_serialize",1,SWIGTYPE_p_btGeneric6DofConstraint);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btGeneric6DofConstraint_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btGeneric6DofConstraint_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  result = (char *)((btGeneric6DofConstraint const *)arg1)->serialize(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btGeneric6DofConstraint(void *obj) {
btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) obj;
delete arg1;
}
static swig_lua_method swig_btGeneric6DofConstraint_methods[] = {
    {"calculateTransforms", _wrap_btGeneric6DofConstraint_calculateTransforms}, 
    {"getCalculatedTransformA", _wrap_btGeneric6DofConstraint_getCalculatedTransformA}, 
    {"getCalculatedTransformB", _wrap_btGeneric6DofConstraint_getCalculatedTransformB}, 
    {"getFrameOffsetA", _wrap_btGeneric6DofConstraint_getFrameOffsetA}, 
    {"getFrameOffsetB", _wrap_btGeneric6DofConstraint_getFrameOffsetB}, 
    {"buildJacobian", _wrap_btGeneric6DofConstraint_buildJacobian}, 
    {"getInfo1", _wrap_btGeneric6DofConstraint_getInfo1}, 
    {"getInfo1NonVirtual", _wrap_btGeneric6DofConstraint_getInfo1NonVirtual}, 
    {"getInfo2", _wrap_btGeneric6DofConstraint_getInfo2}, 
    {"getInfo2NonVirtual", _wrap_btGeneric6DofConstraint_getInfo2NonVirtual}, 
    {"updateRHS", _wrap_btGeneric6DofConstraint_updateRHS}, 
    {"getAxis", _wrap_btGeneric6DofConstraint_getAxis}, 
    {"getAngle", _wrap_btGeneric6DofConstraint_getAngle}, 
    {"getRelativePivotPosition", _wrap_btGeneric6DofConstraint_getRelativePivotPosition}, 
    {"setFrames", _wrap_btGeneric6DofConstraint_setFrames}, 
    {"testAngularLimitMotor", _wrap_btGeneric6DofConstraint_testAngularLimitMotor}, 
    {"setLinearLowerLimit", _wrap_btGeneric6DofConstraint_setLinearLowerLimit}, 
    {"getLinearLowerLimit", _wrap_btGeneric6DofConstraint_getLinearLowerLimit}, 
    {"setLinearUpperLimit", _wrap_btGeneric6DofConstraint_setLinearUpperLimit}, 
    {"getLinearUpperLimit", _wrap_btGeneric6DofConstraint_getLinearUpperLimit}, 
    {"setAngularLowerLimit", _wrap_btGeneric6DofConstraint_setAngularLowerLimit}, 
    {"getAngularLowerLimit", _wrap_btGeneric6DofConstraint_getAngularLowerLimit}, 
    {"setAngularUpperLimit", _wrap_btGeneric6DofConstraint_setAngularUpperLimit}, 
    {"getAngularUpperLimit", _wrap_btGeneric6DofConstraint_getAngularUpperLimit}, 
    {"getRotationalLimitMotor", _wrap_btGeneric6DofConstraint_getRotationalLimitMotor}, 
    {"getTranslationalLimitMotor", _wrap_btGeneric6DofConstraint_getTranslationalLimitMotor}, 
    {"setLimit", _wrap_btGeneric6DofConstraint_setLimit}, 
    {"isLimited", _wrap_btGeneric6DofConstraint_isLimited}, 
    {"calcAnchorPos", _wrap_btGeneric6DofConstraint_calcAnchorPos}, 
    {"get_limit_motor_info2", _wrap_btGeneric6DofConstraint_get_limit_motor_info2}, 
    {"getUseFrameOffset", _wrap_btGeneric6DofConstraint_getUseFrameOffset}, 
    {"setUseFrameOffset", _wrap_btGeneric6DofConstraint_setUseFrameOffset}, 
    {"setParam", _wrap_btGeneric6DofConstraint_setParam}, 
    {"getParam", _wrap_btGeneric6DofConstraint_getParam}, 
    {"setAxis", _wrap_btGeneric6DofConstraint_setAxis}, 
    {"calculateSerializeBufferSize", _wrap_btGeneric6DofConstraint_calculateSerializeBufferSize}, 
    {"serialize", _wrap_btGeneric6DofConstraint_serialize}, 
    {0,0}
};
static swig_lua_attribute swig_btGeneric6DofConstraint_attributes[] = {
    { "m_useSolveConstraintObsolete", _wrap_btGeneric6DofConstraint_m_useSolveConstraintObsolete_get, _wrap_btGeneric6DofConstraint_m_useSolveConstraintObsolete_set},
    {0,0,0}
};
static swig_lua_attribute swig_btGeneric6DofConstraint_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btGeneric6DofConstraint_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btGeneric6DofConstraint_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btGeneric6DofConstraint_bases[] = {0,0};
static const char *swig_btGeneric6DofConstraint_base_names[] = {"btTypedConstraint *",0};
static swig_lua_class _wrap_class_btGeneric6DofConstraint = { "btGeneric6DofConstraint", &SWIGTYPE_p_btGeneric6DofConstraint,_wrap_new_btGeneric6DofConstraint, swig_delete_btGeneric6DofConstraint, swig_btGeneric6DofConstraint_methods, swig_btGeneric6DofConstraint_attributes, { "btGeneric6DofConstraint", swig_btGeneric6DofConstraint_cls_methods, swig_btGeneric6DofConstraint_cls_attributes, swig_btGeneric6DofConstraint_cls_constants }, swig_btGeneric6DofConstraint_bases, swig_btGeneric6DofConstraint_base_names };

static int _wrap_btGeneric6DofConstraintData_m_typeConstraintData_set(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_typeConstraintData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_typeConstraintData",1,"btGeneric6DofConstraintData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGeneric6DofConstraintData::m_typeConstraintData",2,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_typeConstraintData_set",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_typeConstraintData_set",2,SWIGTYPE_p_btTypedConstraintData);
  }
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraintData_m_typeConstraintData_get(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_typeConstraintData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_typeConstraintData",1,"btGeneric6DofConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_typeConstraintData_get",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraintData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraintData_m_rbAFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_rbAFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_rbAFrame",1,"btGeneric6DofConstraintData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGeneric6DofConstraintData::m_rbAFrame",2,"btTransformFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_rbAFrame_set",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransformFloatData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_rbAFrame_set",2,SWIGTYPE_p_btTransformFloatData);
  }
  
  if (arg1) (arg1)->m_rbAFrame = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraintData_m_rbAFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_rbAFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_rbAFrame",1,"btGeneric6DofConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_rbAFrame_get",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  result = (btTransformFloatData *)& ((arg1)->m_rbAFrame);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransformFloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraintData_m_rbBFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_rbBFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_rbBFrame",1,"btGeneric6DofConstraintData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGeneric6DofConstraintData::m_rbBFrame",2,"btTransformFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_rbBFrame_set",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransformFloatData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_rbBFrame_set",2,SWIGTYPE_p_btTransformFloatData);
  }
  
  if (arg1) (arg1)->m_rbBFrame = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraintData_m_rbBFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_rbBFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_rbBFrame",1,"btGeneric6DofConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_rbBFrame_get",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  result = (btTransformFloatData *)& ((arg1)->m_rbBFrame);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransformFloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraintData_m_linearUpperLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_linearUpperLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_linearUpperLimit",1,"btGeneric6DofConstraintData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGeneric6DofConstraintData::m_linearUpperLimit",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_linearUpperLimit_set",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_linearUpperLimit_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_linearUpperLimit = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraintData_m_linearUpperLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_linearUpperLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_linearUpperLimit",1,"btGeneric6DofConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_linearUpperLimit_get",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_linearUpperLimit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraintData_m_linearLowerLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_linearLowerLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_linearLowerLimit",1,"btGeneric6DofConstraintData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGeneric6DofConstraintData::m_linearLowerLimit",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_linearLowerLimit_set",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_linearLowerLimit_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_linearLowerLimit = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraintData_m_linearLowerLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_linearLowerLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_linearLowerLimit",1,"btGeneric6DofConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_linearLowerLimit_get",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_linearLowerLimit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraintData_m_angularUpperLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_angularUpperLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_angularUpperLimit",1,"btGeneric6DofConstraintData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGeneric6DofConstraintData::m_angularUpperLimit",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_angularUpperLimit_set",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_angularUpperLimit_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_angularUpperLimit = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraintData_m_angularUpperLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_angularUpperLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_angularUpperLimit",1,"btGeneric6DofConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_angularUpperLimit_get",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_angularUpperLimit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraintData_m_angularLowerLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_angularLowerLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_angularLowerLimit",1,"btGeneric6DofConstraintData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGeneric6DofConstraintData::m_angularLowerLimit",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_angularLowerLimit_set",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_angularLowerLimit_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_angularLowerLimit = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraintData_m_angularLowerLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_angularLowerLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_angularLowerLimit",1,"btGeneric6DofConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_angularLowerLimit_get",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_angularLowerLimit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraintData_m_useLinearReferenceFrameA_set(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_useLinearReferenceFrameA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_useLinearReferenceFrameA",1,"btGeneric6DofConstraintData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGeneric6DofConstraintData::m_useLinearReferenceFrameA",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_useLinearReferenceFrameA_set",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_useLinearReferenceFrameA = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraintData_m_useLinearReferenceFrameA_get(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  int result;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_useLinearReferenceFrameA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_useLinearReferenceFrameA",1,"btGeneric6DofConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_useLinearReferenceFrameA_get",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  result = (int) ((arg1)->m_useLinearReferenceFrameA);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_useOffsetForConstraintFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_useOffsetForConstraintFrame",1,"btGeneric6DofConstraintData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGeneric6DofConstraintData::m_useOffsetForConstraintFrame",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_set",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_useOffsetForConstraintFrame = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  int result;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::m_useOffsetForConstraintFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGeneric6DofConstraintData::m_useOffsetForConstraintFrame",1,"btGeneric6DofConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGeneric6DofConstraintData,0))){
    SWIG_fail_ptr("btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_get",1,SWIGTYPE_p_btGeneric6DofConstraintData);
  }
  
  result = (int) ((arg1)->m_useOffsetForConstraintFrame);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btGeneric6DofConstraintData(lua_State* L) {
  int SWIG_arg = 0;
  btGeneric6DofConstraintData *result = 0 ;
  
  SWIG_check_num_args("btGeneric6DofConstraintData::btGeneric6DofConstraintData",0,0)
  result = (btGeneric6DofConstraintData *)new btGeneric6DofConstraintData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGeneric6DofConstraintData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btGeneric6DofConstraintData(void *obj) {
btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) obj;
delete arg1;
}
static swig_lua_method swig_btGeneric6DofConstraintData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btGeneric6DofConstraintData_attributes[] = {
    { "m_typeConstraintData", _wrap_btGeneric6DofConstraintData_m_typeConstraintData_get, _wrap_btGeneric6DofConstraintData_m_typeConstraintData_set},
    { "m_rbAFrame", _wrap_btGeneric6DofConstraintData_m_rbAFrame_get, _wrap_btGeneric6DofConstraintData_m_rbAFrame_set},
    { "m_rbBFrame", _wrap_btGeneric6DofConstraintData_m_rbBFrame_get, _wrap_btGeneric6DofConstraintData_m_rbBFrame_set},
    { "m_linearUpperLimit", _wrap_btGeneric6DofConstraintData_m_linearUpperLimit_get, _wrap_btGeneric6DofConstraintData_m_linearUpperLimit_set},
    { "m_linearLowerLimit", _wrap_btGeneric6DofConstraintData_m_linearLowerLimit_get, _wrap_btGeneric6DofConstraintData_m_linearLowerLimit_set},
    { "m_angularUpperLimit", _wrap_btGeneric6DofConstraintData_m_angularUpperLimit_get, _wrap_btGeneric6DofConstraintData_m_angularUpperLimit_set},
    { "m_angularLowerLimit", _wrap_btGeneric6DofConstraintData_m_angularLowerLimit_get, _wrap_btGeneric6DofConstraintData_m_angularLowerLimit_set},
    { "m_useLinearReferenceFrameA", _wrap_btGeneric6DofConstraintData_m_useLinearReferenceFrameA_get, _wrap_btGeneric6DofConstraintData_m_useLinearReferenceFrameA_set},
    { "m_useOffsetForConstraintFrame", _wrap_btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_get, _wrap_btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_set},
    {0,0,0}
};
static swig_lua_attribute swig_btGeneric6DofConstraintData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btGeneric6DofConstraintData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btGeneric6DofConstraintData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btGeneric6DofConstraintData_bases[] = {0};
static const char *swig_btGeneric6DofConstraintData_base_names[] = {0};
static swig_lua_class _wrap_class_btGeneric6DofConstraintData = { "btGeneric6DofConstraintData", &SWIGTYPE_p_btGeneric6DofConstraintData,_wrap_new_btGeneric6DofConstraintData, swig_delete_btGeneric6DofConstraintData, swig_btGeneric6DofConstraintData_methods, swig_btGeneric6DofConstraintData_attributes, { "btGeneric6DofConstraintData", swig_btGeneric6DofConstraintData_cls_methods, swig_btGeneric6DofConstraintData_cls_attributes, swig_btGeneric6DofConstraintData_cls_constants }, swig_btGeneric6DofConstraintData_bases, swig_btGeneric6DofConstraintData_base_names };

static int _wrap_new_btHingeConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  bool arg7 ;
  btHingeConstraint *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::btHingeConstraint",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",1,"btRigidBody &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",2,"btRigidBody &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",6,"btVector3 const &");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btHingeConstraint",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btHingeConstraint",2,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btHingeConstraint",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btHingeConstraint",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btHingeConstraint",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btHingeConstraint",6,SWIGTYPE_p_btVector3);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHingeConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btHingeConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btHingeConstraint *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::btHingeConstraint",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",1,"btRigidBody &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",2,"btRigidBody &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",6,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btHingeConstraint",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btHingeConstraint",2,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btHingeConstraint",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btHingeConstraint",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btHingeConstraint",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btHingeConstraint",6,SWIGTYPE_p_btVector3);
  }
  
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHingeConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btHingeConstraint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  bool arg4 ;
  btHingeConstraint *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::btHingeConstraint",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",1,"btRigidBody &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",3,"btVector3 const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btHingeConstraint",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btHingeConstraint",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btHingeConstraint",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHingeConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btHingeConstraint__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btHingeConstraint *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::btHingeConstraint",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",1,"btRigidBody &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btHingeConstraint",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btHingeConstraint",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btHingeConstraint",3,SWIGTYPE_p_btVector3);
  }
  
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHingeConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btHingeConstraint__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  bool arg5 ;
  btHingeConstraint *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::btHingeConstraint",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",1,"btRigidBody &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",2,"btRigidBody &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",3,"btTransform const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",4,"btTransform const &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btHingeConstraint",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btHingeConstraint",2,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("new_btHingeConstraint",3,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("new_btHingeConstraint",4,SWIGTYPE_p_btTransform);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHingeConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btHingeConstraint__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btHingeConstraint *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::btHingeConstraint",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",1,"btRigidBody &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",2,"btRigidBody &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",3,"btTransform const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",4,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btHingeConstraint",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btHingeConstraint",2,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("new_btHingeConstraint",3,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("new_btHingeConstraint",4,SWIGTYPE_p_btTransform);
  }
  
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHingeConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btHingeConstraint__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  bool arg3 ;
  btHingeConstraint *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::btHingeConstraint",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",1,"btRigidBody &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",2,"btTransform const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btHingeConstraint",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("new_btHingeConstraint",2,SWIGTYPE_p_btTransform);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,(btTransform const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHingeConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btHingeConstraint__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btHingeConstraint *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::btHingeConstraint",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",1,"btRigidBody &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHingeConstraint::btHingeConstraint",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btHingeConstraint",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("new_btHingeConstraint",2,SWIGTYPE_p_btTransform);
  }
  
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,(btTransform const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHingeConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btHingeConstraint(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_btHingeConstraint__SWIG_7(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_btHingeConstraint__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_btHingeConstraint__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_btHingeConstraint__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_btHingeConstraint__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_btHingeConstraint__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_new_btHingeConstraint__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_new_btHingeConstraint__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btHingeConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btHingeConstraint::btHingeConstraint(btRigidBody &,btRigidBody &,btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &,bool)\n"
    "    btHingeConstraint::btHingeConstraint(btRigidBody &,btRigidBody &,btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &)\n"
    "    btHingeConstraint::btHingeConstraint(btRigidBody &,btVector3 const &,btVector3 const &,bool)\n"
    "    btHingeConstraint::btHingeConstraint(btRigidBody &,btVector3 const &,btVector3 const &)\n"
    "    btHingeConstraint::btHingeConstraint(btRigidBody &,btRigidBody &,btTransform const &,btTransform const &,bool)\n"
    "    btHingeConstraint::btHingeConstraint(btRigidBody &,btRigidBody &,btTransform const &,btTransform const &)\n"
    "    btHingeConstraint::btHingeConstraint(btRigidBody &,btTransform const &,bool)\n"
    "    btHingeConstraint::btHingeConstraint(btRigidBody &,btTransform const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btHingeConstraint_buildJacobian(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  
  SWIG_check_num_args("btHingeConstraint::buildJacobian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::buildJacobian",1,"btHingeConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_buildJacobian",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  (arg1)->buildJacobian();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getInfo1(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  SWIG_check_num_args("btHingeConstraint::getInfo1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getInfo1",1,"btHingeConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHingeConstraint::getInfo1",2,"btTypedConstraint::btConstraintInfo1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo1",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo1,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo1",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo1);
  }
  
  (arg1)->getInfo1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getInfo1NonVirtual(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  SWIG_check_num_args("btHingeConstraint::getInfo1NonVirtual",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getInfo1NonVirtual",1,"btHingeConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHingeConstraint::getInfo1NonVirtual",2,"btTypedConstraint::btConstraintInfo1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo1NonVirtual",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo1,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo1NonVirtual",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo1);
  }
  
  (arg1)->getInfo1NonVirtual(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getInfo2(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  
  SWIG_check_num_args("btHingeConstraint::getInfo2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getInfo2",1,"btHingeConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHingeConstraint::getInfo2",2,"btTypedConstraint::btConstraintInfo2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2);
  }
  
  (arg1)->getInfo2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getInfo2NonVirtual(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::getInfo2NonVirtual",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getInfo2NonVirtual",1,"btHingeConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHingeConstraint::getInfo2NonVirtual",2,"btTypedConstraint::btConstraintInfo2 *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btHingeConstraint::getInfo2NonVirtual",3,"btTransform const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btHingeConstraint::getInfo2NonVirtual",4,"btTransform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btHingeConstraint::getInfo2NonVirtual",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btHingeConstraint::getInfo2NonVirtual",6,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2NonVirtual",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2NonVirtual",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2NonVirtual",3,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2NonVirtual",4,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2NonVirtual",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2NonVirtual",6,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getInfo2Internal(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::getInfo2Internal",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getInfo2Internal",1,"btHingeConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHingeConstraint::getInfo2Internal",2,"btTypedConstraint::btConstraintInfo2 *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btHingeConstraint::getInfo2Internal",3,"btTransform const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btHingeConstraint::getInfo2Internal",4,"btTransform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btHingeConstraint::getInfo2Internal",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btHingeConstraint::getInfo2Internal",6,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2Internal",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2Internal",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2Internal",3,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2Internal",4,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2Internal",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2Internal",6,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->getInfo2Internal(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getInfo2InternalUsingFrameOffset(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::getInfo2InternalUsingFrameOffset",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getInfo2InternalUsingFrameOffset",1,"btHingeConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHingeConstraint::getInfo2InternalUsingFrameOffset",2,"btTypedConstraint::btConstraintInfo2 *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btHingeConstraint::getInfo2InternalUsingFrameOffset",3,"btTransform const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btHingeConstraint::getInfo2InternalUsingFrameOffset",4,"btTransform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btHingeConstraint::getInfo2InternalUsingFrameOffset",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btHingeConstraint::getInfo2InternalUsingFrameOffset",6,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2InternalUsingFrameOffset",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2InternalUsingFrameOffset",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2InternalUsingFrameOffset",3,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2InternalUsingFrameOffset",4,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2InternalUsingFrameOffset",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btHingeConstraint_getInfo2InternalUsingFrameOffset",6,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->getInfo2InternalUsingFrameOffset(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_updateRHS(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btHingeConstraint::updateRHS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::updateRHS",1,"btHingeConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraint::updateRHS",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_updateRHS",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->updateRHS(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getRigidBodyA__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::getRigidBodyA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getRigidBodyA",1,"btHingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getRigidBodyA",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (btRigidBody *) &((btHingeConstraint const *)arg1)->getRigidBodyA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getRigidBodyB__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::getRigidBodyB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getRigidBodyB",1,"btHingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getRigidBodyB",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (btRigidBody *) &((btHingeConstraint const *)arg1)->getRigidBodyB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getRigidBodyA__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::getRigidBodyA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getRigidBodyA",1,"btHingeConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getRigidBodyA",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (btRigidBody *) &(arg1)->getRigidBodyA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getRigidBodyA(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btHingeConstraint_getRigidBodyA__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btHingeConstraint_getRigidBodyA__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btHingeConstraint_getRigidBodyA'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btHingeConstraint::getRigidBodyA() const\n"
    "    btHingeConstraint::getRigidBodyA()\n");
  lua_error(L);return 0;
}


static int _wrap_btHingeConstraint_getRigidBodyB__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::getRigidBodyB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getRigidBodyB",1,"btHingeConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getRigidBodyB",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (btRigidBody *) &(arg1)->getRigidBodyB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getRigidBodyB(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btHingeConstraint_getRigidBodyB__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btHingeConstraint_getRigidBodyB__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btHingeConstraint_getRigidBodyB'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btHingeConstraint::getRigidBodyB() const\n"
    "    btHingeConstraint::getRigidBodyB()\n");
  lua_error(L);return 0;
}


static int _wrap_btHingeConstraint_getFrameOffsetA(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::getFrameOffsetA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getFrameOffsetA",1,"btHingeConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getFrameOffsetA",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (btTransform *) &(arg1)->getFrameOffsetA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getFrameOffsetB(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::getFrameOffsetB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getFrameOffsetB",1,"btHingeConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getFrameOffsetB",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (btTransform *) &(arg1)->getFrameOffsetB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_setFrames(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::setFrames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::setFrames",1,"btHingeConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHingeConstraint::setFrames",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btHingeConstraint::setFrames",3,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_setFrames",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btHingeConstraint_setFrames",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btHingeConstraint_setFrames",3,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setFrames((btTransform const &)*arg2,(btTransform const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_setAngularOnly(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btHingeConstraint::setAngularOnly",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::setAngularOnly",1,"btHingeConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btHingeConstraint::setAngularOnly",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_setAngularOnly",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAngularOnly(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_enableAngularMotor(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  SWIG_check_num_args("btHingeConstraint::enableAngularMotor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::enableAngularMotor",1,"btHingeConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btHingeConstraint::enableAngularMotor",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btHingeConstraint::enableAngularMotor",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btHingeConstraint::enableAngularMotor",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_enableAngularMotor",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  (arg1)->enableAngularMotor(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_enableMotor(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btHingeConstraint::enableMotor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::enableMotor",1,"btHingeConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btHingeConstraint::enableMotor",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_enableMotor",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableMotor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_setMaxMotorImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btHingeConstraint::setMaxMotorImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::setMaxMotorImpulse",1,"btHingeConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraint::setMaxMotorImpulse",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_setMaxMotorImpulse",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setMaxMotorImpulse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_setMotorTarget__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btHingeConstraint::setMotorTarget",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::setMotorTarget",1,"btHingeConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHingeConstraint::setMotorTarget",2,"btQuaternion const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btHingeConstraint::setMotorTarget",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_setMotorTarget",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btHingeConstraint_setMotorTarget",2,SWIGTYPE_p_btQuaternion);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->setMotorTarget((btQuaternion const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_setMotorTarget__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btHingeConstraint::setMotorTarget",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::setMotorTarget",1,"btHingeConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraint::setMotorTarget",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btHingeConstraint::setMotorTarget",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_setMotorTarget",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->setMotorTarget(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_setMotorTarget(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btHingeConstraint_setMotorTarget__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btHingeConstraint_setMotorTarget__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btHingeConstraint_setMotorTarget'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btHingeConstraint::setMotorTarget(btQuaternion const &,btScalar)\n"
    "    btHingeConstraint::setMotorTarget(btScalar,btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btHingeConstraint_setLimit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  
  SWIG_check_num_args("btHingeConstraint::setLimit",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::setLimit",1,"btHingeConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraint::setLimit",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btHingeConstraint::setLimit",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btHingeConstraint::setLimit",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btHingeConstraint::setLimit",5,"btScalar");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btHingeConstraint::setLimit",6,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_setLimit",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (btScalar)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  (arg1)->setLimit(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_setLimit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  
  SWIG_check_num_args("btHingeConstraint::setLimit",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::setLimit",1,"btHingeConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraint::setLimit",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btHingeConstraint::setLimit",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btHingeConstraint::setLimit",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btHingeConstraint::setLimit",5,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_setLimit",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (btScalar)lua_tonumber(L, 5);
  (arg1)->setLimit(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_setLimit__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  SWIG_check_num_args("btHingeConstraint::setLimit",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::setLimit",1,"btHingeConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraint::setLimit",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btHingeConstraint::setLimit",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btHingeConstraint::setLimit",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_setLimit",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  (arg1)->setLimit(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_setLimit__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btHingeConstraint::setLimit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::setLimit",1,"btHingeConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraint::setLimit",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btHingeConstraint::setLimit",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_setLimit",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->setLimit(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_setLimit(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btHingeConstraint_setLimit__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btHingeConstraint_setLimit__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_btHingeConstraint_setLimit__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_btHingeConstraint_setLimit__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btHingeConstraint_setLimit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btHingeConstraint::setLimit(btScalar,btScalar,btScalar,btScalar,btScalar)\n"
    "    btHingeConstraint::setLimit(btScalar,btScalar,btScalar,btScalar)\n"
    "    btHingeConstraint::setLimit(btScalar,btScalar,btScalar)\n"
    "    btHingeConstraint::setLimit(btScalar,btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btHingeConstraint_setAxis(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::setAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::setAxis",1,"btHingeConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHingeConstraint::setAxis",2,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_setAxis",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btHingeConstraint_setAxis",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setAxis(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getLowerLimit(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btHingeConstraint::getLowerLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getLowerLimit",1,"btHingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getLowerLimit",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (btScalar)((btHingeConstraint const *)arg1)->getLowerLimit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getUpperLimit(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btHingeConstraint::getUpperLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getUpperLimit",1,"btHingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getUpperLimit",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (btScalar)((btHingeConstraint const *)arg1)->getUpperLimit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getHingeAngle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btHingeConstraint::getHingeAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getHingeAngle",1,"btHingeConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getHingeAngle",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (btScalar)(arg1)->getHingeAngle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getHingeAngle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btHingeConstraint::getHingeAngle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getHingeAngle",1,"btHingeConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHingeConstraint::getHingeAngle",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btHingeConstraint::getHingeAngle",3,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getHingeAngle",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btHingeConstraint_getHingeAngle",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btHingeConstraint_getHingeAngle",3,SWIGTYPE_p_btTransform);
  }
  
  result = (btScalar)(arg1)->getHingeAngle((btTransform const &)*arg2,(btTransform const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getHingeAngle(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btHingeConstraint_getHingeAngle__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btHingeConstraint_getHingeAngle__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btHingeConstraint_getHingeAngle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btHingeConstraint::getHingeAngle()\n"
    "    btHingeConstraint::getHingeAngle(btTransform const &,btTransform const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btHingeConstraint_testLimit(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::testLimit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::testLimit",1,"btHingeConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btHingeConstraint::testLimit",2,"btTransform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btHingeConstraint::testLimit",3,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_testLimit",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btHingeConstraint_testLimit",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btHingeConstraint_testLimit",3,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->testLimit((btTransform const &)*arg2,(btTransform const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getAFrame__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::getAFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getAFrame",1,"btHingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getAFrame",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (btTransform *) &((btHingeConstraint const *)arg1)->getAFrame();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getBFrame__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::getBFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getBFrame",1,"btHingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getBFrame",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (btTransform *) &((btHingeConstraint const *)arg1)->getBFrame();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getAFrame__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::getAFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getAFrame",1,"btHingeConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getAFrame",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (btTransform *) &(arg1)->getAFrame();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getAFrame(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btHingeConstraint_getAFrame__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btHingeConstraint_getAFrame__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btHingeConstraint_getAFrame'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btHingeConstraint::getAFrame() const\n"
    "    btHingeConstraint::getAFrame()\n");
  lua_error(L);return 0;
}


static int _wrap_btHingeConstraint_getBFrame__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::getBFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getBFrame",1,"btHingeConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getBFrame",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (btTransform *) &(arg1)->getBFrame();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getBFrame(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btHingeConstraint_getBFrame__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btHingeConstraint_getBFrame__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btHingeConstraint_getBFrame'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btHingeConstraint::getBFrame() const\n"
    "    btHingeConstraint::getBFrame()\n");
  lua_error(L);return 0;
}


static int _wrap_btHingeConstraint_getSolveLimit(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int result;
  
  SWIG_check_num_args("btHingeConstraint::getSolveLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getSolveLimit",1,"btHingeConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getSolveLimit",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (int)(arg1)->getSolveLimit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getLimitSign(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btHingeConstraint::getLimitSign",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getLimitSign",1,"btHingeConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getLimitSign",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (btScalar)(arg1)->getLimitSign();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getAngularOnly(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool result;
  
  SWIG_check_num_args("btHingeConstraint::getAngularOnly",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getAngularOnly",1,"btHingeConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getAngularOnly",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (bool)(arg1)->getAngularOnly();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getEnableAngularMotor(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool result;
  
  SWIG_check_num_args("btHingeConstraint::getEnableAngularMotor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getEnableAngularMotor",1,"btHingeConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getEnableAngularMotor",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (bool)(arg1)->getEnableAngularMotor();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getMotorTargetVelosity(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btHingeConstraint::getMotorTargetVelosity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getMotorTargetVelosity",1,"btHingeConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getMotorTargetVelosity",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (btScalar)(arg1)->getMotorTargetVelosity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getMaxMotorImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btHingeConstraint::getMaxMotorImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getMaxMotorImpulse",1,"btHingeConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getMaxMotorImpulse",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (btScalar)(arg1)->getMaxMotorImpulse();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getUseFrameOffset(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool result;
  
  SWIG_check_num_args("btHingeConstraint::getUseFrameOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getUseFrameOffset",1,"btHingeConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getUseFrameOffset",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (bool)(arg1)->getUseFrameOffset();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_setUseFrameOffset(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btHingeConstraint::setUseFrameOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::setUseFrameOffset",1,"btHingeConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btHingeConstraint::setUseFrameOffset",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_setUseFrameOffset",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setUseFrameOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_setParam__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("btHingeConstraint::setParam",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::setParam",1,"btHingeConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraint::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btHingeConstraint::setParam",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btHingeConstraint::setParam",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_setParam",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setParam(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_setParam__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btHingeConstraint::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::setParam",1,"btHingeConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraint::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btHingeConstraint::setParam",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_setParam",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_setParam(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btHingeConstraint_setParam__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btHingeConstraint_setParam__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btHingeConstraint_setParam'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btHingeConstraint::setParam(int,btScalar,int)\n"
    "    btHingeConstraint::setParam(int,btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btHingeConstraint_getParam__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  SWIG_check_num_args("btHingeConstraint::getParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getParam",1,"btHingeConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraint::getParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btHingeConstraint::getParam",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getParam",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (btScalar)((btHingeConstraint const *)arg1)->getParam(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getParam__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  SWIG_check_num_args("btHingeConstraint::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::getParam",1,"btHingeConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraint::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_getParam",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btScalar)((btHingeConstraint const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_getParam(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btHingeConstraint_getParam__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btHingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btHingeConstraint_getParam__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btHingeConstraint_getParam'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btHingeConstraint::getParam(int,int) const\n"
    "    btHingeConstraint::getParam(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_btHingeConstraint_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int result;
  
  SWIG_check_num_args("btHingeConstraint::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::calculateSerializeBufferSize",1,"btHingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_calculateSerializeBufferSize",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  result = (int)((btHingeConstraint const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraint_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraint::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraint::serialize",1,"btHingeConstraint const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHingeConstraint::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btHingeConstraint::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraint,0))){
    SWIG_fail_ptr("btHingeConstraint_serialize",1,SWIGTYPE_p_btHingeConstraint);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btHingeConstraint_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btHingeConstraint_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  result = (char *)((btHingeConstraint const *)arg1)->serialize(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btHingeConstraint(void *obj) {
btHingeConstraint *arg1 = (btHingeConstraint *) obj;
delete arg1;
}
static swig_lua_method swig_btHingeConstraint_methods[] = {
    {"buildJacobian", _wrap_btHingeConstraint_buildJacobian}, 
    {"getInfo1", _wrap_btHingeConstraint_getInfo1}, 
    {"getInfo1NonVirtual", _wrap_btHingeConstraint_getInfo1NonVirtual}, 
    {"getInfo2", _wrap_btHingeConstraint_getInfo2}, 
    {"getInfo2NonVirtual", _wrap_btHingeConstraint_getInfo2NonVirtual}, 
    {"getInfo2Internal", _wrap_btHingeConstraint_getInfo2Internal}, 
    {"getInfo2InternalUsingFrameOffset", _wrap_btHingeConstraint_getInfo2InternalUsingFrameOffset}, 
    {"updateRHS", _wrap_btHingeConstraint_updateRHS}, 
    {"getRigidBodyA", _wrap_btHingeConstraint_getRigidBodyA}, 
    {"getRigidBodyB", _wrap_btHingeConstraint_getRigidBodyB}, 
    {"getFrameOffsetA", _wrap_btHingeConstraint_getFrameOffsetA}, 
    {"getFrameOffsetB", _wrap_btHingeConstraint_getFrameOffsetB}, 
    {"setFrames", _wrap_btHingeConstraint_setFrames}, 
    {"setAngularOnly", _wrap_btHingeConstraint_setAngularOnly}, 
    {"enableAngularMotor", _wrap_btHingeConstraint_enableAngularMotor}, 
    {"enableMotor", _wrap_btHingeConstraint_enableMotor}, 
    {"setMaxMotorImpulse", _wrap_btHingeConstraint_setMaxMotorImpulse}, 
    {"setMotorTarget", _wrap_btHingeConstraint_setMotorTarget}, 
    {"setLimit", _wrap_btHingeConstraint_setLimit}, 
    {"setAxis", _wrap_btHingeConstraint_setAxis}, 
    {"getLowerLimit", _wrap_btHingeConstraint_getLowerLimit}, 
    {"getUpperLimit", _wrap_btHingeConstraint_getUpperLimit}, 
    {"getHingeAngle", _wrap_btHingeConstraint_getHingeAngle}, 
    {"testLimit", _wrap_btHingeConstraint_testLimit}, 
    {"getAFrame", _wrap_btHingeConstraint_getAFrame}, 
    {"getBFrame", _wrap_btHingeConstraint_getBFrame}, 
    {"getSolveLimit", _wrap_btHingeConstraint_getSolveLimit}, 
    {"getLimitSign", _wrap_btHingeConstraint_getLimitSign}, 
    {"getAngularOnly", _wrap_btHingeConstraint_getAngularOnly}, 
    {"getEnableAngularMotor", _wrap_btHingeConstraint_getEnableAngularMotor}, 
    {"getMotorTargetVelosity", _wrap_btHingeConstraint_getMotorTargetVelosity}, 
    {"getMaxMotorImpulse", _wrap_btHingeConstraint_getMaxMotorImpulse}, 
    {"getUseFrameOffset", _wrap_btHingeConstraint_getUseFrameOffset}, 
    {"setUseFrameOffset", _wrap_btHingeConstraint_setUseFrameOffset}, 
    {"setParam", _wrap_btHingeConstraint_setParam}, 
    {"getParam", _wrap_btHingeConstraint_getParam}, 
    {"calculateSerializeBufferSize", _wrap_btHingeConstraint_calculateSerializeBufferSize}, 
    {"serialize", _wrap_btHingeConstraint_serialize}, 
    {0,0}
};
static swig_lua_attribute swig_btHingeConstraint_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btHingeConstraint_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btHingeConstraint_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btHingeConstraint_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btHingeConstraint_bases[] = {0,0};
static const char *swig_btHingeConstraint_base_names[] = {"btTypedConstraint *",0};
static swig_lua_class _wrap_class_btHingeConstraint = { "btHingeConstraint", &SWIGTYPE_p_btHingeConstraint,_wrap_new_btHingeConstraint, swig_delete_btHingeConstraint, swig_btHingeConstraint_methods, swig_btHingeConstraint_attributes, { "btHingeConstraint", swig_btHingeConstraint_cls_methods, swig_btHingeConstraint_cls_attributes, swig_btHingeConstraint_cls_constants }, swig_btHingeConstraint_bases, swig_btHingeConstraint_base_names };

static int _wrap_btHingeConstraintDoubleData_m_typeConstraintData_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_typeConstraintData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_typeConstraintData",1,"btHingeConstraintDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHingeConstraintDoubleData::m_typeConstraintData",2,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_typeConstraintData_set",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_typeConstraintData_set",2,SWIGTYPE_p_btTypedConstraintData);
  }
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_typeConstraintData_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_typeConstraintData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_typeConstraintData",1,"btHingeConstraintDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_typeConstraintData_get",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraintData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_rbAFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_rbAFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_rbAFrame",1,"btHingeConstraintDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHingeConstraintDoubleData::m_rbAFrame",2,"btTransformDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_rbAFrame_set",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransformDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_rbAFrame_set",2,SWIGTYPE_p_btTransformDoubleData);
  }
  
  if (arg1) (arg1)->m_rbAFrame = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_rbAFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_rbAFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_rbAFrame",1,"btHingeConstraintDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_rbAFrame_get",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  result = (btTransformDoubleData *)& ((arg1)->m_rbAFrame);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransformDoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_rbBFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_rbBFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_rbBFrame",1,"btHingeConstraintDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHingeConstraintDoubleData::m_rbBFrame",2,"btTransformDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_rbBFrame_set",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransformDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_rbBFrame_set",2,SWIGTYPE_p_btTransformDoubleData);
  }
  
  if (arg1) (arg1)->m_rbBFrame = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_rbBFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_rbBFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_rbBFrame",1,"btHingeConstraintDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_rbBFrame_get",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  result = (btTransformDoubleData *)& ((arg1)->m_rbBFrame);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransformDoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_useReferenceFrameA_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_useReferenceFrameA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_useReferenceFrameA",1,"btHingeConstraintDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintDoubleData::m_useReferenceFrameA",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_useReferenceFrameA_set",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_useReferenceFrameA = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_useReferenceFrameA_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_useReferenceFrameA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_useReferenceFrameA",1,"btHingeConstraintDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_useReferenceFrameA_get",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  result = (int) ((arg1)->m_useReferenceFrameA);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_angularOnly_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_angularOnly",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_angularOnly",1,"btHingeConstraintDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintDoubleData::m_angularOnly",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_angularOnly_set",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_angularOnly = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_angularOnly_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_angularOnly",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_angularOnly",1,"btHingeConstraintDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_angularOnly_get",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  result = (int) ((arg1)->m_angularOnly);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_enableAngularMotor_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_enableAngularMotor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_enableAngularMotor",1,"btHingeConstraintDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintDoubleData::m_enableAngularMotor",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_enableAngularMotor_set",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_enableAngularMotor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_enableAngularMotor_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int result;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_enableAngularMotor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_enableAngularMotor",1,"btHingeConstraintDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_enableAngularMotor_get",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  result = (int) ((arg1)->m_enableAngularMotor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_motorTargetVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_motorTargetVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_motorTargetVelocity",1,"btHingeConstraintDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintDoubleData::m_motorTargetVelocity",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_motorTargetVelocity_set",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_motorTargetVelocity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_motorTargetVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_motorTargetVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_motorTargetVelocity",1,"btHingeConstraintDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_motorTargetVelocity_get",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  result = (float) ((arg1)->m_motorTargetVelocity);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_maxMotorImpulse_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_maxMotorImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_maxMotorImpulse",1,"btHingeConstraintDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintDoubleData::m_maxMotorImpulse",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_maxMotorImpulse_set",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_maxMotorImpulse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_maxMotorImpulse_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_maxMotorImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_maxMotorImpulse",1,"btHingeConstraintDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_maxMotorImpulse_get",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  result = (float) ((arg1)->m_maxMotorImpulse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_lowerLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_lowerLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_lowerLimit",1,"btHingeConstraintDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintDoubleData::m_lowerLimit",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_lowerLimit_set",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_lowerLimit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_lowerLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_lowerLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_lowerLimit",1,"btHingeConstraintDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_lowerLimit_get",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  result = (float) ((arg1)->m_lowerLimit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_upperLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_upperLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_upperLimit",1,"btHingeConstraintDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintDoubleData::m_upperLimit",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_upperLimit_set",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_upperLimit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_upperLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_upperLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_upperLimit",1,"btHingeConstraintDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_upperLimit_get",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  result = (float) ((arg1)->m_upperLimit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_limitSoftness_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_limitSoftness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_limitSoftness",1,"btHingeConstraintDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintDoubleData::m_limitSoftness",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_limitSoftness_set",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_limitSoftness = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_limitSoftness_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_limitSoftness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_limitSoftness",1,"btHingeConstraintDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_limitSoftness_get",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  result = (float) ((arg1)->m_limitSoftness);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_biasFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_biasFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_biasFactor",1,"btHingeConstraintDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintDoubleData::m_biasFactor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_biasFactor_set",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_biasFactor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_biasFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_biasFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_biasFactor",1,"btHingeConstraintDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_biasFactor_get",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  result = (float) ((arg1)->m_biasFactor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_relaxationFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_relaxationFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_relaxationFactor",1,"btHingeConstraintDoubleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintDoubleData::m_relaxationFactor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_relaxationFactor_set",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_relaxationFactor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintDoubleData_m_relaxationFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::m_relaxationFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintDoubleData::m_relaxationFactor",1,"btHingeConstraintDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintDoubleData,0))){
    SWIG_fail_ptr("btHingeConstraintDoubleData_m_relaxationFactor_get",1,SWIGTYPE_p_btHingeConstraintDoubleData);
  }
  
  result = (float) ((arg1)->m_relaxationFactor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btHingeConstraintDoubleData(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintDoubleData *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraintDoubleData::btHingeConstraintDoubleData",0,0)
  result = (btHingeConstraintDoubleData *)new btHingeConstraintDoubleData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHingeConstraintDoubleData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btHingeConstraintDoubleData(void *obj) {
btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) obj;
delete arg1;
}
static swig_lua_method swig_btHingeConstraintDoubleData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btHingeConstraintDoubleData_attributes[] = {
    { "m_typeConstraintData", _wrap_btHingeConstraintDoubleData_m_typeConstraintData_get, _wrap_btHingeConstraintDoubleData_m_typeConstraintData_set},
    { "m_rbAFrame", _wrap_btHingeConstraintDoubleData_m_rbAFrame_get, _wrap_btHingeConstraintDoubleData_m_rbAFrame_set},
    { "m_rbBFrame", _wrap_btHingeConstraintDoubleData_m_rbBFrame_get, _wrap_btHingeConstraintDoubleData_m_rbBFrame_set},
    { "m_useReferenceFrameA", _wrap_btHingeConstraintDoubleData_m_useReferenceFrameA_get, _wrap_btHingeConstraintDoubleData_m_useReferenceFrameA_set},
    { "m_angularOnly", _wrap_btHingeConstraintDoubleData_m_angularOnly_get, _wrap_btHingeConstraintDoubleData_m_angularOnly_set},
    { "m_enableAngularMotor", _wrap_btHingeConstraintDoubleData_m_enableAngularMotor_get, _wrap_btHingeConstraintDoubleData_m_enableAngularMotor_set},
    { "m_motorTargetVelocity", _wrap_btHingeConstraintDoubleData_m_motorTargetVelocity_get, _wrap_btHingeConstraintDoubleData_m_motorTargetVelocity_set},
    { "m_maxMotorImpulse", _wrap_btHingeConstraintDoubleData_m_maxMotorImpulse_get, _wrap_btHingeConstraintDoubleData_m_maxMotorImpulse_set},
    { "m_lowerLimit", _wrap_btHingeConstraintDoubleData_m_lowerLimit_get, _wrap_btHingeConstraintDoubleData_m_lowerLimit_set},
    { "m_upperLimit", _wrap_btHingeConstraintDoubleData_m_upperLimit_get, _wrap_btHingeConstraintDoubleData_m_upperLimit_set},
    { "m_limitSoftness", _wrap_btHingeConstraintDoubleData_m_limitSoftness_get, _wrap_btHingeConstraintDoubleData_m_limitSoftness_set},
    { "m_biasFactor", _wrap_btHingeConstraintDoubleData_m_biasFactor_get, _wrap_btHingeConstraintDoubleData_m_biasFactor_set},
    { "m_relaxationFactor", _wrap_btHingeConstraintDoubleData_m_relaxationFactor_get, _wrap_btHingeConstraintDoubleData_m_relaxationFactor_set},
    {0,0,0}
};
static swig_lua_attribute swig_btHingeConstraintDoubleData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btHingeConstraintDoubleData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btHingeConstraintDoubleData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btHingeConstraintDoubleData_bases[] = {0};
static const char *swig_btHingeConstraintDoubleData_base_names[] = {0};
static swig_lua_class _wrap_class_btHingeConstraintDoubleData = { "btHingeConstraintDoubleData", &SWIGTYPE_p_btHingeConstraintDoubleData,_wrap_new_btHingeConstraintDoubleData, swig_delete_btHingeConstraintDoubleData, swig_btHingeConstraintDoubleData_methods, swig_btHingeConstraintDoubleData_attributes, { "btHingeConstraintDoubleData", swig_btHingeConstraintDoubleData_cls_methods, swig_btHingeConstraintDoubleData_cls_attributes, swig_btHingeConstraintDoubleData_cls_constants }, swig_btHingeConstraintDoubleData_bases, swig_btHingeConstraintDoubleData_base_names };

static int _wrap_btHingeConstraintFloatData_m_typeConstraintData_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_typeConstraintData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_typeConstraintData",1,"btHingeConstraintFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHingeConstraintFloatData::m_typeConstraintData",2,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_typeConstraintData_set",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_typeConstraintData_set",2,SWIGTYPE_p_btTypedConstraintData);
  }
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_typeConstraintData_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_typeConstraintData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_typeConstraintData",1,"btHingeConstraintFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_typeConstraintData_get",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraintData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_rbAFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_rbAFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_rbAFrame",1,"btHingeConstraintFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHingeConstraintFloatData::m_rbAFrame",2,"btTransformFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_rbAFrame_set",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransformFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_rbAFrame_set",2,SWIGTYPE_p_btTransformFloatData);
  }
  
  if (arg1) (arg1)->m_rbAFrame = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_rbAFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_rbAFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_rbAFrame",1,"btHingeConstraintFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_rbAFrame_get",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  result = (btTransformFloatData *)& ((arg1)->m_rbAFrame);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransformFloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_rbBFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_rbBFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_rbBFrame",1,"btHingeConstraintFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btHingeConstraintFloatData::m_rbBFrame",2,"btTransformFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_rbBFrame_set",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransformFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_rbBFrame_set",2,SWIGTYPE_p_btTransformFloatData);
  }
  
  if (arg1) (arg1)->m_rbBFrame = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_rbBFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_rbBFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_rbBFrame",1,"btHingeConstraintFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_rbBFrame_get",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  result = (btTransformFloatData *)& ((arg1)->m_rbBFrame);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransformFloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_useReferenceFrameA_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_useReferenceFrameA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_useReferenceFrameA",1,"btHingeConstraintFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintFloatData::m_useReferenceFrameA",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_useReferenceFrameA_set",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_useReferenceFrameA = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_useReferenceFrameA_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_useReferenceFrameA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_useReferenceFrameA",1,"btHingeConstraintFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_useReferenceFrameA_get",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  result = (int) ((arg1)->m_useReferenceFrameA);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_angularOnly_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_angularOnly",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_angularOnly",1,"btHingeConstraintFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintFloatData::m_angularOnly",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_angularOnly_set",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_angularOnly = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_angularOnly_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_angularOnly",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_angularOnly",1,"btHingeConstraintFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_angularOnly_get",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  result = (int) ((arg1)->m_angularOnly);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_enableAngularMotor_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_enableAngularMotor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_enableAngularMotor",1,"btHingeConstraintFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintFloatData::m_enableAngularMotor",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_enableAngularMotor_set",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_enableAngularMotor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_enableAngularMotor_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int result;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_enableAngularMotor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_enableAngularMotor",1,"btHingeConstraintFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_enableAngularMotor_get",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  result = (int) ((arg1)->m_enableAngularMotor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_motorTargetVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_motorTargetVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_motorTargetVelocity",1,"btHingeConstraintFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintFloatData::m_motorTargetVelocity",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_motorTargetVelocity_set",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_motorTargetVelocity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_motorTargetVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_motorTargetVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_motorTargetVelocity",1,"btHingeConstraintFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_motorTargetVelocity_get",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  result = (float) ((arg1)->m_motorTargetVelocity);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_maxMotorImpulse_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_maxMotorImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_maxMotorImpulse",1,"btHingeConstraintFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintFloatData::m_maxMotorImpulse",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_maxMotorImpulse_set",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_maxMotorImpulse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_maxMotorImpulse_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_maxMotorImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_maxMotorImpulse",1,"btHingeConstraintFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_maxMotorImpulse_get",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  result = (float) ((arg1)->m_maxMotorImpulse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_lowerLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_lowerLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_lowerLimit",1,"btHingeConstraintFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintFloatData::m_lowerLimit",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_lowerLimit_set",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_lowerLimit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_lowerLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_lowerLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_lowerLimit",1,"btHingeConstraintFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_lowerLimit_get",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  result = (float) ((arg1)->m_lowerLimit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_upperLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_upperLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_upperLimit",1,"btHingeConstraintFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintFloatData::m_upperLimit",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_upperLimit_set",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_upperLimit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_upperLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_upperLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_upperLimit",1,"btHingeConstraintFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_upperLimit_get",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  result = (float) ((arg1)->m_upperLimit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_limitSoftness_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_limitSoftness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_limitSoftness",1,"btHingeConstraintFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintFloatData::m_limitSoftness",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_limitSoftness_set",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_limitSoftness = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_limitSoftness_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_limitSoftness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_limitSoftness",1,"btHingeConstraintFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_limitSoftness_get",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  result = (float) ((arg1)->m_limitSoftness);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_biasFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_biasFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_biasFactor",1,"btHingeConstraintFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintFloatData::m_biasFactor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_biasFactor_set",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_biasFactor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_biasFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_biasFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_biasFactor",1,"btHingeConstraintFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_biasFactor_get",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  result = (float) ((arg1)->m_biasFactor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_relaxationFactor_set(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_relaxationFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_relaxationFactor",1,"btHingeConstraintFloatData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btHingeConstraintFloatData::m_relaxationFactor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_relaxationFactor_set",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_relaxationFactor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btHingeConstraintFloatData_m_relaxationFactor_get(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  SWIG_check_num_args("btHingeConstraintFloatData::m_relaxationFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btHingeConstraintFloatData::m_relaxationFactor",1,"btHingeConstraintFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btHingeConstraintFloatData,0))){
    SWIG_fail_ptr("btHingeConstraintFloatData_m_relaxationFactor_get",1,SWIGTYPE_p_btHingeConstraintFloatData);
  }
  
  result = (float) ((arg1)->m_relaxationFactor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btHingeConstraintFloatData(lua_State* L) {
  int SWIG_arg = 0;
  btHingeConstraintFloatData *result = 0 ;
  
  SWIG_check_num_args("btHingeConstraintFloatData::btHingeConstraintFloatData",0,0)
  result = (btHingeConstraintFloatData *)new btHingeConstraintFloatData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHingeConstraintFloatData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btHingeConstraintFloatData(void *obj) {
btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) obj;
delete arg1;
}
static swig_lua_method swig_btHingeConstraintFloatData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btHingeConstraintFloatData_attributes[] = {
    { "m_typeConstraintData", _wrap_btHingeConstraintFloatData_m_typeConstraintData_get, _wrap_btHingeConstraintFloatData_m_typeConstraintData_set},
    { "m_rbAFrame", _wrap_btHingeConstraintFloatData_m_rbAFrame_get, _wrap_btHingeConstraintFloatData_m_rbAFrame_set},
    { "m_rbBFrame", _wrap_btHingeConstraintFloatData_m_rbBFrame_get, _wrap_btHingeConstraintFloatData_m_rbBFrame_set},
    { "m_useReferenceFrameA", _wrap_btHingeConstraintFloatData_m_useReferenceFrameA_get, _wrap_btHingeConstraintFloatData_m_useReferenceFrameA_set},
    { "m_angularOnly", _wrap_btHingeConstraintFloatData_m_angularOnly_get, _wrap_btHingeConstraintFloatData_m_angularOnly_set},
    { "m_enableAngularMotor", _wrap_btHingeConstraintFloatData_m_enableAngularMotor_get, _wrap_btHingeConstraintFloatData_m_enableAngularMotor_set},
    { "m_motorTargetVelocity", _wrap_btHingeConstraintFloatData_m_motorTargetVelocity_get, _wrap_btHingeConstraintFloatData_m_motorTargetVelocity_set},
    { "m_maxMotorImpulse", _wrap_btHingeConstraintFloatData_m_maxMotorImpulse_get, _wrap_btHingeConstraintFloatData_m_maxMotorImpulse_set},
    { "m_lowerLimit", _wrap_btHingeConstraintFloatData_m_lowerLimit_get, _wrap_btHingeConstraintFloatData_m_lowerLimit_set},
    { "m_upperLimit", _wrap_btHingeConstraintFloatData_m_upperLimit_get, _wrap_btHingeConstraintFloatData_m_upperLimit_set},
    { "m_limitSoftness", _wrap_btHingeConstraintFloatData_m_limitSoftness_get, _wrap_btHingeConstraintFloatData_m_limitSoftness_set},
    { "m_biasFactor", _wrap_btHingeConstraintFloatData_m_biasFactor_get, _wrap_btHingeConstraintFloatData_m_biasFactor_set},
    { "m_relaxationFactor", _wrap_btHingeConstraintFloatData_m_relaxationFactor_get, _wrap_btHingeConstraintFloatData_m_relaxationFactor_set},
    {0,0,0}
};
static swig_lua_attribute swig_btHingeConstraintFloatData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btHingeConstraintFloatData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btHingeConstraintFloatData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btHingeConstraintFloatData_bases[] = {0};
static const char *swig_btHingeConstraintFloatData_base_names[] = {0};
static swig_lua_class _wrap_class_btHingeConstraintFloatData = { "btHingeConstraintFloatData", &SWIGTYPE_p_btHingeConstraintFloatData,_wrap_new_btHingeConstraintFloatData, swig_delete_btHingeConstraintFloatData, swig_btHingeConstraintFloatData_methods, swig_btHingeConstraintFloatData_attributes, { "btHingeConstraintFloatData", swig_btHingeConstraintFloatData_cls_methods, swig_btHingeConstraintFloatData_cls_attributes, swig_btHingeConstraintFloatData_cls_constants }, swig_btHingeConstraintFloatData_bases, swig_btHingeConstraintFloatData_base_names };

static int _wrap_new_btConstraintSetting(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintSetting *result = 0 ;
  
  SWIG_check_num_args("btConstraintSetting::btConstraintSetting",0,0)
  result = (btConstraintSetting *)new btConstraintSetting();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConstraintSetting,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintSetting_m_tau_set(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btConstraintSetting::m_tau",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintSetting::m_tau",1,"btConstraintSetting *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConstraintSetting::m_tau",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintSetting,0))){
    SWIG_fail_ptr("btConstraintSetting_m_tau_set",1,SWIGTYPE_p_btConstraintSetting);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_tau = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintSetting_m_tau_get(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConstraintSetting::m_tau",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintSetting::m_tau",1,"btConstraintSetting *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintSetting,0))){
    SWIG_fail_ptr("btConstraintSetting_m_tau_get",1,SWIGTYPE_p_btConstraintSetting);
  }
  
  result = (btScalar) ((arg1)->m_tau);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintSetting_m_damping_set(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btConstraintSetting::m_damping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintSetting::m_damping",1,"btConstraintSetting *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConstraintSetting::m_damping",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintSetting,0))){
    SWIG_fail_ptr("btConstraintSetting_m_damping_set",1,SWIGTYPE_p_btConstraintSetting);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_damping = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintSetting_m_damping_get(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConstraintSetting::m_damping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintSetting::m_damping",1,"btConstraintSetting *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintSetting,0))){
    SWIG_fail_ptr("btConstraintSetting_m_damping_get",1,SWIGTYPE_p_btConstraintSetting);
  }
  
  result = (btScalar) ((arg1)->m_damping);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintSetting_m_impulseClamp_set(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btConstraintSetting::m_impulseClamp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintSetting::m_impulseClamp",1,"btConstraintSetting *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btConstraintSetting::m_impulseClamp",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintSetting,0))){
    SWIG_fail_ptr("btConstraintSetting_m_impulseClamp_set",1,SWIGTYPE_p_btConstraintSetting);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_impulseClamp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btConstraintSetting_m_impulseClamp_get(lua_State* L) {
  int SWIG_arg = 0;
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btConstraintSetting::m_impulseClamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btConstraintSetting::m_impulseClamp",1,"btConstraintSetting *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConstraintSetting,0))){
    SWIG_fail_ptr("btConstraintSetting_m_impulseClamp_get",1,SWIGTYPE_p_btConstraintSetting);
  }
  
  result = (btScalar) ((arg1)->m_impulseClamp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btConstraintSetting(void *obj) {
btConstraintSetting *arg1 = (btConstraintSetting *) obj;
delete arg1;
}
static swig_lua_method swig_btConstraintSetting_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btConstraintSetting_attributes[] = {
    { "m_tau", _wrap_btConstraintSetting_m_tau_get, _wrap_btConstraintSetting_m_tau_set},
    { "m_damping", _wrap_btConstraintSetting_m_damping_get, _wrap_btConstraintSetting_m_damping_set},
    { "m_impulseClamp", _wrap_btConstraintSetting_m_impulseClamp_get, _wrap_btConstraintSetting_m_impulseClamp_set},
    {0,0,0}
};
static swig_lua_attribute swig_btConstraintSetting_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btConstraintSetting_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btConstraintSetting_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btConstraintSetting_bases[] = {0};
static const char *swig_btConstraintSetting_base_names[] = {0};
static swig_lua_class _wrap_class_btConstraintSetting = { "btConstraintSetting", &SWIGTYPE_p_btConstraintSetting,_wrap_new_btConstraintSetting, swig_delete_btConstraintSetting, swig_btConstraintSetting_methods, swig_btConstraintSetting_attributes, { "btConstraintSetting", swig_btConstraintSetting_cls_methods, swig_btConstraintSetting_cls_attributes, swig_btConstraintSetting_cls_constants }, swig_btConstraintSetting_bases, swig_btConstraintSetting_base_names };

static int _wrap_btPoint2PointConstraint_m_useSolveConstraintObsolete_set(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::m_useSolveConstraintObsolete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::m_useSolveConstraintObsolete",1,"btPoint2PointConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btPoint2PointConstraint::m_useSolveConstraintObsolete",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_m_useSolveConstraintObsolete_set",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_useSolveConstraintObsolete = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_m_useSolveConstraintObsolete_get(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  bool result;
  
  SWIG_check_num_args("btPoint2PointConstraint::m_useSolveConstraintObsolete",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::m_useSolveConstraintObsolete",1,"btPoint2PointConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_m_useSolveConstraintObsolete_get",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  result = (bool) ((arg1)->m_useSolveConstraintObsolete);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_m_setting_set(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btConstraintSetting *arg2 = (btConstraintSetting *) 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::m_setting",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::m_setting",1,"btPoint2PointConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPoint2PointConstraint::m_setting",2,"btConstraintSetting *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_m_setting_set",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConstraintSetting,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_m_setting_set",2,SWIGTYPE_p_btConstraintSetting);
  }
  
  if (arg1) (arg1)->m_setting = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_m_setting_get(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btConstraintSetting *result = 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::m_setting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::m_setting",1,"btPoint2PointConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_m_setting_get",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  result = (btConstraintSetting *)& ((arg1)->m_setting);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConstraintSetting,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btPoint2PointConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btPoint2PointConstraint *result = 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::btPoint2PointConstraint",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btPoint2PointConstraint::btPoint2PointConstraint",1,"btRigidBody &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPoint2PointConstraint::btPoint2PointConstraint",2,"btRigidBody &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btPoint2PointConstraint::btPoint2PointConstraint",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btPoint2PointConstraint::btPoint2PointConstraint",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btPoint2PointConstraint",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btPoint2PointConstraint",2,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btPoint2PointConstraint",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btPoint2PointConstraint",4,SWIGTYPE_p_btVector3);
  }
  
  result = (btPoint2PointConstraint *)new btPoint2PointConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPoint2PointConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btPoint2PointConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBody *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btPoint2PointConstraint *result = 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::btPoint2PointConstraint",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btPoint2PointConstraint::btPoint2PointConstraint",1,"btRigidBody &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPoint2PointConstraint::btPoint2PointConstraint",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("new_btPoint2PointConstraint",1,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btPoint2PointConstraint",2,SWIGTYPE_p_btVector3);
  }
  
  result = (btPoint2PointConstraint *)new btPoint2PointConstraint(*arg1,(btVector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPoint2PointConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btPoint2PointConstraint(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_btPoint2PointConstraint__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_btPoint2PointConstraint__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btPoint2PointConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btPoint2PointConstraint::btPoint2PointConstraint(btRigidBody &,btRigidBody &,btVector3 const &,btVector3 const &)\n"
    "    btPoint2PointConstraint::btPoint2PointConstraint(btRigidBody &,btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btPoint2PointConstraint_buildJacobian(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::buildJacobian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::buildJacobian",1,"btPoint2PointConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_buildJacobian",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  (arg1)->buildJacobian();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_getInfo1(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::getInfo1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::getInfo1",1,"btPoint2PointConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPoint2PointConstraint::getInfo1",2,"btTypedConstraint::btConstraintInfo1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_getInfo1",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo1,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_getInfo1",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo1);
  }
  
  (arg1)->getInfo1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_getInfo1NonVirtual(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::getInfo1NonVirtual",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::getInfo1NonVirtual",1,"btPoint2PointConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPoint2PointConstraint::getInfo1NonVirtual",2,"btTypedConstraint::btConstraintInfo1 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_getInfo1NonVirtual",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo1,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_getInfo1NonVirtual",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo1);
  }
  
  (arg1)->getInfo1NonVirtual(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_getInfo2(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::getInfo2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::getInfo2",1,"btPoint2PointConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPoint2PointConstraint::getInfo2",2,"btTypedConstraint::btConstraintInfo2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_getInfo2",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_getInfo2",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2);
  }
  
  (arg1)->getInfo2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_getInfo2NonVirtual(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::getInfo2NonVirtual",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::getInfo2NonVirtual",1,"btPoint2PointConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPoint2PointConstraint::getInfo2NonVirtual",2,"btTypedConstraint::btConstraintInfo2 *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btPoint2PointConstraint::getInfo2NonVirtual",3,"btTransform const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btPoint2PointConstraint::getInfo2NonVirtual",4,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_getInfo2NonVirtual",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_getInfo2NonVirtual",2,SWIGTYPE_p_btTypedConstraint__btConstraintInfo2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_getInfo2NonVirtual",3,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_getInfo2NonVirtual",4,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_updateRHS(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::updateRHS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::updateRHS",1,"btPoint2PointConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPoint2PointConstraint::updateRHS",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_updateRHS",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->updateRHS(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_setPivotA(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::setPivotA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::setPivotA",1,"btPoint2PointConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPoint2PointConstraint::setPivotA",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_setPivotA",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_setPivotA",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setPivotA((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_setPivotB(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::setPivotB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::setPivotB",1,"btPoint2PointConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btPoint2PointConstraint::setPivotB",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_setPivotB",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_setPivotB",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setPivotB((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_getPivotInA(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::getPivotInA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::getPivotInA",1,"btPoint2PointConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_getPivotInA",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  result = (btVector3 *) &((btPoint2PointConstraint const *)arg1)->getPivotInA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_getPivotInB(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::getPivotInB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::getPivotInB",1,"btPoint2PointConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_getPivotInB",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  result = (btVector3 *) &((btPoint2PointConstraint const *)arg1)->getPivotInB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_setParam__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::setParam",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::setParam",1,"btPoint2PointConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPoint2PointConstraint::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btPoint2PointConstraint::setParam",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btPoint2PointConstraint::setParam",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_setParam",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setParam(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_setParam__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::setParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::setParam",1,"btPoint2PointConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPoint2PointConstraint::setParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btPoint2PointConstraint::setParam",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_setParam",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->setParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_setParam(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btPoint2PointConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btPoint2PointConstraint_setParam__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btPoint2PointConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btPoint2PointConstraint_setParam__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btPoint2PointConstraint_setParam'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btPoint2PointConstraint::setParam(int,btScalar,int)\n"
    "    btPoint2PointConstraint::setParam(int,btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btPoint2PointConstraint_getParam__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  SWIG_check_num_args("btPoint2PointConstraint::getParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::getParam",1,"btPoint2PointConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPoint2PointConstraint::getParam",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btPoint2PointConstraint::getParam",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_getParam",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (btScalar)((btPoint2PointConstraint const *)arg1)->getParam(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_getParam__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  SWIG_check_num_args("btPoint2PointConstraint::getParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::getParam",1,"btPoint2PointConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btPoint2PointConstraint::getParam",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_getParam",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btScalar)((btPoint2PointConstraint const *)arg1)->getParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_getParam(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btPoint2PointConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btPoint2PointConstraint_getParam__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btPoint2PointConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btPoint2PointConstraint_getParam__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btPoint2PointConstraint_getParam'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btPoint2PointConstraint::getParam(int,int) const\n"
    "    btPoint2PointConstraint::getParam(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_btPoint2PointConstraint_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int result;
  
  SWIG_check_num_args("btPoint2PointConstraint::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::calculateSerializeBufferSize",1,"btPoint2PointConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_calculateSerializeBufferSize",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  result = (int)((btPoint2PointConstraint const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraint_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraint::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraint::serialize",1,"btPoint2PointConstraint const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPoint2PointConstraint::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btPoint2PointConstraint::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraint,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_serialize",1,SWIGTYPE_p_btPoint2PointConstraint);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btPoint2PointConstraint_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btPoint2PointConstraint_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  result = (char *)((btPoint2PointConstraint const *)arg1)->serialize(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btPoint2PointConstraint(void *obj) {
btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) obj;
delete arg1;
}
static swig_lua_method swig_btPoint2PointConstraint_methods[] = {
    {"buildJacobian", _wrap_btPoint2PointConstraint_buildJacobian}, 
    {"getInfo1", _wrap_btPoint2PointConstraint_getInfo1}, 
    {"getInfo1NonVirtual", _wrap_btPoint2PointConstraint_getInfo1NonVirtual}, 
    {"getInfo2", _wrap_btPoint2PointConstraint_getInfo2}, 
    {"getInfo2NonVirtual", _wrap_btPoint2PointConstraint_getInfo2NonVirtual}, 
    {"updateRHS", _wrap_btPoint2PointConstraint_updateRHS}, 
    {"setPivotA", _wrap_btPoint2PointConstraint_setPivotA}, 
    {"setPivotB", _wrap_btPoint2PointConstraint_setPivotB}, 
    {"getPivotInA", _wrap_btPoint2PointConstraint_getPivotInA}, 
    {"getPivotInB", _wrap_btPoint2PointConstraint_getPivotInB}, 
    {"setParam", _wrap_btPoint2PointConstraint_setParam}, 
    {"getParam", _wrap_btPoint2PointConstraint_getParam}, 
    {"calculateSerializeBufferSize", _wrap_btPoint2PointConstraint_calculateSerializeBufferSize}, 
    {"serialize", _wrap_btPoint2PointConstraint_serialize}, 
    {0,0}
};
static swig_lua_attribute swig_btPoint2PointConstraint_attributes[] = {
    { "m_useSolveConstraintObsolete", _wrap_btPoint2PointConstraint_m_useSolveConstraintObsolete_get, _wrap_btPoint2PointConstraint_m_useSolveConstraintObsolete_set},
    { "m_setting", _wrap_btPoint2PointConstraint_m_setting_get, _wrap_btPoint2PointConstraint_m_setting_set},
    {0,0,0}
};
static swig_lua_attribute swig_btPoint2PointConstraint_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btPoint2PointConstraint_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btPoint2PointConstraint_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btPoint2PointConstraint_bases[] = {0,0};
static const char *swig_btPoint2PointConstraint_base_names[] = {"btTypedConstraint *",0};
static swig_lua_class _wrap_class_btPoint2PointConstraint = { "btPoint2PointConstraint", &SWIGTYPE_p_btPoint2PointConstraint,_wrap_new_btPoint2PointConstraint, swig_delete_btPoint2PointConstraint, swig_btPoint2PointConstraint_methods, swig_btPoint2PointConstraint_attributes, { "btPoint2PointConstraint", swig_btPoint2PointConstraint_cls_methods, swig_btPoint2PointConstraint_cls_attributes, swig_btPoint2PointConstraint_cls_constants }, swig_btPoint2PointConstraint_bases, swig_btPoint2PointConstraint_base_names };

static int _wrap_btPoint2PointConstraintFloatData_m_typeConstraintData_set(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraintFloatData::m_typeConstraintData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraintFloatData::m_typeConstraintData",1,"btPoint2PointConstraintFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPoint2PointConstraintFloatData::m_typeConstraintData",2,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraintFloatData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintFloatData_m_typeConstraintData_set",1,SWIGTYPE_p_btPoint2PointConstraintFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintFloatData_m_typeConstraintData_set",2,SWIGTYPE_p_btTypedConstraintData);
  }
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraintFloatData_m_typeConstraintData_get(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraintFloatData::m_typeConstraintData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraintFloatData::m_typeConstraintData",1,"btPoint2PointConstraintFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraintFloatData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintFloatData_m_typeConstraintData_get",1,SWIGTYPE_p_btPoint2PointConstraintFloatData);
  }
  
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraintData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraintFloatData_m_pivotInA_set(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraintFloatData::m_pivotInA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraintFloatData::m_pivotInA",1,"btPoint2PointConstraintFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPoint2PointConstraintFloatData::m_pivotInA",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraintFloatData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintFloatData_m_pivotInA_set",1,SWIGTYPE_p_btPoint2PointConstraintFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintFloatData_m_pivotInA_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_pivotInA = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraintFloatData_m_pivotInA_get(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraintFloatData::m_pivotInA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraintFloatData::m_pivotInA",1,"btPoint2PointConstraintFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraintFloatData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintFloatData_m_pivotInA_get",1,SWIGTYPE_p_btPoint2PointConstraintFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_pivotInA);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraintFloatData_m_pivotInB_set(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraintFloatData::m_pivotInB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraintFloatData::m_pivotInB",1,"btPoint2PointConstraintFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPoint2PointConstraintFloatData::m_pivotInB",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraintFloatData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintFloatData_m_pivotInB_set",1,SWIGTYPE_p_btPoint2PointConstraintFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintFloatData_m_pivotInB_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_pivotInB = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraintFloatData_m_pivotInB_get(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraintFloatData::m_pivotInB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraintFloatData::m_pivotInB",1,"btPoint2PointConstraintFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraintFloatData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintFloatData_m_pivotInB_get",1,SWIGTYPE_p_btPoint2PointConstraintFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_pivotInB);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btPoint2PointConstraintFloatData(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraintFloatData *result = 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraintFloatData::btPoint2PointConstraintFloatData",0,0)
  result = (btPoint2PointConstraintFloatData *)new btPoint2PointConstraintFloatData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPoint2PointConstraintFloatData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btPoint2PointConstraintFloatData(void *obj) {
btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) obj;
delete arg1;
}
static swig_lua_method swig_btPoint2PointConstraintFloatData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btPoint2PointConstraintFloatData_attributes[] = {
    { "m_typeConstraintData", _wrap_btPoint2PointConstraintFloatData_m_typeConstraintData_get, _wrap_btPoint2PointConstraintFloatData_m_typeConstraintData_set},
    { "m_pivotInA", _wrap_btPoint2PointConstraintFloatData_m_pivotInA_get, _wrap_btPoint2PointConstraintFloatData_m_pivotInA_set},
    { "m_pivotInB", _wrap_btPoint2PointConstraintFloatData_m_pivotInB_get, _wrap_btPoint2PointConstraintFloatData_m_pivotInB_set},
    {0,0,0}
};
static swig_lua_attribute swig_btPoint2PointConstraintFloatData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btPoint2PointConstraintFloatData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btPoint2PointConstraintFloatData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btPoint2PointConstraintFloatData_bases[] = {0};
static const char *swig_btPoint2PointConstraintFloatData_base_names[] = {0};
static swig_lua_class _wrap_class_btPoint2PointConstraintFloatData = { "btPoint2PointConstraintFloatData", &SWIGTYPE_p_btPoint2PointConstraintFloatData,_wrap_new_btPoint2PointConstraintFloatData, swig_delete_btPoint2PointConstraintFloatData, swig_btPoint2PointConstraintFloatData_methods, swig_btPoint2PointConstraintFloatData_attributes, { "btPoint2PointConstraintFloatData", swig_btPoint2PointConstraintFloatData_cls_methods, swig_btPoint2PointConstraintFloatData_cls_attributes, swig_btPoint2PointConstraintFloatData_cls_constants }, swig_btPoint2PointConstraintFloatData_bases, swig_btPoint2PointConstraintFloatData_base_names };

static int _wrap_btPoint2PointConstraintDoubleData_m_typeConstraintData_set(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraintDoubleData::m_typeConstraintData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraintDoubleData::m_typeConstraintData",1,"btPoint2PointConstraintDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPoint2PointConstraintDoubleData::m_typeConstraintData",2,"btTypedConstraintData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraintDoubleData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintDoubleData_m_typeConstraintData_set",1,SWIGTYPE_p_btPoint2PointConstraintDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraintData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintDoubleData_m_typeConstraintData_set",2,SWIGTYPE_p_btTypedConstraintData);
  }
  
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraintDoubleData_m_typeConstraintData_get(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraintDoubleData::m_typeConstraintData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraintDoubleData::m_typeConstraintData",1,"btPoint2PointConstraintDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraintDoubleData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintDoubleData_m_typeConstraintData_get",1,SWIGTYPE_p_btPoint2PointConstraintDoubleData);
  }
  
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraintData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraintDoubleData_m_pivotInA_set(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraintDoubleData::m_pivotInA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraintDoubleData::m_pivotInA",1,"btPoint2PointConstraintDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPoint2PointConstraintDoubleData::m_pivotInA",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraintDoubleData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintDoubleData_m_pivotInA_set",1,SWIGTYPE_p_btPoint2PointConstraintDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintDoubleData_m_pivotInA_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_pivotInA = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraintDoubleData_m_pivotInA_get(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraintDoubleData::m_pivotInA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraintDoubleData::m_pivotInA",1,"btPoint2PointConstraintDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraintDoubleData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintDoubleData_m_pivotInA_get",1,SWIGTYPE_p_btPoint2PointConstraintDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_pivotInA);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraintDoubleData_m_pivotInB_set(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraintDoubleData::m_pivotInB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraintDoubleData::m_pivotInB",1,"btPoint2PointConstraintDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPoint2PointConstraintDoubleData::m_pivotInB",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraintDoubleData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintDoubleData_m_pivotInB_set",1,SWIGTYPE_p_btPoint2PointConstraintDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintDoubleData_m_pivotInB_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_pivotInB = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPoint2PointConstraintDoubleData_m_pivotInB_get(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraintDoubleData::m_pivotInB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPoint2PointConstraintDoubleData::m_pivotInB",1,"btPoint2PointConstraintDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPoint2PointConstraintDoubleData,0))){
    SWIG_fail_ptr("btPoint2PointConstraintDoubleData_m_pivotInB_get",1,SWIGTYPE_p_btPoint2PointConstraintDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_pivotInB);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btPoint2PointConstraintDoubleData(lua_State* L) {
  int SWIG_arg = 0;
  btPoint2PointConstraintDoubleData *result = 0 ;
  
  SWIG_check_num_args("btPoint2PointConstraintDoubleData::btPoint2PointConstraintDoubleData",0,0)
  result = (btPoint2PointConstraintDoubleData *)new btPoint2PointConstraintDoubleData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPoint2PointConstraintDoubleData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btPoint2PointConstraintDoubleData(void *obj) {
btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) obj;
delete arg1;
}
static swig_lua_method swig_btPoint2PointConstraintDoubleData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btPoint2PointConstraintDoubleData_attributes[] = {
    { "m_typeConstraintData", _wrap_btPoint2PointConstraintDoubleData_m_typeConstraintData_get, _wrap_btPoint2PointConstraintDoubleData_m_typeConstraintData_set},
    { "m_pivotInA", _wrap_btPoint2PointConstraintDoubleData_m_pivotInA_get, _wrap_btPoint2PointConstraintDoubleData_m_pivotInA_set},
    { "m_pivotInB", _wrap_btPoint2PointConstraintDoubleData_m_pivotInB_get, _wrap_btPoint2PointConstraintDoubleData_m_pivotInB_set},
    {0,0,0}
};
static swig_lua_attribute swig_btPoint2PointConstraintDoubleData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btPoint2PointConstraintDoubleData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btPoint2PointConstraintDoubleData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btPoint2PointConstraintDoubleData_bases[] = {0};
static const char *swig_btPoint2PointConstraintDoubleData_base_names[] = {0};
static swig_lua_class _wrap_class_btPoint2PointConstraintDoubleData = { "btPoint2PointConstraintDoubleData", &SWIGTYPE_p_btPoint2PointConstraintDoubleData,_wrap_new_btPoint2PointConstraintDoubleData, swig_delete_btPoint2PointConstraintDoubleData, swig_btPoint2PointConstraintDoubleData_methods, swig_btPoint2PointConstraintDoubleData_attributes, { "btPoint2PointConstraintDoubleData", swig_btPoint2PointConstraintDoubleData_cls_methods, swig_btPoint2PointConstraintDoubleData_cls_attributes, swig_btPoint2PointConstraintDoubleData_cls_constants }, swig_btPoint2PointConstraintDoubleData_bases, swig_btPoint2PointConstraintDoubleData_base_names };

static int _wrap_new_btSequentialImpulseConstraintSolver(lua_State* L) {
  int SWIG_arg = 0;
  btSequentialImpulseConstraintSolver *result = 0 ;
  
  SWIG_check_num_args("btSequentialImpulseConstraintSolver::btSequentialImpulseConstraintSolver",0,0)
  result = (btSequentialImpulseConstraintSolver *)new btSequentialImpulseConstraintSolver();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSequentialImpulseConstraintSolver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSequentialImpulseConstraintSolver_solveGroup(lua_State* L) {
  int SWIG_arg = 0;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  btCollisionObject **arg2 = (btCollisionObject **) 0 ;
  int arg3 ;
  btPersistentManifold **arg4 = (btPersistentManifold **) 0 ;
  int arg5 ;
  btTypedConstraint **arg6 = (btTypedConstraint **) 0 ;
  int arg7 ;
  btContactSolverInfo *arg8 = 0 ;
  btIDebugDraw *arg9 = (btIDebugDraw *) 0 ;
  btStackAlloc *arg10 = (btStackAlloc *) 0 ;
  btDispatcher *arg11 = (btDispatcher *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSequentialImpulseConstraintSolver::solveGroup",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::solveGroup",1,"btSequentialImpulseConstraintSolver *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::solveGroup",2,"btCollisionObject **");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::solveGroup",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::solveGroup",4,"btPersistentManifold **");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::solveGroup",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::solveGroup",6,"btTypedConstraint **");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::solveGroup",7,"int");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::solveGroup",8,"btContactSolverInfo const &");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::solveGroup",9,"btIDebugDraw *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::solveGroup",10,"btStackAlloc *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::solveGroup",11,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSequentialImpulseConstraintSolver,0))){
    SWIG_fail_ptr("btSequentialImpulseConstraintSolver_solveGroup",1,SWIGTYPE_p_btSequentialImpulseConstraintSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_btCollisionObject,0))){
    SWIG_fail_ptr("btSequentialImpulseConstraintSolver_solveGroup",2,SWIGTYPE_p_p_btCollisionObject);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_btPersistentManifold,0))){
    SWIG_fail_ptr("btSequentialImpulseConstraintSolver_solveGroup",4,SWIGTYPE_p_p_btPersistentManifold);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btSequentialImpulseConstraintSolver_solveGroup",6,SWIGTYPE_p_p_btTypedConstraint);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_btContactSolverInfo,0))){
    SWIG_fail_ptr("btSequentialImpulseConstraintSolver_solveGroup",8,SWIGTYPE_p_btContactSolverInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("btSequentialImpulseConstraintSolver_solveGroup",9,SWIGTYPE_p_btIDebugDraw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_btStackAlloc,0))){
    SWIG_fail_ptr("btSequentialImpulseConstraintSolver_solveGroup",10,SWIGTYPE_p_btStackAlloc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btSequentialImpulseConstraintSolver_solveGroup",11,SWIGTYPE_p_btDispatcher);
  }
  
  result = (btScalar)(arg1)->solveGroup(arg2,arg3,arg4,arg5,arg6,arg7,(btContactSolverInfo const &)*arg8,arg9,arg10,arg11);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSequentialImpulseConstraintSolver_reset(lua_State* L) {
  int SWIG_arg = 0;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  
  SWIG_check_num_args("btSequentialImpulseConstraintSolver::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::reset",1,"btSequentialImpulseConstraintSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSequentialImpulseConstraintSolver,0))){
    SWIG_fail_ptr("btSequentialImpulseConstraintSolver_reset",1,SWIGTYPE_p_btSequentialImpulseConstraintSolver);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSequentialImpulseConstraintSolver_btRand2(lua_State* L) {
  int SWIG_arg = 0;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("btSequentialImpulseConstraintSolver::btRand2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::btRand2",1,"btSequentialImpulseConstraintSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSequentialImpulseConstraintSolver,0))){
    SWIG_fail_ptr("btSequentialImpulseConstraintSolver_btRand2",1,SWIGTYPE_p_btSequentialImpulseConstraintSolver);
  }
  
  result = (unsigned long)(arg1)->btRand2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSequentialImpulseConstraintSolver_btRandInt2(lua_State* L) {
  int SWIG_arg = 0;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("btSequentialImpulseConstraintSolver::btRandInt2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::btRandInt2",1,"btSequentialImpulseConstraintSolver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::btRandInt2",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSequentialImpulseConstraintSolver,0))){
    SWIG_fail_ptr("btSequentialImpulseConstraintSolver_btRandInt2",1,SWIGTYPE_p_btSequentialImpulseConstraintSolver);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->btRandInt2(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSequentialImpulseConstraintSolver_setRandSeed(lua_State* L) {
  int SWIG_arg = 0;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("btSequentialImpulseConstraintSolver::setRandSeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::setRandSeed",1,"btSequentialImpulseConstraintSolver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::setRandSeed",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSequentialImpulseConstraintSolver,0))){
    SWIG_fail_ptr("btSequentialImpulseConstraintSolver_setRandSeed",1,SWIGTYPE_p_btSequentialImpulseConstraintSolver);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  (arg1)->setRandSeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSequentialImpulseConstraintSolver_getRandSeed(lua_State* L) {
  int SWIG_arg = 0;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("btSequentialImpulseConstraintSolver::getRandSeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSequentialImpulseConstraintSolver::getRandSeed",1,"btSequentialImpulseConstraintSolver const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSequentialImpulseConstraintSolver,0))){
    SWIG_fail_ptr("btSequentialImpulseConstraintSolver_getRandSeed",1,SWIGTYPE_p_btSequentialImpulseConstraintSolver);
  }
  
  result = (unsigned long)((btSequentialImpulseConstraintSolver const *)arg1)->getRandSeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSequentialImpulseConstraintSolver(void *obj) {
btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) obj;
delete arg1;
}
static swig_lua_method swig_btSequentialImpulseConstraintSolver_methods[] = {
    {"solveGroup", _wrap_btSequentialImpulseConstraintSolver_solveGroup}, 
    {"reset", _wrap_btSequentialImpulseConstraintSolver_reset}, 
    {"btRand2", _wrap_btSequentialImpulseConstraintSolver_btRand2}, 
    {"btRandInt2", _wrap_btSequentialImpulseConstraintSolver_btRandInt2}, 
    {"setRandSeed", _wrap_btSequentialImpulseConstraintSolver_setRandSeed}, 
    {"getRandSeed", _wrap_btSequentialImpulseConstraintSolver_getRandSeed}, 
    {0,0}
};
static swig_lua_attribute swig_btSequentialImpulseConstraintSolver_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btSequentialImpulseConstraintSolver_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSequentialImpulseConstraintSolver_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btSequentialImpulseConstraintSolver_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSequentialImpulseConstraintSolver_bases[] = {0,0};
static const char *swig_btSequentialImpulseConstraintSolver_base_names[] = {"btConstraintSolver *",0};
static swig_lua_class _wrap_class_btSequentialImpulseConstraintSolver = { "btSequentialImpulseConstraintSolver", &SWIGTYPE_p_btSequentialImpulseConstraintSolver,_wrap_new_btSequentialImpulseConstraintSolver, swig_delete_btSequentialImpulseConstraintSolver, swig_btSequentialImpulseConstraintSolver_methods, swig_btSequentialImpulseConstraintSolver_attributes, { "btSequentialImpulseConstraintSolver", swig_btSequentialImpulseConstraintSolver_cls_methods, swig_btSequentialImpulseConstraintSolver_cls_attributes, swig_btSequentialImpulseConstraintSolver_cls_constants }, swig_btSequentialImpulseConstraintSolver_bases, swig_btSequentialImpulseConstraintSolver_base_names };

static int _wrap_new_btSolve2LinearConstraint(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btSolve2LinearConstraint *result = 0 ;
  
  SWIG_check_num_args("btSolve2LinearConstraint::btSolve2LinearConstraint",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("btSolve2LinearConstraint::btSolve2LinearConstraint",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSolve2LinearConstraint::btSolve2LinearConstraint",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (btSolve2LinearConstraint *)new btSolve2LinearConstraint(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSolve2LinearConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolve2LinearConstraint_resolveUnilateralPairConstraint(lua_State* L) {
  int SWIG_arg = 0;
  btSolve2LinearConstraint *arg1 = (btSolve2LinearConstraint *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  btRigidBody *arg3 = (btRigidBody *) 0 ;
  btMatrix3x3 *arg4 = 0 ;
  btMatrix3x3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btScalar arg7 ;
  btVector3 *arg8 = 0 ;
  btVector3 *arg9 = 0 ;
  btVector3 *arg10 = 0 ;
  btVector3 *arg11 = 0 ;
  btScalar arg12 ;
  btVector3 *arg13 = 0 ;
  btVector3 *arg14 = 0 ;
  btVector3 *arg15 = 0 ;
  btScalar arg16 ;
  btVector3 *arg17 = 0 ;
  btVector3 *arg18 = 0 ;
  btVector3 *arg19 = 0 ;
  btScalar arg20 ;
  btVector3 *arg21 = 0 ;
  btScalar *arg22 = 0 ;
  btScalar *arg23 = 0 ;
  
  SWIG_check_num_args("btSolve2LinearConstraint::resolveUnilateralPairConstraint",23,23)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",1,"btSolve2LinearConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",2,"btRigidBody *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",3,"btRigidBody *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",4,"btMatrix3x3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",5,"btMatrix3x3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",6,"btVector3 const &");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",7,"btScalar const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",8,"btVector3 const &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",9,"btVector3 const &");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",10,"btVector3 const &");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",11,"btVector3 const &");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",12,"btScalar const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",13,"btVector3 const &");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",14,"btVector3 const &");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",15,"btVector3 const &");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",16,"btScalar");
  if(!lua_isuserdata(L,17)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",17,"btVector3 const &");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",18,"btVector3 const &");
  if(!lua_isuserdata(L,19)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",19,"btVector3 const &");
  if(!lua_isnumber(L,20)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",20,"btScalar");
  if(!lua_isuserdata(L,21)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",21,"btVector3 const &");
  if(!lua_isuserdata(L,22)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",22,"btScalar &");
  if(!lua_isuserdata(L,23)) SWIG_fail_arg("btSolve2LinearConstraint::resolveUnilateralPairConstraint",23,"btScalar &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolve2LinearConstraint,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",1,SWIGTYPE_p_btSolve2LinearConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",2,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",3,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",4,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",5,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",6,SWIGTYPE_p_btVector3);
  }
  
  arg7 = (btScalar const)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",8,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",9,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",10,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",11,SWIGTYPE_p_btVector3);
  }
  
  arg12 = (btScalar const)lua_tonumber(L, 12);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",13,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",14,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",15,SWIGTYPE_p_btVector3);
  }
  
  arg16 = (btScalar)lua_tonumber(L, 16);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",17,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&arg18,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",18,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&arg19,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",19,SWIGTYPE_p_btVector3);
  }
  
  arg20 = (btScalar)lua_tonumber(L, 20);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,21,(void**)&arg21,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",21,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,22,(void**)&arg22,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",22,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,23,(void**)&arg23,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveUnilateralPairConstraint",23,SWIGTYPE_p_float);
  }
  
  (arg1)->resolveUnilateralPairConstraint(arg2,arg3,(btMatrix3x3 const &)*arg4,(btMatrix3x3 const &)*arg5,(btVector3 const &)*arg6,arg7,(btVector3 const &)*arg8,(btVector3 const &)*arg9,(btVector3 const &)*arg10,(btVector3 const &)*arg11,arg12,(btVector3 const &)*arg13,(btVector3 const &)*arg14,(btVector3 const &)*arg15,arg16,(btVector3 const &)*arg17,(btVector3 const &)*arg18,(btVector3 const &)*arg19,arg20,(btVector3 const &)*arg21,*arg22,*arg23);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSolve2LinearConstraint_resolveBilateralPairConstraint(lua_State* L) {
  int SWIG_arg = 0;
  btSolve2LinearConstraint *arg1 = (btSolve2LinearConstraint *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  btRigidBody *arg3 = (btRigidBody *) 0 ;
  btMatrix3x3 *arg4 = 0 ;
  btMatrix3x3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btScalar arg7 ;
  btVector3 *arg8 = 0 ;
  btVector3 *arg9 = 0 ;
  btVector3 *arg10 = 0 ;
  btVector3 *arg11 = 0 ;
  btScalar arg12 ;
  btVector3 *arg13 = 0 ;
  btVector3 *arg14 = 0 ;
  btVector3 *arg15 = 0 ;
  btScalar arg16 ;
  btVector3 *arg17 = 0 ;
  btVector3 *arg18 = 0 ;
  btVector3 *arg19 = 0 ;
  btScalar arg20 ;
  btVector3 *arg21 = 0 ;
  btScalar *arg22 = 0 ;
  btScalar *arg23 = 0 ;
  
  SWIG_check_num_args("btSolve2LinearConstraint::resolveBilateralPairConstraint",23,23)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",1,"btSolve2LinearConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",2,"btRigidBody *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",3,"btRigidBody *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",4,"btMatrix3x3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",5,"btMatrix3x3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",6,"btVector3 const &");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",7,"btScalar const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",8,"btVector3 const &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",9,"btVector3 const &");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",10,"btVector3 const &");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",11,"btVector3 const &");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",12,"btScalar const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",13,"btVector3 const &");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",14,"btVector3 const &");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",15,"btVector3 const &");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",16,"btScalar");
  if(!lua_isuserdata(L,17)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",17,"btVector3 const &");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",18,"btVector3 const &");
  if(!lua_isuserdata(L,19)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",19,"btVector3 const &");
  if(!lua_isnumber(L,20)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",20,"btScalar");
  if(!lua_isuserdata(L,21)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",21,"btVector3 const &");
  if(!lua_isuserdata(L,22)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",22,"btScalar &");
  if(!lua_isuserdata(L,23)) SWIG_fail_arg("btSolve2LinearConstraint::resolveBilateralPairConstraint",23,"btScalar &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSolve2LinearConstraint,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",1,SWIGTYPE_p_btSolve2LinearConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",2,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",3,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",4,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",5,SWIGTYPE_p_btMatrix3x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",6,SWIGTYPE_p_btVector3);
  }
  
  arg7 = (btScalar const)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",8,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",9,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",10,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",11,SWIGTYPE_p_btVector3);
  }
  
  arg12 = (btScalar const)lua_tonumber(L, 12);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",13,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",14,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",15,SWIGTYPE_p_btVector3);
  }
  
  arg16 = (btScalar)lua_tonumber(L, 16);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",17,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&arg18,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",18,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&arg19,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",19,SWIGTYPE_p_btVector3);
  }
  
  arg20 = (btScalar)lua_tonumber(L, 20);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,21,(void**)&arg21,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",21,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,22,(void**)&arg22,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",22,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,23,(void**)&arg23,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btSolve2LinearConstraint_resolveBilateralPairConstraint",23,SWIGTYPE_p_float);
  }
  
  (arg1)->resolveBilateralPairConstraint(arg2,arg3,(btMatrix3x3 const &)*arg4,(btMatrix3x3 const &)*arg5,(btVector3 const &)*arg6,arg7,(btVector3 const &)*arg8,(btVector3 const &)*arg9,(btVector3 const &)*arg10,(btVector3 const &)*arg11,arg12,(btVector3 const &)*arg13,(btVector3 const &)*arg14,(btVector3 const &)*arg15,arg16,(btVector3 const &)*arg17,(btVector3 const &)*arg18,(btVector3 const &)*arg19,arg20,(btVector3 const &)*arg21,*arg22,*arg23);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSolve2LinearConstraint(void *obj) {
btSolve2LinearConstraint *arg1 = (btSolve2LinearConstraint *) obj;
delete arg1;
}
static swig_lua_method swig_btSolve2LinearConstraint_methods[] = {
    {"resolveUnilateralPairConstraint", _wrap_btSolve2LinearConstraint_resolveUnilateralPairConstraint}, 
    {"resolveBilateralPairConstraint", _wrap_btSolve2LinearConstraint_resolveBilateralPairConstraint}, 
    {0,0}
};
static swig_lua_attribute swig_btSolve2LinearConstraint_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btSolve2LinearConstraint_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSolve2LinearConstraint_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btSolve2LinearConstraint_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSolve2LinearConstraint_bases[] = {0};
static const char *swig_btSolve2LinearConstraint_base_names[] = {0};
static swig_lua_class _wrap_class_btSolve2LinearConstraint = { "btSolve2LinearConstraint", &SWIGTYPE_p_btSolve2LinearConstraint,_wrap_new_btSolve2LinearConstraint, swig_delete_btSolve2LinearConstraint, swig_btSolve2LinearConstraint_methods, swig_btSolve2LinearConstraint_attributes, { "btSolve2LinearConstraint", swig_btSolve2LinearConstraint_cls_methods, swig_btSolve2LinearConstraint_cls_attributes, swig_btSolve2LinearConstraint_cls_constants }, swig_btSolve2LinearConstraint_bases, swig_btSolve2LinearConstraint_base_names };

static int _wrap_btDynamicsWorld_stepSimulation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  btScalar arg4 ;
  int result;
  
  SWIG_check_num_args("btDynamicsWorld::stepSimulation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::stepSimulation",1,"btDynamicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDynamicsWorld::stepSimulation",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btDynamicsWorld::stepSimulation",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btDynamicsWorld::stepSimulation",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_stepSimulation",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  result = (int)(arg1)->stepSimulation(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_stepSimulation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("btDynamicsWorld::stepSimulation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::stepSimulation",1,"btDynamicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDynamicsWorld::stepSimulation",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btDynamicsWorld::stepSimulation",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_stepSimulation",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->stepSimulation(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_stepSimulation__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int result;
  
  SWIG_check_num_args("btDynamicsWorld::stepSimulation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::stepSimulation",1,"btDynamicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDynamicsWorld::stepSimulation",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_stepSimulation",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (int)(arg1)->stepSimulation(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_stepSimulation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btDynamicsWorld_stepSimulation__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btDynamicsWorld_stepSimulation__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btDynamicsWorld_stepSimulation__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btDynamicsWorld_stepSimulation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btDynamicsWorld::stepSimulation(btScalar,int,btScalar)\n"
    "    btDynamicsWorld::stepSimulation(btScalar,int)\n"
    "    btDynamicsWorld::stepSimulation(btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btDynamicsWorld_debugDrawWorld(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::debugDrawWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::debugDrawWorld",1,"btDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_debugDrawWorld",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  (arg1)->debugDrawWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_addConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("btDynamicsWorld::addConstraint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::addConstraint",1,"btDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorld::addConstraint",2,"btTypedConstraint *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("btDynamicsWorld::addConstraint",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_addConstraint",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btDynamicsWorld_addConstraint",2,SWIGTYPE_p_btTypedConstraint);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->addConstraint(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_addConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::addConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::addConstraint",1,"btDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorld::addConstraint",2,"btTypedConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_addConstraint",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btDynamicsWorld_addConstraint",2,SWIGTYPE_p_btTypedConstraint);
  }
  
  (arg1)->addConstraint(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_addConstraint(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btTypedConstraint, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btDynamicsWorld_addConstraint__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btTypedConstraint, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_btDynamicsWorld_addConstraint__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btDynamicsWorld_addConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btDynamicsWorld::addConstraint(btTypedConstraint *,bool)\n"
    "    btDynamicsWorld::addConstraint(btTypedConstraint *)\n");
  lua_error(L);return 0;
}


static int _wrap_btDynamicsWorld_removeConstraint(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::removeConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::removeConstraint",1,"btDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorld::removeConstraint",2,"btTypedConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_removeConstraint",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btDynamicsWorld_removeConstraint",2,SWIGTYPE_p_btTypedConstraint);
  }
  
  (arg1)->removeConstraint(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_addAction(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::addAction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::addAction",1,"btDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorld::addAction",2,"btActionInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_addAction",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btActionInterface,0))){
    SWIG_fail_ptr("btDynamicsWorld_addAction",2,SWIGTYPE_p_btActionInterface);
  }
  
  (arg1)->addAction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_removeAction(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::removeAction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::removeAction",1,"btDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorld::removeAction",2,"btActionInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_removeAction",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btActionInterface,0))){
    SWIG_fail_ptr("btDynamicsWorld_removeAction",2,SWIGTYPE_p_btActionInterface);
  }
  
  (arg1)->removeAction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_setGravity(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::setGravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::setGravity",1,"btDynamicsWorld *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btDynamicsWorld::setGravity",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_setGravity",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btDynamicsWorld_setGravity",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setGravity((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_getGravity(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btDynamicsWorld::getGravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::getGravity",1,"btDynamicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_getGravity",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  result = ((btDynamicsWorld const *)arg1)->getGravity();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_synchronizeMotionStates(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::synchronizeMotionStates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::synchronizeMotionStates",1,"btDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_synchronizeMotionStates",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  (arg1)->synchronizeMotionStates();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_addRigidBody__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::addRigidBody",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::addRigidBody",1,"btDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorld::addRigidBody",2,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_addRigidBody",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btDynamicsWorld_addRigidBody",2,SWIGTYPE_p_btRigidBody);
  }
  
  (arg1)->addRigidBody(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_addRigidBody__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  short arg3 ;
  short arg4 ;
  
  SWIG_check_num_args("btDynamicsWorld::addRigidBody",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::addRigidBody",1,"btDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorld::addRigidBody",2,"btRigidBody *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btDynamicsWorld::addRigidBody",3,"short");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btDynamicsWorld::addRigidBody",4,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_addRigidBody",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btDynamicsWorld_addRigidBody",2,SWIGTYPE_p_btRigidBody);
  }
  
  arg3 = (short)lua_tonumber(L, 3);
  arg4 = (short)lua_tonumber(L, 4);
  (arg1)->addRigidBody(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_addRigidBody(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btDynamicsWorld_addRigidBody__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btDynamicsWorld_addRigidBody__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btDynamicsWorld_addRigidBody'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btDynamicsWorld::addRigidBody(btRigidBody *)\n"
    "    btDynamicsWorld::addRigidBody(btRigidBody *,short,short)\n");
  lua_error(L);return 0;
}


static int _wrap_btDynamicsWorld_removeRigidBody(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::removeRigidBody",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::removeRigidBody",1,"btDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorld::removeRigidBody",2,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_removeRigidBody",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btDynamicsWorld_removeRigidBody",2,SWIGTYPE_p_btRigidBody);
  }
  
  (arg1)->removeRigidBody(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_setConstraintSolver(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btConstraintSolver *arg2 = (btConstraintSolver *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::setConstraintSolver",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::setConstraintSolver",1,"btDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorld::setConstraintSolver",2,"btConstraintSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_setConstraintSolver",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConstraintSolver,0))){
    SWIG_fail_ptr("btDynamicsWorld_setConstraintSolver",2,SWIGTYPE_p_btConstraintSolver);
  }
  
  (arg1)->setConstraintSolver(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_getConstraintSolver(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btConstraintSolver *result = 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::getConstraintSolver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::getConstraintSolver",1,"btDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_getConstraintSolver",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  result = (btConstraintSolver *)(arg1)->getConstraintSolver();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConstraintSolver,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_getNumConstraints(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  int result;
  
  SWIG_check_num_args("btDynamicsWorld::getNumConstraints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::getNumConstraints",1,"btDynamicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_getNumConstraints",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  result = (int)((btDynamicsWorld const *)arg1)->getNumConstraints();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_getConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::getConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::getConstraint",1,"btDynamicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDynamicsWorld::getConstraint",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_getConstraint",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btTypedConstraint *)(arg1)->getConstraint(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_getConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::getConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::getConstraint",1,"btDynamicsWorld const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDynamicsWorld::getConstraint",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_getConstraint",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btTypedConstraint *)((btDynamicsWorld const *)arg1)->getConstraint(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_getConstraint(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btDynamicsWorld_getConstraint__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btDynamicsWorld_getConstraint__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btDynamicsWorld_getConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btDynamicsWorld::getConstraint(int)\n"
    "    btDynamicsWorld::getConstraint(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_btDynamicsWorld_getWorldType(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btDynamicsWorldType result;
  
  SWIG_check_num_args("btDynamicsWorld::getWorldType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::getWorldType",1,"btDynamicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_getWorldType",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  result = (btDynamicsWorldType)((btDynamicsWorld const *)arg1)->getWorldType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_clearForces(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::clearForces",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::clearForces",1,"btDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_clearForces",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  (arg1)->clearForces();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_setInternalTickCallback__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  void *arg3 = (void *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("btDynamicsWorld::setInternalTickCallback",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::setInternalTickCallback",1,"btDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorld::setInternalTickCallback",2,"btInternalTickCallback");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btDynamicsWorld::setInternalTickCallback",3,"void *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("btDynamicsWorld::setInternalTickCallback",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_setInternalTickCallback",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_btDynamicsWorld_float__void,0))){
    SWIG_fail_ptr("btDynamicsWorld_setInternalTickCallback",2,SWIGTYPE_p_f_p_btDynamicsWorld_float__void);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"btDynamicsWorld_setInternalTickCallback");
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->setInternalTickCallback(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_setInternalTickCallback__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::setInternalTickCallback",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::setInternalTickCallback",1,"btDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorld::setInternalTickCallback",2,"btInternalTickCallback");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btDynamicsWorld::setInternalTickCallback",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_setInternalTickCallback",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_btDynamicsWorld_float__void,0))){
    SWIG_fail_ptr("btDynamicsWorld_setInternalTickCallback",2,SWIGTYPE_p_f_p_btDynamicsWorld_float__void);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"btDynamicsWorld_setInternalTickCallback");
  (arg1)->setInternalTickCallback(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_setInternalTickCallback__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::setInternalTickCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::setInternalTickCallback",1,"btDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorld::setInternalTickCallback",2,"btInternalTickCallback");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_setInternalTickCallback",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_btDynamicsWorld_float__void,0))){
    SWIG_fail_ptr("btDynamicsWorld_setInternalTickCallback",2,SWIGTYPE_p_f_p_btDynamicsWorld_float__void);
  }
  
  (arg1)->setInternalTickCallback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_setInternalTickCallback(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_btDynamicsWorld_float__void, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btDynamicsWorld_setInternalTickCallback__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_btDynamicsWorld_float__void, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btDynamicsWorld_setInternalTickCallback__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_p_btDynamicsWorld_float__void, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_btDynamicsWorld_setInternalTickCallback__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btDynamicsWorld_setInternalTickCallback'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btDynamicsWorld::setInternalTickCallback(btInternalTickCallback,void *,bool)\n"
    "    btDynamicsWorld::setInternalTickCallback(btInternalTickCallback,void *)\n"
    "    btDynamicsWorld::setInternalTickCallback(btInternalTickCallback)\n");
  lua_error(L);return 0;
}


static int _wrap_btDynamicsWorld_setWorldUserInfo(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::setWorldUserInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::setWorldUserInfo",1,"btDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorld::setWorldUserInfo",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_setWorldUserInfo",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btDynamicsWorld_setWorldUserInfo");
  (arg1)->setWorldUserInfo(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_getWorldUserInfo(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::getWorldUserInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::getWorldUserInfo",1,"btDynamicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_getWorldUserInfo",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  result = (void *)((btDynamicsWorld const *)arg1)->getWorldUserInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_getSolverInfo(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btContactSolverInfo *result = 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::getSolverInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::getSolverInfo",1,"btDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_getSolverInfo",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  result = (btContactSolverInfo *) &(arg1)->getSolverInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btContactSolverInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_addVehicle(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::addVehicle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::addVehicle",1,"btDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorld::addVehicle",2,"btActionInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_addVehicle",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btActionInterface,0))){
    SWIG_fail_ptr("btDynamicsWorld_addVehicle",2,SWIGTYPE_p_btActionInterface);
  }
  
  (arg1)->addVehicle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_removeVehicle(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::removeVehicle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::removeVehicle",1,"btDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorld::removeVehicle",2,"btActionInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_removeVehicle",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btActionInterface,0))){
    SWIG_fail_ptr("btDynamicsWorld_removeVehicle",2,SWIGTYPE_p_btActionInterface);
  }
  
  (arg1)->removeVehicle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_addCharacter(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::addCharacter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::addCharacter",1,"btDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorld::addCharacter",2,"btActionInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_addCharacter",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btActionInterface,0))){
    SWIG_fail_ptr("btDynamicsWorld_addCharacter",2,SWIGTYPE_p_btActionInterface);
  }
  
  (arg1)->addCharacter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorld_removeCharacter(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorld::removeCharacter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorld::removeCharacter",1,"btDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorld::removeCharacter",2,"btActionInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("btDynamicsWorld_removeCharacter",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btActionInterface,0))){
    SWIG_fail_ptr("btDynamicsWorld_removeCharacter",2,SWIGTYPE_p_btActionInterface);
  }
  
  (arg1)->removeCharacter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btDynamicsWorld(void *obj) {
btDynamicsWorld *arg1 = (btDynamicsWorld *) obj;
delete arg1;
}
static swig_lua_method swig_btDynamicsWorld_methods[] = {
    {"stepSimulation", _wrap_btDynamicsWorld_stepSimulation}, 
    {"debugDrawWorld", _wrap_btDynamicsWorld_debugDrawWorld}, 
    {"addConstraint", _wrap_btDynamicsWorld_addConstraint}, 
    {"removeConstraint", _wrap_btDynamicsWorld_removeConstraint}, 
    {"addAction", _wrap_btDynamicsWorld_addAction}, 
    {"removeAction", _wrap_btDynamicsWorld_removeAction}, 
    {"setGravity", _wrap_btDynamicsWorld_setGravity}, 
    {"getGravity", _wrap_btDynamicsWorld_getGravity}, 
    {"synchronizeMotionStates", _wrap_btDynamicsWorld_synchronizeMotionStates}, 
    {"addRigidBody", _wrap_btDynamicsWorld_addRigidBody}, 
    {"removeRigidBody", _wrap_btDynamicsWorld_removeRigidBody}, 
    {"setConstraintSolver", _wrap_btDynamicsWorld_setConstraintSolver}, 
    {"getConstraintSolver", _wrap_btDynamicsWorld_getConstraintSolver}, 
    {"getNumConstraints", _wrap_btDynamicsWorld_getNumConstraints}, 
    {"getConstraint", _wrap_btDynamicsWorld_getConstraint}, 
    {"getWorldType", _wrap_btDynamicsWorld_getWorldType}, 
    {"clearForces", _wrap_btDynamicsWorld_clearForces}, 
    {"setInternalTickCallback", _wrap_btDynamicsWorld_setInternalTickCallback}, 
    {"setWorldUserInfo", _wrap_btDynamicsWorld_setWorldUserInfo}, 
    {"getWorldUserInfo", _wrap_btDynamicsWorld_getWorldUserInfo}, 
    {"getSolverInfo", _wrap_btDynamicsWorld_getSolverInfo}, 
    {"addVehicle", _wrap_btDynamicsWorld_addVehicle}, 
    {"removeVehicle", _wrap_btDynamicsWorld_removeVehicle}, 
    {"addCharacter", _wrap_btDynamicsWorld_addCharacter}, 
    {"removeCharacter", _wrap_btDynamicsWorld_removeCharacter}, 
    {0,0}
};
static swig_lua_attribute swig_btDynamicsWorld_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btDynamicsWorld_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btDynamicsWorld_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btDynamicsWorld_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btDynamicsWorld_bases[] = {0,0};
static const char *swig_btDynamicsWorld_base_names[] = {"btCollisionWorld *",0};
static swig_lua_class _wrap_class_btDynamicsWorld = { "btDynamicsWorld", &SWIGTYPE_p_btDynamicsWorld,0, swig_delete_btDynamicsWorld, swig_btDynamicsWorld_methods, swig_btDynamicsWorld_attributes, { "btDynamicsWorld", swig_btDynamicsWorld_cls_methods, swig_btDynamicsWorld_cls_attributes, swig_btDynamicsWorld_cls_constants }, swig_btDynamicsWorld_bases, swig_btDynamicsWorld_base_names };

static int _wrap_btDynamicsWorldDoubleData_m_solverInfo_set(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  btContactSolverInfoDoubleData *arg2 = (btContactSolverInfoDoubleData *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorldDoubleData::m_solverInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorldDoubleData::m_solverInfo",1,"btDynamicsWorldDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorldDoubleData::m_solverInfo",2,"btContactSolverInfoDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorldDoubleData,0))){
    SWIG_fail_ptr("btDynamicsWorldDoubleData_m_solverInfo_set",1,SWIGTYPE_p_btDynamicsWorldDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btContactSolverInfoDoubleData,0))){
    SWIG_fail_ptr("btDynamicsWorldDoubleData_m_solverInfo_set",2,SWIGTYPE_p_btContactSolverInfoDoubleData);
  }
  
  if (arg1) (arg1)->m_solverInfo = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorldDoubleData_m_solverInfo_get(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  btContactSolverInfoDoubleData *result = 0 ;
  
  SWIG_check_num_args("btDynamicsWorldDoubleData::m_solverInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorldDoubleData::m_solverInfo",1,"btDynamicsWorldDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorldDoubleData,0))){
    SWIG_fail_ptr("btDynamicsWorldDoubleData_m_solverInfo_get",1,SWIGTYPE_p_btDynamicsWorldDoubleData);
  }
  
  result = (btContactSolverInfoDoubleData *)& ((arg1)->m_solverInfo);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btContactSolverInfoDoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorldDoubleData_m_gravity_set(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorldDoubleData::m_gravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorldDoubleData::m_gravity",1,"btDynamicsWorldDoubleData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorldDoubleData::m_gravity",2,"btVector3DoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorldDoubleData,0))){
    SWIG_fail_ptr("btDynamicsWorldDoubleData_m_gravity_set",1,SWIGTYPE_p_btDynamicsWorldDoubleData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3DoubleData,0))){
    SWIG_fail_ptr("btDynamicsWorldDoubleData_m_gravity_set",2,SWIGTYPE_p_btVector3DoubleData);
  }
  
  if (arg1) (arg1)->m_gravity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorldDoubleData_m_gravity_get(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  SWIG_check_num_args("btDynamicsWorldDoubleData::m_gravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorldDoubleData::m_gravity",1,"btDynamicsWorldDoubleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorldDoubleData,0))){
    SWIG_fail_ptr("btDynamicsWorldDoubleData_m_gravity_get",1,SWIGTYPE_p_btDynamicsWorldDoubleData);
  }
  
  result = (btVector3DoubleData *)& ((arg1)->m_gravity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3DoubleData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btDynamicsWorldDoubleData(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorldDoubleData *result = 0 ;
  
  SWIG_check_num_args("btDynamicsWorldDoubleData::btDynamicsWorldDoubleData",0,0)
  result = (btDynamicsWorldDoubleData *)new btDynamicsWorldDoubleData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDynamicsWorldDoubleData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btDynamicsWorldDoubleData(void *obj) {
btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) obj;
delete arg1;
}
static swig_lua_method swig_btDynamicsWorldDoubleData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btDynamicsWorldDoubleData_attributes[] = {
    { "m_solverInfo", _wrap_btDynamicsWorldDoubleData_m_solverInfo_get, _wrap_btDynamicsWorldDoubleData_m_solverInfo_set},
    { "m_gravity", _wrap_btDynamicsWorldDoubleData_m_gravity_get, _wrap_btDynamicsWorldDoubleData_m_gravity_set},
    {0,0,0}
};
static swig_lua_attribute swig_btDynamicsWorldDoubleData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btDynamicsWorldDoubleData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btDynamicsWorldDoubleData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btDynamicsWorldDoubleData_bases[] = {0};
static const char *swig_btDynamicsWorldDoubleData_base_names[] = {0};
static swig_lua_class _wrap_class_btDynamicsWorldDoubleData = { "btDynamicsWorldDoubleData", &SWIGTYPE_p_btDynamicsWorldDoubleData,_wrap_new_btDynamicsWorldDoubleData, swig_delete_btDynamicsWorldDoubleData, swig_btDynamicsWorldDoubleData_methods, swig_btDynamicsWorldDoubleData_attributes, { "btDynamicsWorldDoubleData", swig_btDynamicsWorldDoubleData_cls_methods, swig_btDynamicsWorldDoubleData_cls_attributes, swig_btDynamicsWorldDoubleData_cls_constants }, swig_btDynamicsWorldDoubleData_bases, swig_btDynamicsWorldDoubleData_base_names };

static int _wrap_btDynamicsWorldFloatData_m_solverInfo_set(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  btContactSolverInfoFloatData *arg2 = (btContactSolverInfoFloatData *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorldFloatData::m_solverInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorldFloatData::m_solverInfo",1,"btDynamicsWorldFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorldFloatData::m_solverInfo",2,"btContactSolverInfoFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorldFloatData,0))){
    SWIG_fail_ptr("btDynamicsWorldFloatData_m_solverInfo_set",1,SWIGTYPE_p_btDynamicsWorldFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btContactSolverInfoFloatData,0))){
    SWIG_fail_ptr("btDynamicsWorldFloatData_m_solverInfo_set",2,SWIGTYPE_p_btContactSolverInfoFloatData);
  }
  
  if (arg1) (arg1)->m_solverInfo = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorldFloatData_m_solverInfo_get(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  btContactSolverInfoFloatData *result = 0 ;
  
  SWIG_check_num_args("btDynamicsWorldFloatData::m_solverInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorldFloatData::m_solverInfo",1,"btDynamicsWorldFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorldFloatData,0))){
    SWIG_fail_ptr("btDynamicsWorldFloatData_m_solverInfo_get",1,SWIGTYPE_p_btDynamicsWorldFloatData);
  }
  
  result = (btContactSolverInfoFloatData *)& ((arg1)->m_solverInfo);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btContactSolverInfoFloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorldFloatData_m_gravity_set(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  SWIG_check_num_args("btDynamicsWorldFloatData::m_gravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorldFloatData::m_gravity",1,"btDynamicsWorldFloatData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDynamicsWorldFloatData::m_gravity",2,"btVector3FloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorldFloatData,0))){
    SWIG_fail_ptr("btDynamicsWorldFloatData_m_gravity_set",1,SWIGTYPE_p_btDynamicsWorldFloatData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3FloatData,0))){
    SWIG_fail_ptr("btDynamicsWorldFloatData_m_gravity_set",2,SWIGTYPE_p_btVector3FloatData);
  }
  
  if (arg1) (arg1)->m_gravity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDynamicsWorldFloatData_m_gravity_get(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  SWIG_check_num_args("btDynamicsWorldFloatData::m_gravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDynamicsWorldFloatData::m_gravity",1,"btDynamicsWorldFloatData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorldFloatData,0))){
    SWIG_fail_ptr("btDynamicsWorldFloatData_m_gravity_get",1,SWIGTYPE_p_btDynamicsWorldFloatData);
  }
  
  result = (btVector3FloatData *)& ((arg1)->m_gravity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3FloatData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btDynamicsWorldFloatData(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorldFloatData *result = 0 ;
  
  SWIG_check_num_args("btDynamicsWorldFloatData::btDynamicsWorldFloatData",0,0)
  result = (btDynamicsWorldFloatData *)new btDynamicsWorldFloatData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDynamicsWorldFloatData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btDynamicsWorldFloatData(void *obj) {
btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) obj;
delete arg1;
}
static swig_lua_method swig_btDynamicsWorldFloatData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btDynamicsWorldFloatData_attributes[] = {
    { "m_solverInfo", _wrap_btDynamicsWorldFloatData_m_solverInfo_get, _wrap_btDynamicsWorldFloatData_m_solverInfo_set},
    { "m_gravity", _wrap_btDynamicsWorldFloatData_m_gravity_get, _wrap_btDynamicsWorldFloatData_m_gravity_set},
    {0,0,0}
};
static swig_lua_attribute swig_btDynamicsWorldFloatData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btDynamicsWorldFloatData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btDynamicsWorldFloatData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btDynamicsWorldFloatData_bases[] = {0};
static const char *swig_btDynamicsWorldFloatData_base_names[] = {0};
static swig_lua_class _wrap_class_btDynamicsWorldFloatData = { "btDynamicsWorldFloatData", &SWIGTYPE_p_btDynamicsWorldFloatData,_wrap_new_btDynamicsWorldFloatData, swig_delete_btDynamicsWorldFloatData, swig_btDynamicsWorldFloatData_methods, swig_btDynamicsWorldFloatData_attributes, { "btDynamicsWorldFloatData", swig_btDynamicsWorldFloatData_cls_methods, swig_btDynamicsWorldFloatData_cls_attributes, swig_btDynamicsWorldFloatData_cls_constants }, swig_btDynamicsWorldFloatData_bases, swig_btDynamicsWorldFloatData_base_names };

static int _wrap_new_btDiscreteDynamicsWorld(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  btConstraintSolver *arg3 = (btConstraintSolver *) 0 ;
  btCollisionConfiguration *arg4 = (btCollisionConfiguration *) 0 ;
  btDiscreteDynamicsWorld *result = 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::btDiscreteDynamicsWorld",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::btDiscreteDynamicsWorld",1,"btDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::btDiscreteDynamicsWorld",2,"btBroadphaseInterface *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btDiscreteDynamicsWorld::btDiscreteDynamicsWorld",3,"btConstraintSolver *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btDiscreteDynamicsWorld::btDiscreteDynamicsWorld",4,"btCollisionConfiguration *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("new_btDiscreteDynamicsWorld",1,SWIGTYPE_p_btDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("new_btDiscreteDynamicsWorld",2,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btConstraintSolver,0))){
    SWIG_fail_ptr("new_btDiscreteDynamicsWorld",3,SWIGTYPE_p_btConstraintSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btCollisionConfiguration,0))){
    SWIG_fail_ptr("new_btDiscreteDynamicsWorld",4,SWIGTYPE_p_btCollisionConfiguration);
  }
  
  result = (btDiscreteDynamicsWorld *)new btDiscreteDynamicsWorld(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDiscreteDynamicsWorld,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_stepSimulation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  btScalar arg4 ;
  int result;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::stepSimulation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::stepSimulation",1,"btDiscreteDynamicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::stepSimulation",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btDiscreteDynamicsWorld::stepSimulation",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btDiscreteDynamicsWorld::stepSimulation",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_stepSimulation",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  result = (int)(arg1)->stepSimulation(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_stepSimulation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::stepSimulation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::stepSimulation",1,"btDiscreteDynamicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::stepSimulation",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btDiscreteDynamicsWorld::stepSimulation",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_stepSimulation",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->stepSimulation(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_stepSimulation__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int result;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::stepSimulation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::stepSimulation",1,"btDiscreteDynamicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::stepSimulation",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_stepSimulation",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (int)(arg1)->stepSimulation(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_stepSimulation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDiscreteDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btDiscreteDynamicsWorld_stepSimulation__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDiscreteDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btDiscreteDynamicsWorld_stepSimulation__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDiscreteDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btDiscreteDynamicsWorld_stepSimulation__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btDiscreteDynamicsWorld_stepSimulation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btDiscreteDynamicsWorld::stepSimulation(btScalar,int,btScalar)\n"
    "    btDiscreteDynamicsWorld::stepSimulation(btScalar,int)\n"
    "    btDiscreteDynamicsWorld::stepSimulation(btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btDiscreteDynamicsWorld_synchronizeMotionStates(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::synchronizeMotionStates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::synchronizeMotionStates",1,"btDiscreteDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_synchronizeMotionStates",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  (arg1)->synchronizeMotionStates();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_synchronizeSingleMotionState(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::synchronizeSingleMotionState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::synchronizeSingleMotionState",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::synchronizeSingleMotionState",2,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_synchronizeSingleMotionState",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_synchronizeSingleMotionState",2,SWIGTYPE_p_btRigidBody);
  }
  
  (arg1)->synchronizeSingleMotionState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_addConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::addConstraint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::addConstraint",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::addConstraint",2,"btTypedConstraint *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("btDiscreteDynamicsWorld::addConstraint",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addConstraint",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addConstraint",2,SWIGTYPE_p_btTypedConstraint);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->addConstraint(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_addConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::addConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::addConstraint",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::addConstraint",2,"btTypedConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addConstraint",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addConstraint",2,SWIGTYPE_p_btTypedConstraint);
  }
  
  (arg1)->addConstraint(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_addConstraint(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDiscreteDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btTypedConstraint, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btDiscreteDynamicsWorld_addConstraint__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDiscreteDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btTypedConstraint, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_btDiscreteDynamicsWorld_addConstraint__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btDiscreteDynamicsWorld_addConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btDiscreteDynamicsWorld::addConstraint(btTypedConstraint *,bool)\n"
    "    btDiscreteDynamicsWorld::addConstraint(btTypedConstraint *)\n");
  lua_error(L);return 0;
}


static int _wrap_btDiscreteDynamicsWorld_removeConstraint(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::removeConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::removeConstraint",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::removeConstraint",2,"btTypedConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_removeConstraint",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_removeConstraint",2,SWIGTYPE_p_btTypedConstraint);
  }
  
  (arg1)->removeConstraint(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_hasAction(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  bool result;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::hasAction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::hasAction",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::hasAction",2,"btActionInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_hasAction",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btActionInterface,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_hasAction",2,SWIGTYPE_p_btActionInterface);
  }
  
  result = (bool)(arg1)->hasAction(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_addAction(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::addAction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::addAction",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::addAction",2,"btActionInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addAction",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btActionInterface,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addAction",2,SWIGTYPE_p_btActionInterface);
  }
  
  (arg1)->addAction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_removeAction(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::removeAction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::removeAction",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::removeAction",2,"btActionInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_removeAction",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btActionInterface,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_removeAction",2,SWIGTYPE_p_btActionInterface);
  }
  
  (arg1)->removeAction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btSimulationIslandManager *result = 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::getSimulationIslandManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::getSimulationIslandManager",1,"btDiscreteDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_getSimulationIslandManager",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  result = (btSimulationIslandManager *)(arg1)->getSimulationIslandManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSimulationIslandManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btSimulationIslandManager *result = 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::getSimulationIslandManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::getSimulationIslandManager",1,"btDiscreteDynamicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_getSimulationIslandManager",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  result = (btSimulationIslandManager *)((btDiscreteDynamicsWorld const *)arg1)->getSimulationIslandManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSimulationIslandManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_getSimulationIslandManager(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDiscreteDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDiscreteDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btDiscreteDynamicsWorld_getSimulationIslandManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btDiscreteDynamicsWorld::getSimulationIslandManager()\n"
    "    btDiscreteDynamicsWorld::getSimulationIslandManager() const\n");
  lua_error(L);return 0;
}


static int _wrap_btDiscreteDynamicsWorld_getCollisionWorld(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionWorld *result = 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::getCollisionWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::getCollisionWorld",1,"btDiscreteDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_getCollisionWorld",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  result = (btCollisionWorld *)(arg1)->getCollisionWorld();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionWorld,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_setGravity(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::setGravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::setGravity",1,"btDiscreteDynamicsWorld *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::setGravity",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_setGravity",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_setGravity",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setGravity((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_getGravity(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::getGravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::getGravity",1,"btDiscreteDynamicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_getGravity",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  result = ((btDiscreteDynamicsWorld const *)arg1)->getGravity();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  short arg4 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::addCollisionObject",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::addCollisionObject",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::addCollisionObject",2,"btCollisionObject *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btDiscreteDynamicsWorld::addCollisionObject",3,"short");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btDiscreteDynamicsWorld::addCollisionObject",4,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addCollisionObject",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addCollisionObject",2,SWIGTYPE_p_btCollisionObject);
  }
  
  arg3 = (short)lua_tonumber(L, 3);
  arg4 = (short)lua_tonumber(L, 4);
  (arg1)->addCollisionObject(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::addCollisionObject",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::addCollisionObject",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::addCollisionObject",2,"btCollisionObject *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btDiscreteDynamicsWorld::addCollisionObject",3,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addCollisionObject",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addCollisionObject",2,SWIGTYPE_p_btCollisionObject);
  }
  
  arg3 = (short)lua_tonumber(L, 3);
  (arg1)->addCollisionObject(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::addCollisionObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::addCollisionObject",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::addCollisionObject",2,"btCollisionObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addCollisionObject",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addCollisionObject",2,SWIGTYPE_p_btCollisionObject);
  }
  
  (arg1)->addCollisionObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_addCollisionObject(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDiscreteDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDiscreteDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDiscreteDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btDiscreteDynamicsWorld_addCollisionObject'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btDiscreteDynamicsWorld::addCollisionObject(btCollisionObject *,short,short)\n"
    "    btDiscreteDynamicsWorld::addCollisionObject(btCollisionObject *,short)\n"
    "    btDiscreteDynamicsWorld::addCollisionObject(btCollisionObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_btDiscreteDynamicsWorld_addRigidBody__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::addRigidBody",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::addRigidBody",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::addRigidBody",2,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addRigidBody",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addRigidBody",2,SWIGTYPE_p_btRigidBody);
  }
  
  (arg1)->addRigidBody(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_addRigidBody__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  short arg3 ;
  short arg4 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::addRigidBody",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::addRigidBody",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::addRigidBody",2,"btRigidBody *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btDiscreteDynamicsWorld::addRigidBody",3,"short");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btDiscreteDynamicsWorld::addRigidBody",4,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addRigidBody",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addRigidBody",2,SWIGTYPE_p_btRigidBody);
  }
  
  arg3 = (short)lua_tonumber(L, 3);
  arg4 = (short)lua_tonumber(L, 4);
  (arg1)->addRigidBody(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_addRigidBody(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDiscreteDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btDiscreteDynamicsWorld_addRigidBody__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDiscreteDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btDiscreteDynamicsWorld_addRigidBody__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btDiscreteDynamicsWorld_addRigidBody'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btDiscreteDynamicsWorld::addRigidBody(btRigidBody *)\n"
    "    btDiscreteDynamicsWorld::addRigidBody(btRigidBody *,short,short)\n");
  lua_error(L);return 0;
}


static int _wrap_btDiscreteDynamicsWorld_removeRigidBody(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::removeRigidBody",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::removeRigidBody",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::removeRigidBody",2,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_removeRigidBody",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_removeRigidBody",2,SWIGTYPE_p_btRigidBody);
  }
  
  (arg1)->removeRigidBody(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_removeCollisionObject(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::removeCollisionObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::removeCollisionObject",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::removeCollisionObject",2,"btCollisionObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_removeCollisionObject",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_removeCollisionObject",2,SWIGTYPE_p_btCollisionObject);
  }
  
  (arg1)->removeCollisionObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_debugDrawConstraint(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::debugDrawConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::debugDrawConstraint",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::debugDrawConstraint",2,"btTypedConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_debugDrawConstraint",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTypedConstraint,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_debugDrawConstraint",2,SWIGTYPE_p_btTypedConstraint);
  }
  
  (arg1)->debugDrawConstraint(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_debugDrawWorld(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::debugDrawWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::debugDrawWorld",1,"btDiscreteDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_debugDrawWorld",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  (arg1)->debugDrawWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_setConstraintSolver(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btConstraintSolver *arg2 = (btConstraintSolver *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::setConstraintSolver",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::setConstraintSolver",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::setConstraintSolver",2,"btConstraintSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_setConstraintSolver",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConstraintSolver,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_setConstraintSolver",2,SWIGTYPE_p_btConstraintSolver);
  }
  
  (arg1)->setConstraintSolver(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_getConstraintSolver(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btConstraintSolver *result = 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::getConstraintSolver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::getConstraintSolver",1,"btDiscreteDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_getConstraintSolver",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  result = (btConstraintSolver *)(arg1)->getConstraintSolver();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConstraintSolver,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_getNumConstraints(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  int result;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::getNumConstraints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::getNumConstraints",1,"btDiscreteDynamicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_getNumConstraints",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  result = (int)((btDiscreteDynamicsWorld const *)arg1)->getNumConstraints();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_getConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::getConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::getConstraint",1,"btDiscreteDynamicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::getConstraint",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_getConstraint",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btTypedConstraint *)(arg1)->getConstraint(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_getConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::getConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::getConstraint",1,"btDiscreteDynamicsWorld const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::getConstraint",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_getConstraint",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btTypedConstraint *)((btDiscreteDynamicsWorld const *)arg1)->getConstraint(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_getConstraint(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDiscreteDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btDiscreteDynamicsWorld_getConstraint__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDiscreteDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btDiscreteDynamicsWorld_getConstraint__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btDiscreteDynamicsWorld_getConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btDiscreteDynamicsWorld::getConstraint(int)\n"
    "    btDiscreteDynamicsWorld::getConstraint(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_btDiscreteDynamicsWorld_getWorldType(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btDynamicsWorldType result;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::getWorldType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::getWorldType",1,"btDiscreteDynamicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_getWorldType",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  result = (btDynamicsWorldType)((btDiscreteDynamicsWorld const *)arg1)->getWorldType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_clearForces(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::clearForces",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::clearForces",1,"btDiscreteDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_clearForces",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  (arg1)->clearForces();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_applyGravity(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::applyGravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::applyGravity",1,"btDiscreteDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_applyGravity",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  (arg1)->applyGravity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_setNumTasks(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::setNumTasks",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::setNumTasks",1,"btDiscreteDynamicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::setNumTasks",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_setNumTasks",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setNumTasks(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_updateVehicles(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::updateVehicles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::updateVehicles",1,"btDiscreteDynamicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::updateVehicles",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_updateVehicles",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->updateVehicles(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_addVehicle(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::addVehicle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::addVehicle",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::addVehicle",2,"btActionInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addVehicle",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btActionInterface,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addVehicle",2,SWIGTYPE_p_btActionInterface);
  }
  
  (arg1)->addVehicle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_removeVehicle(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::removeVehicle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::removeVehicle",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::removeVehicle",2,"btActionInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_removeVehicle",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btActionInterface,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_removeVehicle",2,SWIGTYPE_p_btActionInterface);
  }
  
  (arg1)->removeVehicle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_addCharacter(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::addCharacter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::addCharacter",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::addCharacter",2,"btActionInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addCharacter",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btActionInterface,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_addCharacter",2,SWIGTYPE_p_btActionInterface);
  }
  
  (arg1)->addCharacter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_removeCharacter(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::removeCharacter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::removeCharacter",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::removeCharacter",2,"btActionInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_removeCharacter",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btActionInterface,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_removeCharacter",2,SWIGTYPE_p_btActionInterface);
  }
  
  (arg1)->removeCharacter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_setSynchronizeAllMotionStates(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::setSynchronizeAllMotionStates",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::setSynchronizeAllMotionStates",1,"btDiscreteDynamicsWorld *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::setSynchronizeAllMotionStates",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_setSynchronizeAllMotionStates",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setSynchronizeAllMotionStates(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_getSynchronizeAllMotionStates(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool result;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::getSynchronizeAllMotionStates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::getSynchronizeAllMotionStates",1,"btDiscreteDynamicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_getSynchronizeAllMotionStates",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  result = (bool)((btDiscreteDynamicsWorld const *)arg1)->getSynchronizeAllMotionStates();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::setApplySpeculativeContactRestitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::setApplySpeculativeContactRestitution",1,"btDiscreteDynamicsWorld *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::setApplySpeculativeContactRestitution",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setApplySpeculativeContactRestitution(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool result;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::getApplySpeculativeContactRestitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::getApplySpeculativeContactRestitution",1,"btDiscreteDynamicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  result = (bool)((btDiscreteDynamicsWorld const *)arg1)->getApplySpeculativeContactRestitution();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btDiscreteDynamicsWorld_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("btDiscreteDynamicsWorld::serialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDiscreteDynamicsWorld::serialize",1,"btDiscreteDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btDiscreteDynamicsWorld::serialize",2,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDiscreteDynamicsWorld,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_serialize",1,SWIGTYPE_p_btDiscreteDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btDiscreteDynamicsWorld_serialize",2,SWIGTYPE_p_btSerializer);
  }
  
  (arg1)->serialize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btDiscreteDynamicsWorld(void *obj) {
btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) obj;
delete arg1;
}
static swig_lua_method swig_btDiscreteDynamicsWorld_methods[] = {
    {"stepSimulation", _wrap_btDiscreteDynamicsWorld_stepSimulation}, 
    {"synchronizeMotionStates", _wrap_btDiscreteDynamicsWorld_synchronizeMotionStates}, 
    {"synchronizeSingleMotionState", _wrap_btDiscreteDynamicsWorld_synchronizeSingleMotionState}, 
    {"addConstraint", _wrap_btDiscreteDynamicsWorld_addConstraint}, 
    {"removeConstraint", _wrap_btDiscreteDynamicsWorld_removeConstraint}, 
    {"hasAction", _wrap_btDiscreteDynamicsWorld_hasAction}, 
    {"addAction", _wrap_btDiscreteDynamicsWorld_addAction}, 
    {"removeAction", _wrap_btDiscreteDynamicsWorld_removeAction}, 
    {"getSimulationIslandManager", _wrap_btDiscreteDynamicsWorld_getSimulationIslandManager}, 
    {"getCollisionWorld", _wrap_btDiscreteDynamicsWorld_getCollisionWorld}, 
    {"setGravity", _wrap_btDiscreteDynamicsWorld_setGravity}, 
    {"getGravity", _wrap_btDiscreteDynamicsWorld_getGravity}, 
    {"addCollisionObject", _wrap_btDiscreteDynamicsWorld_addCollisionObject}, 
    {"addRigidBody", _wrap_btDiscreteDynamicsWorld_addRigidBody}, 
    {"removeRigidBody", _wrap_btDiscreteDynamicsWorld_removeRigidBody}, 
    {"removeCollisionObject", _wrap_btDiscreteDynamicsWorld_removeCollisionObject}, 
    {"debugDrawConstraint", _wrap_btDiscreteDynamicsWorld_debugDrawConstraint}, 
    {"debugDrawWorld", _wrap_btDiscreteDynamicsWorld_debugDrawWorld}, 
    {"setConstraintSolver", _wrap_btDiscreteDynamicsWorld_setConstraintSolver}, 
    {"getConstraintSolver", _wrap_btDiscreteDynamicsWorld_getConstraintSolver}, 
    {"getNumConstraints", _wrap_btDiscreteDynamicsWorld_getNumConstraints}, 
    {"getConstraint", _wrap_btDiscreteDynamicsWorld_getConstraint}, 
    {"getWorldType", _wrap_btDiscreteDynamicsWorld_getWorldType}, 
    {"clearForces", _wrap_btDiscreteDynamicsWorld_clearForces}, 
    {"applyGravity", _wrap_btDiscreteDynamicsWorld_applyGravity}, 
    {"setNumTasks", _wrap_btDiscreteDynamicsWorld_setNumTasks}, 
    {"updateVehicles", _wrap_btDiscreteDynamicsWorld_updateVehicles}, 
    {"addVehicle", _wrap_btDiscreteDynamicsWorld_addVehicle}, 
    {"removeVehicle", _wrap_btDiscreteDynamicsWorld_removeVehicle}, 
    {"addCharacter", _wrap_btDiscreteDynamicsWorld_addCharacter}, 
    {"removeCharacter", _wrap_btDiscreteDynamicsWorld_removeCharacter}, 
    {"setSynchronizeAllMotionStates", _wrap_btDiscreteDynamicsWorld_setSynchronizeAllMotionStates}, 
    {"getSynchronizeAllMotionStates", _wrap_btDiscreteDynamicsWorld_getSynchronizeAllMotionStates}, 
    {"setApplySpeculativeContactRestitution", _wrap_btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution}, 
    {"getApplySpeculativeContactRestitution", _wrap_btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution}, 
    {"serialize", _wrap_btDiscreteDynamicsWorld_serialize}, 
    {0,0}
};
static swig_lua_attribute swig_btDiscreteDynamicsWorld_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btDiscreteDynamicsWorld_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btDiscreteDynamicsWorld_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btDiscreteDynamicsWorld_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btDiscreteDynamicsWorld_bases[] = {0,0};
static const char *swig_btDiscreteDynamicsWorld_base_names[] = {"btDynamicsWorld *",0};
static swig_lua_class _wrap_class_btDiscreteDynamicsWorld = { "btDiscreteDynamicsWorld", &SWIGTYPE_p_btDiscreteDynamicsWorld,_wrap_new_btDiscreteDynamicsWorld, swig_delete_btDiscreteDynamicsWorld, swig_btDiscreteDynamicsWorld_methods, swig_btDiscreteDynamicsWorld_attributes, { "btDiscreteDynamicsWorld", swig_btDiscreteDynamicsWorld_cls_methods, swig_btDiscreteDynamicsWorld_cls_attributes, swig_btDiscreteDynamicsWorld_cls_constants }, swig_btDiscreteDynamicsWorld_bases, swig_btDiscreteDynamicsWorld_base_names };

static int _wrap_new_btSimpleDynamicsWorld(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  btConstraintSolver *arg3 = (btConstraintSolver *) 0 ;
  btCollisionConfiguration *arg4 = (btCollisionConfiguration *) 0 ;
  btSimpleDynamicsWorld *result = 0 ;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::btSimpleDynamicsWorld",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::btSimpleDynamicsWorld",1,"btDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimpleDynamicsWorld::btSimpleDynamicsWorld",2,"btBroadphaseInterface *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSimpleDynamicsWorld::btSimpleDynamicsWorld",3,"btConstraintSolver *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btSimpleDynamicsWorld::btSimpleDynamicsWorld",4,"btCollisionConfiguration *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("new_btSimpleDynamicsWorld",1,SWIGTYPE_p_btDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("new_btSimpleDynamicsWorld",2,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btConstraintSolver,0))){
    SWIG_fail_ptr("new_btSimpleDynamicsWorld",3,SWIGTYPE_p_btConstraintSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btCollisionConfiguration,0))){
    SWIG_fail_ptr("new_btSimpleDynamicsWorld",4,SWIGTYPE_p_btCollisionConfiguration);
  }
  
  result = (btSimpleDynamicsWorld *)new btSimpleDynamicsWorld(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSimpleDynamicsWorld,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  btScalar arg4 ;
  int result;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::stepSimulation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::stepSimulation",1,"btSimpleDynamicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSimpleDynamicsWorld::stepSimulation",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSimpleDynamicsWorld::stepSimulation",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSimpleDynamicsWorld::stepSimulation",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_stepSimulation",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  result = (int)(arg1)->stepSimulation(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::stepSimulation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::stepSimulation",1,"btSimpleDynamicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSimpleDynamicsWorld::stepSimulation",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSimpleDynamicsWorld::stepSimulation",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_stepSimulation",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->stepSimulation(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int result;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::stepSimulation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::stepSimulation",1,"btSimpleDynamicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSimpleDynamicsWorld::stepSimulation",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_stepSimulation",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (int)(arg1)->stepSimulation(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_stepSimulation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSimpleDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSimpleDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSimpleDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSimpleDynamicsWorld_stepSimulation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSimpleDynamicsWorld::stepSimulation(btScalar,int,btScalar)\n"
    "    btSimpleDynamicsWorld::stepSimulation(btScalar,int)\n"
    "    btSimpleDynamicsWorld::stepSimulation(btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btSimpleDynamicsWorld_setGravity(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::setGravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::setGravity",1,"btSimpleDynamicsWorld *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSimpleDynamicsWorld::setGravity",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_setGravity",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_setGravity",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setGravity((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_getGravity(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::getGravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::getGravity",1,"btSimpleDynamicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_getGravity",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  result = ((btSimpleDynamicsWorld const *)arg1)->getGravity();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_addRigidBody__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::addRigidBody",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::addRigidBody",1,"btSimpleDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimpleDynamicsWorld::addRigidBody",2,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_addRigidBody",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_addRigidBody",2,SWIGTYPE_p_btRigidBody);
  }
  
  (arg1)->addRigidBody(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_addRigidBody__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  short arg3 ;
  short arg4 ;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::addRigidBody",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::addRigidBody",1,"btSimpleDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimpleDynamicsWorld::addRigidBody",2,"btRigidBody *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSimpleDynamicsWorld::addRigidBody",3,"short");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSimpleDynamicsWorld::addRigidBody",4,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_addRigidBody",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_addRigidBody",2,SWIGTYPE_p_btRigidBody);
  }
  
  arg3 = (short)lua_tonumber(L, 3);
  arg4 = (short)lua_tonumber(L, 4);
  (arg1)->addRigidBody(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_addRigidBody(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSimpleDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btSimpleDynamicsWorld_addRigidBody__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSimpleDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btSimpleDynamicsWorld_addRigidBody__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSimpleDynamicsWorld_addRigidBody'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSimpleDynamicsWorld::addRigidBody(btRigidBody *)\n"
    "    btSimpleDynamicsWorld::addRigidBody(btRigidBody *,short,short)\n");
  lua_error(L);return 0;
}


static int _wrap_btSimpleDynamicsWorld_removeRigidBody(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::removeRigidBody",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::removeRigidBody",1,"btSimpleDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimpleDynamicsWorld::removeRigidBody",2,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_removeRigidBody",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_removeRigidBody",2,SWIGTYPE_p_btRigidBody);
  }
  
  (arg1)->removeRigidBody(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_debugDrawWorld(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::debugDrawWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::debugDrawWorld",1,"btSimpleDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_debugDrawWorld",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  (arg1)->debugDrawWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_addAction(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::addAction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::addAction",1,"btSimpleDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimpleDynamicsWorld::addAction",2,"btActionInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_addAction",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btActionInterface,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_addAction",2,SWIGTYPE_p_btActionInterface);
  }
  
  (arg1)->addAction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_removeAction(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::removeAction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::removeAction",1,"btSimpleDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimpleDynamicsWorld::removeAction",2,"btActionInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_removeAction",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btActionInterface,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_removeAction",2,SWIGTYPE_p_btActionInterface);
  }
  
  (arg1)->removeAction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_removeCollisionObject(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::removeCollisionObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::removeCollisionObject",1,"btSimpleDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimpleDynamicsWorld::removeCollisionObject",2,"btCollisionObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_removeCollisionObject",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_removeCollisionObject",2,SWIGTYPE_p_btCollisionObject);
  }
  
  (arg1)->removeCollisionObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_updateAabbs(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::updateAabbs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::updateAabbs",1,"btSimpleDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_updateAabbs",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  (arg1)->updateAabbs();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_synchronizeMotionStates(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::synchronizeMotionStates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::synchronizeMotionStates",1,"btSimpleDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_synchronizeMotionStates",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  (arg1)->synchronizeMotionStates();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_setConstraintSolver(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btConstraintSolver *arg2 = (btConstraintSolver *) 0 ;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::setConstraintSolver",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::setConstraintSolver",1,"btSimpleDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSimpleDynamicsWorld::setConstraintSolver",2,"btConstraintSolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_setConstraintSolver",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConstraintSolver,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_setConstraintSolver",2,SWIGTYPE_p_btConstraintSolver);
  }
  
  (arg1)->setConstraintSolver(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_getConstraintSolver(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btConstraintSolver *result = 0 ;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::getConstraintSolver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::getConstraintSolver",1,"btSimpleDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_getConstraintSolver",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  result = (btConstraintSolver *)(arg1)->getConstraintSolver();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConstraintSolver,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_getWorldType(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btDynamicsWorldType result;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::getWorldType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::getWorldType",1,"btSimpleDynamicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_getWorldType",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  result = (btDynamicsWorldType)((btSimpleDynamicsWorld const *)arg1)->getWorldType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSimpleDynamicsWorld_clearForces(lua_State* L) {
  int SWIG_arg = 0;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  SWIG_check_num_args("btSimpleDynamicsWorld::clearForces",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSimpleDynamicsWorld::clearForces",1,"btSimpleDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSimpleDynamicsWorld,0))){
    SWIG_fail_ptr("btSimpleDynamicsWorld_clearForces",1,SWIGTYPE_p_btSimpleDynamicsWorld);
  }
  
  (arg1)->clearForces();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSimpleDynamicsWorld(void *obj) {
btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) obj;
delete arg1;
}
static swig_lua_method swig_btSimpleDynamicsWorld_methods[] = {
    {"stepSimulation", _wrap_btSimpleDynamicsWorld_stepSimulation}, 
    {"setGravity", _wrap_btSimpleDynamicsWorld_setGravity}, 
    {"getGravity", _wrap_btSimpleDynamicsWorld_getGravity}, 
    {"addRigidBody", _wrap_btSimpleDynamicsWorld_addRigidBody}, 
    {"removeRigidBody", _wrap_btSimpleDynamicsWorld_removeRigidBody}, 
    {"debugDrawWorld", _wrap_btSimpleDynamicsWorld_debugDrawWorld}, 
    {"addAction", _wrap_btSimpleDynamicsWorld_addAction}, 
    {"removeAction", _wrap_btSimpleDynamicsWorld_removeAction}, 
    {"removeCollisionObject", _wrap_btSimpleDynamicsWorld_removeCollisionObject}, 
    {"updateAabbs", _wrap_btSimpleDynamicsWorld_updateAabbs}, 
    {"synchronizeMotionStates", _wrap_btSimpleDynamicsWorld_synchronizeMotionStates}, 
    {"setConstraintSolver", _wrap_btSimpleDynamicsWorld_setConstraintSolver}, 
    {"getConstraintSolver", _wrap_btSimpleDynamicsWorld_getConstraintSolver}, 
    {"getWorldType", _wrap_btSimpleDynamicsWorld_getWorldType}, 
    {"clearForces", _wrap_btSimpleDynamicsWorld_clearForces}, 
    {0,0}
};
static swig_lua_attribute swig_btSimpleDynamicsWorld_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btSimpleDynamicsWorld_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSimpleDynamicsWorld_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btSimpleDynamicsWorld_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSimpleDynamicsWorld_bases[] = {0,0};
static const char *swig_btSimpleDynamicsWorld_base_names[] = {"btDynamicsWorld *",0};
static swig_lua_class _wrap_class_btSimpleDynamicsWorld = { "btSimpleDynamicsWorld", &SWIGTYPE_p_btSimpleDynamicsWorld,_wrap_new_btSimpleDynamicsWorld, swig_delete_btSimpleDynamicsWorld, swig_btSimpleDynamicsWorld_methods, swig_btSimpleDynamicsWorld_attributes, { "btSimpleDynamicsWorld", swig_btSimpleDynamicsWorld_cls_methods, swig_btSimpleDynamicsWorld_cls_attributes, swig_btSimpleDynamicsWorld_cls_constants }, swig_btSimpleDynamicsWorld_bases, swig_btSimpleDynamicsWorld_base_names };

static int _wrap_btRaycastVehicle_getChassisWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btRaycastVehicle::getChassisWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::getChassisWorldTransform",1,"btRaycastVehicle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_getChassisWorldTransform",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  result = (btTransform *) &((btRaycastVehicle const *)arg1)->getChassisWorldTransform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_rayCast(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btWheelInfo *arg2 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRaycastVehicle::rayCast",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::rayCast",1,"btRaycastVehicle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRaycastVehicle::rayCast",2,"btWheelInfo &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_rayCast",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btRaycastVehicle_rayCast",2,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar)(arg1)->rayCast(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_updateVehicle(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRaycastVehicle::updateVehicle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::updateVehicle",1,"btRaycastVehicle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRaycastVehicle::updateVehicle",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_updateVehicle",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->updateVehicle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_resetSuspension(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  
  SWIG_check_num_args("btRaycastVehicle::resetSuspension",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::resetSuspension",1,"btRaycastVehicle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_resetSuspension",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  (arg1)->resetSuspension();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_getSteeringValue(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  btScalar result;
  
  SWIG_check_num_args("btRaycastVehicle::getSteeringValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::getSteeringValue",1,"btRaycastVehicle const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRaycastVehicle::getSteeringValue",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_getSteeringValue",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btScalar)((btRaycastVehicle const *)arg1)->getSteeringValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_setSteeringValue(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("btRaycastVehicle::setSteeringValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::setSteeringValue",1,"btRaycastVehicle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRaycastVehicle::setSteeringValue",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btRaycastVehicle::setSteeringValue",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_setSteeringValue",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setSteeringValue(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_applyEngineForce(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("btRaycastVehicle::applyEngineForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::applyEngineForce",1,"btRaycastVehicle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRaycastVehicle::applyEngineForce",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btRaycastVehicle::applyEngineForce",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_applyEngineForce",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->applyEngineForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_getWheelTransformWS(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btRaycastVehicle::getWheelTransformWS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::getWheelTransformWS",1,"btRaycastVehicle const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRaycastVehicle::getWheelTransformWS",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_getWheelTransformWS",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btTransform *) &((btRaycastVehicle const *)arg1)->getWheelTransformWS(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_updateWheelTransform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("btRaycastVehicle::updateWheelTransform",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::updateWheelTransform",1,"btRaycastVehicle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRaycastVehicle::updateWheelTransform",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("btRaycastVehicle::updateWheelTransform",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_updateWheelTransform",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->updateWheelTransform(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_updateWheelTransform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btRaycastVehicle::updateWheelTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::updateWheelTransform",1,"btRaycastVehicle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRaycastVehicle::updateWheelTransform",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_updateWheelTransform",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->updateWheelTransform(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_updateWheelTransform(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRaycastVehicle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btRaycastVehicle_updateWheelTransform__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRaycastVehicle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_btRaycastVehicle_updateWheelTransform__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btRaycastVehicle_updateWheelTransform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btRaycastVehicle::updateWheelTransform(int,bool)\n"
    "    btRaycastVehicle::updateWheelTransform(int)\n");
  lua_error(L);return 0;
}


static int _wrap_btRaycastVehicle_addWheel(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btRaycastVehicle::btVehicleTuning *arg7 = 0 ;
  bool arg8 ;
  btWheelInfo *result = 0 ;
  
  SWIG_check_num_args("btRaycastVehicle::addWheel",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::addWheel",1,"btRaycastVehicle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRaycastVehicle::addWheel",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btRaycastVehicle::addWheel",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btRaycastVehicle::addWheel",4,"btVector3 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btRaycastVehicle::addWheel",5,"btScalar");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btRaycastVehicle::addWheel",6,"btScalar");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("btRaycastVehicle::addWheel",7,"btRaycastVehicle::btVehicleTuning const &");
  if(!lua_isboolean(L,8)) SWIG_fail_arg("btRaycastVehicle::addWheel",8,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_addWheel",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRaycastVehicle_addWheel",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRaycastVehicle_addWheel",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRaycastVehicle_addWheel",4,SWIGTYPE_p_btVector3);
  }
  
  arg5 = (btScalar)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_btRaycastVehicle__btVehicleTuning,0))){
    SWIG_fail_ptr("btRaycastVehicle_addWheel",7,SWIGTYPE_p_btRaycastVehicle__btVehicleTuning);
  }
  
  arg8 = (lua_toboolean(L, 8)!=0);
  result = (btWheelInfo *) &(arg1)->addWheel((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,(btRaycastVehicle::btVehicleTuning const &)*arg7,arg8);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btWheelInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_getNumWheels(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int result;
  
  SWIG_check_num_args("btRaycastVehicle::getNumWheels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::getNumWheels",1,"btRaycastVehicle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_getNumWheels",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  result = (int)((btRaycastVehicle const *)arg1)->getNumWheels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_m_wheelInfo_set(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btAlignedObjectArray< btWheelInfo > *arg2 = (btAlignedObjectArray< btWheelInfo > *) 0 ;
  
  SWIG_check_num_args("btRaycastVehicle::m_wheelInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::m_wheelInfo",1,"btRaycastVehicle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRaycastVehicle::m_wheelInfo",2,"btAlignedObjectArray< btWheelInfo > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_m_wheelInfo_set",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t,0))){
    SWIG_fail_ptr("btRaycastVehicle_m_wheelInfo_set",2,SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t);
  }
  
  if (arg1) (arg1)->m_wheelInfo = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_m_wheelInfo_get(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btAlignedObjectArray< btWheelInfo > *result = 0 ;
  
  SWIG_check_num_args("btRaycastVehicle::m_wheelInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::m_wheelInfo",1,"btRaycastVehicle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_m_wheelInfo_get",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  result = (btAlignedObjectArray< btWheelInfo > *)& ((arg1)->m_wheelInfo);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_getWheelInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  btWheelInfo *result = 0 ;
  
  SWIG_check_num_args("btRaycastVehicle::getWheelInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::getWheelInfo",1,"btRaycastVehicle const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRaycastVehicle::getWheelInfo",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_getWheelInfo",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btWheelInfo *) &((btRaycastVehicle const *)arg1)->getWheelInfo(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btWheelInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_getWheelInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  btWheelInfo *result = 0 ;
  
  SWIG_check_num_args("btRaycastVehicle::getWheelInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::getWheelInfo",1,"btRaycastVehicle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRaycastVehicle::getWheelInfo",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_getWheelInfo",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btWheelInfo *) &(arg1)->getWheelInfo(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btWheelInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_getWheelInfo(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRaycastVehicle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btRaycastVehicle_getWheelInfo__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRaycastVehicle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btRaycastVehicle_getWheelInfo__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btRaycastVehicle_getWheelInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btRaycastVehicle::getWheelInfo(int) const\n"
    "    btRaycastVehicle::getWheelInfo(int)\n");
  lua_error(L);return 0;
}


static int _wrap_btRaycastVehicle_updateWheelTransformsWS__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btWheelInfo *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("btRaycastVehicle::updateWheelTransformsWS",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::updateWheelTransformsWS",1,"btRaycastVehicle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRaycastVehicle::updateWheelTransformsWS",2,"btWheelInfo &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("btRaycastVehicle::updateWheelTransformsWS",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_updateWheelTransformsWS",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btRaycastVehicle_updateWheelTransformsWS",2,SWIGTYPE_p_btWheelInfo);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->updateWheelTransformsWS(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_updateWheelTransformsWS__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btWheelInfo *arg2 = 0 ;
  
  SWIG_check_num_args("btRaycastVehicle::updateWheelTransformsWS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::updateWheelTransformsWS",1,"btRaycastVehicle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btRaycastVehicle::updateWheelTransformsWS",2,"btWheelInfo &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_updateWheelTransformsWS",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btRaycastVehicle_updateWheelTransformsWS",2,SWIGTYPE_p_btWheelInfo);
  }
  
  (arg1)->updateWheelTransformsWS(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_updateWheelTransformsWS(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRaycastVehicle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btWheelInfo, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btRaycastVehicle_updateWheelTransformsWS__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRaycastVehicle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btWheelInfo, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_btRaycastVehicle_updateWheelTransformsWS__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btRaycastVehicle_updateWheelTransformsWS'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btRaycastVehicle::updateWheelTransformsWS(btWheelInfo &,bool)\n"
    "    btRaycastVehicle::updateWheelTransformsWS(btWheelInfo &)\n");
  lua_error(L);return 0;
}


static int _wrap_btRaycastVehicle_setBrake(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("btRaycastVehicle::setBrake",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::setBrake",1,"btRaycastVehicle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRaycastVehicle::setBrake",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btRaycastVehicle::setBrake",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_setBrake",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setBrake(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_setPitchControl(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRaycastVehicle::setPitchControl",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::setPitchControl",1,"btRaycastVehicle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRaycastVehicle::setPitchControl",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_setPitchControl",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setPitchControl(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_updateSuspension(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRaycastVehicle::updateSuspension",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::updateSuspension",1,"btRaycastVehicle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRaycastVehicle::updateSuspension",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_updateSuspension",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->updateSuspension(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_updateFriction(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRaycastVehicle::updateFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::updateFriction",1,"btRaycastVehicle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRaycastVehicle::updateFriction",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_updateFriction",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->updateFriction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_getRigidBody__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btRaycastVehicle::getRigidBody",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::getRigidBody",1,"btRaycastVehicle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_getRigidBody",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  result = (btRigidBody *)(arg1)->getRigidBody();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_getRigidBody__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btRaycastVehicle::getRigidBody",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::getRigidBody",1,"btRaycastVehicle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_getRigidBody",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  result = (btRigidBody *)((btRaycastVehicle const *)arg1)->getRigidBody();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_getRigidBody(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRaycastVehicle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btRaycastVehicle_getRigidBody__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btRaycastVehicle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btRaycastVehicle_getRigidBody__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btRaycastVehicle_getRigidBody'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btRaycastVehicle::getRigidBody()\n"
    "    btRaycastVehicle::getRigidBody() const\n");
  lua_error(L);return 0;
}


static int _wrap_btRaycastVehicle_getRightAxis(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int result;
  
  SWIG_check_num_args("btRaycastVehicle::getRightAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::getRightAxis",1,"btRaycastVehicle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_getRightAxis",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  result = (int)((btRaycastVehicle const *)arg1)->getRightAxis();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_getUpAxis(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int result;
  
  SWIG_check_num_args("btRaycastVehicle::getUpAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::getUpAxis",1,"btRaycastVehicle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_getUpAxis",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  result = (int)((btRaycastVehicle const *)arg1)->getUpAxis();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_getForwardAxis(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int result;
  
  SWIG_check_num_args("btRaycastVehicle::getForwardAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::getForwardAxis",1,"btRaycastVehicle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_getForwardAxis",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  result = (int)((btRaycastVehicle const *)arg1)->getForwardAxis();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_getForwardVector(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btRaycastVehicle::getForwardVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::getForwardVector",1,"btRaycastVehicle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_getForwardVector",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  result = ((btRaycastVehicle const *)arg1)->getForwardVector();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_getCurrentSpeedKmHour(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btRaycastVehicle::getCurrentSpeedKmHour",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::getCurrentSpeedKmHour",1,"btRaycastVehicle const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_getCurrentSpeedKmHour",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  result = (btScalar)((btRaycastVehicle const *)arg1)->getCurrentSpeedKmHour();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_setCoordinateSystem(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("btRaycastVehicle::setCoordinateSystem",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::setCoordinateSystem",1,"btRaycastVehicle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRaycastVehicle::setCoordinateSystem",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btRaycastVehicle::setCoordinateSystem",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btRaycastVehicle::setCoordinateSystem",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_setCoordinateSystem",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setCoordinateSystem(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_buildJacobian(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  
  SWIG_check_num_args("btRaycastVehicle::buildJacobian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::buildJacobian",1,"btRaycastVehicle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_buildJacobian",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  (arg1)->buildJacobian();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRaycastVehicle_solveConstraint(lua_State* L) {
  int SWIG_arg = 0;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btRaycastVehicle::solveConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRaycastVehicle::solveConstraint",1,"btRaycastVehicle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btRaycastVehicle::solveConstraint",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRaycastVehicle,0))){
    SWIG_fail_ptr("btRaycastVehicle_solveConstraint",1,SWIGTYPE_p_btRaycastVehicle);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->solveConstraint(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btRaycastVehicle(void *obj) {
btRaycastVehicle *arg1 = (btRaycastVehicle *) obj;
delete arg1;
}
static swig_lua_method swig_btRaycastVehicle_methods[] = {
    {"getChassisWorldTransform", _wrap_btRaycastVehicle_getChassisWorldTransform}, 
    {"rayCast", _wrap_btRaycastVehicle_rayCast}, 
    {"updateVehicle", _wrap_btRaycastVehicle_updateVehicle}, 
    {"resetSuspension", _wrap_btRaycastVehicle_resetSuspension}, 
    {"getSteeringValue", _wrap_btRaycastVehicle_getSteeringValue}, 
    {"setSteeringValue", _wrap_btRaycastVehicle_setSteeringValue}, 
    {"applyEngineForce", _wrap_btRaycastVehicle_applyEngineForce}, 
    {"getWheelTransformWS", _wrap_btRaycastVehicle_getWheelTransformWS}, 
    {"updateWheelTransform", _wrap_btRaycastVehicle_updateWheelTransform}, 
    {"addWheel", _wrap_btRaycastVehicle_addWheel}, 
    {"getNumWheels", _wrap_btRaycastVehicle_getNumWheels}, 
    {"getWheelInfo", _wrap_btRaycastVehicle_getWheelInfo}, 
    {"updateWheelTransformsWS", _wrap_btRaycastVehicle_updateWheelTransformsWS}, 
    {"setBrake", _wrap_btRaycastVehicle_setBrake}, 
    {"setPitchControl", _wrap_btRaycastVehicle_setPitchControl}, 
    {"updateSuspension", _wrap_btRaycastVehicle_updateSuspension}, 
    {"updateFriction", _wrap_btRaycastVehicle_updateFriction}, 
    {"getRigidBody", _wrap_btRaycastVehicle_getRigidBody}, 
    {"getRightAxis", _wrap_btRaycastVehicle_getRightAxis}, 
    {"getUpAxis", _wrap_btRaycastVehicle_getUpAxis}, 
    {"getForwardAxis", _wrap_btRaycastVehicle_getForwardAxis}, 
    {"getForwardVector", _wrap_btRaycastVehicle_getForwardVector}, 
    {"getCurrentSpeedKmHour", _wrap_btRaycastVehicle_getCurrentSpeedKmHour}, 
    {"setCoordinateSystem", _wrap_btRaycastVehicle_setCoordinateSystem}, 
    {"buildJacobian", _wrap_btRaycastVehicle_buildJacobian}, 
    {"solveConstraint", _wrap_btRaycastVehicle_solveConstraint}, 
    {0,0}
};
static swig_lua_attribute swig_btRaycastVehicle_attributes[] = {
    { "m_wheelInfo", _wrap_btRaycastVehicle_m_wheelInfo_get, _wrap_btRaycastVehicle_m_wheelInfo_set},
    {0,0,0}
};
static swig_lua_attribute swig_btRaycastVehicle_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btRaycastVehicle_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btRaycastVehicle_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btRaycastVehicle_bases[] = {0,0};
static const char *swig_btRaycastVehicle_base_names[] = {"btTypedConstraint *",0};
static swig_lua_class _wrap_class_btRaycastVehicle = { "btRaycastVehicle", &SWIGTYPE_p_btRaycastVehicle,0, swig_delete_btRaycastVehicle, swig_btRaycastVehicle_methods, swig_btRaycastVehicle_attributes, { "btRaycastVehicle", swig_btRaycastVehicle_cls_methods, swig_btRaycastVehicle_cls_attributes, swig_btRaycastVehicle_cls_constants }, swig_btRaycastVehicle_bases, swig_btRaycastVehicle_base_names };

static int _wrap_new_btDefaultVehicleRaycaster(lua_State* L) {
  int SWIG_arg = 0;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btDefaultVehicleRaycaster *result = 0 ;
  
  SWIG_check_num_args("btDefaultVehicleRaycaster::btDefaultVehicleRaycaster",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btDefaultVehicleRaycaster::btDefaultVehicleRaycaster",1,"btDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDynamicsWorld,0))){
    SWIG_fail_ptr("new_btDefaultVehicleRaycaster",1,SWIGTYPE_p_btDynamicsWorld);
  }
  
  result = (btDefaultVehicleRaycaster *)new btDefaultVehicleRaycaster(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDefaultVehicleRaycaster,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btDefaultVehicleRaycaster(void *obj) {
btDefaultVehicleRaycaster *arg1 = (btDefaultVehicleRaycaster *) obj;
delete arg1;
}
static swig_lua_method swig_btDefaultVehicleRaycaster_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btDefaultVehicleRaycaster_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btDefaultVehicleRaycaster_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btDefaultVehicleRaycaster_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btDefaultVehicleRaycaster_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btDefaultVehicleRaycaster_bases[] = {0};
static const char *swig_btDefaultVehicleRaycaster_base_names[] = {0};
static swig_lua_class _wrap_class_btDefaultVehicleRaycaster = { "btDefaultVehicleRaycaster", &SWIGTYPE_p_btDefaultVehicleRaycaster,_wrap_new_btDefaultVehicleRaycaster, swig_delete_btDefaultVehicleRaycaster, swig_btDefaultVehicleRaycaster_methods, swig_btDefaultVehicleRaycaster_attributes, { "btDefaultVehicleRaycaster", swig_btDefaultVehicleRaycaster_cls_methods, swig_btDefaultVehicleRaycaster_cls_attributes, swig_btDefaultVehicleRaycaster_cls_constants }, swig_btDefaultVehicleRaycaster_bases, swig_btDefaultVehicleRaycaster_base_names };

static int _wrap_btWheelInfoConstructionInfo_m_chassisConnectionCS_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_chassisConnectionCS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_chassisConnectionCS",1,"btWheelInfoConstructionInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_chassisConnectionCS",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_chassisConnectionCS_set",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_chassisConnectionCS_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_chassisConnectionCS = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_chassisConnectionCS_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_chassisConnectionCS",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_chassisConnectionCS",1,"btWheelInfoConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_chassisConnectionCS_get",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  result = (btVector3 *)& ((arg1)->m_chassisConnectionCS);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_wheelDirectionCS_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_wheelDirectionCS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_wheelDirectionCS",1,"btWheelInfoConstructionInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_wheelDirectionCS",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_wheelDirectionCS_set",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_wheelDirectionCS_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_wheelDirectionCS = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_wheelDirectionCS_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_wheelDirectionCS",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_wheelDirectionCS",1,"btWheelInfoConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_wheelDirectionCS_get",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  result = (btVector3 *)& ((arg1)->m_wheelDirectionCS);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_wheelAxleCS_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_wheelAxleCS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_wheelAxleCS",1,"btWheelInfoConstructionInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_wheelAxleCS",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_wheelAxleCS_set",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_wheelAxleCS_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_wheelAxleCS = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_wheelAxleCS_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_wheelAxleCS",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_wheelAxleCS",1,"btWheelInfoConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_wheelAxleCS_get",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  result = (btVector3 *)& ((arg1)->m_wheelAxleCS);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_suspensionRestLength_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_suspensionRestLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_suspensionRestLength",1,"btWheelInfoConstructionInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_suspensionRestLength",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_suspensionRestLength_set",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_suspensionRestLength = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_suspensionRestLength_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_suspensionRestLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_suspensionRestLength",1,"btWheelInfoConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_suspensionRestLength_get",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  result = (btScalar) ((arg1)->m_suspensionRestLength);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_maxSuspensionTravelCm_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_maxSuspensionTravelCm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_maxSuspensionTravelCm",1,"btWheelInfoConstructionInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_maxSuspensionTravelCm",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_maxSuspensionTravelCm_set",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_maxSuspensionTravelCm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_maxSuspensionTravelCm_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_maxSuspensionTravelCm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_maxSuspensionTravelCm",1,"btWheelInfoConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_maxSuspensionTravelCm_get",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  result = (btScalar) ((arg1)->m_maxSuspensionTravelCm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_wheelRadius_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_wheelRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_wheelRadius",1,"btWheelInfoConstructionInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_wheelRadius",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_wheelRadius_set",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_wheelRadius = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_wheelRadius_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_wheelRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_wheelRadius",1,"btWheelInfoConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_wheelRadius_get",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  result = (btScalar) ((arg1)->m_wheelRadius);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_suspensionStiffness_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_suspensionStiffness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_suspensionStiffness",1,"btWheelInfoConstructionInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_suspensionStiffness",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_suspensionStiffness_set",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_suspensionStiffness = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_suspensionStiffness_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_suspensionStiffness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_suspensionStiffness",1,"btWheelInfoConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_suspensionStiffness_get",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  result = (btScalar) ((arg1)->m_suspensionStiffness);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_wheelsDampingCompression_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_wheelsDampingCompression",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_wheelsDampingCompression",1,"btWheelInfoConstructionInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_wheelsDampingCompression",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_wheelsDampingCompression_set",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_wheelsDampingCompression = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_wheelsDampingCompression_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_wheelsDampingCompression",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_wheelsDampingCompression",1,"btWheelInfoConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_wheelsDampingCompression_get",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  result = (btScalar) ((arg1)->m_wheelsDampingCompression);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_wheelsDampingRelaxation_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_wheelsDampingRelaxation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_wheelsDampingRelaxation",1,"btWheelInfoConstructionInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_wheelsDampingRelaxation",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_wheelsDampingRelaxation_set",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_wheelsDampingRelaxation = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_wheelsDampingRelaxation_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_wheelsDampingRelaxation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_wheelsDampingRelaxation",1,"btWheelInfoConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_wheelsDampingRelaxation_get",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  result = (btScalar) ((arg1)->m_wheelsDampingRelaxation);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_frictionSlip_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_frictionSlip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_frictionSlip",1,"btWheelInfoConstructionInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_frictionSlip",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_frictionSlip_set",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_frictionSlip = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_frictionSlip_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_frictionSlip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_frictionSlip",1,"btWheelInfoConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_frictionSlip_get",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  result = (btScalar) ((arg1)->m_frictionSlip);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_bIsFrontWheel_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_bIsFrontWheel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_bIsFrontWheel",1,"btWheelInfoConstructionInfo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_bIsFrontWheel",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_bIsFrontWheel_set",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_bIsFrontWheel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfoConstructionInfo_m_bIsFrontWheel_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::m_bIsFrontWheel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfoConstructionInfo::m_bIsFrontWheel",1,"btWheelInfoConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("btWheelInfoConstructionInfo_m_bIsFrontWheel_get",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  result = (bool) ((arg1)->m_bIsFrontWheel);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btWheelInfoConstructionInfo(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *result = 0 ;
  
  SWIG_check_num_args("btWheelInfoConstructionInfo::btWheelInfoConstructionInfo",0,0)
  result = (btWheelInfoConstructionInfo *)new btWheelInfoConstructionInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btWheelInfoConstructionInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btWheelInfoConstructionInfo(void *obj) {
btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) obj;
delete arg1;
}
static swig_lua_method swig_btWheelInfoConstructionInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btWheelInfoConstructionInfo_attributes[] = {
    { "m_chassisConnectionCS", _wrap_btWheelInfoConstructionInfo_m_chassisConnectionCS_get, _wrap_btWheelInfoConstructionInfo_m_chassisConnectionCS_set},
    { "m_wheelDirectionCS", _wrap_btWheelInfoConstructionInfo_m_wheelDirectionCS_get, _wrap_btWheelInfoConstructionInfo_m_wheelDirectionCS_set},
    { "m_wheelAxleCS", _wrap_btWheelInfoConstructionInfo_m_wheelAxleCS_get, _wrap_btWheelInfoConstructionInfo_m_wheelAxleCS_set},
    { "m_suspensionRestLength", _wrap_btWheelInfoConstructionInfo_m_suspensionRestLength_get, _wrap_btWheelInfoConstructionInfo_m_suspensionRestLength_set},
    { "m_maxSuspensionTravelCm", _wrap_btWheelInfoConstructionInfo_m_maxSuspensionTravelCm_get, _wrap_btWheelInfoConstructionInfo_m_maxSuspensionTravelCm_set},
    { "m_wheelRadius", _wrap_btWheelInfoConstructionInfo_m_wheelRadius_get, _wrap_btWheelInfoConstructionInfo_m_wheelRadius_set},
    { "m_suspensionStiffness", _wrap_btWheelInfoConstructionInfo_m_suspensionStiffness_get, _wrap_btWheelInfoConstructionInfo_m_suspensionStiffness_set},
    { "m_wheelsDampingCompression", _wrap_btWheelInfoConstructionInfo_m_wheelsDampingCompression_get, _wrap_btWheelInfoConstructionInfo_m_wheelsDampingCompression_set},
    { "m_wheelsDampingRelaxation", _wrap_btWheelInfoConstructionInfo_m_wheelsDampingRelaxation_get, _wrap_btWheelInfoConstructionInfo_m_wheelsDampingRelaxation_set},
    { "m_frictionSlip", _wrap_btWheelInfoConstructionInfo_m_frictionSlip_get, _wrap_btWheelInfoConstructionInfo_m_frictionSlip_set},
    { "m_bIsFrontWheel", _wrap_btWheelInfoConstructionInfo_m_bIsFrontWheel_get, _wrap_btWheelInfoConstructionInfo_m_bIsFrontWheel_set},
    {0,0,0}
};
static swig_lua_attribute swig_btWheelInfoConstructionInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btWheelInfoConstructionInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btWheelInfoConstructionInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btWheelInfoConstructionInfo_bases[] = {0};
static const char *swig_btWheelInfoConstructionInfo_base_names[] = {0};
static swig_lua_class _wrap_class_btWheelInfoConstructionInfo = { "btWheelInfoConstructionInfo", &SWIGTYPE_p_btWheelInfoConstructionInfo,_wrap_new_btWheelInfoConstructionInfo, swig_delete_btWheelInfoConstructionInfo, swig_btWheelInfoConstructionInfo_methods, swig_btWheelInfoConstructionInfo_attributes, { "btWheelInfoConstructionInfo", swig_btWheelInfoConstructionInfo_cls_methods, swig_btWheelInfoConstructionInfo_cls_attributes, swig_btWheelInfoConstructionInfo_cls_constants }, swig_btWheelInfoConstructionInfo_bases, swig_btWheelInfoConstructionInfo_base_names };

static int _wrap_btWheelInfo_m_worldTransform_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  SWIG_check_num_args("btWheelInfo::m_worldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_worldTransform",1,"btWheelInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btWheelInfo::m_worldTransform",2,"btTransform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_worldTransform_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btWheelInfo_m_worldTransform_set",2,SWIGTYPE_p_btTransform);
  }
  
  if (arg1) (arg1)->m_worldTransform = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_worldTransform_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btWheelInfo::m_worldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_worldTransform",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_worldTransform_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btTransform *)& ((arg1)->m_worldTransform);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_chassisConnectionPointCS_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btWheelInfo::m_chassisConnectionPointCS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_chassisConnectionPointCS",1,"btWheelInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btWheelInfo::m_chassisConnectionPointCS",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_chassisConnectionPointCS_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btWheelInfo_m_chassisConnectionPointCS_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_chassisConnectionPointCS = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_chassisConnectionPointCS_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btWheelInfo::m_chassisConnectionPointCS",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_chassisConnectionPointCS",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_chassisConnectionPointCS_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btVector3 *)& ((arg1)->m_chassisConnectionPointCS);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_wheelDirectionCS_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btWheelInfo::m_wheelDirectionCS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_wheelDirectionCS",1,"btWheelInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btWheelInfo::m_wheelDirectionCS",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_wheelDirectionCS_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btWheelInfo_m_wheelDirectionCS_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_wheelDirectionCS = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_wheelDirectionCS_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btWheelInfo::m_wheelDirectionCS",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_wheelDirectionCS",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_wheelDirectionCS_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btVector3 *)& ((arg1)->m_wheelDirectionCS);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_wheelAxleCS_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btWheelInfo::m_wheelAxleCS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_wheelAxleCS",1,"btWheelInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btWheelInfo::m_wheelAxleCS",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_wheelAxleCS_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btWheelInfo_m_wheelAxleCS_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_wheelAxleCS = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_wheelAxleCS_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btWheelInfo::m_wheelAxleCS",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_wheelAxleCS",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_wheelAxleCS_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btVector3 *)& ((arg1)->m_wheelAxleCS);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_suspensionRestLength1_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_suspensionRestLength1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_suspensionRestLength1",1,"btWheelInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfo::m_suspensionRestLength1",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_suspensionRestLength1_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_suspensionRestLength1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_suspensionRestLength1_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::m_suspensionRestLength1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_suspensionRestLength1",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_suspensionRestLength1_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar) ((arg1)->m_suspensionRestLength1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_maxSuspensionTravelCm_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_maxSuspensionTravelCm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_maxSuspensionTravelCm",1,"btWheelInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfo::m_maxSuspensionTravelCm",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_maxSuspensionTravelCm_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_maxSuspensionTravelCm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_maxSuspensionTravelCm_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::m_maxSuspensionTravelCm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_maxSuspensionTravelCm",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_maxSuspensionTravelCm_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar) ((arg1)->m_maxSuspensionTravelCm);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_getSuspensionRestLength(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::getSuspensionRestLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::getSuspensionRestLength",1,"btWheelInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_getSuspensionRestLength",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar)((btWheelInfo const *)arg1)->getSuspensionRestLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_wheelsRadius_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_wheelsRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_wheelsRadius",1,"btWheelInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfo::m_wheelsRadius",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_wheelsRadius_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_wheelsRadius = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_wheelsRadius_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::m_wheelsRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_wheelsRadius",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_wheelsRadius_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar) ((arg1)->m_wheelsRadius);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_suspensionStiffness_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_suspensionStiffness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_suspensionStiffness",1,"btWheelInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfo::m_suspensionStiffness",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_suspensionStiffness_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_suspensionStiffness = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_suspensionStiffness_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::m_suspensionStiffness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_suspensionStiffness",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_suspensionStiffness_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar) ((arg1)->m_suspensionStiffness);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_wheelsDampingCompression_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_wheelsDampingCompression",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_wheelsDampingCompression",1,"btWheelInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfo::m_wheelsDampingCompression",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_wheelsDampingCompression_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_wheelsDampingCompression = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_wheelsDampingCompression_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::m_wheelsDampingCompression",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_wheelsDampingCompression",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_wheelsDampingCompression_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar) ((arg1)->m_wheelsDampingCompression);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_wheelsDampingRelaxation_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_wheelsDampingRelaxation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_wheelsDampingRelaxation",1,"btWheelInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfo::m_wheelsDampingRelaxation",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_wheelsDampingRelaxation_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_wheelsDampingRelaxation = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_wheelsDampingRelaxation_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::m_wheelsDampingRelaxation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_wheelsDampingRelaxation",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_wheelsDampingRelaxation_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar) ((arg1)->m_wheelsDampingRelaxation);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_frictionSlip_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_frictionSlip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_frictionSlip",1,"btWheelInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfo::m_frictionSlip",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_frictionSlip_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_frictionSlip = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_frictionSlip_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::m_frictionSlip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_frictionSlip",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_frictionSlip_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar) ((arg1)->m_frictionSlip);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_steering_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_steering",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_steering",1,"btWheelInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfo::m_steering",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_steering_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_steering = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_steering_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::m_steering",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_steering",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_steering_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar) ((arg1)->m_steering);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_rotation_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_rotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_rotation",1,"btWheelInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfo::m_rotation",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_rotation_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_rotation = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_rotation_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::m_rotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_rotation",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_rotation_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar) ((arg1)->m_rotation);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_deltaRotation_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_deltaRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_deltaRotation",1,"btWheelInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfo::m_deltaRotation",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_deltaRotation_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_deltaRotation = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_deltaRotation_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::m_deltaRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_deltaRotation",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_deltaRotation_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar) ((arg1)->m_deltaRotation);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_rollInfluence_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_rollInfluence",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_rollInfluence",1,"btWheelInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfo::m_rollInfluence",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_rollInfluence_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_rollInfluence = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_rollInfluence_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::m_rollInfluence",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_rollInfluence",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_rollInfluence_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar) ((arg1)->m_rollInfluence);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_engineForce_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_engineForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_engineForce",1,"btWheelInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfo::m_engineForce",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_engineForce_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_engineForce = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_engineForce_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::m_engineForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_engineForce",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_engineForce_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar) ((arg1)->m_engineForce);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_brake_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_brake",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_brake",1,"btWheelInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfo::m_brake",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_brake_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_brake = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_brake_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::m_brake",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_brake",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_brake_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar) ((arg1)->m_brake);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_bIsFrontWheel_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_bIsFrontWheel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_bIsFrontWheel",1,"btWheelInfo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btWheelInfo::m_bIsFrontWheel",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_bIsFrontWheel_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_bIsFrontWheel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_bIsFrontWheel_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("btWheelInfo::m_bIsFrontWheel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_bIsFrontWheel",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_bIsFrontWheel_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (bool) ((arg1)->m_bIsFrontWheel);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_clientInfo_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btWheelInfo::m_clientInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_clientInfo",1,"btWheelInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btWheelInfo::m_clientInfo",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_clientInfo_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btWheelInfo_m_clientInfo_set");
  if (arg1) (arg1)->m_clientInfo = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_clientInfo_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btWheelInfo::m_clientInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_clientInfo",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_clientInfo_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (void *) ((arg1)->m_clientInfo);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btWheelInfo(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfoConstructionInfo *arg1 = 0 ;
  btWheelInfo *result = 0 ;
  
  SWIG_check_num_args("btWheelInfo::btWheelInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btWheelInfo::btWheelInfo",1,"btWheelInfoConstructionInfo &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfoConstructionInfo,0))){
    SWIG_fail_ptr("new_btWheelInfo",1,SWIGTYPE_p_btWheelInfoConstructionInfo);
  }
  
  result = (btWheelInfo *)new btWheelInfo(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btWheelInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_clippedInvContactDotSuspension_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_clippedInvContactDotSuspension",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_clippedInvContactDotSuspension",1,"btWheelInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfo::m_clippedInvContactDotSuspension",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_clippedInvContactDotSuspension_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_clippedInvContactDotSuspension = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_clippedInvContactDotSuspension_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::m_clippedInvContactDotSuspension",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_clippedInvContactDotSuspension",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_clippedInvContactDotSuspension_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar) ((arg1)->m_clippedInvContactDotSuspension);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_suspensionRelativeVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_suspensionRelativeVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_suspensionRelativeVelocity",1,"btWheelInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfo::m_suspensionRelativeVelocity",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_suspensionRelativeVelocity_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_suspensionRelativeVelocity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_suspensionRelativeVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::m_suspensionRelativeVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_suspensionRelativeVelocity",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_suspensionRelativeVelocity_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar) ((arg1)->m_suspensionRelativeVelocity);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_wheelsSuspensionForce_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_wheelsSuspensionForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_wheelsSuspensionForce",1,"btWheelInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfo::m_wheelsSuspensionForce",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_wheelsSuspensionForce_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_wheelsSuspensionForce = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_wheelsSuspensionForce_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::m_wheelsSuspensionForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_wheelsSuspensionForce",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_wheelsSuspensionForce_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar) ((arg1)->m_wheelsSuspensionForce);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_skidInfo_set(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btWheelInfo::m_skidInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_skidInfo",1,"btWheelInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btWheelInfo::m_skidInfo",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_skidInfo_set",1,SWIGTYPE_p_btWheelInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_skidInfo = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btWheelInfo_m_skidInfo_get(lua_State* L) {
  int SWIG_arg = 0;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btWheelInfo::m_skidInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btWheelInfo::m_skidInfo",1,"btWheelInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btWheelInfo,0))){
    SWIG_fail_ptr("btWheelInfo_m_skidInfo_get",1,SWIGTYPE_p_btWheelInfo);
  }
  
  result = (btScalar) ((arg1)->m_skidInfo);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btWheelInfo(void *obj) {
btWheelInfo *arg1 = (btWheelInfo *) obj;
delete arg1;
}
static swig_lua_method swig_btWheelInfo_methods[] = {
    {"getSuspensionRestLength", _wrap_btWheelInfo_getSuspensionRestLength}, 
    {0,0}
};
static swig_lua_attribute swig_btWheelInfo_attributes[] = {
    { "m_worldTransform", _wrap_btWheelInfo_m_worldTransform_get, _wrap_btWheelInfo_m_worldTransform_set},
    { "m_chassisConnectionPointCS", _wrap_btWheelInfo_m_chassisConnectionPointCS_get, _wrap_btWheelInfo_m_chassisConnectionPointCS_set},
    { "m_wheelDirectionCS", _wrap_btWheelInfo_m_wheelDirectionCS_get, _wrap_btWheelInfo_m_wheelDirectionCS_set},
    { "m_wheelAxleCS", _wrap_btWheelInfo_m_wheelAxleCS_get, _wrap_btWheelInfo_m_wheelAxleCS_set},
    { "m_suspensionRestLength1", _wrap_btWheelInfo_m_suspensionRestLength1_get, _wrap_btWheelInfo_m_suspensionRestLength1_set},
    { "m_maxSuspensionTravelCm", _wrap_btWheelInfo_m_maxSuspensionTravelCm_get, _wrap_btWheelInfo_m_maxSuspensionTravelCm_set},
    { "m_wheelsRadius", _wrap_btWheelInfo_m_wheelsRadius_get, _wrap_btWheelInfo_m_wheelsRadius_set},
    { "m_suspensionStiffness", _wrap_btWheelInfo_m_suspensionStiffness_get, _wrap_btWheelInfo_m_suspensionStiffness_set},
    { "m_wheelsDampingCompression", _wrap_btWheelInfo_m_wheelsDampingCompression_get, _wrap_btWheelInfo_m_wheelsDampingCompression_set},
    { "m_wheelsDampingRelaxation", _wrap_btWheelInfo_m_wheelsDampingRelaxation_get, _wrap_btWheelInfo_m_wheelsDampingRelaxation_set},
    { "m_frictionSlip", _wrap_btWheelInfo_m_frictionSlip_get, _wrap_btWheelInfo_m_frictionSlip_set},
    { "m_steering", _wrap_btWheelInfo_m_steering_get, _wrap_btWheelInfo_m_steering_set},
    { "m_rotation", _wrap_btWheelInfo_m_rotation_get, _wrap_btWheelInfo_m_rotation_set},
    { "m_deltaRotation", _wrap_btWheelInfo_m_deltaRotation_get, _wrap_btWheelInfo_m_deltaRotation_set},
    { "m_rollInfluence", _wrap_btWheelInfo_m_rollInfluence_get, _wrap_btWheelInfo_m_rollInfluence_set},
    { "m_engineForce", _wrap_btWheelInfo_m_engineForce_get, _wrap_btWheelInfo_m_engineForce_set},
    { "m_brake", _wrap_btWheelInfo_m_brake_get, _wrap_btWheelInfo_m_brake_set},
    { "m_bIsFrontWheel", _wrap_btWheelInfo_m_bIsFrontWheel_get, _wrap_btWheelInfo_m_bIsFrontWheel_set},
    { "m_clientInfo", _wrap_btWheelInfo_m_clientInfo_get, _wrap_btWheelInfo_m_clientInfo_set},
    { "m_clippedInvContactDotSuspension", _wrap_btWheelInfo_m_clippedInvContactDotSuspension_get, _wrap_btWheelInfo_m_clippedInvContactDotSuspension_set},
    { "m_suspensionRelativeVelocity", _wrap_btWheelInfo_m_suspensionRelativeVelocity_get, _wrap_btWheelInfo_m_suspensionRelativeVelocity_set},
    { "m_wheelsSuspensionForce", _wrap_btWheelInfo_m_wheelsSuspensionForce_get, _wrap_btWheelInfo_m_wheelsSuspensionForce_set},
    { "m_skidInfo", _wrap_btWheelInfo_m_skidInfo_get, _wrap_btWheelInfo_m_skidInfo_set},
    {0,0,0}
};
static swig_lua_attribute swig_btWheelInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btWheelInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btWheelInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btWheelInfo_bases[] = {0};
static const char *swig_btWheelInfo_base_names[] = {0};
static swig_lua_class _wrap_class_btWheelInfo = { "btWheelInfo", &SWIGTYPE_p_btWheelInfo,_wrap_new_btWheelInfo, swig_delete_btWheelInfo, swig_btWheelInfo_methods, swig_btWheelInfo_attributes, { "btWheelInfo", swig_btWheelInfo_cls_methods, swig_btWheelInfo_cls_attributes, swig_btWheelInfo_cls_constants }, swig_btWheelInfo_bases, swig_btWheelInfo_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_Reg swig_commands[] = {
    { "btGetVersion", _wrap_btGetVersion},
    { "btSqrt", _wrap_btSqrt},
    { "btFabs", _wrap_btFabs},
    { "btCos", _wrap_btCos},
    { "btSin", _wrap_btSin},
    { "btTan", _wrap_btTan},
    { "btAcos", _wrap_btAcos},
    { "btAsin", _wrap_btAsin},
    { "btAtan", _wrap_btAtan},
    { "btAtan2", _wrap_btAtan2},
    { "btExp", _wrap_btExp},
    { "btLog", _wrap_btLog},
    { "btPow", _wrap_btPow},
    { "btFmod", _wrap_btFmod},
    { "btAtan2Fast", _wrap_btAtan2Fast},
    { "btFuzzyZero", _wrap_btFuzzyZero},
    { "btEqual", _wrap_btEqual},
    { "btGreaterEqual", _wrap_btGreaterEqual},
    { "btIsNegative", _wrap_btIsNegative},
    { "btRadians", _wrap_btRadians},
    { "btDegrees", _wrap_btDegrees},
    { "btFsel", _wrap_btFsel},
    { "btMachineIsLittleEndian", _wrap_btMachineIsLittleEndian},
    { "btSelect",_wrap_btSelect},
    { "btSwapEndian",_wrap_btSwapEndian},
    { "btSwapEndianFloat", _wrap_btSwapEndianFloat},
    { "btUnswapEndianFloat", _wrap_btUnswapEndianFloat},
    { "btSwapEndianDouble", _wrap_btSwapEndianDouble},
    { "btUnswapEndianDouble", _wrap_btUnswapEndianDouble},
    { "btNormalizeAngle", _wrap_btNormalizeAngle},
    { "btAlignedAllocInternal", _wrap_btAlignedAllocInternal},
    { "btAlignedFreeInternal", _wrap_btAlignedFreeInternal},
    { "btAlignedAllocSetCustom", _wrap_btAlignedAllocSetCustom},
    { "btAlignedAllocSetCustomAligned", _wrap_btAlignedAllocSetCustomAligned},
    { "btDot", _wrap_btDot},
    { "btDistance2", _wrap_btDistance2},
    { "btDistance", _wrap_btDistance},
    { "btCross", _wrap_btCross},
    { "btTriple", _wrap_btTriple},
    { "lerp", _wrap_lerp},
    { "btSwapScalarEndian", _wrap_btSwapScalarEndian},
    { "btSwapVector3Endian", _wrap_btSwapVector3Endian},
    { "btUnSwapVector3Endian", _wrap_btUnSwapVector3Endian},
    { "btQuaternion_getIdentity", _wrap_btQuaternion_getIdentity},
    { "dot", _wrap_dot},
    { "length", _wrap_length},
    { "btAngle",_wrap_btAngle},
    { "inverse", _wrap_inverse},
    { "slerp", _wrap_slerp},
    { "quatRotate", _wrap_quatRotate},
    { "shortestArcQuat", _wrap_shortestArcQuat},
    { "shortestArcQuatNormalize2", _wrap_shortestArcQuatNormalize2},
    { "btMatrix3x3_getIdentity", _wrap_btMatrix3x3_getIdentity},
    { "btTransform_getIdentity", _wrap_btTransform_getIdentity},
    { "AabbExpand", _wrap_AabbExpand},
    { "TestPointAgainstAabb2", _wrap_TestPointAgainstAabb2},
    { "TestAabbAgainstAabb2", _wrap_TestAabbAgainstAabb2},
    { "TestTriangleAgainstAabb2", _wrap_TestTriangleAgainstAabb2},
    { "btOutcode", _wrap_btOutcode},
    { "btRayAabb2", _wrap_btRayAabb2},
    { "btRayAabb", _wrap_btRayAabb},
    { "btTransformAabb",_wrap_btTransformAabb},
    { "testQuantizedAabbAgainstQuantizedAabb", _wrap_testQuantizedAabbAgainstQuantizedAabb},
    { "btGeometryUtil_getPlaneEquationsFromVertices", _wrap_btGeometryUtil_getPlaneEquationsFromVertices},
    { "btGeometryUtil_getVerticesFromPlaneEquations", _wrap_btGeometryUtil_getVerticesFromPlaneEquations},
    { "btGeometryUtil_isPointInsidePlanes", _wrap_btGeometryUtil_isPointInsidePlanes},
    { "btGeometryUtil_areVerticesBehindPlane", _wrap_btGeometryUtil_areVerticesBehindPlane},
    { "CProfileManager_Start_Profile", _wrap_CProfileManager_Start_Profile},
    { "CProfileManager_Stop_Profile", _wrap_CProfileManager_Stop_Profile},
    { "CProfileManager_CleanupMemory", _wrap_CProfileManager_CleanupMemory},
    { "CProfileManager_Reset", _wrap_CProfileManager_Reset},
    { "CProfileManager_Increment_Frame_Counter", _wrap_CProfileManager_Increment_Frame_Counter},
    { "CProfileManager_Get_Frame_Count_Since_Reset", _wrap_CProfileManager_Get_Frame_Count_Since_Reset},
    { "CProfileManager_Get_Time_Since_Reset", _wrap_CProfileManager_Get_Time_Since_Reset},
    { "CProfileManager_Get_Iterator", _wrap_CProfileManager_Get_Iterator},
    { "CProfileManager_Release_Iterator", _wrap_CProfileManager_Release_Iterator},
    { "CProfileManager_dumpRecursive", _wrap_CProfileManager_dumpRecursive},
    { "CProfileManager_dumpAll", _wrap_CProfileManager_dumpAll},
    { "GEN_srand", _wrap_GEN_srand},
    { "GEN_rand", _wrap_GEN_rand},
    { "btAabbSupport", _wrap_btAabbSupport},
    { "btTransformUtil_integrateTransform", _wrap_btTransformUtil_integrateTransform},
    { "btTransformUtil_calculateVelocityQuaternion", _wrap_btTransformUtil_calculateVelocityQuaternion},
    { "btTransformUtil_calculateDiffAxisAngleQuaternion", _wrap_btTransformUtil_calculateDiffAxisAngleQuaternion},
    { "btTransformUtil_calculateVelocity", _wrap_btTransformUtil_calculateVelocity},
    { "btTransformUtil_calculateDiffAxisAngle", _wrap_btTransformUtil_calculateDiffAxisAngle},
    { "btBroadphaseProxy_isPolyhedral", _wrap_btBroadphaseProxy_isPolyhedral},
    { "btBroadphaseProxy_isConvex", _wrap_btBroadphaseProxy_isConvex},
    { "btBroadphaseProxy_isNonMoving", _wrap_btBroadphaseProxy_isNonMoving},
    { "btBroadphaseProxy_isConcave", _wrap_btBroadphaseProxy_isConcave},
    { "btBroadphaseProxy_isCompound", _wrap_btBroadphaseProxy_isCompound},
    { "btBroadphaseProxy_isSoftBody", _wrap_btBroadphaseProxy_isSoftBody},
    { "btBroadphaseProxy_isInfinite", _wrap_btBroadphaseProxy_isInfinite},
    { "btBroadphaseProxy_isConvex2d", _wrap_btBroadphaseProxy_isConvex2d},
    { "btSimpleBroadphase_aabbOverlap", _wrap_btSimpleBroadphase_aabbOverlap},
    { "btQuantizedBvh_deSerializeInPlace", _wrap_btQuantizedBvh_deSerializeInPlace},
    { "btQuantizedBvh_getAlignmentSerializationPadding", _wrap_btQuantizedBvh_getAlignmentSerializationPadding},
    { "btStrLen", _wrap_btStrLen},
    { "btManifoldResult_calculateCombinedRestitution", _wrap_btManifoldResult_calculateCombinedRestitution},
    { "btManifoldResult_calculateCombinedFriction", _wrap_btManifoldResult_calculateCombinedFriction},
    { "btCollisionDispatcher_defaultNearCallback", _wrap_btCollisionDispatcher_defaultNearCallback},
    { "btRigidBody_upcast",_wrap_btRigidBody_upcast},
    { "btTypedConstraint_getFixedBody", _wrap_btTypedConstraint_getFixedBody},
    { "btAdjustAngleToLimits", _wrap_btAdjustAngleToLimits},
    { "resolveSingleCollision", _wrap_resolveSingleCollision},
    { "resolveSingleBilateral", _wrap_resolveSingleBilateral},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "gRemovePairs", _wrap_gRemovePairs_get, _wrap_gRemovePairs_set },
    { "gAddedPairs", _wrap_gAddedPairs_get, _wrap_gAddedPairs_set },
    { "gFindPairs", _wrap_gFindPairs_get, _wrap_gFindPairs_set },
    { "BT_NULL_PAIR", _wrap_BT_NULL_PAIR_get, SWIG_Lua_set_immutable },
    { "BT_HASH_NULL", _wrap_BT_HASH_NULL_get, SWIG_Lua_set_immutable },
    { "sBulletDNAstr", _wrap_sBulletDNAstr_get, _wrap_sBulletDNAstr_set },
    { "sBulletDNAlen", _wrap_sBulletDNAlen_get, _wrap_sBulletDNAlen_set },
    { "sBulletDNAstr64", _wrap_sBulletDNAstr64_get, _wrap_sBulletDNAstr64_set },
    { "sBulletDNAlen64", _wrap_sBulletDNAlen64_get, _wrap_sBulletDNAlen64_set },
    { "gContactBreakingThreshold", _wrap_gContactBreakingThreshold_get, _wrap_gContactBreakingThreshold_set },
    { "gContactDestroyedCallback", _wrap_gContactDestroyedCallback_get, _wrap_gContactDestroyedCallback_set },
    { "gContactProcessedCallback", _wrap_gContactProcessedCallback_get, _wrap_gContactProcessedCallback_set },
    { "gContactAddedCallback", _wrap_gContactAddedCallback_get, _wrap_gContactAddedCallback_set },
    { "gDeactivationTime", _wrap_gDeactivationTime_get, _wrap_gDeactivationTime_set },
    { "gDisableDeactivation", _wrap_gDisableDeactivation_get, _wrap_gDisableDeactivation_set },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("BT_BULLET_VERSION", 281)},
    {SWIG_LUA_CONSTTAB_FLOAT("BT_LARGE_FLOAT", 1e18)},
    {SWIG_LUA_CONSTTAB_STRING("btVector3DataName", "btVector3FloatData")},
    {SWIG_LUA_CONSTTAB_INT("USE_BANCHLESS", 1)},
    {SWIG_LUA_CONSTTAB_INT("btIDebugDraw_DBG_NoDebug", btIDebugDraw::DBG_NoDebug)},
    {SWIG_LUA_CONSTTAB_INT("btIDebugDraw_DBG_DrawWireframe", btIDebugDraw::DBG_DrawWireframe)},
    {SWIG_LUA_CONSTTAB_INT("btIDebugDraw_DBG_DrawAabb", btIDebugDraw::DBG_DrawAabb)},
    {SWIG_LUA_CONSTTAB_INT("btIDebugDraw_DBG_DrawFeaturesText", btIDebugDraw::DBG_DrawFeaturesText)},
    {SWIG_LUA_CONSTTAB_INT("btIDebugDraw_DBG_DrawContactPoints", btIDebugDraw::DBG_DrawContactPoints)},
    {SWIG_LUA_CONSTTAB_INT("btIDebugDraw_DBG_NoDeactivation", btIDebugDraw::DBG_NoDeactivation)},
    {SWIG_LUA_CONSTTAB_INT("btIDebugDraw_DBG_NoHelpText", btIDebugDraw::DBG_NoHelpText)},
    {SWIG_LUA_CONSTTAB_INT("btIDebugDraw_DBG_DrawText", btIDebugDraw::DBG_DrawText)},
    {SWIG_LUA_CONSTTAB_INT("btIDebugDraw_DBG_ProfileTimings", btIDebugDraw::DBG_ProfileTimings)},
    {SWIG_LUA_CONSTTAB_INT("btIDebugDraw_DBG_EnableSatComparison", btIDebugDraw::DBG_EnableSatComparison)},
    {SWIG_LUA_CONSTTAB_INT("btIDebugDraw_DBG_DisableBulletLCP", btIDebugDraw::DBG_DisableBulletLCP)},
    {SWIG_LUA_CONSTTAB_INT("btIDebugDraw_DBG_EnableCCD", btIDebugDraw::DBG_EnableCCD)},
    {SWIG_LUA_CONSTTAB_INT("btIDebugDraw_DBG_DrawConstraints", btIDebugDraw::DBG_DrawConstraints)},
    {SWIG_LUA_CONSTTAB_INT("btIDebugDraw_DBG_DrawConstraintLimits", btIDebugDraw::DBG_DrawConstraintLimits)},
    {SWIG_LUA_CONSTTAB_INT("btIDebugDraw_DBG_FastWireframe", btIDebugDraw::DBG_FastWireframe)},
    {SWIG_LUA_CONSTTAB_INT("btIDebugDraw_DBG_DrawNormals", btIDebugDraw::DBG_DrawNormals)},
    {SWIG_LUA_CONSTTAB_INT("btIDebugDraw_DBG_MAX_DEBUG_DRAW_MODE", btIDebugDraw::DBG_MAX_DEBUG_DRAW_MODE)},
    {SWIG_LUA_CONSTTAB_INT("USE_BT_CLOCK", 1)},
    {SWIG_LUA_CONSTTAB_INT("BOX_SHAPE_PROXYTYPE", BOX_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("TRIANGLE_SHAPE_PROXYTYPE", TRIANGLE_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("TETRAHEDRAL_SHAPE_PROXYTYPE", TETRAHEDRAL_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("CONVEX_TRIANGLEMESH_SHAPE_PROXYTYPE", CONVEX_TRIANGLEMESH_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("CONVEX_HULL_SHAPE_PROXYTYPE", CONVEX_HULL_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("CONVEX_POINT_CLOUD_SHAPE_PROXYTYPE", CONVEX_POINT_CLOUD_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("CUSTOM_POLYHEDRAL_SHAPE_TYPE", CUSTOM_POLYHEDRAL_SHAPE_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("IMPLICIT_CONVEX_SHAPES_START_HERE", IMPLICIT_CONVEX_SHAPES_START_HERE)},
    {SWIG_LUA_CONSTTAB_INT("SPHERE_SHAPE_PROXYTYPE", SPHERE_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("MULTI_SPHERE_SHAPE_PROXYTYPE", MULTI_SPHERE_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("CAPSULE_SHAPE_PROXYTYPE", CAPSULE_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("CONE_SHAPE_PROXYTYPE", CONE_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("CONVEX_SHAPE_PROXYTYPE", CONVEX_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("CYLINDER_SHAPE_PROXYTYPE", CYLINDER_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("UNIFORM_SCALING_SHAPE_PROXYTYPE", UNIFORM_SCALING_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("MINKOWSKI_SUM_SHAPE_PROXYTYPE", MINKOWSKI_SUM_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("MINKOWSKI_DIFFERENCE_SHAPE_PROXYTYPE", MINKOWSKI_DIFFERENCE_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("BOX_2D_SHAPE_PROXYTYPE", BOX_2D_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("CONVEX_2D_SHAPE_PROXYTYPE", CONVEX_2D_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("CUSTOM_CONVEX_SHAPE_TYPE", CUSTOM_CONVEX_SHAPE_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("CONCAVE_SHAPES_START_HERE", CONCAVE_SHAPES_START_HERE)},
    {SWIG_LUA_CONSTTAB_INT("TRIANGLE_MESH_SHAPE_PROXYTYPE", TRIANGLE_MESH_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("SCALED_TRIANGLE_MESH_SHAPE_PROXYTYPE", SCALED_TRIANGLE_MESH_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("FAST_CONCAVE_MESH_PROXYTYPE", FAST_CONCAVE_MESH_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("TERRAIN_SHAPE_PROXYTYPE", TERRAIN_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("GIMPACT_SHAPE_PROXYTYPE", GIMPACT_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("MULTIMATERIAL_TRIANGLE_MESH_PROXYTYPE", MULTIMATERIAL_TRIANGLE_MESH_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("EMPTY_SHAPE_PROXYTYPE", EMPTY_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("STATIC_PLANE_PROXYTYPE", STATIC_PLANE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("CUSTOM_CONCAVE_SHAPE_TYPE", CUSTOM_CONCAVE_SHAPE_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("CONCAVE_SHAPES_END_HERE", CONCAVE_SHAPES_END_HERE)},
    {SWIG_LUA_CONSTTAB_INT("COMPOUND_SHAPE_PROXYTYPE", COMPOUND_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("SOFTBODY_SHAPE_PROXYTYPE", SOFTBODY_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("HFFLUID_SHAPE_PROXYTYPE", HFFLUID_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("HFFLUID_BUOYANT_CONVEX_SHAPE_PROXYTYPE", HFFLUID_BUOYANT_CONVEX_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("INVALID_SHAPE_PROXYTYPE", INVALID_SHAPE_PROXYTYPE)},
    {SWIG_LUA_CONSTTAB_INT("MAX_BROADPHASE_COLLISION_TYPES", MAX_BROADPHASE_COLLISION_TYPES)},
    {SWIG_LUA_CONSTTAB_INT("btBroadphaseProxy_DefaultFilter", btBroadphaseProxy::DefaultFilter)},
    {SWIG_LUA_CONSTTAB_INT("btBroadphaseProxy_StaticFilter", btBroadphaseProxy::StaticFilter)},
    {SWIG_LUA_CONSTTAB_INT("btBroadphaseProxy_KinematicFilter", btBroadphaseProxy::KinematicFilter)},
    {SWIG_LUA_CONSTTAB_INT("btBroadphaseProxy_DebrisFilter", btBroadphaseProxy::DebrisFilter)},
    {SWIG_LUA_CONSTTAB_INT("btBroadphaseProxy_SensorTrigger", btBroadphaseProxy::SensorTrigger)},
    {SWIG_LUA_CONSTTAB_INT("btBroadphaseProxy_CharacterFilter", btBroadphaseProxy::CharacterFilter)},
    {SWIG_LUA_CONSTTAB_INT("btBroadphaseProxy_AllFilter", btBroadphaseProxy::AllFilter)},
    {SWIG_LUA_CONSTTAB_INT("BT_USE_PLACEMENT_NEW", 1)},
    {SWIG_LUA_CONSTTAB_INT("btDispatcherInfo_DISPATCH_DISCRETE", btDispatcherInfo::DISPATCH_DISCRETE)},
    {SWIG_LUA_CONSTTAB_INT("btDispatcherInfo_DISPATCH_CONTINUOUS", btDispatcherInfo::DISPATCH_CONTINUOUS)},
    {SWIG_LUA_CONSTTAB_INT("MAX_PREFERRED_PENETRATION_DIRECTIONS", 10)},
    {SWIG_LUA_CONSTTAB_INT("PHY_FLOAT", PHY_FLOAT)},
    {SWIG_LUA_CONSTTAB_INT("PHY_DOUBLE", PHY_DOUBLE)},
    {SWIG_LUA_CONSTTAB_INT("PHY_INTEGER", PHY_INTEGER)},
    {SWIG_LUA_CONSTTAB_INT("PHY_SHORT", PHY_SHORT)},
    {SWIG_LUA_CONSTTAB_INT("PHY_FIXEDPOINT88", PHY_FIXEDPOINT88)},
    {SWIG_LUA_CONSTTAB_INT("PHY_UCHAR", PHY_UCHAR)},
    {SWIG_LUA_CONSTTAB_STRING("btQuantizedBvhDataName", "btQuantizedBvhFloatData")},
    {SWIG_LUA_CONSTTAB_INT("MAX_SUBTREE_SIZE_IN_BYTES", 2048)},
    {SWIG_LUA_CONSTTAB_INT("MAX_NUM_PARTS_IN_BITS", 10)},
    {SWIG_LUA_CONSTTAB_INT("btQuantizedBvh_TRAVERSAL_STACKLESS", btQuantizedBvh::TRAVERSAL_STACKLESS)},
    {SWIG_LUA_CONSTTAB_INT("btQuantizedBvh_TRAVERSAL_STACKLESS_CACHE_FRIENDLY", btQuantizedBvh::TRAVERSAL_STACKLESS_CACHE_FRIENDLY)},
    {SWIG_LUA_CONSTTAB_INT("btQuantizedBvh_TRAVERSAL_RECURSIVE", btQuantizedBvh::TRAVERSAL_RECURSIVE)},
    {SWIG_LUA_CONSTTAB_INT("BT_SERIALIZE_NO_BVH", BT_SERIALIZE_NO_BVH)},
    {SWIG_LUA_CONSTTAB_INT("BT_SERIALIZE_NO_TRIANGLEINFOMAP", BT_SERIALIZE_NO_TRIANGLEINFOMAP)},
    {SWIG_LUA_CONSTTAB_INT("BT_SERIALIZE_NO_DUPLICATE_ASSERT", BT_SERIALIZE_NO_DUPLICATE_ASSERT)},
    {SWIG_LUA_CONSTTAB_INT("BT_HEADER_LENGTH", 12)},
    {SWIG_LUA_CONSTTAB_INT("TRI_INFO_V0V1_CONVEX", 1)},
    {SWIG_LUA_CONSTTAB_INT("TRI_INFO_V1V2_CONVEX", 2)},
    {SWIG_LUA_CONSTTAB_INT("TRI_INFO_V2V0_CONVEX", 4)},
    {SWIG_LUA_CONSTTAB_INT("TRI_INFO_V0V1_SWAP_NORMALB", 8)},
    {SWIG_LUA_CONSTTAB_INT("TRI_INFO_V1V2_SWAP_NORMALB", 16)},
    {SWIG_LUA_CONSTTAB_INT("TRI_INFO_V2V0_SWAP_NORMALB", 32)},
    {SWIG_LUA_CONSTTAB_INT("NO_VIRTUAL_INTERFACE", 1)},
    {SWIG_LUA_CONSTTAB_INT("VORONOI_SIMPLEX_MAX_VERTS", 5)},
    {SWIG_LUA_CONSTTAB_FLOAT("VORONOI_DEFAULT_EQUAL_VERTEX_THRESHOLD", 0.0001)},
    {SWIG_LUA_CONSTTAB_INT("MIN_CONTACT_MANIFOLD_TYPE", MIN_CONTACT_MANIFOLD_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("BT_PERSISTENT_MANIFOLD_TYPE", BT_PERSISTENT_MANIFOLD_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("MANIFOLD_CACHE_SIZE", 4)},
    {SWIG_LUA_CONSTTAB_INT("btTriangleRaycastCallback_kF_None", btTriangleRaycastCallback::kF_None)},
    {SWIG_LUA_CONSTTAB_INT("btTriangleRaycastCallback_kF_FilterBackfaces", btTriangleRaycastCallback::kF_FilterBackfaces)},
    {SWIG_LUA_CONSTTAB_INT("btTriangleRaycastCallback_kF_KeepUnflippedNormal", btTriangleRaycastCallback::kF_KeepUnflippedNormal)},
    {SWIG_LUA_CONSTTAB_INT("btTriangleRaycastCallback_kF_Terminator", btTriangleRaycastCallback::kF_Terminator)},
    {SWIG_LUA_CONSTTAB_INT("ACTIVE_TAG", 1)},
    {SWIG_LUA_CONSTTAB_INT("ISLAND_SLEEPING", 2)},
    {SWIG_LUA_CONSTTAB_INT("WANTS_DEACTIVATION", 3)},
    {SWIG_LUA_CONSTTAB_INT("DISABLE_DEACTIVATION", 4)},
    {SWIG_LUA_CONSTTAB_INT("DISABLE_SIMULATION", 5)},
    {SWIG_LUA_CONSTTAB_STRING("btCollisionObjectDataName", "btCollisionObjectFloatData")},
    {SWIG_LUA_CONSTTAB_INT("btCollisionObject_CF_STATIC_OBJECT", btCollisionObject::CF_STATIC_OBJECT)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionObject_CF_KINEMATIC_OBJECT", btCollisionObject::CF_KINEMATIC_OBJECT)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionObject_CF_NO_CONTACT_RESPONSE", btCollisionObject::CF_NO_CONTACT_RESPONSE)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionObject_CF_CUSTOM_MATERIAL_CALLBACK", btCollisionObject::CF_CUSTOM_MATERIAL_CALLBACK)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionObject_CF_CHARACTER_OBJECT", btCollisionObject::CF_CHARACTER_OBJECT)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionObject_CF_DISABLE_VISUALIZE_OBJECT", btCollisionObject::CF_DISABLE_VISUALIZE_OBJECT)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionObject_CF_DISABLE_SPU_COLLISION_PROCESSING", btCollisionObject::CF_DISABLE_SPU_COLLISION_PROCESSING)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionObject_CO_COLLISION_OBJECT", btCollisionObject::CO_COLLISION_OBJECT)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionObject_CO_RIGID_BODY", btCollisionObject::CO_RIGID_BODY)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionObject_CO_GHOST_OBJECT", btCollisionObject::CO_GHOST_OBJECT)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionObject_CO_SOFT_BODY", btCollisionObject::CO_SOFT_BODY)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionObject_CO_HF_FLUID", btCollisionObject::CO_HF_FLUID)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionObject_CO_USER_TYPE", btCollisionObject::CO_USER_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionObject_CF_ANISOTROPIC_FRICTION_DISABLED", btCollisionObject::CF_ANISOTROPIC_FRICTION_DISABLED)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionObject_CF_ANISOTROPIC_FRICTION", btCollisionObject::CF_ANISOTROPIC_FRICTION)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionObject_CF_ANISOTROPIC_ROLLING_FRICTION", btCollisionObject::CF_ANISOTROPIC_ROLLING_FRICTION)},
    {SWIG_LUA_CONSTTAB_INT("USE_DISPATCH_REGISTRY_ARRAY", 1)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionDispatcher_CD_STATIC_STATIC_REPORTED", btCollisionDispatcher::CD_STATIC_STATIC_REPORTED)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionDispatcher_CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD", btCollisionDispatcher::CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD)},
    {SWIG_LUA_CONSTTAB_INT("btCollisionDispatcher_CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION", btCollisionDispatcher::CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION)},
    {SWIG_LUA_CONSTTAB_INT("USE_PATH_COMPRESSION", 1)},
    {SWIG_LUA_CONSTTAB_INT("STATIC_SIMULATION_ISLAND_OPTIMIZATION", 1)},
    {SWIG_LUA_CONSTTAB_INT("btSolverConstraint_BT_SOLVER_CONTACT_1D", btSolverConstraint::BT_SOLVER_CONTACT_1D)},
    {SWIG_LUA_CONSTTAB_INT("btSolverConstraint_BT_SOLVER_FRICTION_1D", btSolverConstraint::BT_SOLVER_FRICTION_1D)},
    {SWIG_LUA_CONSTTAB_STRING("btRigidBodyDataName", "btRigidBodyFloatData")},
    {SWIG_LUA_CONSTTAB_INT("BT_DISABLE_WORLD_GRAVITY", BT_DISABLE_WORLD_GRAVITY)},
    {SWIG_LUA_CONSTTAB_INT("BT_ENABLE_GYROPSCOPIC_FORCE", BT_ENABLE_GYROPSCOPIC_FORCE)},
    {SWIG_LUA_CONSTTAB_INT("POINT2POINT_CONSTRAINT_TYPE", POINT2POINT_CONSTRAINT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("HINGE_CONSTRAINT_TYPE", HINGE_CONSTRAINT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("CONETWIST_CONSTRAINT_TYPE", CONETWIST_CONSTRAINT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("D6_CONSTRAINT_TYPE", D6_CONSTRAINT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("SLIDER_CONSTRAINT_TYPE", SLIDER_CONSTRAINT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("CONTACT_CONSTRAINT_TYPE", CONTACT_CONSTRAINT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("D6_SPRING_CONSTRAINT_TYPE", D6_SPRING_CONSTRAINT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("GEAR_CONSTRAINT_TYPE", GEAR_CONSTRAINT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("MAX_CONSTRAINT_TYPE", MAX_CONSTRAINT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("BT_CONSTRAINT_ERP", BT_CONSTRAINT_ERP)},
    {SWIG_LUA_CONSTTAB_INT("BT_CONSTRAINT_STOP_ERP", BT_CONSTRAINT_STOP_ERP)},
    {SWIG_LUA_CONSTTAB_INT("BT_CONSTRAINT_CFM", BT_CONSTRAINT_CFM)},
    {SWIG_LUA_CONSTTAB_INT("BT_CONSTRAINT_STOP_CFM", BT_CONSTRAINT_STOP_CFM)},
    {SWIG_LUA_CONSTTAB_INT("SOLVER_RANDMIZE_ORDER", SOLVER_RANDMIZE_ORDER)},
    {SWIG_LUA_CONSTTAB_INT("SOLVER_FRICTION_SEPARATE", SOLVER_FRICTION_SEPARATE)},
    {SWIG_LUA_CONSTTAB_INT("SOLVER_USE_WARMSTARTING", SOLVER_USE_WARMSTARTING)},
    {SWIG_LUA_CONSTTAB_INT("SOLVER_USE_2_FRICTION_DIRECTIONS", SOLVER_USE_2_FRICTION_DIRECTIONS)},
    {SWIG_LUA_CONSTTAB_INT("SOLVER_ENABLE_FRICTION_DIRECTION_CACHING", SOLVER_ENABLE_FRICTION_DIRECTION_CACHING)},
    {SWIG_LUA_CONSTTAB_INT("SOLVER_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION", SOLVER_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION)},
    {SWIG_LUA_CONSTTAB_INT("SOLVER_CACHE_FRIENDLY", SOLVER_CACHE_FRIENDLY)},
    {SWIG_LUA_CONSTTAB_INT("SOLVER_SIMD", SOLVER_SIMD)},
    {SWIG_LUA_CONSTTAB_INT("SOLVER_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS", SOLVER_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS)},
    {SWIG_LUA_CONSTTAB_INT("SOLVER_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS", SOLVER_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS)},
    {SWIG_LUA_CONSTTAB_INT("BT_6DOF_FLAGS_CFM_NORM", BT_6DOF_FLAGS_CFM_NORM)},
    {SWIG_LUA_CONSTTAB_INT("BT_6DOF_FLAGS_CFM_STOP", BT_6DOF_FLAGS_CFM_STOP)},
    {SWIG_LUA_CONSTTAB_INT("BT_6DOF_FLAGS_ERP_STOP", BT_6DOF_FLAGS_ERP_STOP)},
    {SWIG_LUA_CONSTTAB_INT("BT_6DOF_FLAGS_AXIS_SHIFT", 3)},
    {SWIG_LUA_CONSTTAB_INT("_BT_USE_CENTER_LIMIT_", 1)},
    {SWIG_LUA_CONSTTAB_STRING("btHingeConstraintDataName", "btHingeConstraintFloatData")},
    {SWIG_LUA_CONSTTAB_INT("BT_HINGE_FLAGS_CFM_STOP", BT_HINGE_FLAGS_CFM_STOP)},
    {SWIG_LUA_CONSTTAB_INT("BT_HINGE_FLAGS_ERP_STOP", BT_HINGE_FLAGS_ERP_STOP)},
    {SWIG_LUA_CONSTTAB_INT("BT_HINGE_FLAGS_CFM_NORM", BT_HINGE_FLAGS_CFM_NORM)},
    {SWIG_LUA_CONSTTAB_STRING("btPoint2PointConstraintDataName", "btPoint2PointConstraintFloatData")},
    {SWIG_LUA_CONSTTAB_INT("BT_P2P_FLAGS_ERP", BT_P2P_FLAGS_ERP)},
    {SWIG_LUA_CONSTTAB_INT("BT_P2P_FLAGS_CFM", BT_P2P_FLAGS_CFM)},
    {SWIG_LUA_CONSTTAB_INT("BT_SIMPLE_DYNAMICS_WORLD", BT_SIMPLE_DYNAMICS_WORLD)},
    {SWIG_LUA_CONSTTAB_INT("BT_DISCRETE_DYNAMICS_WORLD", BT_DISCRETE_DYNAMICS_WORLD)},
    {SWIG_LUA_CONSTTAB_INT("BT_CONTINUOUS_DYNAMICS_WORLD", BT_CONTINUOUS_DYNAMICS_WORLD)},
    {SWIG_LUA_CONSTTAB_INT("BT_SOFT_RIGID_DYNAMICS_WORLD", BT_SOFT_RIGID_DYNAMICS_WORLD)},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_btManifoldResultTo_p_btDiscreteCollisionDetectorInterface__Result(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btDiscreteCollisionDetectorInterface::Result *)  ((btManifoldResult *) x));
}
static void *_p_btStorageResultTo_p_btDiscreteCollisionDetectorInterface__Result(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btDiscreteCollisionDetectorInterface::Result *)  ((btStorageResult *) x));
}
static void *_p_btPointCollectorTo_p_btDiscreteCollisionDetectorInterface__Result(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btDiscreteCollisionDetectorInterface::Result *)  ((btPointCollector *) x));
}
static void *_p_btContactConstraintTo_p_btTypedConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTypedConstraint *)  ((btContactConstraint *) x));
}
static void *_p_btGeneric6DofConstraintTo_p_btTypedConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTypedConstraint *)  ((btGeneric6DofConstraint *) x));
}
static void *_p_btHingeConstraintTo_p_btTypedConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTypedConstraint *)  ((btHingeConstraint *) x));
}
static void *_p_btPoint2PointConstraintTo_p_btTypedConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTypedConstraint *)  ((btPoint2PointConstraint *) x));
}
static void *_p_btRaycastVehicleTo_p_btTypedConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTypedConstraint *)  ((btRaycastVehicle *) x));
}
static void *_p_p_btContactConstraintTo_p_p_btTypedConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTypedConstraint **)  ((btContactConstraint **) x));
}
static void *_p_p_btGeneric6DofConstraintTo_p_p_btTypedConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTypedConstraint **)  ((btGeneric6DofConstraint **) x));
}
static void *_p_p_btHingeConstraintTo_p_p_btTypedConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTypedConstraint **)  ((btHingeConstraint **) x));
}
static void *_p_p_btPoint2PointConstraintTo_p_p_btTypedConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTypedConstraint **)  ((btPoint2PointConstraint **) x));
}
static void *_p_p_btRaycastVehicleTo_p_p_btTypedConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTypedConstraint **)  ((btRaycastVehicle **) x));
}
static void *_p_btCylinderShapeXTo_p_btCylinderShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCylinderShape *)  ((btCylinderShapeX *) x));
}
static void *_p_btCylinderShapeZTo_p_btCylinderShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCylinderShape *)  ((btCylinderShapeZ *) x));
}
static void *_p_btCompoundCollisionAlgorithmTo_p_btActivatingCollisionAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActivatingCollisionAlgorithm *)  ((btCompoundCollisionAlgorithm *) x));
}
static void *_p_btConvexConcaveCollisionAlgorithmTo_p_btActivatingCollisionAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActivatingCollisionAlgorithm *)  ((btConvexConcaveCollisionAlgorithm *) x));
}
static void *_p_btConvexConvexAlgorithmTo_p_btActivatingCollisionAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActivatingCollisionAlgorithm *)  ((btConvexConvexAlgorithm *) x));
}
static void *_p_btSphereBoxCollisionAlgorithmTo_p_btActivatingCollisionAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActivatingCollisionAlgorithm *)  ((btSphereBoxCollisionAlgorithm *) x));
}
static void *_p_btSphereSphereCollisionAlgorithmTo_p_btActivatingCollisionAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActivatingCollisionAlgorithm *)  ((btSphereSphereCollisionAlgorithm *) x));
}
static void *_p_btSphereTriangleCollisionAlgorithmTo_p_btActivatingCollisionAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActivatingCollisionAlgorithm *)  ((btSphereTriangleCollisionAlgorithm *) x));
}
static void *_p_btActivatingCollisionAlgorithmTo_p_btCollisionAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionAlgorithm *)  ((btActivatingCollisionAlgorithm *) x));
}
static void *_p_btCompoundCollisionAlgorithmTo_p_btCollisionAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionAlgorithm *) (btActivatingCollisionAlgorithm *) ((btCompoundCollisionAlgorithm *) x));
}
static void *_p_btConvexConcaveCollisionAlgorithmTo_p_btCollisionAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionAlgorithm *) (btActivatingCollisionAlgorithm *) ((btConvexConcaveCollisionAlgorithm *) x));
}
static void *_p_btConvexConvexAlgorithmTo_p_btCollisionAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionAlgorithm *) (btActivatingCollisionAlgorithm *) ((btConvexConvexAlgorithm *) x));
}
static void *_p_btEmptyAlgorithmTo_p_btCollisionAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionAlgorithm *)  ((btEmptyAlgorithm *) x));
}
static void *_p_btSphereBoxCollisionAlgorithmTo_p_btCollisionAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionAlgorithm *) (btActivatingCollisionAlgorithm *) ((btSphereBoxCollisionAlgorithm *) x));
}
static void *_p_btSphereSphereCollisionAlgorithmTo_p_btCollisionAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionAlgorithm *) (btActivatingCollisionAlgorithm *) ((btSphereSphereCollisionAlgorithm *) x));
}
static void *_p_btSphereTriangleCollisionAlgorithmTo_p_btCollisionAlgorithm(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionAlgorithm *) (btActivatingCollisionAlgorithm *) ((btSphereTriangleCollisionAlgorithm *) x));
}
static void *_p_btHashedOverlappingPairCacheTo_p_btOverlappingPairCache(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btOverlappingPairCache *)  ((btHashedOverlappingPairCache *) x));
}
static void *_p_btSortedOverlappingPairCacheTo_p_btOverlappingPairCache(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btOverlappingPairCache *)  ((btSortedOverlappingPairCache *) x));
}
static void *_p_btNullPairCacheTo_p_btOverlappingPairCache(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btOverlappingPairCache *)  ((btNullPairCache *) x));
}
static void *_p_btRigidBodyTo_p_btCollisionObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionObject *)  ((btRigidBody *) x));
}
static void *_p_btTypedConstraintTo_p_btTypedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTypedObject *)  ((btTypedConstraint *) x));
}
static void *_p_btContactConstraintTo_p_btTypedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTypedObject *) (btTypedConstraint *) ((btContactConstraint *) x));
}
static void *_p_btGeneric6DofConstraintTo_p_btTypedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTypedObject *) (btTypedConstraint *) ((btGeneric6DofConstraint *) x));
}
static void *_p_btHingeConstraintTo_p_btTypedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTypedObject *) (btTypedConstraint *) ((btHingeConstraint *) x));
}
static void *_p_btPoint2PointConstraintTo_p_btTypedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTypedObject *) (btTypedConstraint *) ((btPoint2PointConstraint *) x));
}
static void *_p_btPersistentManifoldTo_p_btTypedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTypedObject *)  ((btPersistentManifold *) x));
}
static void *_p_btRaycastVehicleTo_p_btTypedObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTypedObject *) (btTypedConstraint *) ((btRaycastVehicle *) x));
}
static void *_p_p_btRigidBodyTo_p_p_btCollisionObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionObject **)  ((btRigidBody **) x));
}
static void *_p_btCollisionDispatcherTo_p_btDispatcher(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btDispatcher *)  ((btCollisionDispatcher *) x));
}
static void *_p_btCompoundShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *)  ((btCompoundShape *) x));
}
static void *_p_btCapsuleShapeZTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btCapsuleShape *) ((btCapsuleShapeZ *) x));
}
static void *_p_btConeShapeZTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btConeShape *) ((btConeShapeZ *) x));
}
static void *_p_btConeShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *) ((btConeShape *) x));
}
static void *_p_btCapsuleShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *) ((btCapsuleShape *) x));
}
static void *_p_btConcaveShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *)  ((btConcaveShape *) x));
}
static void *_p_btCylinderShapeXTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btCylinderShape *) ((btCylinderShapeX *) x));
}
static void *_p_btMultiSphereShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btConvexInternalAabbCachingShape *) ((btMultiSphereShape *) x));
}
static void *_p_btSphereShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *) ((btSphereShape *) x));
}
static void *_p_btTriangleShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btPolyhedralConvexShape *) ((btTriangleShape *) x));
}
static void *_p_btConvexInternalShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *) ((btConvexInternalShape *) x));
}
static void *_p_btCylinderShapeZTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btCylinderShape *) ((btCylinderShapeZ *) x));
}
static void *_p_btMinkowskiSumShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *) ((btMinkowskiSumShape *) x));
}
static void *_p_btPolyhedralConvexAabbCachingShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btPolyhedralConvexShape *) ((btPolyhedralConvexAabbCachingShape *) x));
}
static void *_p_btConvexInternalAabbCachingShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *) ((btConvexInternalAabbCachingShape *) x));
}
static void *_p_btHeightfieldTerrainShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConcaveShape *) ((btHeightfieldTerrainShape *) x));
}
static void *_p_btEmptyShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConcaveShape *) ((btEmptyShape *) x));
}
static void *_p_btBU_Simplex1to4To_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btPolyhedralConvexShape *)(btPolyhedralConvexAabbCachingShape *) ((btBU_Simplex1to4 *) x));
}
static void *_p_btBoxShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btPolyhedralConvexShape *) ((btBoxShape *) x));
}
static void *_p_btPolyhedralConvexShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *) ((btPolyhedralConvexShape *) x));
}
static void *_p_btConvexShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *)  ((btConvexShape *) x));
}
static void *_p_btBvhTriangleMeshShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConcaveShape *)(btTriangleMeshShape *) ((btBvhTriangleMeshShape *) x));
}
static void *_p_btTriangleMeshShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConcaveShape *) ((btTriangleMeshShape *) x));
}
static void *_p_btCapsuleShapeXTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btCapsuleShape *) ((btCapsuleShapeX *) x));
}
static void *_p_btConeShapeXTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btConeShape *) ((btConeShapeX *) x));
}
static void *_p_btCylinderShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *) ((btCylinderShape *) x));
}
static void *_p_btConvexHullShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btPolyhedralConvexShape *)(btPolyhedralConvexAabbCachingShape *) ((btConvexHullShape *) x));
}
static void *_p_btContactSolverInfoTo_p_btContactSolverInfoData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btContactSolverInfoData *)  ((btContactSolverInfo *) x));
}
static void *_p_btBroadphaseRayCallbackTo_p_btBroadphaseAabbCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btBroadphaseAabbCallback *)  ((btBroadphaseRayCallback *) x));
}
static void *_p_btTriangleBufferTo_p_btTriangleCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTriangleCallback *)  ((btTriangleBuffer *) x));
}
static void *_p_btTriangleRaycastCallbackTo_p_btTriangleCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTriangleCallback *)  ((btTriangleRaycastCallback *) x));
}
static void *_p_btTriangleConvexcastCallbackTo_p_btTriangleCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTriangleCallback *)  ((btTriangleConvexcastCallback *) x));
}
static void *_p_btConvexTriangleCallbackTo_p_btTriangleCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTriangleCallback *)  ((btConvexTriangleCallback *) x));
}
static void *_p_btOverlappingPairCacheTo_p_btOverlappingPairCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btOverlappingPairCallback *)  ((btOverlappingPairCache *) x));
}
static void *_p_btHashedOverlappingPairCacheTo_p_btOverlappingPairCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btOverlappingPairCallback *) (btOverlappingPairCache *) ((btHashedOverlappingPairCache *) x));
}
static void *_p_btSortedOverlappingPairCacheTo_p_btOverlappingPairCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btOverlappingPairCallback *) (btOverlappingPairCache *) ((btSortedOverlappingPairCache *) x));
}
static void *_p_btNullPairCacheTo_p_btOverlappingPairCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btOverlappingPairCallback *) (btOverlappingPairCache *) ((btNullPairCache *) x));
}
static void *_p_btConeShapeZTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btConeShape *) ((btConeShapeZ *) x));
}
static void *_p_btCapsuleShapeZTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btCapsuleShape *) ((btCapsuleShapeZ *) x));
}
static void *_p_btCylinderShapeXTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btCylinderShape *) ((btCylinderShapeX *) x));
}
static void *_p_btConeShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *) ((btConeShape *) x));
}
static void *_p_btCapsuleShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *) ((btCapsuleShape *) x));
}
static void *_p_btMultiSphereShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btConvexInternalAabbCachingShape *) ((btMultiSphereShape *) x));
}
static void *_p_btSphereShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *) ((btSphereShape *) x));
}
static void *_p_btTriangleShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btPolyhedralConvexShape *) ((btTriangleShape *) x));
}
static void *_p_btConvexInternalShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *)  ((btConvexInternalShape *) x));
}
static void *_p_btCylinderShapeZTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btCylinderShape *) ((btCylinderShapeZ *) x));
}
static void *_p_btMinkowskiSumShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *) ((btMinkowskiSumShape *) x));
}
static void *_p_btPolyhedralConvexAabbCachingShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btPolyhedralConvexShape *) ((btPolyhedralConvexAabbCachingShape *) x));
}
static void *_p_btConvexInternalAabbCachingShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *) ((btConvexInternalAabbCachingShape *) x));
}
static void *_p_btBU_Simplex1to4To_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btPolyhedralConvexShape *)(btPolyhedralConvexAabbCachingShape *) ((btBU_Simplex1to4 *) x));
}
static void *_p_btBoxShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btPolyhedralConvexShape *) ((btBoxShape *) x));
}
static void *_p_btPolyhedralConvexShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *) ((btPolyhedralConvexShape *) x));
}
static void *_p_btCylinderShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *) ((btCylinderShape *) x));
}
static void *_p_btConeShapeXTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btConeShape *) ((btConeShapeX *) x));
}
static void *_p_btCapsuleShapeXTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btCapsuleShape *) ((btCapsuleShapeX *) x));
}
static void *_p_btConvexHullShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btPolyhedralConvexShape *)(btPolyhedralConvexAabbCachingShape *) ((btConvexHullShape *) x));
}
static void *_p_btConvexHullShapeTo_p_btPolyhedralConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btPolyhedralConvexShape *) (btPolyhedralConvexAabbCachingShape *) ((btConvexHullShape *) x));
}
static void *_p_btTriangleShapeTo_p_btPolyhedralConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btPolyhedralConvexShape *)  ((btTriangleShape *) x));
}
static void *_p_btBU_Simplex1to4To_p_btPolyhedralConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btPolyhedralConvexShape *) (btPolyhedralConvexAabbCachingShape *) ((btBU_Simplex1to4 *) x));
}
static void *_p_btBoxShapeTo_p_btPolyhedralConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btPolyhedralConvexShape *)  ((btBoxShape *) x));
}
static void *_p_btPolyhedralConvexAabbCachingShapeTo_p_btPolyhedralConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btPolyhedralConvexShape *)  ((btPolyhedralConvexAabbCachingShape *) x));
}
static void *_p_btDynamicsWorldTo_p_btCollisionWorld(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionWorld *)  ((btDynamicsWorld *) x));
}
static void *_p_btDiscreteDynamicsWorldTo_p_btCollisionWorld(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionWorld *) (btDynamicsWorld *) ((btDiscreteDynamicsWorld *) x));
}
static void *_p_btSimpleDynamicsWorldTo_p_btCollisionWorld(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionWorld *) (btDynamicsWorld *) ((btSimpleDynamicsWorld *) x));
}
static void *_p_btDefaultMotionStateTo_p_btMotionState(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btMotionState *)  ((btDefaultMotionState *) x));
}
static void *_p_btQuaternionTo_p_btQuadWord(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btQuadWord *)  ((btQuaternion *) x));
}
static void *_p_btConeShapeZTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *) (btConeShape *) ((btConeShapeZ *) x));
}
static void *_p_btCapsuleShapeZTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *) (btCapsuleShape *) ((btCapsuleShapeZ *) x));
}
static void *_p_btCylinderShapeXTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *) (btCylinderShape *) ((btCylinderShapeX *) x));
}
static void *_p_btConeShapeTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *)  ((btConeShape *) x));
}
static void *_p_btCapsuleShapeTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *)  ((btCapsuleShape *) x));
}
static void *_p_btMultiSphereShapeTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *) (btConvexInternalAabbCachingShape *) ((btMultiSphereShape *) x));
}
static void *_p_btSphereShapeTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *)  ((btSphereShape *) x));
}
static void *_p_btTriangleShapeTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *) (btPolyhedralConvexShape *) ((btTriangleShape *) x));
}
static void *_p_btCylinderShapeZTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *) (btCylinderShape *) ((btCylinderShapeZ *) x));
}
static void *_p_btMinkowskiSumShapeTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *)  ((btMinkowskiSumShape *) x));
}
static void *_p_btPolyhedralConvexAabbCachingShapeTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *) (btPolyhedralConvexShape *) ((btPolyhedralConvexAabbCachingShape *) x));
}
static void *_p_btConvexInternalAabbCachingShapeTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *)  ((btConvexInternalAabbCachingShape *) x));
}
static void *_p_btBU_Simplex1to4To_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *) (btPolyhedralConvexShape *)(btPolyhedralConvexAabbCachingShape *) ((btBU_Simplex1to4 *) x));
}
static void *_p_btBoxShapeTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *) (btPolyhedralConvexShape *) ((btBoxShape *) x));
}
static void *_p_btPolyhedralConvexShapeTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *)  ((btPolyhedralConvexShape *) x));
}
static void *_p_btCylinderShapeTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *)  ((btCylinderShape *) x));
}
static void *_p_btConeShapeXTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *) (btConeShape *) ((btConeShapeX *) x));
}
static void *_p_btCapsuleShapeXTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *) (btCapsuleShape *) ((btCapsuleShapeX *) x));
}
static void *_p_btConvexHullShapeTo_p_btConvexInternalShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalShape *) (btPolyhedralConvexShape *)(btPolyhedralConvexAabbCachingShape *) ((btConvexHullShape *) x));
}
static void *_p_btDiscreteDynamicsWorldTo_p_btDynamicsWorld(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btDynamicsWorld *)  ((btDiscreteDynamicsWorld *) x));
}
static void *_p_btSimpleDynamicsWorldTo_p_btDynamicsWorld(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btDynamicsWorld *)  ((btSimpleDynamicsWorld *) x));
}
static void *_p_btDefaultSerializerTo_p_btSerializer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btSerializer *)  ((btDefaultSerializer *) x));
}
static void *_p_SphereTriangleDetectorTo_p_btDiscreteCollisionDetectorInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btDiscreteCollisionDetectorInterface *)  ((SphereTriangleDetector *) x));
}
static void *_p_btTriangleIndexVertexArrayTo_p_btStridingMeshInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btStridingMeshInterface *)  ((btTriangleIndexVertexArray *) x));
}
static void *_p_btSimpleBroadphaseTo_p_btBroadphaseInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btBroadphaseInterface *)  ((btSimpleBroadphase *) x));
}
static void *_p_btMultiSphereShapeTo_p_btConvexInternalAabbCachingShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexInternalAabbCachingShape *)  ((btMultiSphereShape *) x));
}
static void *_p_btConvexHullShapeTo_p_btPolyhedralConvexAabbCachingShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btPolyhedralConvexAabbCachingShape *)  ((btConvexHullShape *) x));
}
static void *_p_btBU_Simplex1to4To_p_btPolyhedralConvexAabbCachingShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btPolyhedralConvexAabbCachingShape *)  ((btBU_Simplex1to4 *) x));
}
static void *_p_btSimpleBroadphaseProxyTo_p_btBroadphaseProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btBroadphaseProxy *)  ((btSimpleBroadphaseProxy *) x));
}
static void *_p_btConeShapeXTo_p_btConeShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConeShape *)  ((btConeShapeX *) x));
}
static void *_p_btConeShapeZTo_p_btConeShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConeShape *)  ((btConeShapeZ *) x));
}
static void *_p_btCapsuleShapeXTo_p_btCapsuleShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCapsuleShape *)  ((btCapsuleShapeX *) x));
}
static void *_p_btCapsuleShapeZTo_p_btCapsuleShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCapsuleShape *)  ((btCapsuleShapeZ *) x));
}
static void *_p_btHeightfieldTerrainShapeTo_p_btConcaveShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConcaveShape *)  ((btHeightfieldTerrainShape *) x));
}
static void *_p_btTriangleMeshShapeTo_p_btConcaveShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConcaveShape *)  ((btTriangleMeshShape *) x));
}
static void *_p_btBvhTriangleMeshShapeTo_p_btConcaveShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConcaveShape *) (btTriangleMeshShape *) ((btBvhTriangleMeshShape *) x));
}
static void *_p_btEmptyShapeTo_p_btConcaveShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConcaveShape *)  ((btEmptyShape *) x));
}
static void *_p_btSequentialImpulseConstraintSolverTo_p_btConstraintSolver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConstraintSolver *)  ((btSequentialImpulseConstraintSolver *) x));
}
static void *_p_btGjkEpaPenetrationDepthSolverTo_p_btConvexPenetrationDepthSolver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexPenetrationDepthSolver *)  ((btGjkEpaPenetrationDepthSolver *) x));
}
static void *_p_btMinkowskiPenetrationDepthSolverTo_p_btConvexPenetrationDepthSolver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexPenetrationDepthSolver *)  ((btMinkowskiPenetrationDepthSolver *) x));
}
static void *_p_btBvhTriangleMeshShapeTo_p_btTriangleMeshShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btTriangleMeshShape *)  ((btBvhTriangleMeshShape *) x));
}
static void *_p_btVector4To_p_btVector3(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btVector3 *)  ((btVector4 *) x));
}
static swig_type_info _swigt__p_CProfileIterator = {"_p_CProfileIterator", "CProfileIterator *", 0, 0, (void*)&_wrap_class_CProfileIterator, 0};
static swig_type_info _swigt__p_CProfileManager = {"_p_CProfileManager", "CProfileManager *", 0, 0, (void*)&_wrap_class_CProfileManager, 0};
static swig_type_info _swigt__p_CProfileNode = {"_p_CProfileNode", "CProfileNode *", 0, 0, (void*)&_wrap_class_CProfileNode, 0};
static swig_type_info _swigt__p_CProfileSample = {"_p_CProfileSample", "CProfileSample *", 0, 0, (void*)&_wrap_class_CProfileSample, 0};
static swig_type_info _swigt__p_PHY_ScalarType = {"_p_PHY_ScalarType", "enum PHY_ScalarType *|PHY_ScalarType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SphereTriangleDetector = {"_p_SphereTriangleDetector", "SphereTriangleDetector *", 0, 0, (void*)&_wrap_class_SphereTriangleDetector, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btActionInterface = {"_p_btActionInterface", "btActionInterface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btActivatingCollisionAlgorithm = {"_p_btActivatingCollisionAlgorithm", "btActivatingCollisionAlgorithm *", 0, 0, (void*)&_wrap_class_btActivatingCollisionAlgorithm, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btBroadphasePair_t = {"_p_btAlignedObjectArrayT_btBroadphasePair_t", "btBroadphasePairArray *|btAlignedObjectArray< btBroadphasePair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btBvhSubtreeInfo_t = {"_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t", "BvhSubtreeInfoArray *|btAlignedObjectArray< btBvhSubtreeInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btCollisionObject_p_t = {"_p_btAlignedObjectArrayT_btCollisionObject_p_t", "btCollisionObjectArray *|btAlignedObjectArray< btCollisionObject * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btIndexedMesh_t = {"_p_btAlignedObjectArrayT_btIndexedMesh_t", "IndexedMeshArray *|btAlignedObjectArray< btIndexedMesh > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btOptimizedBvhNode_t = {"_p_btAlignedObjectArrayT_btOptimizedBvhNode_t", "NodeArray *|btAlignedObjectArray< btOptimizedBvhNode > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btPersistentManifold_p_t = {"_p_btAlignedObjectArrayT_btPersistentManifold_p_t", "btManifoldArray *|btAlignedObjectArray< btPersistentManifold * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btQuantizedBvhNode_t = {"_p_btAlignedObjectArrayT_btQuantizedBvhNode_t", "QuantizedNodeArray *|btAlignedObjectArray< btQuantizedBvhNode > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btSolverConstraint_t = {"_p_btAlignedObjectArrayT_btSolverConstraint_t", "btConstraintArray *|btAlignedObjectArray< btSolverConstraint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btVector3_t = {"_p_btAlignedObjectArrayT_btVector3_t", "btAlignedObjectArray< btVector3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btWheelInfo_t = {"_p_btAlignedObjectArrayT_btWheelInfo_t", "btAlignedObjectArray< btWheelInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAngularLimit = {"_p_btAngularLimit", "btAngularLimit *", 0, 0, (void*)&_wrap_class_btAngularLimit, 0};
static swig_type_info _swigt__p_btBU_Simplex1to4 = {"_p_btBU_Simplex1to4", "btBU_Simplex1to4 *", 0, 0, (void*)&_wrap_class_btBU_Simplex1to4, 0};
static swig_type_info _swigt__p_btBlock = {"_p_btBlock", "btBlock *", 0, 0, (void*)&_wrap_class_btBlock, 0};
static swig_type_info _swigt__p_btBoxShape = {"_p_btBoxShape", "btBoxShape *", 0, 0, (void*)&_wrap_class_btBoxShape, 0};
static swig_type_info _swigt__p_btBroadphaseAabbCallback = {"_p_btBroadphaseAabbCallback", "btBroadphaseAabbCallback *", 0, 0, (void*)&_wrap_class_btBroadphaseAabbCallback, 0};
static swig_type_info _swigt__p_btBroadphaseInterface = {"_p_btBroadphaseInterface", "btBroadphaseInterface *", 0, 0, (void*)&_wrap_class_btBroadphaseInterface, 0};
static swig_type_info _swigt__p_btBroadphasePair = {"_p_btBroadphasePair", "btBroadphasePair *", 0, 0, (void*)&_wrap_class_btBroadphasePair, 0};
static swig_type_info _swigt__p_btBroadphasePairSortPredicate = {"_p_btBroadphasePairSortPredicate", "btBroadphasePairSortPredicate *", 0, 0, (void*)&_wrap_class_btBroadphasePairSortPredicate, 0};
static swig_type_info _swigt__p_btBroadphaseProxy = {"_p_btBroadphaseProxy", "btBroadphaseProxy *", 0, 0, (void*)&_wrap_class_btBroadphaseProxy, 0};
static swig_type_info _swigt__p_btBroadphaseRayCallback = {"_p_btBroadphaseRayCallback", "btBroadphaseRayCallback *", 0, 0, (void*)&_wrap_class_btBroadphaseRayCallback, 0};
static swig_type_info _swigt__p_btBvhSubtreeInfo = {"_p_btBvhSubtreeInfo", "btBvhSubtreeInfo *", 0, 0, (void*)&_wrap_class_btBvhSubtreeInfo, 0};
static swig_type_info _swigt__p_btBvhSubtreeInfoData = {"_p_btBvhSubtreeInfoData", "btBvhSubtreeInfoData *", 0, 0, (void*)&_wrap_class_btBvhSubtreeInfoData, 0};
static swig_type_info _swigt__p_btBvhTriangleMeshShape = {"_p_btBvhTriangleMeshShape", "btBvhTriangleMeshShape *", 0, 0, (void*)&_wrap_class_btBvhTriangleMeshShape, 0};
static swig_type_info _swigt__p_btCapsuleShape = {"_p_btCapsuleShape", "btCapsuleShape *", 0, 0, (void*)&_wrap_class_btCapsuleShape, 0};
static swig_type_info _swigt__p_btCapsuleShapeData = {"_p_btCapsuleShapeData", "btCapsuleShapeData *", 0, 0, (void*)&_wrap_class_btCapsuleShapeData, 0};
static swig_type_info _swigt__p_btCapsuleShapeX = {"_p_btCapsuleShapeX", "btCapsuleShapeX *", 0, 0, (void*)&_wrap_class_btCapsuleShapeX, 0};
static swig_type_info _swigt__p_btCapsuleShapeZ = {"_p_btCapsuleShapeZ", "btCapsuleShapeZ *", 0, 0, (void*)&_wrap_class_btCapsuleShapeZ, 0};
static swig_type_info _swigt__p_btCharIndexTripletData = {"_p_btCharIndexTripletData", "btCharIndexTripletData *", 0, 0, (void*)&_wrap_class_btCharIndexTripletData, 0};
static swig_type_info _swigt__p_btChunk = {"_p_btChunk", "btChunk *", 0, 0, (void*)&_wrap_class_btChunk, 0};
static swig_type_info _swigt__p_btClock = {"_p_btClock", "btClock *", 0, 0, (void*)&_wrap_class_btClock, 0};
static swig_type_info _swigt__p_btCollisionAlgorithm = {"_p_btCollisionAlgorithm", "btCollisionAlgorithm *", 0, 0, (void*)&_wrap_class_btCollisionAlgorithm, 0};
static swig_type_info _swigt__p_btCollisionAlgorithmConstructionInfo = {"_p_btCollisionAlgorithmConstructionInfo", "btCollisionAlgorithmConstructionInfo *", 0, 0, (void*)&_wrap_class_btCollisionAlgorithmConstructionInfo, 0};
static swig_type_info _swigt__p_btCollisionAlgorithmCreateFunc = {"_p_btCollisionAlgorithmCreateFunc", "btCollisionAlgorithmCreateFunc *", 0, 0, (void*)&_wrap_class_btCollisionAlgorithmCreateFunc, 0};
static swig_type_info _swigt__p_btCollisionConfiguration = {"_p_btCollisionConfiguration", "btCollisionConfiguration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btCollisionDispatcher = {"_p_btCollisionDispatcher", "btCollisionDispatcher *", 0, 0, (void*)&_wrap_class_btCollisionDispatcher, 0};
static swig_type_info _swigt__p_btCollisionObject = {"_p_btCollisionObject", "btCollisionObject *", 0, 0, (void*)&_wrap_class_btCollisionObject, 0};
static swig_type_info _swigt__p_btCollisionObjectDoubleData = {"_p_btCollisionObjectDoubleData", "btCollisionObjectDoubleData *", 0, 0, (void*)&_wrap_class_btCollisionObjectDoubleData, 0};
static swig_type_info _swigt__p_btCollisionObjectFloatData = {"_p_btCollisionObjectFloatData", "btCollisionObjectFloatData *", 0, 0, (void*)&_wrap_class_btCollisionObjectFloatData, 0};
static swig_type_info _swigt__p_btCollisionObjectWrapper = {"_p_btCollisionObjectWrapper", "btCollisionObjectWrapper *", 0, 0, (void*)&_wrap_class_btCollisionObjectWrapper, 0};
static swig_type_info _swigt__p_btCollisionShape = {"_p_btCollisionShape", "btCollisionShape *", 0, 0, (void*)&_wrap_class_btCollisionShape, 0};
static swig_type_info _swigt__p_btCollisionShapeData = {"_p_btCollisionShapeData", "btCollisionShapeData *", 0, 0, (void*)&_wrap_class_btCollisionShapeData, 0};
static swig_type_info _swigt__p_btCollisionWorld = {"_p_btCollisionWorld", "btCollisionWorld *", 0, 0, (void*)&_wrap_class_btCollisionWorld, 0};
static swig_type_info _swigt__p_btCompoundCollisionAlgorithm = {"_p_btCompoundCollisionAlgorithm", "btCompoundCollisionAlgorithm *", 0, 0, (void*)&_wrap_class_btCompoundCollisionAlgorithm, 0};
static swig_type_info _swigt__p_btCompoundShape = {"_p_btCompoundShape", "btCompoundShape *", 0, 0, (void*)&_wrap_class_btCompoundShape, 0};
static swig_type_info _swigt__p_btCompoundShapeChild = {"_p_btCompoundShapeChild", "btCompoundShapeChild *", 0, 0, (void*)&_wrap_class_btCompoundShapeChild, 0};
static swig_type_info _swigt__p_btCompoundShapeChildData = {"_p_btCompoundShapeChildData", "btCompoundShapeChildData *", 0, 0, (void*)&_wrap_class_btCompoundShapeChildData, 0};
static swig_type_info _swigt__p_btCompoundShapeData = {"_p_btCompoundShapeData", "btCompoundShapeData *", 0, 0, (void*)&_wrap_class_btCompoundShapeData, 0};
static swig_type_info _swigt__p_btConcaveShape = {"_p_btConcaveShape", "btConcaveShape *", 0, 0, (void*)&_wrap_class_btConcaveShape, 0};
static swig_type_info _swigt__p_btConeShape = {"_p_btConeShape", "btConeShape *", 0, 0, (void*)&_wrap_class_btConeShape, 0};
static swig_type_info _swigt__p_btConeShapeX = {"_p_btConeShapeX", "btConeShapeX *", 0, 0, (void*)&_wrap_class_btConeShapeX, 0};
static swig_type_info _swigt__p_btConeShapeZ = {"_p_btConeShapeZ", "btConeShapeZ *", 0, 0, (void*)&_wrap_class_btConeShapeZ, 0};
static swig_type_info _swigt__p_btConstraintRow = {"_p_btConstraintRow", "btConstraintRow *|PfxConstraintRow *", 0, 0, (void*)&_wrap_class_btConstraintRow, 0};
static swig_type_info _swigt__p_btConstraintSetting = {"_p_btConstraintSetting", "btConstraintSetting *", 0, 0, (void*)&_wrap_class_btConstraintSetting, 0};
static swig_type_info _swigt__p_btConstraintSolver = {"_p_btConstraintSolver", "btConstraintSolver *", 0, 0, (void*)&_wrap_class_btConstraintSolver, 0};
static swig_type_info _swigt__p_btContactConstraint = {"_p_btContactConstraint", "btContactConstraint *", 0, 0, (void*)&_wrap_class_btContactConstraint, 0};
static swig_type_info _swigt__p_btContactSolverInfo = {"_p_btContactSolverInfo", "btContactSolverInfo *", 0, 0, (void*)&_wrap_class_btContactSolverInfo, 0};
static swig_type_info _swigt__p_btContactSolverInfoData = {"_p_btContactSolverInfoData", "btContactSolverInfoData *", 0, 0, (void*)&_wrap_class_btContactSolverInfoData, 0};
static swig_type_info _swigt__p_btContactSolverInfoDoubleData = {"_p_btContactSolverInfoDoubleData", "btContactSolverInfoDoubleData *", 0, 0, (void*)&_wrap_class_btContactSolverInfoDoubleData, 0};
static swig_type_info _swigt__p_btContactSolverInfoFloatData = {"_p_btContactSolverInfoFloatData", "btContactSolverInfoFloatData *", 0, 0, (void*)&_wrap_class_btContactSolverInfoFloatData, 0};
static swig_type_info _swigt__p_btConvexConcaveCollisionAlgorithm = {"_p_btConvexConcaveCollisionAlgorithm", "btConvexConcaveCollisionAlgorithm *", 0, 0, (void*)&_wrap_class_btConvexConcaveCollisionAlgorithm, 0};
static swig_type_info _swigt__p_btConvexConvexAlgorithm = {"_p_btConvexConvexAlgorithm", "btConvexConvexAlgorithm *", 0, 0, (void*)&_wrap_class_btConvexConvexAlgorithm, 0};
static swig_type_info _swigt__p_btConvexHullShape = {"_p_btConvexHullShape", "btConvexHullShape *", 0, 0, (void*)&_wrap_class_btConvexHullShape, 0};
static swig_type_info _swigt__p_btConvexHullShapeData = {"_p_btConvexHullShapeData", "btConvexHullShapeData *", 0, 0, (void*)&_wrap_class_btConvexHullShapeData, 0};
static swig_type_info _swigt__p_btConvexInternalAabbCachingShape = {"_p_btConvexInternalAabbCachingShape", "btConvexInternalAabbCachingShape *", 0, 0, (void*)&_wrap_class_btConvexInternalAabbCachingShape, 0};
static swig_type_info _swigt__p_btConvexInternalShape = {"_p_btConvexInternalShape", "btConvexInternalShape *", 0, 0, (void*)&_wrap_class_btConvexInternalShape, 0};
static swig_type_info _swigt__p_btConvexInternalShapeData = {"_p_btConvexInternalShapeData", "btConvexInternalShapeData *", 0, 0, (void*)&_wrap_class_btConvexInternalShapeData, 0};
static swig_type_info _swigt__p_btConvexPenetrationDepthSolver = {"_p_btConvexPenetrationDepthSolver", "btConvexPenetrationDepthSolver *", 0, 0, (void*)&_wrap_class_btConvexPenetrationDepthSolver, 0};
static swig_type_info _swigt__p_btConvexPolyhedron = {"_p_btConvexPolyhedron", "btConvexPolyhedron *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btConvexSeparatingDistanceUtil = {"_p_btConvexSeparatingDistanceUtil", "btConvexSeparatingDistanceUtil *", 0, 0, (void*)&_wrap_class_btConvexSeparatingDistanceUtil, 0};
static swig_type_info _swigt__p_btConvexShape = {"_p_btConvexShape", "btConvexShape *", 0, 0, (void*)&_wrap_class_btConvexShape, 0};
static swig_type_info _swigt__p_btConvexTriangleCallback = {"_p_btConvexTriangleCallback", "btConvexTriangleCallback *", 0, 0, (void*)&_wrap_class_btConvexTriangleCallback, 0};
static swig_type_info _swigt__p_btCylinderShape = {"_p_btCylinderShape", "btCylinderShape *", 0, 0, (void*)&_wrap_class_btCylinderShape, 0};
static swig_type_info _swigt__p_btCylinderShapeData = {"_p_btCylinderShapeData", "btCylinderShapeData *", 0, 0, (void*)&_wrap_class_btCylinderShapeData, 0};
static swig_type_info _swigt__p_btCylinderShapeX = {"_p_btCylinderShapeX", "btCylinderShapeX *", 0, 0, (void*)&_wrap_class_btCylinderShapeX, 0};
static swig_type_info _swigt__p_btCylinderShapeZ = {"_p_btCylinderShapeZ", "btCylinderShapeZ *", 0, 0, (void*)&_wrap_class_btCylinderShapeZ, 0};
static swig_type_info _swigt__p_btDbvtNode = {"_p_btDbvtNode", "btDbvtNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btDefaultMotionState = {"_p_btDefaultMotionState", "btDefaultMotionState *", 0, 0, (void*)&_wrap_class_btDefaultMotionState, 0};
static swig_type_info _swigt__p_btDefaultSerializer = {"_p_btDefaultSerializer", "btDefaultSerializer *", 0, 0, (void*)&_wrap_class_btDefaultSerializer, 0};
static swig_type_info _swigt__p_btDefaultVehicleRaycaster = {"_p_btDefaultVehicleRaycaster", "btDefaultVehicleRaycaster *", 0, 0, (void*)&_wrap_class_btDefaultVehicleRaycaster, 0};
static swig_type_info _swigt__p_btDiscreteCollisionDetectorInterface = {"_p_btDiscreteCollisionDetectorInterface", "btDiscreteCollisionDetectorInterface *", 0, 0, (void*)&_wrap_class_btDiscreteCollisionDetectorInterface, 0};
static swig_type_info _swigt__p_btDiscreteCollisionDetectorInterface__ClosestPointInput = {"_p_btDiscreteCollisionDetectorInterface__ClosestPointInput", "btDiscreteCollisionDetectorInterface::ClosestPointInput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btDiscreteCollisionDetectorInterface__Result = {"_p_btDiscreteCollisionDetectorInterface__Result", "btDiscreteCollisionDetectorInterface::Result *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btDiscreteDynamicsWorld = {"_p_btDiscreteDynamicsWorld", "btDiscreteDynamicsWorld *", 0, 0, (void*)&_wrap_class_btDiscreteDynamicsWorld, 0};
static swig_type_info _swigt__p_btDispatcher = {"_p_btDispatcher", "btDispatcher *", 0, 0, (void*)&_wrap_class_btDispatcher, 0};
static swig_type_info _swigt__p_btDispatcherInfo = {"_p_btDispatcherInfo", "btDispatcherInfo *", 0, 0, (void*)&_wrap_class_btDispatcherInfo, 0};
static swig_type_info _swigt__p_btDynamicsWorld = {"_p_btDynamicsWorld", "btDynamicsWorld *", 0, 0, (void*)&_wrap_class_btDynamicsWorld, 0};
static swig_type_info _swigt__p_btDynamicsWorldDoubleData = {"_p_btDynamicsWorldDoubleData", "btDynamicsWorldDoubleData *", 0, 0, (void*)&_wrap_class_btDynamicsWorldDoubleData, 0};
static swig_type_info _swigt__p_btDynamicsWorldFloatData = {"_p_btDynamicsWorldFloatData", "btDynamicsWorldFloatData *", 0, 0, (void*)&_wrap_class_btDynamicsWorldFloatData, 0};
static swig_type_info _swigt__p_btElement = {"_p_btElement", "btElement *", 0, 0, (void*)&_wrap_class_btElement, 0};
static swig_type_info _swigt__p_btEmptyAlgorithm = {"_p_btEmptyAlgorithm", "btEmptyAlgorithm *", 0, 0, (void*)&_wrap_class_btEmptyAlgorithm, 0};
static swig_type_info _swigt__p_btEmptyShape = {"_p_btEmptyShape", "btEmptyShape *", 0, 0, (void*)&_wrap_class_btEmptyShape, 0};
static swig_type_info _swigt__p_btGEN_Link = {"_p_btGEN_Link", "btGEN_Link *", 0, 0, (void*)&_wrap_class_btGEN_Link, 0};
static swig_type_info _swigt__p_btGEN_List = {"_p_btGEN_List", "btGEN_List *", 0, 0, (void*)&_wrap_class_btGEN_List, 0};
static swig_type_info _swigt__p_btGeneric6DofConstraint = {"_p_btGeneric6DofConstraint", "btGeneric6DofConstraint *", 0, 0, (void*)&_wrap_class_btGeneric6DofConstraint, 0};
static swig_type_info _swigt__p_btGeneric6DofConstraintData = {"_p_btGeneric6DofConstraintData", "btGeneric6DofConstraintData *", 0, 0, (void*)&_wrap_class_btGeneric6DofConstraintData, 0};
static swig_type_info _swigt__p_btGeometryUtil = {"_p_btGeometryUtil", "btGeometryUtil *", 0, 0, (void*)&_wrap_class_btGeometryUtil, 0};
static swig_type_info _swigt__p_btGjkConvexCast = {"_p_btGjkConvexCast", "btGjkConvexCast *", 0, 0, (void*)&_wrap_class_btGjkConvexCast, 0};
static swig_type_info _swigt__p_btGjkEpaPenetrationDepthSolver = {"_p_btGjkEpaPenetrationDepthSolver", "btGjkEpaPenetrationDepthSolver *", 0, 0, (void*)&_wrap_class_btGjkEpaPenetrationDepthSolver, 0};
static swig_type_info _swigt__p_btGjkEpaSolver = {"_p_btGjkEpaSolver", "btGjkEpaSolver *", 0, 0, (void*)&_wrap_class_btGjkEpaSolver, 0};
static swig_type_info _swigt__p_btGjkPairDetector = {"_p_btGjkPairDetector", "btGjkPairDetector *", 0, 0, (void*)&_wrap_class_btGjkPairDetector, 0};
static swig_type_info _swigt__p_btHashInt = {"_p_btHashInt", "btHashInt *", 0, 0, (void*)&_wrap_class_btHashInt, 0};
static swig_type_info _swigt__p_btHashMapT_btHashInt_btTriangleInfo_t = {"_p_btHashMapT_btHashInt_btTriangleInfo_t", "btInternalTriangleInfoMap *|btHashMap< btHashInt,btTriangleInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btHashPtr = {"_p_btHashPtr", "btHashPtr *", 0, 0, (void*)&_wrap_class_btHashPtr, 0};
static swig_type_info _swigt__p_btHashString = {"_p_btHashString", "btHashString *", 0, 0, (void*)&_wrap_class_btHashString, 0};
static swig_type_info _swigt__p_btHashedOverlappingPairCache = {"_p_btHashedOverlappingPairCache", "btHashedOverlappingPairCache *", 0, 0, (void*)&_wrap_class_btHashedOverlappingPairCache, 0};
static swig_type_info _swigt__p_btHeightfieldTerrainShape = {"_p_btHeightfieldTerrainShape", "btHeightfieldTerrainShape *", 0, 0, (void*)&_wrap_class_btHeightfieldTerrainShape, 0};
static swig_type_info _swigt__p_btHingeConstraint = {"_p_btHingeConstraint", "btHingeConstraint *", 0, 0, (void*)&_wrap_class_btHingeConstraint, 0};
static swig_type_info _swigt__p_btHingeConstraintDoubleData = {"_p_btHingeConstraintDoubleData", "btHingeConstraintDoubleData *", 0, 0, (void*)&_wrap_class_btHingeConstraintDoubleData, 0};
static swig_type_info _swigt__p_btHingeConstraintFloatData = {"_p_btHingeConstraintFloatData", "btHingeConstraintFloatData *", 0, 0, (void*)&_wrap_class_btHingeConstraintFloatData, 0};
static swig_type_info _swigt__p_btIDebugDraw = {"_p_btIDebugDraw", "btIDebugDraw *", 0, 0, (void*)&_wrap_class_btIDebugDraw, 0};
static swig_type_info _swigt__p_btIndexedMesh = {"_p_btIndexedMesh", "btIndexedMesh *", 0, 0, (void*)&_wrap_class_btIndexedMesh, 0};
static swig_type_info _swigt__p_btIntIndexData = {"_p_btIntIndexData", "btIntIndexData *", 0, 0, (void*)&_wrap_class_btIntIndexData, 0};
static swig_type_info _swigt__p_btInternalTriangleIndexCallback = {"_p_btInternalTriangleIndexCallback", "btInternalTriangleIndexCallback *", 0, 0, (void*)&_wrap_class_btInternalTriangleIndexCallback, 0};
static swig_type_info _swigt__p_btJacobianEntry = {"_p_btJacobianEntry", "btJacobianEntry *", 0, 0, (void*)&_wrap_class_btJacobianEntry, 0};
static swig_type_info _swigt__p_btJointFeedback = {"_p_btJointFeedback", "btJointFeedback *", 0, 0, (void*)&_wrap_class_btJointFeedback, 0};
static swig_type_info _swigt__p_btManifoldPoint = {"_p_btManifoldPoint", "btManifoldPoint *", 0, 0, (void*)&_wrap_class_btManifoldPoint, 0};
static swig_type_info _swigt__p_btManifoldResult = {"_p_btManifoldResult", "btManifoldResult *", 0, 0, (void*)&_wrap_class_btManifoldResult, 0};
static swig_type_info _swigt__p_btMatrix3x3 = {"_p_btMatrix3x3", "btMatrix3x3 *", 0, 0, (void*)&_wrap_class_btMatrix3x3, 0};
static swig_type_info _swigt__p_btMatrix3x3DoubleData = {"_p_btMatrix3x3DoubleData", "btMatrix3x3DoubleData *", 0, 0, (void*)&_wrap_class_btMatrix3x3DoubleData, 0};
static swig_type_info _swigt__p_btMatrix3x3FloatData = {"_p_btMatrix3x3FloatData", "btMatrix3x3FloatData *", 0, 0, (void*)&_wrap_class_btMatrix3x3FloatData, 0};
static swig_type_info _swigt__p_btMeshPartData = {"_p_btMeshPartData", "btMeshPartData *", 0, 0, (void*)&_wrap_class_btMeshPartData, 0};
static swig_type_info _swigt__p_btMinkowskiPenetrationDepthSolver = {"_p_btMinkowskiPenetrationDepthSolver", "btMinkowskiPenetrationDepthSolver *", 0, 0, (void*)&_wrap_class_btMinkowskiPenetrationDepthSolver, 0};
static swig_type_info _swigt__p_btMinkowskiSumShape = {"_p_btMinkowskiSumShape", "btMinkowskiSumShape *", 0, 0, (void*)&_wrap_class_btMinkowskiSumShape, 0};
static swig_type_info _swigt__p_btMotionState = {"_p_btMotionState", "btMotionState *", 0, 0, (void*)&_wrap_class_btMotionState, 0};
static swig_type_info _swigt__p_btMultiSphereShape = {"_p_btMultiSphereShape", "btMultiSphereShape *", 0, 0, (void*)&_wrap_class_btMultiSphereShape, 0};
static swig_type_info _swigt__p_btMultiSphereShapeData = {"_p_btMultiSphereShapeData", "btMultiSphereShapeData *", 0, 0, (void*)&_wrap_class_btMultiSphereShapeData, 0};
static swig_type_info _swigt__p_btNodeOverlapCallback = {"_p_btNodeOverlapCallback", "btNodeOverlapCallback *", 0, 0, (void*)&_wrap_class_btNodeOverlapCallback, 0};
static swig_type_info _swigt__p_btNullPairCache = {"_p_btNullPairCache", "btNullPairCache *", 0, 0, (void*)&_wrap_class_btNullPairCache, 0};
static swig_type_info _swigt__p_btOptimizedBvh = {"_p_btOptimizedBvh", "btOptimizedBvh *", 0, 0, (void*)&_wrap_class_btOptimizedBvh, 0};
static swig_type_info _swigt__p_btOptimizedBvhNode = {"_p_btOptimizedBvhNode", "btOptimizedBvhNode *", 0, 0, (void*)&_wrap_class_btOptimizedBvhNode, 0};
static swig_type_info _swigt__p_btOptimizedBvhNodeDoubleData = {"_p_btOptimizedBvhNodeDoubleData", "btOptimizedBvhNodeDoubleData *", 0, 0, (void*)&_wrap_class_btOptimizedBvhNodeDoubleData, 0};
static swig_type_info _swigt__p_btOptimizedBvhNodeFloatData = {"_p_btOptimizedBvhNodeFloatData", "btOptimizedBvhNodeFloatData *", 0, 0, (void*)&_wrap_class_btOptimizedBvhNodeFloatData, 0};
static swig_type_info _swigt__p_btOverlapCallback = {"_p_btOverlapCallback", "btOverlapCallback *", 0, 0, (void*)&_wrap_class_btOverlapCallback, 0};
static swig_type_info _swigt__p_btOverlapFilterCallback = {"_p_btOverlapFilterCallback", "btOverlapFilterCallback *", 0, 0, (void*)&_wrap_class_btOverlapFilterCallback, 0};
static swig_type_info _swigt__p_btOverlappingPairCache = {"_p_btOverlappingPairCache", "btOverlappingPairCache *", 0, 0, (void*)&_wrap_class_btOverlappingPairCache, 0};
static swig_type_info _swigt__p_btOverlappingPairCallback = {"_p_btOverlappingPairCallback", "btOverlappingPairCallback *", 0, 0, (void*)&_wrap_class_btOverlappingPairCallback, 0};
static swig_type_info _swigt__p_btPersistentManifold = {"_p_btPersistentManifold", "btPersistentManifold *", 0, 0, (void*)&_wrap_class_btPersistentManifold, 0};
static swig_type_info _swigt__p_btPoint2PointConstraint = {"_p_btPoint2PointConstraint", "btPoint2PointConstraint *", 0, 0, (void*)&_wrap_class_btPoint2PointConstraint, 0};
static swig_type_info _swigt__p_btPoint2PointConstraintDoubleData = {"_p_btPoint2PointConstraintDoubleData", "btPoint2PointConstraintDoubleData *", 0, 0, (void*)&_wrap_class_btPoint2PointConstraintDoubleData, 0};
static swig_type_info _swigt__p_btPoint2PointConstraintFloatData = {"_p_btPoint2PointConstraintFloatData", "btPoint2PointConstraintFloatData *", 0, 0, (void*)&_wrap_class_btPoint2PointConstraintFloatData, 0};
static swig_type_info _swigt__p_btPointCollector = {"_p_btPointCollector", "btPointCollector *", 0, 0, (void*)&_wrap_class_btPointCollector, 0};
static swig_type_info _swigt__p_btPointerUid = {"_p_btPointerUid", "btPointerUid *", 0, 0, (void*)&_wrap_class_btPointerUid, 0};
static swig_type_info _swigt__p_btPolyhedralConvexAabbCachingShape = {"_p_btPolyhedralConvexAabbCachingShape", "btPolyhedralConvexAabbCachingShape *", 0, 0, (void*)&_wrap_class_btPolyhedralConvexAabbCachingShape, 0};
static swig_type_info _swigt__p_btPolyhedralConvexShape = {"_p_btPolyhedralConvexShape", "btPolyhedralConvexShape *", 0, 0, (void*)&_wrap_class_btPolyhedralConvexShape, 0};
static swig_type_info _swigt__p_btPoolAllocator = {"_p_btPoolAllocator", "btPoolAllocator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btPositionAndRadius = {"_p_btPositionAndRadius", "btPositionAndRadius *", 0, 0, (void*)&_wrap_class_btPositionAndRadius, 0};
static swig_type_info _swigt__p_btQuadWord = {"_p_btQuadWord", "btQuadWord *", 0, 0, (void*)&_wrap_class_btQuadWord, 0};
static swig_type_info _swigt__p_btQuantizedBvh = {"_p_btQuantizedBvh", "btQuantizedBvh *", 0, 0, (void*)&_wrap_class_btQuantizedBvh, 0};
static swig_type_info _swigt__p_btQuantizedBvhDoubleData = {"_p_btQuantizedBvhDoubleData", "btQuantizedBvhDoubleData *", 0, 0, (void*)&_wrap_class_btQuantizedBvhDoubleData, 0};
static swig_type_info _swigt__p_btQuantizedBvhFloatData = {"_p_btQuantizedBvhFloatData", "btQuantizedBvhFloatData *", 0, 0, (void*)&_wrap_class_btQuantizedBvhFloatData, 0};
static swig_type_info _swigt__p_btQuantizedBvhNode = {"_p_btQuantizedBvhNode", "btQuantizedBvhNode *", 0, 0, (void*)&_wrap_class_btQuantizedBvhNode, 0};
static swig_type_info _swigt__p_btQuantizedBvhNodeData = {"_p_btQuantizedBvhNodeData", "btQuantizedBvhNodeData *", 0, 0, (void*)&_wrap_class_btQuantizedBvhNodeData, 0};
static swig_type_info _swigt__p_btQuaternion = {"_p_btQuaternion", "btQuaternion *", 0, 0, (void*)&_wrap_class_btQuaternion, 0};
static swig_type_info _swigt__p_btRaycastVehicle = {"_p_btRaycastVehicle", "btRaycastVehicle *", 0, 0, (void*)&_wrap_class_btRaycastVehicle, 0};
static swig_type_info _swigt__p_btRaycastVehicle__btVehicleTuning = {"_p_btRaycastVehicle__btVehicleTuning", "btRaycastVehicle::btVehicleTuning *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btRigidBody = {"_p_btRigidBody", "btRigidBody *", 0, 0, (void*)&_wrap_class_btRigidBody, 0};
static swig_type_info _swigt__p_btRigidBodyDoubleData = {"_p_btRigidBodyDoubleData", "btRigidBodyDoubleData *", 0, 0, (void*)&_wrap_class_btRigidBodyDoubleData, 0};
static swig_type_info _swigt__p_btRigidBodyFloatData = {"_p_btRigidBodyFloatData", "btRigidBodyFloatData *", 0, 0, (void*)&_wrap_class_btRigidBodyFloatData, 0};
static swig_type_info _swigt__p_btRigidBody__btRigidBodyConstructionInfo = {"_p_btRigidBody__btRigidBodyConstructionInfo", "btRigidBody::btRigidBodyConstructionInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btRotationalLimitMotor = {"_p_btRotationalLimitMotor", "btRotationalLimitMotor *", 0, 0, (void*)&_wrap_class_btRotationalLimitMotor, 0};
static swig_type_info _swigt__p_btSequentialImpulseConstraintSolver = {"_p_btSequentialImpulseConstraintSolver", "btSequentialImpulseConstraintSolver *", 0, 0, (void*)&_wrap_class_btSequentialImpulseConstraintSolver, 0};
static swig_type_info _swigt__p_btSerializer = {"_p_btSerializer", "btSerializer *", 0, 0, (void*)&_wrap_class_btSerializer, 0};
static swig_type_info _swigt__p_btShortIntIndexData = {"_p_btShortIntIndexData", "btShortIntIndexData *", 0, 0, (void*)&_wrap_class_btShortIntIndexData, 0};
static swig_type_info _swigt__p_btShortIntIndexTripletData = {"_p_btShortIntIndexTripletData", "btShortIntIndexTripletData *", 0, 0, (void*)&_wrap_class_btShortIntIndexTripletData, 0};
static swig_type_info _swigt__p_btSimpleBroadphase = {"_p_btSimpleBroadphase", "btSimpleBroadphase *", 0, 0, (void*)&_wrap_class_btSimpleBroadphase, 0};
static swig_type_info _swigt__p_btSimpleBroadphaseProxy = {"_p_btSimpleBroadphaseProxy", "btSimpleBroadphaseProxy *", 0, 0, (void*)&_wrap_class_btSimpleBroadphaseProxy, 0};
static swig_type_info _swigt__p_btSimpleDynamicsWorld = {"_p_btSimpleDynamicsWorld", "btSimpleDynamicsWorld *", 0, 0, (void*)&_wrap_class_btSimpleDynamicsWorld, 0};
static swig_type_info _swigt__p_btSimulationIslandManager = {"_p_btSimulationIslandManager", "btSimulationIslandManager *", 0, 0, (void*)&_wrap_class_btSimulationIslandManager, 0};
static swig_type_info _swigt__p_btSolve2LinearConstraint = {"_p_btSolve2LinearConstraint", "btSolve2LinearConstraint *", 0, 0, (void*)&_wrap_class_btSolve2LinearConstraint, 0};
static swig_type_info _swigt__p_btSolverBody = {"_p_btSolverBody", "btSolverBody *", 0, 0, (void*)&_wrap_class_btSolverBody, 0};
static swig_type_info _swigt__p_btSolverConstraint = {"_p_btSolverConstraint", "btSolverConstraint *", 0, 0, (void*)&_wrap_class_btSolverConstraint, 0};
static swig_type_info _swigt__p_btSortedOverlappingPairCache = {"_p_btSortedOverlappingPairCache", "btSortedOverlappingPairCache *", 0, 0, (void*)&_wrap_class_btSortedOverlappingPairCache, 0};
static swig_type_info _swigt__p_btSphereBoxCollisionAlgorithm = {"_p_btSphereBoxCollisionAlgorithm", "btSphereBoxCollisionAlgorithm *", 0, 0, (void*)&_wrap_class_btSphereBoxCollisionAlgorithm, 0};
static swig_type_info _swigt__p_btSphereShape = {"_p_btSphereShape", "btSphereShape *", 0, 0, (void*)&_wrap_class_btSphereShape, 0};
static swig_type_info _swigt__p_btSphereSphereCollisionAlgorithm = {"_p_btSphereSphereCollisionAlgorithm", "btSphereSphereCollisionAlgorithm *", 0, 0, (void*)&_wrap_class_btSphereSphereCollisionAlgorithm, 0};
static swig_type_info _swigt__p_btSphereTriangleCollisionAlgorithm = {"_p_btSphereTriangleCollisionAlgorithm", "btSphereTriangleCollisionAlgorithm *", 0, 0, (void*)&_wrap_class_btSphereTriangleCollisionAlgorithm, 0};
static swig_type_info _swigt__p_btStackAlloc = {"_p_btStackAlloc", "btStackAlloc *", 0, 0, (void*)&_wrap_class_btStackAlloc, 0};
static swig_type_info _swigt__p_btStorageResult = {"_p_btStorageResult", "btStorageResult *", 0, 0, (void*)&_wrap_class_btStorageResult, 0};
static swig_type_info _swigt__p_btStridingMeshInterface = {"_p_btStridingMeshInterface", "btStridingMeshInterface *", 0, 0, (void*)&_wrap_class_btStridingMeshInterface, 0};
static swig_type_info _swigt__p_btStridingMeshInterfaceData = {"_p_btStridingMeshInterfaceData", "btStridingMeshInterfaceData *", 0, 0, (void*)&_wrap_class_btStridingMeshInterfaceData, 0};
static swig_type_info _swigt__p_btSubSimplexClosestResult = {"_p_btSubSimplexClosestResult", "btSubSimplexClosestResult *", 0, 0, (void*)&_wrap_class_btSubSimplexClosestResult, 0};
static swig_type_info _swigt__p_btSubsimplexConvexCast = {"_p_btSubsimplexConvexCast", "btSubsimplexConvexCast *", 0, 0, (void*)&_wrap_class_btSubsimplexConvexCast, 0};
static swig_type_info _swigt__p_btTransform = {"_p_btTransform", "btTransform *", 0, 0, (void*)&_wrap_class_btTransform, 0};
static swig_type_info _swigt__p_btTransformDoubleData = {"_p_btTransformDoubleData", "btTransformDoubleData *", 0, 0, (void*)&_wrap_class_btTransformDoubleData, 0};
static swig_type_info _swigt__p_btTransformFloatData = {"_p_btTransformFloatData", "btTransformFloatData *", 0, 0, (void*)&_wrap_class_btTransformFloatData, 0};
static swig_type_info _swigt__p_btTransformUtil = {"_p_btTransformUtil", "btTransformUtil *", 0, 0, (void*)&_wrap_class_btTransformUtil, 0};
static swig_type_info _swigt__p_btTranslationalLimitMotor = {"_p_btTranslationalLimitMotor", "btTranslationalLimitMotor *", 0, 0, (void*)&_wrap_class_btTranslationalLimitMotor, 0};
static swig_type_info _swigt__p_btTriangle = {"_p_btTriangle", "btTriangle *", 0, 0, (void*)&_wrap_class_btTriangle, 0};
static swig_type_info _swigt__p_btTriangleBuffer = {"_p_btTriangleBuffer", "btTriangleBuffer *", 0, 0, (void*)&_wrap_class_btTriangleBuffer, 0};
static swig_type_info _swigt__p_btTriangleCallback = {"_p_btTriangleCallback", "btTriangleCallback *", 0, 0, (void*)&_wrap_class_btTriangleCallback, 0};
static swig_type_info _swigt__p_btTriangleConvexcastCallback = {"_p_btTriangleConvexcastCallback", "btTriangleConvexcastCallback *", 0, 0, (void*)&_wrap_class_btTriangleConvexcastCallback, 0};
static swig_type_info _swigt__p_btTriangleIndexVertexArray = {"_p_btTriangleIndexVertexArray", "btTriangleIndexVertexArray *", 0, 0, (void*)&_wrap_class_btTriangleIndexVertexArray, 0};
static swig_type_info _swigt__p_btTriangleInfo = {"_p_btTriangleInfo", "btTriangleInfo *", 0, 0, (void*)&_wrap_class_btTriangleInfo, 0};
static swig_type_info _swigt__p_btTriangleInfoData = {"_p_btTriangleInfoData", "btTriangleInfoData *", 0, 0, (void*)&_wrap_class_btTriangleInfoData, 0};
static swig_type_info _swigt__p_btTriangleInfoMap = {"_p_btTriangleInfoMap", "btTriangleInfoMap *", 0, 0, (void*)&_wrap_class_btTriangleInfoMap, 0};
static swig_type_info _swigt__p_btTriangleInfoMapData = {"_p_btTriangleInfoMapData", "btTriangleInfoMapData *", 0, 0, (void*)&_wrap_class_btTriangleInfoMapData, 0};
static swig_type_info _swigt__p_btTriangleMeshShape = {"_p_btTriangleMeshShape", "btTriangleMeshShape *", 0, 0, (void*)&_wrap_class_btTriangleMeshShape, 0};
static swig_type_info _swigt__p_btTriangleMeshShapeData = {"_p_btTriangleMeshShapeData", "btTriangleMeshShapeData *", 0, 0, (void*)&_wrap_class_btTriangleMeshShapeData, 0};
static swig_type_info _swigt__p_btTriangleRaycastCallback = {"_p_btTriangleRaycastCallback", "btTriangleRaycastCallback *", 0, 0, (void*)&_wrap_class_btTriangleRaycastCallback, 0};
static swig_type_info _swigt__p_btTriangleShape = {"_p_btTriangleShape", "btTriangleShape *", 0, 0, (void*)&_wrap_class_btTriangleShape, 0};
static swig_type_info _swigt__p_btTypedConstraint = {"_p_btTypedConstraint", "btTypedConstraint *", 0, 0, (void*)&_wrap_class_btTypedConstraint, 0};
static swig_type_info _swigt__p_btTypedConstraintData = {"_p_btTypedConstraintData", "btTypedConstraintData *", 0, 0, (void*)&_wrap_class_btTypedConstraintData, 0};
static swig_type_info _swigt__p_btTypedConstraint__btConstraintInfo1 = {"_p_btTypedConstraint__btConstraintInfo1", "btTypedConstraint::btConstraintInfo1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btTypedConstraint__btConstraintInfo2 = {"_p_btTypedConstraint__btConstraintInfo2", "btTypedConstraint::btConstraintInfo2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btTypedObject = {"_p_btTypedObject", "btTypedObject *", 0, 0, (void*)&_wrap_class_btTypedObject, 0};
static swig_type_info _swigt__p_btUnionFind = {"_p_btUnionFind", "btUnionFind *", 0, 0, (void*)&_wrap_class_btUnionFind, 0};
static swig_type_info _swigt__p_btUsageBitfield = {"_p_btUsageBitfield", "btUsageBitfield *", 0, 0, (void*)&_wrap_class_btUsageBitfield, 0};
static swig_type_info _swigt__p_btVector3 = {"_p_btVector3", "btVector3 *", 0, 0, (void*)&_wrap_class_btVector3, 0};
static swig_type_info _swigt__p_btVector3DoubleData = {"_p_btVector3DoubleData", "btVector3DoubleData *", 0, 0, (void*)&_wrap_class_btVector3DoubleData, 0};
static swig_type_info _swigt__p_btVector3FloatData = {"_p_btVector3FloatData", "btVector3FloatData *", 0, 0, (void*)&_wrap_class_btVector3FloatData, 0};
static swig_type_info _swigt__p_btVector4 = {"_p_btVector4", "btVector4 *", 0, 0, (void*)&_wrap_class_btVector4, 0};
static swig_type_info _swigt__p_btVoronoiSimplexSolver = {"_p_btVoronoiSimplexSolver", "btVoronoiSimplexSolver *", 0, 0, (void*)&_wrap_class_btVoronoiSimplexSolver, 0};
static swig_type_info _swigt__p_btWheelInfo = {"_p_btWheelInfo", "btWheelInfo *", 0, 0, (void*)&_wrap_class_btWheelInfo, 0};
static swig_type_info _swigt__p_btWheelInfoConstructionInfo = {"_p_btWheelInfoConstructionInfo", "btWheelInfoConstructionInfo *", 0, 0, (void*)&_wrap_class_btWheelInfoConstructionInfo, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_btDynamicsWorld_float__void = {"_p_f_p_btDynamicsWorld_float__void", "void (*)(btDynamicsWorld *,float)|btInternalTickCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__bool = {"_p_f_p_void__bool", "bool (*)(void *)|ContactDestroyedCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__void = {"_p_f_p_void__void", "btAlignedFreeFunc *|btFreeFunc *|void (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void = {"_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void", "void (*)(btBroadphasePair &,btCollisionDispatcher &,btDispatcherInfo const &)|btNearCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool = {"_p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool", "bool (*)(btManifoldPoint &,btCollisionObjectWrapper const *,int,int,btCollisionObjectWrapper const *,int,int)|ContactAddedCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_btManifoldPoint_p_void_p_void__bool = {"_p_f_r_btManifoldPoint_p_void_p_void__bool", "bool (*)(btManifoldPoint &,void *,void *)|ContactProcessedCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_size_t__p_void = {"_p_f_size_t__p_void", "void *(*)(size_t)|btAllocFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_size_t_int__p_void = {"_p_f_size_t_int__p_void", "btAlignedAllocFunc *|void *(*)(size_t,int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|btScalar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "size_type *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_btCollisionObject = {"_p_p_btCollisionObject", "btCollisionObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_btRigidBody = {"_p_p_btRigidBody", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_btPersistentManifold = {"_p_p_btPersistentManifold", "btPersistentManifold **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_btTypedConstraint = {"_p_p_btTypedConstraint", "btTypedConstraint **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_btContactConstraint = {"_p_p_btContactConstraint", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_btGeneric6DofConstraint = {"_p_p_btGeneric6DofConstraint", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_btHingeConstraint = {"_p_p_btHingeConstraint", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_btPoint2PointConstraint = {"_p_p_btPoint2PointConstraint", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_btRaycastVehicle = {"_p_p_btRaycastVehicle", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_unsigned_char = {"_p_p_unsigned_char", "unsigned char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CProfileIterator,
  &_swigt__p_CProfileManager,
  &_swigt__p_CProfileNode,
  &_swigt__p_CProfileSample,
  &_swigt__p_PHY_ScalarType,
  &_swigt__p_SphereTriangleDetector,
  &_swigt__p_bool,
  &_swigt__p_btActionInterface,
  &_swigt__p_btActivatingCollisionAlgorithm,
  &_swigt__p_btAlignedObjectArrayT_btBroadphasePair_t,
  &_swigt__p_btAlignedObjectArrayT_btBvhSubtreeInfo_t,
  &_swigt__p_btAlignedObjectArrayT_btCollisionObject_p_t,
  &_swigt__p_btAlignedObjectArrayT_btIndexedMesh_t,
  &_swigt__p_btAlignedObjectArrayT_btOptimizedBvhNode_t,
  &_swigt__p_btAlignedObjectArrayT_btPersistentManifold_p_t,
  &_swigt__p_btAlignedObjectArrayT_btQuantizedBvhNode_t,
  &_swigt__p_btAlignedObjectArrayT_btSolverConstraint_t,
  &_swigt__p_btAlignedObjectArrayT_btVector3_t,
  &_swigt__p_btAlignedObjectArrayT_btWheelInfo_t,
  &_swigt__p_btAngularLimit,
  &_swigt__p_btBU_Simplex1to4,
  &_swigt__p_btBlock,
  &_swigt__p_btBoxShape,
  &_swigt__p_btBroadphaseAabbCallback,
  &_swigt__p_btBroadphaseInterface,
  &_swigt__p_btBroadphasePair,
  &_swigt__p_btBroadphasePairSortPredicate,
  &_swigt__p_btBroadphaseProxy,
  &_swigt__p_btBroadphaseRayCallback,
  &_swigt__p_btBvhSubtreeInfo,
  &_swigt__p_btBvhSubtreeInfoData,
  &_swigt__p_btBvhTriangleMeshShape,
  &_swigt__p_btCapsuleShape,
  &_swigt__p_btCapsuleShapeData,
  &_swigt__p_btCapsuleShapeX,
  &_swigt__p_btCapsuleShapeZ,
  &_swigt__p_btCharIndexTripletData,
  &_swigt__p_btChunk,
  &_swigt__p_btClock,
  &_swigt__p_btCollisionAlgorithm,
  &_swigt__p_btCollisionAlgorithmConstructionInfo,
  &_swigt__p_btCollisionAlgorithmCreateFunc,
  &_swigt__p_btCollisionConfiguration,
  &_swigt__p_btCollisionDispatcher,
  &_swigt__p_btCollisionObject,
  &_swigt__p_btCollisionObjectDoubleData,
  &_swigt__p_btCollisionObjectFloatData,
  &_swigt__p_btCollisionObjectWrapper,
  &_swigt__p_btCollisionShape,
  &_swigt__p_btCollisionShapeData,
  &_swigt__p_btCollisionWorld,
  &_swigt__p_btCompoundCollisionAlgorithm,
  &_swigt__p_btCompoundShape,
  &_swigt__p_btCompoundShapeChild,
  &_swigt__p_btCompoundShapeChildData,
  &_swigt__p_btCompoundShapeData,
  &_swigt__p_btConcaveShape,
  &_swigt__p_btConeShape,
  &_swigt__p_btConeShapeX,
  &_swigt__p_btConeShapeZ,
  &_swigt__p_btConstraintRow,
  &_swigt__p_btConstraintSetting,
  &_swigt__p_btConstraintSolver,
  &_swigt__p_btContactConstraint,
  &_swigt__p_btContactSolverInfo,
  &_swigt__p_btContactSolverInfoData,
  &_swigt__p_btContactSolverInfoDoubleData,
  &_swigt__p_btContactSolverInfoFloatData,
  &_swigt__p_btConvexConcaveCollisionAlgorithm,
  &_swigt__p_btConvexConvexAlgorithm,
  &_swigt__p_btConvexHullShape,
  &_swigt__p_btConvexHullShapeData,
  &_swigt__p_btConvexInternalAabbCachingShape,
  &_swigt__p_btConvexInternalShape,
  &_swigt__p_btConvexInternalShapeData,
  &_swigt__p_btConvexPenetrationDepthSolver,
  &_swigt__p_btConvexPolyhedron,
  &_swigt__p_btConvexSeparatingDistanceUtil,
  &_swigt__p_btConvexShape,
  &_swigt__p_btConvexTriangleCallback,
  &_swigt__p_btCylinderShape,
  &_swigt__p_btCylinderShapeData,
  &_swigt__p_btCylinderShapeX,
  &_swigt__p_btCylinderShapeZ,
  &_swigt__p_btDbvtNode,
  &_swigt__p_btDefaultMotionState,
  &_swigt__p_btDefaultSerializer,
  &_swigt__p_btDefaultVehicleRaycaster,
  &_swigt__p_btDiscreteCollisionDetectorInterface,
  &_swigt__p_btDiscreteCollisionDetectorInterface__ClosestPointInput,
  &_swigt__p_btDiscreteCollisionDetectorInterface__Result,
  &_swigt__p_btDiscreteDynamicsWorld,
  &_swigt__p_btDispatcher,
  &_swigt__p_btDispatcherInfo,
  &_swigt__p_btDynamicsWorld,
  &_swigt__p_btDynamicsWorldDoubleData,
  &_swigt__p_btDynamicsWorldFloatData,
  &_swigt__p_btElement,
  &_swigt__p_btEmptyAlgorithm,
  &_swigt__p_btEmptyShape,
  &_swigt__p_btGEN_Link,
  &_swigt__p_btGEN_List,
  &_swigt__p_btGeneric6DofConstraint,
  &_swigt__p_btGeneric6DofConstraintData,
  &_swigt__p_btGeometryUtil,
  &_swigt__p_btGjkConvexCast,
  &_swigt__p_btGjkEpaPenetrationDepthSolver,
  &_swigt__p_btGjkEpaSolver,
  &_swigt__p_btGjkPairDetector,
  &_swigt__p_btHashInt,
  &_swigt__p_btHashMapT_btHashInt_btTriangleInfo_t,
  &_swigt__p_btHashPtr,
  &_swigt__p_btHashString,
  &_swigt__p_btHashedOverlappingPairCache,
  &_swigt__p_btHeightfieldTerrainShape,
  &_swigt__p_btHingeConstraint,
  &_swigt__p_btHingeConstraintDoubleData,
  &_swigt__p_btHingeConstraintFloatData,
  &_swigt__p_btIDebugDraw,
  &_swigt__p_btIndexedMesh,
  &_swigt__p_btIntIndexData,
  &_swigt__p_btInternalTriangleIndexCallback,
  &_swigt__p_btJacobianEntry,
  &_swigt__p_btJointFeedback,
  &_swigt__p_btManifoldPoint,
  &_swigt__p_btManifoldResult,
  &_swigt__p_btMatrix3x3,
  &_swigt__p_btMatrix3x3DoubleData,
  &_swigt__p_btMatrix3x3FloatData,
  &_swigt__p_btMeshPartData,
  &_swigt__p_btMinkowskiPenetrationDepthSolver,
  &_swigt__p_btMinkowskiSumShape,
  &_swigt__p_btMotionState,
  &_swigt__p_btMultiSphereShape,
  &_swigt__p_btMultiSphereShapeData,
  &_swigt__p_btNodeOverlapCallback,
  &_swigt__p_btNullPairCache,
  &_swigt__p_btOptimizedBvh,
  &_swigt__p_btOptimizedBvhNode,
  &_swigt__p_btOptimizedBvhNodeDoubleData,
  &_swigt__p_btOptimizedBvhNodeFloatData,
  &_swigt__p_btOverlapCallback,
  &_swigt__p_btOverlapFilterCallback,
  &_swigt__p_btOverlappingPairCache,
  &_swigt__p_btOverlappingPairCallback,
  &_swigt__p_btPersistentManifold,
  &_swigt__p_btPoint2PointConstraint,
  &_swigt__p_btPoint2PointConstraintDoubleData,
  &_swigt__p_btPoint2PointConstraintFloatData,
  &_swigt__p_btPointCollector,
  &_swigt__p_btPointerUid,
  &_swigt__p_btPolyhedralConvexAabbCachingShape,
  &_swigt__p_btPolyhedralConvexShape,
  &_swigt__p_btPoolAllocator,
  &_swigt__p_btPositionAndRadius,
  &_swigt__p_btQuadWord,
  &_swigt__p_btQuantizedBvh,
  &_swigt__p_btQuantizedBvhDoubleData,
  &_swigt__p_btQuantizedBvhFloatData,
  &_swigt__p_btQuantizedBvhNode,
  &_swigt__p_btQuantizedBvhNodeData,
  &_swigt__p_btQuaternion,
  &_swigt__p_btRaycastVehicle,
  &_swigt__p_btRaycastVehicle__btVehicleTuning,
  &_swigt__p_btRigidBody,
  &_swigt__p_btRigidBodyDoubleData,
  &_swigt__p_btRigidBodyFloatData,
  &_swigt__p_btRigidBody__btRigidBodyConstructionInfo,
  &_swigt__p_btRotationalLimitMotor,
  &_swigt__p_btSequentialImpulseConstraintSolver,
  &_swigt__p_btSerializer,
  &_swigt__p_btShortIntIndexData,
  &_swigt__p_btShortIntIndexTripletData,
  &_swigt__p_btSimpleBroadphase,
  &_swigt__p_btSimpleBroadphaseProxy,
  &_swigt__p_btSimpleDynamicsWorld,
  &_swigt__p_btSimulationIslandManager,
  &_swigt__p_btSolve2LinearConstraint,
  &_swigt__p_btSolverBody,
  &_swigt__p_btSolverConstraint,
  &_swigt__p_btSortedOverlappingPairCache,
  &_swigt__p_btSphereBoxCollisionAlgorithm,
  &_swigt__p_btSphereShape,
  &_swigt__p_btSphereSphereCollisionAlgorithm,
  &_swigt__p_btSphereTriangleCollisionAlgorithm,
  &_swigt__p_btStackAlloc,
  &_swigt__p_btStorageResult,
  &_swigt__p_btStridingMeshInterface,
  &_swigt__p_btStridingMeshInterfaceData,
  &_swigt__p_btSubSimplexClosestResult,
  &_swigt__p_btSubsimplexConvexCast,
  &_swigt__p_btTransform,
  &_swigt__p_btTransformDoubleData,
  &_swigt__p_btTransformFloatData,
  &_swigt__p_btTransformUtil,
  &_swigt__p_btTranslationalLimitMotor,
  &_swigt__p_btTriangle,
  &_swigt__p_btTriangleBuffer,
  &_swigt__p_btTriangleCallback,
  &_swigt__p_btTriangleConvexcastCallback,
  &_swigt__p_btTriangleIndexVertexArray,
  &_swigt__p_btTriangleInfo,
  &_swigt__p_btTriangleInfoData,
  &_swigt__p_btTriangleInfoMap,
  &_swigt__p_btTriangleInfoMapData,
  &_swigt__p_btTriangleMeshShape,
  &_swigt__p_btTriangleMeshShapeData,
  &_swigt__p_btTriangleRaycastCallback,
  &_swigt__p_btTriangleShape,
  &_swigt__p_btTypedConstraint,
  &_swigt__p_btTypedConstraintData,
  &_swigt__p_btTypedConstraint__btConstraintInfo1,
  &_swigt__p_btTypedConstraint__btConstraintInfo2,
  &_swigt__p_btTypedObject,
  &_swigt__p_btUnionFind,
  &_swigt__p_btUsageBitfield,
  &_swigt__p_btVector3,
  &_swigt__p_btVector3DoubleData,
  &_swigt__p_btVector3FloatData,
  &_swigt__p_btVector4,
  &_swigt__p_btVoronoiSimplexSolver,
  &_swigt__p_btWheelInfo,
  &_swigt__p_btWheelInfoConstructionInfo,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_f_p_btDynamicsWorld_float__void,
  &_swigt__p_f_p_void__bool,
  &_swigt__p_f_p_void__void,
  &_swigt__p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void,
  &_swigt__p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool,
  &_swigt__p_f_r_btManifoldPoint_p_void_p_void__bool,
  &_swigt__p_f_size_t__p_void,
  &_swigt__p_f_size_t_int__p_void,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_p_btCollisionObject,
  &_swigt__p_p_btContactConstraint,
  &_swigt__p_p_btGeneric6DofConstraint,
  &_swigt__p_p_btHingeConstraint,
  &_swigt__p_p_btPersistentManifold,
  &_swigt__p_p_btPoint2PointConstraint,
  &_swigt__p_p_btRaycastVehicle,
  &_swigt__p_p_btRigidBody,
  &_swigt__p_p_btTypedConstraint,
  &_swigt__p_p_unsigned_char,
  &_swigt__p_short,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_CProfileIterator[] = {  {&_swigt__p_CProfileIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CProfileManager[] = {  {&_swigt__p_CProfileManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CProfileNode[] = {  {&_swigt__p_CProfileNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CProfileSample[] = {  {&_swigt__p_CProfileSample, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PHY_ScalarType[] = {  {&_swigt__p_PHY_ScalarType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SphereTriangleDetector[] = {  {&_swigt__p_SphereTriangleDetector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btActionInterface[] = {  {&_swigt__p_btActionInterface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btActivatingCollisionAlgorithm[] = {  {&_swigt__p_btActivatingCollisionAlgorithm, 0, 0, 0},  {&_swigt__p_btCompoundCollisionAlgorithm, _p_btCompoundCollisionAlgorithmTo_p_btActivatingCollisionAlgorithm, 0, 0},  {&_swigt__p_btConvexConcaveCollisionAlgorithm, _p_btConvexConcaveCollisionAlgorithmTo_p_btActivatingCollisionAlgorithm, 0, 0},  {&_swigt__p_btConvexConvexAlgorithm, _p_btConvexConvexAlgorithmTo_p_btActivatingCollisionAlgorithm, 0, 0},  {&_swigt__p_btSphereBoxCollisionAlgorithm, _p_btSphereBoxCollisionAlgorithmTo_p_btActivatingCollisionAlgorithm, 0, 0},  {&_swigt__p_btSphereSphereCollisionAlgorithm, _p_btSphereSphereCollisionAlgorithmTo_p_btActivatingCollisionAlgorithm, 0, 0},  {&_swigt__p_btSphereTriangleCollisionAlgorithm, _p_btSphereTriangleCollisionAlgorithmTo_p_btActivatingCollisionAlgorithm, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btBroadphasePair_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btBroadphasePair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btBvhSubtreeInfo_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btBvhSubtreeInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btCollisionObject_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btCollisionObject_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btIndexedMesh_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btIndexedMesh_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btOptimizedBvhNode_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btOptimizedBvhNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btPersistentManifold_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btPersistentManifold_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btQuantizedBvhNode_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btQuantizedBvhNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btSolverConstraint_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btSolverConstraint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btVector3_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btVector3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btWheelInfo_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btWheelInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAngularLimit[] = {  {&_swigt__p_btAngularLimit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBU_Simplex1to4[] = {  {&_swigt__p_btBU_Simplex1to4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBlock[] = {  {&_swigt__p_btBlock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBoxShape[] = {  {&_swigt__p_btBoxShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBroadphaseAabbCallback[] = {  {&_swigt__p_btBroadphaseAabbCallback, 0, 0, 0},  {&_swigt__p_btBroadphaseRayCallback, _p_btBroadphaseRayCallbackTo_p_btBroadphaseAabbCallback, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBroadphaseInterface[] = {  {&_swigt__p_btBroadphaseInterface, 0, 0, 0},  {&_swigt__p_btSimpleBroadphase, _p_btSimpleBroadphaseTo_p_btBroadphaseInterface, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBroadphasePair[] = {  {&_swigt__p_btBroadphasePair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBroadphasePairSortPredicate[] = {  {&_swigt__p_btBroadphasePairSortPredicate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBroadphaseProxy[] = {  {&_swigt__p_btBroadphaseProxy, 0, 0, 0},  {&_swigt__p_btSimpleBroadphaseProxy, _p_btSimpleBroadphaseProxyTo_p_btBroadphaseProxy, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBroadphaseRayCallback[] = {  {&_swigt__p_btBroadphaseRayCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBvhSubtreeInfo[] = {  {&_swigt__p_btBvhSubtreeInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBvhSubtreeInfoData[] = {  {&_swigt__p_btBvhSubtreeInfoData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBvhTriangleMeshShape[] = {  {&_swigt__p_btBvhTriangleMeshShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCapsuleShape[] = {  {&_swigt__p_btCapsuleShape, 0, 0, 0},  {&_swigt__p_btCapsuleShapeX, _p_btCapsuleShapeXTo_p_btCapsuleShape, 0, 0},  {&_swigt__p_btCapsuleShapeZ, _p_btCapsuleShapeZTo_p_btCapsuleShape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCapsuleShapeData[] = {  {&_swigt__p_btCapsuleShapeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCapsuleShapeX[] = {  {&_swigt__p_btCapsuleShapeX, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCapsuleShapeZ[] = {  {&_swigt__p_btCapsuleShapeZ, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCharIndexTripletData[] = {  {&_swigt__p_btCharIndexTripletData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btChunk[] = {  {&_swigt__p_btChunk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btClock[] = {  {&_swigt__p_btClock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionAlgorithm[] = {  {&_swigt__p_btCollisionAlgorithm, 0, 0, 0},  {&_swigt__p_btActivatingCollisionAlgorithm, _p_btActivatingCollisionAlgorithmTo_p_btCollisionAlgorithm, 0, 0},  {&_swigt__p_btCompoundCollisionAlgorithm, _p_btCompoundCollisionAlgorithmTo_p_btCollisionAlgorithm, 0, 0},  {&_swigt__p_btConvexConcaveCollisionAlgorithm, _p_btConvexConcaveCollisionAlgorithmTo_p_btCollisionAlgorithm, 0, 0},  {&_swigt__p_btConvexConvexAlgorithm, _p_btConvexConvexAlgorithmTo_p_btCollisionAlgorithm, 0, 0},  {&_swigt__p_btSphereBoxCollisionAlgorithm, _p_btSphereBoxCollisionAlgorithmTo_p_btCollisionAlgorithm, 0, 0},  {&_swigt__p_btSphereSphereCollisionAlgorithm, _p_btSphereSphereCollisionAlgorithmTo_p_btCollisionAlgorithm, 0, 0},  {&_swigt__p_btSphereTriangleCollisionAlgorithm, _p_btSphereTriangleCollisionAlgorithmTo_p_btCollisionAlgorithm, 0, 0},  {&_swigt__p_btEmptyAlgorithm, _p_btEmptyAlgorithmTo_p_btCollisionAlgorithm, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionAlgorithmConstructionInfo[] = {  {&_swigt__p_btCollisionAlgorithmConstructionInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionAlgorithmCreateFunc[] = {  {&_swigt__p_btCollisionAlgorithmCreateFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionConfiguration[] = {  {&_swigt__p_btCollisionConfiguration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionDispatcher[] = {  {&_swigt__p_btCollisionDispatcher, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionObject[] = {  {&_swigt__p_btRigidBody, _p_btRigidBodyTo_p_btCollisionObject, 0, 0},  {&_swigt__p_btCollisionObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionObjectDoubleData[] = {  {&_swigt__p_btCollisionObjectDoubleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionObjectFloatData[] = {  {&_swigt__p_btCollisionObjectFloatData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionObjectWrapper[] = {  {&_swigt__p_btCollisionObjectWrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionShape[] = {  {&_swigt__p_btCompoundShape, _p_btCompoundShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btCapsuleShapeZ, _p_btCapsuleShapeZTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btConeShapeZ, _p_btConeShapeZTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btCapsuleShape, _p_btCapsuleShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btConcaveShape, _p_btConcaveShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btCylinderShapeX, _p_btCylinderShapeXTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btMultiSphereShape, _p_btMultiSphereShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btSphereShape, _p_btSphereShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btTriangleShape, _p_btTriangleShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btConeShape, _p_btConeShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btConvexInternalShape, _p_btConvexInternalShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btCylinderShapeZ, _p_btCylinderShapeZTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btMinkowskiSumShape, _p_btMinkowskiSumShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btConvexInternalAabbCachingShape, _p_btConvexInternalAabbCachingShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btPolyhedralConvexAabbCachingShape, _p_btPolyhedralConvexAabbCachingShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btHeightfieldTerrainShape, _p_btHeightfieldTerrainShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btCollisionShape, 0, 0, 0},  {&_swigt__p_btEmptyShape, _p_btEmptyShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btBU_Simplex1to4, _p_btBU_Simplex1to4To_p_btCollisionShape, 0, 0},  {&_swigt__p_btBoxShape, _p_btBoxShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btPolyhedralConvexShape, _p_btPolyhedralConvexShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btConvexShape, _p_btConvexShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btBvhTriangleMeshShape, _p_btBvhTriangleMeshShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btTriangleMeshShape, _p_btTriangleMeshShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btCapsuleShapeX, _p_btCapsuleShapeXTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btConeShapeX, _p_btConeShapeXTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btCylinderShape, _p_btCylinderShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btConvexHullShape, _p_btConvexHullShapeTo_p_btCollisionShape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionShapeData[] = {  {&_swigt__p_btCollisionShapeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionWorld[] = {  {&_swigt__p_btCollisionWorld, 0, 0, 0},  {&_swigt__p_btDynamicsWorld, _p_btDynamicsWorldTo_p_btCollisionWorld, 0, 0},  {&_swigt__p_btDiscreteDynamicsWorld, _p_btDiscreteDynamicsWorldTo_p_btCollisionWorld, 0, 0},  {&_swigt__p_btSimpleDynamicsWorld, _p_btSimpleDynamicsWorldTo_p_btCollisionWorld, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCompoundCollisionAlgorithm[] = {  {&_swigt__p_btCompoundCollisionAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCompoundShape[] = {  {&_swigt__p_btCompoundShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCompoundShapeChild[] = {  {&_swigt__p_btCompoundShapeChild, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCompoundShapeChildData[] = {  {&_swigt__p_btCompoundShapeChildData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCompoundShapeData[] = {  {&_swigt__p_btCompoundShapeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConcaveShape[] = {  {&_swigt__p_btConcaveShape, 0, 0, 0},  {&_swigt__p_btHeightfieldTerrainShape, _p_btHeightfieldTerrainShapeTo_p_btConcaveShape, 0, 0},  {&_swigt__p_btTriangleMeshShape, _p_btTriangleMeshShapeTo_p_btConcaveShape, 0, 0},  {&_swigt__p_btBvhTriangleMeshShape, _p_btBvhTriangleMeshShapeTo_p_btConcaveShape, 0, 0},  {&_swigt__p_btEmptyShape, _p_btEmptyShapeTo_p_btConcaveShape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConeShape[] = {  {&_swigt__p_btConeShape, 0, 0, 0},  {&_swigt__p_btConeShapeX, _p_btConeShapeXTo_p_btConeShape, 0, 0},  {&_swigt__p_btConeShapeZ, _p_btConeShapeZTo_p_btConeShape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConeShapeX[] = {  {&_swigt__p_btConeShapeX, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConeShapeZ[] = {  {&_swigt__p_btConeShapeZ, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConstraintRow[] = {  {&_swigt__p_btConstraintRow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConstraintSetting[] = {  {&_swigt__p_btConstraintSetting, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConstraintSolver[] = {  {&_swigt__p_btConstraintSolver, 0, 0, 0},  {&_swigt__p_btSequentialImpulseConstraintSolver, _p_btSequentialImpulseConstraintSolverTo_p_btConstraintSolver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btContactConstraint[] = {  {&_swigt__p_btContactConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btContactSolverInfo[] = {  {&_swigt__p_btContactSolverInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btContactSolverInfoData[] = {  {&_swigt__p_btContactSolverInfo, _p_btContactSolverInfoTo_p_btContactSolverInfoData, 0, 0},  {&_swigt__p_btContactSolverInfoData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btContactSolverInfoDoubleData[] = {  {&_swigt__p_btContactSolverInfoDoubleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btContactSolverInfoFloatData[] = {  {&_swigt__p_btContactSolverInfoFloatData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexConcaveCollisionAlgorithm[] = {  {&_swigt__p_btConvexConcaveCollisionAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexConvexAlgorithm[] = {  {&_swigt__p_btConvexConvexAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexHullShape[] = {  {&_swigt__p_btConvexHullShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexHullShapeData[] = {  {&_swigt__p_btConvexHullShapeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexInternalAabbCachingShape[] = {  {&_swigt__p_btMultiSphereShape, _p_btMultiSphereShapeTo_p_btConvexInternalAabbCachingShape, 0, 0},  {&_swigt__p_btConvexInternalAabbCachingShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexInternalShape[] = {  {&_swigt__p_btConeShapeZ, _p_btConeShapeZTo_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btCapsuleShapeZ, _p_btCapsuleShapeZTo_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btCylinderShapeX, _p_btCylinderShapeXTo_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btConeShape, _p_btConeShapeTo_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btCapsuleShape, _p_btCapsuleShapeTo_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btMultiSphereShape, _p_btMultiSphereShapeTo_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btSphereShape, _p_btSphereShapeTo_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btTriangleShape, _p_btTriangleShapeTo_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btConvexInternalShape, 0, 0, 0},  {&_swigt__p_btCylinderShapeZ, _p_btCylinderShapeZTo_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btMinkowskiSumShape, _p_btMinkowskiSumShapeTo_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btConvexInternalAabbCachingShape, _p_btConvexInternalAabbCachingShapeTo_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btPolyhedralConvexAabbCachingShape, _p_btPolyhedralConvexAabbCachingShapeTo_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btBU_Simplex1to4, _p_btBU_Simplex1to4To_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btBoxShape, _p_btBoxShapeTo_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btPolyhedralConvexShape, _p_btPolyhedralConvexShapeTo_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btConeShapeX, _p_btConeShapeXTo_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btCapsuleShapeX, _p_btCapsuleShapeXTo_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btCylinderShape, _p_btCylinderShapeTo_p_btConvexInternalShape, 0, 0},  {&_swigt__p_btConvexHullShape, _p_btConvexHullShapeTo_p_btConvexInternalShape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexInternalShapeData[] = {  {&_swigt__p_btConvexInternalShapeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexPenetrationDepthSolver[] = {  {&_swigt__p_btConvexPenetrationDepthSolver, 0, 0, 0},  {&_swigt__p_btGjkEpaPenetrationDepthSolver, _p_btGjkEpaPenetrationDepthSolverTo_p_btConvexPenetrationDepthSolver, 0, 0},  {&_swigt__p_btMinkowskiPenetrationDepthSolver, _p_btMinkowskiPenetrationDepthSolverTo_p_btConvexPenetrationDepthSolver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexPolyhedron[] = {  {&_swigt__p_btConvexPolyhedron, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexSeparatingDistanceUtil[] = {  {&_swigt__p_btConvexSeparatingDistanceUtil, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexShape[] = {  {&_swigt__p_btConeShapeZ, _p_btConeShapeZTo_p_btConvexShape, 0, 0},  {&_swigt__p_btCapsuleShapeZ, _p_btCapsuleShapeZTo_p_btConvexShape, 0, 0},  {&_swigt__p_btCylinderShapeX, _p_btCylinderShapeXTo_p_btConvexShape, 0, 0},  {&_swigt__p_btConeShape, _p_btConeShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btCapsuleShape, _p_btCapsuleShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btMultiSphereShape, _p_btMultiSphereShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btSphereShape, _p_btSphereShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btTriangleShape, _p_btTriangleShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btConvexInternalShape, _p_btConvexInternalShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btCylinderShapeZ, _p_btCylinderShapeZTo_p_btConvexShape, 0, 0},  {&_swigt__p_btMinkowskiSumShape, _p_btMinkowskiSumShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btConvexInternalAabbCachingShape, _p_btConvexInternalAabbCachingShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btPolyhedralConvexAabbCachingShape, _p_btPolyhedralConvexAabbCachingShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btBU_Simplex1to4, _p_btBU_Simplex1to4To_p_btConvexShape, 0, 0},  {&_swigt__p_btConvexShape, 0, 0, 0},  {&_swigt__p_btBoxShape, _p_btBoxShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btPolyhedralConvexShape, _p_btPolyhedralConvexShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btConeShapeX, _p_btConeShapeXTo_p_btConvexShape, 0, 0},  {&_swigt__p_btCapsuleShapeX, _p_btCapsuleShapeXTo_p_btConvexShape, 0, 0},  {&_swigt__p_btCylinderShape, _p_btCylinderShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btConvexHullShape, _p_btConvexHullShapeTo_p_btConvexShape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexTriangleCallback[] = {  {&_swigt__p_btConvexTriangleCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCylinderShape[] = {  {&_swigt__p_btCylinderShapeX, _p_btCylinderShapeXTo_p_btCylinderShape, 0, 0},  {&_swigt__p_btCylinderShapeZ, _p_btCylinderShapeZTo_p_btCylinderShape, 0, 0},  {&_swigt__p_btCylinderShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCylinderShapeData[] = {  {&_swigt__p_btCylinderShapeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCylinderShapeX[] = {  {&_swigt__p_btCylinderShapeX, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCylinderShapeZ[] = {  {&_swigt__p_btCylinderShapeZ, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDbvtNode[] = {  {&_swigt__p_btDbvtNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDefaultMotionState[] = {  {&_swigt__p_btDefaultMotionState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDefaultSerializer[] = {  {&_swigt__p_btDefaultSerializer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDefaultVehicleRaycaster[] = {  {&_swigt__p_btDefaultVehicleRaycaster, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDiscreteCollisionDetectorInterface[] = {  {&_swigt__p_btDiscreteCollisionDetectorInterface, 0, 0, 0},  {&_swigt__p_SphereTriangleDetector, _p_SphereTriangleDetectorTo_p_btDiscreteCollisionDetectorInterface, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDiscreteCollisionDetectorInterface__ClosestPointInput[] = {  {&_swigt__p_btDiscreteCollisionDetectorInterface__ClosestPointInput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDiscreteCollisionDetectorInterface__Result[] = {  {&_swigt__p_btManifoldResult, _p_btManifoldResultTo_p_btDiscreteCollisionDetectorInterface__Result, 0, 0},  {&_swigt__p_btDiscreteCollisionDetectorInterface__Result, 0, 0, 0},  {&_swigt__p_btStorageResult, _p_btStorageResultTo_p_btDiscreteCollisionDetectorInterface__Result, 0, 0},  {&_swigt__p_btPointCollector, _p_btPointCollectorTo_p_btDiscreteCollisionDetectorInterface__Result, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDiscreteDynamicsWorld[] = {  {&_swigt__p_btDiscreteDynamicsWorld, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDispatcher[] = {  {&_swigt__p_btDispatcher, 0, 0, 0},  {&_swigt__p_btCollisionDispatcher, _p_btCollisionDispatcherTo_p_btDispatcher, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDispatcherInfo[] = {  {&_swigt__p_btDispatcherInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDynamicsWorld[] = {  {&_swigt__p_btDynamicsWorld, 0, 0, 0},  {&_swigt__p_btDiscreteDynamicsWorld, _p_btDiscreteDynamicsWorldTo_p_btDynamicsWorld, 0, 0},  {&_swigt__p_btSimpleDynamicsWorld, _p_btSimpleDynamicsWorldTo_p_btDynamicsWorld, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDynamicsWorldDoubleData[] = {  {&_swigt__p_btDynamicsWorldDoubleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDynamicsWorldFloatData[] = {  {&_swigt__p_btDynamicsWorldFloatData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btElement[] = {  {&_swigt__p_btElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btEmptyAlgorithm[] = {  {&_swigt__p_btEmptyAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btEmptyShape[] = {  {&_swigt__p_btEmptyShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btGEN_Link[] = {  {&_swigt__p_btGEN_Link, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btGEN_List[] = {  {&_swigt__p_btGEN_List, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btGeneric6DofConstraint[] = {  {&_swigt__p_btGeneric6DofConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btGeneric6DofConstraintData[] = {  {&_swigt__p_btGeneric6DofConstraintData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btGeometryUtil[] = {  {&_swigt__p_btGeometryUtil, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btGjkConvexCast[] = {  {&_swigt__p_btGjkConvexCast, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btGjkEpaPenetrationDepthSolver[] = {  {&_swigt__p_btGjkEpaPenetrationDepthSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btGjkEpaSolver[] = {  {&_swigt__p_btGjkEpaSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btGjkPairDetector[] = {  {&_swigt__p_btGjkPairDetector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btHashInt[] = {  {&_swigt__p_btHashInt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btHashMapT_btHashInt_btTriangleInfo_t[] = {  {&_swigt__p_btHashMapT_btHashInt_btTriangleInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btHashPtr[] = {  {&_swigt__p_btHashPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btHashString[] = {  {&_swigt__p_btHashString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btHashedOverlappingPairCache[] = {  {&_swigt__p_btHashedOverlappingPairCache, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btHeightfieldTerrainShape[] = {  {&_swigt__p_btHeightfieldTerrainShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btHingeConstraint[] = {  {&_swigt__p_btHingeConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btHingeConstraintDoubleData[] = {  {&_swigt__p_btHingeConstraintDoubleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btHingeConstraintFloatData[] = {  {&_swigt__p_btHingeConstraintFloatData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btIDebugDraw[] = {  {&_swigt__p_btIDebugDraw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btIndexedMesh[] = {  {&_swigt__p_btIndexedMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btIntIndexData[] = {  {&_swigt__p_btIntIndexData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btInternalTriangleIndexCallback[] = {  {&_swigt__p_btInternalTriangleIndexCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btJacobianEntry[] = {  {&_swigt__p_btJacobianEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btJointFeedback[] = {  {&_swigt__p_btJointFeedback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btManifoldPoint[] = {  {&_swigt__p_btManifoldPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btManifoldResult[] = {  {&_swigt__p_btManifoldResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btMatrix3x3[] = {  {&_swigt__p_btMatrix3x3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btMatrix3x3DoubleData[] = {  {&_swigt__p_btMatrix3x3DoubleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btMatrix3x3FloatData[] = {  {&_swigt__p_btMatrix3x3FloatData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btMeshPartData[] = {  {&_swigt__p_btMeshPartData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btMinkowskiPenetrationDepthSolver[] = {  {&_swigt__p_btMinkowskiPenetrationDepthSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btMinkowskiSumShape[] = {  {&_swigt__p_btMinkowskiSumShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btMotionState[] = {  {&_swigt__p_btMotionState, 0, 0, 0},  {&_swigt__p_btDefaultMotionState, _p_btDefaultMotionStateTo_p_btMotionState, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btMultiSphereShape[] = {  {&_swigt__p_btMultiSphereShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btMultiSphereShapeData[] = {  {&_swigt__p_btMultiSphereShapeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btNodeOverlapCallback[] = {  {&_swigt__p_btNodeOverlapCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btNullPairCache[] = {  {&_swigt__p_btNullPairCache, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btOptimizedBvh[] = {  {&_swigt__p_btOptimizedBvh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btOptimizedBvhNode[] = {  {&_swigt__p_btOptimizedBvhNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btOptimizedBvhNodeDoubleData[] = {  {&_swigt__p_btOptimizedBvhNodeDoubleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btOptimizedBvhNodeFloatData[] = {  {&_swigt__p_btOptimizedBvhNodeFloatData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btOverlapCallback[] = {  {&_swigt__p_btOverlapCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btOverlapFilterCallback[] = {  {&_swigt__p_btOverlapFilterCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btOverlappingPairCache[] = {  {&_swigt__p_btOverlappingPairCache, 0, 0, 0},  {&_swigt__p_btHashedOverlappingPairCache, _p_btHashedOverlappingPairCacheTo_p_btOverlappingPairCache, 0, 0},  {&_swigt__p_btSortedOverlappingPairCache, _p_btSortedOverlappingPairCacheTo_p_btOverlappingPairCache, 0, 0},  {&_swigt__p_btNullPairCache, _p_btNullPairCacheTo_p_btOverlappingPairCache, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btOverlappingPairCallback[] = {  {&_swigt__p_btOverlappingPairCache, _p_btOverlappingPairCacheTo_p_btOverlappingPairCallback, 0, 0},  {&_swigt__p_btHashedOverlappingPairCache, _p_btHashedOverlappingPairCacheTo_p_btOverlappingPairCallback, 0, 0},  {&_swigt__p_btSortedOverlappingPairCache, _p_btSortedOverlappingPairCacheTo_p_btOverlappingPairCallback, 0, 0},  {&_swigt__p_btNullPairCache, _p_btNullPairCacheTo_p_btOverlappingPairCallback, 0, 0},  {&_swigt__p_btOverlappingPairCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btPersistentManifold[] = {  {&_swigt__p_btPersistentManifold, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btPoint2PointConstraint[] = {  {&_swigt__p_btPoint2PointConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btPoint2PointConstraintDoubleData[] = {  {&_swigt__p_btPoint2PointConstraintDoubleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btPoint2PointConstraintFloatData[] = {  {&_swigt__p_btPoint2PointConstraintFloatData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btPointCollector[] = {  {&_swigt__p_btPointCollector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btPointerUid[] = {  {&_swigt__p_btPointerUid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btPolyhedralConvexAabbCachingShape[] = {  {&_swigt__p_btConvexHullShape, _p_btConvexHullShapeTo_p_btPolyhedralConvexAabbCachingShape, 0, 0},  {&_swigt__p_btBU_Simplex1to4, _p_btBU_Simplex1to4To_p_btPolyhedralConvexAabbCachingShape, 0, 0},  {&_swigt__p_btPolyhedralConvexAabbCachingShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btPolyhedralConvexShape[] = {  {&_swigt__p_btConvexHullShape, _p_btConvexHullShapeTo_p_btPolyhedralConvexShape, 0, 0},  {&_swigt__p_btTriangleShape, _p_btTriangleShapeTo_p_btPolyhedralConvexShape, 0, 0},  {&_swigt__p_btBU_Simplex1to4, _p_btBU_Simplex1to4To_p_btPolyhedralConvexShape, 0, 0},  {&_swigt__p_btPolyhedralConvexShape, 0, 0, 0},  {&_swigt__p_btBoxShape, _p_btBoxShapeTo_p_btPolyhedralConvexShape, 0, 0},  {&_swigt__p_btPolyhedralConvexAabbCachingShape, _p_btPolyhedralConvexAabbCachingShapeTo_p_btPolyhedralConvexShape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btPoolAllocator[] = {  {&_swigt__p_btPoolAllocator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btPositionAndRadius[] = {  {&_swigt__p_btPositionAndRadius, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btQuadWord[] = {  {&_swigt__p_btQuadWord, 0, 0, 0},  {&_swigt__p_btQuaternion, _p_btQuaternionTo_p_btQuadWord, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btQuantizedBvh[] = {  {&_swigt__p_btQuantizedBvh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btQuantizedBvhDoubleData[] = {  {&_swigt__p_btQuantizedBvhDoubleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btQuantizedBvhFloatData[] = {  {&_swigt__p_btQuantizedBvhFloatData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btQuantizedBvhNode[] = {  {&_swigt__p_btQuantizedBvhNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btQuantizedBvhNodeData[] = {  {&_swigt__p_btQuantizedBvhNodeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btQuaternion[] = {  {&_swigt__p_btQuaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btRaycastVehicle[] = {  {&_swigt__p_btRaycastVehicle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btRaycastVehicle__btVehicleTuning[] = {  {&_swigt__p_btRaycastVehicle__btVehicleTuning, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btRigidBody[] = {  {&_swigt__p_btRigidBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btRigidBodyDoubleData[] = {  {&_swigt__p_btRigidBodyDoubleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btRigidBodyFloatData[] = {  {&_swigt__p_btRigidBodyFloatData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btRigidBody__btRigidBodyConstructionInfo[] = {  {&_swigt__p_btRigidBody__btRigidBodyConstructionInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btRotationalLimitMotor[] = {  {&_swigt__p_btRotationalLimitMotor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSequentialImpulseConstraintSolver[] = {  {&_swigt__p_btSequentialImpulseConstraintSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSerializer[] = {  {&_swigt__p_btSerializer, 0, 0, 0},  {&_swigt__p_btDefaultSerializer, _p_btDefaultSerializerTo_p_btSerializer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btShortIntIndexData[] = {  {&_swigt__p_btShortIntIndexData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btShortIntIndexTripletData[] = {  {&_swigt__p_btShortIntIndexTripletData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSimpleBroadphase[] = {  {&_swigt__p_btSimpleBroadphase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSimpleBroadphaseProxy[] = {  {&_swigt__p_btSimpleBroadphaseProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSimpleDynamicsWorld[] = {  {&_swigt__p_btSimpleDynamicsWorld, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSimulationIslandManager[] = {  {&_swigt__p_btSimulationIslandManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSolve2LinearConstraint[] = {  {&_swigt__p_btSolve2LinearConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSolverBody[] = {  {&_swigt__p_btSolverBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSolverConstraint[] = {  {&_swigt__p_btSolverConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSortedOverlappingPairCache[] = {  {&_swigt__p_btSortedOverlappingPairCache, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSphereBoxCollisionAlgorithm[] = {  {&_swigt__p_btSphereBoxCollisionAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSphereShape[] = {  {&_swigt__p_btSphereShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSphereSphereCollisionAlgorithm[] = {  {&_swigt__p_btSphereSphereCollisionAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSphereTriangleCollisionAlgorithm[] = {  {&_swigt__p_btSphereTriangleCollisionAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btStackAlloc[] = {  {&_swigt__p_btStackAlloc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btStorageResult[] = {  {&_swigt__p_btStorageResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btStridingMeshInterface[] = {  {&_swigt__p_btStridingMeshInterface, 0, 0, 0},  {&_swigt__p_btTriangleIndexVertexArray, _p_btTriangleIndexVertexArrayTo_p_btStridingMeshInterface, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btStridingMeshInterfaceData[] = {  {&_swigt__p_btStridingMeshInterfaceData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSubSimplexClosestResult[] = {  {&_swigt__p_btSubSimplexClosestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSubsimplexConvexCast[] = {  {&_swigt__p_btSubsimplexConvexCast, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTransform[] = {  {&_swigt__p_btTransform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTransformDoubleData[] = {  {&_swigt__p_btTransformDoubleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTransformFloatData[] = {  {&_swigt__p_btTransformFloatData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTransformUtil[] = {  {&_swigt__p_btTransformUtil, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTranslationalLimitMotor[] = {  {&_swigt__p_btTranslationalLimitMotor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTriangle[] = {  {&_swigt__p_btTriangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTriangleBuffer[] = {  {&_swigt__p_btTriangleBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTriangleCallback[] = {  {&_swigt__p_btTriangleBuffer, _p_btTriangleBufferTo_p_btTriangleCallback, 0, 0},  {&_swigt__p_btTriangleCallback, 0, 0, 0},  {&_swigt__p_btTriangleRaycastCallback, _p_btTriangleRaycastCallbackTo_p_btTriangleCallback, 0, 0},  {&_swigt__p_btTriangleConvexcastCallback, _p_btTriangleConvexcastCallbackTo_p_btTriangleCallback, 0, 0},  {&_swigt__p_btConvexTriangleCallback, _p_btConvexTriangleCallbackTo_p_btTriangleCallback, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTriangleConvexcastCallback[] = {  {&_swigt__p_btTriangleConvexcastCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTriangleIndexVertexArray[] = {  {&_swigt__p_btTriangleIndexVertexArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTriangleInfo[] = {  {&_swigt__p_btTriangleInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTriangleInfoData[] = {  {&_swigt__p_btTriangleInfoData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTriangleInfoMap[] = {  {&_swigt__p_btTriangleInfoMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTriangleInfoMapData[] = {  {&_swigt__p_btTriangleInfoMapData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTriangleMeshShape[] = {  {&_swigt__p_btTriangleMeshShape, 0, 0, 0},  {&_swigt__p_btBvhTriangleMeshShape, _p_btBvhTriangleMeshShapeTo_p_btTriangleMeshShape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTriangleMeshShapeData[] = {  {&_swigt__p_btTriangleMeshShapeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTriangleRaycastCallback[] = {  {&_swigt__p_btTriangleRaycastCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTriangleShape[] = {  {&_swigt__p_btTriangleShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTypedConstraint[] = {  {&_swigt__p_btTypedConstraint, 0, 0, 0},  {&_swigt__p_btContactConstraint, _p_btContactConstraintTo_p_btTypedConstraint, 0, 0},  {&_swigt__p_btGeneric6DofConstraint, _p_btGeneric6DofConstraintTo_p_btTypedConstraint, 0, 0},  {&_swigt__p_btHingeConstraint, _p_btHingeConstraintTo_p_btTypedConstraint, 0, 0},  {&_swigt__p_btPoint2PointConstraint, _p_btPoint2PointConstraintTo_p_btTypedConstraint, 0, 0},  {&_swigt__p_btRaycastVehicle, _p_btRaycastVehicleTo_p_btTypedConstraint, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTypedConstraintData[] = {  {&_swigt__p_btTypedConstraintData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTypedConstraint__btConstraintInfo1[] = {  {&_swigt__p_btTypedConstraint__btConstraintInfo1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTypedConstraint__btConstraintInfo2[] = {  {&_swigt__p_btTypedConstraint__btConstraintInfo2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTypedObject[] = {  {&_swigt__p_btTypedConstraint, _p_btTypedConstraintTo_p_btTypedObject, 0, 0},  {&_swigt__p_btContactConstraint, _p_btContactConstraintTo_p_btTypedObject, 0, 0},  {&_swigt__p_btGeneric6DofConstraint, _p_btGeneric6DofConstraintTo_p_btTypedObject, 0, 0},  {&_swigt__p_btHingeConstraint, _p_btHingeConstraintTo_p_btTypedObject, 0, 0},  {&_swigt__p_btPoint2PointConstraint, _p_btPoint2PointConstraintTo_p_btTypedObject, 0, 0},  {&_swigt__p_btPersistentManifold, _p_btPersistentManifoldTo_p_btTypedObject, 0, 0},  {&_swigt__p_btTypedObject, 0, 0, 0},  {&_swigt__p_btRaycastVehicle, _p_btRaycastVehicleTo_p_btTypedObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btUnionFind[] = {  {&_swigt__p_btUnionFind, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btUsageBitfield[] = {  {&_swigt__p_btUsageBitfield, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btVector3[] = {  {&_swigt__p_btVector4, _p_btVector4To_p_btVector3, 0, 0},  {&_swigt__p_btVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btVector3DoubleData[] = {  {&_swigt__p_btVector3DoubleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btVector3FloatData[] = {  {&_swigt__p_btVector3FloatData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btVector4[] = {  {&_swigt__p_btVector4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btVoronoiSimplexSolver[] = {  {&_swigt__p_btVoronoiSimplexSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btWheelInfo[] = {  {&_swigt__p_btWheelInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btWheelInfoConstructionInfo[] = {  {&_swigt__p_btWheelInfoConstructionInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_btDynamicsWorld_float__void[] = {  {&_swigt__p_f_p_btDynamicsWorld_float__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__bool[] = {  {&_swigt__p_f_p_void__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__void[] = {  {&_swigt__p_f_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void[] = {  {&_swigt__p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool[] = {  {&_swigt__p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_btManifoldPoint_p_void_p_void__bool[] = {  {&_swigt__p_f_r_btManifoldPoint_p_void_p_void__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_size_t__p_void[] = {  {&_swigt__p_f_size_t__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_size_t_int__p_void[] = {  {&_swigt__p_f_size_t_int__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_btRigidBody[] = {{&_swigt__p_p_btRigidBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_btCollisionObject[] = {  {&_swigt__p_p_btRigidBody, _p_p_btRigidBodyTo_p_p_btCollisionObject, 0, 0},  {&_swigt__p_p_btCollisionObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_btPersistentManifold[] = {  {&_swigt__p_p_btPersistentManifold, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_btContactConstraint[] = {{&_swigt__p_p_btContactConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_btGeneric6DofConstraint[] = {{&_swigt__p_p_btGeneric6DofConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_btHingeConstraint[] = {{&_swigt__p_p_btHingeConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_btPoint2PointConstraint[] = {{&_swigt__p_p_btPoint2PointConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_btRaycastVehicle[] = {{&_swigt__p_p_btRaycastVehicle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_btTypedConstraint[] = {  {&_swigt__p_p_btTypedConstraint, 0, 0, 0},  {&_swigt__p_p_btContactConstraint, _p_p_btContactConstraintTo_p_p_btTypedConstraint, 0, 0},  {&_swigt__p_p_btGeneric6DofConstraint, _p_p_btGeneric6DofConstraintTo_p_p_btTypedConstraint, 0, 0},  {&_swigt__p_p_btHingeConstraint, _p_p_btHingeConstraintTo_p_p_btTypedConstraint, 0, 0},  {&_swigt__p_p_btPoint2PointConstraint, _p_p_btPoint2PointConstraintTo_p_p_btTypedConstraint, 0, 0},  {&_swigt__p_p_btRaycastVehicle, _p_p_btRaycastVehicleTo_p_p_btTypedConstraint, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_char[] = {  {&_swigt__p_p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CProfileIterator,
  _swigc__p_CProfileManager,
  _swigc__p_CProfileNode,
  _swigc__p_CProfileSample,
  _swigc__p_PHY_ScalarType,
  _swigc__p_SphereTriangleDetector,
  _swigc__p_bool,
  _swigc__p_btActionInterface,
  _swigc__p_btActivatingCollisionAlgorithm,
  _swigc__p_btAlignedObjectArrayT_btBroadphasePair_t,
  _swigc__p_btAlignedObjectArrayT_btBvhSubtreeInfo_t,
  _swigc__p_btAlignedObjectArrayT_btCollisionObject_p_t,
  _swigc__p_btAlignedObjectArrayT_btIndexedMesh_t,
  _swigc__p_btAlignedObjectArrayT_btOptimizedBvhNode_t,
  _swigc__p_btAlignedObjectArrayT_btPersistentManifold_p_t,
  _swigc__p_btAlignedObjectArrayT_btQuantizedBvhNode_t,
  _swigc__p_btAlignedObjectArrayT_btSolverConstraint_t,
  _swigc__p_btAlignedObjectArrayT_btVector3_t,
  _swigc__p_btAlignedObjectArrayT_btWheelInfo_t,
  _swigc__p_btAngularLimit,
  _swigc__p_btBU_Simplex1to4,
  _swigc__p_btBlock,
  _swigc__p_btBoxShape,
  _swigc__p_btBroadphaseAabbCallback,
  _swigc__p_btBroadphaseInterface,
  _swigc__p_btBroadphasePair,
  _swigc__p_btBroadphasePairSortPredicate,
  _swigc__p_btBroadphaseProxy,
  _swigc__p_btBroadphaseRayCallback,
  _swigc__p_btBvhSubtreeInfo,
  _swigc__p_btBvhSubtreeInfoData,
  _swigc__p_btBvhTriangleMeshShape,
  _swigc__p_btCapsuleShape,
  _swigc__p_btCapsuleShapeData,
  _swigc__p_btCapsuleShapeX,
  _swigc__p_btCapsuleShapeZ,
  _swigc__p_btCharIndexTripletData,
  _swigc__p_btChunk,
  _swigc__p_btClock,
  _swigc__p_btCollisionAlgorithm,
  _swigc__p_btCollisionAlgorithmConstructionInfo,
  _swigc__p_btCollisionAlgorithmCreateFunc,
  _swigc__p_btCollisionConfiguration,
  _swigc__p_btCollisionDispatcher,
  _swigc__p_btCollisionObject,
  _swigc__p_btCollisionObjectDoubleData,
  _swigc__p_btCollisionObjectFloatData,
  _swigc__p_btCollisionObjectWrapper,
  _swigc__p_btCollisionShape,
  _swigc__p_btCollisionShapeData,
  _swigc__p_btCollisionWorld,
  _swigc__p_btCompoundCollisionAlgorithm,
  _swigc__p_btCompoundShape,
  _swigc__p_btCompoundShapeChild,
  _swigc__p_btCompoundShapeChildData,
  _swigc__p_btCompoundShapeData,
  _swigc__p_btConcaveShape,
  _swigc__p_btConeShape,
  _swigc__p_btConeShapeX,
  _swigc__p_btConeShapeZ,
  _swigc__p_btConstraintRow,
  _swigc__p_btConstraintSetting,
  _swigc__p_btConstraintSolver,
  _swigc__p_btContactConstraint,
  _swigc__p_btContactSolverInfo,
  _swigc__p_btContactSolverInfoData,
  _swigc__p_btContactSolverInfoDoubleData,
  _swigc__p_btContactSolverInfoFloatData,
  _swigc__p_btConvexConcaveCollisionAlgorithm,
  _swigc__p_btConvexConvexAlgorithm,
  _swigc__p_btConvexHullShape,
  _swigc__p_btConvexHullShapeData,
  _swigc__p_btConvexInternalAabbCachingShape,
  _swigc__p_btConvexInternalShape,
  _swigc__p_btConvexInternalShapeData,
  _swigc__p_btConvexPenetrationDepthSolver,
  _swigc__p_btConvexPolyhedron,
  _swigc__p_btConvexSeparatingDistanceUtil,
  _swigc__p_btConvexShape,
  _swigc__p_btConvexTriangleCallback,
  _swigc__p_btCylinderShape,
  _swigc__p_btCylinderShapeData,
  _swigc__p_btCylinderShapeX,
  _swigc__p_btCylinderShapeZ,
  _swigc__p_btDbvtNode,
  _swigc__p_btDefaultMotionState,
  _swigc__p_btDefaultSerializer,
  _swigc__p_btDefaultVehicleRaycaster,
  _swigc__p_btDiscreteCollisionDetectorInterface,
  _swigc__p_btDiscreteCollisionDetectorInterface__ClosestPointInput,
  _swigc__p_btDiscreteCollisionDetectorInterface__Result,
  _swigc__p_btDiscreteDynamicsWorld,
  _swigc__p_btDispatcher,
  _swigc__p_btDispatcherInfo,
  _swigc__p_btDynamicsWorld,
  _swigc__p_btDynamicsWorldDoubleData,
  _swigc__p_btDynamicsWorldFloatData,
  _swigc__p_btElement,
  _swigc__p_btEmptyAlgorithm,
  _swigc__p_btEmptyShape,
  _swigc__p_btGEN_Link,
  _swigc__p_btGEN_List,
  _swigc__p_btGeneric6DofConstraint,
  _swigc__p_btGeneric6DofConstraintData,
  _swigc__p_btGeometryUtil,
  _swigc__p_btGjkConvexCast,
  _swigc__p_btGjkEpaPenetrationDepthSolver,
  _swigc__p_btGjkEpaSolver,
  _swigc__p_btGjkPairDetector,
  _swigc__p_btHashInt,
  _swigc__p_btHashMapT_btHashInt_btTriangleInfo_t,
  _swigc__p_btHashPtr,
  _swigc__p_btHashString,
  _swigc__p_btHashedOverlappingPairCache,
  _swigc__p_btHeightfieldTerrainShape,
  _swigc__p_btHingeConstraint,
  _swigc__p_btHingeConstraintDoubleData,
  _swigc__p_btHingeConstraintFloatData,
  _swigc__p_btIDebugDraw,
  _swigc__p_btIndexedMesh,
  _swigc__p_btIntIndexData,
  _swigc__p_btInternalTriangleIndexCallback,
  _swigc__p_btJacobianEntry,
  _swigc__p_btJointFeedback,
  _swigc__p_btManifoldPoint,
  _swigc__p_btManifoldResult,
  _swigc__p_btMatrix3x3,
  _swigc__p_btMatrix3x3DoubleData,
  _swigc__p_btMatrix3x3FloatData,
  _swigc__p_btMeshPartData,
  _swigc__p_btMinkowskiPenetrationDepthSolver,
  _swigc__p_btMinkowskiSumShape,
  _swigc__p_btMotionState,
  _swigc__p_btMultiSphereShape,
  _swigc__p_btMultiSphereShapeData,
  _swigc__p_btNodeOverlapCallback,
  _swigc__p_btNullPairCache,
  _swigc__p_btOptimizedBvh,
  _swigc__p_btOptimizedBvhNode,
  _swigc__p_btOptimizedBvhNodeDoubleData,
  _swigc__p_btOptimizedBvhNodeFloatData,
  _swigc__p_btOverlapCallback,
  _swigc__p_btOverlapFilterCallback,
  _swigc__p_btOverlappingPairCache,
  _swigc__p_btOverlappingPairCallback,
  _swigc__p_btPersistentManifold,
  _swigc__p_btPoint2PointConstraint,
  _swigc__p_btPoint2PointConstraintDoubleData,
  _swigc__p_btPoint2PointConstraintFloatData,
  _swigc__p_btPointCollector,
  _swigc__p_btPointerUid,
  _swigc__p_btPolyhedralConvexAabbCachingShape,
  _swigc__p_btPolyhedralConvexShape,
  _swigc__p_btPoolAllocator,
  _swigc__p_btPositionAndRadius,
  _swigc__p_btQuadWord,
  _swigc__p_btQuantizedBvh,
  _swigc__p_btQuantizedBvhDoubleData,
  _swigc__p_btQuantizedBvhFloatData,
  _swigc__p_btQuantizedBvhNode,
  _swigc__p_btQuantizedBvhNodeData,
  _swigc__p_btQuaternion,
  _swigc__p_btRaycastVehicle,
  _swigc__p_btRaycastVehicle__btVehicleTuning,
  _swigc__p_btRigidBody,
  _swigc__p_btRigidBodyDoubleData,
  _swigc__p_btRigidBodyFloatData,
  _swigc__p_btRigidBody__btRigidBodyConstructionInfo,
  _swigc__p_btRotationalLimitMotor,
  _swigc__p_btSequentialImpulseConstraintSolver,
  _swigc__p_btSerializer,
  _swigc__p_btShortIntIndexData,
  _swigc__p_btShortIntIndexTripletData,
  _swigc__p_btSimpleBroadphase,
  _swigc__p_btSimpleBroadphaseProxy,
  _swigc__p_btSimpleDynamicsWorld,
  _swigc__p_btSimulationIslandManager,
  _swigc__p_btSolve2LinearConstraint,
  _swigc__p_btSolverBody,
  _swigc__p_btSolverConstraint,
  _swigc__p_btSortedOverlappingPairCache,
  _swigc__p_btSphereBoxCollisionAlgorithm,
  _swigc__p_btSphereShape,
  _swigc__p_btSphereSphereCollisionAlgorithm,
  _swigc__p_btSphereTriangleCollisionAlgorithm,
  _swigc__p_btStackAlloc,
  _swigc__p_btStorageResult,
  _swigc__p_btStridingMeshInterface,
  _swigc__p_btStridingMeshInterfaceData,
  _swigc__p_btSubSimplexClosestResult,
  _swigc__p_btSubsimplexConvexCast,
  _swigc__p_btTransform,
  _swigc__p_btTransformDoubleData,
  _swigc__p_btTransformFloatData,
  _swigc__p_btTransformUtil,
  _swigc__p_btTranslationalLimitMotor,
  _swigc__p_btTriangle,
  _swigc__p_btTriangleBuffer,
  _swigc__p_btTriangleCallback,
  _swigc__p_btTriangleConvexcastCallback,
  _swigc__p_btTriangleIndexVertexArray,
  _swigc__p_btTriangleInfo,
  _swigc__p_btTriangleInfoData,
  _swigc__p_btTriangleInfoMap,
  _swigc__p_btTriangleInfoMapData,
  _swigc__p_btTriangleMeshShape,
  _swigc__p_btTriangleMeshShapeData,
  _swigc__p_btTriangleRaycastCallback,
  _swigc__p_btTriangleShape,
  _swigc__p_btTypedConstraint,
  _swigc__p_btTypedConstraintData,
  _swigc__p_btTypedConstraint__btConstraintInfo1,
  _swigc__p_btTypedConstraint__btConstraintInfo2,
  _swigc__p_btTypedObject,
  _swigc__p_btUnionFind,
  _swigc__p_btUsageBitfield,
  _swigc__p_btVector3,
  _swigc__p_btVector3DoubleData,
  _swigc__p_btVector3FloatData,
  _swigc__p_btVector4,
  _swigc__p_btVoronoiSimplexSolver,
  _swigc__p_btWheelInfo,
  _swigc__p_btWheelInfoConstructionInfo,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_f_p_btDynamicsWorld_float__void,
  _swigc__p_f_p_void__bool,
  _swigc__p_f_p_void__void,
  _swigc__p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void,
  _swigc__p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool,
  _swigc__p_f_r_btManifoldPoint_p_void_p_void__bool,
  _swigc__p_f_size_t__p_void,
  _swigc__p_f_size_t_int__p_void,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_p_btCollisionObject,
  _swigc__p_p_btContactConstraint,
  _swigc__p_p_btGeneric6DofConstraint,
  _swigc__p_p_btHingeConstraint,
  _swigc__p_p_btPersistentManifold,
  _swigc__p_p_btPoint2PointConstraint,
  _swigc__p_p_btRaycastVehicle,
  _swigc__p_p_btRigidBody,
  _swigc__p_p_btTypedConstraint,
  _swigc__p_p_unsigned_char,
  _swigc__p_short,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}


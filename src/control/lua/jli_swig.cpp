/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif

/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif


/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

// Can be used to create namespaces. Currently used to
// wrap class static methods/variables/constants
typedef struct {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    cls_static;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1)); /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
  return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1));  /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) 
    else {
      return 0; // Exits stoically if an invalid key is initialized.
    }
#endif
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* registering a module in lua. Pushes the module table on the stack. */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
#ifdef SWIG_LUA_MODULE_GLOBAL
  /* If requested, install the module directly into the global namespace. */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
#else
  /* Do not install the module table as global name. The stack top has
     the module table with the name below. We pop the top and replace
     the name with it. */
  lua_replace(L,-2);
#endif
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}
#endif

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: namespaces
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  return 0;
}

SWIGINTERN void SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]); // forward declaration
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn); // forward declaration

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State* L, swig_lua_namespace* ns)
{
  int i = 0;
  assert(lua_istable(L,-1));
  /* There must be table at the top of the stack */
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].method);
  }
  lua_pop(L,1);

  /* clear stack - remove metatble */
  lua_pop(L,1);

}

/* helper function. creates namespace table and add it to module table */
SWIGINTERN int SWIG_Lua_namespace_register(lua_State* L, swig_lua_namespace* ns)
{
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table */
  lua_checkstack(L,5);
  lua_pushstring(L, ns->name);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */
  lua_rawset(L,-3); /* add namespace to module table */
}
/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State* L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  assert(lua_isuserdata(L,1));  /* just in case */
  unsigned long userData = (unsigned long)lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  
  lua_getfield(L, -1, ".type");
  const char* className = lua_tostring(L, -1);
  
  char output[256];
  sprintf(output, "<%s userdata: %lX>", className, userData);
  
  lua_pushstring(L, (const char*)output);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* Constructor proxy. Used when class name entry in module is not class constructor,
but special table instead. */
SWIGINTERN int SWIG_Lua_constructor_proxy(lua_State* L)
{
  /* unlimited number of parameters
     First one is our proxy table and we should remove it
     Other we should pass to real constructor
   */
   assert(lua_istable(L,1));
   lua_pushstring(L,".constructor");
   lua_rawget(L,1);
   assert(!lua_isnil(L,-1));
   lua_replace(L,1); /* replace our table with real constructor */
   lua_call(L,lua_gettop(L)-1,1);
   return 1;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State* L, swig_lua_class* clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, &clss->cls_static);
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State* L, swig_lua_class* clss)
{
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static.name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,&clss->cls_static);

  SWIG_Lua_get_table(L,clss->name); // Get namespace table back
  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    SWIG_Lua_add_function(L,".constructor", clss->constructor);
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", SWIG_Lua_constructor_proxy);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  SWIG_Lua_class_register_static(L,clss);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add tostring method for better output */
  SWIG_Lua_add_function(L,"__tostring",SWIG_Lua_class_tostring);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


    #include "btBulletDynamicsCommon.h"
    #include "JLIEngineCommon.h"


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AbstractBehaviorT_BaseEntity_t swig_types[0]
#define SWIGTYPE_p_AbstractBehaviorT_BaseViewObject_t swig_types[1]
#define SWIGTYPE_p_AbstractBehaviorT_SteeringEntity_t swig_types[2]
#define SWIGTYPE_p_AbstractFactoryObject swig_types[3]
#define SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t swig_types[4]
#define SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t swig_types[5]
#define SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t swig_types[6]
#define SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t swig_types[7]
#define SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t swig_types[8]
#define SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t swig_types[9]
#define SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t swig_types[10]
#define SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t swig_types[11]
#define SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t swig_types[12]
#define SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t swig_types[13]
#define SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t swig_types[14]
#define SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t swig_types[15]
#define SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t swig_types[16]
#define SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t swig_types[17]
#define SWIGTYPE_p_AbstractSingletonT_AnimationControllerFactory_t swig_types[18]
#define SWIGTYPE_p_AbstractSingletonT_CameraFactory_t swig_types[19]
#define SWIGTYPE_p_AbstractSingletonT_CollisionFilterBehaviorFactory_t swig_types[20]
#define SWIGTYPE_p_AbstractSingletonT_CollisionResponseBehaviorFactory_t swig_types[21]
#define SWIGTYPE_p_AbstractSingletonT_CollisionShapeFactory_t swig_types[22]
#define SWIGTYPE_p_AbstractSingletonT_EntityFactory_t swig_types[23]
#define SWIGTYPE_p_AbstractSingletonT_EntityStateMachineFactory_t swig_types[24]
#define SWIGTYPE_p_AbstractSingletonT_GLDebugDrawer_t swig_types[25]
#define SWIGTYPE_p_AbstractSingletonT_LuaVM_t swig_types[26]
#define SWIGTYPE_p_AbstractSingletonT_MazeCreator_t swig_types[27]
#define SWIGTYPE_p_AbstractSingletonT_MessageDispatcher_t swig_types[28]
#define SWIGTYPE_p_AbstractSingletonT_ParticleEmitterBehaviorFactory_t swig_types[29]
#define SWIGTYPE_p_AbstractSingletonT_ShaderFactory_t swig_types[30]
#define SWIGTYPE_p_AbstractSingletonT_SteeringBehaviorFactory_t swig_types[31]
#define SWIGTYPE_p_AbstractSingletonT_TextViewObjectFactory_t swig_types[32]
#define SWIGTYPE_p_AbstractSingletonT_TextureBehaviorFactory_t swig_types[33]
#define SWIGTYPE_p_AbstractSingletonT_UpdateBehaviorFactory_t swig_types[34]
#define SWIGTYPE_p_AbstractStateT_BaseEntity_t swig_types[35]
#define SWIGTYPE_p_AbstractStateT_void_t swig_types[36]
#define SWIGTYPE_p_AnimationController2DTest swig_types[37]
#define SWIGTYPE_p_AnimationControllerFactory swig_types[38]
#define SWIGTYPE_p_AnimationControllerInfo swig_types[39]
#define SWIGTYPE_p_BaseCamera swig_types[40]
#define SWIGTYPE_p_BaseCameraInfo swig_types[41]
#define SWIGTYPE_p_BaseCollisionFilterBehavior swig_types[42]
#define SWIGTYPE_p_BaseCollisionResponseBehavior swig_types[43]
#define SWIGTYPE_p_BaseEntity swig_types[44]
#define SWIGTYPE_p_BaseEntityAnimationController swig_types[45]
#define SWIGTYPE_p_BaseEntityInfo swig_types[46]
#define SWIGTYPE_p_BaseEntityState swig_types[47]
#define SWIGTYPE_p_BaseEntitySteeringBehavior swig_types[48]
#define SWIGTYPE_p_BaseGameState swig_types[49]
#define SWIGTYPE_p_BaseParticleEmitterBehavior swig_types[50]
#define SWIGTYPE_p_BaseSpriteViewInfo swig_types[51]
#define SWIGTYPE_p_BaseTextViewInfo swig_types[52]
#define SWIGTYPE_p_BaseTextViewObject swig_types[53]
#define SWIGTYPE_p_BaseTextureBehavior swig_types[54]
#define SWIGTYPE_p_BaseTimer swig_types[55]
#define SWIGTYPE_p_BaseUpdateBehavior swig_types[56]
#define SWIGTYPE_p_BaseViewObject swig_types[57]
#define SWIGTYPE_p_BaseViewObjectInfo swig_types[58]
#define SWIGTYPE_p_CameraEntity swig_types[59]
#define SWIGTYPE_p_CameraEntityInfo swig_types[60]
#define SWIGTYPE_p_CameraFactory swig_types[61]
#define SWIGTYPE_p_CameraPhysicsEntity swig_types[62]
#define SWIGTYPE_p_CameraPhysicsEntityInfo swig_types[63]
#define SWIGTYPE_p_CameraSteeringEntity swig_types[64]
#define SWIGTYPE_p_CameraSteeringEntityInfo swig_types[65]
#define SWIGTYPE_p_Clock swig_types[66]
#define SWIGTYPE_p_CollisionFilterBehaviorFactory swig_types[67]
#define SWIGTYPE_p_CollisionFilterBehaviorInfo swig_types[68]
#define SWIGTYPE_p_CollisionResponseBehaviorFactory swig_types[69]
#define SWIGTYPE_p_CollisionResponseBehaviorInfo swig_types[70]
#define SWIGTYPE_p_CollisionShapeFactory swig_types[71]
#define SWIGTYPE_p_CollisionShapeInfo swig_types[72]
#define SWIGTYPE_p_CustomFilterCallback swig_types[73]
#define SWIGTYPE_p_DeviceAccelerometer swig_types[74]
#define SWIGTYPE_p_DeviceAttitude swig_types[75]
#define SWIGTYPE_p_DeviceGesture swig_types[76]
#define SWIGTYPE_p_DeviceGyro swig_types[77]
#define SWIGTYPE_p_DeviceInput swig_types[78]
#define SWIGTYPE_p_DeviceInputTime swig_types[79]
#define SWIGTYPE_p_DeviceLongPressGesture swig_types[80]
#define SWIGTYPE_p_DeviceMagnetometer swig_types[81]
#define SWIGTYPE_p_DeviceMotion swig_types[82]
#define SWIGTYPE_p_DevicePanGesture swig_types[83]
#define SWIGTYPE_p_DevicePinchGesture swig_types[84]
#define SWIGTYPE_p_DeviceRotationGesture swig_types[85]
#define SWIGTYPE_p_DeviceSwipeGesture swig_types[86]
#define SWIGTYPE_p_DeviceTapGesture swig_types[87]
#define SWIGTYPE_p_DeviceTouch swig_types[88]
#define SWIGTYPE_p_EntityFactory swig_types[89]
#define SWIGTYPE_p_EntityStateMachine swig_types[90]
#define SWIGTYPE_p_EntityStateMachineFactory swig_types[91]
#define SWIGTYPE_p_EntityStateMachineInfo swig_types[92]
#define SWIGTYPE_p_FollowPathInfo swig_types[93]
#define SWIGTYPE_p_FrameCounter swig_types[94]
#define SWIGTYPE_p_GLDebugDrawer swig_types[95]
#define SWIGTYPE_p_GLKMatrix3 swig_types[96]
#define SWIGTYPE_p_GLKMatrix4 swig_types[97]
#define SWIGTYPE_p_GLenum swig_types[98]
#define SWIGTYPE_p_GLuint swig_types[99]
#define SWIGTYPE_p_GhostEntity swig_types[100]
#define SWIGTYPE_p_GhostEntityInfo swig_types[101]
#define SWIGTYPE_p_ImageFileEditor swig_types[102]
#define SWIGTYPE_p_LocalizedTextViewObjectStruct swig_types[103]
#define SWIGTYPE_p_LuaVM swig_types[104]
#define SWIGTYPE_p_MazeCreator swig_types[105]
#define SWIGTYPE_p_MazeGeneric swig_types[106]
#define SWIGTYPE_p_MazeHTML swig_types[107]
#define SWIGTYPE_p_MazeNode swig_types[108]
#define SWIGTYPE_p_MazeNodeType_e swig_types[109]
#define SWIGTYPE_p_MazeNodeWall_e swig_types[110]
#define SWIGTYPE_p_MazePNG swig_types[111]
#define SWIGTYPE_p_MazeRenderType_e swig_types[112]
#define SWIGTYPE_p_MeshMazeCreator swig_types[113]
#define SWIGTYPE_p_MessageDispatcher swig_types[114]
#define SWIGTYPE_p_NSInteger swig_types[115]
#define SWIGTYPE_p_NSTimeInterval swig_types[116]
#define SWIGTYPE_p_OcclusionBuffer swig_types[117]
#define SWIGTYPE_p_PHY_ScalarType swig_types[118]
#define SWIGTYPE_p_ParticleAttributeTransform swig_types[119]
#define SWIGTYPE_p_ParticleEmitterBehaviorFactory swig_types[120]
#define SWIGTYPE_p_ParticleEmitterBehaviorInfo swig_types[121]
#define SWIGTYPE_p_Path swig_types[122]
#define SWIGTYPE_p_PathInfo swig_types[123]
#define SWIGTYPE_p_RigidEntity swig_types[124]
#define SWIGTYPE_p_RigidEntityInfo swig_types[125]
#define SWIGTYPE_p_SceneRenderer swig_types[126]
#define SWIGTYPE_p_ShaderFactory swig_types[127]
#define SWIGTYPE_p_ShaderProgramHandleWrapper swig_types[128]
#define SWIGTYPE_p_SoftEntity swig_types[129]
#define SWIGTYPE_p_SoftEntityInfo swig_types[130]
#define SWIGTYPE_p_SteeringBehaviorFactory swig_types[131]
#define SWIGTYPE_p_SteeringBehaviorInfo swig_types[132]
#define SWIGTYPE_p_SteeringEntity swig_types[133]
#define SWIGTYPE_p_SteeringEntityInfo swig_types[134]
#define SWIGTYPE_p_StopWatch swig_types[135]
#define SWIGTYPE_p_Telegram swig_types[136]
#define SWIGTYPE_p_TextInfo swig_types[137]
#define SWIGTYPE_p_TextMetrics swig_types[138]
#define SWIGTYPE_p_TextOrigin swig_types[139]
#define SWIGTYPE_p_TextViewObjectFactory swig_types[140]
#define SWIGTYPE_p_TextViewObjectStruct swig_types[141]
#define SWIGTYPE_p_TextureBehaviorFactory swig_types[142]
#define SWIGTYPE_p_TextureBehaviorInfo swig_types[143]
#define SWIGTYPE_p_TextureMazeCreator swig_types[144]
#define SWIGTYPE_p_Timer swig_types[145]
#define SWIGTYPE_p_TimerInfo swig_types[146]
#define SWIGTYPE_p_UpdateBehaviorFactory swig_types[147]
#define SWIGTYPE_p_UpdateBehaviorInfo swig_types[148]
#define SWIGTYPE_p_VertexTransform swig_types[149]
#define SWIGTYPE_p_WallAvoidanceFunction swig_types[150]
#define SWIGTYPE_p_WanderInfo swig_types[151]
#define SWIGTYPE_p_WeightedSteeringBehavior swig_types[152]
#define SWIGTYPE_p_WeightedSteeringBehaviorInfo swig_types[153]
#define SWIGTYPE_p_WorldPhysics swig_types[154]
#define SWIGTYPE_p_WorldPhysicsInfo swig_types[155]
#define SWIGTYPE_p_btActionInterface swig_types[156]
#define SWIGTYPE_p_btAlignedObjectArrayT_BaseCamera_p_t swig_types[157]
#define SWIGTYPE_p_btAlignedObjectArrayT_BaseCollisionFilterBehavior_p_t swig_types[158]
#define SWIGTYPE_p_btAlignedObjectArrayT_BaseCollisionResponseBehavior_p_t swig_types[159]
#define SWIGTYPE_p_btAlignedObjectArrayT_BaseEntityAnimationController_p_t swig_types[160]
#define SWIGTYPE_p_btAlignedObjectArrayT_BaseEntitySteeringBehavior_p_t swig_types[161]
#define SWIGTYPE_p_btAlignedObjectArrayT_BaseEntity_p_t swig_types[162]
#define SWIGTYPE_p_btAlignedObjectArrayT_BaseParticleEmitterBehavior_p_t swig_types[163]
#define SWIGTYPE_p_btAlignedObjectArrayT_BaseTextViewObject_p_t swig_types[164]
#define SWIGTYPE_p_btAlignedObjectArrayT_BaseTextureBehavior_p_t swig_types[165]
#define SWIGTYPE_p_btAlignedObjectArrayT_BaseTimer_p_t swig_types[166]
#define SWIGTYPE_p_btAlignedObjectArrayT_BaseUpdateBehavior_p_t swig_types[167]
#define SWIGTYPE_p_btAlignedObjectArrayT_EntityStateMachine_p_t swig_types[168]
#define SWIGTYPE_p_btAlignedObjectArrayT_ShaderProgramHandleWrapper_p_t swig_types[169]
#define SWIGTYPE_p_btAlignedObjectArrayT_bool_t swig_types[170]
#define SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t swig_types[171]
#define SWIGTYPE_p_btAlignedObjectArrayT_btBroadphasePair_t swig_types[172]
#define SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t swig_types[173]
#define SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_const_p_t swig_types[174]
#define SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_p_t swig_types[175]
#define SWIGTYPE_p_btAlignedObjectArrayT_btCollisionShapeWrapper_p_t swig_types[176]
#define SWIGTYPE_p_btAlignedObjectArrayT_btDbvtProxy_p_t swig_types[177]
#define SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t swig_types[178]
#define SWIGTYPE_p_btAlignedObjectArrayT_btOptimizedBvhNode_t swig_types[179]
#define SWIGTYPE_p_btAlignedObjectArrayT_btPersistentManifold_p_t swig_types[180]
#define SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t swig_types[181]
#define SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Anchor_t swig_types[182]
#define SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t swig_types[183]
#define SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Face_t swig_types[184]
#define SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Joint_p_t swig_types[185]
#define SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Link_t swig_types[186]
#define SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Material_p_t swig_types[187]
#define SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Node_t swig_types[188]
#define SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Note_t swig_types[189]
#define SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__RContact_t swig_types[190]
#define SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__SContact_t swig_types[191]
#define SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Tetra_t swig_types[192]
#define SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t swig_types[193]
#define SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t swig_types[194]
#define SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t swig_types[195]
#define SWIGTYPE_p_btAlignedObjectArrayT_float_t swig_types[196]
#define SWIGTYPE_p_btAlignedObjectArrayT_int_t swig_types[197]
#define SWIGTYPE_p_btAlignedObjectArrayT_long_long_t swig_types[198]
#define SWIGTYPE_p_btBU_Simplex1to4 swig_types[199]
#define SWIGTYPE_p_btBoxShape swig_types[200]
#define SWIGTYPE_p_btBroadphaseInterface swig_types[201]
#define SWIGTYPE_p_btBroadphasePair swig_types[202]
#define SWIGTYPE_p_btBroadphaseProxy swig_types[203]
#define SWIGTYPE_p_btBvhTriangleMeshShape swig_types[204]
#define SWIGTYPE_p_btCapsuleShape swig_types[205]
#define SWIGTYPE_p_btCapsuleShapeX swig_types[206]
#define SWIGTYPE_p_btCapsuleShapeZ swig_types[207]
#define SWIGTYPE_p_btCollisionAlgorithmCreateFunc swig_types[208]
#define SWIGTYPE_p_btCollisionConfiguration swig_types[209]
#define SWIGTYPE_p_btCollisionDispatcher swig_types[210]
#define SWIGTYPE_p_btCollisionObject swig_types[211]
#define SWIGTYPE_p_btCollisionObjectWrapper swig_types[212]
#define SWIGTYPE_p_btCollisionShape swig_types[213]
#define SWIGTYPE_p_btCollisionShapeWrapper swig_types[214]
#define SWIGTYPE_p_btCollisionWorld swig_types[215]
#define SWIGTYPE_p_btCollisionWorld__ConvexResultCallback swig_types[216]
#define SWIGTYPE_p_btCollisionWorld__RayResultCallback swig_types[217]
#define SWIGTYPE_p_btCompoundShape swig_types[218]
#define SWIGTYPE_p_btConcaveShape swig_types[219]
#define SWIGTYPE_p_btConeShape swig_types[220]
#define SWIGTYPE_p_btConeShapeX swig_types[221]
#define SWIGTYPE_p_btConeShapeZ swig_types[222]
#define SWIGTYPE_p_btConstraintRow swig_types[223]
#define SWIGTYPE_p_btConstraintSolver swig_types[224]
#define SWIGTYPE_p_btConvexHullShape swig_types[225]
#define SWIGTYPE_p_btConvexInternalAabbCachingShape swig_types[226]
#define SWIGTYPE_p_btConvexInternalShape swig_types[227]
#define SWIGTYPE_p_btConvexShape swig_types[228]
#define SWIGTYPE_p_btConvexTriangleMeshShape swig_types[229]
#define SWIGTYPE_p_btCylinderShape swig_types[230]
#define SWIGTYPE_p_btCylinderShapeX swig_types[231]
#define SWIGTYPE_p_btCylinderShapeZ swig_types[232]
#define SWIGTYPE_p_btDbvt swig_types[233]
#define SWIGTYPE_p_btDbvtAabbMm swig_types[234]
#define SWIGTYPE_p_btDbvtBroadphase swig_types[235]
#define SWIGTYPE_p_btDbvtNode swig_types[236]
#define SWIGTYPE_p_btDbvtProxy swig_types[237]
#define SWIGTYPE_p_btDefaultCollisionConfiguration swig_types[238]
#define SWIGTYPE_p_btDefaultCollisionConstructionInfo swig_types[239]
#define SWIGTYPE_p_btDefaultSerializer swig_types[240]
#define SWIGTYPE_p_btDiscreteDynamicsWorld swig_types[241]
#define SWIGTYPE_p_btDispatcher swig_types[242]
#define SWIGTYPE_p_btDynamicsWorld swig_types[243]
#define SWIGTYPE_p_btEmptyShape swig_types[244]
#define SWIGTYPE_p_btGhostObject swig_types[245]
#define SWIGTYPE_p_btGhostPairCallback swig_types[246]
#define SWIGTYPE_p_btGjkEpaSolver2 swig_types[247]
#define SWIGTYPE_p_btGjkEpaSolver2__sResults swig_types[248]
#define SWIGTYPE_p_btHashMapT_btHashInt_btTriangleInfo_t swig_types[249]
#define SWIGTYPE_p_btHashedOverlappingPairCache swig_types[250]
#define SWIGTYPE_p_btIDebugDraw swig_types[251]
#define SWIGTYPE_p_btManifoldPoint swig_types[252]
#define SWIGTYPE_p_btMatrix3x3 swig_types[253]
#define SWIGTYPE_p_btMultiSapBroadphase swig_types[254]
#define SWIGTYPE_p_btMultiSphereShape swig_types[255]
#define SWIGTYPE_p_btNullPairCache swig_types[256]
#define SWIGTYPE_p_btOverlapFilterCallback swig_types[257]
#define SWIGTYPE_p_btOverlappingPairCache swig_types[258]
#define SWIGTYPE_p_btOverlappingPairCallback swig_types[259]
#define SWIGTYPE_p_btPairCachingGhostObject swig_types[260]
#define SWIGTYPE_p_btPolyhedralConvexAabbCachingShape swig_types[261]
#define SWIGTYPE_p_btPolyhedralConvexShape swig_types[262]
#define SWIGTYPE_p_btQuaternion swig_types[263]
#define SWIGTYPE_p_btRaycastVehicle swig_types[264]
#define SWIGTYPE_p_btRigidBody swig_types[265]
#define SWIGTYPE_p_btRigidBodyForceWrapper swig_types[266]
#define SWIGTYPE_p_btScaledBvhTriangleMeshShape swig_types[267]
#define SWIGTYPE_p_btSequentialImpulseConstraintSolver swig_types[268]
#define SWIGTYPE_p_btSerializer swig_types[269]
#define SWIGTYPE_p_btSimpleBroadphase swig_types[270]
#define SWIGTYPE_p_btSimpleBroadphaseProxy swig_types[271]
#define SWIGTYPE_p_btSimpleDynamicsWorld swig_types[272]
#define SWIGTYPE_p_btSoftBody swig_types[273]
#define SWIGTYPE_p_btSoftBodyRigidBodyCollisionConfiguration swig_types[274]
#define SWIGTYPE_p_btSoftBodySolver swig_types[275]
#define SWIGTYPE_p_btSoftBodyWorldInfo swig_types[276]
#define SWIGTYPE_p_btSoftBody__AJoint__Specs swig_types[277]
#define SWIGTYPE_p_btSoftBody__Body swig_types[278]
#define SWIGTYPE_p_btSoftBody__Cluster swig_types[279]
#define SWIGTYPE_p_btSoftBody__Config swig_types[280]
#define SWIGTYPE_p_btSoftBody__Face swig_types[281]
#define SWIGTYPE_p_btSoftBody__ImplicitFn swig_types[282]
#define SWIGTYPE_p_btSoftBody__Impulse swig_types[283]
#define SWIGTYPE_p_btSoftBody__LJoint__Specs swig_types[284]
#define SWIGTYPE_p_btSoftBody__Link swig_types[285]
#define SWIGTYPE_p_btSoftBody__Material swig_types[286]
#define SWIGTYPE_p_btSoftBody__Node swig_types[287]
#define SWIGTYPE_p_btSoftBody__Pose swig_types[288]
#define SWIGTYPE_p_btSoftBody__SolverState swig_types[289]
#define SWIGTYPE_p_btSoftBody__eFeature___ swig_types[290]
#define SWIGTYPE_p_btSoftBody__ePSolver___ swig_types[291]
#define SWIGTYPE_p_btSoftBody__eSolverPresets___ swig_types[292]
#define SWIGTYPE_p_btSoftBody__eVSolver___ swig_types[293]
#define SWIGTYPE_p_btSoftBody__sCti swig_types[294]
#define SWIGTYPE_p_btSoftBody__sRayCast swig_types[295]
#define SWIGTYPE_p_btSoftRigidDynamicsWorld swig_types[296]
#define SWIGTYPE_p_btSortedOverlappingPairCache swig_types[297]
#define SWIGTYPE_p_btSparseSdfT_3_t swig_types[298]
#define SWIGTYPE_p_btSphereShape swig_types[299]
#define SWIGTYPE_p_btStaticPlaneShape swig_types[300]
#define SWIGTYPE_p_btTransform swig_types[301]
#define SWIGTYPE_p_btTriangleMeshShape swig_types[302]
#define SWIGTYPE_p_btUniformScalingShape swig_types[303]
#define SWIGTYPE_p_btVector2 swig_types[304]
#define SWIGTYPE_p_btVector3 swig_types[305]
#define SWIGTYPE_p_btVector4 swig_types[306]
#define SWIGTYPE_p_char swig_types[307]
#define SWIGTYPE_p_f_p_btSoftBody_float__void swig_types[308]
#define SWIGTYPE_p_f_p_btSoftBody_float_float__void swig_types[309]
#define SWIGTYPE_p_f_p_void__void swig_types[310]
#define SWIGTYPE_p_f_size_t__p_void swig_types[311]
#define SWIGTYPE_p_f_size_t_int__p_void swig_types[312]
#define SWIGTYPE_p_float swig_types[313]
#define SWIGTYPE_p_int swig_types[314]
#define SWIGTYPE_p_long swig_types[315]
#define SWIGTYPE_p_long_long swig_types[316]
#define SWIGTYPE_p_p_btSoftBody swig_types[317]
#define SWIGTYPE_p_p_char swig_types[318]
#define SWIGTYPE_p_short swig_types[319]
#define SWIGTYPE_p_std__pairT_std__string_std__string_t swig_types[320]
#define SWIGTYPE_p_std__string swig_types[321]
#define SWIGTYPE_p_tAnchorArray swig_types[322]
#define SWIGTYPE_p_tClusterArray swig_types[323]
#define SWIGTYPE_p_tFaceArray swig_types[324]
#define SWIGTYPE_p_tJointArray swig_types[325]
#define SWIGTYPE_p_tLeafArray swig_types[326]
#define SWIGTYPE_p_tLinkArray swig_types[327]
#define SWIGTYPE_p_tMaterialArray swig_types[328]
#define SWIGTYPE_p_tNodeArray swig_types[329]
#define SWIGTYPE_p_tNoteArray swig_types[330]
#define SWIGTYPE_p_tPSolverArray swig_types[331]
#define SWIGTYPE_p_tRContactArray swig_types[332]
#define SWIGTYPE_p_tSContactArray swig_types[333]
#define SWIGTYPE_p_tScalarArray swig_types[334]
#define SWIGTYPE_p_tSoftBodyArray swig_types[335]
#define SWIGTYPE_p_tTetraArray swig_types[336]
#define SWIGTYPE_p_tVSolverArray swig_types[337]
#define SWIGTYPE_p_tVector3Array swig_types[338]
#define SWIGTYPE_p_unsigned_char swig_types[339]
#define SWIGTYPE_p_unsigned_int swig_types[340]
#define SWIGTYPE_p_unsigned_long_long swig_types[341]
#define SWIGTYPE_p_unsigned_short swig_types[342]
#define SWIGTYPE_p_void swig_types[343]
static swig_type_info *swig_types[345];
static swig_module_info swig_module = {swig_types, 344, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "JLI"
#define SWIG_init      luaopen_JLI
#define SWIG_init_user luaopen_JLI_user

#define SWIG_LUACODE   luaopen_JLI_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


    typedef SteeringEntity::WallAvoidanceFunction WallAvoidanceFunction;
    //typedef btDbvtNode::ICollide ICollide;

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_FrameCounter_Singleton_create(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *arg1 = (AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *) 0 ;
  TimerInfo *arg2 = (TimerInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::create",1,"AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::create",2,"TimerInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t,0))){
    SWIG_fail_ptr("FrameCounter_Singleton_create",1,SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TimerInfo,0))){
    SWIG_fail_ptr("FrameCounter_Singleton_create",2,SWIGTYPE_p_TimerInfo);
  }
  
  result = (IDType)(arg1)->create(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameCounter_Singleton_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *arg1 = (AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *) 0 ;
  IDType arg2 ;
  BaseTimer *result = 0 ;
  
  SWIG_check_num_args("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::get",1,"AbstractFactory< FrameCounter,TimerInfo,BaseTimer > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::get",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t,0))){
    SWIG_fail_ptr("FrameCounter_Singleton_get",1,SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (BaseTimer *)((AbstractFactory< FrameCounter,TimerInfo,BaseTimer > const *)arg1)->get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseTimer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameCounter_Singleton_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *arg1 = (AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *) 0 ;
  BaseTimer *arg2 = (BaseTimer *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::get",1,"AbstractFactory< FrameCounter,TimerInfo,BaseTimer > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::get",2,"BaseTimer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t,0))){
    SWIG_fail_ptr("FrameCounter_Singleton_get",1,SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseTimer,0))){
    SWIG_fail_ptr("FrameCounter_Singleton_get",2,SWIGTYPE_p_BaseTimer);
  }
  
  result = (IDType)((AbstractFactory< FrameCounter,TimerInfo,BaseTimer > const *)arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameCounter_Singleton_destroy(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *arg1 = (AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *) 0 ;
  IDType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::destroy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::destroy",1,"AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::destroy",2,"IDType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t,0))){
    SWIG_fail_ptr("FrameCounter_Singleton_destroy",1,SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("FrameCounter_Singleton_destroy",2,SWIGTYPE_p_long_long);
  }
  
  result = (bool)(arg1)->destroy(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameCounter_Singleton_destroyAll(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *arg1 = (AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *) 0 ;
  
  SWIG_check_num_args("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::destroyAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::destroyAll",1,"AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t,0))){
    SWIG_fail_ptr("FrameCounter_Singleton_destroyAll",1,SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t);
  }
  
  (arg1)->destroyAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameCounter_Singleton_size(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *arg1 = (AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *) 0 ;
  int result;
  
  SWIG_check_num_args("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::size",1,"AbstractFactory< FrameCounter,TimerInfo,BaseTimer > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t,0))){
    SWIG_fail_ptr("FrameCounter_Singleton_size",1,SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t);
  }
  
  result = (int)((AbstractFactory< FrameCounter,TimerInfo,BaseTimer > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameCounter_Singleton_get__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *arg1 = (AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *) 0 ;
  btAlignedObjectArray< BaseTimer * > *arg2 = 0 ;
  
  SWIG_check_num_args("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::get",1,"AbstractFactory< FrameCounter,TimerInfo,BaseTimer > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::get",2,"btAlignedObjectArray< BaseTimer * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t,0))){
    SWIG_fail_ptr("FrameCounter_Singleton_get",1,SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_BaseTimer_p_t,0))){
    SWIG_fail_ptr("FrameCounter_Singleton_get",2,SWIGTYPE_p_btAlignedObjectArrayT_BaseTimer_p_t);
  }
  
  ((AbstractFactory< FrameCounter,TimerInfo,BaseTimer > const *)arg1)->get(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameCounter_Singleton_get(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseTimer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FrameCounter_Singleton_get__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_BaseTimer_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FrameCounter_Singleton_get__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FrameCounter_Singleton_get__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FrameCounter_Singleton_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::get(IDType) const\n"
    "    AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::get(BaseTimer *) const\n"
    "    AbstractFactory< FrameCounter,TimerInfo,BaseTimer >::get(btAlignedObjectArray< BaseTimer * > &) const\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_AbstractFactory_Sl_FrameCounter_Sc_TimerInfo_Sc_BaseTimer_Sg__methods[] = {
    {"create", _wrap_FrameCounter_Singleton_create}, 
    {"destroy", _wrap_FrameCounter_Singleton_destroy}, 
    {"destroyAll", _wrap_FrameCounter_Singleton_destroyAll}, 
    {"size", _wrap_FrameCounter_Singleton_size}, 
    {"get", _wrap_FrameCounter_Singleton_get}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_FrameCounter_Sc_TimerInfo_Sc_BaseTimer_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_FrameCounter_Sc_TimerInfo_Sc_BaseTimer_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractFactory_Sl_FrameCounter_Sc_TimerInfo_Sc_BaseTimer_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractFactory_Sl_FrameCounter_Sc_TimerInfo_Sc_BaseTimer_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractFactory_Sl_FrameCounter_Sc_TimerInfo_Sc_BaseTimer_Sg__bases[] = {0};
static const char *swig_AbstractFactory_Sl_FrameCounter_Sc_TimerInfo_Sc_BaseTimer_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractFactory_Sl_FrameCounter_Sc_TimerInfo_Sc_BaseTimer_Sg_ = { "FrameCounter_Singleton", &SWIGTYPE_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t,0,0, swig_AbstractFactory_Sl_FrameCounter_Sc_TimerInfo_Sc_BaseTimer_Sg__methods, swig_AbstractFactory_Sl_FrameCounter_Sc_TimerInfo_Sc_BaseTimer_Sg__attributes, { "FrameCounter_Singleton", swig_AbstractFactory_Sl_FrameCounter_Sc_TimerInfo_Sc_BaseTimer_Sg__cls_methods, swig_AbstractFactory_Sl_FrameCounter_Sc_TimerInfo_Sc_BaseTimer_Sg__cls_attributes, swig_AbstractFactory_Sl_FrameCounter_Sc_TimerInfo_Sc_BaseTimer_Sg__cls_constants }, swig_AbstractFactory_Sl_FrameCounter_Sc_TimerInfo_Sc_BaseTimer_Sg__bases, swig_AbstractFactory_Sl_FrameCounter_Sc_TimerInfo_Sc_BaseTimer_Sg__base_names };

static int _wrap_EntityFactory_Factory_create(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *arg1 = (AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *) 0 ;
  BaseEntityInfo *arg2 = (BaseEntityInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::create",1,"AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::create",2,"BaseEntityInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t,0))){
    SWIG_fail_ptr("EntityFactory_Factory_create",1,SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntityInfo,0))){
    SWIG_fail_ptr("EntityFactory_Factory_create",2,SWIGTYPE_p_BaseEntityInfo);
  }
  
  result = (IDType)(arg1)->create(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityFactory_Factory_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *arg1 = (AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *) 0 ;
  IDType arg2 ;
  BaseEntity *result = 0 ;
  
  SWIG_check_num_args("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::get",1,"AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::get",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t,0))){
    SWIG_fail_ptr("EntityFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (BaseEntity *)((AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > const *)arg1)->get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityFactory_Factory_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *arg1 = (AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::get",1,"AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::get",2,"BaseEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t,0))){
    SWIG_fail_ptr("EntityFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("EntityFactory_Factory_get",2,SWIGTYPE_p_BaseEntity);
  }
  
  result = (IDType)((AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > const *)arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityFactory_Factory_destroy(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *arg1 = (AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *) 0 ;
  IDType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::destroy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::destroy",1,"AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::destroy",2,"IDType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t,0))){
    SWIG_fail_ptr("EntityFactory_Factory_destroy",1,SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("EntityFactory_Factory_destroy",2,SWIGTYPE_p_long_long);
  }
  
  result = (bool)(arg1)->destroy(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityFactory_Factory_destroyAll(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *arg1 = (AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *) 0 ;
  
  SWIG_check_num_args("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::destroyAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::destroyAll",1,"AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t,0))){
    SWIG_fail_ptr("EntityFactory_Factory_destroyAll",1,SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t);
  }
  
  (arg1)->destroyAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityFactory_Factory_size(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *arg1 = (AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *) 0 ;
  int result;
  
  SWIG_check_num_args("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::size",1,"AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t,0))){
    SWIG_fail_ptr("EntityFactory_Factory_size",1,SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t);
  }
  
  result = (int)((AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityFactory_Factory_get__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *arg1 = (AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *) 0 ;
  btAlignedObjectArray< BaseEntity * > *arg2 = 0 ;
  
  SWIG_check_num_args("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::get",1,"AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::get",2,"btAlignedObjectArray< BaseEntity * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t,0))){
    SWIG_fail_ptr("EntityFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_BaseEntity_p_t,0))){
    SWIG_fail_ptr("EntityFactory_Factory_get",2,SWIGTYPE_p_btAlignedObjectArrayT_BaseEntity_p_t);
  }
  
  ((AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > const *)arg1)->get(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityFactory_Factory_get(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseEntity, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityFactory_Factory_get__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_BaseEntity_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityFactory_Factory_get__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EntityFactory_Factory_get__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityFactory_Factory_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::get(IDType) const\n"
    "    AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::get(BaseEntity *) const\n"
    "    AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity >::get(btAlignedObjectArray< BaseEntity * > &) const\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_AbstractFactory_Sl_EntityFactory_Sc_BaseEntityInfo_Sc_BaseEntity_Sg__methods[] = {
    {"create", _wrap_EntityFactory_Factory_create}, 
    {"destroy", _wrap_EntityFactory_Factory_destroy}, 
    {"destroyAll", _wrap_EntityFactory_Factory_destroyAll}, 
    {"size", _wrap_EntityFactory_Factory_size}, 
    {"get", _wrap_EntityFactory_Factory_get}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_EntityFactory_Sc_BaseEntityInfo_Sc_BaseEntity_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_EntityFactory_Sc_BaseEntityInfo_Sc_BaseEntity_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractFactory_Sl_EntityFactory_Sc_BaseEntityInfo_Sc_BaseEntity_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractFactory_Sl_EntityFactory_Sc_BaseEntityInfo_Sc_BaseEntity_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractFactory_Sl_EntityFactory_Sc_BaseEntityInfo_Sc_BaseEntity_Sg__bases[] = {0};
static const char *swig_AbstractFactory_Sl_EntityFactory_Sc_BaseEntityInfo_Sc_BaseEntity_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractFactory_Sl_EntityFactory_Sc_BaseEntityInfo_Sc_BaseEntity_Sg_ = { "EntityFactory_Factory", &SWIGTYPE_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t,0,0, swig_AbstractFactory_Sl_EntityFactory_Sc_BaseEntityInfo_Sc_BaseEntity_Sg__methods, swig_AbstractFactory_Sl_EntityFactory_Sc_BaseEntityInfo_Sc_BaseEntity_Sg__attributes, { "EntityFactory_Factory", swig_AbstractFactory_Sl_EntityFactory_Sc_BaseEntityInfo_Sc_BaseEntity_Sg__cls_methods, swig_AbstractFactory_Sl_EntityFactory_Sc_BaseEntityInfo_Sc_BaseEntity_Sg__cls_attributes, swig_AbstractFactory_Sl_EntityFactory_Sc_BaseEntityInfo_Sc_BaseEntity_Sg__cls_constants }, swig_AbstractFactory_Sl_EntityFactory_Sc_BaseEntityInfo_Sc_BaseEntity_Sg__bases, swig_AbstractFactory_Sl_EntityFactory_Sc_BaseEntityInfo_Sc_BaseEntity_Sg__base_names };

static int _wrap_AnimationControllerFactory_Factory_create(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *arg1 = (AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *) 0 ;
  AnimationControllerInfo *arg2 = (AnimationControllerInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::create",1,"AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::create",2,"AnimationControllerInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t,0))){
    SWIG_fail_ptr("AnimationControllerFactory_Factory_create",1,SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AnimationControllerInfo,0))){
    SWIG_fail_ptr("AnimationControllerFactory_Factory_create",2,SWIGTYPE_p_AnimationControllerInfo);
  }
  
  result = (IDType)(arg1)->create(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationControllerFactory_Factory_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *arg1 = (AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *) 0 ;
  IDType arg2 ;
  BaseEntityAnimationController *result = 0 ;
  
  SWIG_check_num_args("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::get",1,"AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::get",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t,0))){
    SWIG_fail_ptr("AnimationControllerFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (BaseEntityAnimationController *)((AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > const *)arg1)->get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseEntityAnimationController,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationControllerFactory_Factory_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *arg1 = (AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *) 0 ;
  BaseEntityAnimationController *arg2 = (BaseEntityAnimationController *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::get",1,"AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::get",2,"BaseEntityAnimationController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t,0))){
    SWIG_fail_ptr("AnimationControllerFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntityAnimationController,0))){
    SWIG_fail_ptr("AnimationControllerFactory_Factory_get",2,SWIGTYPE_p_BaseEntityAnimationController);
  }
  
  result = (IDType)((AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > const *)arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationControllerFactory_Factory_destroy(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *arg1 = (AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *) 0 ;
  IDType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::destroy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::destroy",1,"AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::destroy",2,"IDType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t,0))){
    SWIG_fail_ptr("AnimationControllerFactory_Factory_destroy",1,SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("AnimationControllerFactory_Factory_destroy",2,SWIGTYPE_p_long_long);
  }
  
  result = (bool)(arg1)->destroy(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationControllerFactory_Factory_destroyAll(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *arg1 = (AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *) 0 ;
  
  SWIG_check_num_args("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::destroyAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::destroyAll",1,"AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t,0))){
    SWIG_fail_ptr("AnimationControllerFactory_Factory_destroyAll",1,SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t);
  }
  
  (arg1)->destroyAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationControllerFactory_Factory_size(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *arg1 = (AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *) 0 ;
  int result;
  
  SWIG_check_num_args("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::size",1,"AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t,0))){
    SWIG_fail_ptr("AnimationControllerFactory_Factory_size",1,SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t);
  }
  
  result = (int)((AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationControllerFactory_Factory_get__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *arg1 = (AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *) 0 ;
  btAlignedObjectArray< BaseEntityAnimationController * > *arg2 = 0 ;
  
  SWIG_check_num_args("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::get",1,"AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::get",2,"btAlignedObjectArray< BaseEntityAnimationController * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t,0))){
    SWIG_fail_ptr("AnimationControllerFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_BaseEntityAnimationController_p_t,0))){
    SWIG_fail_ptr("AnimationControllerFactory_Factory_get",2,SWIGTYPE_p_btAlignedObjectArrayT_BaseEntityAnimationController_p_t);
  }
  
  ((AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > const *)arg1)->get(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationControllerFactory_Factory_get(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseEntityAnimationController, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AnimationControllerFactory_Factory_get__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_BaseEntityAnimationController_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AnimationControllerFactory_Factory_get__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AnimationControllerFactory_Factory_get__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AnimationControllerFactory_Factory_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::get(IDType) const\n"
    "    AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::get(BaseEntityAnimationController *) const\n"
    "    AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController >::get(btAlignedObjectArray< BaseEntityAnimationController * > &) const\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_AbstractFactory_Sl_AnimationControllerFactory_Sc_AnimationControllerInfo_Sc_BaseEntityAnimationController_Sg__methods[] = {
    {"create", _wrap_AnimationControllerFactory_Factory_create}, 
    {"destroy", _wrap_AnimationControllerFactory_Factory_destroy}, 
    {"destroyAll", _wrap_AnimationControllerFactory_Factory_destroyAll}, 
    {"size", _wrap_AnimationControllerFactory_Factory_size}, 
    {"get", _wrap_AnimationControllerFactory_Factory_get}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_AnimationControllerFactory_Sc_AnimationControllerInfo_Sc_BaseEntityAnimationController_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_AnimationControllerFactory_Sc_AnimationControllerInfo_Sc_BaseEntityAnimationController_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractFactory_Sl_AnimationControllerFactory_Sc_AnimationControllerInfo_Sc_BaseEntityAnimationController_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractFactory_Sl_AnimationControllerFactory_Sc_AnimationControllerInfo_Sc_BaseEntityAnimationController_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractFactory_Sl_AnimationControllerFactory_Sc_AnimationControllerInfo_Sc_BaseEntityAnimationController_Sg__bases[] = {0};
static const char *swig_AbstractFactory_Sl_AnimationControllerFactory_Sc_AnimationControllerInfo_Sc_BaseEntityAnimationController_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractFactory_Sl_AnimationControllerFactory_Sc_AnimationControllerInfo_Sc_BaseEntityAnimationController_Sg_ = { "AnimationControllerFactory_Factory", &SWIGTYPE_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t,0,0, swig_AbstractFactory_Sl_AnimationControllerFactory_Sc_AnimationControllerInfo_Sc_BaseEntityAnimationController_Sg__methods, swig_AbstractFactory_Sl_AnimationControllerFactory_Sc_AnimationControllerInfo_Sc_BaseEntityAnimationController_Sg__attributes, { "AnimationControllerFactory_Factory", swig_AbstractFactory_Sl_AnimationControllerFactory_Sc_AnimationControllerInfo_Sc_BaseEntityAnimationController_Sg__cls_methods, swig_AbstractFactory_Sl_AnimationControllerFactory_Sc_AnimationControllerInfo_Sc_BaseEntityAnimationController_Sg__cls_attributes, swig_AbstractFactory_Sl_AnimationControllerFactory_Sc_AnimationControllerInfo_Sc_BaseEntityAnimationController_Sg__cls_constants }, swig_AbstractFactory_Sl_AnimationControllerFactory_Sc_AnimationControllerInfo_Sc_BaseEntityAnimationController_Sg__bases, swig_AbstractFactory_Sl_AnimationControllerFactory_Sc_AnimationControllerInfo_Sc_BaseEntityAnimationController_Sg__base_names };

static int _wrap_CameraFactory_Factory_create(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *arg1 = (AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *) 0 ;
  BaseCameraInfo *arg2 = (BaseCameraInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::create",1,"AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::create",2,"BaseCameraInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t,0))){
    SWIG_fail_ptr("CameraFactory_Factory_create",1,SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("CameraFactory_Factory_create",2,SWIGTYPE_p_BaseCameraInfo);
  }
  
  result = (IDType)(arg1)->create(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraFactory_Factory_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *arg1 = (AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *) 0 ;
  IDType arg2 ;
  BaseCamera *result = 0 ;
  
  SWIG_check_num_args("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::get",1,"AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::get",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t,0))){
    SWIG_fail_ptr("CameraFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (BaseCamera *)((AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > const *)arg1)->get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraFactory_Factory_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *arg1 = (AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *) 0 ;
  BaseCamera *arg2 = (BaseCamera *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::get",1,"AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::get",2,"BaseCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t,0))){
    SWIG_fail_ptr("CameraFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("CameraFactory_Factory_get",2,SWIGTYPE_p_BaseCamera);
  }
  
  result = (IDType)((AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > const *)arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraFactory_Factory_destroy(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *arg1 = (AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *) 0 ;
  IDType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::destroy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::destroy",1,"AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::destroy",2,"IDType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t,0))){
    SWIG_fail_ptr("CameraFactory_Factory_destroy",1,SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("CameraFactory_Factory_destroy",2,SWIGTYPE_p_long_long);
  }
  
  result = (bool)(arg1)->destroy(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraFactory_Factory_destroyAll(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *arg1 = (AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *) 0 ;
  
  SWIG_check_num_args("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::destroyAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::destroyAll",1,"AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t,0))){
    SWIG_fail_ptr("CameraFactory_Factory_destroyAll",1,SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t);
  }
  
  (arg1)->destroyAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraFactory_Factory_size(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *arg1 = (AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *) 0 ;
  int result;
  
  SWIG_check_num_args("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::size",1,"AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t,0))){
    SWIG_fail_ptr("CameraFactory_Factory_size",1,SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t);
  }
  
  result = (int)((AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraFactory_Factory_get__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *arg1 = (AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *) 0 ;
  btAlignedObjectArray< BaseCamera * > *arg2 = 0 ;
  
  SWIG_check_num_args("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::get",1,"AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::get",2,"btAlignedObjectArray< BaseCamera * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t,0))){
    SWIG_fail_ptr("CameraFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_BaseCamera_p_t,0))){
    SWIG_fail_ptr("CameraFactory_Factory_get",2,SWIGTYPE_p_btAlignedObjectArrayT_BaseCamera_p_t);
  }
  
  ((AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > const *)arg1)->get(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraFactory_Factory_get(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseCamera, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CameraFactory_Factory_get__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_BaseCamera_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CameraFactory_Factory_get__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CameraFactory_Factory_get__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CameraFactory_Factory_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::get(IDType) const\n"
    "    AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::get(BaseCamera *) const\n"
    "    AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera >::get(btAlignedObjectArray< BaseCamera * > &) const\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_AbstractFactory_Sl_CameraFactory_Sc_BaseCameraInfo_Sc_BaseCamera_Sg__methods[] = {
    {"create", _wrap_CameraFactory_Factory_create}, 
    {"destroy", _wrap_CameraFactory_Factory_destroy}, 
    {"destroyAll", _wrap_CameraFactory_Factory_destroyAll}, 
    {"size", _wrap_CameraFactory_Factory_size}, 
    {"get", _wrap_CameraFactory_Factory_get}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_CameraFactory_Sc_BaseCameraInfo_Sc_BaseCamera_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_CameraFactory_Sc_BaseCameraInfo_Sc_BaseCamera_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractFactory_Sl_CameraFactory_Sc_BaseCameraInfo_Sc_BaseCamera_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractFactory_Sl_CameraFactory_Sc_BaseCameraInfo_Sc_BaseCamera_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractFactory_Sl_CameraFactory_Sc_BaseCameraInfo_Sc_BaseCamera_Sg__bases[] = {0};
static const char *swig_AbstractFactory_Sl_CameraFactory_Sc_BaseCameraInfo_Sc_BaseCamera_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractFactory_Sl_CameraFactory_Sc_BaseCameraInfo_Sc_BaseCamera_Sg_ = { "CameraFactory_Factory", &SWIGTYPE_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t,0,0, swig_AbstractFactory_Sl_CameraFactory_Sc_BaseCameraInfo_Sc_BaseCamera_Sg__methods, swig_AbstractFactory_Sl_CameraFactory_Sc_BaseCameraInfo_Sc_BaseCamera_Sg__attributes, { "CameraFactory_Factory", swig_AbstractFactory_Sl_CameraFactory_Sc_BaseCameraInfo_Sc_BaseCamera_Sg__cls_methods, swig_AbstractFactory_Sl_CameraFactory_Sc_BaseCameraInfo_Sc_BaseCamera_Sg__cls_attributes, swig_AbstractFactory_Sl_CameraFactory_Sc_BaseCameraInfo_Sc_BaseCamera_Sg__cls_constants }, swig_AbstractFactory_Sl_CameraFactory_Sc_BaseCameraInfo_Sc_BaseCamera_Sg__bases, swig_AbstractFactory_Sl_CameraFactory_Sc_BaseCameraInfo_Sc_BaseCamera_Sg__base_names };

static int _wrap_CollisionFilterBehaviorFactory_Factory_create(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *arg1 = (AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *) 0 ;
  CollisionFilterBehaviorInfo *arg2 = (CollisionFilterBehaviorInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::create",1,"AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::create",2,"CollisionFilterBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t,0))){
    SWIG_fail_ptr("CollisionFilterBehaviorFactory_Factory_create",1,SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CollisionFilterBehaviorInfo,0))){
    SWIG_fail_ptr("CollisionFilterBehaviorFactory_Factory_create",2,SWIGTYPE_p_CollisionFilterBehaviorInfo);
  }
  
  result = (IDType)(arg1)->create(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionFilterBehaviorFactory_Factory_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *arg1 = (AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *) 0 ;
  IDType arg2 ;
  BaseCollisionFilterBehavior *result = 0 ;
  
  SWIG_check_num_args("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::get",1,"AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::get",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t,0))){
    SWIG_fail_ptr("CollisionFilterBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (BaseCollisionFilterBehavior *)((AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > const *)arg1)->get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCollisionFilterBehavior,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionFilterBehaviorFactory_Factory_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *arg1 = (AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *) 0 ;
  BaseCollisionFilterBehavior *arg2 = (BaseCollisionFilterBehavior *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::get",1,"AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::get",2,"BaseCollisionFilterBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t,0))){
    SWIG_fail_ptr("CollisionFilterBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseCollisionFilterBehavior,0))){
    SWIG_fail_ptr("CollisionFilterBehaviorFactory_Factory_get",2,SWIGTYPE_p_BaseCollisionFilterBehavior);
  }
  
  result = (IDType)((AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > const *)arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionFilterBehaviorFactory_Factory_destroy(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *arg1 = (AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *) 0 ;
  IDType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::destroy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::destroy",1,"AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::destroy",2,"IDType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t,0))){
    SWIG_fail_ptr("CollisionFilterBehaviorFactory_Factory_destroy",1,SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("CollisionFilterBehaviorFactory_Factory_destroy",2,SWIGTYPE_p_long_long);
  }
  
  result = (bool)(arg1)->destroy(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionFilterBehaviorFactory_Factory_destroyAll(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *arg1 = (AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *) 0 ;
  
  SWIG_check_num_args("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::destroyAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::destroyAll",1,"AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t,0))){
    SWIG_fail_ptr("CollisionFilterBehaviorFactory_Factory_destroyAll",1,SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t);
  }
  
  (arg1)->destroyAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionFilterBehaviorFactory_Factory_size(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *arg1 = (AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *) 0 ;
  int result;
  
  SWIG_check_num_args("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::size",1,"AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t,0))){
    SWIG_fail_ptr("CollisionFilterBehaviorFactory_Factory_size",1,SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t);
  }
  
  result = (int)((AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionFilterBehaviorFactory_Factory_get__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *arg1 = (AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *) 0 ;
  btAlignedObjectArray< BaseCollisionFilterBehavior * > *arg2 = 0 ;
  
  SWIG_check_num_args("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::get",1,"AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::get",2,"btAlignedObjectArray< BaseCollisionFilterBehavior * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t,0))){
    SWIG_fail_ptr("CollisionFilterBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_BaseCollisionFilterBehavior_p_t,0))){
    SWIG_fail_ptr("CollisionFilterBehaviorFactory_Factory_get",2,SWIGTYPE_p_btAlignedObjectArrayT_BaseCollisionFilterBehavior_p_t);
  }
  
  ((AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > const *)arg1)->get(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionFilterBehaviorFactory_Factory_get(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseCollisionFilterBehavior, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CollisionFilterBehaviorFactory_Factory_get__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_BaseCollisionFilterBehavior_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CollisionFilterBehaviorFactory_Factory_get__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CollisionFilterBehaviorFactory_Factory_get__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollisionFilterBehaviorFactory_Factory_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::get(IDType) const\n"
    "    AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::get(BaseCollisionFilterBehavior *) const\n"
    "    AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior >::get(btAlignedObjectArray< BaseCollisionFilterBehavior * > &) const\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_AbstractFactory_Sl_CollisionFilterBehaviorFactory_Sc_CollisionFilterBehaviorInfo_Sc_BaseCollisionFilterBehavior_Sg__methods[] = {
    {"create", _wrap_CollisionFilterBehaviorFactory_Factory_create}, 
    {"destroy", _wrap_CollisionFilterBehaviorFactory_Factory_destroy}, 
    {"destroyAll", _wrap_CollisionFilterBehaviorFactory_Factory_destroyAll}, 
    {"size", _wrap_CollisionFilterBehaviorFactory_Factory_size}, 
    {"get", _wrap_CollisionFilterBehaviorFactory_Factory_get}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_CollisionFilterBehaviorFactory_Sc_CollisionFilterBehaviorInfo_Sc_BaseCollisionFilterBehavior_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_CollisionFilterBehaviorFactory_Sc_CollisionFilterBehaviorInfo_Sc_BaseCollisionFilterBehavior_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractFactory_Sl_CollisionFilterBehaviorFactory_Sc_CollisionFilterBehaviorInfo_Sc_BaseCollisionFilterBehavior_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractFactory_Sl_CollisionFilterBehaviorFactory_Sc_CollisionFilterBehaviorInfo_Sc_BaseCollisionFilterBehavior_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractFactory_Sl_CollisionFilterBehaviorFactory_Sc_CollisionFilterBehaviorInfo_Sc_BaseCollisionFilterBehavior_Sg__bases[] = {0};
static const char *swig_AbstractFactory_Sl_CollisionFilterBehaviorFactory_Sc_CollisionFilterBehaviorInfo_Sc_BaseCollisionFilterBehavior_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractFactory_Sl_CollisionFilterBehaviorFactory_Sc_CollisionFilterBehaviorInfo_Sc_BaseCollisionFilterBehavior_Sg_ = { "CollisionFilterBehaviorFactory_Factory", &SWIGTYPE_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t,0,0, swig_AbstractFactory_Sl_CollisionFilterBehaviorFactory_Sc_CollisionFilterBehaviorInfo_Sc_BaseCollisionFilterBehavior_Sg__methods, swig_AbstractFactory_Sl_CollisionFilterBehaviorFactory_Sc_CollisionFilterBehaviorInfo_Sc_BaseCollisionFilterBehavior_Sg__attributes, { "CollisionFilterBehaviorFactory_Factory", swig_AbstractFactory_Sl_CollisionFilterBehaviorFactory_Sc_CollisionFilterBehaviorInfo_Sc_BaseCollisionFilterBehavior_Sg__cls_methods, swig_AbstractFactory_Sl_CollisionFilterBehaviorFactory_Sc_CollisionFilterBehaviorInfo_Sc_BaseCollisionFilterBehavior_Sg__cls_attributes, swig_AbstractFactory_Sl_CollisionFilterBehaviorFactory_Sc_CollisionFilterBehaviorInfo_Sc_BaseCollisionFilterBehavior_Sg__cls_constants }, swig_AbstractFactory_Sl_CollisionFilterBehaviorFactory_Sc_CollisionFilterBehaviorInfo_Sc_BaseCollisionFilterBehavior_Sg__bases, swig_AbstractFactory_Sl_CollisionFilterBehaviorFactory_Sc_CollisionFilterBehaviorInfo_Sc_BaseCollisionFilterBehavior_Sg__base_names };

static int _wrap_CollisionResponseBehaviorFactory_Factory_create(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *arg1 = (AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *) 0 ;
  CollisionResponseBehaviorInfo *arg2 = (CollisionResponseBehaviorInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::create",1,"AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::create",2,"CollisionResponseBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t,0))){
    SWIG_fail_ptr("CollisionResponseBehaviorFactory_Factory_create",1,SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CollisionResponseBehaviorInfo,0))){
    SWIG_fail_ptr("CollisionResponseBehaviorFactory_Factory_create",2,SWIGTYPE_p_CollisionResponseBehaviorInfo);
  }
  
  result = (IDType)(arg1)->create(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponseBehaviorFactory_Factory_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *arg1 = (AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *) 0 ;
  IDType arg2 ;
  BaseCollisionResponseBehavior *result = 0 ;
  
  SWIG_check_num_args("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::get",1,"AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::get",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t,0))){
    SWIG_fail_ptr("CollisionResponseBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (BaseCollisionResponseBehavior *)((AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > const *)arg1)->get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCollisionResponseBehavior,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponseBehaviorFactory_Factory_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *arg1 = (AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *) 0 ;
  BaseCollisionResponseBehavior *arg2 = (BaseCollisionResponseBehavior *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::get",1,"AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::get",2,"BaseCollisionResponseBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t,0))){
    SWIG_fail_ptr("CollisionResponseBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseCollisionResponseBehavior,0))){
    SWIG_fail_ptr("CollisionResponseBehaviorFactory_Factory_get",2,SWIGTYPE_p_BaseCollisionResponseBehavior);
  }
  
  result = (IDType)((AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > const *)arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponseBehaviorFactory_Factory_destroy(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *arg1 = (AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *) 0 ;
  IDType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::destroy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::destroy",1,"AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::destroy",2,"IDType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t,0))){
    SWIG_fail_ptr("CollisionResponseBehaviorFactory_Factory_destroy",1,SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("CollisionResponseBehaviorFactory_Factory_destroy",2,SWIGTYPE_p_long_long);
  }
  
  result = (bool)(arg1)->destroy(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponseBehaviorFactory_Factory_destroyAll(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *arg1 = (AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *) 0 ;
  
  SWIG_check_num_args("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::destroyAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::destroyAll",1,"AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t,0))){
    SWIG_fail_ptr("CollisionResponseBehaviorFactory_Factory_destroyAll",1,SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t);
  }
  
  (arg1)->destroyAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponseBehaviorFactory_Factory_size(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *arg1 = (AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *) 0 ;
  int result;
  
  SWIG_check_num_args("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::size",1,"AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t,0))){
    SWIG_fail_ptr("CollisionResponseBehaviorFactory_Factory_size",1,SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t);
  }
  
  result = (int)((AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponseBehaviorFactory_Factory_get__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *arg1 = (AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *) 0 ;
  btAlignedObjectArray< BaseCollisionResponseBehavior * > *arg2 = 0 ;
  
  SWIG_check_num_args("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::get",1,"AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::get",2,"btAlignedObjectArray< BaseCollisionResponseBehavior * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t,0))){
    SWIG_fail_ptr("CollisionResponseBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_BaseCollisionResponseBehavior_p_t,0))){
    SWIG_fail_ptr("CollisionResponseBehaviorFactory_Factory_get",2,SWIGTYPE_p_btAlignedObjectArrayT_BaseCollisionResponseBehavior_p_t);
  }
  
  ((AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > const *)arg1)->get(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponseBehaviorFactory_Factory_get(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseCollisionResponseBehavior, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CollisionResponseBehaviorFactory_Factory_get__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_BaseCollisionResponseBehavior_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CollisionResponseBehaviorFactory_Factory_get__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CollisionResponseBehaviorFactory_Factory_get__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollisionResponseBehaviorFactory_Factory_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::get(IDType) const\n"
    "    AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::get(BaseCollisionResponseBehavior *) const\n"
    "    AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior >::get(btAlignedObjectArray< BaseCollisionResponseBehavior * > &) const\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_AbstractFactory_Sl_CollisionResponseBehaviorFactory_Sc_CollisionResponseBehaviorInfo_Sc_BaseCollisionResponseBehavior_Sg__methods[] = {
    {"create", _wrap_CollisionResponseBehaviorFactory_Factory_create}, 
    {"destroy", _wrap_CollisionResponseBehaviorFactory_Factory_destroy}, 
    {"destroyAll", _wrap_CollisionResponseBehaviorFactory_Factory_destroyAll}, 
    {"size", _wrap_CollisionResponseBehaviorFactory_Factory_size}, 
    {"get", _wrap_CollisionResponseBehaviorFactory_Factory_get}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_CollisionResponseBehaviorFactory_Sc_CollisionResponseBehaviorInfo_Sc_BaseCollisionResponseBehavior_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_CollisionResponseBehaviorFactory_Sc_CollisionResponseBehaviorInfo_Sc_BaseCollisionResponseBehavior_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractFactory_Sl_CollisionResponseBehaviorFactory_Sc_CollisionResponseBehaviorInfo_Sc_BaseCollisionResponseBehavior_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractFactory_Sl_CollisionResponseBehaviorFactory_Sc_CollisionResponseBehaviorInfo_Sc_BaseCollisionResponseBehavior_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractFactory_Sl_CollisionResponseBehaviorFactory_Sc_CollisionResponseBehaviorInfo_Sc_BaseCollisionResponseBehavior_Sg__bases[] = {0};
static const char *swig_AbstractFactory_Sl_CollisionResponseBehaviorFactory_Sc_CollisionResponseBehaviorInfo_Sc_BaseCollisionResponseBehavior_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractFactory_Sl_CollisionResponseBehaviorFactory_Sc_CollisionResponseBehaviorInfo_Sc_BaseCollisionResponseBehavior_Sg_ = { "CollisionResponseBehaviorFactory_Factory", &SWIGTYPE_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t,0,0, swig_AbstractFactory_Sl_CollisionResponseBehaviorFactory_Sc_CollisionResponseBehaviorInfo_Sc_BaseCollisionResponseBehavior_Sg__methods, swig_AbstractFactory_Sl_CollisionResponseBehaviorFactory_Sc_CollisionResponseBehaviorInfo_Sc_BaseCollisionResponseBehavior_Sg__attributes, { "CollisionResponseBehaviorFactory_Factory", swig_AbstractFactory_Sl_CollisionResponseBehaviorFactory_Sc_CollisionResponseBehaviorInfo_Sc_BaseCollisionResponseBehavior_Sg__cls_methods, swig_AbstractFactory_Sl_CollisionResponseBehaviorFactory_Sc_CollisionResponseBehaviorInfo_Sc_BaseCollisionResponseBehavior_Sg__cls_attributes, swig_AbstractFactory_Sl_CollisionResponseBehaviorFactory_Sc_CollisionResponseBehaviorInfo_Sc_BaseCollisionResponseBehavior_Sg__cls_constants }, swig_AbstractFactory_Sl_CollisionResponseBehaviorFactory_Sc_CollisionResponseBehaviorInfo_Sc_BaseCollisionResponseBehavior_Sg__bases, swig_AbstractFactory_Sl_CollisionResponseBehaviorFactory_Sc_CollisionResponseBehaviorInfo_Sc_BaseCollisionResponseBehavior_Sg__base_names };

static int _wrap_CollisionShapeFactory_Factory_create(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *arg1 = (AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *) 0 ;
  CollisionShapeInfo *arg2 = (CollisionShapeInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::create",1,"AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::create",2,"CollisionShapeInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t,0))){
    SWIG_fail_ptr("CollisionShapeFactory_Factory_create",1,SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CollisionShapeInfo,0))){
    SWIG_fail_ptr("CollisionShapeFactory_Factory_create",2,SWIGTYPE_p_CollisionShapeInfo);
  }
  
  result = (IDType)(arg1)->create(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeFactory_Factory_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *arg1 = (AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *) 0 ;
  IDType arg2 ;
  btCollisionShapeWrapper *result = 0 ;
  
  SWIG_check_num_args("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::get",1,"AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::get",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t,0))){
    SWIG_fail_ptr("CollisionShapeFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (btCollisionShapeWrapper *)((AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > const *)arg1)->get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShapeWrapper,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeFactory_Factory_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *arg1 = (AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *) 0 ;
  btCollisionShapeWrapper *arg2 = (btCollisionShapeWrapper *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::get",1,"AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::get",2,"btCollisionShapeWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t,0))){
    SWIG_fail_ptr("CollisionShapeFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionShapeWrapper,0))){
    SWIG_fail_ptr("CollisionShapeFactory_Factory_get",2,SWIGTYPE_p_btCollisionShapeWrapper);
  }
  
  result = (IDType)((AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > const *)arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeFactory_Factory_destroy(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *arg1 = (AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *) 0 ;
  IDType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::destroy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::destroy",1,"AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::destroy",2,"IDType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t,0))){
    SWIG_fail_ptr("CollisionShapeFactory_Factory_destroy",1,SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("CollisionShapeFactory_Factory_destroy",2,SWIGTYPE_p_long_long);
  }
  
  result = (bool)(arg1)->destroy(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeFactory_Factory_destroyAll(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *arg1 = (AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *) 0 ;
  
  SWIG_check_num_args("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::destroyAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::destroyAll",1,"AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t,0))){
    SWIG_fail_ptr("CollisionShapeFactory_Factory_destroyAll",1,SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t);
  }
  
  (arg1)->destroyAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeFactory_Factory_size(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *arg1 = (AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *) 0 ;
  int result;
  
  SWIG_check_num_args("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::size",1,"AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t,0))){
    SWIG_fail_ptr("CollisionShapeFactory_Factory_size",1,SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t);
  }
  
  result = (int)((AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeFactory_Factory_get__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *arg1 = (AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *) 0 ;
  btAlignedObjectArray< btCollisionShapeWrapper * > *arg2 = 0 ;
  
  SWIG_check_num_args("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::get",1,"AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::get",2,"btAlignedObjectArray< btCollisionShapeWrapper * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t,0))){
    SWIG_fail_ptr("CollisionShapeFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btCollisionShapeWrapper_p_t,0))){
    SWIG_fail_ptr("CollisionShapeFactory_Factory_get",2,SWIGTYPE_p_btAlignedObjectArrayT_btCollisionShapeWrapper_p_t);
  }
  
  ((AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > const *)arg1)->get(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeFactory_Factory_get(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btCollisionShapeWrapper, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CollisionShapeFactory_Factory_get__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_btCollisionShapeWrapper_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CollisionShapeFactory_Factory_get__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CollisionShapeFactory_Factory_get__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollisionShapeFactory_Factory_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::get(IDType) const\n"
    "    AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::get(btCollisionShapeWrapper *) const\n"
    "    AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper >::get(btAlignedObjectArray< btCollisionShapeWrapper * > &) const\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_AbstractFactory_Sl_CollisionShapeFactory_Sc_CollisionShapeInfo_Sc_btCollisionShapeWrapper_Sg__methods[] = {
    {"create", _wrap_CollisionShapeFactory_Factory_create}, 
    {"destroy", _wrap_CollisionShapeFactory_Factory_destroy}, 
    {"destroyAll", _wrap_CollisionShapeFactory_Factory_destroyAll}, 
    {"size", _wrap_CollisionShapeFactory_Factory_size}, 
    {"get", _wrap_CollisionShapeFactory_Factory_get}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_CollisionShapeFactory_Sc_CollisionShapeInfo_Sc_btCollisionShapeWrapper_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_CollisionShapeFactory_Sc_CollisionShapeInfo_Sc_btCollisionShapeWrapper_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractFactory_Sl_CollisionShapeFactory_Sc_CollisionShapeInfo_Sc_btCollisionShapeWrapper_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractFactory_Sl_CollisionShapeFactory_Sc_CollisionShapeInfo_Sc_btCollisionShapeWrapper_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractFactory_Sl_CollisionShapeFactory_Sc_CollisionShapeInfo_Sc_btCollisionShapeWrapper_Sg__bases[] = {0};
static const char *swig_AbstractFactory_Sl_CollisionShapeFactory_Sc_CollisionShapeInfo_Sc_btCollisionShapeWrapper_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractFactory_Sl_CollisionShapeFactory_Sc_CollisionShapeInfo_Sc_btCollisionShapeWrapper_Sg_ = { "CollisionShapeFactory_Factory", &SWIGTYPE_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t,0,0, swig_AbstractFactory_Sl_CollisionShapeFactory_Sc_CollisionShapeInfo_Sc_btCollisionShapeWrapper_Sg__methods, swig_AbstractFactory_Sl_CollisionShapeFactory_Sc_CollisionShapeInfo_Sc_btCollisionShapeWrapper_Sg__attributes, { "CollisionShapeFactory_Factory", swig_AbstractFactory_Sl_CollisionShapeFactory_Sc_CollisionShapeInfo_Sc_btCollisionShapeWrapper_Sg__cls_methods, swig_AbstractFactory_Sl_CollisionShapeFactory_Sc_CollisionShapeInfo_Sc_btCollisionShapeWrapper_Sg__cls_attributes, swig_AbstractFactory_Sl_CollisionShapeFactory_Sc_CollisionShapeInfo_Sc_btCollisionShapeWrapper_Sg__cls_constants }, swig_AbstractFactory_Sl_CollisionShapeFactory_Sc_CollisionShapeInfo_Sc_btCollisionShapeWrapper_Sg__bases, swig_AbstractFactory_Sl_CollisionShapeFactory_Sc_CollisionShapeInfo_Sc_btCollisionShapeWrapper_Sg__base_names };

static int _wrap_EntityStateMachineFactory_Factory_create(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *arg1 = (AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *) 0 ;
  EntityStateMachineInfo *arg2 = (EntityStateMachineInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::create",1,"AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::create",2,"EntityStateMachineInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t,0))){
    SWIG_fail_ptr("EntityStateMachineFactory_Factory_create",1,SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_EntityStateMachineInfo,0))){
    SWIG_fail_ptr("EntityStateMachineFactory_Factory_create",2,SWIGTYPE_p_EntityStateMachineInfo);
  }
  
  result = (IDType)(arg1)->create(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityStateMachineFactory_Factory_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *arg1 = (AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *) 0 ;
  IDType arg2 ;
  EntityStateMachine *result = 0 ;
  
  SWIG_check_num_args("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::get",1,"AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::get",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t,0))){
    SWIG_fail_ptr("EntityStateMachineFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (EntityStateMachine *)((AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > const *)arg1)->get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_EntityStateMachine,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityStateMachineFactory_Factory_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *arg1 = (AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *) 0 ;
  EntityStateMachine *arg2 = (EntityStateMachine *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::get",1,"AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::get",2,"EntityStateMachine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t,0))){
    SWIG_fail_ptr("EntityStateMachineFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_EntityStateMachine,0))){
    SWIG_fail_ptr("EntityStateMachineFactory_Factory_get",2,SWIGTYPE_p_EntityStateMachine);
  }
  
  result = (IDType)((AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > const *)arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityStateMachineFactory_Factory_destroy(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *arg1 = (AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *) 0 ;
  IDType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::destroy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::destroy",1,"AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::destroy",2,"IDType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t,0))){
    SWIG_fail_ptr("EntityStateMachineFactory_Factory_destroy",1,SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("EntityStateMachineFactory_Factory_destroy",2,SWIGTYPE_p_long_long);
  }
  
  result = (bool)(arg1)->destroy(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityStateMachineFactory_Factory_destroyAll(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *arg1 = (AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *) 0 ;
  
  SWIG_check_num_args("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::destroyAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::destroyAll",1,"AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t,0))){
    SWIG_fail_ptr("EntityStateMachineFactory_Factory_destroyAll",1,SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t);
  }
  
  (arg1)->destroyAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityStateMachineFactory_Factory_size(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *arg1 = (AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *) 0 ;
  int result;
  
  SWIG_check_num_args("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::size",1,"AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t,0))){
    SWIG_fail_ptr("EntityStateMachineFactory_Factory_size",1,SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t);
  }
  
  result = (int)((AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityStateMachineFactory_Factory_get__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *arg1 = (AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *) 0 ;
  btAlignedObjectArray< EntityStateMachine * > *arg2 = 0 ;
  
  SWIG_check_num_args("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::get",1,"AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::get",2,"btAlignedObjectArray< EntityStateMachine * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t,0))){
    SWIG_fail_ptr("EntityStateMachineFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_EntityStateMachine_p_t,0))){
    SWIG_fail_ptr("EntityStateMachineFactory_Factory_get",2,SWIGTYPE_p_btAlignedObjectArrayT_EntityStateMachine_p_t);
  }
  
  ((AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > const *)arg1)->get(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityStateMachineFactory_Factory_get(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_EntityStateMachine, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityStateMachineFactory_Factory_get__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_EntityStateMachine_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityStateMachineFactory_Factory_get__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EntityStateMachineFactory_Factory_get__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityStateMachineFactory_Factory_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::get(IDType) const\n"
    "    AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::get(EntityStateMachine *) const\n"
    "    AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine >::get(btAlignedObjectArray< EntityStateMachine * > &) const\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_AbstractFactory_Sl_EntityStateMachineFactory_Sc_EntityStateMachineInfo_Sc_EntityStateMachine_Sg__methods[] = {
    {"create", _wrap_EntityStateMachineFactory_Factory_create}, 
    {"destroy", _wrap_EntityStateMachineFactory_Factory_destroy}, 
    {"destroyAll", _wrap_EntityStateMachineFactory_Factory_destroyAll}, 
    {"size", _wrap_EntityStateMachineFactory_Factory_size}, 
    {"get", _wrap_EntityStateMachineFactory_Factory_get}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_EntityStateMachineFactory_Sc_EntityStateMachineInfo_Sc_EntityStateMachine_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_EntityStateMachineFactory_Sc_EntityStateMachineInfo_Sc_EntityStateMachine_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractFactory_Sl_EntityStateMachineFactory_Sc_EntityStateMachineInfo_Sc_EntityStateMachine_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractFactory_Sl_EntityStateMachineFactory_Sc_EntityStateMachineInfo_Sc_EntityStateMachine_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractFactory_Sl_EntityStateMachineFactory_Sc_EntityStateMachineInfo_Sc_EntityStateMachine_Sg__bases[] = {0};
static const char *swig_AbstractFactory_Sl_EntityStateMachineFactory_Sc_EntityStateMachineInfo_Sc_EntityStateMachine_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractFactory_Sl_EntityStateMachineFactory_Sc_EntityStateMachineInfo_Sc_EntityStateMachine_Sg_ = { "EntityStateMachineFactory_Factory", &SWIGTYPE_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t,0,0, swig_AbstractFactory_Sl_EntityStateMachineFactory_Sc_EntityStateMachineInfo_Sc_EntityStateMachine_Sg__methods, swig_AbstractFactory_Sl_EntityStateMachineFactory_Sc_EntityStateMachineInfo_Sc_EntityStateMachine_Sg__attributes, { "EntityStateMachineFactory_Factory", swig_AbstractFactory_Sl_EntityStateMachineFactory_Sc_EntityStateMachineInfo_Sc_EntityStateMachine_Sg__cls_methods, swig_AbstractFactory_Sl_EntityStateMachineFactory_Sc_EntityStateMachineInfo_Sc_EntityStateMachine_Sg__cls_attributes, swig_AbstractFactory_Sl_EntityStateMachineFactory_Sc_EntityStateMachineInfo_Sc_EntityStateMachine_Sg__cls_constants }, swig_AbstractFactory_Sl_EntityStateMachineFactory_Sc_EntityStateMachineInfo_Sc_EntityStateMachine_Sg__bases, swig_AbstractFactory_Sl_EntityStateMachineFactory_Sc_EntityStateMachineInfo_Sc_EntityStateMachine_Sg__base_names };

static int _wrap_ParticleEmitterBehaviorFactory_Factory_create(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *arg1 = (AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *) 0 ;
  ParticleEmitterBehaviorInfo *arg2 = (ParticleEmitterBehaviorInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::create",1,"AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::create",2,"ParticleEmitterBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorFactory_Factory_create",1,SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ParticleEmitterBehaviorInfo,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorFactory_Factory_create",2,SWIGTYPE_p_ParticleEmitterBehaviorInfo);
  }
  
  result = (IDType)(arg1)->create(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBehaviorFactory_Factory_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *arg1 = (AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *) 0 ;
  IDType arg2 ;
  BaseParticleEmitterBehavior *result = 0 ;
  
  SWIG_check_num_args("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::get",1,"AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::get",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (BaseParticleEmitterBehavior *)((AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > const *)arg1)->get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseParticleEmitterBehavior,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBehaviorFactory_Factory_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *arg1 = (AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *) 0 ;
  BaseParticleEmitterBehavior *arg2 = (BaseParticleEmitterBehavior *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::get",1,"AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::get",2,"BaseParticleEmitterBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseParticleEmitterBehavior,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorFactory_Factory_get",2,SWIGTYPE_p_BaseParticleEmitterBehavior);
  }
  
  result = (IDType)((AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > const *)arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBehaviorFactory_Factory_destroy(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *arg1 = (AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *) 0 ;
  IDType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::destroy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::destroy",1,"AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::destroy",2,"IDType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorFactory_Factory_destroy",1,SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorFactory_Factory_destroy",2,SWIGTYPE_p_long_long);
  }
  
  result = (bool)(arg1)->destroy(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBehaviorFactory_Factory_destroyAll(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *arg1 = (AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *) 0 ;
  
  SWIG_check_num_args("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::destroyAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::destroyAll",1,"AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorFactory_Factory_destroyAll",1,SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t);
  }
  
  (arg1)->destroyAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBehaviorFactory_Factory_size(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *arg1 = (AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *) 0 ;
  int result;
  
  SWIG_check_num_args("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::size",1,"AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorFactory_Factory_size",1,SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t);
  }
  
  result = (int)((AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBehaviorFactory_Factory_get__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *arg1 = (AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *) 0 ;
  btAlignedObjectArray< BaseParticleEmitterBehavior * > *arg2 = 0 ;
  
  SWIG_check_num_args("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::get",1,"AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::get",2,"btAlignedObjectArray< BaseParticleEmitterBehavior * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_BaseParticleEmitterBehavior_p_t,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorFactory_Factory_get",2,SWIGTYPE_p_btAlignedObjectArrayT_BaseParticleEmitterBehavior_p_t);
  }
  
  ((AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > const *)arg1)->get(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBehaviorFactory_Factory_get(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseParticleEmitterBehavior, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleEmitterBehaviorFactory_Factory_get__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_BaseParticleEmitterBehavior_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleEmitterBehaviorFactory_Factory_get__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ParticleEmitterBehaviorFactory_Factory_get__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ParticleEmitterBehaviorFactory_Factory_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::get(IDType) const\n"
    "    AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::get(BaseParticleEmitterBehavior *) const\n"
    "    AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior >::get(btAlignedObjectArray< BaseParticleEmitterBehavior * > &) const\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_AbstractFactory_Sl_ParticleEmitterBehaviorFactory_Sc_ParticleEmitterBehaviorInfo_Sc_BaseParticleEmitterBehavior_Sg__methods[] = {
    {"create", _wrap_ParticleEmitterBehaviorFactory_Factory_create}, 
    {"destroy", _wrap_ParticleEmitterBehaviorFactory_Factory_destroy}, 
    {"destroyAll", _wrap_ParticleEmitterBehaviorFactory_Factory_destroyAll}, 
    {"size", _wrap_ParticleEmitterBehaviorFactory_Factory_size}, 
    {"get", _wrap_ParticleEmitterBehaviorFactory_Factory_get}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_ParticleEmitterBehaviorFactory_Sc_ParticleEmitterBehaviorInfo_Sc_BaseParticleEmitterBehavior_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_ParticleEmitterBehaviorFactory_Sc_ParticleEmitterBehaviorInfo_Sc_BaseParticleEmitterBehavior_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractFactory_Sl_ParticleEmitterBehaviorFactory_Sc_ParticleEmitterBehaviorInfo_Sc_BaseParticleEmitterBehavior_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractFactory_Sl_ParticleEmitterBehaviorFactory_Sc_ParticleEmitterBehaviorInfo_Sc_BaseParticleEmitterBehavior_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractFactory_Sl_ParticleEmitterBehaviorFactory_Sc_ParticleEmitterBehaviorInfo_Sc_BaseParticleEmitterBehavior_Sg__bases[] = {0};
static const char *swig_AbstractFactory_Sl_ParticleEmitterBehaviorFactory_Sc_ParticleEmitterBehaviorInfo_Sc_BaseParticleEmitterBehavior_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractFactory_Sl_ParticleEmitterBehaviorFactory_Sc_ParticleEmitterBehaviorInfo_Sc_BaseParticleEmitterBehavior_Sg_ = { "ParticleEmitterBehaviorFactory_Factory", &SWIGTYPE_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t,0,0, swig_AbstractFactory_Sl_ParticleEmitterBehaviorFactory_Sc_ParticleEmitterBehaviorInfo_Sc_BaseParticleEmitterBehavior_Sg__methods, swig_AbstractFactory_Sl_ParticleEmitterBehaviorFactory_Sc_ParticleEmitterBehaviorInfo_Sc_BaseParticleEmitterBehavior_Sg__attributes, { "ParticleEmitterBehaviorFactory_Factory", swig_AbstractFactory_Sl_ParticleEmitterBehaviorFactory_Sc_ParticleEmitterBehaviorInfo_Sc_BaseParticleEmitterBehavior_Sg__cls_methods, swig_AbstractFactory_Sl_ParticleEmitterBehaviorFactory_Sc_ParticleEmitterBehaviorInfo_Sc_BaseParticleEmitterBehavior_Sg__cls_attributes, swig_AbstractFactory_Sl_ParticleEmitterBehaviorFactory_Sc_ParticleEmitterBehaviorInfo_Sc_BaseParticleEmitterBehavior_Sg__cls_constants }, swig_AbstractFactory_Sl_ParticleEmitterBehaviorFactory_Sc_ParticleEmitterBehaviorInfo_Sc_BaseParticleEmitterBehavior_Sg__bases, swig_AbstractFactory_Sl_ParticleEmitterBehaviorFactory_Sc_ParticleEmitterBehaviorInfo_Sc_BaseParticleEmitterBehavior_Sg__base_names };

static int _wrap_ShaderFactory_Factory_create(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *arg1 = (AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *) 0 ;
  ShaderFactoryKey *arg2 = (ShaderFactoryKey *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::create",1,"AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::create",2,"ShaderFactoryKey *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t,0))){
    SWIG_fail_ptr("ShaderFactory_Factory_create",1,SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__pairT_std__string_std__string_t,0))){
    SWIG_fail_ptr("ShaderFactory_Factory_create",2,SWIGTYPE_p_std__pairT_std__string_std__string_t);
  }
  
  result = (IDType)(arg1)->create(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderFactory_Factory_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *arg1 = (AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *) 0 ;
  IDType arg2 ;
  ShaderProgramHandleWrapper *result = 0 ;
  
  SWIG_check_num_args("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::get",1,"AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::get",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t,0))){
    SWIG_fail_ptr("ShaderFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (ShaderProgramHandleWrapper *)((AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > const *)arg1)->get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ShaderProgramHandleWrapper,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderFactory_Factory_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *arg1 = (AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *) 0 ;
  ShaderProgramHandleWrapper *arg2 = (ShaderProgramHandleWrapper *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::get",1,"AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::get",2,"ShaderProgramHandleWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t,0))){
    SWIG_fail_ptr("ShaderFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ShaderProgramHandleWrapper,0))){
    SWIG_fail_ptr("ShaderFactory_Factory_get",2,SWIGTYPE_p_ShaderProgramHandleWrapper);
  }
  
  result = (IDType)((AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > const *)arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderFactory_Factory_destroy(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *arg1 = (AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *) 0 ;
  IDType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::destroy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::destroy",1,"AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::destroy",2,"IDType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t,0))){
    SWIG_fail_ptr("ShaderFactory_Factory_destroy",1,SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("ShaderFactory_Factory_destroy",2,SWIGTYPE_p_long_long);
  }
  
  result = (bool)(arg1)->destroy(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderFactory_Factory_destroyAll(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *arg1 = (AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *) 0 ;
  
  SWIG_check_num_args("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::destroyAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::destroyAll",1,"AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t,0))){
    SWIG_fail_ptr("ShaderFactory_Factory_destroyAll",1,SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t);
  }
  
  (arg1)->destroyAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderFactory_Factory_size(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *arg1 = (AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *) 0 ;
  int result;
  
  SWIG_check_num_args("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::size",1,"AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t,0))){
    SWIG_fail_ptr("ShaderFactory_Factory_size",1,SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t);
  }
  
  result = (int)((AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderFactory_Factory_get__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *arg1 = (AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *) 0 ;
  btAlignedObjectArray< ShaderProgramHandleWrapper * > *arg2 = 0 ;
  
  SWIG_check_num_args("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::get",1,"AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::get",2,"btAlignedObjectArray< ShaderProgramHandleWrapper * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t,0))){
    SWIG_fail_ptr("ShaderFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_ShaderProgramHandleWrapper_p_t,0))){
    SWIG_fail_ptr("ShaderFactory_Factory_get",2,SWIGTYPE_p_btAlignedObjectArrayT_ShaderProgramHandleWrapper_p_t);
  }
  
  ((AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > const *)arg1)->get(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderFactory_Factory_get(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ShaderProgramHandleWrapper, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ShaderFactory_Factory_get__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_ShaderProgramHandleWrapper_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ShaderFactory_Factory_get__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ShaderFactory_Factory_get__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ShaderFactory_Factory_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::get(IDType) const\n"
    "    AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::get(ShaderProgramHandleWrapper *) const\n"
    "    AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper >::get(btAlignedObjectArray< ShaderProgramHandleWrapper * > &) const\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_AbstractFactory_Sl_ShaderFactory_Sc_ShaderFactoryKey_Sc_ShaderProgramHandleWrapper_Sg__methods[] = {
    {"create", _wrap_ShaderFactory_Factory_create}, 
    {"destroy", _wrap_ShaderFactory_Factory_destroy}, 
    {"destroyAll", _wrap_ShaderFactory_Factory_destroyAll}, 
    {"size", _wrap_ShaderFactory_Factory_size}, 
    {"get", _wrap_ShaderFactory_Factory_get}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_ShaderFactory_Sc_ShaderFactoryKey_Sc_ShaderProgramHandleWrapper_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_ShaderFactory_Sc_ShaderFactoryKey_Sc_ShaderProgramHandleWrapper_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractFactory_Sl_ShaderFactory_Sc_ShaderFactoryKey_Sc_ShaderProgramHandleWrapper_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractFactory_Sl_ShaderFactory_Sc_ShaderFactoryKey_Sc_ShaderProgramHandleWrapper_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractFactory_Sl_ShaderFactory_Sc_ShaderFactoryKey_Sc_ShaderProgramHandleWrapper_Sg__bases[] = {0};
static const char *swig_AbstractFactory_Sl_ShaderFactory_Sc_ShaderFactoryKey_Sc_ShaderProgramHandleWrapper_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractFactory_Sl_ShaderFactory_Sc_ShaderFactoryKey_Sc_ShaderProgramHandleWrapper_Sg_ = { "ShaderFactory_Factory", &SWIGTYPE_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t,0,0, swig_AbstractFactory_Sl_ShaderFactory_Sc_ShaderFactoryKey_Sc_ShaderProgramHandleWrapper_Sg__methods, swig_AbstractFactory_Sl_ShaderFactory_Sc_ShaderFactoryKey_Sc_ShaderProgramHandleWrapper_Sg__attributes, { "ShaderFactory_Factory", swig_AbstractFactory_Sl_ShaderFactory_Sc_ShaderFactoryKey_Sc_ShaderProgramHandleWrapper_Sg__cls_methods, swig_AbstractFactory_Sl_ShaderFactory_Sc_ShaderFactoryKey_Sc_ShaderProgramHandleWrapper_Sg__cls_attributes, swig_AbstractFactory_Sl_ShaderFactory_Sc_ShaderFactoryKey_Sc_ShaderProgramHandleWrapper_Sg__cls_constants }, swig_AbstractFactory_Sl_ShaderFactory_Sc_ShaderFactoryKey_Sc_ShaderProgramHandleWrapper_Sg__bases, swig_AbstractFactory_Sl_ShaderFactory_Sc_ShaderFactoryKey_Sc_ShaderProgramHandleWrapper_Sg__base_names };

static int _wrap_SteeringBehaviorFactory_Factory_create(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *arg1 = (AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *) 0 ;
  SteeringBehaviorInfo *arg2 = (SteeringBehaviorInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::create",1,"AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::create",2,"SteeringBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t,0))){
    SWIG_fail_ptr("SteeringBehaviorFactory_Factory_create",1,SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SteeringBehaviorInfo,0))){
    SWIG_fail_ptr("SteeringBehaviorFactory_Factory_create",2,SWIGTYPE_p_SteeringBehaviorInfo);
  }
  
  result = (IDType)(arg1)->create(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringBehaviorFactory_Factory_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *arg1 = (AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *) 0 ;
  IDType arg2 ;
  BaseEntitySteeringBehavior *result = 0 ;
  
  SWIG_check_num_args("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::get",1,"AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::get",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t,0))){
    SWIG_fail_ptr("SteeringBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (BaseEntitySteeringBehavior *)((AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > const *)arg1)->get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseEntitySteeringBehavior,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringBehaviorFactory_Factory_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *arg1 = (AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *) 0 ;
  BaseEntitySteeringBehavior *arg2 = (BaseEntitySteeringBehavior *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::get",1,"AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::get",2,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t,0))){
    SWIG_fail_ptr("SteeringBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("SteeringBehaviorFactory_Factory_get",2,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (IDType)((AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > const *)arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringBehaviorFactory_Factory_destroy(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *arg1 = (AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *) 0 ;
  IDType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::destroy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::destroy",1,"AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::destroy",2,"IDType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t,0))){
    SWIG_fail_ptr("SteeringBehaviorFactory_Factory_destroy",1,SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("SteeringBehaviorFactory_Factory_destroy",2,SWIGTYPE_p_long_long);
  }
  
  result = (bool)(arg1)->destroy(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringBehaviorFactory_Factory_destroyAll(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *arg1 = (AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *) 0 ;
  
  SWIG_check_num_args("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::destroyAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::destroyAll",1,"AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t,0))){
    SWIG_fail_ptr("SteeringBehaviorFactory_Factory_destroyAll",1,SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t);
  }
  
  (arg1)->destroyAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringBehaviorFactory_Factory_size(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *arg1 = (AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *) 0 ;
  int result;
  
  SWIG_check_num_args("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::size",1,"AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t,0))){
    SWIG_fail_ptr("SteeringBehaviorFactory_Factory_size",1,SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t);
  }
  
  result = (int)((AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringBehaviorFactory_Factory_get__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *arg1 = (AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *) 0 ;
  btAlignedObjectArray< BaseEntitySteeringBehavior * > *arg2 = 0 ;
  
  SWIG_check_num_args("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::get",1,"AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::get",2,"btAlignedObjectArray< BaseEntitySteeringBehavior * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t,0))){
    SWIG_fail_ptr("SteeringBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_BaseEntitySteeringBehavior_p_t,0))){
    SWIG_fail_ptr("SteeringBehaviorFactory_Factory_get",2,SWIGTYPE_p_btAlignedObjectArrayT_BaseEntitySteeringBehavior_p_t);
  }
  
  ((AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > const *)arg1)->get(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringBehaviorFactory_Factory_get(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseEntitySteeringBehavior, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SteeringBehaviorFactory_Factory_get__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_BaseEntitySteeringBehavior_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SteeringBehaviorFactory_Factory_get__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SteeringBehaviorFactory_Factory_get__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SteeringBehaviorFactory_Factory_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::get(IDType) const\n"
    "    AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::get(BaseEntitySteeringBehavior *) const\n"
    "    AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior >::get(btAlignedObjectArray< BaseEntitySteeringBehavior * > &) const\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_AbstractFactory_Sl_SteeringBehaviorFactory_Sc_SteeringBehaviorInfo_Sc_BaseEntitySteeringBehavior_Sg__methods[] = {
    {"create", _wrap_SteeringBehaviorFactory_Factory_create}, 
    {"destroy", _wrap_SteeringBehaviorFactory_Factory_destroy}, 
    {"destroyAll", _wrap_SteeringBehaviorFactory_Factory_destroyAll}, 
    {"size", _wrap_SteeringBehaviorFactory_Factory_size}, 
    {"get", _wrap_SteeringBehaviorFactory_Factory_get}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_SteeringBehaviorFactory_Sc_SteeringBehaviorInfo_Sc_BaseEntitySteeringBehavior_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_SteeringBehaviorFactory_Sc_SteeringBehaviorInfo_Sc_BaseEntitySteeringBehavior_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractFactory_Sl_SteeringBehaviorFactory_Sc_SteeringBehaviorInfo_Sc_BaseEntitySteeringBehavior_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractFactory_Sl_SteeringBehaviorFactory_Sc_SteeringBehaviorInfo_Sc_BaseEntitySteeringBehavior_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractFactory_Sl_SteeringBehaviorFactory_Sc_SteeringBehaviorInfo_Sc_BaseEntitySteeringBehavior_Sg__bases[] = {0};
static const char *swig_AbstractFactory_Sl_SteeringBehaviorFactory_Sc_SteeringBehaviorInfo_Sc_BaseEntitySteeringBehavior_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractFactory_Sl_SteeringBehaviorFactory_Sc_SteeringBehaviorInfo_Sc_BaseEntitySteeringBehavior_Sg_ = { "SteeringBehaviorFactory_Factory", &SWIGTYPE_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t,0,0, swig_AbstractFactory_Sl_SteeringBehaviorFactory_Sc_SteeringBehaviorInfo_Sc_BaseEntitySteeringBehavior_Sg__methods, swig_AbstractFactory_Sl_SteeringBehaviorFactory_Sc_SteeringBehaviorInfo_Sc_BaseEntitySteeringBehavior_Sg__attributes, { "SteeringBehaviorFactory_Factory", swig_AbstractFactory_Sl_SteeringBehaviorFactory_Sc_SteeringBehaviorInfo_Sc_BaseEntitySteeringBehavior_Sg__cls_methods, swig_AbstractFactory_Sl_SteeringBehaviorFactory_Sc_SteeringBehaviorInfo_Sc_BaseEntitySteeringBehavior_Sg__cls_attributes, swig_AbstractFactory_Sl_SteeringBehaviorFactory_Sc_SteeringBehaviorInfo_Sc_BaseEntitySteeringBehavior_Sg__cls_constants }, swig_AbstractFactory_Sl_SteeringBehaviorFactory_Sc_SteeringBehaviorInfo_Sc_BaseEntitySteeringBehavior_Sg__bases, swig_AbstractFactory_Sl_SteeringBehaviorFactory_Sc_SteeringBehaviorInfo_Sc_BaseEntitySteeringBehavior_Sg__base_names };

static int _wrap_TextureBehaviorFactory_Factory_create(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *arg1 = (AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *) 0 ;
  TextureBehaviorInfo *arg2 = (TextureBehaviorInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::create",1,"AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::create",2,"TextureBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t,0))){
    SWIG_fail_ptr("TextureBehaviorFactory_Factory_create",1,SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("TextureBehaviorFactory_Factory_create",2,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  result = (IDType)(arg1)->create(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorFactory_Factory_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *arg1 = (AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *) 0 ;
  IDType arg2 ;
  BaseTextureBehavior *result = 0 ;
  
  SWIG_check_num_args("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::get",1,"AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::get",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t,0))){
    SWIG_fail_ptr("TextureBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (BaseTextureBehavior *)((AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > const *)arg1)->get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseTextureBehavior,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorFactory_Factory_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *arg1 = (AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *) 0 ;
  BaseTextureBehavior *arg2 = (BaseTextureBehavior *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::get",1,"AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::get",2,"BaseTextureBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t,0))){
    SWIG_fail_ptr("TextureBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("TextureBehaviorFactory_Factory_get",2,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  result = (IDType)((AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > const *)arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorFactory_Factory_destroy(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *arg1 = (AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *) 0 ;
  IDType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::destroy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::destroy",1,"AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::destroy",2,"IDType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t,0))){
    SWIG_fail_ptr("TextureBehaviorFactory_Factory_destroy",1,SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("TextureBehaviorFactory_Factory_destroy",2,SWIGTYPE_p_long_long);
  }
  
  result = (bool)(arg1)->destroy(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorFactory_Factory_destroyAll(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *arg1 = (AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *) 0 ;
  
  SWIG_check_num_args("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::destroyAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::destroyAll",1,"AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t,0))){
    SWIG_fail_ptr("TextureBehaviorFactory_Factory_destroyAll",1,SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t);
  }
  
  (arg1)->destroyAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorFactory_Factory_size(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *arg1 = (AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *) 0 ;
  int result;
  
  SWIG_check_num_args("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::size",1,"AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t,0))){
    SWIG_fail_ptr("TextureBehaviorFactory_Factory_size",1,SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t);
  }
  
  result = (int)((AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorFactory_Factory_get__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *arg1 = (AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *) 0 ;
  btAlignedObjectArray< BaseTextureBehavior * > *arg2 = 0 ;
  
  SWIG_check_num_args("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::get",1,"AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::get",2,"btAlignedObjectArray< BaseTextureBehavior * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t,0))){
    SWIG_fail_ptr("TextureBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_BaseTextureBehavior_p_t,0))){
    SWIG_fail_ptr("TextureBehaviorFactory_Factory_get",2,SWIGTYPE_p_btAlignedObjectArrayT_BaseTextureBehavior_p_t);
  }
  
  ((AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > const *)arg1)->get(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorFactory_Factory_get(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseTextureBehavior, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TextureBehaviorFactory_Factory_get__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_BaseTextureBehavior_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TextureBehaviorFactory_Factory_get__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TextureBehaviorFactory_Factory_get__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TextureBehaviorFactory_Factory_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::get(IDType) const\n"
    "    AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::get(BaseTextureBehavior *) const\n"
    "    AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior >::get(btAlignedObjectArray< BaseTextureBehavior * > &) const\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_AbstractFactory_Sl_TextureBehaviorFactory_Sc_TextureBehaviorInfo_Sc_BaseTextureBehavior_Sg__methods[] = {
    {"create", _wrap_TextureBehaviorFactory_Factory_create}, 
    {"destroy", _wrap_TextureBehaviorFactory_Factory_destroy}, 
    {"destroyAll", _wrap_TextureBehaviorFactory_Factory_destroyAll}, 
    {"size", _wrap_TextureBehaviorFactory_Factory_size}, 
    {"get", _wrap_TextureBehaviorFactory_Factory_get}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_TextureBehaviorFactory_Sc_TextureBehaviorInfo_Sc_BaseTextureBehavior_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_TextureBehaviorFactory_Sc_TextureBehaviorInfo_Sc_BaseTextureBehavior_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractFactory_Sl_TextureBehaviorFactory_Sc_TextureBehaviorInfo_Sc_BaseTextureBehavior_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractFactory_Sl_TextureBehaviorFactory_Sc_TextureBehaviorInfo_Sc_BaseTextureBehavior_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractFactory_Sl_TextureBehaviorFactory_Sc_TextureBehaviorInfo_Sc_BaseTextureBehavior_Sg__bases[] = {0};
static const char *swig_AbstractFactory_Sl_TextureBehaviorFactory_Sc_TextureBehaviorInfo_Sc_BaseTextureBehavior_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractFactory_Sl_TextureBehaviorFactory_Sc_TextureBehaviorInfo_Sc_BaseTextureBehavior_Sg_ = { "TextureBehaviorFactory_Factory", &SWIGTYPE_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t,0,0, swig_AbstractFactory_Sl_TextureBehaviorFactory_Sc_TextureBehaviorInfo_Sc_BaseTextureBehavior_Sg__methods, swig_AbstractFactory_Sl_TextureBehaviorFactory_Sc_TextureBehaviorInfo_Sc_BaseTextureBehavior_Sg__attributes, { "TextureBehaviorFactory_Factory", swig_AbstractFactory_Sl_TextureBehaviorFactory_Sc_TextureBehaviorInfo_Sc_BaseTextureBehavior_Sg__cls_methods, swig_AbstractFactory_Sl_TextureBehaviorFactory_Sc_TextureBehaviorInfo_Sc_BaseTextureBehavior_Sg__cls_attributes, swig_AbstractFactory_Sl_TextureBehaviorFactory_Sc_TextureBehaviorInfo_Sc_BaseTextureBehavior_Sg__cls_constants }, swig_AbstractFactory_Sl_TextureBehaviorFactory_Sc_TextureBehaviorInfo_Sc_BaseTextureBehavior_Sg__bases, swig_AbstractFactory_Sl_TextureBehaviorFactory_Sc_TextureBehaviorInfo_Sc_BaseTextureBehavior_Sg__base_names };

static int _wrap_TextViewObjectFactory_Factory_create(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *arg1 = (AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *) 0 ;
  BaseTextViewInfo *arg2 = (BaseTextViewInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::create",1,"AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::create",2,"BaseTextViewInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t,0))){
    SWIG_fail_ptr("TextViewObjectFactory_Factory_create",1,SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseTextViewInfo,0))){
    SWIG_fail_ptr("TextViewObjectFactory_Factory_create",2,SWIGTYPE_p_BaseTextViewInfo);
  }
  
  result = (IDType)(arg1)->create(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextViewObjectFactory_Factory_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *arg1 = (AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *) 0 ;
  IDType arg2 ;
  BaseTextViewObject *result = 0 ;
  
  SWIG_check_num_args("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::get",1,"AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::get",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t,0))){
    SWIG_fail_ptr("TextViewObjectFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (BaseTextViewObject *)((AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > const *)arg1)->get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseTextViewObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextViewObjectFactory_Factory_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *arg1 = (AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *) 0 ;
  BaseTextViewObject *arg2 = (BaseTextViewObject *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::get",1,"AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::get",2,"BaseTextViewObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t,0))){
    SWIG_fail_ptr("TextViewObjectFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseTextViewObject,0))){
    SWIG_fail_ptr("TextViewObjectFactory_Factory_get",2,SWIGTYPE_p_BaseTextViewObject);
  }
  
  result = (IDType)((AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > const *)arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextViewObjectFactory_Factory_destroy(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *arg1 = (AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *) 0 ;
  IDType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::destroy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::destroy",1,"AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::destroy",2,"IDType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t,0))){
    SWIG_fail_ptr("TextViewObjectFactory_Factory_destroy",1,SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("TextViewObjectFactory_Factory_destroy",2,SWIGTYPE_p_long_long);
  }
  
  result = (bool)(arg1)->destroy(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextViewObjectFactory_Factory_destroyAll(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *arg1 = (AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *) 0 ;
  
  SWIG_check_num_args("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::destroyAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::destroyAll",1,"AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t,0))){
    SWIG_fail_ptr("TextViewObjectFactory_Factory_destroyAll",1,SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t);
  }
  
  (arg1)->destroyAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextViewObjectFactory_Factory_size(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *arg1 = (AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *) 0 ;
  int result;
  
  SWIG_check_num_args("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::size",1,"AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t,0))){
    SWIG_fail_ptr("TextViewObjectFactory_Factory_size",1,SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t);
  }
  
  result = (int)((AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextViewObjectFactory_Factory_get__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *arg1 = (AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *) 0 ;
  btAlignedObjectArray< BaseTextViewObject * > *arg2 = 0 ;
  
  SWIG_check_num_args("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::get",1,"AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::get",2,"btAlignedObjectArray< BaseTextViewObject * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t,0))){
    SWIG_fail_ptr("TextViewObjectFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_BaseTextViewObject_p_t,0))){
    SWIG_fail_ptr("TextViewObjectFactory_Factory_get",2,SWIGTYPE_p_btAlignedObjectArrayT_BaseTextViewObject_p_t);
  }
  
  ((AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > const *)arg1)->get(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextViewObjectFactory_Factory_get(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseTextViewObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TextViewObjectFactory_Factory_get__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_BaseTextViewObject_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TextViewObjectFactory_Factory_get__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TextViewObjectFactory_Factory_get__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TextViewObjectFactory_Factory_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::get(IDType) const\n"
    "    AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::get(BaseTextViewObject *) const\n"
    "    AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject >::get(btAlignedObjectArray< BaseTextViewObject * > &) const\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_AbstractFactory_Sl_TextViewObjectFactory_Sc_BaseTextViewInfo_Sc_BaseTextViewObject_Sg__methods[] = {
    {"create", _wrap_TextViewObjectFactory_Factory_create}, 
    {"destroy", _wrap_TextViewObjectFactory_Factory_destroy}, 
    {"destroyAll", _wrap_TextViewObjectFactory_Factory_destroyAll}, 
    {"size", _wrap_TextViewObjectFactory_Factory_size}, 
    {"get", _wrap_TextViewObjectFactory_Factory_get}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_TextViewObjectFactory_Sc_BaseTextViewInfo_Sc_BaseTextViewObject_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_TextViewObjectFactory_Sc_BaseTextViewInfo_Sc_BaseTextViewObject_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractFactory_Sl_TextViewObjectFactory_Sc_BaseTextViewInfo_Sc_BaseTextViewObject_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractFactory_Sl_TextViewObjectFactory_Sc_BaseTextViewInfo_Sc_BaseTextViewObject_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractFactory_Sl_TextViewObjectFactory_Sc_BaseTextViewInfo_Sc_BaseTextViewObject_Sg__bases[] = {0};
static const char *swig_AbstractFactory_Sl_TextViewObjectFactory_Sc_BaseTextViewInfo_Sc_BaseTextViewObject_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractFactory_Sl_TextViewObjectFactory_Sc_BaseTextViewInfo_Sc_BaseTextViewObject_Sg_ = { "TextViewObjectFactory_Factory", &SWIGTYPE_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t,0,0, swig_AbstractFactory_Sl_TextViewObjectFactory_Sc_BaseTextViewInfo_Sc_BaseTextViewObject_Sg__methods, swig_AbstractFactory_Sl_TextViewObjectFactory_Sc_BaseTextViewInfo_Sc_BaseTextViewObject_Sg__attributes, { "TextViewObjectFactory_Factory", swig_AbstractFactory_Sl_TextViewObjectFactory_Sc_BaseTextViewInfo_Sc_BaseTextViewObject_Sg__cls_methods, swig_AbstractFactory_Sl_TextViewObjectFactory_Sc_BaseTextViewInfo_Sc_BaseTextViewObject_Sg__cls_attributes, swig_AbstractFactory_Sl_TextViewObjectFactory_Sc_BaseTextViewInfo_Sc_BaseTextViewObject_Sg__cls_constants }, swig_AbstractFactory_Sl_TextViewObjectFactory_Sc_BaseTextViewInfo_Sc_BaseTextViewObject_Sg__bases, swig_AbstractFactory_Sl_TextViewObjectFactory_Sc_BaseTextViewInfo_Sc_BaseTextViewObject_Sg__base_names };

static int _wrap_UpdateBehaviorFactory_Factory_create(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *arg1 = (AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *) 0 ;
  UpdateBehaviorInfo *arg2 = (UpdateBehaviorInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::create",1,"AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::create",2,"UpdateBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t,0))){
    SWIG_fail_ptr("UpdateBehaviorFactory_Factory_create",1,SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_UpdateBehaviorInfo,0))){
    SWIG_fail_ptr("UpdateBehaviorFactory_Factory_create",2,SWIGTYPE_p_UpdateBehaviorInfo);
  }
  
  result = (IDType)(arg1)->create(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpdateBehaviorFactory_Factory_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *arg1 = (AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *) 0 ;
  IDType arg2 ;
  BaseUpdateBehavior *result = 0 ;
  
  SWIG_check_num_args("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::get",1,"AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::get",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t,0))){
    SWIG_fail_ptr("UpdateBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (BaseUpdateBehavior *)((AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > const *)arg1)->get(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseUpdateBehavior,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpdateBehaviorFactory_Factory_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *arg1 = (AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *) 0 ;
  BaseUpdateBehavior *arg2 = (BaseUpdateBehavior *) 0 ;
  IDType result;
  
  SWIG_check_num_args("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::get",1,"AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::get",2,"BaseUpdateBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t,0))){
    SWIG_fail_ptr("UpdateBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseUpdateBehavior,0))){
    SWIG_fail_ptr("UpdateBehaviorFactory_Factory_get",2,SWIGTYPE_p_BaseUpdateBehavior);
  }
  
  result = (IDType)((AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > const *)arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpdateBehaviorFactory_Factory_destroy(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *arg1 = (AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *) 0 ;
  IDType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::destroy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::destroy",1,"AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::destroy",2,"IDType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t,0))){
    SWIG_fail_ptr("UpdateBehaviorFactory_Factory_destroy",1,SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("UpdateBehaviorFactory_Factory_destroy",2,SWIGTYPE_p_long_long);
  }
  
  result = (bool)(arg1)->destroy(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpdateBehaviorFactory_Factory_destroyAll(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *arg1 = (AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *) 0 ;
  
  SWIG_check_num_args("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::destroyAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::destroyAll",1,"AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t,0))){
    SWIG_fail_ptr("UpdateBehaviorFactory_Factory_destroyAll",1,SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t);
  }
  
  (arg1)->destroyAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpdateBehaviorFactory_Factory_size(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *arg1 = (AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *) 0 ;
  int result;
  
  SWIG_check_num_args("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::size",1,"AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t,0))){
    SWIG_fail_ptr("UpdateBehaviorFactory_Factory_size",1,SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t);
  }
  
  result = (int)((AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpdateBehaviorFactory_Factory_get__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *arg1 = (AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *) 0 ;
  btAlignedObjectArray< BaseUpdateBehavior * > *arg2 = 0 ;
  
  SWIG_check_num_args("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::get",1,"AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::get",2,"btAlignedObjectArray< BaseUpdateBehavior * > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t,0))){
    SWIG_fail_ptr("UpdateBehaviorFactory_Factory_get",1,SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_BaseUpdateBehavior_p_t,0))){
    SWIG_fail_ptr("UpdateBehaviorFactory_Factory_get",2,SWIGTYPE_p_btAlignedObjectArrayT_BaseUpdateBehavior_p_t);
  }
  
  ((AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > const *)arg1)->get(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpdateBehaviorFactory_Factory_get(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseUpdateBehavior, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UpdateBehaviorFactory_Factory_get__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_BaseUpdateBehavior_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UpdateBehaviorFactory_Factory_get__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UpdateBehaviorFactory_Factory_get__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UpdateBehaviorFactory_Factory_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::get(IDType) const\n"
    "    AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::get(BaseUpdateBehavior *) const\n"
    "    AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior >::get(btAlignedObjectArray< BaseUpdateBehavior * > &) const\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_AbstractFactory_Sl_UpdateBehaviorFactory_Sc_UpdateBehaviorInfo_Sc_BaseUpdateBehavior_Sg__methods[] = {
    {"create", _wrap_UpdateBehaviorFactory_Factory_create}, 
    {"destroy", _wrap_UpdateBehaviorFactory_Factory_destroy}, 
    {"destroyAll", _wrap_UpdateBehaviorFactory_Factory_destroyAll}, 
    {"size", _wrap_UpdateBehaviorFactory_Factory_size}, 
    {"get", _wrap_UpdateBehaviorFactory_Factory_get}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_UpdateBehaviorFactory_Sc_UpdateBehaviorInfo_Sc_BaseUpdateBehavior_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractFactory_Sl_UpdateBehaviorFactory_Sc_UpdateBehaviorInfo_Sc_BaseUpdateBehavior_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractFactory_Sl_UpdateBehaviorFactory_Sc_UpdateBehaviorInfo_Sc_BaseUpdateBehavior_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractFactory_Sl_UpdateBehaviorFactory_Sc_UpdateBehaviorInfo_Sc_BaseUpdateBehavior_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractFactory_Sl_UpdateBehaviorFactory_Sc_UpdateBehaviorInfo_Sc_BaseUpdateBehavior_Sg__bases[] = {0};
static const char *swig_AbstractFactory_Sl_UpdateBehaviorFactory_Sc_UpdateBehaviorInfo_Sc_BaseUpdateBehavior_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractFactory_Sl_UpdateBehaviorFactory_Sc_UpdateBehaviorInfo_Sc_BaseUpdateBehavior_Sg_ = { "UpdateBehaviorFactory_Factory", &SWIGTYPE_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t,0,0, swig_AbstractFactory_Sl_UpdateBehaviorFactory_Sc_UpdateBehaviorInfo_Sc_BaseUpdateBehavior_Sg__methods, swig_AbstractFactory_Sl_UpdateBehaviorFactory_Sc_UpdateBehaviorInfo_Sc_BaseUpdateBehavior_Sg__attributes, { "UpdateBehaviorFactory_Factory", swig_AbstractFactory_Sl_UpdateBehaviorFactory_Sc_UpdateBehaviorInfo_Sc_BaseUpdateBehavior_Sg__cls_methods, swig_AbstractFactory_Sl_UpdateBehaviorFactory_Sc_UpdateBehaviorInfo_Sc_BaseUpdateBehavior_Sg__cls_attributes, swig_AbstractFactory_Sl_UpdateBehaviorFactory_Sc_UpdateBehaviorInfo_Sc_BaseUpdateBehavior_Sg__cls_constants }, swig_AbstractFactory_Sl_UpdateBehaviorFactory_Sc_UpdateBehaviorInfo_Sc_BaseUpdateBehavior_Sg__bases, swig_AbstractFactory_Sl_UpdateBehaviorFactory_Sc_UpdateBehaviorInfo_Sc_BaseUpdateBehavior_Sg__base_names };

static int _wrap_BaseGameState_State_enter(lua_State* L) {
  int SWIG_arg = 0;
  AbstractState< void > *arg1 = (AbstractState< void > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("AbstractState< void >::enter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractState< void >::enter",1,"AbstractState< void > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractState< void >::enter",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractStateT_void_t,0))){
    SWIG_fail_ptr("BaseGameState_State_enter",1,SWIGTYPE_p_AbstractStateT_void_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BaseGameState_State_enter");
  (arg1)->enter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_State_update(lua_State* L) {
  int SWIG_arg = 0;
  AbstractState< void > *arg1 = (AbstractState< void > *) 0 ;
  void *arg2 = (void *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("AbstractState< void >::update",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractState< void >::update",1,"AbstractState< void > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractState< void >::update",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AbstractState< void >::update",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractStateT_void_t,0))){
    SWIG_fail_ptr("BaseGameState_State_update",1,SWIGTYPE_p_AbstractStateT_void_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BaseGameState_State_update");
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->update(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_State_exit(lua_State* L) {
  int SWIG_arg = 0;
  AbstractState< void > *arg1 = (AbstractState< void > *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("AbstractState< void >::exit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractState< void >::exit",1,"AbstractState< void > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractState< void >::exit",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractStateT_void_t,0))){
    SWIG_fail_ptr("BaseGameState_State_exit",1,SWIGTYPE_p_AbstractStateT_void_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BaseGameState_State_exit");
  (arg1)->exit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_State_onMessage(lua_State* L) {
  int SWIG_arg = 0;
  AbstractState< void > *arg1 = (AbstractState< void > *) 0 ;
  void *arg2 = (void *) 0 ;
  Telegram *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("AbstractState< void >::onMessage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractState< void >::onMessage",1,"AbstractState< void > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractState< void >::onMessage",2,"void *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AbstractState< void >::onMessage",3,"Telegram const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractStateT_void_t,0))){
    SWIG_fail_ptr("BaseGameState_State_onMessage",1,SWIGTYPE_p_AbstractStateT_void_t);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BaseGameState_State_onMessage");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Telegram,0))){
    SWIG_fail_ptr("BaseGameState_State_onMessage",3,SWIGTYPE_p_Telegram);
  }
  
  result = (bool)(arg1)->onMessage(arg2,(Telegram const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseGameState_State(void *obj) {
AbstractState< void > *arg1 = (AbstractState< void > *) obj;
delete arg1;
}
static swig_lua_method swig_AbstractState_Sl_void_Sg__methods[] = {
    {"enter", _wrap_BaseGameState_State_enter}, 
    {"update", _wrap_BaseGameState_State_update}, 
    {"exit", _wrap_BaseGameState_State_exit}, 
    {"onMessage", _wrap_BaseGameState_State_onMessage}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractState_Sl_void_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractState_Sl_void_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractState_Sl_void_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractState_Sl_void_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractState_Sl_void_Sg__bases[] = {0};
static const char *swig_AbstractState_Sl_void_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractState_Sl_void_Sg_ = { "BaseGameState_State", &SWIGTYPE_p_AbstractStateT_void_t,0, swig_delete_BaseGameState_State, swig_AbstractState_Sl_void_Sg__methods, swig_AbstractState_Sl_void_Sg__attributes, { "BaseGameState_State", swig_AbstractState_Sl_void_Sg__cls_methods, swig_AbstractState_Sl_void_Sg__cls_attributes, swig_AbstractState_Sl_void_Sg__cls_constants }, swig_AbstractState_Sl_void_Sg__bases, swig_AbstractState_Sl_void_Sg__base_names };

static int _wrap_State_State_enter(lua_State* L) {
  int SWIG_arg = 0;
  AbstractState< BaseEntity > *arg1 = (AbstractState< BaseEntity > *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  
  SWIG_check_num_args("AbstractState< BaseEntity >::enter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractState< BaseEntity >::enter",1,"AbstractState< BaseEntity > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractState< BaseEntity >::enter",2,"BaseEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractStateT_BaseEntity_t,0))){
    SWIG_fail_ptr("State_State_enter",1,SWIGTYPE_p_AbstractStateT_BaseEntity_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("State_State_enter",2,SWIGTYPE_p_BaseEntity);
  }
  
  (arg1)->enter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_State_State_update(lua_State* L) {
  int SWIG_arg = 0;
  AbstractState< BaseEntity > *arg1 = (AbstractState< BaseEntity > *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("AbstractState< BaseEntity >::update",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractState< BaseEntity >::update",1,"AbstractState< BaseEntity > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractState< BaseEntity >::update",2,"BaseEntity *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("AbstractState< BaseEntity >::update",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractStateT_BaseEntity_t,0))){
    SWIG_fail_ptr("State_State_update",1,SWIGTYPE_p_AbstractStateT_BaseEntity_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("State_State_update",2,SWIGTYPE_p_BaseEntity);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->update(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_State_State_exit(lua_State* L) {
  int SWIG_arg = 0;
  AbstractState< BaseEntity > *arg1 = (AbstractState< BaseEntity > *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  
  SWIG_check_num_args("AbstractState< BaseEntity >::exit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractState< BaseEntity >::exit",1,"AbstractState< BaseEntity > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractState< BaseEntity >::exit",2,"BaseEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractStateT_BaseEntity_t,0))){
    SWIG_fail_ptr("State_State_exit",1,SWIGTYPE_p_AbstractStateT_BaseEntity_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("State_State_exit",2,SWIGTYPE_p_BaseEntity);
  }
  
  (arg1)->exit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_State_State_onMessage(lua_State* L) {
  int SWIG_arg = 0;
  AbstractState< BaseEntity > *arg1 = (AbstractState< BaseEntity > *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  Telegram *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("AbstractState< BaseEntity >::onMessage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractState< BaseEntity >::onMessage",1,"AbstractState< BaseEntity > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractState< BaseEntity >::onMessage",2,"BaseEntity *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AbstractState< BaseEntity >::onMessage",3,"Telegram const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractStateT_BaseEntity_t,0))){
    SWIG_fail_ptr("State_State_onMessage",1,SWIGTYPE_p_AbstractStateT_BaseEntity_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("State_State_onMessage",2,SWIGTYPE_p_BaseEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Telegram,0))){
    SWIG_fail_ptr("State_State_onMessage",3,SWIGTYPE_p_Telegram);
  }
  
  result = (bool)(arg1)->onMessage(arg2,(Telegram const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_State_State(void *obj) {
AbstractState< BaseEntity > *arg1 = (AbstractState< BaseEntity > *) obj;
delete arg1;
}
static swig_lua_method swig_AbstractState_Sl_BaseEntity_Sg__methods[] = {
    {"enter", _wrap_State_State_enter}, 
    {"update", _wrap_State_State_update}, 
    {"exit", _wrap_State_State_exit}, 
    {"onMessage", _wrap_State_State_onMessage}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractState_Sl_BaseEntity_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractState_Sl_BaseEntity_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractState_Sl_BaseEntity_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractState_Sl_BaseEntity_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractState_Sl_BaseEntity_Sg__bases[] = {0};
static const char *swig_AbstractState_Sl_BaseEntity_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractState_Sl_BaseEntity_Sg_ = { "State_State", &SWIGTYPE_p_AbstractStateT_BaseEntity_t,0, swig_delete_State_State, swig_AbstractState_Sl_BaseEntity_Sg__methods, swig_AbstractState_Sl_BaseEntity_Sg__attributes, { "State_State", swig_AbstractState_Sl_BaseEntity_Sg__cls_methods, swig_AbstractState_Sl_BaseEntity_Sg__cls_attributes, swig_AbstractState_Sl_BaseEntity_Sg__cls_constants }, swig_AbstractState_Sl_BaseEntity_Sg__bases, swig_AbstractState_Sl_BaseEntity_Sg__base_names };

static int _wrap_new_BaseCollisionFilterBehavior_Behavior(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntity *arg1 = (BaseEntity *) 0 ;
  AbstractBehavior< BaseEntity > *result = 0 ;
  
  SWIG_check_num_args("AbstractBehavior< BaseEntity >::AbstractBehavior",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractBehavior< BaseEntity >::AbstractBehavior",1,"BaseEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("new_BaseCollisionFilterBehavior_Behavior",1,SWIGTYPE_p_BaseEntity);
  }
  
  result = (AbstractBehavior< BaseEntity > *)new AbstractBehavior< BaseEntity >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AbstractBehaviorT_BaseEntity_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCollisionFilterBehavior_Behavior_getOwner__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AbstractBehavior< BaseEntity > *arg1 = (AbstractBehavior< BaseEntity > *) 0 ;
  BaseEntity *result = 0 ;
  
  SWIG_check_num_args("AbstractBehavior< BaseEntity >::getOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractBehavior< BaseEntity >::getOwner",1,"AbstractBehavior< BaseEntity > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractBehaviorT_BaseEntity_t,0))){
    SWIG_fail_ptr("BaseCollisionFilterBehavior_Behavior_getOwner",1,SWIGTYPE_p_AbstractBehaviorT_BaseEntity_t);
  }
  
  result = (BaseEntity *)(arg1)->getOwner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCollisionFilterBehavior_Behavior_getOwner__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AbstractBehavior< BaseEntity > *arg1 = (AbstractBehavior< BaseEntity > *) 0 ;
  BaseEntity *result = 0 ;
  
  SWIG_check_num_args("AbstractBehavior< BaseEntity >::getOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractBehavior< BaseEntity >::getOwner",1,"AbstractBehavior< BaseEntity > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractBehaviorT_BaseEntity_t,0))){
    SWIG_fail_ptr("BaseCollisionFilterBehavior_Behavior_getOwner",1,SWIGTYPE_p_AbstractBehaviorT_BaseEntity_t);
  }
  
  result = (BaseEntity *)((AbstractBehavior< BaseEntity > const *)arg1)->getOwner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCollisionFilterBehavior_Behavior_getOwner(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractBehaviorT_BaseEntity_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BaseCollisionFilterBehavior_Behavior_getOwner__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractBehaviorT_BaseEntity_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BaseCollisionFilterBehavior_Behavior_getOwner__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BaseCollisionFilterBehavior_Behavior_getOwner'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AbstractBehavior< BaseEntity >::getOwner()\n"
    "    AbstractBehavior< BaseEntity >::getOwner() const\n");
  lua_error(L);return 0;
}


static int _wrap_BaseCollisionFilterBehavior_Behavior_setOwner(lua_State* L) {
  int SWIG_arg = 0;
  AbstractBehavior< BaseEntity > *arg1 = (AbstractBehavior< BaseEntity > *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  
  SWIG_check_num_args("AbstractBehavior< BaseEntity >::setOwner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractBehavior< BaseEntity >::setOwner",1,"AbstractBehavior< BaseEntity > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractBehavior< BaseEntity >::setOwner",2,"BaseEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractBehaviorT_BaseEntity_t,0))){
    SWIG_fail_ptr("BaseCollisionFilterBehavior_Behavior_setOwner",1,SWIGTYPE_p_AbstractBehaviorT_BaseEntity_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("BaseCollisionFilterBehavior_Behavior_setOwner",2,SWIGTYPE_p_BaseEntity);
  }
  
  (arg1)->setOwner(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseCollisionFilterBehavior_Behavior(void *obj) {
AbstractBehavior< BaseEntity > *arg1 = (AbstractBehavior< BaseEntity > *) obj;
delete arg1;
}
static swig_lua_method swig_AbstractBehavior_Sl_BaseEntity_Sg__methods[] = {
    {"getOwner", _wrap_BaseCollisionFilterBehavior_Behavior_getOwner}, 
    {"setOwner", _wrap_BaseCollisionFilterBehavior_Behavior_setOwner}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractBehavior_Sl_BaseEntity_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractBehavior_Sl_BaseEntity_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractBehavior_Sl_BaseEntity_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractBehavior_Sl_BaseEntity_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractBehavior_Sl_BaseEntity_Sg__bases[] = {0};
static const char *swig_AbstractBehavior_Sl_BaseEntity_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractBehavior_Sl_BaseEntity_Sg_ = { "BaseCollisionFilterBehavior_Behavior", &SWIGTYPE_p_AbstractBehaviorT_BaseEntity_t,_wrap_new_BaseCollisionFilterBehavior_Behavior, swig_delete_BaseCollisionFilterBehavior_Behavior, swig_AbstractBehavior_Sl_BaseEntity_Sg__methods, swig_AbstractBehavior_Sl_BaseEntity_Sg__attributes, { "BaseCollisionFilterBehavior_Behavior", swig_AbstractBehavior_Sl_BaseEntity_Sg__cls_methods, swig_AbstractBehavior_Sl_BaseEntity_Sg__cls_attributes, swig_AbstractBehavior_Sl_BaseEntity_Sg__cls_constants }, swig_AbstractBehavior_Sl_BaseEntity_Sg__bases, swig_AbstractBehavior_Sl_BaseEntity_Sg__base_names };

static int _wrap_new_BaseEntitySteeringBehavior_Behavior(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  AbstractBehavior< SteeringEntity > *result = 0 ;
  
  SWIG_check_num_args("AbstractBehavior< SteeringEntity >::AbstractBehavior",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractBehavior< SteeringEntity >::AbstractBehavior",1,"SteeringEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("new_BaseEntitySteeringBehavior_Behavior",1,SWIGTYPE_p_SteeringEntity);
  }
  
  result = (AbstractBehavior< SteeringEntity > *)new AbstractBehavior< SteeringEntity >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AbstractBehaviorT_SteeringEntity_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_Behavior_getOwner__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AbstractBehavior< SteeringEntity > *arg1 = (AbstractBehavior< SteeringEntity > *) 0 ;
  SteeringEntity *result = 0 ;
  
  SWIG_check_num_args("AbstractBehavior< SteeringEntity >::getOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractBehavior< SteeringEntity >::getOwner",1,"AbstractBehavior< SteeringEntity > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractBehaviorT_SteeringEntity_t,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_Behavior_getOwner",1,SWIGTYPE_p_AbstractBehaviorT_SteeringEntity_t);
  }
  
  result = (SteeringEntity *)(arg1)->getOwner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SteeringEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_Behavior_getOwner__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AbstractBehavior< SteeringEntity > *arg1 = (AbstractBehavior< SteeringEntity > *) 0 ;
  SteeringEntity *result = 0 ;
  
  SWIG_check_num_args("AbstractBehavior< SteeringEntity >::getOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractBehavior< SteeringEntity >::getOwner",1,"AbstractBehavior< SteeringEntity > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractBehaviorT_SteeringEntity_t,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_Behavior_getOwner",1,SWIGTYPE_p_AbstractBehaviorT_SteeringEntity_t);
  }
  
  result = (SteeringEntity *)((AbstractBehavior< SteeringEntity > const *)arg1)->getOwner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SteeringEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_Behavior_getOwner(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractBehaviorT_SteeringEntity_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BaseEntitySteeringBehavior_Behavior_getOwner__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractBehaviorT_SteeringEntity_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BaseEntitySteeringBehavior_Behavior_getOwner__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BaseEntitySteeringBehavior_Behavior_getOwner'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AbstractBehavior< SteeringEntity >::getOwner()\n"
    "    AbstractBehavior< SteeringEntity >::getOwner() const\n");
  lua_error(L);return 0;
}


static int _wrap_BaseEntitySteeringBehavior_Behavior_setOwner(lua_State* L) {
  int SWIG_arg = 0;
  AbstractBehavior< SteeringEntity > *arg1 = (AbstractBehavior< SteeringEntity > *) 0 ;
  SteeringEntity *arg2 = (SteeringEntity *) 0 ;
  
  SWIG_check_num_args("AbstractBehavior< SteeringEntity >::setOwner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractBehavior< SteeringEntity >::setOwner",1,"AbstractBehavior< SteeringEntity > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractBehavior< SteeringEntity >::setOwner",2,"SteeringEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractBehaviorT_SteeringEntity_t,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_Behavior_setOwner",1,SWIGTYPE_p_AbstractBehaviorT_SteeringEntity_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_Behavior_setOwner",2,SWIGTYPE_p_SteeringEntity);
  }
  
  (arg1)->setOwner(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseEntitySteeringBehavior_Behavior(void *obj) {
AbstractBehavior< SteeringEntity > *arg1 = (AbstractBehavior< SteeringEntity > *) obj;
delete arg1;
}
static swig_lua_method swig_AbstractBehavior_Sl_SteeringEntity_Sg__methods[] = {
    {"getOwner", _wrap_BaseEntitySteeringBehavior_Behavior_getOwner}, 
    {"setOwner", _wrap_BaseEntitySteeringBehavior_Behavior_setOwner}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractBehavior_Sl_SteeringEntity_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractBehavior_Sl_SteeringEntity_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractBehavior_Sl_SteeringEntity_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractBehavior_Sl_SteeringEntity_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractBehavior_Sl_SteeringEntity_Sg__bases[] = {0};
static const char *swig_AbstractBehavior_Sl_SteeringEntity_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractBehavior_Sl_SteeringEntity_Sg_ = { "BaseEntitySteeringBehavior_Behavior", &SWIGTYPE_p_AbstractBehaviorT_SteeringEntity_t,_wrap_new_BaseEntitySteeringBehavior_Behavior, swig_delete_BaseEntitySteeringBehavior_Behavior, swig_AbstractBehavior_Sl_SteeringEntity_Sg__methods, swig_AbstractBehavior_Sl_SteeringEntity_Sg__attributes, { "BaseEntitySteeringBehavior_Behavior", swig_AbstractBehavior_Sl_SteeringEntity_Sg__cls_methods, swig_AbstractBehavior_Sl_SteeringEntity_Sg__cls_attributes, swig_AbstractBehavior_Sl_SteeringEntity_Sg__cls_constants }, swig_AbstractBehavior_Sl_SteeringEntity_Sg__bases, swig_AbstractBehavior_Sl_SteeringEntity_Sg__base_names };

static int _wrap_new_BaseTextureBehavior_Behavior(lua_State* L) {
  int SWIG_arg = 0;
  BaseViewObject *arg1 = (BaseViewObject *) 0 ;
  AbstractBehavior< BaseViewObject > *result = 0 ;
  
  SWIG_check_num_args("AbstractBehavior< BaseViewObject >::AbstractBehavior",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractBehavior< BaseViewObject >::AbstractBehavior",1,"BaseViewObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseViewObject,0))){
    SWIG_fail_ptr("new_BaseTextureBehavior_Behavior",1,SWIGTYPE_p_BaseViewObject);
  }
  
  result = (AbstractBehavior< BaseViewObject > *)new AbstractBehavior< BaseViewObject >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AbstractBehaviorT_BaseViewObject_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_Behavior_getOwner__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  AbstractBehavior< BaseViewObject > *arg1 = (AbstractBehavior< BaseViewObject > *) 0 ;
  BaseViewObject *result = 0 ;
  
  SWIG_check_num_args("AbstractBehavior< BaseViewObject >::getOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractBehavior< BaseViewObject >::getOwner",1,"AbstractBehavior< BaseViewObject > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractBehaviorT_BaseViewObject_t,0))){
    SWIG_fail_ptr("BaseTextureBehavior_Behavior_getOwner",1,SWIGTYPE_p_AbstractBehaviorT_BaseViewObject_t);
  }
  
  result = (BaseViewObject *)(arg1)->getOwner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseViewObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_Behavior_getOwner__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  AbstractBehavior< BaseViewObject > *arg1 = (AbstractBehavior< BaseViewObject > *) 0 ;
  BaseViewObject *result = 0 ;
  
  SWIG_check_num_args("AbstractBehavior< BaseViewObject >::getOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractBehavior< BaseViewObject >::getOwner",1,"AbstractBehavior< BaseViewObject > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractBehaviorT_BaseViewObject_t,0))){
    SWIG_fail_ptr("BaseTextureBehavior_Behavior_getOwner",1,SWIGTYPE_p_AbstractBehaviorT_BaseViewObject_t);
  }
  
  result = (BaseViewObject *)((AbstractBehavior< BaseViewObject > const *)arg1)->getOwner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseViewObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_Behavior_getOwner(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractBehaviorT_BaseViewObject_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BaseTextureBehavior_Behavior_getOwner__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_AbstractBehaviorT_BaseViewObject_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BaseTextureBehavior_Behavior_getOwner__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BaseTextureBehavior_Behavior_getOwner'\n"
    "  Possible C/C++ prototypes are:\n"
    "    AbstractBehavior< BaseViewObject >::getOwner()\n"
    "    AbstractBehavior< BaseViewObject >::getOwner() const\n");
  lua_error(L);return 0;
}


static int _wrap_BaseTextureBehavior_Behavior_setOwner(lua_State* L) {
  int SWIG_arg = 0;
  AbstractBehavior< BaseViewObject > *arg1 = (AbstractBehavior< BaseViewObject > *) 0 ;
  BaseViewObject *arg2 = (BaseViewObject *) 0 ;
  
  SWIG_check_num_args("AbstractBehavior< BaseViewObject >::setOwner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AbstractBehavior< BaseViewObject >::setOwner",1,"AbstractBehavior< BaseViewObject > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("AbstractBehavior< BaseViewObject >::setOwner",2,"BaseViewObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AbstractBehaviorT_BaseViewObject_t,0))){
    SWIG_fail_ptr("BaseTextureBehavior_Behavior_setOwner",1,SWIGTYPE_p_AbstractBehaviorT_BaseViewObject_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseViewObject,0))){
    SWIG_fail_ptr("BaseTextureBehavior_Behavior_setOwner",2,SWIGTYPE_p_BaseViewObject);
  }
  
  (arg1)->setOwner(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseTextureBehavior_Behavior(void *obj) {
AbstractBehavior< BaseViewObject > *arg1 = (AbstractBehavior< BaseViewObject > *) obj;
delete arg1;
}
static swig_lua_method swig_AbstractBehavior_Sl_BaseViewObject_Sg__methods[] = {
    {"getOwner", _wrap_BaseTextureBehavior_Behavior_getOwner}, 
    {"setOwner", _wrap_BaseTextureBehavior_Behavior_setOwner}, 
    {0,0}
};
static swig_lua_attribute swig_AbstractBehavior_Sl_BaseViewObject_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractBehavior_Sl_BaseViewObject_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractBehavior_Sl_BaseViewObject_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AbstractBehavior_Sl_BaseViewObject_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractBehavior_Sl_BaseViewObject_Sg__bases[] = {0};
static const char *swig_AbstractBehavior_Sl_BaseViewObject_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractBehavior_Sl_BaseViewObject_Sg_ = { "BaseTextureBehavior_Behavior", &SWIGTYPE_p_AbstractBehaviorT_BaseViewObject_t,_wrap_new_BaseTextureBehavior_Behavior, swig_delete_BaseTextureBehavior_Behavior, swig_AbstractBehavior_Sl_BaseViewObject_Sg__methods, swig_AbstractBehavior_Sl_BaseViewObject_Sg__attributes, { "BaseTextureBehavior_Behavior", swig_AbstractBehavior_Sl_BaseViewObject_Sg__cls_methods, swig_AbstractBehavior_Sl_BaseViewObject_Sg__cls_attributes, swig_AbstractBehavior_Sl_BaseViewObject_Sg__cls_constants }, swig_AbstractBehavior_Sl_BaseViewObject_Sg__bases, swig_AbstractBehavior_Sl_BaseViewObject_Sg__base_names };

static int _wrap_MazeCreator_Singleton_createInstance(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("AbstractSingleton< MazeCreator >::createInstance",0,0)
  AbstractSingleton< MazeCreator >::SWIGTEMPLATEDISAMBIGUATOR createInstance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeCreator_Singleton_destroyInstance(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("AbstractSingleton< MazeCreator >::destroyInstance",0,0)
  AbstractSingleton< MazeCreator >::SWIGTEMPLATEDISAMBIGUATOR destroyInstance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeCreator_Singleton_getInstance(lua_State* L) {
  int SWIG_arg = 0;
  MazeCreator *result = 0 ;
  
  SWIG_check_num_args("AbstractSingleton< MazeCreator >::getInstance",0,0)
  result = (MazeCreator *)AbstractSingleton< MazeCreator >::SWIGTEMPLATEDISAMBIGUATOR getInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MazeCreator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeCreator_Singleton_hasInstance(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("AbstractSingleton< MazeCreator >::hasInstance",0,0)
  result = (bool)AbstractSingleton< MazeCreator >::SWIGTEMPLATEDISAMBIGUATOR hasInstance();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MazeCreator_Singleton(lua_State* L) {
  int SWIG_arg = 0;
  AbstractSingleton< MazeCreator > *result = 0 ;
  
  SWIG_check_num_args("AbstractSingleton< MazeCreator >::AbstractSingleton",0,0)
  result = (AbstractSingleton< MazeCreator > *)new AbstractSingleton< MazeCreator >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AbstractSingletonT_MazeCreator_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MazeCreator_Singleton(void *obj) {
AbstractSingleton< MazeCreator > *arg1 = (AbstractSingleton< MazeCreator > *) obj;
delete arg1;
}
static swig_lua_method swig_AbstractSingleton_Sl_MazeCreator_Sg__methods[] = {
    {0,0}
};
static swig_lua_attribute swig_AbstractSingleton_Sl_MazeCreator_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractSingleton_Sl_MazeCreator_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractSingleton_Sl_MazeCreator_Sg__cls_methods[] = {
    {"createInstance", _wrap_MazeCreator_Singleton_createInstance}, 
    {"destroyInstance", _wrap_MazeCreator_Singleton_destroyInstance}, 
    {"getInstance", _wrap_MazeCreator_Singleton_getInstance}, 
    {"hasInstance", _wrap_MazeCreator_Singleton_hasInstance}, 
    {0,0}
};
static swig_lua_const_info swig_AbstractSingleton_Sl_MazeCreator_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractSingleton_Sl_MazeCreator_Sg__bases[] = {0};
static const char *swig_AbstractSingleton_Sl_MazeCreator_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractSingleton_Sl_MazeCreator_Sg_ = { "MazeCreator_Singleton", &SWIGTYPE_p_AbstractSingletonT_MazeCreator_t,_wrap_new_MazeCreator_Singleton, swig_delete_MazeCreator_Singleton, swig_AbstractSingleton_Sl_MazeCreator_Sg__methods, swig_AbstractSingleton_Sl_MazeCreator_Sg__attributes, { "MazeCreator_Singleton", swig_AbstractSingleton_Sl_MazeCreator_Sg__cls_methods, swig_AbstractSingleton_Sl_MazeCreator_Sg__cls_attributes, swig_AbstractSingleton_Sl_MazeCreator_Sg__cls_constants }, swig_AbstractSingleton_Sl_MazeCreator_Sg__bases, swig_AbstractSingleton_Sl_MazeCreator_Sg__base_names };

static int _wrap_MessageDispatcher_Singleton_createInstance(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("AbstractSingleton< MessageDispatcher >::createInstance",0,0)
  AbstractSingleton< MessageDispatcher >::SWIGTEMPLATEDISAMBIGUATOR createInstance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MessageDispatcher_Singleton_destroyInstance(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("AbstractSingleton< MessageDispatcher >::destroyInstance",0,0)
  AbstractSingleton< MessageDispatcher >::SWIGTEMPLATEDISAMBIGUATOR destroyInstance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MessageDispatcher_Singleton_getInstance(lua_State* L) {
  int SWIG_arg = 0;
  MessageDispatcher *result = 0 ;
  
  SWIG_check_num_args("AbstractSingleton< MessageDispatcher >::getInstance",0,0)
  result = (MessageDispatcher *)AbstractSingleton< MessageDispatcher >::SWIGTEMPLATEDISAMBIGUATOR getInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MessageDispatcher,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MessageDispatcher_Singleton_hasInstance(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("AbstractSingleton< MessageDispatcher >::hasInstance",0,0)
  result = (bool)AbstractSingleton< MessageDispatcher >::SWIGTEMPLATEDISAMBIGUATOR hasInstance();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MessageDispatcher_Singleton(lua_State* L) {
  int SWIG_arg = 0;
  AbstractSingleton< MessageDispatcher > *result = 0 ;
  
  SWIG_check_num_args("AbstractSingleton< MessageDispatcher >::AbstractSingleton",0,0)
  result = (AbstractSingleton< MessageDispatcher > *)new AbstractSingleton< MessageDispatcher >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AbstractSingletonT_MessageDispatcher_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MessageDispatcher_Singleton(void *obj) {
AbstractSingleton< MessageDispatcher > *arg1 = (AbstractSingleton< MessageDispatcher > *) obj;
delete arg1;
}
static swig_lua_method swig_AbstractSingleton_Sl_MessageDispatcher_Sg__methods[] = {
    {0,0}
};
static swig_lua_attribute swig_AbstractSingleton_Sl_MessageDispatcher_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractSingleton_Sl_MessageDispatcher_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractSingleton_Sl_MessageDispatcher_Sg__cls_methods[] = {
    {"createInstance", _wrap_MessageDispatcher_Singleton_createInstance}, 
    {"destroyInstance", _wrap_MessageDispatcher_Singleton_destroyInstance}, 
    {"getInstance", _wrap_MessageDispatcher_Singleton_getInstance}, 
    {"hasInstance", _wrap_MessageDispatcher_Singleton_hasInstance}, 
    {0,0}
};
static swig_lua_const_info swig_AbstractSingleton_Sl_MessageDispatcher_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractSingleton_Sl_MessageDispatcher_Sg__bases[] = {0};
static const char *swig_AbstractSingleton_Sl_MessageDispatcher_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractSingleton_Sl_MessageDispatcher_Sg_ = { "MessageDispatcher_Singleton", &SWIGTYPE_p_AbstractSingletonT_MessageDispatcher_t,_wrap_new_MessageDispatcher_Singleton, swig_delete_MessageDispatcher_Singleton, swig_AbstractSingleton_Sl_MessageDispatcher_Sg__methods, swig_AbstractSingleton_Sl_MessageDispatcher_Sg__attributes, { "MessageDispatcher_Singleton", swig_AbstractSingleton_Sl_MessageDispatcher_Sg__cls_methods, swig_AbstractSingleton_Sl_MessageDispatcher_Sg__cls_attributes, swig_AbstractSingleton_Sl_MessageDispatcher_Sg__cls_constants }, swig_AbstractSingleton_Sl_MessageDispatcher_Sg__bases, swig_AbstractSingleton_Sl_MessageDispatcher_Sg__base_names };

static int _wrap_LuaVM_Singleton_createInstance(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("AbstractSingleton< LuaVM >::createInstance",0,0)
  AbstractSingleton< LuaVM >::SWIGTEMPLATEDISAMBIGUATOR createInstance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaVM_Singleton_destroyInstance(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("AbstractSingleton< LuaVM >::destroyInstance",0,0)
  AbstractSingleton< LuaVM >::SWIGTEMPLATEDISAMBIGUATOR destroyInstance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaVM_Singleton_getInstance(lua_State* L) {
  int SWIG_arg = 0;
  LuaVM *result = 0 ;
  
  SWIG_check_num_args("AbstractSingleton< LuaVM >::getInstance",0,0)
  result = (LuaVM *)AbstractSingleton< LuaVM >::SWIGTEMPLATEDISAMBIGUATOR getInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaVM,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaVM_Singleton_hasInstance(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("AbstractSingleton< LuaVM >::hasInstance",0,0)
  result = (bool)AbstractSingleton< LuaVM >::SWIGTEMPLATEDISAMBIGUATOR hasInstance();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LuaVM_Singleton(lua_State* L) {
  int SWIG_arg = 0;
  AbstractSingleton< LuaVM > *result = 0 ;
  
  SWIG_check_num_args("AbstractSingleton< LuaVM >::AbstractSingleton",0,0)
  result = (AbstractSingleton< LuaVM > *)new AbstractSingleton< LuaVM >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AbstractSingletonT_LuaVM_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaVM_Singleton(void *obj) {
AbstractSingleton< LuaVM > *arg1 = (AbstractSingleton< LuaVM > *) obj;
delete arg1;
}
static swig_lua_method swig_AbstractSingleton_Sl_LuaVM_Sg__methods[] = {
    {0,0}
};
static swig_lua_attribute swig_AbstractSingleton_Sl_LuaVM_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractSingleton_Sl_LuaVM_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractSingleton_Sl_LuaVM_Sg__cls_methods[] = {
    {"createInstance", _wrap_LuaVM_Singleton_createInstance}, 
    {"destroyInstance", _wrap_LuaVM_Singleton_destroyInstance}, 
    {"getInstance", _wrap_LuaVM_Singleton_getInstance}, 
    {"hasInstance", _wrap_LuaVM_Singleton_hasInstance}, 
    {0,0}
};
static swig_lua_const_info swig_AbstractSingleton_Sl_LuaVM_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractSingleton_Sl_LuaVM_Sg__bases[] = {0};
static const char *swig_AbstractSingleton_Sl_LuaVM_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractSingleton_Sl_LuaVM_Sg_ = { "LuaVM_Singleton", &SWIGTYPE_p_AbstractSingletonT_LuaVM_t,_wrap_new_LuaVM_Singleton, swig_delete_LuaVM_Singleton, swig_AbstractSingleton_Sl_LuaVM_Sg__methods, swig_AbstractSingleton_Sl_LuaVM_Sg__attributes, { "LuaVM_Singleton", swig_AbstractSingleton_Sl_LuaVM_Sg__cls_methods, swig_AbstractSingleton_Sl_LuaVM_Sg__cls_attributes, swig_AbstractSingleton_Sl_LuaVM_Sg__cls_constants }, swig_AbstractSingleton_Sl_LuaVM_Sg__bases, swig_AbstractSingleton_Sl_LuaVM_Sg__base_names };

static int _wrap_GLDebugDrawer_Singleton_createInstance(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("AbstractSingleton< GLDebugDrawer >::createInstance",0,0)
  AbstractSingleton< GLDebugDrawer >::SWIGTEMPLATEDISAMBIGUATOR createInstance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLDebugDrawer_Singleton_destroyInstance(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("AbstractSingleton< GLDebugDrawer >::destroyInstance",0,0)
  AbstractSingleton< GLDebugDrawer >::SWIGTEMPLATEDISAMBIGUATOR destroyInstance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLDebugDrawer_Singleton_getInstance(lua_State* L) {
  int SWIG_arg = 0;
  GLDebugDrawer *result = 0 ;
  
  SWIG_check_num_args("AbstractSingleton< GLDebugDrawer >::getInstance",0,0)
  result = (GLDebugDrawer *)AbstractSingleton< GLDebugDrawer >::SWIGTEMPLATEDISAMBIGUATOR getInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GLDebugDrawer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLDebugDrawer_Singleton_hasInstance(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("AbstractSingleton< GLDebugDrawer >::hasInstance",0,0)
  result = (bool)AbstractSingleton< GLDebugDrawer >::SWIGTEMPLATEDISAMBIGUATOR hasInstance();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLDebugDrawer_Singleton(lua_State* L) {
  int SWIG_arg = 0;
  AbstractSingleton< GLDebugDrawer > *result = 0 ;
  
  SWIG_check_num_args("AbstractSingleton< GLDebugDrawer >::AbstractSingleton",0,0)
  result = (AbstractSingleton< GLDebugDrawer > *)new AbstractSingleton< GLDebugDrawer >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AbstractSingletonT_GLDebugDrawer_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GLDebugDrawer_Singleton(void *obj) {
AbstractSingleton< GLDebugDrawer > *arg1 = (AbstractSingleton< GLDebugDrawer > *) obj;
delete arg1;
}
static swig_lua_method swig_AbstractSingleton_Sl_GLDebugDrawer_Sg__methods[] = {
    {0,0}
};
static swig_lua_attribute swig_AbstractSingleton_Sl_GLDebugDrawer_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AbstractSingleton_Sl_GLDebugDrawer_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbstractSingleton_Sl_GLDebugDrawer_Sg__cls_methods[] = {
    {"createInstance", _wrap_GLDebugDrawer_Singleton_createInstance}, 
    {"destroyInstance", _wrap_GLDebugDrawer_Singleton_destroyInstance}, 
    {"getInstance", _wrap_GLDebugDrawer_Singleton_getInstance}, 
    {"hasInstance", _wrap_GLDebugDrawer_Singleton_hasInstance}, 
    {0,0}
};
static swig_lua_const_info swig_AbstractSingleton_Sl_GLDebugDrawer_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AbstractSingleton_Sl_GLDebugDrawer_Sg__bases[] = {0};
static const char *swig_AbstractSingleton_Sl_GLDebugDrawer_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_AbstractSingleton_Sl_GLDebugDrawer_Sg_ = { "GLDebugDrawer_Singleton", &SWIGTYPE_p_AbstractSingletonT_GLDebugDrawer_t,_wrap_new_GLDebugDrawer_Singleton, swig_delete_GLDebugDrawer_Singleton, swig_AbstractSingleton_Sl_GLDebugDrawer_Sg__methods, swig_AbstractSingleton_Sl_GLDebugDrawer_Sg__attributes, { "GLDebugDrawer_Singleton", swig_AbstractSingleton_Sl_GLDebugDrawer_Sg__cls_methods, swig_AbstractSingleton_Sl_GLDebugDrawer_Sg__cls_attributes, swig_AbstractSingleton_Sl_GLDebugDrawer_Sg__cls_constants }, swig_AbstractSingleton_Sl_GLDebugDrawer_Sg__bases, swig_AbstractSingleton_Sl_GLDebugDrawer_Sg__base_names };

static int _wrap_new_WallAvoidanceFunction(lua_State* L) {
  int SWIG_arg = 0;
  WallAvoidanceFunction *result = 0 ;
  
  SWIG_check_num_args("WallAvoidanceFunction::WallAvoidanceFunction",0,0)
  result = (WallAvoidanceFunction *)new WallAvoidanceFunction();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WallAvoidanceFunction,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WallAvoidanceFunction_SetFrom(lua_State* L) {
  int SWIG_arg = 0;
  WallAvoidanceFunction *arg1 = (WallAvoidanceFunction *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("WallAvoidanceFunction::SetFrom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WallAvoidanceFunction::SetFrom",1,"WallAvoidanceFunction *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("WallAvoidanceFunction::SetFrom",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WallAvoidanceFunction,0))){
    SWIG_fail_ptr("WallAvoidanceFunction_SetFrom",1,SWIGTYPE_p_WallAvoidanceFunction);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("WallAvoidanceFunction_SetFrom",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->SetFrom((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WallAvoidanceFunction_SetTo(lua_State* L) {
  int SWIG_arg = 0;
  WallAvoidanceFunction *arg1 = (WallAvoidanceFunction *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("WallAvoidanceFunction::SetTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WallAvoidanceFunction::SetTo",1,"WallAvoidanceFunction *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("WallAvoidanceFunction::SetTo",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WallAvoidanceFunction,0))){
    SWIG_fail_ptr("WallAvoidanceFunction_SetTo",1,SWIGTYPE_p_WallAvoidanceFunction);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("WallAvoidanceFunction_SetTo",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->SetTo((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WallAvoidanceFunction_Set(lua_State* L) {
  int SWIG_arg = 0;
  WallAvoidanceFunction *arg1 = (WallAvoidanceFunction *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("WallAvoidanceFunction::Set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WallAvoidanceFunction::Set",1,"WallAvoidanceFunction *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("WallAvoidanceFunction::Set",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("WallAvoidanceFunction::Set",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WallAvoidanceFunction,0))){
    SWIG_fail_ptr("WallAvoidanceFunction_Set",1,SWIGTYPE_p_WallAvoidanceFunction);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("WallAvoidanceFunction_Set",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("WallAvoidanceFunction_Set",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->Set((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WallAvoidanceFunction___call(lua_State* L) {
  int SWIG_arg = 0;
  WallAvoidanceFunction *arg1 = (WallAvoidanceFunction *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  
  SWIG_check_num_args("WallAvoidanceFunction::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WallAvoidanceFunction::operator ()",1,"WallAvoidanceFunction *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WallAvoidanceFunction::operator ()",2,"BaseEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WallAvoidanceFunction,0))){
    SWIG_fail_ptr("WallAvoidanceFunction___call",1,SWIGTYPE_p_WallAvoidanceFunction);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("WallAvoidanceFunction___call",2,SWIGTYPE_p_BaseEntity);
  }
  
  (arg1)->operator ()(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WallAvoidanceFunction_GetClosestPoint(lua_State* L) {
  int SWIG_arg = 0;
  WallAvoidanceFunction *arg1 = (WallAvoidanceFunction *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("WallAvoidanceFunction::GetClosestPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WallAvoidanceFunction::GetClosestPoint",1,"WallAvoidanceFunction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WallAvoidanceFunction,0))){
    SWIG_fail_ptr("WallAvoidanceFunction_GetClosestPoint",1,SWIGTYPE_p_WallAvoidanceFunction);
  }
  
  result = (arg1)->GetClosestPoint();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WallAvoidanceFunction_GetClosestWall(lua_State* L) {
  int SWIG_arg = 0;
  WallAvoidanceFunction *arg1 = (WallAvoidanceFunction *) 0 ;
  BaseEntity *result = 0 ;
  
  SWIG_check_num_args("WallAvoidanceFunction::GetClosestWall",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WallAvoidanceFunction::GetClosestWall",1,"WallAvoidanceFunction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WallAvoidanceFunction,0))){
    SWIG_fail_ptr("WallAvoidanceFunction_GetClosestWall",1,SWIGTYPE_p_WallAvoidanceFunction);
  }
  
  result = (BaseEntity *)(arg1)->GetClosestWall();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WallAvoidanceFunction(void *obj) {
WallAvoidanceFunction *arg1 = (WallAvoidanceFunction *) obj;
delete arg1;
}
static swig_lua_method swig_WallAvoidanceFunction_methods[] = {
    {"SetFrom", _wrap_WallAvoidanceFunction_SetFrom}, 
    {"SetTo", _wrap_WallAvoidanceFunction_SetTo}, 
    {"Set", _wrap_WallAvoidanceFunction_Set}, 
    {"__call", _wrap_WallAvoidanceFunction___call}, 
    {"GetClosestPoint", _wrap_WallAvoidanceFunction_GetClosestPoint}, 
    {"GetClosestWall", _wrap_WallAvoidanceFunction_GetClosestWall}, 
    {0,0}
};
static swig_lua_attribute swig_WallAvoidanceFunction_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_WallAvoidanceFunction_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WallAvoidanceFunction_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_WallAvoidanceFunction_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_WallAvoidanceFunction_bases[] = {0};
static const char *swig_WallAvoidanceFunction_base_names[] = {0};
static swig_lua_class _wrap_class_WallAvoidanceFunction = { "WallAvoidanceFunction", &SWIGTYPE_p_WallAvoidanceFunction,_wrap_new_WallAvoidanceFunction, swig_delete_WallAvoidanceFunction, swig_WallAvoidanceFunction_methods, swig_WallAvoidanceFunction_attributes, { "WallAvoidanceFunction", swig_WallAvoidanceFunction_cls_methods, swig_WallAvoidanceFunction_cls_attributes, swig_WallAvoidanceFunction_cls_constants }, swig_WallAvoidanceFunction_bases, swig_WallAvoidanceFunction_base_names };

static int _wrap_DeviceInputTime_getTimeStampFrame(lua_State* L) {
  int SWIG_arg = 0;
  DeviceInputTime *arg1 = (DeviceInputTime *) 0 ;
  double result;
  
  SWIG_check_num_args("DeviceInputTime::getTimeStampFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceInputTime::getTimeStampFrame",1,"DeviceInputTime const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceInputTime,0))){
    SWIG_fail_ptr("DeviceInputTime_getTimeStampFrame",1,SWIGTYPE_p_DeviceInputTime);
  }
  
  result = (double)((DeviceInputTime const *)arg1)->getTimeStampFrame();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceInputTime_getTimeStampTick(lua_State* L) {
  int SWIG_arg = 0;
  DeviceInputTime *arg1 = (DeviceInputTime *) 0 ;
  double result;
  
  SWIG_check_num_args("DeviceInputTime::getTimeStampTick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceInputTime::getTimeStampTick",1,"DeviceInputTime const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceInputTime,0))){
    SWIG_fail_ptr("DeviceInputTime_getTimeStampTick",1,SWIGTYPE_p_DeviceInputTime);
  }
  
  result = (double)((DeviceInputTime const *)arg1)->getTimeStampTick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DeviceInputTime(void *obj) {
DeviceInputTime *arg1 = (DeviceInputTime *) obj;
delete arg1;
}
static swig_lua_method swig_DeviceInputTime_methods[] = {
    {"getTimeStampFrame", _wrap_DeviceInputTime_getTimeStampFrame}, 
    {"getTimeStampTick", _wrap_DeviceInputTime_getTimeStampTick}, 
    {0,0}
};
static swig_lua_attribute swig_DeviceInputTime_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DeviceInputTime_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DeviceInputTime_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DeviceInputTime_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DeviceInputTime_bases[] = {0};
static const char *swig_DeviceInputTime_base_names[] = {0};
static swig_lua_class _wrap_class_DeviceInputTime = { "DeviceInputTime", &SWIGTYPE_p_DeviceInputTime,0, swig_delete_DeviceInputTime, swig_DeviceInputTime_methods, swig_DeviceInputTime_attributes, { "DeviceInputTime", swig_DeviceInputTime_cls_methods, swig_DeviceInputTime_cls_attributes, swig_DeviceInputTime_cls_constants }, swig_DeviceInputTime_bases, swig_DeviceInputTime_base_names };

static int _wrap_DeviceGesture_getState(lua_State* L) {
  int SWIG_arg = 0;
  DeviceGesture *arg1 = (DeviceGesture *) 0 ;
  DeviceGestureState result;
  
  SWIG_check_num_args("DeviceGesture::getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceGesture::getState",1,"DeviceGesture const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceGesture,0))){
    SWIG_fail_ptr("DeviceGesture_getState",1,SWIGTYPE_p_DeviceGesture);
  }
  
  result = (DeviceGestureState)((DeviceGesture const *)arg1)->getState();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceGesture_getNumberOfTouches(lua_State* L) {
  int SWIG_arg = 0;
  DeviceGesture *arg1 = (DeviceGesture *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("DeviceGesture::getNumberOfTouches",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceGesture::getNumberOfTouches",1,"DeviceGesture const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceGesture,0))){
    SWIG_fail_ptr("DeviceGesture_getNumberOfTouches",1,SWIGTYPE_p_DeviceGesture);
  }
  
  result = (unsigned int)((DeviceGesture const *)arg1)->getNumberOfTouches();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DeviceGesture(void *obj) {
DeviceGesture *arg1 = (DeviceGesture *) obj;
delete arg1;
}
static swig_lua_method swig_DeviceGesture_methods[] = {
    {"getState", _wrap_DeviceGesture_getState}, 
    {"getNumberOfTouches", _wrap_DeviceGesture_getNumberOfTouches}, 
    {0,0}
};
static swig_lua_attribute swig_DeviceGesture_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DeviceGesture_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DeviceGesture_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DeviceGesture_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DeviceGesture_bases[] = {0};
static const char *swig_DeviceGesture_base_names[] = {0};
static swig_lua_class _wrap_class_DeviceGesture = { "DeviceGesture", &SWIGTYPE_p_DeviceGesture,0, swig_delete_DeviceGesture, swig_DeviceGesture_methods, swig_DeviceGesture_attributes, { "DeviceGesture", swig_DeviceGesture_cls_methods, swig_DeviceGesture_cls_attributes, swig_DeviceGesture_cls_constants }, swig_DeviceGesture_bases, swig_DeviceGesture_base_names };

static int _wrap_new_DeviceTapGesture(lua_State* L) {
  int SWIG_arg = 0;
  DeviceTapGesture *arg1 = 0 ;
  DeviceTapGesture *result = 0 ;
  
  SWIG_check_num_args("DeviceTapGesture::DeviceTapGesture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DeviceTapGesture::DeviceTapGesture",1,"DeviceTapGesture const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceTapGesture,0))){
    SWIG_fail_ptr("new_DeviceTapGesture",1,SWIGTYPE_p_DeviceTapGesture);
  }
  
  result = (DeviceTapGesture *)new DeviceTapGesture((DeviceTapGesture const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DeviceTapGesture,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DeviceTapGesture(void *obj) {
DeviceTapGesture *arg1 = (DeviceTapGesture *) obj;
delete arg1;
}
static swig_lua_method swig_DeviceTapGesture_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_DeviceTapGesture_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DeviceTapGesture_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DeviceTapGesture_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DeviceTapGesture_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DeviceTapGesture_bases[] = {0,0};
static const char *swig_DeviceTapGesture_base_names[] = {"DeviceGesture *",0};
static swig_lua_class _wrap_class_DeviceTapGesture = { "DeviceTapGesture", &SWIGTYPE_p_DeviceTapGesture,_wrap_new_DeviceTapGesture, swig_delete_DeviceTapGesture, swig_DeviceTapGesture_methods, swig_DeviceTapGesture_attributes, { "DeviceTapGesture", swig_DeviceTapGesture_cls_methods, swig_DeviceTapGesture_cls_attributes, swig_DeviceTapGesture_cls_constants }, swig_DeviceTapGesture_bases, swig_DeviceTapGesture_base_names };

static int _wrap_DevicePinchGesture_getScale(lua_State* L) {
  int SWIG_arg = 0;
  DevicePinchGesture *arg1 = (DevicePinchGesture *) 0 ;
  float result;
  
  SWIG_check_num_args("DevicePinchGesture::getScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DevicePinchGesture::getScale",1,"DevicePinchGesture const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DevicePinchGesture,0))){
    SWIG_fail_ptr("DevicePinchGesture_getScale",1,SWIGTYPE_p_DevicePinchGesture);
  }
  
  result = (float)((DevicePinchGesture const *)arg1)->getScale();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DevicePinchGesture_getVelocity(lua_State* L) {
  int SWIG_arg = 0;
  DevicePinchGesture *arg1 = (DevicePinchGesture *) 0 ;
  float result;
  
  SWIG_check_num_args("DevicePinchGesture::getVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DevicePinchGesture::getVelocity",1,"DevicePinchGesture const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DevicePinchGesture,0))){
    SWIG_fail_ptr("DevicePinchGesture_getVelocity",1,SWIGTYPE_p_DevicePinchGesture);
  }
  
  result = (float)((DevicePinchGesture const *)arg1)->getVelocity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DevicePinchGesture(void *obj) {
DevicePinchGesture *arg1 = (DevicePinchGesture *) obj;
delete arg1;
}
static swig_lua_method swig_DevicePinchGesture_methods[] = {
    {"getScale", _wrap_DevicePinchGesture_getScale}, 
    {"getVelocity", _wrap_DevicePinchGesture_getVelocity}, 
    {0,0}
};
static swig_lua_attribute swig_DevicePinchGesture_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DevicePinchGesture_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DevicePinchGesture_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DevicePinchGesture_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DevicePinchGesture_bases[] = {0,0};
static const char *swig_DevicePinchGesture_base_names[] = {"DeviceGesture *",0};
static swig_lua_class _wrap_class_DevicePinchGesture = { "DevicePinchGesture", &SWIGTYPE_p_DevicePinchGesture,0, swig_delete_DevicePinchGesture, swig_DevicePinchGesture_methods, swig_DevicePinchGesture_attributes, { "DevicePinchGesture", swig_DevicePinchGesture_cls_methods, swig_DevicePinchGesture_cls_attributes, swig_DevicePinchGesture_cls_constants }, swig_DevicePinchGesture_bases, swig_DevicePinchGesture_base_names };

static int _wrap_DevicePanGesture_getTranslation(lua_State* L) {
  int SWIG_arg = 0;
  DevicePanGesture *arg1 = (DevicePanGesture *) 0 ;
  btVector2 *result = 0 ;
  
  SWIG_check_num_args("DevicePanGesture::getTranslation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DevicePanGesture::getTranslation",1,"DevicePanGesture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DevicePanGesture,0))){
    SWIG_fail_ptr("DevicePanGesture_getTranslation",1,SWIGTYPE_p_DevicePanGesture);
  }
  
  result = (btVector2 *) &(arg1)->getTranslation();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DevicePanGesture(void *obj) {
DevicePanGesture *arg1 = (DevicePanGesture *) obj;
delete arg1;
}
static swig_lua_method swig_DevicePanGesture_methods[] = {
    {"getTranslation", _wrap_DevicePanGesture_getTranslation}, 
    {0,0}
};
static swig_lua_attribute swig_DevicePanGesture_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DevicePanGesture_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DevicePanGesture_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DevicePanGesture_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DevicePanGesture_bases[] = {0,0};
static const char *swig_DevicePanGesture_base_names[] = {"DeviceGesture *",0};
static swig_lua_class _wrap_class_DevicePanGesture = { "DevicePanGesture", &SWIGTYPE_p_DevicePanGesture,0, swig_delete_DevicePanGesture, swig_DevicePanGesture_methods, swig_DevicePanGesture_attributes, { "DevicePanGesture", swig_DevicePanGesture_cls_methods, swig_DevicePanGesture_cls_attributes, swig_DevicePanGesture_cls_constants }, swig_DevicePanGesture_bases, swig_DevicePanGesture_base_names };

static void swig_delete_DeviceSwipeGesture(void *obj) {
DeviceSwipeGesture *arg1 = (DeviceSwipeGesture *) obj;
delete arg1;
}
static swig_lua_method swig_DeviceSwipeGesture_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_DeviceSwipeGesture_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DeviceSwipeGesture_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DeviceSwipeGesture_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DeviceSwipeGesture_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DeviceSwipeGesture_bases[] = {0,0};
static const char *swig_DeviceSwipeGesture_base_names[] = {"DeviceGesture *",0};
static swig_lua_class _wrap_class_DeviceSwipeGesture = { "DeviceSwipeGesture", &SWIGTYPE_p_DeviceSwipeGesture,0, swig_delete_DeviceSwipeGesture, swig_DeviceSwipeGesture_methods, swig_DeviceSwipeGesture_attributes, { "DeviceSwipeGesture", swig_DeviceSwipeGesture_cls_methods, swig_DeviceSwipeGesture_cls_attributes, swig_DeviceSwipeGesture_cls_constants }, swig_DeviceSwipeGesture_bases, swig_DeviceSwipeGesture_base_names };

static int _wrap_DeviceRotationGesture_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  DeviceRotationGesture *arg1 = (DeviceRotationGesture *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("DeviceRotationGesture::getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceRotationGesture::getRotation",1,"DeviceRotationGesture const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceRotationGesture,0))){
    SWIG_fail_ptr("DeviceRotationGesture_getRotation",1,SWIGTYPE_p_DeviceRotationGesture);
  }
  
  result = (btScalar)((DeviceRotationGesture const *)arg1)->getRotation();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceRotationGesture_getVelocity(lua_State* L) {
  int SWIG_arg = 0;
  DeviceRotationGesture *arg1 = (DeviceRotationGesture *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("DeviceRotationGesture::getVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceRotationGesture::getVelocity",1,"DeviceRotationGesture const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceRotationGesture,0))){
    SWIG_fail_ptr("DeviceRotationGesture_getVelocity",1,SWIGTYPE_p_DeviceRotationGesture);
  }
  
  result = (btScalar)((DeviceRotationGesture const *)arg1)->getVelocity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DeviceRotationGesture(void *obj) {
DeviceRotationGesture *arg1 = (DeviceRotationGesture *) obj;
delete arg1;
}
static swig_lua_method swig_DeviceRotationGesture_methods[] = {
    {"getRotation", _wrap_DeviceRotationGesture_getRotation}, 
    {"getVelocity", _wrap_DeviceRotationGesture_getVelocity}, 
    {0,0}
};
static swig_lua_attribute swig_DeviceRotationGesture_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DeviceRotationGesture_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DeviceRotationGesture_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DeviceRotationGesture_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DeviceRotationGesture_bases[] = {0,0};
static const char *swig_DeviceRotationGesture_base_names[] = {"DeviceGesture *",0};
static swig_lua_class _wrap_class_DeviceRotationGesture = { "DeviceRotationGesture", &SWIGTYPE_p_DeviceRotationGesture,0, swig_delete_DeviceRotationGesture, swig_DeviceRotationGesture_methods, swig_DeviceRotationGesture_attributes, { "DeviceRotationGesture", swig_DeviceRotationGesture_cls_methods, swig_DeviceRotationGesture_cls_attributes, swig_DeviceRotationGesture_cls_constants }, swig_DeviceRotationGesture_bases, swig_DeviceRotationGesture_base_names };

static void swig_delete_DeviceLongPressGesture(void *obj) {
DeviceLongPressGesture *arg1 = (DeviceLongPressGesture *) obj;
delete arg1;
}
static swig_lua_method swig_DeviceLongPressGesture_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_DeviceLongPressGesture_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DeviceLongPressGesture_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DeviceLongPressGesture_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DeviceLongPressGesture_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DeviceLongPressGesture_bases[] = {0,0};
static const char *swig_DeviceLongPressGesture_base_names[] = {"DeviceGesture *",0};
static swig_lua_class _wrap_class_DeviceLongPressGesture = { "DeviceLongPressGesture", &SWIGTYPE_p_DeviceLongPressGesture,0, swig_delete_DeviceLongPressGesture, swig_DeviceLongPressGesture_methods, swig_DeviceLongPressGesture_attributes, { "DeviceLongPressGesture", swig_DeviceLongPressGesture_cls_methods, swig_DeviceLongPressGesture_cls_attributes, swig_DeviceLongPressGesture_cls_constants }, swig_DeviceLongPressGesture_bases, swig_DeviceLongPressGesture_base_names };

static int _wrap_new_DeviceAccelerometer(lua_State* L) {
  int SWIG_arg = 0;
  DeviceAccelerometer *arg1 = 0 ;
  DeviceAccelerometer *result = 0 ;
  
  SWIG_check_num_args("DeviceAccelerometer::DeviceAccelerometer",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DeviceAccelerometer::DeviceAccelerometer",1,"DeviceAccelerometer const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceAccelerometer,0))){
    SWIG_fail_ptr("new_DeviceAccelerometer",1,SWIGTYPE_p_DeviceAccelerometer);
  }
  
  result = (DeviceAccelerometer *)new DeviceAccelerometer((DeviceAccelerometer const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DeviceAccelerometer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceAccelerometer_getAcceleration(lua_State* L) {
  int SWIG_arg = 0;
  DeviceAccelerometer *arg1 = (DeviceAccelerometer *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("DeviceAccelerometer::getAcceleration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceAccelerometer::getAcceleration",1,"DeviceAccelerometer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceAccelerometer,0))){
    SWIG_fail_ptr("DeviceAccelerometer_getAcceleration",1,SWIGTYPE_p_DeviceAccelerometer);
  }
  
  result = (btVector3 *) &((DeviceAccelerometer const *)arg1)->getAcceleration();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DeviceAccelerometer(void *obj) {
DeviceAccelerometer *arg1 = (DeviceAccelerometer *) obj;
delete arg1;
}
static swig_lua_method swig_DeviceAccelerometer_methods[] = {
    {"getAcceleration", _wrap_DeviceAccelerometer_getAcceleration}, 
    {0,0}
};
static swig_lua_attribute swig_DeviceAccelerometer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DeviceAccelerometer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DeviceAccelerometer_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DeviceAccelerometer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DeviceAccelerometer_bases[] = {0,0};
static const char *swig_DeviceAccelerometer_base_names[] = {"DeviceInputTime *",0};
static swig_lua_class _wrap_class_DeviceAccelerometer = { "DeviceAccelerometer", &SWIGTYPE_p_DeviceAccelerometer,_wrap_new_DeviceAccelerometer, swig_delete_DeviceAccelerometer, swig_DeviceAccelerometer_methods, swig_DeviceAccelerometer_attributes, { "DeviceAccelerometer", swig_DeviceAccelerometer_cls_methods, swig_DeviceAccelerometer_cls_attributes, swig_DeviceAccelerometer_cls_constants }, swig_DeviceAccelerometer_bases, swig_DeviceAccelerometer_base_names };

static int _wrap_new_DeviceAttitude__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DeviceAttitude *result = 0 ;
  
  SWIG_check_num_args("DeviceAttitude::DeviceAttitude",0,0)
  result = (DeviceAttitude *)new DeviceAttitude();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DeviceAttitude,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DeviceAttitude__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DeviceAttitude *arg1 = 0 ;
  DeviceAttitude *result = 0 ;
  
  SWIG_check_num_args("DeviceAttitude::DeviceAttitude",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DeviceAttitude::DeviceAttitude",1,"DeviceAttitude const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceAttitude,0))){
    SWIG_fail_ptr("new_DeviceAttitude",1,SWIGTYPE_p_DeviceAttitude);
  }
  
  result = (DeviceAttitude *)new DeviceAttitude((DeviceAttitude const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DeviceAttitude,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DeviceAttitude(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DeviceAttitude__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DeviceAttitude, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DeviceAttitude__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DeviceAttitude'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DeviceAttitude::DeviceAttitude()\n"
    "    DeviceAttitude::DeviceAttitude(DeviceAttitude const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DeviceAttitude_getRoll(lua_State* L) {
  int SWIG_arg = 0;
  DeviceAttitude *arg1 = (DeviceAttitude *) 0 ;
  double result;
  
  SWIG_check_num_args("DeviceAttitude::getRoll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceAttitude::getRoll",1,"DeviceAttitude const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceAttitude,0))){
    SWIG_fail_ptr("DeviceAttitude_getRoll",1,SWIGTYPE_p_DeviceAttitude);
  }
  
  result = (double)((DeviceAttitude const *)arg1)->getRoll();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceAttitude_getPitch(lua_State* L) {
  int SWIG_arg = 0;
  DeviceAttitude *arg1 = (DeviceAttitude *) 0 ;
  double result;
  
  SWIG_check_num_args("DeviceAttitude::getPitch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceAttitude::getPitch",1,"DeviceAttitude const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceAttitude,0))){
    SWIG_fail_ptr("DeviceAttitude_getPitch",1,SWIGTYPE_p_DeviceAttitude);
  }
  
  result = (double)((DeviceAttitude const *)arg1)->getPitch();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceAttitude_getYaw(lua_State* L) {
  int SWIG_arg = 0;
  DeviceAttitude *arg1 = (DeviceAttitude *) 0 ;
  double result;
  
  SWIG_check_num_args("DeviceAttitude::getYaw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceAttitude::getYaw",1,"DeviceAttitude const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceAttitude,0))){
    SWIG_fail_ptr("DeviceAttitude_getYaw",1,SWIGTYPE_p_DeviceAttitude);
  }
  
  result = (double)((DeviceAttitude const *)arg1)->getYaw();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceAttitude_getRotationMatrix(lua_State* L) {
  int SWIG_arg = 0;
  DeviceAttitude *arg1 = (DeviceAttitude *) 0 ;
  btMatrix3x3 *result = 0 ;
  
  SWIG_check_num_args("DeviceAttitude::getRotationMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceAttitude::getRotationMatrix",1,"DeviceAttitude const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceAttitude,0))){
    SWIG_fail_ptr("DeviceAttitude_getRotationMatrix",1,SWIGTYPE_p_DeviceAttitude);
  }
  
  result = (btMatrix3x3 *) &((DeviceAttitude const *)arg1)->getRotationMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMatrix3x3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceAttitude_getQuaternion(lua_State* L) {
  int SWIG_arg = 0;
  DeviceAttitude *arg1 = (DeviceAttitude *) 0 ;
  btQuaternion *result = 0 ;
  
  SWIG_check_num_args("DeviceAttitude::getQuaternion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceAttitude::getQuaternion",1,"DeviceAttitude const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceAttitude,0))){
    SWIG_fail_ptr("DeviceAttitude_getQuaternion",1,SWIGTYPE_p_DeviceAttitude);
  }
  
  result = (btQuaternion *) &((DeviceAttitude const *)arg1)->getQuaternion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btQuaternion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DeviceAttitude(void *obj) {
DeviceAttitude *arg1 = (DeviceAttitude *) obj;
delete arg1;
}
static swig_lua_method swig_DeviceAttitude_methods[] = {
    {"getRoll", _wrap_DeviceAttitude_getRoll}, 
    {"getPitch", _wrap_DeviceAttitude_getPitch}, 
    {"getYaw", _wrap_DeviceAttitude_getYaw}, 
    {"getRotationMatrix", _wrap_DeviceAttitude_getRotationMatrix}, 
    {"getQuaternion", _wrap_DeviceAttitude_getQuaternion}, 
    {0,0}
};
static swig_lua_attribute swig_DeviceAttitude_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DeviceAttitude_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DeviceAttitude_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DeviceAttitude_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DeviceAttitude_bases[] = {0};
static const char *swig_DeviceAttitude_base_names[] = {0};
static swig_lua_class _wrap_class_DeviceAttitude = { "DeviceAttitude", &SWIGTYPE_p_DeviceAttitude,_wrap_new_DeviceAttitude, swig_delete_DeviceAttitude, swig_DeviceAttitude_methods, swig_DeviceAttitude_attributes, { "DeviceAttitude", swig_DeviceAttitude_cls_methods, swig_DeviceAttitude_cls_attributes, swig_DeviceAttitude_cls_constants }, swig_DeviceAttitude_bases, swig_DeviceAttitude_base_names };

static int _wrap_new_DeviceMotion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DeviceMotion *result = 0 ;
  
  SWIG_check_num_args("DeviceMotion::DeviceMotion",0,0)
  result = (DeviceMotion *)new DeviceMotion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DeviceMotion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceMotion_getAttitude(lua_State* L) {
  int SWIG_arg = 0;
  DeviceMotion *arg1 = (DeviceMotion *) 0 ;
  DeviceAttitude *result = 0 ;
  
  SWIG_check_num_args("DeviceMotion::getAttitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceMotion::getAttitude",1,"DeviceMotion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceMotion,0))){
    SWIG_fail_ptr("DeviceMotion_getAttitude",1,SWIGTYPE_p_DeviceMotion);
  }
  
  result = (DeviceAttitude *) &((DeviceMotion const *)arg1)->getAttitude();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DeviceAttitude,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceMotion_getRotationRate(lua_State* L) {
  int SWIG_arg = 0;
  DeviceMotion *arg1 = (DeviceMotion *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("DeviceMotion::getRotationRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceMotion::getRotationRate",1,"DeviceMotion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceMotion,0))){
    SWIG_fail_ptr("DeviceMotion_getRotationRate",1,SWIGTYPE_p_DeviceMotion);
  }
  
  result = (btVector3 *) &((DeviceMotion const *)arg1)->getRotationRate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceMotion_getGravity(lua_State* L) {
  int SWIG_arg = 0;
  DeviceMotion *arg1 = (DeviceMotion *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("DeviceMotion::getGravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceMotion::getGravity",1,"DeviceMotion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceMotion,0))){
    SWIG_fail_ptr("DeviceMotion_getGravity",1,SWIGTYPE_p_DeviceMotion);
  }
  
  result = (btVector3 *) &((DeviceMotion const *)arg1)->getGravity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceMotion_getUserAcceleration(lua_State* L) {
  int SWIG_arg = 0;
  DeviceMotion *arg1 = (DeviceMotion *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("DeviceMotion::getUserAcceleration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceMotion::getUserAcceleration",1,"DeviceMotion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceMotion,0))){
    SWIG_fail_ptr("DeviceMotion_getUserAcceleration",1,SWIGTYPE_p_DeviceMotion);
  }
  
  result = (btVector3 *) &((DeviceMotion const *)arg1)->getUserAcceleration();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceMotion_getMagneticField(lua_State* L) {
  int SWIG_arg = 0;
  DeviceMotion *arg1 = (DeviceMotion *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("DeviceMotion::getMagneticField",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceMotion::getMagneticField",1,"DeviceMotion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceMotion,0))){
    SWIG_fail_ptr("DeviceMotion_getMagneticField",1,SWIGTYPE_p_DeviceMotion);
  }
  
  result = (btVector3 *) &((DeviceMotion const *)arg1)->getMagneticField();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DeviceMotion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DeviceMotion *arg1 = 0 ;
  DeviceMotion *result = 0 ;
  
  SWIG_check_num_args("DeviceMotion::DeviceMotion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DeviceMotion::DeviceMotion",1,"DeviceMotion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceMotion,0))){
    SWIG_fail_ptr("new_DeviceMotion",1,SWIGTYPE_p_DeviceMotion);
  }
  
  result = (DeviceMotion *)new DeviceMotion((DeviceMotion const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DeviceMotion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DeviceMotion(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DeviceMotion__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DeviceMotion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DeviceMotion__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DeviceMotion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DeviceMotion::DeviceMotion()\n"
    "    DeviceMotion::DeviceMotion(DeviceMotion const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_DeviceMotion(void *obj) {
DeviceMotion *arg1 = (DeviceMotion *) obj;
delete arg1;
}
static swig_lua_method swig_DeviceMotion_methods[] = {
    {"getAttitude", _wrap_DeviceMotion_getAttitude}, 
    {"getRotationRate", _wrap_DeviceMotion_getRotationRate}, 
    {"getGravity", _wrap_DeviceMotion_getGravity}, 
    {"getUserAcceleration", _wrap_DeviceMotion_getUserAcceleration}, 
    {"getMagneticField", _wrap_DeviceMotion_getMagneticField}, 
    {0,0}
};
static swig_lua_attribute swig_DeviceMotion_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DeviceMotion_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DeviceMotion_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DeviceMotion_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DeviceMotion_bases[] = {0,0};
static const char *swig_DeviceMotion_base_names[] = {"DeviceInputTime *",0};
static swig_lua_class _wrap_class_DeviceMotion = { "DeviceMotion", &SWIGTYPE_p_DeviceMotion,_wrap_new_DeviceMotion, swig_delete_DeviceMotion, swig_DeviceMotion_methods, swig_DeviceMotion_attributes, { "DeviceMotion", swig_DeviceMotion_cls_methods, swig_DeviceMotion_cls_attributes, swig_DeviceMotion_cls_constants }, swig_DeviceMotion_bases, swig_DeviceMotion_base_names };

static int _wrap_DeviceGyro_getRotationRate(lua_State* L) {
  int SWIG_arg = 0;
  DeviceGyro *arg1 = (DeviceGyro *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("DeviceGyro::getRotationRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceGyro::getRotationRate",1,"DeviceGyro const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceGyro,0))){
    SWIG_fail_ptr("DeviceGyro_getRotationRate",1,SWIGTYPE_p_DeviceGyro);
  }
  
  result = (btVector3 *) &((DeviceGyro const *)arg1)->getRotationRate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DeviceGyro(lua_State* L) {
  int SWIG_arg = 0;
  DeviceGyro *arg1 = 0 ;
  DeviceGyro *result = 0 ;
  
  SWIG_check_num_args("DeviceGyro::DeviceGyro",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DeviceGyro::DeviceGyro",1,"DeviceGyro const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceGyro,0))){
    SWIG_fail_ptr("new_DeviceGyro",1,SWIGTYPE_p_DeviceGyro);
  }
  
  result = (DeviceGyro *)new DeviceGyro((DeviceGyro const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DeviceGyro,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DeviceGyro(void *obj) {
DeviceGyro *arg1 = (DeviceGyro *) obj;
delete arg1;
}
static swig_lua_method swig_DeviceGyro_methods[] = {
    {"getRotationRate", _wrap_DeviceGyro_getRotationRate}, 
    {0,0}
};
static swig_lua_attribute swig_DeviceGyro_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DeviceGyro_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DeviceGyro_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DeviceGyro_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DeviceGyro_bases[] = {0,0};
static const char *swig_DeviceGyro_base_names[] = {"DeviceInputTime *",0};
static swig_lua_class _wrap_class_DeviceGyro = { "DeviceGyro", &SWIGTYPE_p_DeviceGyro,_wrap_new_DeviceGyro, swig_delete_DeviceGyro, swig_DeviceGyro_methods, swig_DeviceGyro_attributes, { "DeviceGyro", swig_DeviceGyro_cls_methods, swig_DeviceGyro_cls_attributes, swig_DeviceGyro_cls_constants }, swig_DeviceGyro_bases, swig_DeviceGyro_base_names };

static int _wrap_DeviceMagnetometer_getMagneticField(lua_State* L) {
  int SWIG_arg = 0;
  DeviceMagnetometer *arg1 = (DeviceMagnetometer *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("DeviceMagnetometer::getMagneticField",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceMagnetometer::getMagneticField",1,"DeviceMagnetometer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceMagnetometer,0))){
    SWIG_fail_ptr("DeviceMagnetometer_getMagneticField",1,SWIGTYPE_p_DeviceMagnetometer);
  }
  
  result = (btVector3 *) &((DeviceMagnetometer const *)arg1)->getMagneticField();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DeviceMagnetometer(lua_State* L) {
  int SWIG_arg = 0;
  DeviceMagnetometer *arg1 = 0 ;
  DeviceMagnetometer *result = 0 ;
  
  SWIG_check_num_args("DeviceMagnetometer::DeviceMagnetometer",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DeviceMagnetometer::DeviceMagnetometer",1,"DeviceMagnetometer const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceMagnetometer,0))){
    SWIG_fail_ptr("new_DeviceMagnetometer",1,SWIGTYPE_p_DeviceMagnetometer);
  }
  
  result = (DeviceMagnetometer *)new DeviceMagnetometer((DeviceMagnetometer const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DeviceMagnetometer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DeviceMagnetometer(void *obj) {
DeviceMagnetometer *arg1 = (DeviceMagnetometer *) obj;
delete arg1;
}
static swig_lua_method swig_DeviceMagnetometer_methods[] = {
    {"getMagneticField", _wrap_DeviceMagnetometer_getMagneticField}, 
    {0,0}
};
static swig_lua_attribute swig_DeviceMagnetometer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DeviceMagnetometer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DeviceMagnetometer_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DeviceMagnetometer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DeviceMagnetometer_bases[] = {0,0};
static const char *swig_DeviceMagnetometer_base_names[] = {"DeviceInputTime *",0};
static swig_lua_class _wrap_class_DeviceMagnetometer = { "DeviceMagnetometer", &SWIGTYPE_p_DeviceMagnetometer,_wrap_new_DeviceMagnetometer, swig_delete_DeviceMagnetometer, swig_DeviceMagnetometer_methods, swig_DeviceMagnetometer_attributes, { "DeviceMagnetometer", swig_DeviceMagnetometer_cls_methods, swig_DeviceMagnetometer_cls_attributes, swig_DeviceMagnetometer_cls_constants }, swig_DeviceMagnetometer_bases, swig_DeviceMagnetometer_base_names };

static int _wrap_DeviceTouch_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  DeviceTouch *arg1 = (DeviceTouch *) 0 ;
  btVector2 *result = 0 ;
  
  SWIG_check_num_args("DeviceTouch::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceTouch::getPosition",1,"DeviceTouch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceTouch,0))){
    SWIG_fail_ptr("DeviceTouch_getPosition",1,SWIGTYPE_p_DeviceTouch);
  }
  
  result = (btVector2 *) &((DeviceTouch const *)arg1)->getPosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceTouch_getPreviousPosition(lua_State* L) {
  int SWIG_arg = 0;
  DeviceTouch *arg1 = (DeviceTouch *) 0 ;
  btVector2 *result = 0 ;
  
  SWIG_check_num_args("DeviceTouch::getPreviousPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceTouch::getPreviousPosition",1,"DeviceTouch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceTouch,0))){
    SWIG_fail_ptr("DeviceTouch_getPreviousPosition",1,SWIGTYPE_p_DeviceTouch);
  }
  
  result = (btVector2 *) &((DeviceTouch const *)arg1)->getPreviousPosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceTouch_getAddress(lua_State* L) {
  int SWIG_arg = 0;
  DeviceTouch *arg1 = (DeviceTouch *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("DeviceTouch::getAddress",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceTouch::getAddress",1,"DeviceTouch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceTouch,0))){
    SWIG_fail_ptr("DeviceTouch_getAddress",1,SWIGTYPE_p_DeviceTouch);
  }
  
  result = (unsigned int)((DeviceTouch const *)arg1)->getAddress();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceTouch_getTapCount(lua_State* L) {
  int SWIG_arg = 0;
  DeviceTouch *arg1 = (DeviceTouch *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("DeviceTouch::getTapCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceTouch::getTapCount",1,"DeviceTouch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceTouch,0))){
    SWIG_fail_ptr("DeviceTouch_getTapCount",1,SWIGTYPE_p_DeviceTouch);
  }
  
  result = (unsigned int)((DeviceTouch const *)arg1)->getTapCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceTouch_getTouchPhase(lua_State* L) {
  int SWIG_arg = 0;
  DeviceTouch *arg1 = (DeviceTouch *) 0 ;
  DeviceTouchPhase result;
  
  SWIG_check_num_args("DeviceTouch::getTouchPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceTouch::getTouchPhase",1,"DeviceTouch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceTouch,0))){
    SWIG_fail_ptr("DeviceTouch_getTouchPhase",1,SWIGTYPE_p_DeviceTouch);
  }
  
  result = (DeviceTouchPhase)((DeviceTouch const *)arg1)->getTouchPhase();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceTouch_getTouchIndex(lua_State* L) {
  int SWIG_arg = 0;
  DeviceTouch *arg1 = (DeviceTouch *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("DeviceTouch::getTouchIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceTouch::getTouchIndex",1,"DeviceTouch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceTouch,0))){
    SWIG_fail_ptr("DeviceTouch_getTouchIndex",1,SWIGTYPE_p_DeviceTouch);
  }
  
  result = (unsigned int)((DeviceTouch const *)arg1)->getTouchIndex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceTouch_getTouchTotal(lua_State* L) {
  int SWIG_arg = 0;
  DeviceTouch *arg1 = (DeviceTouch *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("DeviceTouch::getTouchTotal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceTouch::getTouchTotal",1,"DeviceTouch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceTouch,0))){
    SWIG_fail_ptr("DeviceTouch_getTouchTotal",1,SWIGTYPE_p_DeviceTouch);
  }
  
  result = (unsigned int)((DeviceTouch const *)arg1)->getTouchTotal();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DeviceTouch(lua_State* L) {
  int SWIG_arg = 0;
  DeviceTouch *arg1 = 0 ;
  DeviceTouch *result = 0 ;
  
  SWIG_check_num_args("DeviceTouch::DeviceTouch",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DeviceTouch::DeviceTouch",1,"DeviceTouch const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceTouch,0))){
    SWIG_fail_ptr("new_DeviceTouch",1,SWIGTYPE_p_DeviceTouch);
  }
  
  result = (DeviceTouch *)new DeviceTouch((DeviceTouch const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DeviceTouch,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DeviceTouch(void *obj) {
DeviceTouch *arg1 = (DeviceTouch *) obj;
delete arg1;
}
static swig_lua_method swig_DeviceTouch_methods[] = {
    {"getPosition", _wrap_DeviceTouch_getPosition}, 
    {"getPreviousPosition", _wrap_DeviceTouch_getPreviousPosition}, 
    {"getAddress", _wrap_DeviceTouch_getAddress}, 
    {"getTapCount", _wrap_DeviceTouch_getTapCount}, 
    {"getTouchPhase", _wrap_DeviceTouch_getTouchPhase}, 
    {"getTouchIndex", _wrap_DeviceTouch_getTouchIndex}, 
    {"getTouchTotal", _wrap_DeviceTouch_getTouchTotal}, 
    {0,0}
};
static swig_lua_attribute swig_DeviceTouch_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DeviceTouch_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DeviceTouch_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DeviceTouch_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DeviceTouch_bases[] = {0,0};
static const char *swig_DeviceTouch_base_names[] = {"DeviceInputTime *",0};
static swig_lua_class _wrap_class_DeviceTouch = { "DeviceTouch", &SWIGTYPE_p_DeviceTouch,_wrap_new_DeviceTouch, swig_delete_DeviceTouch, swig_DeviceTouch_methods, swig_DeviceTouch_attributes, { "DeviceTouch", swig_DeviceTouch_cls_methods, swig_DeviceTouch_cls_attributes, swig_DeviceTouch_cls_constants }, swig_DeviceTouch_bases, swig_DeviceTouch_base_names };

static int _wrap_new_DeviceInput(lua_State* L) {
  int SWIG_arg = 0;
  DeviceInput *result = 0 ;
  
  SWIG_check_num_args("DeviceInput::DeviceInput",0,0)
  result = (DeviceInput *)new DeviceInput();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DeviceInput,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceInput_touchRespond(lua_State* L) {
  int SWIG_arg = 0;
  DeviceInput *arg1 = (DeviceInput *) 0 ;
  DeviceTouch *arg2 = 0 ;
  
  SWIG_check_num_args("DeviceInput::touchRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceInput::touchRespond",1,"DeviceInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DeviceInput::touchRespond",2,"DeviceTouch const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceInput,0))){
    SWIG_fail_ptr("DeviceInput_touchRespond",1,SWIGTYPE_p_DeviceInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceTouch,0))){
    SWIG_fail_ptr("DeviceInput_touchRespond",2,SWIGTYPE_p_DeviceTouch);
  }
  
  (arg1)->touchRespond((DeviceTouch const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceInput_tapGestureRespond(lua_State* L) {
  int SWIG_arg = 0;
  DeviceInput *arg1 = (DeviceInput *) 0 ;
  DeviceTapGesture *arg2 = 0 ;
  
  SWIG_check_num_args("DeviceInput::tapGestureRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceInput::tapGestureRespond",1,"DeviceInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DeviceInput::tapGestureRespond",2,"DeviceTapGesture const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceInput,0))){
    SWIG_fail_ptr("DeviceInput_tapGestureRespond",1,SWIGTYPE_p_DeviceInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceTapGesture,0))){
    SWIG_fail_ptr("DeviceInput_tapGestureRespond",2,SWIGTYPE_p_DeviceTapGesture);
  }
  
  (arg1)->tapGestureRespond((DeviceTapGesture const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceInput_pinchGestureRespond(lua_State* L) {
  int SWIG_arg = 0;
  DeviceInput *arg1 = (DeviceInput *) 0 ;
  DevicePinchGesture *arg2 = 0 ;
  
  SWIG_check_num_args("DeviceInput::pinchGestureRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceInput::pinchGestureRespond",1,"DeviceInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DeviceInput::pinchGestureRespond",2,"DevicePinchGesture const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceInput,0))){
    SWIG_fail_ptr("DeviceInput_pinchGestureRespond",1,SWIGTYPE_p_DeviceInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DevicePinchGesture,0))){
    SWIG_fail_ptr("DeviceInput_pinchGestureRespond",2,SWIGTYPE_p_DevicePinchGesture);
  }
  
  (arg1)->pinchGestureRespond((DevicePinchGesture const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceInput_panGestureRespond(lua_State* L) {
  int SWIG_arg = 0;
  DeviceInput *arg1 = (DeviceInput *) 0 ;
  DevicePanGesture *arg2 = 0 ;
  
  SWIG_check_num_args("DeviceInput::panGestureRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceInput::panGestureRespond",1,"DeviceInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DeviceInput::panGestureRespond",2,"DevicePanGesture const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceInput,0))){
    SWIG_fail_ptr("DeviceInput_panGestureRespond",1,SWIGTYPE_p_DeviceInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DevicePanGesture,0))){
    SWIG_fail_ptr("DeviceInput_panGestureRespond",2,SWIGTYPE_p_DevicePanGesture);
  }
  
  (arg1)->panGestureRespond((DevicePanGesture const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceInput_swipeGestureRespond(lua_State* L) {
  int SWIG_arg = 0;
  DeviceInput *arg1 = (DeviceInput *) 0 ;
  DeviceSwipeGesture *arg2 = 0 ;
  
  SWIG_check_num_args("DeviceInput::swipeGestureRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceInput::swipeGestureRespond",1,"DeviceInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DeviceInput::swipeGestureRespond",2,"DeviceSwipeGesture const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceInput,0))){
    SWIG_fail_ptr("DeviceInput_swipeGestureRespond",1,SWIGTYPE_p_DeviceInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceSwipeGesture,0))){
    SWIG_fail_ptr("DeviceInput_swipeGestureRespond",2,SWIGTYPE_p_DeviceSwipeGesture);
  }
  
  (arg1)->swipeGestureRespond((DeviceSwipeGesture const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceInput_rotationGestureRespond(lua_State* L) {
  int SWIG_arg = 0;
  DeviceInput *arg1 = (DeviceInput *) 0 ;
  DeviceRotationGesture *arg2 = 0 ;
  
  SWIG_check_num_args("DeviceInput::rotationGestureRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceInput::rotationGestureRespond",1,"DeviceInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DeviceInput::rotationGestureRespond",2,"DeviceRotationGesture const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceInput,0))){
    SWIG_fail_ptr("DeviceInput_rotationGestureRespond",1,SWIGTYPE_p_DeviceInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceRotationGesture,0))){
    SWIG_fail_ptr("DeviceInput_rotationGestureRespond",2,SWIGTYPE_p_DeviceRotationGesture);
  }
  
  (arg1)->rotationGestureRespond((DeviceRotationGesture const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceInput_longPressGestureRespond(lua_State* L) {
  int SWIG_arg = 0;
  DeviceInput *arg1 = (DeviceInput *) 0 ;
  DeviceLongPressGesture *arg2 = 0 ;
  
  SWIG_check_num_args("DeviceInput::longPressGestureRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceInput::longPressGestureRespond",1,"DeviceInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DeviceInput::longPressGestureRespond",2,"DeviceLongPressGesture const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceInput,0))){
    SWIG_fail_ptr("DeviceInput_longPressGestureRespond",1,SWIGTYPE_p_DeviceInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceLongPressGesture,0))){
    SWIG_fail_ptr("DeviceInput_longPressGestureRespond",2,SWIGTYPE_p_DeviceLongPressGesture);
  }
  
  (arg1)->longPressGestureRespond((DeviceLongPressGesture const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceInput_accelerometerRespond(lua_State* L) {
  int SWIG_arg = 0;
  DeviceInput *arg1 = (DeviceInput *) 0 ;
  DeviceAccelerometer *arg2 = 0 ;
  
  SWIG_check_num_args("DeviceInput::accelerometerRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceInput::accelerometerRespond",1,"DeviceInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DeviceInput::accelerometerRespond",2,"DeviceAccelerometer const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceInput,0))){
    SWIG_fail_ptr("DeviceInput_accelerometerRespond",1,SWIGTYPE_p_DeviceInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceAccelerometer,0))){
    SWIG_fail_ptr("DeviceInput_accelerometerRespond",2,SWIGTYPE_p_DeviceAccelerometer);
  }
  
  (arg1)->accelerometerRespond((DeviceAccelerometer const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceInput_motionRespond(lua_State* L) {
  int SWIG_arg = 0;
  DeviceInput *arg1 = (DeviceInput *) 0 ;
  DeviceMotion *arg2 = 0 ;
  
  SWIG_check_num_args("DeviceInput::motionRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceInput::motionRespond",1,"DeviceInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DeviceInput::motionRespond",2,"DeviceMotion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceInput,0))){
    SWIG_fail_ptr("DeviceInput_motionRespond",1,SWIGTYPE_p_DeviceInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceMotion,0))){
    SWIG_fail_ptr("DeviceInput_motionRespond",2,SWIGTYPE_p_DeviceMotion);
  }
  
  (arg1)->motionRespond((DeviceMotion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceInput_gyroRespond(lua_State* L) {
  int SWIG_arg = 0;
  DeviceInput *arg1 = (DeviceInput *) 0 ;
  DeviceGyro *arg2 = 0 ;
  
  SWIG_check_num_args("DeviceInput::gyroRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceInput::gyroRespond",1,"DeviceInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DeviceInput::gyroRespond",2,"DeviceGyro const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceInput,0))){
    SWIG_fail_ptr("DeviceInput_gyroRespond",1,SWIGTYPE_p_DeviceInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceGyro,0))){
    SWIG_fail_ptr("DeviceInput_gyroRespond",2,SWIGTYPE_p_DeviceGyro);
  }
  
  (arg1)->gyroRespond((DeviceGyro const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeviceInput_magnetometerRespond(lua_State* L) {
  int SWIG_arg = 0;
  DeviceInput *arg1 = (DeviceInput *) 0 ;
  DeviceMagnetometer *arg2 = 0 ;
  
  SWIG_check_num_args("DeviceInput::magnetometerRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DeviceInput::magnetometerRespond",1,"DeviceInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DeviceInput::magnetometerRespond",2,"DeviceMagnetometer const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceInput,0))){
    SWIG_fail_ptr("DeviceInput_magnetometerRespond",1,SWIGTYPE_p_DeviceInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceMagnetometer,0))){
    SWIG_fail_ptr("DeviceInput_magnetometerRespond",2,SWIGTYPE_p_DeviceMagnetometer);
  }
  
  (arg1)->magnetometerRespond((DeviceMagnetometer const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DeviceInput(void *obj) {
DeviceInput *arg1 = (DeviceInput *) obj;
delete arg1;
}
static swig_lua_method swig_DeviceInput_methods[] = {
    {"touchRespond", _wrap_DeviceInput_touchRespond}, 
    {"tapGestureRespond", _wrap_DeviceInput_tapGestureRespond}, 
    {"pinchGestureRespond", _wrap_DeviceInput_pinchGestureRespond}, 
    {"panGestureRespond", _wrap_DeviceInput_panGestureRespond}, 
    {"swipeGestureRespond", _wrap_DeviceInput_swipeGestureRespond}, 
    {"rotationGestureRespond", _wrap_DeviceInput_rotationGestureRespond}, 
    {"longPressGestureRespond", _wrap_DeviceInput_longPressGestureRespond}, 
    {"accelerometerRespond", _wrap_DeviceInput_accelerometerRespond}, 
    {"motionRespond", _wrap_DeviceInput_motionRespond}, 
    {"gyroRespond", _wrap_DeviceInput_gyroRespond}, 
    {"magnetometerRespond", _wrap_DeviceInput_magnetometerRespond}, 
    {0,0}
};
static swig_lua_attribute swig_DeviceInput_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_DeviceInput_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DeviceInput_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_DeviceInput_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_DeviceInput_bases[] = {0};
static const char *swig_DeviceInput_base_names[] = {0};
static swig_lua_class _wrap_class_DeviceInput = { "DeviceInput", &SWIGTYPE_p_DeviceInput,_wrap_new_DeviceInput, swig_delete_DeviceInput, swig_DeviceInput_methods, swig_DeviceInput_attributes, { "DeviceInput", swig_DeviceInput_cls_methods, swig_DeviceInput_cls_attributes, swig_DeviceInput_cls_constants }, swig_DeviceInput_bases, swig_DeviceInput_base_names };

static int _wrap_deviceMotion_set(lua_State* L) {
  int SWIG_arg = 0;
  DeviceMotion *arg1 = (DeviceMotion *) 0 ;
  
  SWIG_check_num_args("deviceMotion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("deviceMotion",1,"DeviceMotion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DeviceMotion,0))){
    SWIG_fail_ptr("deviceMotion_set",1,SWIGTYPE_p_DeviceMotion);
  }
  
  deviceMotion = *arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_deviceMotion_get(lua_State* L) {
  int SWIG_arg = 0;
  DeviceMotion *result = 0 ;
  
  SWIG_check_num_args("deviceMotion",0,0)
  result = (DeviceMotion *)&deviceMotion;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DeviceMotion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JIMBO_set(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("JIMBO",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("JIMBO",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  JIMBO = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JIMBO_get(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("JIMBO",0,0)
  result = (float)JIMBO;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostEntity_updateAction(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntity *arg1 = (GhostEntity *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("GhostEntity::updateAction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntity::updateAction",1,"GhostEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GhostEntity::updateAction",2,"btCollisionWorld *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GhostEntity::updateAction",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntity,0))){
    SWIG_fail_ptr("GhostEntity_updateAction",1,SWIGTYPE_p_GhostEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("GhostEntity_updateAction",2,SWIGTYPE_p_btCollisionWorld);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->updateAction(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostEntity_debugDraw(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntity *arg1 = (GhostEntity *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  SWIG_check_num_args("GhostEntity::debugDraw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntity::debugDraw",1,"GhostEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GhostEntity::debugDraw",2,"btIDebugDraw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntity,0))){
    SWIG_fail_ptr("GhostEntity_debugDraw",1,SWIGTYPE_p_GhostEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("GhostEntity_debugDraw",2,SWIGTYPE_p_btIDebugDraw);
  }
  
  (arg1)->debugDraw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostEntity_setOrigin(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntity *arg1 = (GhostEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("GhostEntity::setOrigin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntity::setOrigin",1,"GhostEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("GhostEntity::setOrigin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntity,0))){
    SWIG_fail_ptr("GhostEntity_setOrigin",1,SWIGTYPE_p_GhostEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GhostEntity_setOrigin",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setOrigin((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostEntity_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntity *arg1 = (GhostEntity *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("GhostEntity::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntity::setRotation",1,"GhostEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("GhostEntity::setRotation",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntity,0))){
    SWIG_fail_ptr("GhostEntity_setRotation",1,SWIGTYPE_p_GhostEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("GhostEntity_setRotation",2,SWIGTYPE_p_btQuaternion);
  }
  
  (arg1)->setRotation((btQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostEntity_lookAt(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntity *arg1 = (GhostEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("GhostEntity::lookAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntity::lookAt",1,"GhostEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("GhostEntity::lookAt",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntity,0))){
    SWIG_fail_ptr("GhostEntity_lookAt",1,SWIGTYPE_p_GhostEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GhostEntity_lookAt",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->lookAt((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostEntity_setScale(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntity *arg1 = (GhostEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("GhostEntity::setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntity::setScale",1,"GhostEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("GhostEntity::setScale",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntity,0))){
    SWIG_fail_ptr("GhostEntity_setScale",1,SWIGTYPE_p_GhostEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GhostEntity_setScale",2,SWIGTYPE_p_btVector3);
  }
  
  result = (bool)(arg1)->setScale((btVector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostEntity_getGhostObject__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntity *arg1 = (GhostEntity *) 0 ;
  btPairCachingGhostObject *result = 0 ;
  
  SWIG_check_num_args("GhostEntity::getGhostObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntity::getGhostObject",1,"GhostEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntity,0))){
    SWIG_fail_ptr("GhostEntity_getGhostObject",1,SWIGTYPE_p_GhostEntity);
  }
  
  result = (btPairCachingGhostObject *)((GhostEntity const *)arg1)->getGhostObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPairCachingGhostObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostEntity_getGhostObject__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntity *arg1 = (GhostEntity *) 0 ;
  btPairCachingGhostObject *result = 0 ;
  
  SWIG_check_num_args("GhostEntity::getGhostObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntity::getGhostObject",1,"GhostEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntity,0))){
    SWIG_fail_ptr("GhostEntity_getGhostObject",1,SWIGTYPE_p_GhostEntity);
  }
  
  result = (btPairCachingGhostObject *)(arg1)->getGhostObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPairCachingGhostObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostEntity_getGhostObject(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GhostEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GhostEntity_getGhostObject__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GhostEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GhostEntity_getGhostObject__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GhostEntity_getGhostObject'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GhostEntity::getGhostObject() const\n"
    "    GhostEntity::getGhostObject()\n");
  lua_error(L);return 0;
}


static int _wrap_GhostEntity_enableCollision__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntity *arg1 = (GhostEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("GhostEntity::enableCollision",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntity::enableCollision",1,"GhostEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("GhostEntity::enableCollision",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntity,0))){
    SWIG_fail_ptr("GhostEntity_enableCollision",1,SWIGTYPE_p_GhostEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableCollision(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostEntity_enableCollision__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntity *arg1 = (GhostEntity *) 0 ;
  
  SWIG_check_num_args("GhostEntity::enableCollision",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntity::enableCollision",1,"GhostEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntity,0))){
    SWIG_fail_ptr("GhostEntity_enableCollision",1,SWIGTYPE_p_GhostEntity);
  }
  
  (arg1)->enableCollision();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostEntity_enableCollision(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GhostEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GhostEntity_enableCollision__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GhostEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_GhostEntity_enableCollision__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GhostEntity_enableCollision'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GhostEntity::enableCollision(bool const)\n"
    "    GhostEntity::enableCollision()\n");
  lua_error(L);return 0;
}


static int _wrap_GhostEntity_isCollisionEnabled(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntity *arg1 = (GhostEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("GhostEntity::isCollisionEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntity::isCollisionEnabled",1,"GhostEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntity,0))){
    SWIG_fail_ptr("GhostEntity_isCollisionEnabled",1,SWIGTYPE_p_GhostEntity);
  }
  
  result = (bool)((GhostEntity const *)arg1)->isCollisionEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostEntity_enableDebugDraw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntity *arg1 = (GhostEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("GhostEntity::enableDebugDraw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntity::enableDebugDraw",1,"GhostEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("GhostEntity::enableDebugDraw",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntity,0))){
    SWIG_fail_ptr("GhostEntity_enableDebugDraw",1,SWIGTYPE_p_GhostEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableDebugDraw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostEntity_enableDebugDraw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntity *arg1 = (GhostEntity *) 0 ;
  
  SWIG_check_num_args("GhostEntity::enableDebugDraw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntity::enableDebugDraw",1,"GhostEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntity,0))){
    SWIG_fail_ptr("GhostEntity_enableDebugDraw",1,SWIGTYPE_p_GhostEntity);
  }
  
  (arg1)->enableDebugDraw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostEntity_enableDebugDraw(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GhostEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GhostEntity_enableDebugDraw__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GhostEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_GhostEntity_enableDebugDraw__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GhostEntity_enableDebugDraw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GhostEntity::enableDebugDraw(bool const)\n"
    "    GhostEntity::enableDebugDraw()\n");
  lua_error(L);return 0;
}


static int _wrap_GhostEntity_isEnableDebugDraw(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntity *arg1 = (GhostEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("GhostEntity::isEnableDebugDraw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntity::isEnableDebugDraw",1,"GhostEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntity,0))){
    SWIG_fail_ptr("GhostEntity_isEnableDebugDraw",1,SWIGTYPE_p_GhostEntity);
  }
  
  result = (bool)((GhostEntity const *)arg1)->isEnableDebugDraw();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostEntity_getWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntity *arg1 = (GhostEntity *) 0 ;
  btTransform result;
  
  SWIG_check_num_args("GhostEntity::getWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntity::getWorldTransform",1,"GhostEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntity,0))){
    SWIG_fail_ptr("GhostEntity_getWorldTransform",1,SWIGTYPE_p_GhostEntity);
  }
  
  result = ((GhostEntity const *)arg1)->getWorldTransform();
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostEntity_setWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntity *arg1 = (GhostEntity *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("GhostEntity::setWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntity::setWorldTransform",1,"GhostEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("GhostEntity::setWorldTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntity,0))){
    SWIG_fail_ptr("GhostEntity_setWorldTransform",1,SWIGTYPE_p_GhostEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("GhostEntity_setWorldTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_GhostEntity_methods[] = {
    {"updateAction", _wrap_GhostEntity_updateAction}, 
    {"debugDraw", _wrap_GhostEntity_debugDraw}, 
    {"setOrigin", _wrap_GhostEntity_setOrigin}, 
    {"setRotation", _wrap_GhostEntity_setRotation}, 
    {"lookAt", _wrap_GhostEntity_lookAt}, 
    {"setScale", _wrap_GhostEntity_setScale}, 
    {"getGhostObject", _wrap_GhostEntity_getGhostObject}, 
    {"enableCollision", _wrap_GhostEntity_enableCollision}, 
    {"isCollisionEnabled", _wrap_GhostEntity_isCollisionEnabled}, 
    {"enableDebugDraw", _wrap_GhostEntity_enableDebugDraw}, 
    {"isEnableDebugDraw", _wrap_GhostEntity_isEnableDebugDraw}, 
    {"getWorldTransform", _wrap_GhostEntity_getWorldTransform}, 
    {"setWorldTransform", _wrap_GhostEntity_setWorldTransform}, 
    {0,0}
};
static swig_lua_attribute swig_GhostEntity_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_GhostEntity_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GhostEntity_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_GhostEntity_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_GhostEntity_bases[] = {0};
static const char *swig_GhostEntity_base_names[] = {0};
static swig_lua_class _wrap_class_GhostEntity = { "GhostEntity", &SWIGTYPE_p_GhostEntity,0,0, swig_GhostEntity_methods, swig_GhostEntity_attributes, { "GhostEntity", swig_GhostEntity_cls_methods, swig_GhostEntity_cls_attributes, swig_GhostEntity_cls_constants }, swig_GhostEntity_bases, swig_GhostEntity_base_names };

static int _wrap_RigidEntity_updateAction(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("RigidEntity::updateAction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::updateAction",1,"RigidEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RigidEntity::updateAction",2,"btCollisionWorld *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RigidEntity::updateAction",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_updateAction",1,SWIGTYPE_p_RigidEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("RigidEntity_updateAction",2,SWIGTYPE_p_btCollisionWorld);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->updateAction(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_debugDraw(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  SWIG_check_num_args("RigidEntity::debugDraw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::debugDraw",1,"RigidEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RigidEntity::debugDraw",2,"btIDebugDraw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_debugDraw",1,SWIGTYPE_p_RigidEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("RigidEntity_debugDraw",2,SWIGTYPE_p_btIDebugDraw);
  }
  
  (arg1)->debugDraw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_setOrigin(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("RigidEntity::setOrigin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::setOrigin",1,"RigidEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RigidEntity::setOrigin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_setOrigin",1,SWIGTYPE_p_RigidEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("RigidEntity_setOrigin",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setOrigin((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("RigidEntity::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::setRotation",1,"RigidEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RigidEntity::setRotation",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_setRotation",1,SWIGTYPE_p_RigidEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("RigidEntity_setRotation",2,SWIGTYPE_p_btQuaternion);
  }
  
  (arg1)->setRotation((btQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_lookAt(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("RigidEntity::lookAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::lookAt",1,"RigidEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RigidEntity::lookAt",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_lookAt",1,SWIGTYPE_p_RigidEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("RigidEntity_lookAt",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->lookAt((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_setScale(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("RigidEntity::setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::setScale",1,"RigidEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RigidEntity::setScale",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_setScale",1,SWIGTYPE_p_RigidEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("RigidEntity_setScale",2,SWIGTYPE_p_btVector3);
  }
  
  result = (bool)(arg1)->setScale((btVector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_getRigidBody__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("RigidEntity::getRigidBody",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::getRigidBody",1,"RigidEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_getRigidBody",1,SWIGTYPE_p_RigidEntity);
  }
  
  result = (btRigidBody *)((RigidEntity const *)arg1)->getRigidBody();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_getRigidBody__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("RigidEntity::getRigidBody",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::getRigidBody",1,"RigidEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_getRigidBody",1,SWIGTYPE_p_RigidEntity);
  }
  
  result = (btRigidBody *)(arg1)->getRigidBody();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_getRigidBody(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RigidEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidEntity_getRigidBody__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RigidEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidEntity_getRigidBody__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidEntity_getRigidBody'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RigidEntity::getRigidBody() const\n"
    "    RigidEntity::getRigidBody()\n");
  lua_error(L);return 0;
}


static int _wrap_RigidEntity_setDynamicPhysics(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  
  SWIG_check_num_args("RigidEntity::setDynamicPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::setDynamicPhysics",1,"RigidEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_setDynamicPhysics",1,SWIGTYPE_p_RigidEntity);
  }
  
  (arg1)->setDynamicPhysics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_isDynamicPhysics(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("RigidEntity::isDynamicPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::isDynamicPhysics",1,"RigidEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_isDynamicPhysics",1,SWIGTYPE_p_RigidEntity);
  }
  
  result = (bool)((RigidEntity const *)arg1)->isDynamicPhysics();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_setKinematicPhysics(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  
  SWIG_check_num_args("RigidEntity::setKinematicPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::setKinematicPhysics",1,"RigidEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_setKinematicPhysics",1,SWIGTYPE_p_RigidEntity);
  }
  
  (arg1)->setKinematicPhysics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_isKinematicPhysics(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("RigidEntity::isKinematicPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::isKinematicPhysics",1,"RigidEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_isKinematicPhysics",1,SWIGTYPE_p_RigidEntity);
  }
  
  result = (bool)((RigidEntity const *)arg1)->isKinematicPhysics();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_setStaticPhysics(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  
  SWIG_check_num_args("RigidEntity::setStaticPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::setStaticPhysics",1,"RigidEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_setStaticPhysics",1,SWIGTYPE_p_RigidEntity);
  }
  
  (arg1)->setStaticPhysics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_isStaticPhysics(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("RigidEntity::isStaticPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::isStaticPhysics",1,"RigidEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_isStaticPhysics",1,SWIGTYPE_p_RigidEntity);
  }
  
  result = (bool)((RigidEntity const *)arg1)->isStaticPhysics();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_enableCollision__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("RigidEntity::enableCollision",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::enableCollision",1,"RigidEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("RigidEntity::enableCollision",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_enableCollision",1,SWIGTYPE_p_RigidEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableCollision(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_enableCollision__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  
  SWIG_check_num_args("RigidEntity::enableCollision",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::enableCollision",1,"RigidEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_enableCollision",1,SWIGTYPE_p_RigidEntity);
  }
  
  (arg1)->enableCollision();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_enableCollision(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RigidEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidEntity_enableCollision__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RigidEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_RigidEntity_enableCollision__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidEntity_enableCollision'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RigidEntity::enableCollision(bool const)\n"
    "    RigidEntity::enableCollision()\n");
  lua_error(L);return 0;
}


static int _wrap_RigidEntity_isCollisionEnabled(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("RigidEntity::isCollisionEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::isCollisionEnabled",1,"RigidEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_isCollisionEnabled",1,SWIGTYPE_p_RigidEntity);
  }
  
  result = (bool)((RigidEntity const *)arg1)->isCollisionEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_enableHandleCollision__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("RigidEntity::enableHandleCollision",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::enableHandleCollision",1,"RigidEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("RigidEntity::enableHandleCollision",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_enableHandleCollision",1,SWIGTYPE_p_RigidEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableHandleCollision(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_enableHandleCollision__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  
  SWIG_check_num_args("RigidEntity::enableHandleCollision",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::enableHandleCollision",1,"RigidEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_enableHandleCollision",1,SWIGTYPE_p_RigidEntity);
  }
  
  (arg1)->enableHandleCollision();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_enableHandleCollision(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RigidEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidEntity_enableHandleCollision__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RigidEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_RigidEntity_enableHandleCollision__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidEntity_enableHandleCollision'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RigidEntity::enableHandleCollision(bool const)\n"
    "    RigidEntity::enableHandleCollision()\n");
  lua_error(L);return 0;
}


static int _wrap_RigidEntity_isCollisionHandleEnabled(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("RigidEntity::isCollisionHandleEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::isCollisionHandleEnabled",1,"RigidEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_isCollisionHandleEnabled",1,SWIGTYPE_p_RigidEntity);
  }
  
  result = (bool)((RigidEntity const *)arg1)->isCollisionHandleEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_enableDebugDraw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("RigidEntity::enableDebugDraw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::enableDebugDraw",1,"RigidEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("RigidEntity::enableDebugDraw",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_enableDebugDraw",1,SWIGTYPE_p_RigidEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableDebugDraw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_enableDebugDraw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  
  SWIG_check_num_args("RigidEntity::enableDebugDraw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::enableDebugDraw",1,"RigidEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_enableDebugDraw",1,SWIGTYPE_p_RigidEntity);
  }
  
  (arg1)->enableDebugDraw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_enableDebugDraw(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RigidEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidEntity_enableDebugDraw__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RigidEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_RigidEntity_enableDebugDraw__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidEntity_enableDebugDraw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RigidEntity::enableDebugDraw(bool const)\n"
    "    RigidEntity::enableDebugDraw()\n");
  lua_error(L);return 0;
}


static int _wrap_RigidEntity_isEnableDebugDraw(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("RigidEntity::isEnableDebugDraw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::isEnableDebugDraw",1,"RigidEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_isEnableDebugDraw",1,SWIGTYPE_p_RigidEntity);
  }
  
  result = (bool)((RigidEntity const *)arg1)->isEnableDebugDraw();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_getLinearSpeed(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("RigidEntity::getLinearSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::getLinearSpeed",1,"RigidEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_getLinearSpeed",1,SWIGTYPE_p_RigidEntity);
  }
  
  result = (btScalar)((RigidEntity const *)arg1)->getLinearSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_getLinearSpeedSq(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("RigidEntity::getLinearSpeedSq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::getLinearSpeedSq",1,"RigidEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_getLinearSpeedSq",1,SWIGTYPE_p_RigidEntity);
  }
  
  result = (btScalar)((RigidEntity const *)arg1)->getLinearSpeedSq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_getAngularSpeed(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("RigidEntity::getAngularSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::getAngularSpeed",1,"RigidEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_getAngularSpeed",1,SWIGTYPE_p_RigidEntity);
  }
  
  result = (btScalar)((RigidEntity const *)arg1)->getAngularSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_getAngularSpeedSq(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("RigidEntity::getAngularSpeedSq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::getAngularSpeedSq",1,"RigidEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_getAngularSpeedSq",1,SWIGTYPE_p_RigidEntity);
  }
  
  result = (btScalar)((RigidEntity const *)arg1)->getAngularSpeedSq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_setLinearSpeed(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("RigidEntity::setLinearSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::setLinearSpeed",1,"RigidEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RigidEntity::setLinearSpeed",2,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_setLinearSpeed",1,SWIGTYPE_p_RigidEntity);
  }
  
  arg2 = (btScalar const)lua_tonumber(L, 2);
  (arg1)->setLinearSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_setAngularSpeed(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("RigidEntity::setAngularSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::setAngularSpeed",1,"RigidEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RigidEntity::setAngularSpeed",2,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_setAngularSpeed",1,SWIGTYPE_p_RigidEntity);
  }
  
  arg2 = (btScalar const)lua_tonumber(L, 2);
  (arg1)->setAngularSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_getLinearVelocityHeading(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("RigidEntity::getLinearVelocityHeading",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::getLinearVelocityHeading",1,"RigidEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_getLinearVelocityHeading",1,SWIGTYPE_p_RigidEntity);
  }
  
  result = ((RigidEntity const *)arg1)->getLinearVelocityHeading();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_getWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btTransform result;
  
  SWIG_check_num_args("RigidEntity::getWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::getWorldTransform",1,"RigidEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_getWorldTransform",1,SWIGTYPE_p_RigidEntity);
  }
  
  result = ((RigidEntity const *)arg1)->getWorldTransform();
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_setWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("RigidEntity::setWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::setWorldTransform",1,"RigidEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RigidEntity::setWorldTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_setWorldTransform",1,SWIGTYPE_p_RigidEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("RigidEntity_setWorldTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_getCollisionShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btCollisionShape *result = 0 ;
  
  SWIG_check_num_args("RigidEntity::getCollisionShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::getCollisionShape",1,"RigidEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_getCollisionShape",1,SWIGTYPE_p_RigidEntity);
  }
  
  result = (btCollisionShape *)((RigidEntity const *)arg1)->getCollisionShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_getCollisionShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btCollisionShape *result = 0 ;
  
  SWIG_check_num_args("RigidEntity::getCollisionShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::getCollisionShape",1,"RigidEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_getCollisionShape",1,SWIGTYPE_p_RigidEntity);
  }
  
  result = (btCollisionShape *)(arg1)->getCollisionShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_getCollisionShape(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RigidEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidEntity_getCollisionShape__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RigidEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RigidEntity_getCollisionShape__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RigidEntity_getCollisionShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RigidEntity::getCollisionShape() const\n"
    "    RigidEntity::getCollisionShape()\n");
  lua_error(L);return 0;
}


static int _wrap_RigidEntity_setCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  IDType arg2 ;
  
  SWIG_check_num_args("RigidEntity::setCollisionShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::setCollisionShape",1,"RigidEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RigidEntity::setCollisionShape",2,"IDType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_setCollisionShape",1,SWIGTYPE_p_RigidEntity);
  }
  
  arg2 = (IDType const)lua_tonumber(L, 2);
  (arg1)->setCollisionShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_getMass(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("RigidEntity::getMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::getMass",1,"RigidEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_getMass",1,SWIGTYPE_p_RigidEntity);
  }
  
  result = (btScalar)((RigidEntity const *)arg1)->getMass();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntity_setMass(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntity *arg1 = (RigidEntity *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("RigidEntity::setMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntity::setMass",1,"RigidEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RigidEntity::setMass",2,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("RigidEntity_setMass",1,SWIGTYPE_p_RigidEntity);
  }
  
  arg2 = (btScalar const)lua_tonumber(L, 2);
  (arg1)->setMass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_RigidEntity_methods[] = {
    {"updateAction", _wrap_RigidEntity_updateAction}, 
    {"debugDraw", _wrap_RigidEntity_debugDraw}, 
    {"setOrigin", _wrap_RigidEntity_setOrigin}, 
    {"setRotation", _wrap_RigidEntity_setRotation}, 
    {"lookAt", _wrap_RigidEntity_lookAt}, 
    {"setScale", _wrap_RigidEntity_setScale}, 
    {"getRigidBody", _wrap_RigidEntity_getRigidBody}, 
    {"setDynamicPhysics", _wrap_RigidEntity_setDynamicPhysics}, 
    {"isDynamicPhysics", _wrap_RigidEntity_isDynamicPhysics}, 
    {"setKinematicPhysics", _wrap_RigidEntity_setKinematicPhysics}, 
    {"isKinematicPhysics", _wrap_RigidEntity_isKinematicPhysics}, 
    {"setStaticPhysics", _wrap_RigidEntity_setStaticPhysics}, 
    {"isStaticPhysics", _wrap_RigidEntity_isStaticPhysics}, 
    {"enableCollision", _wrap_RigidEntity_enableCollision}, 
    {"isCollisionEnabled", _wrap_RigidEntity_isCollisionEnabled}, 
    {"enableHandleCollision", _wrap_RigidEntity_enableHandleCollision}, 
    {"isCollisionHandleEnabled", _wrap_RigidEntity_isCollisionHandleEnabled}, 
    {"enableDebugDraw", _wrap_RigidEntity_enableDebugDraw}, 
    {"isEnableDebugDraw", _wrap_RigidEntity_isEnableDebugDraw}, 
    {"getLinearSpeed", _wrap_RigidEntity_getLinearSpeed}, 
    {"getLinearSpeedSq", _wrap_RigidEntity_getLinearSpeedSq}, 
    {"getAngularSpeed", _wrap_RigidEntity_getAngularSpeed}, 
    {"getAngularSpeedSq", _wrap_RigidEntity_getAngularSpeedSq}, 
    {"setLinearSpeed", _wrap_RigidEntity_setLinearSpeed}, 
    {"setAngularSpeed", _wrap_RigidEntity_setAngularSpeed}, 
    {"getLinearVelocityHeading", _wrap_RigidEntity_getLinearVelocityHeading}, 
    {"getWorldTransform", _wrap_RigidEntity_getWorldTransform}, 
    {"setWorldTransform", _wrap_RigidEntity_setWorldTransform}, 
    {"getCollisionShape", _wrap_RigidEntity_getCollisionShape}, 
    {"setCollisionShape", _wrap_RigidEntity_setCollisionShape}, 
    {"getMass", _wrap_RigidEntity_getMass}, 
    {"setMass", _wrap_RigidEntity_setMass}, 
    {0,0}
};
static swig_lua_attribute swig_RigidEntity_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_RigidEntity_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RigidEntity_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_RigidEntity_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_RigidEntity_bases[] = {0};
static const char *swig_RigidEntity_base_names[] = {0};
static swig_lua_class _wrap_class_RigidEntity = { "RigidEntity", &SWIGTYPE_p_RigidEntity,0,0, swig_RigidEntity_methods, swig_RigidEntity_attributes, { "RigidEntity", swig_RigidEntity_cls_methods, swig_RigidEntity_cls_attributes, swig_RigidEntity_cls_constants }, swig_RigidEntity_bases, swig_RigidEntity_base_names };

static int _wrap_SoftEntity_updateAction(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("SoftEntity::updateAction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::updateAction",1,"SoftEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoftEntity::updateAction",2,"btCollisionWorld *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoftEntity::updateAction",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_updateAction",1,SWIGTYPE_p_SoftEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("SoftEntity_updateAction",2,SWIGTYPE_p_btCollisionWorld);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->updateAction(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_debugDraw(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  SWIG_check_num_args("SoftEntity::debugDraw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::debugDraw",1,"SoftEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoftEntity::debugDraw",2,"btIDebugDraw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_debugDraw",1,SWIGTYPE_p_SoftEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("SoftEntity_debugDraw",2,SWIGTYPE_p_btIDebugDraw);
  }
  
  (arg1)->debugDraw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_setOrigin(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("SoftEntity::setOrigin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::setOrigin",1,"SoftEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoftEntity::setOrigin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_setOrigin",1,SWIGTYPE_p_SoftEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("SoftEntity_setOrigin",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setOrigin((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("SoftEntity::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::setRotation",1,"SoftEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoftEntity::setRotation",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_setRotation",1,SWIGTYPE_p_SoftEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("SoftEntity_setRotation",2,SWIGTYPE_p_btQuaternion);
  }
  
  (arg1)->setRotation((btQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_lookAt(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("SoftEntity::lookAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::lookAt",1,"SoftEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoftEntity::lookAt",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_lookAt",1,SWIGTYPE_p_SoftEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("SoftEntity_lookAt",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->lookAt((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_setScale(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SoftEntity::setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::setScale",1,"SoftEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoftEntity::setScale",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_setScale",1,SWIGTYPE_p_SoftEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("SoftEntity_setScale",2,SWIGTYPE_p_btVector3);
  }
  
  result = (bool)(arg1)->setScale((btVector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_getSoftBody__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  btSoftBody *result = 0 ;
  
  SWIG_check_num_args("SoftEntity::getSoftBody",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::getSoftBody",1,"SoftEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_getSoftBody",1,SWIGTYPE_p_SoftEntity);
  }
  
  result = (btSoftBody *)((SoftEntity const *)arg1)->getSoftBody();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_getSoftBody__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  btSoftBody *result = 0 ;
  
  SWIG_check_num_args("SoftEntity::getSoftBody",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::getSoftBody",1,"SoftEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_getSoftBody",1,SWIGTYPE_p_SoftEntity);
  }
  
  result = (btSoftBody *)(arg1)->getSoftBody();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_getSoftBody(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoftEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SoftEntity_getSoftBody__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoftEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SoftEntity_getSoftBody__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoftEntity_getSoftBody'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoftEntity::getSoftBody() const\n"
    "    SoftEntity::getSoftBody()\n");
  lua_error(L);return 0;
}


static int _wrap_SoftEntity_setDynamicPhysics(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  
  SWIG_check_num_args("SoftEntity::setDynamicPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::setDynamicPhysics",1,"SoftEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_setDynamicPhysics",1,SWIGTYPE_p_SoftEntity);
  }
  
  (arg1)->setDynamicPhysics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_isDynamicPhysics(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("SoftEntity::isDynamicPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::isDynamicPhysics",1,"SoftEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_isDynamicPhysics",1,SWIGTYPE_p_SoftEntity);
  }
  
  result = (bool)((SoftEntity const *)arg1)->isDynamicPhysics();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_setKinematicPhysics(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  
  SWIG_check_num_args("SoftEntity::setKinematicPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::setKinematicPhysics",1,"SoftEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_setKinematicPhysics",1,SWIGTYPE_p_SoftEntity);
  }
  
  (arg1)->setKinematicPhysics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_isKinematicPhysics(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("SoftEntity::isKinematicPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::isKinematicPhysics",1,"SoftEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_isKinematicPhysics",1,SWIGTYPE_p_SoftEntity);
  }
  
  result = (bool)((SoftEntity const *)arg1)->isKinematicPhysics();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_setStaticPhysics(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  
  SWIG_check_num_args("SoftEntity::setStaticPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::setStaticPhysics",1,"SoftEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_setStaticPhysics",1,SWIGTYPE_p_SoftEntity);
  }
  
  (arg1)->setStaticPhysics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_isStaticPhysics(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("SoftEntity::isStaticPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::isStaticPhysics",1,"SoftEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_isStaticPhysics",1,SWIGTYPE_p_SoftEntity);
  }
  
  result = (bool)((SoftEntity const *)arg1)->isStaticPhysics();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_enableCollision__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SoftEntity::enableCollision",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::enableCollision",1,"SoftEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SoftEntity::enableCollision",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_enableCollision",1,SWIGTYPE_p_SoftEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableCollision(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_enableCollision__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  
  SWIG_check_num_args("SoftEntity::enableCollision",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::enableCollision",1,"SoftEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_enableCollision",1,SWIGTYPE_p_SoftEntity);
  }
  
  (arg1)->enableCollision();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_enableCollision(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoftEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SoftEntity_enableCollision__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoftEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoftEntity_enableCollision__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoftEntity_enableCollision'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoftEntity::enableCollision(bool const)\n"
    "    SoftEntity::enableCollision()\n");
  lua_error(L);return 0;
}


static int _wrap_SoftEntity_isCollisionEnabled(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("SoftEntity::isCollisionEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::isCollisionEnabled",1,"SoftEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_isCollisionEnabled",1,SWIGTYPE_p_SoftEntity);
  }
  
  result = (bool)((SoftEntity const *)arg1)->isCollisionEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_enableHandleCollision__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("SoftEntity::enableHandleCollision",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::enableHandleCollision",1,"SoftEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("SoftEntity::enableHandleCollision",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_enableHandleCollision",1,SWIGTYPE_p_SoftEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableHandleCollision(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_enableHandleCollision__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  
  SWIG_check_num_args("SoftEntity::enableHandleCollision",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::enableHandleCollision",1,"SoftEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_enableHandleCollision",1,SWIGTYPE_p_SoftEntity);
  }
  
  (arg1)->enableHandleCollision();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_enableHandleCollision(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoftEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SoftEntity_enableHandleCollision__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoftEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoftEntity_enableHandleCollision__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoftEntity_enableHandleCollision'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoftEntity::enableHandleCollision(bool const)\n"
    "    SoftEntity::enableHandleCollision()\n");
  lua_error(L);return 0;
}


static int _wrap_SoftEntity_isCollisionHandleEnabled(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("SoftEntity::isCollisionHandleEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::isCollisionHandleEnabled",1,"SoftEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_isCollisionHandleEnabled",1,SWIGTYPE_p_SoftEntity);
  }
  
  result = (bool)((SoftEntity const *)arg1)->isCollisionHandleEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_getLinearSpeed(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("SoftEntity::getLinearSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::getLinearSpeed",1,"SoftEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_getLinearSpeed",1,SWIGTYPE_p_SoftEntity);
  }
  
  result = (btScalar)((SoftEntity const *)arg1)->getLinearSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_getLinearSpeedSq(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("SoftEntity::getLinearSpeedSq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::getLinearSpeedSq",1,"SoftEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_getLinearSpeedSq",1,SWIGTYPE_p_SoftEntity);
  }
  
  result = (btScalar)((SoftEntity const *)arg1)->getLinearSpeedSq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_getAngularSpeed(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("SoftEntity::getAngularSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::getAngularSpeed",1,"SoftEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_getAngularSpeed",1,SWIGTYPE_p_SoftEntity);
  }
  
  result = (btScalar)((SoftEntity const *)arg1)->getAngularSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_getAngularSpeedSq(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("SoftEntity::getAngularSpeedSq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::getAngularSpeedSq",1,"SoftEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_getAngularSpeedSq",1,SWIGTYPE_p_SoftEntity);
  }
  
  result = (btScalar)((SoftEntity const *)arg1)->getAngularSpeedSq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_setLinearSpeed(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("SoftEntity::setLinearSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::setLinearSpeed",1,"SoftEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoftEntity::setLinearSpeed",2,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_setLinearSpeed",1,SWIGTYPE_p_SoftEntity);
  }
  
  arg2 = (btScalar const)lua_tonumber(L, 2);
  (arg1)->setLinearSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_setAngularSpeed(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("SoftEntity::setAngularSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::setAngularSpeed",1,"SoftEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoftEntity::setAngularSpeed",2,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_setAngularSpeed",1,SWIGTYPE_p_SoftEntity);
  }
  
  arg2 = (btScalar const)lua_tonumber(L, 2);
  (arg1)->setAngularSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_getLinearVelocityHeading(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("SoftEntity::getLinearVelocityHeading",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::getLinearVelocityHeading",1,"SoftEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_getLinearVelocityHeading",1,SWIGTYPE_p_SoftEntity);
  }
  
  result = ((SoftEntity const *)arg1)->getLinearVelocityHeading();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_getWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  btTransform result;
  
  SWIG_check_num_args("SoftEntity::getWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::getWorldTransform",1,"SoftEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_getWorldTransform",1,SWIGTYPE_p_SoftEntity);
  }
  
  result = ((SoftEntity const *)arg1)->getWorldTransform();
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_setWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("SoftEntity::setWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::setWorldTransform",1,"SoftEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoftEntity::setWorldTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_setWorldTransform",1,SWIGTYPE_p_SoftEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("SoftEntity_setWorldTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  BaseCamera *arg2 = (BaseCamera *) 0 ;
  
  SWIG_check_num_args("SoftEntity::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::render",1,"SoftEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoftEntity::render",2,"BaseCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_render",1,SWIGTYPE_p_SoftEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("SoftEntity_render",2,SWIGTYPE_p_BaseCamera);
  }
  
  (arg1)->render(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntity *arg1 = (SoftEntity *) 0 ;
  
  SWIG_check_num_args("SoftEntity::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntity::render",1,"SoftEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("SoftEntity_render",1,SWIGTYPE_p_SoftEntity);
  }
  
  (arg1)->render();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntity_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoftEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SoftEntity_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoftEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseCamera, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoftEntity_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoftEntity_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoftEntity::render(BaseCamera *)\n"
    "    SoftEntity::render()\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_SoftEntity_methods[] = {
    {"updateAction", _wrap_SoftEntity_updateAction}, 
    {"debugDraw", _wrap_SoftEntity_debugDraw}, 
    {"setOrigin", _wrap_SoftEntity_setOrigin}, 
    {"setRotation", _wrap_SoftEntity_setRotation}, 
    {"lookAt", _wrap_SoftEntity_lookAt}, 
    {"setScale", _wrap_SoftEntity_setScale}, 
    {"getSoftBody", _wrap_SoftEntity_getSoftBody}, 
    {"setDynamicPhysics", _wrap_SoftEntity_setDynamicPhysics}, 
    {"isDynamicPhysics", _wrap_SoftEntity_isDynamicPhysics}, 
    {"setKinematicPhysics", _wrap_SoftEntity_setKinematicPhysics}, 
    {"isKinematicPhysics", _wrap_SoftEntity_isKinematicPhysics}, 
    {"setStaticPhysics", _wrap_SoftEntity_setStaticPhysics}, 
    {"isStaticPhysics", _wrap_SoftEntity_isStaticPhysics}, 
    {"enableCollision", _wrap_SoftEntity_enableCollision}, 
    {"isCollisionEnabled", _wrap_SoftEntity_isCollisionEnabled}, 
    {"enableHandleCollision", _wrap_SoftEntity_enableHandleCollision}, 
    {"isCollisionHandleEnabled", _wrap_SoftEntity_isCollisionHandleEnabled}, 
    {"getLinearSpeed", _wrap_SoftEntity_getLinearSpeed}, 
    {"getLinearSpeedSq", _wrap_SoftEntity_getLinearSpeedSq}, 
    {"getAngularSpeed", _wrap_SoftEntity_getAngularSpeed}, 
    {"getAngularSpeedSq", _wrap_SoftEntity_getAngularSpeedSq}, 
    {"setLinearSpeed", _wrap_SoftEntity_setLinearSpeed}, 
    {"setAngularSpeed", _wrap_SoftEntity_setAngularSpeed}, 
    {"getLinearVelocityHeading", _wrap_SoftEntity_getLinearVelocityHeading}, 
    {"getWorldTransform", _wrap_SoftEntity_getWorldTransform}, 
    {"setWorldTransform", _wrap_SoftEntity_setWorldTransform}, 
    {"render", _wrap_SoftEntity_render}, 
    {0,0}
};
static swig_lua_attribute swig_SoftEntity_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_SoftEntity_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SoftEntity_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_SoftEntity_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_SoftEntity_bases[] = {0};
static const char *swig_SoftEntity_base_names[] = {0};
static swig_lua_class _wrap_class_SoftEntity = { "SoftEntity", &SWIGTYPE_p_SoftEntity,0,0, swig_SoftEntity_methods, swig_SoftEntity_attributes, { "SoftEntity", swig_SoftEntity_cls_methods, swig_SoftEntity_cls_attributes, swig_SoftEntity_cls_constants }, swig_SoftEntity_bases, swig_SoftEntity_base_names };

static int _wrap_SteeringEntity_getWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  btTransform result;
  
  SWIG_check_num_args("SteeringEntity::getWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::getWorldTransform",1,"SteeringEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_getWorldTransform",1,SWIGTYPE_p_SteeringEntity);
  }
  
  result = ((SteeringEntity const *)arg1)->getWorldTransform();
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_setWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("SteeringEntity::setWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::setWorldTransform",1,"SteeringEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SteeringEntity::setWorldTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_setWorldTransform",1,SWIGTYPE_p_SteeringEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("SteeringEntity_setWorldTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_updateAction(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("SteeringEntity::updateAction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::updateAction",1,"SteeringEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SteeringEntity::updateAction",2,"btCollisionWorld *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SteeringEntity::updateAction",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_updateAction",1,SWIGTYPE_p_SteeringEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("SteeringEntity_updateAction",2,SWIGTYPE_p_btCollisionWorld);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->updateAction(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_debugDraw(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  SWIG_check_num_args("SteeringEntity::debugDraw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::debugDraw",1,"SteeringEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SteeringEntity::debugDraw",2,"btIDebugDraw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_debugDraw",1,SWIGTYPE_p_SteeringEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("SteeringEntity_debugDraw",2,SWIGTYPE_p_btIDebugDraw);
  }
  
  (arg1)->debugDraw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_getSteeringBehavior__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  BaseEntitySteeringBehavior *result = 0 ;
  
  SWIG_check_num_args("SteeringEntity::getSteeringBehavior",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::getSteeringBehavior",1,"SteeringEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_getSteeringBehavior",1,SWIGTYPE_p_SteeringEntity);
  }
  
  result = (BaseEntitySteeringBehavior *)((SteeringEntity const *)arg1)->getSteeringBehavior();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseEntitySteeringBehavior,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_getSteeringBehavior__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  BaseEntitySteeringBehavior *result = 0 ;
  
  SWIG_check_num_args("SteeringEntity::getSteeringBehavior",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::getSteeringBehavior",1,"SteeringEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_getSteeringBehavior",1,SWIGTYPE_p_SteeringEntity);
  }
  
  result = (BaseEntitySteeringBehavior *)(arg1)->getSteeringBehavior();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseEntitySteeringBehavior,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_getSteeringBehavior(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SteeringEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SteeringEntity_getSteeringBehavior__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SteeringEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SteeringEntity_getSteeringBehavior__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SteeringEntity_getSteeringBehavior'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SteeringEntity::getSteeringBehavior() const\n"
    "    SteeringEntity::getSteeringBehavior()\n");
  lua_error(L);return 0;
}


static int _wrap_SteeringEntity_setSteeringBehavior(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  IDType arg2 ;
  
  SWIG_check_num_args("SteeringEntity::setSteeringBehavior",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::setSteeringBehavior",1,"SteeringEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SteeringEntity::setSteeringBehavior",2,"IDType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_setSteeringBehavior",1,SWIGTYPE_p_SteeringEntity);
  }
  
  arg2 = (IDType const)lua_tonumber(L, 2);
  (arg1)->setSteeringBehavior(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_setStaticPhysics(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  
  SWIG_check_num_args("SteeringEntity::setStaticPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::setStaticPhysics",1,"SteeringEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_setStaticPhysics",1,SWIGTYPE_p_SteeringEntity);
  }
  
  (arg1)->setStaticPhysics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_isStaticPhysics(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("SteeringEntity::isStaticPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::isStaticPhysics",1,"SteeringEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_isStaticPhysics",1,SWIGTYPE_p_SteeringEntity);
  }
  
  result = (bool)((SteeringEntity const *)arg1)->isStaticPhysics();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_getMaxLinearSpeed(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("SteeringEntity::getMaxLinearSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::getMaxLinearSpeed",1,"SteeringEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_getMaxLinearSpeed",1,SWIGTYPE_p_SteeringEntity);
  }
  
  result = (btScalar)((SteeringEntity const *)arg1)->getMaxLinearSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_setMaxLinearSpeed(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("SteeringEntity::setMaxLinearSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::setMaxLinearSpeed",1,"SteeringEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SteeringEntity::setMaxLinearSpeed",2,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_setMaxLinearSpeed",1,SWIGTYPE_p_SteeringEntity);
  }
  
  arg2 = (btScalar const)lua_tonumber(L, 2);
  (arg1)->setMaxLinearSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_getMaxAngularSpeed(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("SteeringEntity::getMaxAngularSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::getMaxAngularSpeed",1,"SteeringEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_getMaxAngularSpeed",1,SWIGTYPE_p_SteeringEntity);
  }
  
  result = (btScalar)((SteeringEntity const *)arg1)->getMaxAngularSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_setMaxAngularSpeed(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("SteeringEntity::setMaxAngularSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::setMaxAngularSpeed",1,"SteeringEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SteeringEntity::setMaxAngularSpeed",2,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_setMaxAngularSpeed",1,SWIGTYPE_p_SteeringEntity);
  }
  
  arg2 = (btScalar const)lua_tonumber(L, 2);
  (arg1)->setMaxAngularSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_getMaxLinearForce(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("SteeringEntity::getMaxLinearForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::getMaxLinearForce",1,"SteeringEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_getMaxLinearForce",1,SWIGTYPE_p_SteeringEntity);
  }
  
  result = (btScalar)((SteeringEntity const *)arg1)->getMaxLinearForce();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_setMaxLinearForce(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("SteeringEntity::setMaxLinearForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::setMaxLinearForce",1,"SteeringEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SteeringEntity::setMaxLinearForce",2,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_setMaxLinearForce",1,SWIGTYPE_p_SteeringEntity);
  }
  
  arg2 = (btScalar const)lua_tonumber(L, 2);
  (arg1)->setMaxLinearForce(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_getMaxAngularForce(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("SteeringEntity::getMaxAngularForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::getMaxAngularForce",1,"SteeringEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_getMaxAngularForce",1,SWIGTYPE_p_SteeringEntity);
  }
  
  result = (btScalar)((SteeringEntity const *)arg1)->getMaxAngularForce();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_setMaxAngularForce(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("SteeringEntity::setMaxAngularForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::setMaxAngularForce",1,"SteeringEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SteeringEntity::setMaxAngularForce",2,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_setMaxAngularForce",1,SWIGTYPE_p_SteeringEntity);
  }
  
  arg2 = (btScalar const)lua_tonumber(L, 2);
  (arg1)->setMaxAngularForce(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_getWanderInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  WanderInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringEntity::getWanderInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::getWanderInfo",1,"SteeringEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_getWanderInfo",1,SWIGTYPE_p_SteeringEntity);
  }
  
  result = (WanderInfo *)((SteeringEntity const *)arg1)->getWanderInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WanderInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_getWanderInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  WanderInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringEntity::getWanderInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::getWanderInfo",1,"SteeringEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_getWanderInfo",1,SWIGTYPE_p_SteeringEntity);
  }
  
  result = (WanderInfo *)(arg1)->getWanderInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WanderInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_getWanderInfo(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SteeringEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SteeringEntity_getWanderInfo__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SteeringEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SteeringEntity_getWanderInfo__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SteeringEntity_getWanderInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SteeringEntity::getWanderInfo() const\n"
    "    SteeringEntity::getWanderInfo()\n");
  lua_error(L);return 0;
}


static int _wrap_SteeringEntity_getFolowPathInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  FollowPathInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringEntity::getFolowPathInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::getFolowPathInfo",1,"SteeringEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_getFolowPathInfo",1,SWIGTYPE_p_SteeringEntity);
  }
  
  result = (FollowPathInfo *)((SteeringEntity const *)arg1)->getFolowPathInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FollowPathInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_getFolowPathInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntity *arg1 = (SteeringEntity *) 0 ;
  FollowPathInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringEntity::getFolowPathInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntity::getFolowPathInfo",1,"SteeringEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntity,0))){
    SWIG_fail_ptr("SteeringEntity_getFolowPathInfo",1,SWIGTYPE_p_SteeringEntity);
  }
  
  result = (FollowPathInfo *)(arg1)->getFolowPathInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FollowPathInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntity_getFolowPathInfo(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SteeringEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SteeringEntity_getFolowPathInfo__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SteeringEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SteeringEntity_getFolowPathInfo__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SteeringEntity_getFolowPathInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SteeringEntity::getFolowPathInfo() const\n"
    "    SteeringEntity::getFolowPathInfo()\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_SteeringEntity_methods[] = {
    {"getWorldTransform", _wrap_SteeringEntity_getWorldTransform}, 
    {"setWorldTransform", _wrap_SteeringEntity_setWorldTransform}, 
    {"updateAction", _wrap_SteeringEntity_updateAction}, 
    {"debugDraw", _wrap_SteeringEntity_debugDraw}, 
    {"getSteeringBehavior", _wrap_SteeringEntity_getSteeringBehavior}, 
    {"setSteeringBehavior", _wrap_SteeringEntity_setSteeringBehavior}, 
    {"setStaticPhysics", _wrap_SteeringEntity_setStaticPhysics}, 
    {"isStaticPhysics", _wrap_SteeringEntity_isStaticPhysics}, 
    {"getMaxLinearSpeed", _wrap_SteeringEntity_getMaxLinearSpeed}, 
    {"setMaxLinearSpeed", _wrap_SteeringEntity_setMaxLinearSpeed}, 
    {"getMaxAngularSpeed", _wrap_SteeringEntity_getMaxAngularSpeed}, 
    {"setMaxAngularSpeed", _wrap_SteeringEntity_setMaxAngularSpeed}, 
    {"getMaxLinearForce", _wrap_SteeringEntity_getMaxLinearForce}, 
    {"setMaxLinearForce", _wrap_SteeringEntity_setMaxLinearForce}, 
    {"getMaxAngularForce", _wrap_SteeringEntity_getMaxAngularForce}, 
    {"setMaxAngularForce", _wrap_SteeringEntity_setMaxAngularForce}, 
    {"getWanderInfo", _wrap_SteeringEntity_getWanderInfo}, 
    {"getFolowPathInfo", _wrap_SteeringEntity_getFolowPathInfo}, 
    {0,0}
};
static swig_lua_attribute swig_SteeringEntity_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_SteeringEntity_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SteeringEntity_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_SteeringEntity_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_SteeringEntity_bases[] = {0,0};
static const char *swig_SteeringEntity_base_names[] = {"RigidEntity *",0};
static swig_lua_class _wrap_class_SteeringEntity = { "SteeringEntity", &SWIGTYPE_p_SteeringEntity,0,0, swig_SteeringEntity_methods, swig_SteeringEntity_attributes, { "SteeringEntity", swig_SteeringEntity_cls_methods, swig_SteeringEntity_cls_attributes, swig_SteeringEntity_cls_constants }, swig_SteeringEntity_bases, swig_SteeringEntity_base_names };

static int _wrap_BaseCamera_createCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = 0 ;
  btConvexHullShape *result = 0 ;
  
  SWIG_check_num_args("BaseCamera::createCollisionShape",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("BaseCamera::createCollisionShape",1,"BaseCamera const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_createCollisionShape",1,SWIGTYPE_p_BaseCamera);
  }
  
  result = (btConvexHullShape *)BaseCamera::createCollisionShape((BaseCamera const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexHullShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_updateAction(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("BaseCamera::updateAction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::updateAction",1,"BaseCamera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseCamera::updateAction",2,"btCollisionWorld *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseCamera::updateAction",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_updateAction",1,SWIGTYPE_p_BaseCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("BaseCamera_updateAction",2,SWIGTYPE_p_btCollisionWorld);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->updateAction(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_debugDraw(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  SWIG_check_num_args("BaseCamera::debugDraw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::debugDraw",1,"BaseCamera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseCamera::debugDraw",2,"btIDebugDraw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_debugDraw",1,SWIGTYPE_p_BaseCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("BaseCamera_debugDraw",2,SWIGTYPE_p_btIDebugDraw);
  }
  
  (arg1)->debugDraw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_getHeadingVector(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("BaseCamera::getHeadingVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::getHeadingVector",1,"BaseCamera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_getHeadingVector",1,SWIGTYPE_p_BaseCamera);
  }
  
  result = (btVector3 *) &((BaseCamera const *)arg1)->getHeadingVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_getUpVector(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("BaseCamera::getUpVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::getUpVector",1,"BaseCamera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_getUpVector",1,SWIGTYPE_p_BaseCamera);
  }
  
  result = (btVector3 *) &((BaseCamera const *)arg1)->getUpVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_getSideVector(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("BaseCamera::getSideVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::getSideVector",1,"BaseCamera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_getSideVector",1,SWIGTYPE_p_BaseCamera);
  }
  
  result = ((BaseCamera const *)arg1)->getSideVector();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_getOrigin(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("BaseCamera::getOrigin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::getOrigin",1,"BaseCamera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_getOrigin",1,SWIGTYPE_p_BaseCamera);
  }
  
  result = ((BaseCamera const *)arg1)->getOrigin();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_setOrigin(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("BaseCamera::setOrigin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::setOrigin",1,"BaseCamera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseCamera::setOrigin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_setOrigin",1,SWIGTYPE_p_BaseCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("BaseCamera_setOrigin",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setOrigin((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("BaseCamera::getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::getRotation",1,"BaseCamera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_getRotation",1,SWIGTYPE_p_BaseCamera);
  }
  
  result = ((BaseCamera const *)arg1)->getRotation();
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("BaseCamera::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::setRotation",1,"BaseCamera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseCamera::setRotation",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_setRotation",1,SWIGTYPE_p_BaseCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("BaseCamera_setRotation",2,SWIGTYPE_p_btQuaternion);
  }
  
  (arg1)->setRotation((btQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_lookAt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("BaseCamera::lookAt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::lookAt",1,"BaseCamera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseCamera::lookAt",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("BaseCamera::lookAt",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_lookAt",1,SWIGTYPE_p_BaseCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("BaseCamera_lookAt",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("BaseCamera_lookAt",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->lookAt((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_lookAt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("BaseCamera::lookAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::lookAt",1,"BaseCamera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseCamera::lookAt",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_lookAt",1,SWIGTYPE_p_BaseCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("BaseCamera_lookAt",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->lookAt((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_lookAt(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseCamera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BaseCamera_lookAt__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseCamera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BaseCamera_lookAt__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BaseCamera_lookAt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    BaseCamera::lookAt(btVector3 const &,btVector3 const &)\n"
    "    BaseCamera::lookAt(btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BaseCamera_getWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btTransform result;
  
  SWIG_check_num_args("BaseCamera::getWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::getWorldTransform",1,"BaseCamera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_getWorldTransform",1,SWIGTYPE_p_BaseCamera);
  }
  
  result = ((BaseCamera const *)arg1)->getWorldTransform();
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_setWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("BaseCamera::setWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::setWorldTransform",1,"BaseCamera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseCamera::setWorldTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_setWorldTransform",1,SWIGTYPE_p_BaseCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("BaseCamera_setWorldTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_getProjection(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  GLKMatrix4 result;
  
  SWIG_check_num_args("BaseCamera::getProjection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::getProjection",1,"BaseCamera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_getProjection",1,SWIGTYPE_p_BaseCamera);
  }
  
  result = ((BaseCamera const *)arg1)->getProjection();
  {
    GLKMatrix4 * resultptr = new GLKMatrix4((const GLKMatrix4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLKMatrix4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_getLeft(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseCamera::getLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::getLeft",1,"BaseCamera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_getLeft",1,SWIGTYPE_p_BaseCamera);
  }
  
  result = (btScalar)((BaseCamera const *)arg1)->getLeft();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_getRight(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseCamera::getRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::getRight",1,"BaseCamera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_getRight",1,SWIGTYPE_p_BaseCamera);
  }
  
  result = (btScalar)((BaseCamera const *)arg1)->getRight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_getTop(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseCamera::getTop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::getTop",1,"BaseCamera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_getTop",1,SWIGTYPE_p_BaseCamera);
  }
  
  result = (btScalar)((BaseCamera const *)arg1)->getTop();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_getBottom(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseCamera::getBottom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::getBottom",1,"BaseCamera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_getBottom",1,SWIGTYPE_p_BaseCamera);
  }
  
  result = (btScalar)((BaseCamera const *)arg1)->getBottom();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_getFar(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseCamera::getFar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::getFar",1,"BaseCamera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_getFar",1,SWIGTYPE_p_BaseCamera);
  }
  
  result = (btScalar)((BaseCamera const *)arg1)->getFar();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_getNear(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseCamera::getNear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::getNear",1,"BaseCamera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_getNear",1,SWIGTYPE_p_BaseCamera);
  }
  
  result = (btScalar)((BaseCamera const *)arg1)->getNear();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_getFieldOfViewDegrees(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseCamera::getFieldOfViewDegrees",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::getFieldOfViewDegrees",1,"BaseCamera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_getFieldOfViewDegrees",1,SWIGTYPE_p_BaseCamera);
  }
  
  result = (btScalar)((BaseCamera const *)arg1)->getFieldOfViewDegrees();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_unProject(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("BaseCamera::unProject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::unProject",1,"BaseCamera const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseCamera::unProject",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_unProject",1,SWIGTYPE_p_BaseCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("BaseCamera_unProject",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((BaseCamera const *)arg1)->unProject((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_project(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("BaseCamera::project",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::project",1,"BaseCamera const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseCamera::project",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_project",1,SWIGTYPE_p_BaseCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("BaseCamera_project",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((BaseCamera const *)arg1)->project((btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_setZOrder__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  BaseEntity *arg3 = (BaseEntity *) 0 ;
  float arg4 ;
  
  SWIG_check_num_args("BaseCamera::setZOrder",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::setZOrder",1,"BaseCamera const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseCamera::setZOrder",2,"BaseEntity const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("BaseCamera::setZOrder",3,"BaseEntity *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("BaseCamera::setZOrder",4,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_setZOrder",1,SWIGTYPE_p_BaseCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("BaseCamera_setZOrder",2,SWIGTYPE_p_BaseEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("BaseCamera_setZOrder",3,SWIGTYPE_p_BaseEntity);
  }
  
  arg4 = (float const)lua_tonumber(L, 4);
  ((BaseCamera const *)arg1)->setZOrder((BaseEntity const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_setZOrder__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  BaseEntity *arg3 = (BaseEntity *) 0 ;
  
  SWIG_check_num_args("BaseCamera::setZOrder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::setZOrder",1,"BaseCamera const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseCamera::setZOrder",2,"BaseEntity const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("BaseCamera::setZOrder",3,"BaseEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_setZOrder",1,SWIGTYPE_p_BaseCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("BaseCamera_setZOrder",2,SWIGTYPE_p_BaseEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("BaseCamera_setZOrder",3,SWIGTYPE_p_BaseEntity);
  }
  
  ((BaseCamera const *)arg1)->setZOrder((BaseEntity const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_setZOrder(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseCamera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseEntity, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BaseEntity, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BaseCamera_setZOrder__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseCamera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseEntity, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_BaseEntity, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BaseCamera_setZOrder__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BaseCamera_setZOrder'\n"
    "  Possible C/C++ prototypes are:\n"
    "    BaseCamera::setZOrder(BaseEntity const *,BaseEntity *,float const) const\n"
    "    BaseCamera::setZOrder(BaseEntity const *,BaseEntity *) const\n");
  lua_error(L);return 0;
}


static int _wrap_BaseCamera_setPerspective(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  SWIG_check_num_args("BaseCamera::setPerspective",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::setPerspective",1,"BaseCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCamera::setPerspective",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseCamera::setPerspective",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("BaseCamera::setPerspective",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_setPerspective",1,SWIGTYPE_p_BaseCamera);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  (arg1)->setPerspective(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_setOrthographic(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  
  SWIG_check_num_args("BaseCamera::setOrthographic",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::setOrthographic",1,"BaseCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCamera::setOrthographic",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseCamera::setOrthographic",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("BaseCamera::setOrthographic",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("BaseCamera::setOrthographic",5,"btScalar");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("BaseCamera::setOrthographic",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("BaseCamera::setOrthographic",7,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_setOrthographic",1,SWIGTYPE_p_BaseCamera);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (btScalar)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  (arg1)->setOrthographic(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_m_IsOrthographicCamera_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("BaseCamera::m_IsOrthographicCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::m_IsOrthographicCamera",1,"BaseCamera *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("BaseCamera::m_IsOrthographicCamera",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_m_IsOrthographicCamera_set",1,SWIGTYPE_p_BaseCamera);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_IsOrthographicCamera = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCamera_m_IsOrthographicCamera_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseCamera *arg1 = (BaseCamera *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseCamera::m_IsOrthographicCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCamera::m_IsOrthographicCamera",1,"BaseCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseCamera_m_IsOrthographicCamera_get",1,SWIGTYPE_p_BaseCamera);
  }
  
  result = (bool) ((arg1)->m_IsOrthographicCamera);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_BaseCamera_methods[] = {
    {"updateAction", _wrap_BaseCamera_updateAction}, 
    {"debugDraw", _wrap_BaseCamera_debugDraw}, 
    {"getHeadingVector", _wrap_BaseCamera_getHeadingVector}, 
    {"getUpVector", _wrap_BaseCamera_getUpVector}, 
    {"getSideVector", _wrap_BaseCamera_getSideVector}, 
    {"getOrigin", _wrap_BaseCamera_getOrigin}, 
    {"setOrigin", _wrap_BaseCamera_setOrigin}, 
    {"getRotation", _wrap_BaseCamera_getRotation}, 
    {"setRotation", _wrap_BaseCamera_setRotation}, 
    {"lookAt", _wrap_BaseCamera_lookAt}, 
    {"getWorldTransform", _wrap_BaseCamera_getWorldTransform}, 
    {"setWorldTransform", _wrap_BaseCamera_setWorldTransform}, 
    {"getProjection", _wrap_BaseCamera_getProjection}, 
    {"getLeft", _wrap_BaseCamera_getLeft}, 
    {"getRight", _wrap_BaseCamera_getRight}, 
    {"getTop", _wrap_BaseCamera_getTop}, 
    {"getBottom", _wrap_BaseCamera_getBottom}, 
    {"getFar", _wrap_BaseCamera_getFar}, 
    {"getNear", _wrap_BaseCamera_getNear}, 
    {"getFieldOfViewDegrees", _wrap_BaseCamera_getFieldOfViewDegrees}, 
    {"unProject", _wrap_BaseCamera_unProject}, 
    {"project", _wrap_BaseCamera_project}, 
    {"setZOrder", _wrap_BaseCamera_setZOrder}, 
    {"setPerspective", _wrap_BaseCamera_setPerspective}, 
    {"setOrthographic", _wrap_BaseCamera_setOrthographic}, 
    {0,0}
};
static swig_lua_attribute swig_BaseCamera_attributes[] = {
    { "m_IsOrthographicCamera", _wrap_BaseCamera_m_IsOrthographicCamera_get, _wrap_BaseCamera_m_IsOrthographicCamera_set},
    {0,0,0}
};
static swig_lua_attribute swig_BaseCamera_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BaseCamera_cls_methods[] = {
    {"createCollisionShape", _wrap_BaseCamera_createCollisionShape}, 
    {0,0}
};
static swig_lua_const_info swig_BaseCamera_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BaseCamera_bases[] = {0};
static const char *swig_BaseCamera_base_names[] = {0};
static swig_lua_class _wrap_class_BaseCamera = { "BaseCamera", &SWIGTYPE_p_BaseCamera,0,0, swig_BaseCamera_methods, swig_BaseCamera_attributes, { "BaseCamera", swig_BaseCamera_cls_methods, swig_BaseCamera_cls_attributes, swig_BaseCamera_cls_constants }, swig_BaseCamera_bases, swig_BaseCamera_base_names };

static int _wrap_CameraEntity_getID(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntity *arg1 = (CameraEntity *) 0 ;
  IDType result;
  
  SWIG_check_num_args("CameraEntity::getID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraEntity::getID",1,"CameraEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntity,0))){
    SWIG_fail_ptr("CameraEntity_getID",1,SWIGTYPE_p_CameraEntity);
  }
  
  result = (IDType)((CameraEntity const *)arg1)->getID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraEntity_updateAction(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntity *arg1 = (CameraEntity *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("CameraEntity::updateAction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraEntity::updateAction",1,"CameraEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CameraEntity::updateAction",2,"btCollisionWorld *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraEntity::updateAction",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntity,0))){
    SWIG_fail_ptr("CameraEntity_updateAction",1,SWIGTYPE_p_CameraEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("CameraEntity_updateAction",2,SWIGTYPE_p_btCollisionWorld);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->updateAction(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraEntity_debugDraw(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntity *arg1 = (CameraEntity *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  SWIG_check_num_args("CameraEntity::debugDraw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraEntity::debugDraw",1,"CameraEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CameraEntity::debugDraw",2,"btIDebugDraw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntity,0))){
    SWIG_fail_ptr("CameraEntity_debugDraw",1,SWIGTYPE_p_CameraEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("CameraEntity_debugDraw",2,SWIGTYPE_p_btIDebugDraw);
  }
  
  (arg1)->debugDraw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraEntity_getHeadingVector(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntity *arg1 = (CameraEntity *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("CameraEntity::getHeadingVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraEntity::getHeadingVector",1,"CameraEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntity,0))){
    SWIG_fail_ptr("CameraEntity_getHeadingVector",1,SWIGTYPE_p_CameraEntity);
  }
  
  result = (btVector3 *) &((CameraEntity const *)arg1)->getHeadingVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraEntity_getUpVector(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntity *arg1 = (CameraEntity *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("CameraEntity::getUpVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraEntity::getUpVector",1,"CameraEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntity,0))){
    SWIG_fail_ptr("CameraEntity_getUpVector",1,SWIGTYPE_p_CameraEntity);
  }
  
  result = (btVector3 *) &((CameraEntity const *)arg1)->getUpVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraEntity_getSideVector(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntity *arg1 = (CameraEntity *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("CameraEntity::getSideVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraEntity::getSideVector",1,"CameraEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntity,0))){
    SWIG_fail_ptr("CameraEntity_getSideVector",1,SWIGTYPE_p_CameraEntity);
  }
  
  result = ((CameraEntity const *)arg1)->getSideVector();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraEntity_getOrigin(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntity *arg1 = (CameraEntity *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("CameraEntity::getOrigin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraEntity::getOrigin",1,"CameraEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntity,0))){
    SWIG_fail_ptr("CameraEntity_getOrigin",1,SWIGTYPE_p_CameraEntity);
  }
  
  result = ((CameraEntity const *)arg1)->getOrigin();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraEntity_setOrigin(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntity *arg1 = (CameraEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("CameraEntity::setOrigin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraEntity::setOrigin",1,"CameraEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CameraEntity::setOrigin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntity,0))){
    SWIG_fail_ptr("CameraEntity_setOrigin",1,SWIGTYPE_p_CameraEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("CameraEntity_setOrigin",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setOrigin((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraEntity_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntity *arg1 = (CameraEntity *) 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("CameraEntity::getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraEntity::getRotation",1,"CameraEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntity,0))){
    SWIG_fail_ptr("CameraEntity_getRotation",1,SWIGTYPE_p_CameraEntity);
  }
  
  result = ((CameraEntity const *)arg1)->getRotation();
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraEntity_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntity *arg1 = (CameraEntity *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("CameraEntity::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraEntity::setRotation",1,"CameraEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CameraEntity::setRotation",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntity,0))){
    SWIG_fail_ptr("CameraEntity_setRotation",1,SWIGTYPE_p_CameraEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("CameraEntity_setRotation",2,SWIGTYPE_p_btQuaternion);
  }
  
  (arg1)->setRotation((btQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraEntity_lookAt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntity *arg1 = (CameraEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("CameraEntity::lookAt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraEntity::lookAt",1,"CameraEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CameraEntity::lookAt",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("CameraEntity::lookAt",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntity,0))){
    SWIG_fail_ptr("CameraEntity_lookAt",1,SWIGTYPE_p_CameraEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("CameraEntity_lookAt",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("CameraEntity_lookAt",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->lookAt((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraEntity_lookAt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntity *arg1 = (CameraEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("CameraEntity::lookAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraEntity::lookAt",1,"CameraEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CameraEntity::lookAt",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntity,0))){
    SWIG_fail_ptr("CameraEntity_lookAt",1,SWIGTYPE_p_CameraEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("CameraEntity_lookAt",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->lookAt((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraEntity_lookAt(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CameraEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CameraEntity_lookAt__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CameraEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CameraEntity_lookAt__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CameraEntity_lookAt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CameraEntity::lookAt(btVector3 const &,btVector3 const &)\n"
    "    CameraEntity::lookAt(btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CameraEntity_getWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntity *arg1 = (CameraEntity *) 0 ;
  btTransform result;
  
  SWIG_check_num_args("CameraEntity::getWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraEntity::getWorldTransform",1,"CameraEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntity,0))){
    SWIG_fail_ptr("CameraEntity_getWorldTransform",1,SWIGTYPE_p_CameraEntity);
  }
  
  result = ((CameraEntity const *)arg1)->getWorldTransform();
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraEntity_setWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntity *arg1 = (CameraEntity *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("CameraEntity::setWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraEntity::setWorldTransform",1,"CameraEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CameraEntity::setWorldTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntity,0))){
    SWIG_fail_ptr("CameraEntity_setWorldTransform",1,SWIGTYPE_p_CameraEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("CameraEntity_setWorldTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraEntity_enableCollision__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntity *arg1 = (CameraEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CameraEntity::enableCollision",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraEntity::enableCollision",1,"CameraEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CameraEntity::enableCollision",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntity,0))){
    SWIG_fail_ptr("CameraEntity_enableCollision",1,SWIGTYPE_p_CameraEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableCollision(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraEntity_enableCollision__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntity *arg1 = (CameraEntity *) 0 ;
  
  SWIG_check_num_args("CameraEntity::enableCollision",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraEntity::enableCollision",1,"CameraEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntity,0))){
    SWIG_fail_ptr("CameraEntity_enableCollision",1,SWIGTYPE_p_CameraEntity);
  }
  
  (arg1)->enableCollision();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraEntity_enableCollision(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CameraEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CameraEntity_enableCollision__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CameraEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_CameraEntity_enableCollision__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CameraEntity_enableCollision'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CameraEntity::enableCollision(bool const)\n"
    "    CameraEntity::enableCollision()\n");
  lua_error(L);return 0;
}


static int _wrap_CameraEntity_isCollisionEnabled(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntity *arg1 = (CameraEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("CameraEntity::isCollisionEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraEntity::isCollisionEnabled",1,"CameraEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntity,0))){
    SWIG_fail_ptr("CameraEntity_isCollisionEnabled",1,SWIGTYPE_p_CameraEntity);
  }
  
  result = (bool)((CameraEntity const *)arg1)->isCollisionEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_CameraEntity_methods[] = {
    {"getID", _wrap_CameraEntity_getID}, 
    {"updateAction", _wrap_CameraEntity_updateAction}, 
    {"debugDraw", _wrap_CameraEntity_debugDraw}, 
    {"getHeadingVector", _wrap_CameraEntity_getHeadingVector}, 
    {"getUpVector", _wrap_CameraEntity_getUpVector}, 
    {"getSideVector", _wrap_CameraEntity_getSideVector}, 
    {"getOrigin", _wrap_CameraEntity_getOrigin}, 
    {"setOrigin", _wrap_CameraEntity_setOrigin}, 
    {"getRotation", _wrap_CameraEntity_getRotation}, 
    {"setRotation", _wrap_CameraEntity_setRotation}, 
    {"lookAt", _wrap_CameraEntity_lookAt}, 
    {"getWorldTransform", _wrap_CameraEntity_getWorldTransform}, 
    {"setWorldTransform", _wrap_CameraEntity_setWorldTransform}, 
    {"enableCollision", _wrap_CameraEntity_enableCollision}, 
    {"isCollisionEnabled", _wrap_CameraEntity_isCollisionEnabled}, 
    {0,0}
};
static swig_lua_attribute swig_CameraEntity_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_CameraEntity_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CameraEntity_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CameraEntity_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CameraEntity_bases[] = {0,0};
static const char *swig_CameraEntity_base_names[] = {"BaseCamera *",0};
static swig_lua_class _wrap_class_CameraEntity = { "CameraEntity", &SWIGTYPE_p_CameraEntity,0,0, swig_CameraEntity_methods, swig_CameraEntity_attributes, { "CameraEntity", swig_CameraEntity_cls_methods, swig_CameraEntity_cls_attributes, swig_CameraEntity_cls_constants }, swig_CameraEntity_bases, swig_CameraEntity_base_names };

static int _wrap_CameraPhysicsEntity_getID(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntity *arg1 = (CameraPhysicsEntity *) 0 ;
  IDType result;
  
  SWIG_check_num_args("CameraPhysicsEntity::getID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraPhysicsEntity::getID",1,"CameraPhysicsEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntity,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_getID",1,SWIGTYPE_p_CameraPhysicsEntity);
  }
  
  result = (IDType)((CameraPhysicsEntity const *)arg1)->getID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraPhysicsEntity_updateAction(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntity *arg1 = (CameraPhysicsEntity *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("CameraPhysicsEntity::updateAction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraPhysicsEntity::updateAction",1,"CameraPhysicsEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CameraPhysicsEntity::updateAction",2,"btCollisionWorld *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraPhysicsEntity::updateAction",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntity,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_updateAction",1,SWIGTYPE_p_CameraPhysicsEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_updateAction",2,SWIGTYPE_p_btCollisionWorld);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->updateAction(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraPhysicsEntity_debugDraw(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntity *arg1 = (CameraPhysicsEntity *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntity::debugDraw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraPhysicsEntity::debugDraw",1,"CameraPhysicsEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CameraPhysicsEntity::debugDraw",2,"btIDebugDraw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntity,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_debugDraw",1,SWIGTYPE_p_CameraPhysicsEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_debugDraw",2,SWIGTYPE_p_btIDebugDraw);
  }
  
  (arg1)->debugDraw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraPhysicsEntity_getHeadingVector(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntity *arg1 = (CameraPhysicsEntity *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntity::getHeadingVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraPhysicsEntity::getHeadingVector",1,"CameraPhysicsEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntity,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_getHeadingVector",1,SWIGTYPE_p_CameraPhysicsEntity);
  }
  
  result = (btVector3 *) &((CameraPhysicsEntity const *)arg1)->getHeadingVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraPhysicsEntity_getUpVector(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntity *arg1 = (CameraPhysicsEntity *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntity::getUpVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraPhysicsEntity::getUpVector",1,"CameraPhysicsEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntity,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_getUpVector",1,SWIGTYPE_p_CameraPhysicsEntity);
  }
  
  result = (btVector3 *) &((CameraPhysicsEntity const *)arg1)->getUpVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraPhysicsEntity_getSideVector(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntity *arg1 = (CameraPhysicsEntity *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("CameraPhysicsEntity::getSideVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraPhysicsEntity::getSideVector",1,"CameraPhysicsEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntity,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_getSideVector",1,SWIGTYPE_p_CameraPhysicsEntity);
  }
  
  result = ((CameraPhysicsEntity const *)arg1)->getSideVector();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraPhysicsEntity_getOrigin(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntity *arg1 = (CameraPhysicsEntity *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("CameraPhysicsEntity::getOrigin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraPhysicsEntity::getOrigin",1,"CameraPhysicsEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntity,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_getOrigin",1,SWIGTYPE_p_CameraPhysicsEntity);
  }
  
  result = ((CameraPhysicsEntity const *)arg1)->getOrigin();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraPhysicsEntity_setOrigin(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntity *arg1 = (CameraPhysicsEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntity::setOrigin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraPhysicsEntity::setOrigin",1,"CameraPhysicsEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CameraPhysicsEntity::setOrigin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntity,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_setOrigin",1,SWIGTYPE_p_CameraPhysicsEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_setOrigin",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setOrigin((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraPhysicsEntity_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntity *arg1 = (CameraPhysicsEntity *) 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("CameraPhysicsEntity::getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraPhysicsEntity::getRotation",1,"CameraPhysicsEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntity,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_getRotation",1,SWIGTYPE_p_CameraPhysicsEntity);
  }
  
  result = ((CameraPhysicsEntity const *)arg1)->getRotation();
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraPhysicsEntity_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntity *arg1 = (CameraPhysicsEntity *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntity::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraPhysicsEntity::setRotation",1,"CameraPhysicsEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CameraPhysicsEntity::setRotation",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntity,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_setRotation",1,SWIGTYPE_p_CameraPhysicsEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_setRotation",2,SWIGTYPE_p_btQuaternion);
  }
  
  (arg1)->setRotation((btQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraPhysicsEntity_lookAt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntity *arg1 = (CameraPhysicsEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntity::lookAt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraPhysicsEntity::lookAt",1,"CameraPhysicsEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CameraPhysicsEntity::lookAt",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("CameraPhysicsEntity::lookAt",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntity,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_lookAt",1,SWIGTYPE_p_CameraPhysicsEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_lookAt",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_lookAt",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->lookAt((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraPhysicsEntity_lookAt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntity *arg1 = (CameraPhysicsEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntity::lookAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraPhysicsEntity::lookAt",1,"CameraPhysicsEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CameraPhysicsEntity::lookAt",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntity,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_lookAt",1,SWIGTYPE_p_CameraPhysicsEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_lookAt",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->lookAt((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraPhysicsEntity_lookAt(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CameraPhysicsEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CameraPhysicsEntity_lookAt__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CameraPhysicsEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CameraPhysicsEntity_lookAt__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CameraPhysicsEntity_lookAt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CameraPhysicsEntity::lookAt(btVector3 const &,btVector3 const &)\n"
    "    CameraPhysicsEntity::lookAt(btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CameraPhysicsEntity_getWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntity *arg1 = (CameraPhysicsEntity *) 0 ;
  btTransform result;
  
  SWIG_check_num_args("CameraPhysicsEntity::getWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraPhysicsEntity::getWorldTransform",1,"CameraPhysicsEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntity,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_getWorldTransform",1,SWIGTYPE_p_CameraPhysicsEntity);
  }
  
  result = ((CameraPhysicsEntity const *)arg1)->getWorldTransform();
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraPhysicsEntity_setWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntity *arg1 = (CameraPhysicsEntity *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntity::setWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraPhysicsEntity::setWorldTransform",1,"CameraPhysicsEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CameraPhysicsEntity::setWorldTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntity,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_setWorldTransform",1,SWIGTYPE_p_CameraPhysicsEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_setWorldTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraPhysicsEntity_enableCollision__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntity *arg1 = (CameraPhysicsEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("CameraPhysicsEntity::enableCollision",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraPhysicsEntity::enableCollision",1,"CameraPhysicsEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("CameraPhysicsEntity::enableCollision",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntity,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_enableCollision",1,SWIGTYPE_p_CameraPhysicsEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableCollision(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraPhysicsEntity_enableCollision__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntity *arg1 = (CameraPhysicsEntity *) 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntity::enableCollision",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraPhysicsEntity::enableCollision",1,"CameraPhysicsEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntity,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_enableCollision",1,SWIGTYPE_p_CameraPhysicsEntity);
  }
  
  (arg1)->enableCollision();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraPhysicsEntity_enableCollision(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CameraPhysicsEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CameraPhysicsEntity_enableCollision__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CameraPhysicsEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_CameraPhysicsEntity_enableCollision__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CameraPhysicsEntity_enableCollision'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CameraPhysicsEntity::enableCollision(bool const)\n"
    "    CameraPhysicsEntity::enableCollision()\n");
  lua_error(L);return 0;
}


static int _wrap_CameraPhysicsEntity_isCollisionEnabled(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntity *arg1 = (CameraPhysicsEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("CameraPhysicsEntity::isCollisionEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraPhysicsEntity::isCollisionEnabled",1,"CameraPhysicsEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntity,0))){
    SWIG_fail_ptr("CameraPhysicsEntity_isCollisionEnabled",1,SWIGTYPE_p_CameraPhysicsEntity);
  }
  
  result = (bool)((CameraPhysicsEntity const *)arg1)->isCollisionEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_CameraPhysicsEntity_methods[] = {
    {"getID", _wrap_CameraPhysicsEntity_getID}, 
    {"updateAction", _wrap_CameraPhysicsEntity_updateAction}, 
    {"debugDraw", _wrap_CameraPhysicsEntity_debugDraw}, 
    {"getHeadingVector", _wrap_CameraPhysicsEntity_getHeadingVector}, 
    {"getUpVector", _wrap_CameraPhysicsEntity_getUpVector}, 
    {"getSideVector", _wrap_CameraPhysicsEntity_getSideVector}, 
    {"getOrigin", _wrap_CameraPhysicsEntity_getOrigin}, 
    {"setOrigin", _wrap_CameraPhysicsEntity_setOrigin}, 
    {"getRotation", _wrap_CameraPhysicsEntity_getRotation}, 
    {"setRotation", _wrap_CameraPhysicsEntity_setRotation}, 
    {"lookAt", _wrap_CameraPhysicsEntity_lookAt}, 
    {"getWorldTransform", _wrap_CameraPhysicsEntity_getWorldTransform}, 
    {"setWorldTransform", _wrap_CameraPhysicsEntity_setWorldTransform}, 
    {"enableCollision", _wrap_CameraPhysicsEntity_enableCollision}, 
    {"isCollisionEnabled", _wrap_CameraPhysicsEntity_isCollisionEnabled}, 
    {0,0}
};
static swig_lua_attribute swig_CameraPhysicsEntity_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_CameraPhysicsEntity_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CameraPhysicsEntity_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CameraPhysicsEntity_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CameraPhysicsEntity_bases[] = {0,0,0};
static const char *swig_CameraPhysicsEntity_base_names[] = {"BaseCamera *","RigidEntity *",0};
static swig_lua_class _wrap_class_CameraPhysicsEntity = { "CameraPhysicsEntity", &SWIGTYPE_p_CameraPhysicsEntity,0,0, swig_CameraPhysicsEntity_methods, swig_CameraPhysicsEntity_attributes, { "CameraPhysicsEntity", swig_CameraPhysicsEntity_cls_methods, swig_CameraPhysicsEntity_cls_attributes, swig_CameraPhysicsEntity_cls_constants }, swig_CameraPhysicsEntity_bases, swig_CameraPhysicsEntity_base_names };

static int _wrap_CameraSteeringEntity_getID(lua_State* L) {
  int SWIG_arg = 0;
  CameraSteeringEntity *arg1 = (CameraSteeringEntity *) 0 ;
  IDType result;
  
  SWIG_check_num_args("CameraSteeringEntity::getID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraSteeringEntity::getID",1,"CameraSteeringEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraSteeringEntity,0))){
    SWIG_fail_ptr("CameraSteeringEntity_getID",1,SWIGTYPE_p_CameraSteeringEntity);
  }
  
  result = (IDType)((CameraSteeringEntity const *)arg1)->getID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraSteeringEntity_updateAction(lua_State* L) {
  int SWIG_arg = 0;
  CameraSteeringEntity *arg1 = (CameraSteeringEntity *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("CameraSteeringEntity::updateAction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraSteeringEntity::updateAction",1,"CameraSteeringEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CameraSteeringEntity::updateAction",2,"btCollisionWorld *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraSteeringEntity::updateAction",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraSteeringEntity,0))){
    SWIG_fail_ptr("CameraSteeringEntity_updateAction",1,SWIGTYPE_p_CameraSteeringEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("CameraSteeringEntity_updateAction",2,SWIGTYPE_p_btCollisionWorld);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->updateAction(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraSteeringEntity_debugDraw(lua_State* L) {
  int SWIG_arg = 0;
  CameraSteeringEntity *arg1 = (CameraSteeringEntity *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  SWIG_check_num_args("CameraSteeringEntity::debugDraw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraSteeringEntity::debugDraw",1,"CameraSteeringEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CameraSteeringEntity::debugDraw",2,"btIDebugDraw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraSteeringEntity,0))){
    SWIG_fail_ptr("CameraSteeringEntity_debugDraw",1,SWIGTYPE_p_CameraSteeringEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("CameraSteeringEntity_debugDraw",2,SWIGTYPE_p_btIDebugDraw);
  }
  
  (arg1)->debugDraw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraSteeringEntity_getHeadingVector(lua_State* L) {
  int SWIG_arg = 0;
  CameraSteeringEntity *arg1 = (CameraSteeringEntity *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntity::getHeadingVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraSteeringEntity::getHeadingVector",1,"CameraSteeringEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraSteeringEntity,0))){
    SWIG_fail_ptr("CameraSteeringEntity_getHeadingVector",1,SWIGTYPE_p_CameraSteeringEntity);
  }
  
  result = (btVector3 *) &((CameraSteeringEntity const *)arg1)->getHeadingVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraSteeringEntity_getUpVector(lua_State* L) {
  int SWIG_arg = 0;
  CameraSteeringEntity *arg1 = (CameraSteeringEntity *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntity::getUpVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraSteeringEntity::getUpVector",1,"CameraSteeringEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraSteeringEntity,0))){
    SWIG_fail_ptr("CameraSteeringEntity_getUpVector",1,SWIGTYPE_p_CameraSteeringEntity);
  }
  
  result = (btVector3 *) &((CameraSteeringEntity const *)arg1)->getUpVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraSteeringEntity_getSideVector(lua_State* L) {
  int SWIG_arg = 0;
  CameraSteeringEntity *arg1 = (CameraSteeringEntity *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("CameraSteeringEntity::getSideVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraSteeringEntity::getSideVector",1,"CameraSteeringEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraSteeringEntity,0))){
    SWIG_fail_ptr("CameraSteeringEntity_getSideVector",1,SWIGTYPE_p_CameraSteeringEntity);
  }
  
  result = ((CameraSteeringEntity const *)arg1)->getSideVector();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraSteeringEntity_getOrigin(lua_State* L) {
  int SWIG_arg = 0;
  CameraSteeringEntity *arg1 = (CameraSteeringEntity *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("CameraSteeringEntity::getOrigin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraSteeringEntity::getOrigin",1,"CameraSteeringEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraSteeringEntity,0))){
    SWIG_fail_ptr("CameraSteeringEntity_getOrigin",1,SWIGTYPE_p_CameraSteeringEntity);
  }
  
  result = ((CameraSteeringEntity const *)arg1)->getOrigin();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraSteeringEntity_setOrigin(lua_State* L) {
  int SWIG_arg = 0;
  CameraSteeringEntity *arg1 = (CameraSteeringEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntity::setOrigin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraSteeringEntity::setOrigin",1,"CameraSteeringEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CameraSteeringEntity::setOrigin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraSteeringEntity,0))){
    SWIG_fail_ptr("CameraSteeringEntity_setOrigin",1,SWIGTYPE_p_CameraSteeringEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("CameraSteeringEntity_setOrigin",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setOrigin((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraSteeringEntity_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  CameraSteeringEntity *arg1 = (CameraSteeringEntity *) 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("CameraSteeringEntity::getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraSteeringEntity::getRotation",1,"CameraSteeringEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraSteeringEntity,0))){
    SWIG_fail_ptr("CameraSteeringEntity_getRotation",1,SWIGTYPE_p_CameraSteeringEntity);
  }
  
  result = ((CameraSteeringEntity const *)arg1)->getRotation();
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraSteeringEntity_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  CameraSteeringEntity *arg1 = (CameraSteeringEntity *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntity::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraSteeringEntity::setRotation",1,"CameraSteeringEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CameraSteeringEntity::setRotation",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraSteeringEntity,0))){
    SWIG_fail_ptr("CameraSteeringEntity_setRotation",1,SWIGTYPE_p_CameraSteeringEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("CameraSteeringEntity_setRotation",2,SWIGTYPE_p_btQuaternion);
  }
  
  (arg1)->setRotation((btQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraSteeringEntity_lookAt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CameraSteeringEntity *arg1 = (CameraSteeringEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntity::lookAt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraSteeringEntity::lookAt",1,"CameraSteeringEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CameraSteeringEntity::lookAt",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("CameraSteeringEntity::lookAt",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraSteeringEntity,0))){
    SWIG_fail_ptr("CameraSteeringEntity_lookAt",1,SWIGTYPE_p_CameraSteeringEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("CameraSteeringEntity_lookAt",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("CameraSteeringEntity_lookAt",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->lookAt((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraSteeringEntity_lookAt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CameraSteeringEntity *arg1 = (CameraSteeringEntity *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntity::lookAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraSteeringEntity::lookAt",1,"CameraSteeringEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CameraSteeringEntity::lookAt",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraSteeringEntity,0))){
    SWIG_fail_ptr("CameraSteeringEntity_lookAt",1,SWIGTYPE_p_CameraSteeringEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("CameraSteeringEntity_lookAt",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->lookAt((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraSteeringEntity_lookAt(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CameraSteeringEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CameraSteeringEntity_lookAt__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CameraSteeringEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CameraSteeringEntity_lookAt__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CameraSteeringEntity_lookAt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CameraSteeringEntity::lookAt(btVector3 const &,btVector3 const &)\n"
    "    CameraSteeringEntity::lookAt(btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CameraSteeringEntity_getWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  CameraSteeringEntity *arg1 = (CameraSteeringEntity *) 0 ;
  btTransform result;
  
  SWIG_check_num_args("CameraSteeringEntity::getWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraSteeringEntity::getWorldTransform",1,"CameraSteeringEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraSteeringEntity,0))){
    SWIG_fail_ptr("CameraSteeringEntity_getWorldTransform",1,SWIGTYPE_p_CameraSteeringEntity);
  }
  
  result = ((CameraSteeringEntity const *)arg1)->getWorldTransform();
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraSteeringEntity_setWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  CameraSteeringEntity *arg1 = (CameraSteeringEntity *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntity::setWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraSteeringEntity::setWorldTransform",1,"CameraSteeringEntity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CameraSteeringEntity::setWorldTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraSteeringEntity,0))){
    SWIG_fail_ptr("CameraSteeringEntity_setWorldTransform",1,SWIGTYPE_p_CameraSteeringEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("CameraSteeringEntity_setWorldTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_CameraSteeringEntity_methods[] = {
    {"getID", _wrap_CameraSteeringEntity_getID}, 
    {"updateAction", _wrap_CameraSteeringEntity_updateAction}, 
    {"debugDraw", _wrap_CameraSteeringEntity_debugDraw}, 
    {"getHeadingVector", _wrap_CameraSteeringEntity_getHeadingVector}, 
    {"getUpVector", _wrap_CameraSteeringEntity_getUpVector}, 
    {"getSideVector", _wrap_CameraSteeringEntity_getSideVector}, 
    {"getOrigin", _wrap_CameraSteeringEntity_getOrigin}, 
    {"setOrigin", _wrap_CameraSteeringEntity_setOrigin}, 
    {"getRotation", _wrap_CameraSteeringEntity_getRotation}, 
    {"setRotation", _wrap_CameraSteeringEntity_setRotation}, 
    {"lookAt", _wrap_CameraSteeringEntity_lookAt}, 
    {"getWorldTransform", _wrap_CameraSteeringEntity_getWorldTransform}, 
    {"setWorldTransform", _wrap_CameraSteeringEntity_setWorldTransform}, 
    {0,0}
};
static swig_lua_attribute swig_CameraSteeringEntity_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_CameraSteeringEntity_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CameraSteeringEntity_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CameraSteeringEntity_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CameraSteeringEntity_bases[] = {0,0,0};
static const char *swig_CameraSteeringEntity_base_names[] = {"BaseCamera *","SteeringEntity *",0};
static swig_lua_class _wrap_class_CameraSteeringEntity = { "CameraSteeringEntity", &SWIGTYPE_p_CameraSteeringEntity,0,0, swig_CameraSteeringEntity_methods, swig_CameraSteeringEntity_attributes, { "CameraSteeringEntity", swig_CameraSteeringEntity_cls_methods, swig_CameraSteeringEntity_cls_attributes, swig_CameraSteeringEntity_cls_constants }, swig_CameraSteeringEntity_bases, swig_CameraSteeringEntity_base_names };

static int _wrap_BaseEntityInfo_m_ViewObjectID_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityInfo *arg1 = (BaseEntityInfo *) 0 ;
  IDType arg2 ;
  
  SWIG_check_num_args("BaseEntityInfo::m_ViewObjectID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityInfo::m_ViewObjectID",1,"BaseEntityInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseEntityInfo::m_ViewObjectID",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityInfo,0))){
    SWIG_fail_ptr("BaseEntityInfo_m_ViewObjectID_set",1,SWIGTYPE_p_BaseEntityInfo);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_ViewObjectID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntityInfo_m_ViewObjectID_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityInfo *arg1 = (BaseEntityInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("BaseEntityInfo::m_ViewObjectID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityInfo::m_ViewObjectID",1,"BaseEntityInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityInfo,0))){
    SWIG_fail_ptr("BaseEntityInfo_m_ViewObjectID_get",1,SWIGTYPE_p_BaseEntityInfo);
  }
  
  result = (IDType) ((arg1)->m_ViewObjectID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntityInfo_m_StateMachineFactoryID_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityInfo *arg1 = (BaseEntityInfo *) 0 ;
  IDType arg2 ;
  
  SWIG_check_num_args("BaseEntityInfo::m_StateMachineFactoryID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityInfo::m_StateMachineFactoryID",1,"BaseEntityInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseEntityInfo::m_StateMachineFactoryID",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityInfo,0))){
    SWIG_fail_ptr("BaseEntityInfo_m_StateMachineFactoryID_set",1,SWIGTYPE_p_BaseEntityInfo);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_StateMachineFactoryID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntityInfo_m_StateMachineFactoryID_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityInfo *arg1 = (BaseEntityInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("BaseEntityInfo::m_StateMachineFactoryID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityInfo::m_StateMachineFactoryID",1,"BaseEntityInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityInfo,0))){
    SWIG_fail_ptr("BaseEntityInfo_m_StateMachineFactoryID_get",1,SWIGTYPE_p_BaseEntityInfo);
  }
  
  result = (IDType) ((arg1)->m_StateMachineFactoryID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntityInfo_m_AnimationFactoryID_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityInfo *arg1 = (BaseEntityInfo *) 0 ;
  IDType arg2 ;
  
  SWIG_check_num_args("BaseEntityInfo::m_AnimationFactoryID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityInfo::m_AnimationFactoryID",1,"BaseEntityInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseEntityInfo::m_AnimationFactoryID",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityInfo,0))){
    SWIG_fail_ptr("BaseEntityInfo_m_AnimationFactoryID_set",1,SWIGTYPE_p_BaseEntityInfo);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_AnimationFactoryID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntityInfo_m_AnimationFactoryID_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityInfo *arg1 = (BaseEntityInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("BaseEntityInfo::m_AnimationFactoryID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityInfo::m_AnimationFactoryID",1,"BaseEntityInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityInfo,0))){
    SWIG_fail_ptr("BaseEntityInfo_m_AnimationFactoryID_get",1,SWIGTYPE_p_BaseEntityInfo);
  }
  
  result = (IDType) ((arg1)->m_AnimationFactoryID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntityInfo_m_EntityType_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityInfo *arg1 = (BaseEntityInfo *) 0 ;
  EntityTypes arg2 ;
  
  SWIG_check_num_args("BaseEntityInfo::m_EntityType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityInfo::m_EntityType",1,"BaseEntityInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseEntityInfo::m_EntityType",2,"EntityTypes");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityInfo,0))){
    SWIG_fail_ptr("BaseEntityInfo_m_EntityType_set",1,SWIGTYPE_p_BaseEntityInfo);
  }
  
  arg2 = (EntityTypes)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_EntityType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntityInfo_m_EntityType_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityInfo *arg1 = (BaseEntityInfo *) 0 ;
  EntityTypes result;
  
  SWIG_check_num_args("BaseEntityInfo::m_EntityType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityInfo::m_EntityType",1,"BaseEntityInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityInfo,0))){
    SWIG_fail_ptr("BaseEntityInfo_m_EntityType_get",1,SWIGTYPE_p_BaseEntityInfo);
  }
  
  result = (EntityTypes) ((arg1)->m_EntityType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntityInfo_m_IsOrthographicEntity_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityInfo *arg1 = (BaseEntityInfo *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("BaseEntityInfo::m_IsOrthographicEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityInfo::m_IsOrthographicEntity",1,"BaseEntityInfo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("BaseEntityInfo::m_IsOrthographicEntity",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityInfo,0))){
    SWIG_fail_ptr("BaseEntityInfo_m_IsOrthographicEntity_set",1,SWIGTYPE_p_BaseEntityInfo);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_IsOrthographicEntity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntityInfo_m_IsOrthographicEntity_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityInfo *arg1 = (BaseEntityInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntityInfo::m_IsOrthographicEntity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityInfo::m_IsOrthographicEntity",1,"BaseEntityInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityInfo,0))){
    SWIG_fail_ptr("BaseEntityInfo_m_IsOrthographicEntity_get",1,SWIGTYPE_p_BaseEntityInfo);
  }
  
  result = (bool) ((arg1)->m_IsOrthographicEntity);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntityInfo_m_drawMode_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityInfo *arg1 = (BaseEntityInfo *) 0 ;
  GLenum arg2 ;
  GLenum *argp2 ;
  
  SWIG_check_num_args("BaseEntityInfo::m_drawMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityInfo::m_drawMode",1,"BaseEntityInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseEntityInfo::m_drawMode",2,"GLenum");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityInfo,0))){
    SWIG_fail_ptr("BaseEntityInfo_m_drawMode_set",1,SWIGTYPE_p_BaseEntityInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("BaseEntityInfo_m_drawMode_set",2,SWIGTYPE_p_GLenum);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->m_drawMode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntityInfo_m_drawMode_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityInfo *arg1 = (BaseEntityInfo *) 0 ;
  GLenum result;
  
  SWIG_check_num_args("BaseEntityInfo::m_drawMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityInfo::m_drawMode",1,"BaseEntityInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityInfo,0))){
    SWIG_fail_ptr("BaseEntityInfo_m_drawMode_get",1,SWIGTYPE_p_BaseEntityInfo);
  }
  
  result =  ((arg1)->m_drawMode);
  {
    GLenum * resultptr = new GLenum((const GLenum &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLenum,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseEntityInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  bool arg4 ;
  GLenum arg5 ;
  GLenum *argp5 ;
  BaseEntityInfo *result = 0 ;
  
  SWIG_check_num_args("BaseEntityInfo::BaseEntityInfo",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseEntityInfo::BaseEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseEntityInfo::BaseEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseEntityInfo::BaseEntityInfo",3,"IDType");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("BaseEntityInfo::BaseEntityInfo",4,"bool");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("BaseEntityInfo::BaseEntityInfo",5,"GLenum");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("new_BaseEntityInfo",5,SWIGTYPE_p_GLenum);
  }
  arg5 = *argp5;
  
  result = (BaseEntityInfo *)new BaseEntityInfo(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseEntityInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  bool arg4 ;
  BaseEntityInfo *result = 0 ;
  
  SWIG_check_num_args("BaseEntityInfo::BaseEntityInfo",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseEntityInfo::BaseEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseEntityInfo::BaseEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseEntityInfo::BaseEntityInfo",3,"IDType");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("BaseEntityInfo::BaseEntityInfo",4,"bool");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (BaseEntityInfo *)new BaseEntityInfo(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseEntityInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  BaseEntityInfo *result = 0 ;
  
  SWIG_check_num_args("BaseEntityInfo::BaseEntityInfo",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseEntityInfo::BaseEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseEntityInfo::BaseEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseEntityInfo::BaseEntityInfo",3,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  result = (BaseEntityInfo *)new BaseEntityInfo(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseEntityInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  BaseEntityInfo *result = 0 ;
  
  SWIG_check_num_args("BaseEntityInfo::BaseEntityInfo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseEntityInfo::BaseEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseEntityInfo::BaseEntityInfo",2,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (BaseEntityInfo *)new BaseEntityInfo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseEntityInfo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  BaseEntityInfo *result = 0 ;
  
  SWIG_check_num_args("BaseEntityInfo::BaseEntityInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseEntityInfo::BaseEntityInfo",1,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  result = (BaseEntityInfo *)new BaseEntityInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseEntityInfo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityInfo *result = 0 ;
  
  SWIG_check_num_args("BaseEntityInfo::BaseEntityInfo",0,0)
  result = (BaseEntityInfo *)new BaseEntityInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseEntityInfo__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityInfo *arg1 = 0 ;
  BaseEntityInfo *result = 0 ;
  
  SWIG_check_num_args("BaseEntityInfo::BaseEntityInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("BaseEntityInfo::BaseEntityInfo",1,"BaseEntityInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityInfo,0))){
    SWIG_fail_ptr("new_BaseEntityInfo",1,SWIGTYPE_p_BaseEntityInfo);
  }
  
  result = (BaseEntityInfo *)new BaseEntityInfo((BaseEntityInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseEntityInfo(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BaseEntityInfo__SWIG_5(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseEntityInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BaseEntityInfo__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BaseEntityInfo__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_BaseEntityInfo__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_BaseEntityInfo__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_BaseEntityInfo__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_new_BaseEntityInfo__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BaseEntityInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    BaseEntityInfo::BaseEntityInfo(IDType,IDType,IDType,bool,GLenum)\n"
    "    BaseEntityInfo::BaseEntityInfo(IDType,IDType,IDType,bool)\n"
    "    BaseEntityInfo::BaseEntityInfo(IDType,IDType,IDType)\n"
    "    BaseEntityInfo::BaseEntityInfo(IDType,IDType)\n"
    "    BaseEntityInfo::BaseEntityInfo(IDType)\n"
    "    BaseEntityInfo::BaseEntityInfo()\n"
    "    BaseEntityInfo::BaseEntityInfo(BaseEntityInfo const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_BaseEntityInfo(void *obj) {
BaseEntityInfo *arg1 = (BaseEntityInfo *) obj;
delete arg1;
}
static swig_lua_method swig_BaseEntityInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_BaseEntityInfo_attributes[] = {
    { "m_ViewObjectID", _wrap_BaseEntityInfo_m_ViewObjectID_get, _wrap_BaseEntityInfo_m_ViewObjectID_set},
    { "m_StateMachineFactoryID", _wrap_BaseEntityInfo_m_StateMachineFactoryID_get, _wrap_BaseEntityInfo_m_StateMachineFactoryID_set},
    { "m_AnimationFactoryID", _wrap_BaseEntityInfo_m_AnimationFactoryID_get, _wrap_BaseEntityInfo_m_AnimationFactoryID_set},
    { "m_EntityType", _wrap_BaseEntityInfo_m_EntityType_get, _wrap_BaseEntityInfo_m_EntityType_set},
    { "m_IsOrthographicEntity", _wrap_BaseEntityInfo_m_IsOrthographicEntity_get, _wrap_BaseEntityInfo_m_IsOrthographicEntity_set},
    { "m_drawMode", _wrap_BaseEntityInfo_m_drawMode_get, _wrap_BaseEntityInfo_m_drawMode_set},
    {0,0,0}
};
static swig_lua_attribute swig_BaseEntityInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BaseEntityInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BaseEntityInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BaseEntityInfo_bases[] = {0};
static const char *swig_BaseEntityInfo_base_names[] = {0};
static swig_lua_class _wrap_class_BaseEntityInfo = { "BaseEntityInfo", &SWIGTYPE_p_BaseEntityInfo,_wrap_new_BaseEntityInfo, swig_delete_BaseEntityInfo, swig_BaseEntityInfo_methods, swig_BaseEntityInfo_attributes, { "BaseEntityInfo", swig_BaseEntityInfo_cls_methods, swig_BaseEntityInfo_cls_attributes, swig_BaseEntityInfo_cls_constants }, swig_BaseEntityInfo_bases, swig_BaseEntityInfo_base_names };

static int _wrap_RigidEntityInfo_m_collisionShapeFactoryID_set(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntityInfo *arg1 = (RigidEntityInfo *) 0 ;
  IDType arg2 ;
  
  SWIG_check_num_args("RigidEntityInfo::m_collisionShapeFactoryID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntityInfo::m_collisionShapeFactoryID",1,"RigidEntityInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RigidEntityInfo::m_collisionShapeFactoryID",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntityInfo,0))){
    SWIG_fail_ptr("RigidEntityInfo_m_collisionShapeFactoryID_set",1,SWIGTYPE_p_RigidEntityInfo);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_collisionShapeFactoryID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntityInfo_m_collisionShapeFactoryID_get(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntityInfo *arg1 = (RigidEntityInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("RigidEntityInfo::m_collisionShapeFactoryID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntityInfo::m_collisionShapeFactoryID",1,"RigidEntityInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntityInfo,0))){
    SWIG_fail_ptr("RigidEntityInfo_m_collisionShapeFactoryID_get",1,SWIGTYPE_p_RigidEntityInfo);
  }
  
  result = (IDType) ((arg1)->m_collisionShapeFactoryID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntityInfo_m_mass_set(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntityInfo *arg1 = (RigidEntityInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("RigidEntityInfo::m_mass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntityInfo::m_mass",1,"RigidEntityInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RigidEntityInfo::m_mass",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntityInfo,0))){
    SWIG_fail_ptr("RigidEntityInfo_m_mass_set",1,SWIGTYPE_p_RigidEntityInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_mass = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidEntityInfo_m_mass_get(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntityInfo *arg1 = (RigidEntityInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("RigidEntityInfo::m_mass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RigidEntityInfo::m_mass",1,"RigidEntityInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntityInfo,0))){
    SWIG_fail_ptr("RigidEntityInfo_m_mass_get",1,SWIGTYPE_p_RigidEntityInfo);
  }
  
  result = (btScalar) ((arg1)->m_mass);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RigidEntityInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  bool arg4 ;
  IDType arg5 ;
  btScalar arg6 ;
  RigidEntityInfo *result = 0 ;
  
  SWIG_check_num_args("RigidEntityInfo::RigidEntityInfo",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",3,"IDType");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",5,"IDType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",6,"btScalar");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (IDType)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  result = (RigidEntityInfo *)new RigidEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RigidEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RigidEntityInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  bool arg4 ;
  IDType arg5 ;
  RigidEntityInfo *result = 0 ;
  
  SWIG_check_num_args("RigidEntityInfo::RigidEntityInfo",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",3,"IDType");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",5,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (IDType)lua_tonumber(L, 5);
  result = (RigidEntityInfo *)new RigidEntityInfo(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RigidEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RigidEntityInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  bool arg4 ;
  RigidEntityInfo *result = 0 ;
  
  SWIG_check_num_args("RigidEntityInfo::RigidEntityInfo",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",3,"IDType");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",4,"bool");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (RigidEntityInfo *)new RigidEntityInfo(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RigidEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RigidEntityInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  RigidEntityInfo *result = 0 ;
  
  SWIG_check_num_args("RigidEntityInfo::RigidEntityInfo",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",3,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  result = (RigidEntityInfo *)new RigidEntityInfo(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RigidEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RigidEntityInfo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  RigidEntityInfo *result = 0 ;
  
  SWIG_check_num_args("RigidEntityInfo::RigidEntityInfo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",2,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (RigidEntityInfo *)new RigidEntityInfo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RigidEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RigidEntityInfo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  RigidEntityInfo *result = 0 ;
  
  SWIG_check_num_args("RigidEntityInfo::RigidEntityInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",1,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  result = (RigidEntityInfo *)new RigidEntityInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RigidEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RigidEntityInfo__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntityInfo *result = 0 ;
  
  SWIG_check_num_args("RigidEntityInfo::RigidEntityInfo",0,0)
  result = (RigidEntityInfo *)new RigidEntityInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RigidEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RigidEntityInfo__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  RigidEntityInfo *arg1 = 0 ;
  RigidEntityInfo *result = 0 ;
  
  SWIG_check_num_args("RigidEntityInfo::RigidEntityInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RigidEntityInfo::RigidEntityInfo",1,"RigidEntityInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RigidEntityInfo,0))){
    SWIG_fail_ptr("new_RigidEntityInfo",1,SWIGTYPE_p_RigidEntityInfo);
  }
  
  result = (RigidEntityInfo *)new RigidEntityInfo((RigidEntityInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RigidEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RigidEntityInfo(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RigidEntityInfo__SWIG_6(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RigidEntityInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RigidEntityInfo__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RigidEntityInfo__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RigidEntityInfo__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_RigidEntityInfo__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_RigidEntityInfo__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_RigidEntityInfo__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_RigidEntityInfo__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RigidEntityInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RigidEntityInfo::RigidEntityInfo(IDType,IDType,IDType,bool,IDType,btScalar)\n"
    "    RigidEntityInfo::RigidEntityInfo(IDType,IDType,IDType,bool,IDType)\n"
    "    RigidEntityInfo::RigidEntityInfo(IDType,IDType,IDType,bool)\n"
    "    RigidEntityInfo::RigidEntityInfo(IDType,IDType,IDType)\n"
    "    RigidEntityInfo::RigidEntityInfo(IDType,IDType)\n"
    "    RigidEntityInfo::RigidEntityInfo(IDType)\n"
    "    RigidEntityInfo::RigidEntityInfo()\n"
    "    RigidEntityInfo::RigidEntityInfo(RigidEntityInfo const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_RigidEntityInfo(void *obj) {
RigidEntityInfo *arg1 = (RigidEntityInfo *) obj;
delete arg1;
}
static swig_lua_method swig_RigidEntityInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_RigidEntityInfo_attributes[] = {
    { "m_collisionShapeFactoryID", _wrap_RigidEntityInfo_m_collisionShapeFactoryID_get, _wrap_RigidEntityInfo_m_collisionShapeFactoryID_set},
    { "m_mass", _wrap_RigidEntityInfo_m_mass_get, _wrap_RigidEntityInfo_m_mass_set},
    {0,0,0}
};
static swig_lua_attribute swig_RigidEntityInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RigidEntityInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_RigidEntityInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_RigidEntityInfo_bases[] = {0,0};
static const char *swig_RigidEntityInfo_base_names[] = {"BaseEntityInfo *",0};
static swig_lua_class _wrap_class_RigidEntityInfo = { "RigidEntityInfo", &SWIGTYPE_p_RigidEntityInfo,_wrap_new_RigidEntityInfo, swig_delete_RigidEntityInfo, swig_RigidEntityInfo_methods, swig_RigidEntityInfo_attributes, { "RigidEntityInfo", swig_RigidEntityInfo_cls_methods, swig_RigidEntityInfo_cls_attributes, swig_RigidEntityInfo_cls_constants }, swig_RigidEntityInfo_bases, swig_RigidEntityInfo_base_names };

static int _wrap_SoftEntityInfo_m_mass_set(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntityInfo *arg1 = (SoftEntityInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("SoftEntityInfo::m_mass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntityInfo::m_mass",1,"SoftEntityInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoftEntityInfo::m_mass",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntityInfo,0))){
    SWIG_fail_ptr("SoftEntityInfo_m_mass_set",1,SWIGTYPE_p_SoftEntityInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_mass = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftEntityInfo_m_mass_get(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntityInfo *arg1 = (SoftEntityInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("SoftEntityInfo::m_mass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoftEntityInfo::m_mass",1,"SoftEntityInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoftEntityInfo,0))){
    SWIG_fail_ptr("SoftEntityInfo_m_mass_get",1,SWIGTYPE_p_SoftEntityInfo);
  }
  
  result = (btScalar) ((arg1)->m_mass);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoftEntityInfo(lua_State* L) {
  int SWIG_arg = 0;
  SoftEntityInfo *result = 0 ;
  
  SWIG_check_num_args("SoftEntityInfo::SoftEntityInfo",0,0)
  result = (SoftEntityInfo *)new SoftEntityInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoftEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SoftEntityInfo(void *obj) {
SoftEntityInfo *arg1 = (SoftEntityInfo *) obj;
delete arg1;
}
static swig_lua_method swig_SoftEntityInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_SoftEntityInfo_attributes[] = {
    { "m_mass", _wrap_SoftEntityInfo_m_mass_get, _wrap_SoftEntityInfo_m_mass_set},
    {0,0,0}
};
static swig_lua_attribute swig_SoftEntityInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SoftEntityInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_SoftEntityInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_SoftEntityInfo_bases[] = {0,0};
static const char *swig_SoftEntityInfo_base_names[] = {"BaseEntityInfo *",0};
static swig_lua_class _wrap_class_SoftEntityInfo = { "SoftEntityInfo", &SWIGTYPE_p_SoftEntityInfo,_wrap_new_SoftEntityInfo, swig_delete_SoftEntityInfo, swig_SoftEntityInfo_methods, swig_SoftEntityInfo_attributes, { "SoftEntityInfo", swig_SoftEntityInfo_cls_methods, swig_SoftEntityInfo_cls_attributes, swig_SoftEntityInfo_cls_constants }, swig_SoftEntityInfo_bases, swig_SoftEntityInfo_base_names };

static int _wrap_new_FollowPathInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  FollowPathInfo *result = 0 ;
  
  SWIG_check_num_args("FollowPathInfo::FollowPathInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FollowPathInfo::FollowPathInfo",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (FollowPathInfo *)new FollowPathInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FollowPathInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FollowPathInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FollowPathInfo *result = 0 ;
  
  SWIG_check_num_args("FollowPathInfo::FollowPathInfo",0,0)
  result = (FollowPathInfo *)new FollowPathInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FollowPathInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FollowPathInfo(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FollowPathInfo__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FollowPathInfo__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FollowPathInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FollowPathInfo::FollowPathInfo(float)\n"
    "    FollowPathInfo::FollowPathInfo()\n");
  lua_error(L);return 0;
}


static int _wrap_FollowPathInfo_setWayPointSeekDistance(lua_State* L) {
  int SWIG_arg = 0;
  FollowPathInfo *arg1 = (FollowPathInfo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("FollowPathInfo::setWayPointSeekDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FollowPathInfo::setWayPointSeekDistance",1,"FollowPathInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FollowPathInfo::setWayPointSeekDistance",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FollowPathInfo,0))){
    SWIG_fail_ptr("FollowPathInfo_setWayPointSeekDistance",1,SWIGTYPE_p_FollowPathInfo);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setWayPointSeekDistance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FollowPathInfo_getWayPointSeekDistanceSquared(lua_State* L) {
  int SWIG_arg = 0;
  FollowPathInfo *arg1 = (FollowPathInfo *) 0 ;
  float result;
  
  SWIG_check_num_args("FollowPathInfo::getWayPointSeekDistanceSquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FollowPathInfo::getWayPointSeekDistanceSquared",1,"FollowPathInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FollowPathInfo,0))){
    SWIG_fail_ptr("FollowPathInfo_getWayPointSeekDistanceSquared",1,SWIGTYPE_p_FollowPathInfo);
  }
  
  result = (float)((FollowPathInfo const *)arg1)->getWayPointSeekDistanceSquared();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FollowPathInfo(void *obj) {
FollowPathInfo *arg1 = (FollowPathInfo *) obj;
delete arg1;
}
static swig_lua_method swig_FollowPathInfo_methods[] = {
    {"setWayPointSeekDistance", _wrap_FollowPathInfo_setWayPointSeekDistance}, 
    {"getWayPointSeekDistanceSquared", _wrap_FollowPathInfo_getWayPointSeekDistanceSquared}, 
    {0,0}
};
static swig_lua_attribute swig_FollowPathInfo_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_FollowPathInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FollowPathInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_FollowPathInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_FollowPathInfo_bases[] = {0};
static const char *swig_FollowPathInfo_base_names[] = {0};
static swig_lua_class _wrap_class_FollowPathInfo = { "FollowPathInfo", &SWIGTYPE_p_FollowPathInfo,_wrap_new_FollowPathInfo, swig_delete_FollowPathInfo, swig_FollowPathInfo_methods, swig_FollowPathInfo_attributes, { "FollowPathInfo", swig_FollowPathInfo_cls_methods, swig_FollowPathInfo_cls_attributes, swig_FollowPathInfo_cls_constants }, swig_FollowPathInfo_bases, swig_FollowPathInfo_base_names };

static int _wrap_new_WanderInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btVector3 arg3 ;
  btScalar arg4 ;
  btVector3 *argp3 ;
  WanderInfo *result = 0 ;
  
  SWIG_check_num_args("WanderInfo::WanderInfo",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WanderInfo::WanderInfo",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("WanderInfo::WanderInfo",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("WanderInfo::WanderInfo",3,"btVector3");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("WanderInfo::WanderInfo",4,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_WanderInfo",3,SWIGTYPE_p_btVector3);
  }
  arg3 = *argp3;
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  result = (WanderInfo *)new WanderInfo(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WanderInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WanderInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btVector3 arg3 ;
  btVector3 *argp3 ;
  WanderInfo *result = 0 ;
  
  SWIG_check_num_args("WanderInfo::WanderInfo",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WanderInfo::WanderInfo",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("WanderInfo::WanderInfo",2,"btScalar");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("WanderInfo::WanderInfo",3,"btVector3");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_WanderInfo",3,SWIGTYPE_p_btVector3);
  }
  arg3 = *argp3;
  
  result = (WanderInfo *)new WanderInfo(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WanderInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WanderInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  WanderInfo *result = 0 ;
  
  SWIG_check_num_args("WanderInfo::WanderInfo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WanderInfo::WanderInfo",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("WanderInfo::WanderInfo",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (WanderInfo *)new WanderInfo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WanderInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WanderInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  WanderInfo *result = 0 ;
  
  SWIG_check_num_args("WanderInfo::WanderInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WanderInfo::WanderInfo",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (WanderInfo *)new WanderInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WanderInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WanderInfo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  WanderInfo *result = 0 ;
  
  SWIG_check_num_args("WanderInfo::WanderInfo",0,0)
  result = (WanderInfo *)new WanderInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WanderInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WanderInfo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  WanderInfo *arg1 = 0 ;
  WanderInfo *result = 0 ;
  
  SWIG_check_num_args("WanderInfo::WanderInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WanderInfo::WanderInfo",1,"WanderInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("new_WanderInfo",1,SWIGTYPE_p_WanderInfo);
  }
  
  result = (WanderInfo *)new WanderInfo((WanderInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WanderInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WanderInfo(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_WanderInfo__SWIG_4(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_WanderInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_WanderInfo__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_WanderInfo__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_WanderInfo__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_WanderInfo__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_WanderInfo__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_WanderInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    WanderInfo::WanderInfo(btScalar,btScalar,btVector3,btScalar)\n"
    "    WanderInfo::WanderInfo(btScalar,btScalar,btVector3)\n"
    "    WanderInfo::WanderInfo(btScalar,btScalar)\n"
    "    WanderInfo::WanderInfo(btScalar)\n"
    "    WanderInfo::WanderInfo()\n"
    "    WanderInfo::WanderInfo(WanderInfo const &)\n");
  lua_error(L);return 0;
}


static int _wrap_WanderInfo_rotateTarget(lua_State* L) {
  int SWIG_arg = 0;
  WanderInfo *arg1 = (WanderInfo *) 0 ;
  
  SWIG_check_num_args("WanderInfo::rotateTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WanderInfo::rotateTarget",1,"WanderInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("WanderInfo_rotateTarget",1,SWIGTYPE_p_WanderInfo);
  }
  
  (arg1)->rotateTarget();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WanderInfo_getTarget(lua_State* L) {
  int SWIG_arg = 0;
  WanderInfo *arg1 = (WanderInfo *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("WanderInfo::getTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WanderInfo::getTarget",1,"WanderInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("WanderInfo_getTarget",1,SWIGTYPE_p_WanderInfo);
  }
  
  result = (btVector3 *) &((WanderInfo const *)arg1)->getTarget();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WanderInfo_setJitter(lua_State* L) {
  int SWIG_arg = 0;
  WanderInfo *arg1 = (WanderInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("WanderInfo::setJitter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WanderInfo::setJitter",1,"WanderInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("WanderInfo::setJitter",2,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("WanderInfo_setJitter",1,SWIGTYPE_p_WanderInfo);
  }
  
  arg2 = (btScalar const)lua_tonumber(L, 2);
  (arg1)->setJitter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WanderInfo_setRadius(lua_State* L) {
  int SWIG_arg = 0;
  WanderInfo *arg1 = (WanderInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("WanderInfo::setRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WanderInfo::setRadius",1,"WanderInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("WanderInfo::setRadius",2,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("WanderInfo_setRadius",1,SWIGTYPE_p_WanderInfo);
  }
  
  arg2 = (btScalar const)lua_tonumber(L, 2);
  (arg1)->setRadius(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WanderInfo_getRadius(lua_State* L) {
  int SWIG_arg = 0;
  WanderInfo *arg1 = (WanderInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("WanderInfo::getRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WanderInfo::getRadius",1,"WanderInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("WanderInfo_getRadius",1,SWIGTYPE_p_WanderInfo);
  }
  
  result = (btScalar)(arg1)->getRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WanderInfo_setDistance(lua_State* L) {
  int SWIG_arg = 0;
  WanderInfo *arg1 = (WanderInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("WanderInfo::setDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WanderInfo::setDistance",1,"WanderInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("WanderInfo::setDistance",2,"btScalar const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("WanderInfo_setDistance",1,SWIGTYPE_p_WanderInfo);
  }
  
  arg2 = (btScalar const)lua_tonumber(L, 2);
  (arg1)->setDistance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WanderInfo_getDistance(lua_State* L) {
  int SWIG_arg = 0;
  WanderInfo *arg1 = (WanderInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("WanderInfo::getDistance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WanderInfo::getDistance",1,"WanderInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("WanderInfo_getDistance",1,SWIGTYPE_p_WanderInfo);
  }
  
  result = (btScalar)((WanderInfo const *)arg1)->getDistance();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WanderInfo(void *obj) {
WanderInfo *arg1 = (WanderInfo *) obj;
delete arg1;
}
static swig_lua_method swig_WanderInfo_methods[] = {
    {"rotateTarget", _wrap_WanderInfo_rotateTarget}, 
    {"getTarget", _wrap_WanderInfo_getTarget}, 
    {"setJitter", _wrap_WanderInfo_setJitter}, 
    {"setRadius", _wrap_WanderInfo_setRadius}, 
    {"getRadius", _wrap_WanderInfo_getRadius}, 
    {"setDistance", _wrap_WanderInfo_setDistance}, 
    {"getDistance", _wrap_WanderInfo_getDistance}, 
    {0,0}
};
static swig_lua_attribute swig_WanderInfo_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_WanderInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WanderInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_WanderInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_WanderInfo_bases[] = {0};
static const char *swig_WanderInfo_base_names[] = {0};
static swig_lua_class _wrap_class_WanderInfo = { "WanderInfo", &SWIGTYPE_p_WanderInfo,_wrap_new_WanderInfo, swig_delete_WanderInfo, swig_WanderInfo_methods, swig_WanderInfo_attributes, { "WanderInfo", swig_WanderInfo_cls_methods, swig_WanderInfo_cls_attributes, swig_WanderInfo_cls_constants }, swig_WanderInfo_bases, swig_WanderInfo_base_names };

static int _wrap_SteeringEntityInfo_m_steeringBehaviorFactoryID_set(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntityInfo *arg1 = (SteeringEntityInfo *) 0 ;
  IDType arg2 ;
  
  SWIG_check_num_args("SteeringEntityInfo::m_steeringBehaviorFactoryID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntityInfo::m_steeringBehaviorFactoryID",1,"SteeringEntityInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SteeringEntityInfo::m_steeringBehaviorFactoryID",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntityInfo,0))){
    SWIG_fail_ptr("SteeringEntityInfo_m_steeringBehaviorFactoryID_set",1,SWIGTYPE_p_SteeringEntityInfo);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_steeringBehaviorFactoryID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntityInfo_m_steeringBehaviorFactoryID_get(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntityInfo *arg1 = (SteeringEntityInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("SteeringEntityInfo::m_steeringBehaviorFactoryID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntityInfo::m_steeringBehaviorFactoryID",1,"SteeringEntityInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntityInfo,0))){
    SWIG_fail_ptr("SteeringEntityInfo_m_steeringBehaviorFactoryID_get",1,SWIGTYPE_p_SteeringEntityInfo);
  }
  
  result = (IDType) ((arg1)->m_steeringBehaviorFactoryID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntityInfo_m_WanderInfo_set(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntityInfo *arg1 = (SteeringEntityInfo *) 0 ;
  WanderInfo *arg2 = (WanderInfo *) 0 ;
  
  SWIG_check_num_args("SteeringEntityInfo::m_WanderInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntityInfo::m_WanderInfo",1,"SteeringEntityInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SteeringEntityInfo::m_WanderInfo",2,"WanderInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntityInfo,0))){
    SWIG_fail_ptr("SteeringEntityInfo_m_WanderInfo_set",1,SWIGTYPE_p_SteeringEntityInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("SteeringEntityInfo_m_WanderInfo_set",2,SWIGTYPE_p_WanderInfo);
  }
  
  if (arg1) (arg1)->m_WanderInfo = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntityInfo_m_WanderInfo_get(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntityInfo *arg1 = (SteeringEntityInfo *) 0 ;
  WanderInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringEntityInfo::m_WanderInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntityInfo::m_WanderInfo",1,"SteeringEntityInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntityInfo,0))){
    SWIG_fail_ptr("SteeringEntityInfo_m_WanderInfo_get",1,SWIGTYPE_p_SteeringEntityInfo);
  }
  
  result = (WanderInfo *)& ((arg1)->m_WanderInfo);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WanderInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntityInfo_m_FollowPathInfo_set(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntityInfo *arg1 = (SteeringEntityInfo *) 0 ;
  FollowPathInfo *arg2 = (FollowPathInfo *) 0 ;
  
  SWIG_check_num_args("SteeringEntityInfo::m_FollowPathInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntityInfo::m_FollowPathInfo",1,"SteeringEntityInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SteeringEntityInfo::m_FollowPathInfo",2,"FollowPathInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntityInfo,0))){
    SWIG_fail_ptr("SteeringEntityInfo_m_FollowPathInfo_set",1,SWIGTYPE_p_SteeringEntityInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FollowPathInfo,0))){
    SWIG_fail_ptr("SteeringEntityInfo_m_FollowPathInfo_set",2,SWIGTYPE_p_FollowPathInfo);
  }
  
  if (arg1) (arg1)->m_FollowPathInfo = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringEntityInfo_m_FollowPathInfo_get(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntityInfo *arg1 = (SteeringEntityInfo *) 0 ;
  FollowPathInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringEntityInfo::m_FollowPathInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringEntityInfo::m_FollowPathInfo",1,"SteeringEntityInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntityInfo,0))){
    SWIG_fail_ptr("SteeringEntityInfo_m_FollowPathInfo_get",1,SWIGTYPE_p_SteeringEntityInfo);
  }
  
  result = (FollowPathInfo *)& ((arg1)->m_FollowPathInfo);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FollowPathInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SteeringEntityInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  bool arg4 ;
  IDType arg5 ;
  btScalar arg6 ;
  IDType arg7 ;
  WanderInfo *arg8 = 0 ;
  FollowPathInfo *arg9 = 0 ;
  SteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringEntityInfo::SteeringEntityInfo",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",3,"IDType");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",5,"IDType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",7,"IDType");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",8,"WanderInfo const &");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",9,"FollowPathInfo const &");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (IDType)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (IDType)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("new_SteeringEntityInfo",8,SWIGTYPE_p_WanderInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_FollowPathInfo,0))){
    SWIG_fail_ptr("new_SteeringEntityInfo",9,SWIGTYPE_p_FollowPathInfo);
  }
  
  result = (SteeringEntityInfo *)new SteeringEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(WanderInfo const &)*arg8,(FollowPathInfo const &)*arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SteeringEntityInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  bool arg4 ;
  IDType arg5 ;
  btScalar arg6 ;
  IDType arg7 ;
  WanderInfo *arg8 = 0 ;
  SteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringEntityInfo::SteeringEntityInfo",8,8)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",3,"IDType");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",5,"IDType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",7,"IDType");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",8,"WanderInfo const &");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (IDType)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (IDType)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("new_SteeringEntityInfo",8,SWIGTYPE_p_WanderInfo);
  }
  
  result = (SteeringEntityInfo *)new SteeringEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(WanderInfo const &)*arg8);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SteeringEntityInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  bool arg4 ;
  IDType arg5 ;
  btScalar arg6 ;
  IDType arg7 ;
  SteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringEntityInfo::SteeringEntityInfo",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",3,"IDType");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",5,"IDType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",7,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (IDType)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (IDType)lua_tonumber(L, 7);
  result = (SteeringEntityInfo *)new SteeringEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SteeringEntityInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  bool arg4 ;
  IDType arg5 ;
  btScalar arg6 ;
  SteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringEntityInfo::SteeringEntityInfo",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",3,"IDType");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",5,"IDType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",6,"btScalar");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (IDType)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  result = (SteeringEntityInfo *)new SteeringEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SteeringEntityInfo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  bool arg4 ;
  IDType arg5 ;
  SteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringEntityInfo::SteeringEntityInfo",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",3,"IDType");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",5,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (IDType)lua_tonumber(L, 5);
  result = (SteeringEntityInfo *)new SteeringEntityInfo(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SteeringEntityInfo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  bool arg4 ;
  SteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringEntityInfo::SteeringEntityInfo",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",3,"IDType");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",4,"bool");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (SteeringEntityInfo *)new SteeringEntityInfo(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SteeringEntityInfo__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  SteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringEntityInfo::SteeringEntityInfo",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",3,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  result = (SteeringEntityInfo *)new SteeringEntityInfo(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SteeringEntityInfo__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  SteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringEntityInfo::SteeringEntityInfo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",2,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (SteeringEntityInfo *)new SteeringEntityInfo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SteeringEntityInfo__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  SteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringEntityInfo::SteeringEntityInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",1,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  result = (SteeringEntityInfo *)new SteeringEntityInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SteeringEntityInfo__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringEntityInfo::SteeringEntityInfo",0,0)
  result = (SteeringEntityInfo *)new SteeringEntityInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SteeringEntityInfo__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  SteeringEntityInfo *arg1 = 0 ;
  SteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringEntityInfo::SteeringEntityInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SteeringEntityInfo::SteeringEntityInfo",1,"SteeringEntityInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringEntityInfo,0))){
    SWIG_fail_ptr("new_SteeringEntityInfo",1,SWIGTYPE_p_SteeringEntityInfo);
  }
  
  result = (SteeringEntityInfo *)new SteeringEntityInfo((SteeringEntityInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SteeringEntityInfo(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SteeringEntityInfo__SWIG_9(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SteeringEntityInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SteeringEntityInfo__SWIG_10(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SteeringEntityInfo__SWIG_8(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_SteeringEntityInfo__SWIG_7(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_SteeringEntityInfo__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SteeringEntityInfo__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_SteeringEntityInfo__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_SteeringEntityInfo__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_new_SteeringEntityInfo__SWIG_2(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_WanderInfo, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_new_SteeringEntityInfo__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_WanderInfo, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_FollowPathInfo, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      return _wrap_new_SteeringEntityInfo__SWIG_0(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SteeringEntityInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SteeringEntityInfo::SteeringEntityInfo(IDType,IDType,IDType,bool,IDType,btScalar,IDType,WanderInfo const &,FollowPathInfo const &)\n"
    "    SteeringEntityInfo::SteeringEntityInfo(IDType,IDType,IDType,bool,IDType,btScalar,IDType,WanderInfo const &)\n"
    "    SteeringEntityInfo::SteeringEntityInfo(IDType,IDType,IDType,bool,IDType,btScalar,IDType)\n"
    "    SteeringEntityInfo::SteeringEntityInfo(IDType,IDType,IDType,bool,IDType,btScalar)\n"
    "    SteeringEntityInfo::SteeringEntityInfo(IDType,IDType,IDType,bool,IDType)\n"
    "    SteeringEntityInfo::SteeringEntityInfo(IDType,IDType,IDType,bool)\n"
    "    SteeringEntityInfo::SteeringEntityInfo(IDType,IDType,IDType)\n"
    "    SteeringEntityInfo::SteeringEntityInfo(IDType,IDType)\n"
    "    SteeringEntityInfo::SteeringEntityInfo(IDType)\n"
    "    SteeringEntityInfo::SteeringEntityInfo()\n"
    "    SteeringEntityInfo::SteeringEntityInfo(SteeringEntityInfo const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_SteeringEntityInfo(void *obj) {
SteeringEntityInfo *arg1 = (SteeringEntityInfo *) obj;
delete arg1;
}
static swig_lua_method swig_SteeringEntityInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_SteeringEntityInfo_attributes[] = {
    { "m_steeringBehaviorFactoryID", _wrap_SteeringEntityInfo_m_steeringBehaviorFactoryID_get, _wrap_SteeringEntityInfo_m_steeringBehaviorFactoryID_set},
    { "m_WanderInfo", _wrap_SteeringEntityInfo_m_WanderInfo_get, _wrap_SteeringEntityInfo_m_WanderInfo_set},
    { "m_FollowPathInfo", _wrap_SteeringEntityInfo_m_FollowPathInfo_get, _wrap_SteeringEntityInfo_m_FollowPathInfo_set},
    {0,0,0}
};
static swig_lua_attribute swig_SteeringEntityInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SteeringEntityInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_SteeringEntityInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_SteeringEntityInfo_bases[] = {0,0};
static const char *swig_SteeringEntityInfo_base_names[] = {"RigidEntityInfo *",0};
static swig_lua_class _wrap_class_SteeringEntityInfo = { "SteeringEntityInfo", &SWIGTYPE_p_SteeringEntityInfo,_wrap_new_SteeringEntityInfo, swig_delete_SteeringEntityInfo, swig_SteeringEntityInfo_methods, swig_SteeringEntityInfo_attributes, { "SteeringEntityInfo", swig_SteeringEntityInfo_cls_methods, swig_SteeringEntityInfo_cls_attributes, swig_SteeringEntityInfo_cls_constants }, swig_SteeringEntityInfo_bases, swig_SteeringEntityInfo_base_names };

static int _wrap_GhostEntityInfo_m_collisionShapeFactoryID_set(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntityInfo *arg1 = (GhostEntityInfo *) 0 ;
  IDType arg2 ;
  
  SWIG_check_num_args("GhostEntityInfo::m_collisionShapeFactoryID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntityInfo::m_collisionShapeFactoryID",1,"GhostEntityInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GhostEntityInfo::m_collisionShapeFactoryID",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntityInfo,0))){
    SWIG_fail_ptr("GhostEntityInfo_m_collisionShapeFactoryID_set",1,SWIGTYPE_p_GhostEntityInfo);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_collisionShapeFactoryID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostEntityInfo_m_collisionShapeFactoryID_get(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntityInfo *arg1 = (GhostEntityInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("GhostEntityInfo::m_collisionShapeFactoryID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GhostEntityInfo::m_collisionShapeFactoryID",1,"GhostEntityInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntityInfo,0))){
    SWIG_fail_ptr("GhostEntityInfo_m_collisionShapeFactoryID_get",1,SWIGTYPE_p_GhostEntityInfo);
  }
  
  result = (IDType) ((arg1)->m_collisionShapeFactoryID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GhostEntityInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  bool arg4 ;
  IDType arg5 ;
  GhostEntityInfo *result = 0 ;
  
  SWIG_check_num_args("GhostEntityInfo::GhostEntityInfo",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GhostEntityInfo::GhostEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GhostEntityInfo::GhostEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GhostEntityInfo::GhostEntityInfo",3,"IDType");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("GhostEntityInfo::GhostEntityInfo",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("GhostEntityInfo::GhostEntityInfo",5,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (IDType)lua_tonumber(L, 5);
  result = (GhostEntityInfo *)new GhostEntityInfo(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GhostEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GhostEntityInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  bool arg4 ;
  GhostEntityInfo *result = 0 ;
  
  SWIG_check_num_args("GhostEntityInfo::GhostEntityInfo",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GhostEntityInfo::GhostEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GhostEntityInfo::GhostEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GhostEntityInfo::GhostEntityInfo",3,"IDType");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("GhostEntityInfo::GhostEntityInfo",4,"bool");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (GhostEntityInfo *)new GhostEntityInfo(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GhostEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GhostEntityInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  GhostEntityInfo *result = 0 ;
  
  SWIG_check_num_args("GhostEntityInfo::GhostEntityInfo",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GhostEntityInfo::GhostEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GhostEntityInfo::GhostEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GhostEntityInfo::GhostEntityInfo",3,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  result = (GhostEntityInfo *)new GhostEntityInfo(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GhostEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GhostEntityInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  IDType arg2 ;
  GhostEntityInfo *result = 0 ;
  
  SWIG_check_num_args("GhostEntityInfo::GhostEntityInfo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GhostEntityInfo::GhostEntityInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GhostEntityInfo::GhostEntityInfo",2,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (GhostEntityInfo *)new GhostEntityInfo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GhostEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GhostEntityInfo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  GhostEntityInfo *result = 0 ;
  
  SWIG_check_num_args("GhostEntityInfo::GhostEntityInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GhostEntityInfo::GhostEntityInfo",1,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  result = (GhostEntityInfo *)new GhostEntityInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GhostEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GhostEntityInfo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntityInfo *result = 0 ;
  
  SWIG_check_num_args("GhostEntityInfo::GhostEntityInfo",0,0)
  result = (GhostEntityInfo *)new GhostEntityInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GhostEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GhostEntityInfo__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  GhostEntityInfo *arg1 = 0 ;
  GhostEntityInfo *result = 0 ;
  
  SWIG_check_num_args("GhostEntityInfo::GhostEntityInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("GhostEntityInfo::GhostEntityInfo",1,"GhostEntityInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GhostEntityInfo,0))){
    SWIG_fail_ptr("new_GhostEntityInfo",1,SWIGTYPE_p_GhostEntityInfo);
  }
  
  result = (GhostEntityInfo *)new GhostEntityInfo((GhostEntityInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GhostEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GhostEntityInfo(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_GhostEntityInfo__SWIG_5(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GhostEntityInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_GhostEntityInfo__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_GhostEntityInfo__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_GhostEntityInfo__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_GhostEntityInfo__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_GhostEntityInfo__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_GhostEntityInfo__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_GhostEntityInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GhostEntityInfo::GhostEntityInfo(IDType,IDType,IDType,bool,IDType)\n"
    "    GhostEntityInfo::GhostEntityInfo(IDType,IDType,IDType,bool)\n"
    "    GhostEntityInfo::GhostEntityInfo(IDType,IDType,IDType)\n"
    "    GhostEntityInfo::GhostEntityInfo(IDType,IDType)\n"
    "    GhostEntityInfo::GhostEntityInfo(IDType)\n"
    "    GhostEntityInfo::GhostEntityInfo()\n"
    "    GhostEntityInfo::GhostEntityInfo(GhostEntityInfo const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_GhostEntityInfo(void *obj) {
GhostEntityInfo *arg1 = (GhostEntityInfo *) obj;
delete arg1;
}
static swig_lua_method swig_GhostEntityInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_GhostEntityInfo_attributes[] = {
    { "m_collisionShapeFactoryID", _wrap_GhostEntityInfo_m_collisionShapeFactoryID_get, _wrap_GhostEntityInfo_m_collisionShapeFactoryID_set},
    {0,0,0}
};
static swig_lua_attribute swig_GhostEntityInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GhostEntityInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_GhostEntityInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_GhostEntityInfo_bases[] = {0,0};
static const char *swig_GhostEntityInfo_base_names[] = {"BaseEntityInfo *",0};
static swig_lua_class _wrap_class_GhostEntityInfo = { "GhostEntityInfo", &SWIGTYPE_p_GhostEntityInfo,_wrap_new_GhostEntityInfo, swig_delete_GhostEntityInfo, swig_GhostEntityInfo_methods, swig_GhostEntityInfo_attributes, { "GhostEntityInfo", swig_GhostEntityInfo_cls_methods, swig_GhostEntityInfo_cls_attributes, swig_GhostEntityInfo_cls_constants }, swig_GhostEntityInfo_bases, swig_GhostEntityInfo_base_names };

static int _wrap_EntityFactory_render(lua_State* L) {
  int SWIG_arg = 0;
  EntityFactory *arg1 = (EntityFactory *) 0 ;
  
  SWIG_check_num_args("EntityFactory::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EntityFactory::render",1,"EntityFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EntityFactory,0))){
    SWIG_fail_ptr("EntityFactory_render",1,SWIGTYPE_p_EntityFactory);
  }
  
  (arg1)->render();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_EntityFactory_methods[] = {
    {"render", _wrap_EntityFactory_render}, 
    {0,0}
};
static swig_lua_attribute swig_EntityFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_EntityFactory_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EntityFactory_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_EntityFactory_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_EntityFactory_bases[] = {0,0};
static const char *swig_EntityFactory_base_names[] = {"AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *",0};
static swig_lua_class _wrap_class_EntityFactory = { "EntityFactory", &SWIGTYPE_p_EntityFactory,0,0, swig_EntityFactory_methods, swig_EntityFactory_attributes, { "EntityFactory", swig_EntityFactory_cls_methods, swig_EntityFactory_cls_attributes, swig_EntityFactory_cls_constants }, swig_EntityFactory_bases, swig_EntityFactory_base_names };

static int _wrap_AnimationControllerInfo_m_Type_set(lua_State* L) {
  int SWIG_arg = 0;
  AnimationControllerInfo *arg1 = (AnimationControllerInfo *) 0 ;
  AnimationControllerTypes arg2 ;
  
  SWIG_check_num_args("AnimationControllerInfo::m_Type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnimationControllerInfo::m_Type",1,"AnimationControllerInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnimationControllerInfo::m_Type",2,"AnimationControllerTypes");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnimationControllerInfo,0))){
    SWIG_fail_ptr("AnimationControllerInfo_m_Type_set",1,SWIGTYPE_p_AnimationControllerInfo);
  }
  
  arg2 = (AnimationControllerTypes)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_Type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationControllerInfo_m_Type_get(lua_State* L) {
  int SWIG_arg = 0;
  AnimationControllerInfo *arg1 = (AnimationControllerInfo *) 0 ;
  AnimationControllerTypes result;
  
  SWIG_check_num_args("AnimationControllerInfo::m_Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnimationControllerInfo::m_Type",1,"AnimationControllerInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnimationControllerInfo,0))){
    SWIG_fail_ptr("AnimationControllerInfo_m_Type_get",1,SWIGTYPE_p_AnimationControllerInfo);
  }
  
  result = (AnimationControllerTypes) ((arg1)->m_Type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AnimationControllerInfo(lua_State* L) {
  int SWIG_arg = 0;
  AnimationControllerInfo *result = 0 ;
  
  SWIG_check_num_args("AnimationControllerInfo::AnimationControllerInfo",0,0)
  result = (AnimationControllerInfo *)new AnimationControllerInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AnimationControllerInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationControllerInfo_value(lua_State* L) {
  int SWIG_arg = 0;
  AnimationControllerInfo *arg1 = (AnimationControllerInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("AnimationControllerInfo::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnimationControllerInfo::value",1,"AnimationControllerInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnimationControllerInfo,0))){
    SWIG_fail_ptr("AnimationControllerInfo_value",1,SWIGTYPE_p_AnimationControllerInfo);
  }
  
  result = (int)((AnimationControllerInfo const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationControllerInfo___call(lua_State* L) {
  int SWIG_arg = 0;
  AnimationControllerInfo *arg1 = (AnimationControllerInfo *) 0 ;
  AnimationControllerInfo *arg2 = 0 ;
  AnimationControllerInfo *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("AnimationControllerInfo::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnimationControllerInfo::operator ()",1,"AnimationControllerInfo const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("AnimationControllerInfo::operator ()",2,"AnimationControllerInfo const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("AnimationControllerInfo::operator ()",3,"AnimationControllerInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnimationControllerInfo,0))){
    SWIG_fail_ptr("AnimationControllerInfo___call",1,SWIGTYPE_p_AnimationControllerInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AnimationControllerInfo,0))){
    SWIG_fail_ptr("AnimationControllerInfo___call",2,SWIGTYPE_p_AnimationControllerInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_AnimationControllerInfo,0))){
    SWIG_fail_ptr("AnimationControllerInfo___call",3,SWIGTYPE_p_AnimationControllerInfo);
  }
  
  result = (bool)((AnimationControllerInfo const *)arg1)->operator ()((AnimationControllerInfo const &)*arg2,(AnimationControllerInfo const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AnimationControllerInfo(void *obj) {
AnimationControllerInfo *arg1 = (AnimationControllerInfo *) obj;
delete arg1;
}
static swig_lua_method swig_AnimationControllerInfo_methods[] = {
    {"value", _wrap_AnimationControllerInfo_value}, 
    {"__call", _wrap_AnimationControllerInfo___call}, 
    {0,0}
};
static swig_lua_attribute swig_AnimationControllerInfo_attributes[] = {
    { "m_Type", _wrap_AnimationControllerInfo_m_Type_get, _wrap_AnimationControllerInfo_m_Type_set},
    {0,0,0}
};
static swig_lua_attribute swig_AnimationControllerInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AnimationControllerInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AnimationControllerInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AnimationControllerInfo_bases[] = {0};
static const char *swig_AnimationControllerInfo_base_names[] = {0};
static swig_lua_class _wrap_class_AnimationControllerInfo = { "AnimationControllerInfo", &SWIGTYPE_p_AnimationControllerInfo,_wrap_new_AnimationControllerInfo, swig_delete_AnimationControllerInfo, swig_AnimationControllerInfo_methods, swig_AnimationControllerInfo_attributes, { "AnimationControllerInfo", swig_AnimationControllerInfo_cls_methods, swig_AnimationControllerInfo_cls_attributes, swig_AnimationControllerInfo_cls_constants }, swig_AnimationControllerInfo_bases, swig_AnimationControllerInfo_base_names };

static swig_lua_method swig_AnimationControllerFactory_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_AnimationControllerFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AnimationControllerFactory_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AnimationControllerFactory_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AnimationControllerFactory_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AnimationControllerFactory_bases[] = {0,0};
static const char *swig_AnimationControllerFactory_base_names[] = {"AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *",0};
static swig_lua_class _wrap_class_AnimationControllerFactory = { "AnimationControllerFactory", &SWIGTYPE_p_AnimationControllerFactory,0,0, swig_AnimationControllerFactory_methods, swig_AnimationControllerFactory_attributes, { "AnimationControllerFactory", swig_AnimationControllerFactory_cls_methods, swig_AnimationControllerFactory_cls_attributes, swig_AnimationControllerFactory_cls_constants }, swig_AnimationControllerFactory_bases, swig_AnimationControllerFactory_base_names };

static int _wrap_BaseCameraInfo_m_fieldOfViewDegrees_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("BaseCameraInfo::m_fieldOfViewDegrees",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_fieldOfViewDegrees",1,"BaseCameraInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCameraInfo::m_fieldOfViewDegrees",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_fieldOfViewDegrees_set",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_fieldOfViewDegrees = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCameraInfo_m_fieldOfViewDegrees_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseCameraInfo::m_fieldOfViewDegrees",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_fieldOfViewDegrees",1,"BaseCameraInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_fieldOfViewDegrees_get",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  result = (btScalar) ((arg1)->m_fieldOfViewDegrees);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCameraInfo_m_nearZ_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("BaseCameraInfo::m_nearZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_nearZ",1,"BaseCameraInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCameraInfo::m_nearZ",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_nearZ_set",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_nearZ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCameraInfo_m_nearZ_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseCameraInfo::m_nearZ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_nearZ",1,"BaseCameraInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_nearZ_get",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  result = (btScalar) ((arg1)->m_nearZ);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCameraInfo_m_farZ_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("BaseCameraInfo::m_farZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_farZ",1,"BaseCameraInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCameraInfo::m_farZ",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_farZ_set",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_farZ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCameraInfo_m_farZ_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseCameraInfo::m_farZ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_farZ",1,"BaseCameraInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_farZ_get",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  result = (btScalar) ((arg1)->m_farZ);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCameraInfo_m_left_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("BaseCameraInfo::m_left",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_left",1,"BaseCameraInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCameraInfo::m_left",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_left_set",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_left = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCameraInfo_m_left_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseCameraInfo::m_left",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_left",1,"BaseCameraInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_left_get",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  result = (btScalar) ((arg1)->m_left);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCameraInfo_m_right_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("BaseCameraInfo::m_right",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_right",1,"BaseCameraInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCameraInfo::m_right",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_right_set",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_right = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCameraInfo_m_right_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseCameraInfo::m_right",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_right",1,"BaseCameraInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_right_get",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  result = (btScalar) ((arg1)->m_right);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCameraInfo_m_top_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("BaseCameraInfo::m_top",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_top",1,"BaseCameraInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCameraInfo::m_top",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_top_set",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_top = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCameraInfo_m_top_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseCameraInfo::m_top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_top",1,"BaseCameraInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_top_get",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  result = (btScalar) ((arg1)->m_top);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCameraInfo_m_bottom_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("BaseCameraInfo::m_bottom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_bottom",1,"BaseCameraInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCameraInfo::m_bottom",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_bottom_set",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_bottom = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCameraInfo_m_bottom_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseCameraInfo::m_bottom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_bottom",1,"BaseCameraInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_bottom_get",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  result = (btScalar) ((arg1)->m_bottom);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCameraInfo_m_CameraType_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  CameraTypes arg2 ;
  
  SWIG_check_num_args("BaseCameraInfo::m_CameraType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_CameraType",1,"BaseCameraInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCameraInfo::m_CameraType",2,"CameraTypes");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_CameraType_set",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  arg2 = (CameraTypes)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_CameraType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCameraInfo_m_CameraType_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  CameraTypes result;
  
  SWIG_check_num_args("BaseCameraInfo::m_CameraType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_CameraType",1,"BaseCameraInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_CameraType_get",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  result = (CameraTypes) ((arg1)->m_CameraType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCameraInfo_m_IsOrthographicCamera_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("BaseCameraInfo::m_IsOrthographicCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_IsOrthographicCamera",1,"BaseCameraInfo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("BaseCameraInfo::m_IsOrthographicCamera",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_IsOrthographicCamera_set",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_IsOrthographicCamera = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCameraInfo_m_IsOrthographicCamera_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = (BaseCameraInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseCameraInfo::m_IsOrthographicCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCameraInfo::m_IsOrthographicCamera",1,"BaseCameraInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("BaseCameraInfo_m_IsOrthographicCamera_get",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  result = (bool) ((arg1)->m_IsOrthographicCamera);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseCameraInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  CameraTypes arg8 ;
  bool arg9 ;
  BaseCameraInfo *result = 0 ;
  
  SWIG_check_num_args("BaseCameraInfo::BaseCameraInfo",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",5,"btScalar");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",8,"CameraTypes");
  if(!lua_isboolean(L,9)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",9,"bool");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (btScalar)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (CameraTypes)(int)lua_tonumber(L, 8);
  arg9 = (lua_toboolean(L, 9)!=0);
  result = (BaseCameraInfo *)new BaseCameraInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCameraInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseCameraInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  CameraTypes arg8 ;
  BaseCameraInfo *result = 0 ;
  
  SWIG_check_num_args("BaseCameraInfo::BaseCameraInfo",8,8)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",5,"btScalar");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",8,"CameraTypes");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (btScalar)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (CameraTypes)(int)lua_tonumber(L, 8);
  result = (BaseCameraInfo *)new BaseCameraInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCameraInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseCameraInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  BaseCameraInfo *result = 0 ;
  
  SWIG_check_num_args("BaseCameraInfo::BaseCameraInfo",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",5,"btScalar");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",7,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (btScalar)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  result = (BaseCameraInfo *)new BaseCameraInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCameraInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseCameraInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  BaseCameraInfo *result = 0 ;
  
  SWIG_check_num_args("BaseCameraInfo::BaseCameraInfo",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",5,"btScalar");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",6,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (btScalar)lua_tonumber(L, 5);
  arg6 = (btScalar)lua_tonumber(L, 6);
  result = (BaseCameraInfo *)new BaseCameraInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCameraInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseCameraInfo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  BaseCameraInfo *result = 0 ;
  
  SWIG_check_num_args("BaseCameraInfo::BaseCameraInfo",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",5,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (btScalar)lua_tonumber(L, 5);
  result = (BaseCameraInfo *)new BaseCameraInfo(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCameraInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseCameraInfo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  BaseCameraInfo *result = 0 ;
  
  SWIG_check_num_args("BaseCameraInfo::BaseCameraInfo",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",3,"btScalar");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",4,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  result = (BaseCameraInfo *)new BaseCameraInfo(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCameraInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseCameraInfo__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar arg3 ;
  BaseCameraInfo *result = 0 ;
  
  SWIG_check_num_args("BaseCameraInfo::BaseCameraInfo",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",3,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  result = (BaseCameraInfo *)new BaseCameraInfo(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCameraInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseCameraInfo__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  BaseCameraInfo *result = 0 ;
  
  SWIG_check_num_args("BaseCameraInfo::BaseCameraInfo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (BaseCameraInfo *)new BaseCameraInfo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCameraInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseCameraInfo__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  BaseCameraInfo *result = 0 ;
  
  SWIG_check_num_args("BaseCameraInfo::BaseCameraInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (BaseCameraInfo *)new BaseCameraInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCameraInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseCameraInfo__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *result = 0 ;
  
  SWIG_check_num_args("BaseCameraInfo::BaseCameraInfo",0,0)
  result = (BaseCameraInfo *)new BaseCameraInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCameraInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseCameraInfo__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  BaseCameraInfo *arg1 = 0 ;
  BaseCameraInfo *result = 0 ;
  
  SWIG_check_num_args("BaseCameraInfo::BaseCameraInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("BaseCameraInfo::BaseCameraInfo",1,"BaseCameraInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCameraInfo,0))){
    SWIG_fail_ptr("new_BaseCameraInfo",1,SWIGTYPE_p_BaseCameraInfo);
  }
  
  result = (BaseCameraInfo *)new BaseCameraInfo((BaseCameraInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCameraInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseCameraInfo(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BaseCameraInfo__SWIG_9(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseCameraInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BaseCameraInfo__SWIG_10(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BaseCameraInfo__SWIG_8(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_BaseCameraInfo__SWIG_7(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_BaseCameraInfo__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_BaseCameraInfo__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_BaseCameraInfo__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_BaseCameraInfo__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_new_BaseCameraInfo__SWIG_2(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_new_BaseCameraInfo__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isboolean(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_new_BaseCameraInfo__SWIG_0(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BaseCameraInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    BaseCameraInfo::BaseCameraInfo(btScalar,btScalar,btScalar,btScalar,btScalar,btScalar,btScalar,CameraTypes,bool)\n"
    "    BaseCameraInfo::BaseCameraInfo(btScalar,btScalar,btScalar,btScalar,btScalar,btScalar,btScalar,CameraTypes)\n"
    "    BaseCameraInfo::BaseCameraInfo(btScalar,btScalar,btScalar,btScalar,btScalar,btScalar,btScalar)\n"
    "    BaseCameraInfo::BaseCameraInfo(btScalar,btScalar,btScalar,btScalar,btScalar,btScalar)\n"
    "    BaseCameraInfo::BaseCameraInfo(btScalar,btScalar,btScalar,btScalar,btScalar)\n"
    "    BaseCameraInfo::BaseCameraInfo(btScalar,btScalar,btScalar,btScalar)\n"
    "    BaseCameraInfo::BaseCameraInfo(btScalar,btScalar,btScalar)\n"
    "    BaseCameraInfo::BaseCameraInfo(btScalar,btScalar)\n"
    "    BaseCameraInfo::BaseCameraInfo(btScalar)\n"
    "    BaseCameraInfo::BaseCameraInfo()\n"
    "    BaseCameraInfo::BaseCameraInfo(BaseCameraInfo const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_BaseCameraInfo(void *obj) {
BaseCameraInfo *arg1 = (BaseCameraInfo *) obj;
delete arg1;
}
static swig_lua_method swig_BaseCameraInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_BaseCameraInfo_attributes[] = {
    { "m_fieldOfViewDegrees", _wrap_BaseCameraInfo_m_fieldOfViewDegrees_get, _wrap_BaseCameraInfo_m_fieldOfViewDegrees_set},
    { "m_nearZ", _wrap_BaseCameraInfo_m_nearZ_get, _wrap_BaseCameraInfo_m_nearZ_set},
    { "m_farZ", _wrap_BaseCameraInfo_m_farZ_get, _wrap_BaseCameraInfo_m_farZ_set},
    { "m_left", _wrap_BaseCameraInfo_m_left_get, _wrap_BaseCameraInfo_m_left_set},
    { "m_right", _wrap_BaseCameraInfo_m_right_get, _wrap_BaseCameraInfo_m_right_set},
    { "m_top", _wrap_BaseCameraInfo_m_top_get, _wrap_BaseCameraInfo_m_top_set},
    { "m_bottom", _wrap_BaseCameraInfo_m_bottom_get, _wrap_BaseCameraInfo_m_bottom_set},
    { "m_CameraType", _wrap_BaseCameraInfo_m_CameraType_get, _wrap_BaseCameraInfo_m_CameraType_set},
    { "m_IsOrthographicCamera", _wrap_BaseCameraInfo_m_IsOrthographicCamera_get, _wrap_BaseCameraInfo_m_IsOrthographicCamera_set},
    {0,0,0}
};
static swig_lua_attribute swig_BaseCameraInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BaseCameraInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BaseCameraInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BaseCameraInfo_bases[] = {0};
static const char *swig_BaseCameraInfo_base_names[] = {0};
static swig_lua_class _wrap_class_BaseCameraInfo = { "BaseCameraInfo", &SWIGTYPE_p_BaseCameraInfo,_wrap_new_BaseCameraInfo, swig_delete_BaseCameraInfo, swig_BaseCameraInfo_methods, swig_BaseCameraInfo_attributes, { "BaseCameraInfo", swig_BaseCameraInfo_cls_methods, swig_BaseCameraInfo_cls_attributes, swig_BaseCameraInfo_cls_constants }, swig_BaseCameraInfo_bases, swig_BaseCameraInfo_base_names };

static int _wrap_new_CameraEntityInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btScalar arg10 ;
  btScalar arg11 ;
  btScalar arg12 ;
  CameraEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraEntityInfo::CameraEntityInfo",12,12)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",8,"btScalar");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",9,"btScalar");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",10,"btScalar");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",11,"btScalar");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",12,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (btScalar)lua_tonumber(L, 8);
  arg9 = (btScalar)lua_tonumber(L, 9);
  arg10 = (btScalar)lua_tonumber(L, 10);
  arg11 = (btScalar)lua_tonumber(L, 11);
  arg12 = (btScalar)lua_tonumber(L, 12);
  result = (CameraEntityInfo *)new CameraEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraEntityInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btScalar arg10 ;
  btScalar arg11 ;
  CameraEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraEntityInfo::CameraEntityInfo",11,11)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",8,"btScalar");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",9,"btScalar");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",10,"btScalar");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",11,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (btScalar)lua_tonumber(L, 8);
  arg9 = (btScalar)lua_tonumber(L, 9);
  arg10 = (btScalar)lua_tonumber(L, 10);
  arg11 = (btScalar)lua_tonumber(L, 11);
  result = (CameraEntityInfo *)new CameraEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraEntityInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btScalar arg10 ;
  CameraEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraEntityInfo::CameraEntityInfo",10,10)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",8,"btScalar");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",9,"btScalar");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",10,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (btScalar)lua_tonumber(L, 8);
  arg9 = (btScalar)lua_tonumber(L, 9);
  arg10 = (btScalar)lua_tonumber(L, 10);
  result = (CameraEntityInfo *)new CameraEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraEntityInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  CameraEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraEntityInfo::CameraEntityInfo",9,9)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",8,"btScalar");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",9,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (btScalar)lua_tonumber(L, 8);
  arg9 = (btScalar)lua_tonumber(L, 9);
  result = (CameraEntityInfo *)new CameraEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraEntityInfo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  CameraEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraEntityInfo::CameraEntityInfo",8,8)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",8,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (btScalar)lua_tonumber(L, 8);
  result = (CameraEntityInfo *)new CameraEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraEntityInfo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  CameraEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraEntityInfo::CameraEntityInfo",7,7)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",6,"btScalar");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",7,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (btScalar)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  result = (CameraEntityInfo *)new CameraEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraEntityInfo__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  btScalar arg6 ;
  CameraEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraEntityInfo::CameraEntityInfo",6,6)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",6,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (btScalar)lua_tonumber(L, 6);
  result = (CameraEntityInfo *)new CameraEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraEntityInfo__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  CameraEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraEntityInfo::CameraEntityInfo",5,5)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",5,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (CameraEntityInfo *)new CameraEntityInfo(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraEntityInfo__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  CameraEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraEntityInfo::CameraEntityInfo",4,4)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",4,"IDType");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  result = (CameraEntityInfo *)new CameraEntityInfo(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraEntityInfo__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  CameraEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraEntityInfo::CameraEntityInfo",3,3)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",3,"IDType");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  result = (CameraEntityInfo *)new CameraEntityInfo(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraEntityInfo__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  CameraEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraEntityInfo::CameraEntityInfo",2,2)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",2,"IDType");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (CameraEntityInfo *)new CameraEntityInfo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraEntityInfo__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  CameraEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraEntityInfo::CameraEntityInfo",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  result = (CameraEntityInfo *)new CameraEntityInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraEntityInfo__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraEntityInfo::CameraEntityInfo",0,0)
  result = (CameraEntityInfo *)new CameraEntityInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraEntityInfo__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  CameraEntityInfo *arg1 = 0 ;
  CameraEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraEntityInfo::CameraEntityInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("CameraEntityInfo::CameraEntityInfo",1,"CameraEntityInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraEntityInfo,0))){
    SWIG_fail_ptr("new_CameraEntityInfo",1,SWIGTYPE_p_CameraEntityInfo);
  }
  
  result = (CameraEntityInfo *)new CameraEntityInfo((CameraEntityInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraEntityInfo(lua_State* L) {
  int argc;
  int argv[13]={
    1,2,3,4,5,6,7,8,9,10,11,12,13
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CameraEntityInfo__SWIG_12(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CameraEntityInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CameraEntityInfo__SWIG_13(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CameraEntityInfo__SWIG_11(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_CameraEntityInfo__SWIG_10(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_CameraEntityInfo__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_CameraEntityInfo__SWIG_8(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_CameraEntityInfo__SWIG_7(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_CameraEntityInfo__SWIG_6(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_new_CameraEntityInfo__SWIG_5(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_new_CameraEntityInfo__SWIG_4(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_new_CameraEntityInfo__SWIG_3(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_new_CameraEntityInfo__SWIG_2(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          return _wrap_new_CameraEntityInfo__SWIG_1(L);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            return _wrap_new_CameraEntityInfo__SWIG_0(L);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CameraEntityInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CameraEntityInfo::CameraEntityInfo(bool,IDType,IDType,IDType,bool,btScalar,btScalar,btScalar,btScalar,btScalar,btScalar,btScalar)\n"
    "    CameraEntityInfo::CameraEntityInfo(bool,IDType,IDType,IDType,bool,btScalar,btScalar,btScalar,btScalar,btScalar,btScalar)\n"
    "    CameraEntityInfo::CameraEntityInfo(bool,IDType,IDType,IDType,bool,btScalar,btScalar,btScalar,btScalar,btScalar)\n"
    "    CameraEntityInfo::CameraEntityInfo(bool,IDType,IDType,IDType,bool,btScalar,btScalar,btScalar,btScalar)\n"
    "    CameraEntityInfo::CameraEntityInfo(bool,IDType,IDType,IDType,bool,btScalar,btScalar,btScalar)\n"
    "    CameraEntityInfo::CameraEntityInfo(bool,IDType,IDType,IDType,bool,btScalar,btScalar)\n"
    "    CameraEntityInfo::CameraEntityInfo(bool,IDType,IDType,IDType,bool,btScalar)\n"
    "    CameraEntityInfo::CameraEntityInfo(bool,IDType,IDType,IDType,bool)\n"
    "    CameraEntityInfo::CameraEntityInfo(bool,IDType,IDType,IDType)\n"
    "    CameraEntityInfo::CameraEntityInfo(bool,IDType,IDType)\n"
    "    CameraEntityInfo::CameraEntityInfo(bool,IDType)\n"
    "    CameraEntityInfo::CameraEntityInfo(bool)\n"
    "    CameraEntityInfo::CameraEntityInfo()\n"
    "    CameraEntityInfo::CameraEntityInfo(CameraEntityInfo const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_CameraEntityInfo(void *obj) {
CameraEntityInfo *arg1 = (CameraEntityInfo *) obj;
delete arg1;
}
static swig_lua_method swig_CameraEntityInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CameraEntityInfo_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_CameraEntityInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CameraEntityInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CameraEntityInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CameraEntityInfo_bases[] = {0,0,0};
static const char *swig_CameraEntityInfo_base_names[] = {"BaseEntityInfo *","BaseCameraInfo *",0};
static swig_lua_class _wrap_class_CameraEntityInfo = { "CameraEntityInfo", &SWIGTYPE_p_CameraEntityInfo,_wrap_new_CameraEntityInfo, swig_delete_CameraEntityInfo, swig_CameraEntityInfo_methods, swig_CameraEntityInfo_attributes, { "CameraEntityInfo", swig_CameraEntityInfo_cls_methods, swig_CameraEntityInfo_cls_attributes, swig_CameraEntityInfo_cls_constants }, swig_CameraEntityInfo_bases, swig_CameraEntityInfo_base_names };

static int _wrap_new_CameraPhysicsEntityInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btScalar arg10 ;
  btScalar arg11 ;
  btScalar arg12 ;
  btScalar arg13 ;
  btScalar arg14 ;
  CameraPhysicsEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",14,14)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",8,"btScalar");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",9,"btScalar");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",10,"btScalar");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",11,"btScalar");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",12,"btScalar");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",13,"btScalar");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",14,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (btScalar)lua_tonumber(L, 8);
  arg9 = (btScalar)lua_tonumber(L, 9);
  arg10 = (btScalar)lua_tonumber(L, 10);
  arg11 = (btScalar)lua_tonumber(L, 11);
  arg12 = (btScalar)lua_tonumber(L, 12);
  arg13 = (btScalar)lua_tonumber(L, 13);
  arg14 = (btScalar)lua_tonumber(L, 14);
  result = (CameraPhysicsEntityInfo *)new CameraPhysicsEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraPhysicsEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraPhysicsEntityInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btScalar arg10 ;
  btScalar arg11 ;
  btScalar arg12 ;
  btScalar arg13 ;
  CameraPhysicsEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",13,13)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",8,"btScalar");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",9,"btScalar");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",10,"btScalar");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",11,"btScalar");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",12,"btScalar");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",13,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (btScalar)lua_tonumber(L, 8);
  arg9 = (btScalar)lua_tonumber(L, 9);
  arg10 = (btScalar)lua_tonumber(L, 10);
  arg11 = (btScalar)lua_tonumber(L, 11);
  arg12 = (btScalar)lua_tonumber(L, 12);
  arg13 = (btScalar)lua_tonumber(L, 13);
  result = (CameraPhysicsEntityInfo *)new CameraPhysicsEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraPhysicsEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraPhysicsEntityInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btScalar arg10 ;
  btScalar arg11 ;
  btScalar arg12 ;
  CameraPhysicsEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",12,12)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",8,"btScalar");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",9,"btScalar");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",10,"btScalar");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",11,"btScalar");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",12,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (btScalar)lua_tonumber(L, 8);
  arg9 = (btScalar)lua_tonumber(L, 9);
  arg10 = (btScalar)lua_tonumber(L, 10);
  arg11 = (btScalar)lua_tonumber(L, 11);
  arg12 = (btScalar)lua_tonumber(L, 12);
  result = (CameraPhysicsEntityInfo *)new CameraPhysicsEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraPhysicsEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraPhysicsEntityInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btScalar arg10 ;
  btScalar arg11 ;
  CameraPhysicsEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",11,11)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",8,"btScalar");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",9,"btScalar");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",10,"btScalar");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",11,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (btScalar)lua_tonumber(L, 8);
  arg9 = (btScalar)lua_tonumber(L, 9);
  arg10 = (btScalar)lua_tonumber(L, 10);
  arg11 = (btScalar)lua_tonumber(L, 11);
  result = (CameraPhysicsEntityInfo *)new CameraPhysicsEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraPhysicsEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraPhysicsEntityInfo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btScalar arg10 ;
  CameraPhysicsEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",10,10)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",8,"btScalar");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",9,"btScalar");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",10,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (btScalar)lua_tonumber(L, 8);
  arg9 = (btScalar)lua_tonumber(L, 9);
  arg10 = (btScalar)lua_tonumber(L, 10);
  result = (CameraPhysicsEntityInfo *)new CameraPhysicsEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraPhysicsEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraPhysicsEntityInfo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  CameraPhysicsEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",9,9)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",8,"btScalar");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",9,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (btScalar)lua_tonumber(L, 8);
  arg9 = (btScalar)lua_tonumber(L, 9);
  result = (CameraPhysicsEntityInfo *)new CameraPhysicsEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraPhysicsEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraPhysicsEntityInfo__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  CameraPhysicsEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",8,8)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",8,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (btScalar)lua_tonumber(L, 8);
  result = (CameraPhysicsEntityInfo *)new CameraPhysicsEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraPhysicsEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraPhysicsEntityInfo__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  CameraPhysicsEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",7,7)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",7,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  result = (CameraPhysicsEntityInfo *)new CameraPhysicsEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraPhysicsEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraPhysicsEntityInfo__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  CameraPhysicsEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",6,6)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",6,"IDType");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  result = (CameraPhysicsEntityInfo *)new CameraPhysicsEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraPhysicsEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraPhysicsEntityInfo__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  CameraPhysicsEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",5,5)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",5,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (CameraPhysicsEntityInfo *)new CameraPhysicsEntityInfo(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraPhysicsEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraPhysicsEntityInfo__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  CameraPhysicsEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",4,4)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",4,"IDType");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  result = (CameraPhysicsEntityInfo *)new CameraPhysicsEntityInfo(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraPhysicsEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraPhysicsEntityInfo__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  CameraPhysicsEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",3,3)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",3,"IDType");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  result = (CameraPhysicsEntityInfo *)new CameraPhysicsEntityInfo(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraPhysicsEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraPhysicsEntityInfo__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  CameraPhysicsEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",2,2)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",2,"IDType");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (CameraPhysicsEntityInfo *)new CameraPhysicsEntityInfo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraPhysicsEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraPhysicsEntityInfo__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  CameraPhysicsEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  result = (CameraPhysicsEntityInfo *)new CameraPhysicsEntityInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraPhysicsEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraPhysicsEntityInfo__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",0,0)
  result = (CameraPhysicsEntityInfo *)new CameraPhysicsEntityInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraPhysicsEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraPhysicsEntityInfo__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  CameraPhysicsEntityInfo *arg1 = 0 ;
  CameraPhysicsEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("CameraPhysicsEntityInfo::CameraPhysicsEntityInfo",1,"CameraPhysicsEntityInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraPhysicsEntityInfo,0))){
    SWIG_fail_ptr("new_CameraPhysicsEntityInfo",1,SWIGTYPE_p_CameraPhysicsEntityInfo);
  }
  
  result = (CameraPhysicsEntityInfo *)new CameraPhysicsEntityInfo((CameraPhysicsEntityInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraPhysicsEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraPhysicsEntityInfo(lua_State* L) {
  int argc;
  int argv[15]={
    1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CameraPhysicsEntityInfo__SWIG_14(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CameraPhysicsEntityInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CameraPhysicsEntityInfo__SWIG_15(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CameraPhysicsEntityInfo__SWIG_13(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_CameraPhysicsEntityInfo__SWIG_12(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_CameraPhysicsEntityInfo__SWIG_11(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_CameraPhysicsEntityInfo__SWIG_10(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_CameraPhysicsEntityInfo__SWIG_9(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_CameraPhysicsEntityInfo__SWIG_8(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_new_CameraPhysicsEntityInfo__SWIG_7(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_new_CameraPhysicsEntityInfo__SWIG_6(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_new_CameraPhysicsEntityInfo__SWIG_5(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_new_CameraPhysicsEntityInfo__SWIG_4(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          return _wrap_new_CameraPhysicsEntityInfo__SWIG_3(L);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            return _wrap_new_CameraPhysicsEntityInfo__SWIG_2(L);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 13) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              return _wrap_new_CameraPhysicsEntityInfo__SWIG_1(L);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 14) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                return _wrap_new_CameraPhysicsEntityInfo__SWIG_0(L);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CameraPhysicsEntityInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CameraPhysicsEntityInfo::CameraPhysicsEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar,btScalar,btScalar,btScalar,btScalar,btScalar,btScalar,btScalar)\n"
    "    CameraPhysicsEntityInfo::CameraPhysicsEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar,btScalar,btScalar,btScalar,btScalar,btScalar,btScalar)\n"
    "    CameraPhysicsEntityInfo::CameraPhysicsEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar,btScalar,btScalar,btScalar,btScalar,btScalar)\n"
    "    CameraPhysicsEntityInfo::CameraPhysicsEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar,btScalar,btScalar,btScalar,btScalar)\n"
    "    CameraPhysicsEntityInfo::CameraPhysicsEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar,btScalar,btScalar,btScalar)\n"
    "    CameraPhysicsEntityInfo::CameraPhysicsEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar,btScalar,btScalar)\n"
    "    CameraPhysicsEntityInfo::CameraPhysicsEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar,btScalar)\n"
    "    CameraPhysicsEntityInfo::CameraPhysicsEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar)\n"
    "    CameraPhysicsEntityInfo::CameraPhysicsEntityInfo(bool,IDType,IDType,IDType,bool,IDType)\n"
    "    CameraPhysicsEntityInfo::CameraPhysicsEntityInfo(bool,IDType,IDType,IDType,bool)\n"
    "    CameraPhysicsEntityInfo::CameraPhysicsEntityInfo(bool,IDType,IDType,IDType)\n"
    "    CameraPhysicsEntityInfo::CameraPhysicsEntityInfo(bool,IDType,IDType)\n"
    "    CameraPhysicsEntityInfo::CameraPhysicsEntityInfo(bool,IDType)\n"
    "    CameraPhysicsEntityInfo::CameraPhysicsEntityInfo(bool)\n"
    "    CameraPhysicsEntityInfo::CameraPhysicsEntityInfo()\n"
    "    CameraPhysicsEntityInfo::CameraPhysicsEntityInfo(CameraPhysicsEntityInfo const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_CameraPhysicsEntityInfo(void *obj) {
CameraPhysicsEntityInfo *arg1 = (CameraPhysicsEntityInfo *) obj;
delete arg1;
}
static swig_lua_method swig_CameraPhysicsEntityInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CameraPhysicsEntityInfo_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_CameraPhysicsEntityInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CameraPhysicsEntityInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CameraPhysicsEntityInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CameraPhysicsEntityInfo_bases[] = {0,0,0};
static const char *swig_CameraPhysicsEntityInfo_base_names[] = {"RigidEntityInfo *","BaseCameraInfo *",0};
static swig_lua_class _wrap_class_CameraPhysicsEntityInfo = { "CameraPhysicsEntityInfo", &SWIGTYPE_p_CameraPhysicsEntityInfo,_wrap_new_CameraPhysicsEntityInfo, swig_delete_CameraPhysicsEntityInfo, swig_CameraPhysicsEntityInfo_methods, swig_CameraPhysicsEntityInfo_attributes, { "CameraPhysicsEntityInfo", swig_CameraPhysicsEntityInfo_cls_methods, swig_CameraPhysicsEntityInfo_cls_attributes, swig_CameraPhysicsEntityInfo_cls_constants }, swig_CameraPhysicsEntityInfo_bases, swig_CameraPhysicsEntityInfo_base_names };

static int _wrap_new_CameraSteeringEntityInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  IDType arg8 ;
  WanderInfo *arg9 = 0 ;
  btScalar arg10 ;
  btScalar arg11 ;
  btScalar arg12 ;
  btScalar arg13 ;
  btScalar arg14 ;
  btScalar arg15 ;
  btScalar arg16 ;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",16,16)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",8,"IDType");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",9,"WanderInfo const &");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",10,"btScalar");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",11,"btScalar");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",12,"btScalar");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",13,"btScalar");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",14,"btScalar");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",15,"btScalar");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",16,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (IDType)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("new_CameraSteeringEntityInfo",9,SWIGTYPE_p_WanderInfo);
  }
  
  arg10 = (btScalar)lua_tonumber(L, 10);
  arg11 = (btScalar)lua_tonumber(L, 11);
  arg12 = (btScalar)lua_tonumber(L, 12);
  arg13 = (btScalar)lua_tonumber(L, 13);
  arg14 = (btScalar)lua_tonumber(L, 14);
  arg15 = (btScalar)lua_tonumber(L, 15);
  arg16 = (btScalar)lua_tonumber(L, 16);
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(WanderInfo const &)*arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  IDType arg8 ;
  WanderInfo *arg9 = 0 ;
  btScalar arg10 ;
  btScalar arg11 ;
  btScalar arg12 ;
  btScalar arg13 ;
  btScalar arg14 ;
  btScalar arg15 ;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",15,15)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",8,"IDType");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",9,"WanderInfo const &");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",10,"btScalar");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",11,"btScalar");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",12,"btScalar");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",13,"btScalar");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",14,"btScalar");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",15,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (IDType)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("new_CameraSteeringEntityInfo",9,SWIGTYPE_p_WanderInfo);
  }
  
  arg10 = (btScalar)lua_tonumber(L, 10);
  arg11 = (btScalar)lua_tonumber(L, 11);
  arg12 = (btScalar)lua_tonumber(L, 12);
  arg13 = (btScalar)lua_tonumber(L, 13);
  arg14 = (btScalar)lua_tonumber(L, 14);
  arg15 = (btScalar)lua_tonumber(L, 15);
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(WanderInfo const &)*arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  IDType arg8 ;
  WanderInfo *arg9 = 0 ;
  btScalar arg10 ;
  btScalar arg11 ;
  btScalar arg12 ;
  btScalar arg13 ;
  btScalar arg14 ;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",14,14)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",8,"IDType");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",9,"WanderInfo const &");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",10,"btScalar");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",11,"btScalar");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",12,"btScalar");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",13,"btScalar");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",14,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (IDType)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("new_CameraSteeringEntityInfo",9,SWIGTYPE_p_WanderInfo);
  }
  
  arg10 = (btScalar)lua_tonumber(L, 10);
  arg11 = (btScalar)lua_tonumber(L, 11);
  arg12 = (btScalar)lua_tonumber(L, 12);
  arg13 = (btScalar)lua_tonumber(L, 13);
  arg14 = (btScalar)lua_tonumber(L, 14);
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(WanderInfo const &)*arg9,arg10,arg11,arg12,arg13,arg14);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  IDType arg8 ;
  WanderInfo *arg9 = 0 ;
  btScalar arg10 ;
  btScalar arg11 ;
  btScalar arg12 ;
  btScalar arg13 ;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",13,13)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",8,"IDType");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",9,"WanderInfo const &");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",10,"btScalar");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",11,"btScalar");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",12,"btScalar");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",13,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (IDType)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("new_CameraSteeringEntityInfo",9,SWIGTYPE_p_WanderInfo);
  }
  
  arg10 = (btScalar)lua_tonumber(L, 10);
  arg11 = (btScalar)lua_tonumber(L, 11);
  arg12 = (btScalar)lua_tonumber(L, 12);
  arg13 = (btScalar)lua_tonumber(L, 13);
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(WanderInfo const &)*arg9,arg10,arg11,arg12,arg13);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  IDType arg8 ;
  WanderInfo *arg9 = 0 ;
  btScalar arg10 ;
  btScalar arg11 ;
  btScalar arg12 ;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",12,12)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",8,"IDType");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",9,"WanderInfo const &");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",10,"btScalar");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",11,"btScalar");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",12,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (IDType)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("new_CameraSteeringEntityInfo",9,SWIGTYPE_p_WanderInfo);
  }
  
  arg10 = (btScalar)lua_tonumber(L, 10);
  arg11 = (btScalar)lua_tonumber(L, 11);
  arg12 = (btScalar)lua_tonumber(L, 12);
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(WanderInfo const &)*arg9,arg10,arg11,arg12);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  IDType arg8 ;
  WanderInfo *arg9 = 0 ;
  btScalar arg10 ;
  btScalar arg11 ;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",11,11)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",8,"IDType");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",9,"WanderInfo const &");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",10,"btScalar");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",11,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (IDType)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("new_CameraSteeringEntityInfo",9,SWIGTYPE_p_WanderInfo);
  }
  
  arg10 = (btScalar)lua_tonumber(L, 10);
  arg11 = (btScalar)lua_tonumber(L, 11);
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(WanderInfo const &)*arg9,arg10,arg11);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  IDType arg8 ;
  WanderInfo *arg9 = 0 ;
  btScalar arg10 ;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",10,10)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",8,"IDType");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",9,"WanderInfo const &");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",10,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (IDType)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("new_CameraSteeringEntityInfo",9,SWIGTYPE_p_WanderInfo);
  }
  
  arg10 = (btScalar)lua_tonumber(L, 10);
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(WanderInfo const &)*arg9,arg10);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  IDType arg8 ;
  WanderInfo *arg9 = 0 ;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",9,9)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",8,"IDType");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",9,"WanderInfo const &");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (IDType)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_WanderInfo,0))){
    SWIG_fail_ptr("new_CameraSteeringEntityInfo",9,SWIGTYPE_p_WanderInfo);
  }
  
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(WanderInfo const &)*arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  IDType arg8 ;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",8,8)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",7,"btScalar");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",8,"IDType");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  arg8 = (IDType)lua_tonumber(L, 8);
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  btScalar arg7 ;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",7,7)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",6,"IDType");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",7,"btScalar");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  arg7 = (btScalar)lua_tonumber(L, 7);
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  IDType arg6 ;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",6,6)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",6,"IDType");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (IDType)lua_tonumber(L, 6);
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  bool arg5 ;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",5,5)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",4,"IDType");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",5,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",4,4)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",4,"IDType");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",3,3)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",3,"IDType");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  IDType arg2 ;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",2,2)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",2,"IDType");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (IDType)lua_tonumber(L, 2);
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo__SWIG_16(lua_State* L) {
  int SWIG_arg = 0;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",0,0)
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo__SWIG_17(lua_State* L) {
  int SWIG_arg = 0;
  CameraSteeringEntityInfo *arg1 = 0 ;
  CameraSteeringEntityInfo *result = 0 ;
  
  SWIG_check_num_args("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("CameraSteeringEntityInfo::CameraSteeringEntityInfo",1,"CameraSteeringEntityInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraSteeringEntityInfo,0))){
    SWIG_fail_ptr("new_CameraSteeringEntityInfo",1,SWIGTYPE_p_CameraSteeringEntityInfo);
  }
  
  result = (CameraSteeringEntityInfo *)new CameraSteeringEntityInfo((CameraSteeringEntityInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CameraSteeringEntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraSteeringEntityInfo(lua_State* L) {
  int argc;
  int argv[17]={
    1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CameraSteeringEntityInfo__SWIG_16(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CameraSteeringEntityInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CameraSteeringEntityInfo__SWIG_17(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CameraSteeringEntityInfo__SWIG_15(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_CameraSteeringEntityInfo__SWIG_14(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_CameraSteeringEntityInfo__SWIG_13(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_CameraSteeringEntityInfo__SWIG_12(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_CameraSteeringEntityInfo__SWIG_11(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_CameraSteeringEntityInfo__SWIG_10(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_new_CameraSteeringEntityInfo__SWIG_9(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_new_CameraSteeringEntityInfo__SWIG_8(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_WanderInfo, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      return _wrap_new_CameraSteeringEntityInfo__SWIG_7(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_WanderInfo, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_new_CameraSteeringEntityInfo__SWIG_6(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_WanderInfo, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          return _wrap_new_CameraSteeringEntityInfo__SWIG_5(L);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_WanderInfo, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            return _wrap_new_CameraSteeringEntityInfo__SWIG_4(L);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 13) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_WanderInfo, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              return _wrap_new_CameraSteeringEntityInfo__SWIG_3(L);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 14) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_WanderInfo, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                return _wrap_new_CameraSteeringEntityInfo__SWIG_2(L);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 15) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_WanderInfo, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                {
                                  _v = lua_isnumber(L,argv[14]);
                                }
                                if (_v) {
                                  return _wrap_new_CameraSteeringEntityInfo__SWIG_1(L);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 16) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      void *ptr;
                      if (lua_isuserdata(L,argv[8])==0 || SWIG_ConvertPtr(L,argv[8], (void **) &ptr, SWIGTYPE_p_WanderInfo, 0)) {
                        _v = 0;
                      } else {
                        _v = 1;
                      }
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                {
                                  _v = lua_isnumber(L,argv[14]);
                                }
                                if (_v) {
                                  {
                                    _v = lua_isnumber(L,argv[15]);
                                  }
                                  if (_v) {
                                    return _wrap_new_CameraSteeringEntityInfo__SWIG_0(L);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CameraSteeringEntityInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar,IDType,WanderInfo const &,btScalar,btScalar,btScalar,btScalar,btScalar,btScalar,btScalar)\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar,IDType,WanderInfo const &,btScalar,btScalar,btScalar,btScalar,btScalar,btScalar)\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar,IDType,WanderInfo const &,btScalar,btScalar,btScalar,btScalar,btScalar)\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar,IDType,WanderInfo const &,btScalar,btScalar,btScalar,btScalar)\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar,IDType,WanderInfo const &,btScalar,btScalar,btScalar)\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar,IDType,WanderInfo const &,btScalar,btScalar)\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar,IDType,WanderInfo const &,btScalar)\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar,IDType,WanderInfo const &)\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar,IDType)\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo(bool,IDType,IDType,IDType,bool,IDType,btScalar)\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo(bool,IDType,IDType,IDType,bool,IDType)\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo(bool,IDType,IDType,IDType,bool)\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo(bool,IDType,IDType,IDType)\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo(bool,IDType,IDType)\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo(bool,IDType)\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo(bool)\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo()\n"
    "    CameraSteeringEntityInfo::CameraSteeringEntityInfo(CameraSteeringEntityInfo const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_CameraSteeringEntityInfo(void *obj) {
CameraSteeringEntityInfo *arg1 = (CameraSteeringEntityInfo *) obj;
delete arg1;
}
static swig_lua_method swig_CameraSteeringEntityInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CameraSteeringEntityInfo_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_CameraSteeringEntityInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CameraSteeringEntityInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CameraSteeringEntityInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CameraSteeringEntityInfo_bases[] = {0,0,0};
static const char *swig_CameraSteeringEntityInfo_base_names[] = {"SteeringEntityInfo *","BaseCameraInfo *",0};
static swig_lua_class _wrap_class_CameraSteeringEntityInfo = { "CameraSteeringEntityInfo", &SWIGTYPE_p_CameraSteeringEntityInfo,_wrap_new_CameraSteeringEntityInfo, swig_delete_CameraSteeringEntityInfo, swig_CameraSteeringEntityInfo_methods, swig_CameraSteeringEntityInfo_attributes, { "CameraSteeringEntityInfo", swig_CameraSteeringEntityInfo_cls_methods, swig_CameraSteeringEntityInfo_cls_attributes, swig_CameraSteeringEntityInfo_cls_constants }, swig_CameraSteeringEntityInfo_bases, swig_CameraSteeringEntityInfo_base_names };

static int _wrap_CameraFactory_updateScreenDimensions(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("CameraFactory::updateScreenDimensions",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CameraFactory::updateScreenDimensions",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CameraFactory::updateScreenDimensions",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  CameraFactory::updateScreenDimensions(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraFactory_getScreenWidth(lua_State* L) {
  int SWIG_arg = 0;
  btScalar result;
  
  SWIG_check_num_args("CameraFactory::getScreenWidth",0,0)
  result = (btScalar)CameraFactory::getScreenWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraFactory_getScreenHeight(lua_State* L) {
  int SWIG_arg = 0;
  btScalar result;
  
  SWIG_check_num_args("CameraFactory::getScreenHeight",0,0)
  result = (btScalar)CameraFactory::getScreenHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraFactory_setCurrentCamera(lua_State* L) {
  int SWIG_arg = 0;
  CameraFactory *arg1 = (CameraFactory *) 0 ;
  BaseCamera *arg2 = (BaseCamera *) 0 ;
  
  SWIG_check_num_args("CameraFactory::setCurrentCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraFactory::setCurrentCamera",1,"CameraFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CameraFactory::setCurrentCamera",2,"BaseCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraFactory,0))){
    SWIG_fail_ptr("CameraFactory_setCurrentCamera",1,SWIGTYPE_p_CameraFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("CameraFactory_setCurrentCamera",2,SWIGTYPE_p_BaseCamera);
  }
  
  (arg1)->setCurrentCamera(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraFactory_getCurrentCamera__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CameraFactory *arg1 = (CameraFactory *) 0 ;
  BaseCamera *result = 0 ;
  
  SWIG_check_num_args("CameraFactory::getCurrentCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraFactory::getCurrentCamera",1,"CameraFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraFactory,0))){
    SWIG_fail_ptr("CameraFactory_getCurrentCamera",1,SWIGTYPE_p_CameraFactory);
  }
  
  result = (BaseCamera *)((CameraFactory const *)arg1)->getCurrentCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraFactory_getCurrentCamera__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CameraFactory *arg1 = (CameraFactory *) 0 ;
  BaseCamera *result = 0 ;
  
  SWIG_check_num_args("CameraFactory::getCurrentCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraFactory::getCurrentCamera",1,"CameraFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraFactory,0))){
    SWIG_fail_ptr("CameraFactory_getCurrentCamera",1,SWIGTYPE_p_CameraFactory);
  }
  
  result = (BaseCamera *)(arg1)->getCurrentCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraFactory_getCurrentCamera(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CameraFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CameraFactory_getCurrentCamera__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CameraFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CameraFactory_getCurrentCamera__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CameraFactory_getCurrentCamera'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CameraFactory::getCurrentCamera() const\n"
    "    CameraFactory::getCurrentCamera()\n");
  lua_error(L);return 0;
}


static int _wrap_CameraFactory_setOrthoCamera(lua_State* L) {
  int SWIG_arg = 0;
  CameraFactory *arg1 = (CameraFactory *) 0 ;
  BaseCamera *arg2 = (BaseCamera *) 0 ;
  
  SWIG_check_num_args("CameraFactory::setOrthoCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraFactory::setOrthoCamera",1,"CameraFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CameraFactory::setOrthoCamera",2,"BaseCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraFactory,0))){
    SWIG_fail_ptr("CameraFactory_setOrthoCamera",1,SWIGTYPE_p_CameraFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("CameraFactory_setOrthoCamera",2,SWIGTYPE_p_BaseCamera);
  }
  
  (arg1)->setOrthoCamera(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraFactory_getOrthoCamera__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CameraFactory *arg1 = (CameraFactory *) 0 ;
  BaseCamera *result = 0 ;
  
  SWIG_check_num_args("CameraFactory::getOrthoCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraFactory::getOrthoCamera",1,"CameraFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraFactory,0))){
    SWIG_fail_ptr("CameraFactory_getOrthoCamera",1,SWIGTYPE_p_CameraFactory);
  }
  
  result = (BaseCamera *)((CameraFactory const *)arg1)->getOrthoCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraFactory_getOrthoCamera__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CameraFactory *arg1 = (CameraFactory *) 0 ;
  BaseCamera *result = 0 ;
  
  SWIG_check_num_args("CameraFactory::getOrthoCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CameraFactory::getOrthoCamera",1,"CameraFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CameraFactory,0))){
    SWIG_fail_ptr("CameraFactory_getOrthoCamera",1,SWIGTYPE_p_CameraFactory);
  }
  
  result = (BaseCamera *)(arg1)->getOrthoCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraFactory_getOrthoCamera(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CameraFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CameraFactory_getOrthoCamera__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_CameraFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CameraFactory_getOrthoCamera__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CameraFactory_getOrthoCamera'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CameraFactory::getOrthoCamera() const\n"
    "    CameraFactory::getOrthoCamera()\n");
  lua_error(L);return 0;
}


static int _wrap_CameraFactory_getAspectRatio(lua_State* L) {
  int SWIG_arg = 0;
  btScalar result;
  
  SWIG_check_num_args("CameraFactory::getAspectRatio",0,0)
  result = (btScalar)CameraFactory::getAspectRatio();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_CameraFactory_methods[] = {
    {"setCurrentCamera", _wrap_CameraFactory_setCurrentCamera}, 
    {"getCurrentCamera", _wrap_CameraFactory_getCurrentCamera}, 
    {"setOrthoCamera", _wrap_CameraFactory_setOrthoCamera}, 
    {"getOrthoCamera", _wrap_CameraFactory_getOrthoCamera}, 
    {0,0}
};
static swig_lua_attribute swig_CameraFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_CameraFactory_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CameraFactory_cls_methods[] = {
    {"updateScreenDimensions", _wrap_CameraFactory_updateScreenDimensions}, 
    {"getScreenWidth", _wrap_CameraFactory_getScreenWidth}, 
    {"getScreenHeight", _wrap_CameraFactory_getScreenHeight}, 
    {"getAspectRatio", _wrap_CameraFactory_getAspectRatio}, 
    {0,0}
};
static swig_lua_const_info swig_CameraFactory_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CameraFactory_bases[] = {0,0};
static const char *swig_CameraFactory_base_names[] = {"AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *",0};
static swig_lua_class _wrap_class_CameraFactory = { "CameraFactory", &SWIGTYPE_p_CameraFactory,0,0, swig_CameraFactory_methods, swig_CameraFactory_attributes, { "CameraFactory", swig_CameraFactory_cls_methods, swig_CameraFactory_cls_attributes, swig_CameraFactory_cls_constants }, swig_CameraFactory_bases, swig_CameraFactory_base_names };

static int _wrap_EntityStateMachineInfo_m_Type_set(lua_State* L) {
  int SWIG_arg = 0;
  EntityStateMachineInfo *arg1 = (EntityStateMachineInfo *) 0 ;
  StateMachineTypes arg2 ;
  
  SWIG_check_num_args("EntityStateMachineInfo::m_Type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EntityStateMachineInfo::m_Type",1,"EntityStateMachineInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("EntityStateMachineInfo::m_Type",2,"StateMachineTypes");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EntityStateMachineInfo,0))){
    SWIG_fail_ptr("EntityStateMachineInfo_m_Type_set",1,SWIGTYPE_p_EntityStateMachineInfo);
  }
  
  arg2 = (StateMachineTypes)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_Type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityStateMachineInfo_m_Type_get(lua_State* L) {
  int SWIG_arg = 0;
  EntityStateMachineInfo *arg1 = (EntityStateMachineInfo *) 0 ;
  StateMachineTypes result;
  
  SWIG_check_num_args("EntityStateMachineInfo::m_Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EntityStateMachineInfo::m_Type",1,"EntityStateMachineInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EntityStateMachineInfo,0))){
    SWIG_fail_ptr("EntityStateMachineInfo_m_Type_get",1,SWIGTYPE_p_EntityStateMachineInfo);
  }
  
  result = (StateMachineTypes) ((arg1)->m_Type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EntityStateMachineInfo(lua_State* L) {
  int SWIG_arg = 0;
  EntityStateMachineInfo *result = 0 ;
  
  SWIG_check_num_args("EntityStateMachineInfo::EntityStateMachineInfo",0,0)
  result = (EntityStateMachineInfo *)new EntityStateMachineInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_EntityStateMachineInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityStateMachineInfo_value(lua_State* L) {
  int SWIG_arg = 0;
  EntityStateMachineInfo *arg1 = (EntityStateMachineInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("EntityStateMachineInfo::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EntityStateMachineInfo::value",1,"EntityStateMachineInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EntityStateMachineInfo,0))){
    SWIG_fail_ptr("EntityStateMachineInfo_value",1,SWIGTYPE_p_EntityStateMachineInfo);
  }
  
  result = (int)((EntityStateMachineInfo const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityStateMachineInfo___call(lua_State* L) {
  int SWIG_arg = 0;
  EntityStateMachineInfo *arg1 = (EntityStateMachineInfo *) 0 ;
  EntityStateMachineInfo *arg2 = 0 ;
  EntityStateMachineInfo *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("EntityStateMachineInfo::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("EntityStateMachineInfo::operator ()",1,"EntityStateMachineInfo const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("EntityStateMachineInfo::operator ()",2,"EntityStateMachineInfo const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("EntityStateMachineInfo::operator ()",3,"EntityStateMachineInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EntityStateMachineInfo,0))){
    SWIG_fail_ptr("EntityStateMachineInfo___call",1,SWIGTYPE_p_EntityStateMachineInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_EntityStateMachineInfo,0))){
    SWIG_fail_ptr("EntityStateMachineInfo___call",2,SWIGTYPE_p_EntityStateMachineInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_EntityStateMachineInfo,0))){
    SWIG_fail_ptr("EntityStateMachineInfo___call",3,SWIGTYPE_p_EntityStateMachineInfo);
  }
  
  result = (bool)((EntityStateMachineInfo const *)arg1)->operator ()((EntityStateMachineInfo const &)*arg2,(EntityStateMachineInfo const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EntityStateMachineInfo(void *obj) {
EntityStateMachineInfo *arg1 = (EntityStateMachineInfo *) obj;
delete arg1;
}
static swig_lua_method swig_EntityStateMachineInfo_methods[] = {
    {"value", _wrap_EntityStateMachineInfo_value}, 
    {"__call", _wrap_EntityStateMachineInfo___call}, 
    {0,0}
};
static swig_lua_attribute swig_EntityStateMachineInfo_attributes[] = {
    { "m_Type", _wrap_EntityStateMachineInfo_m_Type_get, _wrap_EntityStateMachineInfo_m_Type_set},
    {0,0,0}
};
static swig_lua_attribute swig_EntityStateMachineInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EntityStateMachineInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_EntityStateMachineInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_EntityStateMachineInfo_bases[] = {0};
static const char *swig_EntityStateMachineInfo_base_names[] = {0};
static swig_lua_class _wrap_class_EntityStateMachineInfo = { "EntityStateMachineInfo", &SWIGTYPE_p_EntityStateMachineInfo,_wrap_new_EntityStateMachineInfo, swig_delete_EntityStateMachineInfo, swig_EntityStateMachineInfo_methods, swig_EntityStateMachineInfo_attributes, { "EntityStateMachineInfo", swig_EntityStateMachineInfo_cls_methods, swig_EntityStateMachineInfo_cls_attributes, swig_EntityStateMachineInfo_cls_constants }, swig_EntityStateMachineInfo_bases, swig_EntityStateMachineInfo_base_names };

static swig_lua_method swig_EntityStateMachineFactory_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_EntityStateMachineFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_EntityStateMachineFactory_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EntityStateMachineFactory_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_EntityStateMachineFactory_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_EntityStateMachineFactory_bases[] = {0,0};
static const char *swig_EntityStateMachineFactory_base_names[] = {"AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *",0};
static swig_lua_class _wrap_class_EntityStateMachineFactory = { "EntityStateMachineFactory", &SWIGTYPE_p_EntityStateMachineFactory,0,0, swig_EntityStateMachineFactory_methods, swig_EntityStateMachineFactory_attributes, { "EntityStateMachineFactory", swig_EntityStateMachineFactory_cls_methods, swig_EntityStateMachineFactory_cls_attributes, swig_EntityStateMachineFactory_cls_constants }, swig_EntityStateMachineFactory_bases, swig_EntityStateMachineFactory_base_names };

static int _wrap_ParticleEmitterBehaviorInfo_m_shaderFactoryID_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleEmitterBehaviorInfo *arg1 = (ParticleEmitterBehaviorInfo *) 0 ;
  IDType arg2 ;
  
  SWIG_check_num_args("ParticleEmitterBehaviorInfo::m_shaderFactoryID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::m_shaderFactoryID",1,"ParticleEmitterBehaviorInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::m_shaderFactoryID",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleEmitterBehaviorInfo,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorInfo_m_shaderFactoryID_set",1,SWIGTYPE_p_ParticleEmitterBehaviorInfo);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_shaderFactoryID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBehaviorInfo_m_shaderFactoryID_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleEmitterBehaviorInfo *arg1 = (ParticleEmitterBehaviorInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("ParticleEmitterBehaviorInfo::m_shaderFactoryID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::m_shaderFactoryID",1,"ParticleEmitterBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleEmitterBehaviorInfo,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorInfo_m_shaderFactoryID_get",1,SWIGTYPE_p_ParticleEmitterBehaviorInfo);
  }
  
  result = (IDType) ((arg1)->m_shaderFactoryID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBehaviorInfo_m_MaxNumberOfParticles_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleEmitterBehaviorInfo *arg1 = (ParticleEmitterBehaviorInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("ParticleEmitterBehaviorInfo::m_MaxNumberOfParticles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::m_MaxNumberOfParticles",1,"ParticleEmitterBehaviorInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::m_MaxNumberOfParticles",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleEmitterBehaviorInfo,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorInfo_m_MaxNumberOfParticles_set",1,SWIGTYPE_p_ParticleEmitterBehaviorInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_MaxNumberOfParticles = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBehaviorInfo_m_MaxNumberOfParticles_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleEmitterBehaviorInfo *arg1 = (ParticleEmitterBehaviorInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("ParticleEmitterBehaviorInfo::m_MaxNumberOfParticles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::m_MaxNumberOfParticles",1,"ParticleEmitterBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleEmitterBehaviorInfo,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorInfo_m_MaxNumberOfParticles_get",1,SWIGTYPE_p_ParticleEmitterBehaviorInfo);
  }
  
  result = (unsigned int) ((arg1)->m_MaxNumberOfParticles);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBehaviorInfo_m_ParticlesPerSecond_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleEmitterBehaviorInfo *arg1 = (ParticleEmitterBehaviorInfo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ParticleEmitterBehaviorInfo::m_ParticlesPerSecond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::m_ParticlesPerSecond",1,"ParticleEmitterBehaviorInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::m_ParticlesPerSecond",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleEmitterBehaviorInfo,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorInfo_m_ParticlesPerSecond_set",1,SWIGTYPE_p_ParticleEmitterBehaviorInfo);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_ParticlesPerSecond = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBehaviorInfo_m_ParticlesPerSecond_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleEmitterBehaviorInfo *arg1 = (ParticleEmitterBehaviorInfo *) 0 ;
  float result;
  
  SWIG_check_num_args("ParticleEmitterBehaviorInfo::m_ParticlesPerSecond",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::m_ParticlesPerSecond",1,"ParticleEmitterBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleEmitterBehaviorInfo,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorInfo_m_ParticlesPerSecond_get",1,SWIGTYPE_p_ParticleEmitterBehaviorInfo);
  }
  
  result = (float) ((arg1)->m_ParticlesPerSecond);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBehaviorInfo_m_ParticleSize_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleEmitterBehaviorInfo *arg1 = (ParticleEmitterBehaviorInfo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ParticleEmitterBehaviorInfo::m_ParticleSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::m_ParticleSize",1,"ParticleEmitterBehaviorInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::m_ParticleSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleEmitterBehaviorInfo,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorInfo_m_ParticleSize_set",1,SWIGTYPE_p_ParticleEmitterBehaviorInfo);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_ParticleSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleEmitterBehaviorInfo_m_ParticleSize_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleEmitterBehaviorInfo *arg1 = (ParticleEmitterBehaviorInfo *) 0 ;
  float result;
  
  SWIG_check_num_args("ParticleEmitterBehaviorInfo::m_ParticleSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::m_ParticleSize",1,"ParticleEmitterBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleEmitterBehaviorInfo,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorInfo_m_ParticleSize_get",1,SWIGTYPE_p_ParticleEmitterBehaviorInfo);
  }
  
  result = (float) ((arg1)->m_ParticleSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleEmitterBehaviorInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  unsigned int arg2 ;
  float arg3 ;
  float arg4 ;
  ParticleEmitterBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo",4,"float");
  arg1 = (IDType)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (ParticleEmitterBehaviorInfo *)new ParticleEmitterBehaviorInfo(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleEmitterBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleEmitterBehaviorInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  unsigned int arg2 ;
  float arg3 ;
  ParticleEmitterBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo",3,"float");
  arg1 = (IDType)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (ParticleEmitterBehaviorInfo *)new ParticleEmitterBehaviorInfo(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleEmitterBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleEmitterBehaviorInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  unsigned int arg2 ;
  ParticleEmitterBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo",2,"unsigned int");
  arg1 = (IDType)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (ParticleEmitterBehaviorInfo *)new ParticleEmitterBehaviorInfo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleEmitterBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleEmitterBehaviorInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  ParticleEmitterBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo",1,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  result = (ParticleEmitterBehaviorInfo *)new ParticleEmitterBehaviorInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleEmitterBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleEmitterBehaviorInfo(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ParticleEmitterBehaviorInfo__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ParticleEmitterBehaviorInfo__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ParticleEmitterBehaviorInfo__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ParticleEmitterBehaviorInfo__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParticleEmitterBehaviorInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo(IDType,unsigned int,float,float)\n"
    "    ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo(IDType,unsigned int,float)\n"
    "    ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo(IDType,unsigned int)\n"
    "    ParticleEmitterBehaviorInfo::ParticleEmitterBehaviorInfo(IDType)\n");
  lua_error(L);return 0;
}


static void swig_delete_ParticleEmitterBehaviorInfo(void *obj) {
ParticleEmitterBehaviorInfo *arg1 = (ParticleEmitterBehaviorInfo *) obj;
delete arg1;
}
static swig_lua_method swig_ParticleEmitterBehaviorInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ParticleEmitterBehaviorInfo_attributes[] = {
    { "m_shaderFactoryID", _wrap_ParticleEmitterBehaviorInfo_m_shaderFactoryID_get, _wrap_ParticleEmitterBehaviorInfo_m_shaderFactoryID_set},
    { "m_MaxNumberOfParticles", _wrap_ParticleEmitterBehaviorInfo_m_MaxNumberOfParticles_get, _wrap_ParticleEmitterBehaviorInfo_m_MaxNumberOfParticles_set},
    { "m_ParticlesPerSecond", _wrap_ParticleEmitterBehaviorInfo_m_ParticlesPerSecond_get, _wrap_ParticleEmitterBehaviorInfo_m_ParticlesPerSecond_set},
    { "m_ParticleSize", _wrap_ParticleEmitterBehaviorInfo_m_ParticleSize_get, _wrap_ParticleEmitterBehaviorInfo_m_ParticleSize_set},
    {0,0,0}
};
static swig_lua_attribute swig_ParticleEmitterBehaviorInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleEmitterBehaviorInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ParticleEmitterBehaviorInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ParticleEmitterBehaviorInfo_bases[] = {0};
static const char *swig_ParticleEmitterBehaviorInfo_base_names[] = {0};
static swig_lua_class _wrap_class_ParticleEmitterBehaviorInfo = { "ParticleEmitterBehaviorInfo", &SWIGTYPE_p_ParticleEmitterBehaviorInfo,_wrap_new_ParticleEmitterBehaviorInfo, swig_delete_ParticleEmitterBehaviorInfo, swig_ParticleEmitterBehaviorInfo_methods, swig_ParticleEmitterBehaviorInfo_attributes, { "ParticleEmitterBehaviorInfo", swig_ParticleEmitterBehaviorInfo_cls_methods, swig_ParticleEmitterBehaviorInfo_cls_attributes, swig_ParticleEmitterBehaviorInfo_cls_constants }, swig_ParticleEmitterBehaviorInfo_bases, swig_ParticleEmitterBehaviorInfo_base_names };

static int _wrap_ParticleEmitterBehaviorFactory_render(lua_State* L) {
  int SWIG_arg = 0;
  ParticleEmitterBehaviorFactory *arg1 = (ParticleEmitterBehaviorFactory *) 0 ;
  
  SWIG_check_num_args("ParticleEmitterBehaviorFactory::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleEmitterBehaviorFactory::render",1,"ParticleEmitterBehaviorFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleEmitterBehaviorFactory,0))){
    SWIG_fail_ptr("ParticleEmitterBehaviorFactory_render",1,SWIGTYPE_p_ParticleEmitterBehaviorFactory);
  }
  
  (arg1)->render();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_ParticleEmitterBehaviorFactory_methods[] = {
    {"render", _wrap_ParticleEmitterBehaviorFactory_render}, 
    {0,0}
};
static swig_lua_attribute swig_ParticleEmitterBehaviorFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ParticleEmitterBehaviorFactory_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleEmitterBehaviorFactory_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ParticleEmitterBehaviorFactory_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ParticleEmitterBehaviorFactory_bases[] = {0,0};
static const char *swig_ParticleEmitterBehaviorFactory_base_names[] = {"AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *",0};
static swig_lua_class _wrap_class_ParticleEmitterBehaviorFactory = { "ParticleEmitterBehaviorFactory", &SWIGTYPE_p_ParticleEmitterBehaviorFactory,0,0, swig_ParticleEmitterBehaviorFactory_methods, swig_ParticleEmitterBehaviorFactory_attributes, { "ParticleEmitterBehaviorFactory", swig_ParticleEmitterBehaviorFactory_cls_methods, swig_ParticleEmitterBehaviorFactory_cls_attributes, swig_ParticleEmitterBehaviorFactory_cls_constants }, swig_ParticleEmitterBehaviorFactory_bases, swig_ParticleEmitterBehaviorFactory_base_names };

static int _wrap_new_PathInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  bool arg2 ;
  PathInfo *result = 0 ;
  
  SWIG_check_num_args("PathInfo::PathInfo",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("PathInfo::PathInfo",1,"std::string const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("PathInfo::PathInfo",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_PathInfo",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (PathInfo *)new PathInfo((std::string const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PathInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PathInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  PathInfo *result = 0 ;
  
  SWIG_check_num_args("PathInfo::PathInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("PathInfo::PathInfo",1,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_PathInfo",1,SWIGTYPE_p_std__string);
  }
  
  result = (PathInfo *)new PathInfo((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PathInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PathInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  PathInfo *result = 0 ;
  
  SWIG_check_num_args("PathInfo::PathInfo",0,0)
  result = (PathInfo *)new PathInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PathInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PathInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  PathInfo *arg1 = 0 ;
  PathInfo *result = 0 ;
  
  SWIG_check_num_args("PathInfo::PathInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("PathInfo::PathInfo",1,"PathInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PathInfo,0))){
    SWIG_fail_ptr("new_PathInfo",1,SWIGTYPE_p_PathInfo);
  }
  
  result = (PathInfo *)new PathInfo((PathInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PathInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PathInfo(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PathInfo__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PathInfo__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_PathInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PathInfo__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_PathInfo__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PathInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    PathInfo::PathInfo(std::string const &,bool)\n"
    "    PathInfo::PathInfo(std::string const &)\n"
    "    PathInfo::PathInfo()\n"
    "    PathInfo::PathInfo(PathInfo const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PathInfo_m_curveName_set(lua_State* L) {
  int SWIG_arg = 0;
  PathInfo *arg1 = (PathInfo *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("PathInfo::m_curveName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PathInfo::m_curveName",1,"PathInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("PathInfo::m_curveName",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PathInfo,0))){
    SWIG_fail_ptr("PathInfo_m_curveName_set",1,SWIGTYPE_p_PathInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("PathInfo_m_curveName_set",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->m_curveName = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathInfo_m_curveName_get(lua_State* L) {
  int SWIG_arg = 0;
  PathInfo *arg1 = (PathInfo *) 0 ;
  std::string result;
  
  SWIG_check_num_args("PathInfo::m_curveName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PathInfo::m_curveName",1,"PathInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PathInfo,0))){
    SWIG_fail_ptr("PathInfo_m_curveName_get",1,SWIGTYPE_p_PathInfo);
  }
  
  result =  ((arg1)->m_curveName);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathInfo_m_Looped_set(lua_State* L) {
  int SWIG_arg = 0;
  PathInfo *arg1 = (PathInfo *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("PathInfo::m_Looped",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PathInfo::m_Looped",1,"PathInfo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("PathInfo::m_Looped",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PathInfo,0))){
    SWIG_fail_ptr("PathInfo_m_Looped_set",1,SWIGTYPE_p_PathInfo);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_Looped = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathInfo_m_Looped_get(lua_State* L) {
  int SWIG_arg = 0;
  PathInfo *arg1 = (PathInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("PathInfo::m_Looped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PathInfo::m_Looped",1,"PathInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PathInfo,0))){
    SWIG_fail_ptr("PathInfo_m_Looped_get",1,SWIGTYPE_p_PathInfo);
  }
  
  result = (bool) ((arg1)->m_Looped);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PathInfo(void *obj) {
PathInfo *arg1 = (PathInfo *) obj;
delete arg1;
}
static swig_lua_method swig_PathInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_PathInfo_attributes[] = {
    { "m_curveName", _wrap_PathInfo_m_curveName_get, _wrap_PathInfo_m_curveName_set},
    { "m_Looped", _wrap_PathInfo_m_Looped_get, _wrap_PathInfo_m_Looped_set},
    {0,0,0}
};
static swig_lua_attribute swig_PathInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PathInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_PathInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_PathInfo_bases[] = {0};
static const char *swig_PathInfo_base_names[] = {0};
static swig_lua_class _wrap_class_PathInfo = { "PathInfo", &SWIGTYPE_p_PathInfo,_wrap_new_PathInfo, swig_delete_PathInfo, swig_PathInfo_methods, swig_PathInfo_attributes, { "PathInfo", swig_PathInfo_cls_methods, swig_PathInfo_cls_attributes, swig_PathInfo_cls_constants }, swig_PathInfo_bases, swig_PathInfo_base_names };

static int _wrap_SteeringBehaviorInfo_m_Type_set(lua_State* L) {
  int SWIG_arg = 0;
  SteeringBehaviorInfo *arg1 = (SteeringBehaviorInfo *) 0 ;
  SteeringBehaviorTypes arg2 ;
  
  SWIG_check_num_args("SteeringBehaviorInfo::m_Type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringBehaviorInfo::m_Type",1,"SteeringBehaviorInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SteeringBehaviorInfo::m_Type",2,"SteeringBehaviorTypes");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringBehaviorInfo,0))){
    SWIG_fail_ptr("SteeringBehaviorInfo_m_Type_set",1,SWIGTYPE_p_SteeringBehaviorInfo);
  }
  
  arg2 = (SteeringBehaviorTypes)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_Type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringBehaviorInfo_m_Type_get(lua_State* L) {
  int SWIG_arg = 0;
  SteeringBehaviorInfo *arg1 = (SteeringBehaviorInfo *) 0 ;
  SteeringBehaviorTypes result;
  
  SWIG_check_num_args("SteeringBehaviorInfo::m_Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringBehaviorInfo::m_Type",1,"SteeringBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringBehaviorInfo,0))){
    SWIG_fail_ptr("SteeringBehaviorInfo_m_Type_get",1,SWIGTYPE_p_SteeringBehaviorInfo);
  }
  
  result = (SteeringBehaviorTypes) ((arg1)->m_Type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringBehaviorInfo_m_PathInfo_set(lua_State* L) {
  int SWIG_arg = 0;
  SteeringBehaviorInfo *arg1 = (SteeringBehaviorInfo *) 0 ;
  PathInfo *arg2 = (PathInfo *) 0 ;
  
  SWIG_check_num_args("SteeringBehaviorInfo::m_PathInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringBehaviorInfo::m_PathInfo",1,"SteeringBehaviorInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SteeringBehaviorInfo::m_PathInfo",2,"PathInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringBehaviorInfo,0))){
    SWIG_fail_ptr("SteeringBehaviorInfo_m_PathInfo_set",1,SWIGTYPE_p_SteeringBehaviorInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_PathInfo,0))){
    SWIG_fail_ptr("SteeringBehaviorInfo_m_PathInfo_set",2,SWIGTYPE_p_PathInfo);
  }
  
  if (arg1) (arg1)->m_PathInfo = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SteeringBehaviorInfo_m_PathInfo_get(lua_State* L) {
  int SWIG_arg = 0;
  SteeringBehaviorInfo *arg1 = (SteeringBehaviorInfo *) 0 ;
  PathInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringBehaviorInfo::m_PathInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SteeringBehaviorInfo::m_PathInfo",1,"SteeringBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SteeringBehaviorInfo,0))){
    SWIG_fail_ptr("SteeringBehaviorInfo_m_PathInfo_get",1,SWIGTYPE_p_SteeringBehaviorInfo);
  }
  
  result = (PathInfo *)& ((arg1)->m_PathInfo);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PathInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SteeringBehaviorInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SteeringBehaviorTypes arg1 ;
  PathInfo arg2 ;
  PathInfo *argp2 ;
  SteeringBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringBehaviorInfo::SteeringBehaviorInfo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SteeringBehaviorInfo::SteeringBehaviorInfo",1,"SteeringBehaviorTypes");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SteeringBehaviorInfo::SteeringBehaviorInfo",2,"PathInfo");
  arg1 = (SteeringBehaviorTypes)(int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_PathInfo,0))){
    SWIG_fail_ptr("new_SteeringBehaviorInfo",2,SWIGTYPE_p_PathInfo);
  }
  arg2 = *argp2;
  
  result = (SteeringBehaviorInfo *)new SteeringBehaviorInfo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SteeringBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SteeringBehaviorInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SteeringBehaviorTypes arg1 ;
  SteeringBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringBehaviorInfo::SteeringBehaviorInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SteeringBehaviorInfo::SteeringBehaviorInfo",1,"SteeringBehaviorTypes");
  arg1 = (SteeringBehaviorTypes)(int)lua_tonumber(L, 1);
  result = (SteeringBehaviorInfo *)new SteeringBehaviorInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SteeringBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SteeringBehaviorInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SteeringBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("SteeringBehaviorInfo::SteeringBehaviorInfo",0,0)
  result = (SteeringBehaviorInfo *)new SteeringBehaviorInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SteeringBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SteeringBehaviorInfo(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SteeringBehaviorInfo__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SteeringBehaviorInfo__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_PathInfo, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_SteeringBehaviorInfo__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SteeringBehaviorInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SteeringBehaviorInfo::SteeringBehaviorInfo(SteeringBehaviorTypes,PathInfo)\n"
    "    SteeringBehaviorInfo::SteeringBehaviorInfo(SteeringBehaviorTypes)\n"
    "    SteeringBehaviorInfo::SteeringBehaviorInfo()\n");
  lua_error(L);return 0;
}


static void swig_delete_SteeringBehaviorInfo(void *obj) {
SteeringBehaviorInfo *arg1 = (SteeringBehaviorInfo *) obj;
delete arg1;
}
static swig_lua_method swig_SteeringBehaviorInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_SteeringBehaviorInfo_attributes[] = {
    { "m_Type", _wrap_SteeringBehaviorInfo_m_Type_get, _wrap_SteeringBehaviorInfo_m_Type_set},
    { "m_PathInfo", _wrap_SteeringBehaviorInfo_m_PathInfo_get, _wrap_SteeringBehaviorInfo_m_PathInfo_set},
    {0,0,0}
};
static swig_lua_attribute swig_SteeringBehaviorInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SteeringBehaviorInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_SteeringBehaviorInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_SteeringBehaviorInfo_bases[] = {0};
static const char *swig_SteeringBehaviorInfo_base_names[] = {0};
static swig_lua_class _wrap_class_SteeringBehaviorInfo = { "SteeringBehaviorInfo", &SWIGTYPE_p_SteeringBehaviorInfo,_wrap_new_SteeringBehaviorInfo, swig_delete_SteeringBehaviorInfo, swig_SteeringBehaviorInfo_methods, swig_SteeringBehaviorInfo_attributes, { "SteeringBehaviorInfo", swig_SteeringBehaviorInfo_cls_methods, swig_SteeringBehaviorInfo_cls_attributes, swig_SteeringBehaviorInfo_cls_constants }, swig_SteeringBehaviorInfo_bases, swig_SteeringBehaviorInfo_base_names };

static int _wrap_new_WeightedSteeringBehaviorInfo(lua_State* L) {
  int SWIG_arg = 0;
  WeightedSteeringBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("WeightedSteeringBehaviorInfo::WeightedSteeringBehaviorInfo",0,0)
  result = (WeightedSteeringBehaviorInfo *)new WeightedSteeringBehaviorInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WeightedSteeringBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WeightedSteeringBehaviorInfo(void *obj) {
WeightedSteeringBehaviorInfo *arg1 = (WeightedSteeringBehaviorInfo *) obj;
delete arg1;
}
static swig_lua_method swig_WeightedSteeringBehaviorInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_WeightedSteeringBehaviorInfo_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_WeightedSteeringBehaviorInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WeightedSteeringBehaviorInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_WeightedSteeringBehaviorInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_WeightedSteeringBehaviorInfo_bases[] = {0,0};
static const char *swig_WeightedSteeringBehaviorInfo_base_names[] = {"SteeringBehaviorInfo *",0};
static swig_lua_class _wrap_class_WeightedSteeringBehaviorInfo = { "WeightedSteeringBehaviorInfo", &SWIGTYPE_p_WeightedSteeringBehaviorInfo,_wrap_new_WeightedSteeringBehaviorInfo, swig_delete_WeightedSteeringBehaviorInfo, swig_WeightedSteeringBehaviorInfo_methods, swig_WeightedSteeringBehaviorInfo_attributes, { "WeightedSteeringBehaviorInfo", swig_WeightedSteeringBehaviorInfo_cls_methods, swig_WeightedSteeringBehaviorInfo_cls_attributes, swig_WeightedSteeringBehaviorInfo_cls_constants }, swig_WeightedSteeringBehaviorInfo_bases, swig_WeightedSteeringBehaviorInfo_base_names };

static swig_lua_method swig_SteeringBehaviorFactory_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_SteeringBehaviorFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_SteeringBehaviorFactory_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SteeringBehaviorFactory_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_SteeringBehaviorFactory_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_SteeringBehaviorFactory_bases[] = {0,0};
static const char *swig_SteeringBehaviorFactory_base_names[] = {"AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *",0};
static swig_lua_class _wrap_class_SteeringBehaviorFactory = { "SteeringBehaviorFactory", &SWIGTYPE_p_SteeringBehaviorFactory,0,0, swig_SteeringBehaviorFactory_methods, swig_SteeringBehaviorFactory_attributes, { "SteeringBehaviorFactory", swig_SteeringBehaviorFactory_cls_methods, swig_SteeringBehaviorFactory_cls_attributes, swig_SteeringBehaviorFactory_cls_constants }, swig_SteeringBehaviorFactory_bases, swig_SteeringBehaviorFactory_base_names };

static int _wrap_TextureBehaviorInfo_m_WidthTexture_set(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *arg1 = (TextureBehaviorInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TextureBehaviorInfo::m_WidthTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureBehaviorInfo::m_WidthTexture",1,"TextureBehaviorInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextureBehaviorInfo::m_WidthTexture",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("TextureBehaviorInfo_m_WidthTexture_set",1,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_WidthTexture = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorInfo_m_WidthTexture_get(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *arg1 = (TextureBehaviorInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("TextureBehaviorInfo::m_WidthTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureBehaviorInfo::m_WidthTexture",1,"TextureBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("TextureBehaviorInfo_m_WidthTexture_get",1,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  result = (int) ((arg1)->m_WidthTexture);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorInfo_m_HeightTexture_set(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *arg1 = (TextureBehaviorInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TextureBehaviorInfo::m_HeightTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureBehaviorInfo::m_HeightTexture",1,"TextureBehaviorInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextureBehaviorInfo::m_HeightTexture",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("TextureBehaviorInfo_m_HeightTexture_set",1,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_HeightTexture = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorInfo_m_HeightTexture_get(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *arg1 = (TextureBehaviorInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("TextureBehaviorInfo::m_HeightTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureBehaviorInfo::m_HeightTexture",1,"TextureBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("TextureBehaviorInfo_m_HeightTexture_get",1,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  result = (int) ((arg1)->m_HeightTexture);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorInfo_m_WidthSubSprite_set(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *arg1 = (TextureBehaviorInfo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("TextureBehaviorInfo::m_WidthSubSprite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureBehaviorInfo::m_WidthSubSprite",1,"TextureBehaviorInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextureBehaviorInfo::m_WidthSubSprite",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("TextureBehaviorInfo_m_WidthSubSprite_set",1,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_WidthSubSprite = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorInfo_m_WidthSubSprite_get(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *arg1 = (TextureBehaviorInfo *) 0 ;
  float result;
  
  SWIG_check_num_args("TextureBehaviorInfo::m_WidthSubSprite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureBehaviorInfo::m_WidthSubSprite",1,"TextureBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("TextureBehaviorInfo_m_WidthSubSprite_get",1,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  result = (float) ((arg1)->m_WidthSubSprite);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorInfo_m_HeightSubSprite_set(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *arg1 = (TextureBehaviorInfo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("TextureBehaviorInfo::m_HeightSubSprite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureBehaviorInfo::m_HeightSubSprite",1,"TextureBehaviorInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextureBehaviorInfo::m_HeightSubSprite",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("TextureBehaviorInfo_m_HeightSubSprite_set",1,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_HeightSubSprite = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorInfo_m_HeightSubSprite_get(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *arg1 = (TextureBehaviorInfo *) 0 ;
  float result;
  
  SWIG_check_num_args("TextureBehaviorInfo::m_HeightSubSprite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureBehaviorInfo::m_HeightSubSprite",1,"TextureBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("TextureBehaviorInfo_m_HeightSubSprite_get",1,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  result = (float) ((arg1)->m_HeightSubSprite);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorInfo_m_XOffsetOnTexture_set(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *arg1 = (TextureBehaviorInfo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("TextureBehaviorInfo::m_XOffsetOnTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureBehaviorInfo::m_XOffsetOnTexture",1,"TextureBehaviorInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextureBehaviorInfo::m_XOffsetOnTexture",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("TextureBehaviorInfo_m_XOffsetOnTexture_set",1,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_XOffsetOnTexture = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorInfo_m_XOffsetOnTexture_get(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *arg1 = (TextureBehaviorInfo *) 0 ;
  float result;
  
  SWIG_check_num_args("TextureBehaviorInfo::m_XOffsetOnTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureBehaviorInfo::m_XOffsetOnTexture",1,"TextureBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("TextureBehaviorInfo_m_XOffsetOnTexture_get",1,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  result = (float) ((arg1)->m_XOffsetOnTexture);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorInfo_m_YOffsetOnTexture_set(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *arg1 = (TextureBehaviorInfo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("TextureBehaviorInfo::m_YOffsetOnTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureBehaviorInfo::m_YOffsetOnTexture",1,"TextureBehaviorInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextureBehaviorInfo::m_YOffsetOnTexture",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("TextureBehaviorInfo_m_YOffsetOnTexture_set",1,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_YOffsetOnTexture = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorInfo_m_YOffsetOnTexture_get(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *arg1 = (TextureBehaviorInfo *) 0 ;
  float result;
  
  SWIG_check_num_args("TextureBehaviorInfo::m_YOffsetOnTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureBehaviorInfo::m_YOffsetOnTexture",1,"TextureBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("TextureBehaviorInfo_m_YOffsetOnTexture_get",1,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  result = (float) ((arg1)->m_YOffsetOnTexture);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorInfo_m_ViewObjectFactoryID_set(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *arg1 = (TextureBehaviorInfo *) 0 ;
  IDType arg2 ;
  
  SWIG_check_num_args("TextureBehaviorInfo::m_ViewObjectFactoryID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureBehaviorInfo::m_ViewObjectFactoryID",1,"TextureBehaviorInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextureBehaviorInfo::m_ViewObjectFactoryID",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("TextureBehaviorInfo_m_ViewObjectFactoryID_set",1,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_ViewObjectFactoryID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorInfo_m_ViewObjectFactoryID_get(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *arg1 = (TextureBehaviorInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("TextureBehaviorInfo::m_ViewObjectFactoryID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureBehaviorInfo::m_ViewObjectFactoryID",1,"TextureBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("TextureBehaviorInfo_m_ViewObjectFactoryID_get",1,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  result = (IDType) ((arg1)->m_ViewObjectFactoryID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorInfo_m_textureIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *arg1 = (TextureBehaviorInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("TextureBehaviorInfo::m_textureIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureBehaviorInfo::m_textureIndex",1,"TextureBehaviorInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextureBehaviorInfo::m_textureIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("TextureBehaviorInfo_m_textureIndex_set",1,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_textureIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureBehaviorInfo_m_textureIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *arg1 = (TextureBehaviorInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("TextureBehaviorInfo::m_textureIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureBehaviorInfo::m_textureIndex",1,"TextureBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("TextureBehaviorInfo_m_textureIndex_get",1,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  result = (unsigned int) ((arg1)->m_textureIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextureBehaviorInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  unsigned int arg7 ;
  TextureBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("TextureBehaviorInfo::TextureBehaviorInfo",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",7,"unsigned int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (unsigned int)lua_tonumber(L, 7);
  result = (TextureBehaviorInfo *)new TextureBehaviorInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextureBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextureBehaviorInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  TextureBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("TextureBehaviorInfo::TextureBehaviorInfo",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",6,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  result = (TextureBehaviorInfo *)new TextureBehaviorInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextureBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextureBehaviorInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  TextureBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("TextureBehaviorInfo::TextureBehaviorInfo",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",5,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (TextureBehaviorInfo *)new TextureBehaviorInfo(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextureBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextureBehaviorInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  TextureBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("TextureBehaviorInfo::TextureBehaviorInfo",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",4,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (TextureBehaviorInfo *)new TextureBehaviorInfo(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextureBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextureBehaviorInfo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  float arg3 ;
  TextureBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("TextureBehaviorInfo::TextureBehaviorInfo",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",3,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (TextureBehaviorInfo *)new TextureBehaviorInfo(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextureBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextureBehaviorInfo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  TextureBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("TextureBehaviorInfo::TextureBehaviorInfo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (TextureBehaviorInfo *)new TextureBehaviorInfo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextureBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextureBehaviorInfo__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  TextureBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("TextureBehaviorInfo::TextureBehaviorInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TextureBehaviorInfo::TextureBehaviorInfo",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (TextureBehaviorInfo *)new TextureBehaviorInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextureBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextureBehaviorInfo__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("TextureBehaviorInfo::TextureBehaviorInfo",0,0)
  result = (TextureBehaviorInfo *)new TextureBehaviorInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextureBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextureBehaviorInfo(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TextureBehaviorInfo__SWIG_7(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TextureBehaviorInfo__SWIG_6(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TextureBehaviorInfo__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_TextureBehaviorInfo__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_TextureBehaviorInfo__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_TextureBehaviorInfo__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_TextureBehaviorInfo__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_new_TextureBehaviorInfo__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TextureBehaviorInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TextureBehaviorInfo::TextureBehaviorInfo(int,int,float,float,float,float,unsigned int)\n"
    "    TextureBehaviorInfo::TextureBehaviorInfo(int,int,float,float,float,float)\n"
    "    TextureBehaviorInfo::TextureBehaviorInfo(int,int,float,float,float)\n"
    "    TextureBehaviorInfo::TextureBehaviorInfo(int,int,float,float)\n"
    "    TextureBehaviorInfo::TextureBehaviorInfo(int,int,float)\n"
    "    TextureBehaviorInfo::TextureBehaviorInfo(int,int)\n"
    "    TextureBehaviorInfo::TextureBehaviorInfo(int)\n"
    "    TextureBehaviorInfo::TextureBehaviorInfo()\n");
  lua_error(L);return 0;
}


static void swig_delete_TextureBehaviorInfo(void *obj) {
TextureBehaviorInfo *arg1 = (TextureBehaviorInfo *) obj;
delete arg1;
}
static swig_lua_method swig_TextureBehaviorInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_TextureBehaviorInfo_attributes[] = {
    { "m_WidthTexture", _wrap_TextureBehaviorInfo_m_WidthTexture_get, _wrap_TextureBehaviorInfo_m_WidthTexture_set},
    { "m_HeightTexture", _wrap_TextureBehaviorInfo_m_HeightTexture_get, _wrap_TextureBehaviorInfo_m_HeightTexture_set},
    { "m_WidthSubSprite", _wrap_TextureBehaviorInfo_m_WidthSubSprite_get, _wrap_TextureBehaviorInfo_m_WidthSubSprite_set},
    { "m_HeightSubSprite", _wrap_TextureBehaviorInfo_m_HeightSubSprite_get, _wrap_TextureBehaviorInfo_m_HeightSubSprite_set},
    { "m_XOffsetOnTexture", _wrap_TextureBehaviorInfo_m_XOffsetOnTexture_get, _wrap_TextureBehaviorInfo_m_XOffsetOnTexture_set},
    { "m_YOffsetOnTexture", _wrap_TextureBehaviorInfo_m_YOffsetOnTexture_get, _wrap_TextureBehaviorInfo_m_YOffsetOnTexture_set},
    { "m_ViewObjectFactoryID", _wrap_TextureBehaviorInfo_m_ViewObjectFactoryID_get, _wrap_TextureBehaviorInfo_m_ViewObjectFactoryID_set},
    { "m_textureIndex", _wrap_TextureBehaviorInfo_m_textureIndex_get, _wrap_TextureBehaviorInfo_m_textureIndex_set},
    {0,0,0}
};
static swig_lua_attribute swig_TextureBehaviorInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TextureBehaviorInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_TextureBehaviorInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_TextureBehaviorInfo_bases[] = {0};
static const char *swig_TextureBehaviorInfo_base_names[] = {0};
static swig_lua_class _wrap_class_TextureBehaviorInfo = { "TextureBehaviorInfo", &SWIGTYPE_p_TextureBehaviorInfo,_wrap_new_TextureBehaviorInfo, swig_delete_TextureBehaviorInfo, swig_TextureBehaviorInfo_methods, swig_TextureBehaviorInfo_attributes, { "TextureBehaviorInfo", swig_TextureBehaviorInfo_cls_methods, swig_TextureBehaviorInfo_cls_attributes, swig_TextureBehaviorInfo_cls_constants }, swig_TextureBehaviorInfo_bases, swig_TextureBehaviorInfo_base_names };

static swig_lua_method swig_TextureBehaviorFactory_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_TextureBehaviorFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_TextureBehaviorFactory_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TextureBehaviorFactory_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_TextureBehaviorFactory_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_TextureBehaviorFactory_bases[] = {0,0};
static const char *swig_TextureBehaviorFactory_base_names[] = {"AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *",0};
static swig_lua_class _wrap_class_TextureBehaviorFactory = { "TextureBehaviorFactory", &SWIGTYPE_p_TextureBehaviorFactory,0,0, swig_TextureBehaviorFactory_methods, swig_TextureBehaviorFactory_attributes, { "TextureBehaviorFactory", swig_TextureBehaviorFactory_cls_methods, swig_TextureBehaviorFactory_cls_attributes, swig_TextureBehaviorFactory_cls_constants }, swig_TextureBehaviorFactory_bases, swig_TextureBehaviorFactory_base_names };

static int _wrap_TextViewObjectFactory_render(lua_State* L) {
  int SWIG_arg = 0;
  TextViewObjectFactory *arg1 = (TextViewObjectFactory *) 0 ;
  
  SWIG_check_num_args("TextViewObjectFactory::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextViewObjectFactory::render",1,"TextViewObjectFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextViewObjectFactory,0))){
    SWIG_fail_ptr("TextViewObjectFactory_render",1,SWIGTYPE_p_TextViewObjectFactory);
  }
  
  (arg1)->render();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextViewObjectFactory_updateDrawText__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TextViewObjectFactory *arg1 = (TextViewObjectFactory *) 0 ;
  std::string arg2 ;
  LocalizedTextViewObjectType *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btAlignedObjectArray< IDType > *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  std::string *argp2 ;
  LocalizedTextViewObjectType temp3 ;
  
  SWIG_check_num_args("TextViewObjectFactory::updateDrawText",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextViewObjectFactory::updateDrawText",1,"TextViewObjectFactory const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TextViewObjectFactory::updateDrawText",2,"std::string const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextViewObjectFactory::updateDrawText",3,"LocalizedTextViewObjectType const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("TextViewObjectFactory::updateDrawText",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("TextViewObjectFactory::updateDrawText",5,"btAlignedObjectArray< IDType > const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("TextViewObjectFactory::updateDrawText",6,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextViewObjectFactory,0))){
    SWIG_fail_ptr("TextViewObjectFactory_updateDrawText",1,SWIGTYPE_p_TextViewObjectFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("TextViewObjectFactory_updateDrawText",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  temp3=(LocalizedTextViewObjectType)(int)lua_tonumber(L,3); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TextViewObjectFactory_updateDrawText",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btAlignedObjectArrayT_long_long_t,0))){
    SWIG_fail_ptr("TextViewObjectFactory_updateDrawText",5,SWIGTYPE_p_btAlignedObjectArrayT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TextViewObjectFactory_updateDrawText",6,SWIGTYPE_p_btVector3);
  }
  
  ((TextViewObjectFactory const *)arg1)->updateDrawText(arg2,(LocalizedTextViewObjectType const &)*arg3,(btVector3 const &)*arg4,(btAlignedObjectArray< IDType > const &)*arg5,(btVector3 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextViewObjectFactory_updateDrawText__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TextViewObjectFactory *arg1 = (TextViewObjectFactory *) 0 ;
  std::string arg2 ;
  LocalizedTextViewObjectType *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btAlignedObjectArray< IDType > *arg5 = 0 ;
  std::string *argp2 ;
  LocalizedTextViewObjectType temp3 ;
  
  SWIG_check_num_args("TextViewObjectFactory::updateDrawText",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextViewObjectFactory::updateDrawText",1,"TextViewObjectFactory const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TextViewObjectFactory::updateDrawText",2,"std::string const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextViewObjectFactory::updateDrawText",3,"LocalizedTextViewObjectType const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("TextViewObjectFactory::updateDrawText",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("TextViewObjectFactory::updateDrawText",5,"btAlignedObjectArray< IDType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextViewObjectFactory,0))){
    SWIG_fail_ptr("TextViewObjectFactory_updateDrawText",1,SWIGTYPE_p_TextViewObjectFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("TextViewObjectFactory_updateDrawText",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  temp3=(LocalizedTextViewObjectType)(int)lua_tonumber(L,3); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TextViewObjectFactory_updateDrawText",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btAlignedObjectArrayT_long_long_t,0))){
    SWIG_fail_ptr("TextViewObjectFactory_updateDrawText",5,SWIGTYPE_p_btAlignedObjectArrayT_long_long_t);
  }
  
  ((TextViewObjectFactory const *)arg1)->updateDrawText(arg2,(LocalizedTextViewObjectType const &)*arg3,(btVector3 const &)*arg4,(btAlignedObjectArray< IDType > const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextViewObjectFactory_updateDrawText(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TextViewObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_long_long_t, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_TextViewObjectFactory_updateDrawText__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TextViewObjectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_long_long_t, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_TextViewObjectFactory_updateDrawText__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TextViewObjectFactory_updateDrawText'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TextViewObjectFactory::updateDrawText(std::string const,LocalizedTextViewObjectType const &,btVector3 const &,btAlignedObjectArray< IDType > const &,btVector3 const &) const\n"
    "    TextViewObjectFactory::updateDrawText(std::string const,LocalizedTextViewObjectType const &,btVector3 const &,btAlignedObjectArray< IDType > const &) const\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_TextViewObjectFactory_methods[] = {
    {"render", _wrap_TextViewObjectFactory_render}, 
    {"updateDrawText", _wrap_TextViewObjectFactory_updateDrawText}, 
    {0,0}
};
static swig_lua_attribute swig_TextViewObjectFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_TextViewObjectFactory_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TextViewObjectFactory_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_TextViewObjectFactory_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_TextViewObjectFactory_bases[] = {0,0};
static const char *swig_TextViewObjectFactory_base_names[] = {"AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *",0};
static swig_lua_class _wrap_class_TextViewObjectFactory = { "TextViewObjectFactory", &SWIGTYPE_p_TextViewObjectFactory,0,0, swig_TextViewObjectFactory_methods, swig_TextViewObjectFactory_attributes, { "TextViewObjectFactory", swig_TextViewObjectFactory_cls_methods, swig_TextViewObjectFactory_cls_attributes, swig_TextViewObjectFactory_cls_constants }, swig_TextViewObjectFactory_bases, swig_TextViewObjectFactory_base_names };

static int _wrap_UpdateBehaviorInfo_m_Type_set(lua_State* L) {
  int SWIG_arg = 0;
  UpdateBehaviorInfo *arg1 = (UpdateBehaviorInfo *) 0 ;
  UpdateBehaviorTypes arg2 ;
  
  SWIG_check_num_args("UpdateBehaviorInfo::m_Type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UpdateBehaviorInfo::m_Type",1,"UpdateBehaviorInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UpdateBehaviorInfo::m_Type",2,"UpdateBehaviorTypes");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UpdateBehaviorInfo,0))){
    SWIG_fail_ptr("UpdateBehaviorInfo_m_Type_set",1,SWIGTYPE_p_UpdateBehaviorInfo);
  }
  
  arg2 = (UpdateBehaviorTypes)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_Type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpdateBehaviorInfo_m_Type_get(lua_State* L) {
  int SWIG_arg = 0;
  UpdateBehaviorInfo *arg1 = (UpdateBehaviorInfo *) 0 ;
  UpdateBehaviorTypes result;
  
  SWIG_check_num_args("UpdateBehaviorInfo::m_Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UpdateBehaviorInfo::m_Type",1,"UpdateBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UpdateBehaviorInfo,0))){
    SWIG_fail_ptr("UpdateBehaviorInfo_m_Type_get",1,SWIGTYPE_p_UpdateBehaviorInfo);
  }
  
  result = (UpdateBehaviorTypes) ((arg1)->m_Type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UpdateBehaviorInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UpdateBehaviorTypes arg1 ;
  UpdateBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("UpdateBehaviorInfo::UpdateBehaviorInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("UpdateBehaviorInfo::UpdateBehaviorInfo",1,"UpdateBehaviorTypes");
  arg1 = (UpdateBehaviorTypes)(int)lua_tonumber(L, 1);
  result = (UpdateBehaviorInfo *)new UpdateBehaviorInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_UpdateBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UpdateBehaviorInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UpdateBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("UpdateBehaviorInfo::UpdateBehaviorInfo",0,0)
  result = (UpdateBehaviorInfo *)new UpdateBehaviorInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_UpdateBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UpdateBehaviorInfo(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UpdateBehaviorInfo__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UpdateBehaviorInfo__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UpdateBehaviorInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    UpdateBehaviorInfo::UpdateBehaviorInfo(UpdateBehaviorTypes)\n"
    "    UpdateBehaviorInfo::UpdateBehaviorInfo()\n");
  lua_error(L);return 0;
}


static void swig_delete_UpdateBehaviorInfo(void *obj) {
UpdateBehaviorInfo *arg1 = (UpdateBehaviorInfo *) obj;
delete arg1;
}
static swig_lua_method swig_UpdateBehaviorInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_UpdateBehaviorInfo_attributes[] = {
    { "m_Type", _wrap_UpdateBehaviorInfo_m_Type_get, _wrap_UpdateBehaviorInfo_m_Type_set},
    {0,0,0}
};
static swig_lua_attribute swig_UpdateBehaviorInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_UpdateBehaviorInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_UpdateBehaviorInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_UpdateBehaviorInfo_bases[] = {0};
static const char *swig_UpdateBehaviorInfo_base_names[] = {0};
static swig_lua_class _wrap_class_UpdateBehaviorInfo = { "UpdateBehaviorInfo", &SWIGTYPE_p_UpdateBehaviorInfo,_wrap_new_UpdateBehaviorInfo, swig_delete_UpdateBehaviorInfo, swig_UpdateBehaviorInfo_methods, swig_UpdateBehaviorInfo_attributes, { "UpdateBehaviorInfo", swig_UpdateBehaviorInfo_cls_methods, swig_UpdateBehaviorInfo_cls_attributes, swig_UpdateBehaviorInfo_cls_constants }, swig_UpdateBehaviorInfo_bases, swig_UpdateBehaviorInfo_base_names };

static swig_lua_method swig_UpdateBehaviorFactory_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_UpdateBehaviorFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_UpdateBehaviorFactory_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_UpdateBehaviorFactory_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_UpdateBehaviorFactory_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_UpdateBehaviorFactory_bases[] = {0,0};
static const char *swig_UpdateBehaviorFactory_base_names[] = {"AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *",0};
static swig_lua_class _wrap_class_UpdateBehaviorFactory = { "UpdateBehaviorFactory", &SWIGTYPE_p_UpdateBehaviorFactory,0,0, swig_UpdateBehaviorFactory_methods, swig_UpdateBehaviorFactory_attributes, { "UpdateBehaviorFactory", swig_UpdateBehaviorFactory_cls_methods, swig_UpdateBehaviorFactory_cls_attributes, swig_UpdateBehaviorFactory_cls_constants }, swig_UpdateBehaviorFactory_bases, swig_UpdateBehaviorFactory_base_names };

static int _wrap_CollisionFilterBehaviorInfo_m_Type_set(lua_State* L) {
  int SWIG_arg = 0;
  CollisionFilterBehaviorInfo *arg1 = (CollisionFilterBehaviorInfo *) 0 ;
  CollisionFilterBehaviorTypes arg2 ;
  
  SWIG_check_num_args("CollisionFilterBehaviorInfo::m_Type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CollisionFilterBehaviorInfo::m_Type",1,"CollisionFilterBehaviorInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CollisionFilterBehaviorInfo::m_Type",2,"CollisionFilterBehaviorTypes");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CollisionFilterBehaviorInfo,0))){
    SWIG_fail_ptr("CollisionFilterBehaviorInfo_m_Type_set",1,SWIGTYPE_p_CollisionFilterBehaviorInfo);
  }
  
  arg2 = (CollisionFilterBehaviorTypes)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_Type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionFilterBehaviorInfo_m_Type_get(lua_State* L) {
  int SWIG_arg = 0;
  CollisionFilterBehaviorInfo *arg1 = (CollisionFilterBehaviorInfo *) 0 ;
  CollisionFilterBehaviorTypes result;
  
  SWIG_check_num_args("CollisionFilterBehaviorInfo::m_Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CollisionFilterBehaviorInfo::m_Type",1,"CollisionFilterBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CollisionFilterBehaviorInfo,0))){
    SWIG_fail_ptr("CollisionFilterBehaviorInfo_m_Type_get",1,SWIGTYPE_p_CollisionFilterBehaviorInfo);
  }
  
  result = (CollisionFilterBehaviorTypes) ((arg1)->m_Type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionFilterBehaviorInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CollisionFilterBehaviorTypes arg1 ;
  CollisionFilterBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("CollisionFilterBehaviorInfo::CollisionFilterBehaviorInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CollisionFilterBehaviorInfo::CollisionFilterBehaviorInfo",1,"CollisionFilterBehaviorTypes");
  arg1 = (CollisionFilterBehaviorTypes)(int)lua_tonumber(L, 1);
  result = (CollisionFilterBehaviorInfo *)new CollisionFilterBehaviorInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CollisionFilterBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionFilterBehaviorInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CollisionFilterBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("CollisionFilterBehaviorInfo::CollisionFilterBehaviorInfo",0,0)
  result = (CollisionFilterBehaviorInfo *)new CollisionFilterBehaviorInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CollisionFilterBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionFilterBehaviorInfo(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CollisionFilterBehaviorInfo__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CollisionFilterBehaviorInfo__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CollisionFilterBehaviorInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CollisionFilterBehaviorInfo::CollisionFilterBehaviorInfo(CollisionFilterBehaviorTypes)\n"
    "    CollisionFilterBehaviorInfo::CollisionFilterBehaviorInfo()\n");
  lua_error(L);return 0;
}


static void swig_delete_CollisionFilterBehaviorInfo(void *obj) {
CollisionFilterBehaviorInfo *arg1 = (CollisionFilterBehaviorInfo *) obj;
delete arg1;
}
static swig_lua_method swig_CollisionFilterBehaviorInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CollisionFilterBehaviorInfo_attributes[] = {
    { "m_Type", _wrap_CollisionFilterBehaviorInfo_m_Type_get, _wrap_CollisionFilterBehaviorInfo_m_Type_set},
    {0,0,0}
};
static swig_lua_attribute swig_CollisionFilterBehaviorInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CollisionFilterBehaviorInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CollisionFilterBehaviorInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CollisionFilterBehaviorInfo_bases[] = {0};
static const char *swig_CollisionFilterBehaviorInfo_base_names[] = {0};
static swig_lua_class _wrap_class_CollisionFilterBehaviorInfo = { "CollisionFilterBehaviorInfo", &SWIGTYPE_p_CollisionFilterBehaviorInfo,_wrap_new_CollisionFilterBehaviorInfo, swig_delete_CollisionFilterBehaviorInfo, swig_CollisionFilterBehaviorInfo_methods, swig_CollisionFilterBehaviorInfo_attributes, { "CollisionFilterBehaviorInfo", swig_CollisionFilterBehaviorInfo_cls_methods, swig_CollisionFilterBehaviorInfo_cls_attributes, swig_CollisionFilterBehaviorInfo_cls_constants }, swig_CollisionFilterBehaviorInfo_bases, swig_CollisionFilterBehaviorInfo_base_names };

static swig_lua_method swig_CollisionFilterBehaviorFactory_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CollisionFilterBehaviorFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_CollisionFilterBehaviorFactory_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CollisionFilterBehaviorFactory_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CollisionFilterBehaviorFactory_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CollisionFilterBehaviorFactory_bases[] = {0,0};
static const char *swig_CollisionFilterBehaviorFactory_base_names[] = {"AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *",0};
static swig_lua_class _wrap_class_CollisionFilterBehaviorFactory = { "CollisionFilterBehaviorFactory", &SWIGTYPE_p_CollisionFilterBehaviorFactory,0,0, swig_CollisionFilterBehaviorFactory_methods, swig_CollisionFilterBehaviorFactory_attributes, { "CollisionFilterBehaviorFactory", swig_CollisionFilterBehaviorFactory_cls_methods, swig_CollisionFilterBehaviorFactory_cls_attributes, swig_CollisionFilterBehaviorFactory_cls_constants }, swig_CollisionFilterBehaviorFactory_bases, swig_CollisionFilterBehaviorFactory_base_names };

static int _wrap_CollisionResponseBehaviorInfo_m_Type_set(lua_State* L) {
  int SWIG_arg = 0;
  CollisionResponseBehaviorInfo *arg1 = (CollisionResponseBehaviorInfo *) 0 ;
  CollisionResponseBehaviorTypes arg2 ;
  
  SWIG_check_num_args("CollisionResponseBehaviorInfo::m_Type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CollisionResponseBehaviorInfo::m_Type",1,"CollisionResponseBehaviorInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CollisionResponseBehaviorInfo::m_Type",2,"CollisionResponseBehaviorTypes");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CollisionResponseBehaviorInfo,0))){
    SWIG_fail_ptr("CollisionResponseBehaviorInfo_m_Type_set",1,SWIGTYPE_p_CollisionResponseBehaviorInfo);
  }
  
  arg2 = (CollisionResponseBehaviorTypes)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_Type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponseBehaviorInfo_m_Type_get(lua_State* L) {
  int SWIG_arg = 0;
  CollisionResponseBehaviorInfo *arg1 = (CollisionResponseBehaviorInfo *) 0 ;
  CollisionResponseBehaviorTypes result;
  
  SWIG_check_num_args("CollisionResponseBehaviorInfo::m_Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CollisionResponseBehaviorInfo::m_Type",1,"CollisionResponseBehaviorInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CollisionResponseBehaviorInfo,0))){
    SWIG_fail_ptr("CollisionResponseBehaviorInfo_m_Type_get",1,SWIGTYPE_p_CollisionResponseBehaviorInfo);
  }
  
  result = (CollisionResponseBehaviorTypes) ((arg1)->m_Type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionResponseBehaviorInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CollisionResponseBehaviorTypes arg1 ;
  CollisionResponseBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("CollisionResponseBehaviorInfo::CollisionResponseBehaviorInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CollisionResponseBehaviorInfo::CollisionResponseBehaviorInfo",1,"CollisionResponseBehaviorTypes");
  arg1 = (CollisionResponseBehaviorTypes)(int)lua_tonumber(L, 1);
  result = (CollisionResponseBehaviorInfo *)new CollisionResponseBehaviorInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CollisionResponseBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionResponseBehaviorInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CollisionResponseBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("CollisionResponseBehaviorInfo::CollisionResponseBehaviorInfo",0,0)
  result = (CollisionResponseBehaviorInfo *)new CollisionResponseBehaviorInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CollisionResponseBehaviorInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionResponseBehaviorInfo(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CollisionResponseBehaviorInfo__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CollisionResponseBehaviorInfo__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CollisionResponseBehaviorInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CollisionResponseBehaviorInfo::CollisionResponseBehaviorInfo(CollisionResponseBehaviorTypes)\n"
    "    CollisionResponseBehaviorInfo::CollisionResponseBehaviorInfo()\n");
  lua_error(L);return 0;
}


static void swig_delete_CollisionResponseBehaviorInfo(void *obj) {
CollisionResponseBehaviorInfo *arg1 = (CollisionResponseBehaviorInfo *) obj;
delete arg1;
}
static swig_lua_method swig_CollisionResponseBehaviorInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CollisionResponseBehaviorInfo_attributes[] = {
    { "m_Type", _wrap_CollisionResponseBehaviorInfo_m_Type_get, _wrap_CollisionResponseBehaviorInfo_m_Type_set},
    {0,0,0}
};
static swig_lua_attribute swig_CollisionResponseBehaviorInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CollisionResponseBehaviorInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CollisionResponseBehaviorInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CollisionResponseBehaviorInfo_bases[] = {0};
static const char *swig_CollisionResponseBehaviorInfo_base_names[] = {0};
static swig_lua_class _wrap_class_CollisionResponseBehaviorInfo = { "CollisionResponseBehaviorInfo", &SWIGTYPE_p_CollisionResponseBehaviorInfo,_wrap_new_CollisionResponseBehaviorInfo, swig_delete_CollisionResponseBehaviorInfo, swig_CollisionResponseBehaviorInfo_methods, swig_CollisionResponseBehaviorInfo_attributes, { "CollisionResponseBehaviorInfo", swig_CollisionResponseBehaviorInfo_cls_methods, swig_CollisionResponseBehaviorInfo_cls_attributes, swig_CollisionResponseBehaviorInfo_cls_constants }, swig_CollisionResponseBehaviorInfo_bases, swig_CollisionResponseBehaviorInfo_base_names };

static int _wrap_new_CollisionResponseBehaviorFactory(lua_State* L) {
  int SWIG_arg = 0;
  CollisionResponseBehaviorFactory *result = 0 ;
  
  SWIG_check_num_args("CollisionResponseBehaviorFactory::CollisionResponseBehaviorFactory",0,0)
  result = (CollisionResponseBehaviorFactory *)new CollisionResponseBehaviorFactory();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CollisionResponseBehaviorFactory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollisionResponseBehaviorFactory(void *obj) {
CollisionResponseBehaviorFactory *arg1 = (CollisionResponseBehaviorFactory *) obj;
delete arg1;
}
static swig_lua_method swig_CollisionResponseBehaviorFactory_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CollisionResponseBehaviorFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_CollisionResponseBehaviorFactory_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CollisionResponseBehaviorFactory_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CollisionResponseBehaviorFactory_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CollisionResponseBehaviorFactory_bases[] = {0,0};
static const char *swig_CollisionResponseBehaviorFactory_base_names[] = {"AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *",0};
static swig_lua_class _wrap_class_CollisionResponseBehaviorFactory = { "CollisionResponseBehaviorFactory", &SWIGTYPE_p_CollisionResponseBehaviorFactory,_wrap_new_CollisionResponseBehaviorFactory, swig_delete_CollisionResponseBehaviorFactory, swig_CollisionResponseBehaviorFactory_methods, swig_CollisionResponseBehaviorFactory_attributes, { "CollisionResponseBehaviorFactory", swig_CollisionResponseBehaviorFactory_cls_methods, swig_CollisionResponseBehaviorFactory_cls_attributes, swig_CollisionResponseBehaviorFactory_cls_constants }, swig_CollisionResponseBehaviorFactory_bases, swig_CollisionResponseBehaviorFactory_base_names };

static int _wrap_new_CollisionShapeInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  CollisionShapeType arg1 ;
  BaseViewObject *arg2 = (BaseViewObject *) 0 ;
  CollisionShapeInfo *result = 0 ;
  
  SWIG_check_num_args("CollisionShapeInfo::CollisionShapeInfo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CollisionShapeInfo::CollisionShapeInfo",1,"CollisionShapeType");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CollisionShapeInfo::CollisionShapeInfo",2,"BaseViewObject const *");
  arg1 = (CollisionShapeType)(int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseViewObject,0))){
    SWIG_fail_ptr("new_CollisionShapeInfo",2,SWIGTYPE_p_BaseViewObject);
  }
  
  result = (CollisionShapeInfo *)new CollisionShapeInfo(arg1,(BaseViewObject const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CollisionShapeInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionShapeInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  CollisionShapeType arg1 ;
  CollisionShapeInfo *result = 0 ;
  
  SWIG_check_num_args("CollisionShapeInfo::CollisionShapeInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CollisionShapeInfo::CollisionShapeInfo",1,"CollisionShapeType");
  arg1 = (CollisionShapeType)(int)lua_tonumber(L, 1);
  result = (CollisionShapeInfo *)new CollisionShapeInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CollisionShapeInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionShapeInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  CollisionShapeInfo *result = 0 ;
  
  SWIG_check_num_args("CollisionShapeInfo::CollisionShapeInfo",0,0)
  result = (CollisionShapeInfo *)new CollisionShapeInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CollisionShapeInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionShapeInfo(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CollisionShapeInfo__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CollisionShapeInfo__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseViewObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_CollisionShapeInfo__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CollisionShapeInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    CollisionShapeInfo::CollisionShapeInfo(CollisionShapeType,BaseViewObject const *)\n"
    "    CollisionShapeInfo::CollisionShapeInfo(CollisionShapeType)\n"
    "    CollisionShapeInfo::CollisionShapeInfo()\n");
  lua_error(L);return 0;
}


static int _wrap_CollisionShapeInfo_m_CollisionShapeType_set(lua_State* L) {
  int SWIG_arg = 0;
  CollisionShapeInfo *arg1 = (CollisionShapeInfo *) 0 ;
  CollisionShapeType arg2 ;
  
  SWIG_check_num_args("CollisionShapeInfo::m_CollisionShapeType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CollisionShapeInfo::m_CollisionShapeType",1,"CollisionShapeInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CollisionShapeInfo::m_CollisionShapeType",2,"CollisionShapeType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CollisionShapeInfo,0))){
    SWIG_fail_ptr("CollisionShapeInfo_m_CollisionShapeType_set",1,SWIGTYPE_p_CollisionShapeInfo);
  }
  
  arg2 = (CollisionShapeType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_CollisionShapeType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeInfo_m_CollisionShapeType_get(lua_State* L) {
  int SWIG_arg = 0;
  CollisionShapeInfo *arg1 = (CollisionShapeInfo *) 0 ;
  CollisionShapeType result;
  
  SWIG_check_num_args("CollisionShapeInfo::m_CollisionShapeType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CollisionShapeInfo::m_CollisionShapeType",1,"CollisionShapeInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CollisionShapeInfo,0))){
    SWIG_fail_ptr("CollisionShapeInfo_m_CollisionShapeType_get",1,SWIGTYPE_p_CollisionShapeInfo);
  }
  
  result = (CollisionShapeType) ((arg1)->m_CollisionShapeType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeInfo_m_VBO_set(lua_State* L) {
  int SWIG_arg = 0;
  CollisionShapeInfo *arg1 = (CollisionShapeInfo *) 0 ;
  BaseViewObject *arg2 = (BaseViewObject *) 0 ;
  
  SWIG_check_num_args("CollisionShapeInfo::m_VBO",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CollisionShapeInfo::m_VBO",1,"CollisionShapeInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CollisionShapeInfo::m_VBO",2,"BaseViewObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CollisionShapeInfo,0))){
    SWIG_fail_ptr("CollisionShapeInfo_m_VBO_set",1,SWIGTYPE_p_CollisionShapeInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseViewObject,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CollisionShapeInfo_m_VBO_set",2,SWIGTYPE_p_BaseViewObject);
  }
  
  if (arg1) (arg1)->m_VBO = (BaseViewObject const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeInfo_m_VBO_get(lua_State* L) {
  int SWIG_arg = 0;
  CollisionShapeInfo *arg1 = (CollisionShapeInfo *) 0 ;
  BaseViewObject *result = 0 ;
  
  SWIG_check_num_args("CollisionShapeInfo::m_VBO",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CollisionShapeInfo::m_VBO",1,"CollisionShapeInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CollisionShapeInfo,0))){
    SWIG_fail_ptr("CollisionShapeInfo_m_VBO_get",1,SWIGTYPE_p_CollisionShapeInfo);
  }
  
  result = (BaseViewObject *) ((arg1)->m_VBO);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseViewObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollisionShapeInfo(void *obj) {
CollisionShapeInfo *arg1 = (CollisionShapeInfo *) obj;
delete arg1;
}
static swig_lua_method swig_CollisionShapeInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CollisionShapeInfo_attributes[] = {
    { "m_CollisionShapeType", _wrap_CollisionShapeInfo_m_CollisionShapeType_get, _wrap_CollisionShapeInfo_m_CollisionShapeType_set},
    { "m_VBO", _wrap_CollisionShapeInfo_m_VBO_get, _wrap_CollisionShapeInfo_m_VBO_set},
    {0,0,0}
};
static swig_lua_attribute swig_CollisionShapeInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CollisionShapeInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CollisionShapeInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CollisionShapeInfo_bases[] = {0};
static const char *swig_CollisionShapeInfo_base_names[] = {0};
static swig_lua_class _wrap_class_CollisionShapeInfo = { "CollisionShapeInfo", &SWIGTYPE_p_CollisionShapeInfo,_wrap_new_CollisionShapeInfo, swig_delete_CollisionShapeInfo, swig_CollisionShapeInfo_methods, swig_CollisionShapeInfo_attributes, { "CollisionShapeInfo", swig_CollisionShapeInfo_cls_methods, swig_CollisionShapeInfo_cls_attributes, swig_CollisionShapeInfo_cls_constants }, swig_CollisionShapeInfo_bases, swig_CollisionShapeInfo_base_names };

static int _wrap_btCollisionShapeWrapper_m_btCollisionShape_set(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShapeWrapper *arg1 = (btCollisionShapeWrapper *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  SWIG_check_num_args("btCollisionShapeWrapper::m_btCollisionShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShapeWrapper::m_btCollisionShape",1,"btCollisionShapeWrapper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btCollisionShapeWrapper::m_btCollisionShape",2,"btCollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShapeWrapper,0))){
    SWIG_fail_ptr("btCollisionShapeWrapper_m_btCollisionShape_set",1,SWIGTYPE_p_btCollisionShapeWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionShape,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btCollisionShapeWrapper_m_btCollisionShape_set",2,SWIGTYPE_p_btCollisionShape);
  }
  
  if (arg1) (arg1)->m_btCollisionShape = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btCollisionShapeWrapper_m_btCollisionShape_get(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShapeWrapper *arg1 = (btCollisionShapeWrapper *) 0 ;
  btCollisionShape *result = 0 ;
  
  SWIG_check_num_args("btCollisionShapeWrapper::m_btCollisionShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btCollisionShapeWrapper::m_btCollisionShape",1,"btCollisionShapeWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionShapeWrapper,0))){
    SWIG_fail_ptr("btCollisionShapeWrapper_m_btCollisionShape_get",1,SWIGTYPE_p_btCollisionShapeWrapper);
  }
  
  result = (btCollisionShape *) ((arg1)->m_btCollisionShape);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btCollisionShapeWrapper(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionShapeWrapper *result = 0 ;
  
  SWIG_check_num_args("btCollisionShapeWrapper::btCollisionShapeWrapper",0,0)
  result = (btCollisionShapeWrapper *)new btCollisionShapeWrapper();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShapeWrapper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btCollisionShapeWrapper(void *obj) {
btCollisionShapeWrapper *arg1 = (btCollisionShapeWrapper *) obj;
delete arg1;
}
static swig_lua_method swig_btCollisionShapeWrapper_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btCollisionShapeWrapper_attributes[] = {
    { "m_btCollisionShape", _wrap_btCollisionShapeWrapper_m_btCollisionShape_get, _wrap_btCollisionShapeWrapper_m_btCollisionShape_set},
    {0,0,0}
};
static swig_lua_attribute swig_btCollisionShapeWrapper_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btCollisionShapeWrapper_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btCollisionShapeWrapper_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btCollisionShapeWrapper_bases[] = {0};
static const char *swig_btCollisionShapeWrapper_base_names[] = {0};
static swig_lua_class _wrap_class_btCollisionShapeWrapper = { "btCollisionShapeWrapper", &SWIGTYPE_p_btCollisionShapeWrapper,_wrap_new_btCollisionShapeWrapper, swig_delete_btCollisionShapeWrapper, swig_btCollisionShapeWrapper_methods, swig_btCollisionShapeWrapper_attributes, { "btCollisionShapeWrapper", swig_btCollisionShapeWrapper_cls_methods, swig_btCollisionShapeWrapper_cls_attributes, swig_btCollisionShapeWrapper_cls_constants }, swig_btCollisionShapeWrapper_bases, swig_btCollisionShapeWrapper_base_names };

static int _wrap_CollisionShapeFactory_createShape(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  CollisionShapeType arg2 ;
  IDType result;
  
  SWIG_check_num_args("CollisionShapeFactory::createShape",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CollisionShapeFactory::createShape",1,"IDType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CollisionShapeFactory::createShape",2,"CollisionShapeType");
  arg1 = (IDType)lua_tonumber(L, 1);
  arg2 = (CollisionShapeType)(int)lua_tonumber(L, 2);
  result = (IDType)CollisionShapeFactory::createShape(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeFactory_s_ConvexMargin_get(lua_State* L) {
  int SWIG_arg = 0;
  btScalar result;
  
  SWIG_check_num_args("CollisionShapeFactory::s_ConvexMargin",0,0)
  result = (btScalar)(btScalar)CollisionShapeFactory::s_ConvexMargin;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_CollisionShapeFactory_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_CollisionShapeFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_CollisionShapeFactory_cls_attributes[] = {
    { "s_ConvexMargin", _wrap_CollisionShapeFactory_s_ConvexMargin_get, SWIG_Lua_set_immutable},
    {0,0,0}
};
static swig_lua_method swig_CollisionShapeFactory_cls_methods[] = {
    {"createShape", _wrap_CollisionShapeFactory_createShape}, 
    {0,0}
};
static swig_lua_const_info swig_CollisionShapeFactory_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CollisionShapeFactory_bases[] = {0,0};
static const char *swig_CollisionShapeFactory_base_names[] = {"AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *",0};
static swig_lua_class _wrap_class_CollisionShapeFactory = { "CollisionShapeFactory", &SWIGTYPE_p_CollisionShapeFactory,0,0, swig_CollisionShapeFactory_methods, swig_CollisionShapeFactory_attributes, { "CollisionShapeFactory", swig_CollisionShapeFactory_cls_methods, swig_CollisionShapeFactory_cls_attributes, swig_CollisionShapeFactory_cls_constants }, swig_CollisionShapeFactory_bases, swig_CollisionShapeFactory_base_names };

static int _wrap_ShaderProgramHandleWrapper_m_ShaderProgramHandle_set(lua_State* L) {
  int SWIG_arg = 0;
  ShaderProgramHandleWrapper *arg1 = (ShaderProgramHandleWrapper *) 0 ;
  GLuint arg2 ;
  GLuint *argp2 ;
  
  SWIG_check_num_args("ShaderProgramHandleWrapper::m_ShaderProgramHandle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShaderProgramHandleWrapper::m_ShaderProgramHandle",1,"ShaderProgramHandleWrapper *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ShaderProgramHandleWrapper::m_ShaderProgramHandle",2,"GLuint");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ShaderProgramHandleWrapper,0))){
    SWIG_fail_ptr("ShaderProgramHandleWrapper_m_ShaderProgramHandle_set",1,SWIGTYPE_p_ShaderProgramHandleWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLuint,0))){
    SWIG_fail_ptr("ShaderProgramHandleWrapper_m_ShaderProgramHandle_set",2,SWIGTYPE_p_GLuint);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->m_ShaderProgramHandle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderProgramHandleWrapper_m_ShaderProgramHandle_get(lua_State* L) {
  int SWIG_arg = 0;
  ShaderProgramHandleWrapper *arg1 = (ShaderProgramHandleWrapper *) 0 ;
  GLuint result;
  
  SWIG_check_num_args("ShaderProgramHandleWrapper::m_ShaderProgramHandle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShaderProgramHandleWrapper::m_ShaderProgramHandle",1,"ShaderProgramHandleWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ShaderProgramHandleWrapper,0))){
    SWIG_fail_ptr("ShaderProgramHandleWrapper_m_ShaderProgramHandle_get",1,SWIGTYPE_p_ShaderProgramHandleWrapper);
  }
  
  result =  ((arg1)->m_ShaderProgramHandle);
  {
    GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ShaderProgramHandleWrapper(lua_State* L) {
  int SWIG_arg = 0;
  ShaderProgramHandleWrapper *result = 0 ;
  
  SWIG_check_num_args("ShaderProgramHandleWrapper::ShaderProgramHandleWrapper",0,0)
  result = (ShaderProgramHandleWrapper *)new ShaderProgramHandleWrapper();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ShaderProgramHandleWrapper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ShaderProgramHandleWrapper(void *obj) {
ShaderProgramHandleWrapper *arg1 = (ShaderProgramHandleWrapper *) obj;
delete arg1;
}
static swig_lua_method swig_ShaderProgramHandleWrapper_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ShaderProgramHandleWrapper_attributes[] = {
    { "m_ShaderProgramHandle", _wrap_ShaderProgramHandleWrapper_m_ShaderProgramHandle_get, _wrap_ShaderProgramHandleWrapper_m_ShaderProgramHandle_set},
    {0,0,0}
};
static swig_lua_attribute swig_ShaderProgramHandleWrapper_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ShaderProgramHandleWrapper_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ShaderProgramHandleWrapper_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ShaderProgramHandleWrapper_bases[] = {0};
static const char *swig_ShaderProgramHandleWrapper_base_names[] = {0};
static swig_lua_class _wrap_class_ShaderProgramHandleWrapper = { "ShaderProgramHandleWrapper", &SWIGTYPE_p_ShaderProgramHandleWrapper,_wrap_new_ShaderProgramHandleWrapper, swig_delete_ShaderProgramHandleWrapper, swig_ShaderProgramHandleWrapper_methods, swig_ShaderProgramHandleWrapper_attributes, { "ShaderProgramHandleWrapper", swig_ShaderProgramHandleWrapper_cls_methods, swig_ShaderProgramHandleWrapper_cls_attributes, swig_ShaderProgramHandleWrapper_cls_constants }, swig_ShaderProgramHandleWrapper_bases, swig_ShaderProgramHandleWrapper_base_names };

static int _wrap_ShaderFactory_getCurrentShaderID(lua_State* L) {
  int SWIG_arg = 0;
  ShaderFactory *arg1 = (ShaderFactory *) 0 ;
  IDType result;
  
  SWIG_check_num_args("ShaderFactory::getCurrentShaderID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ShaderFactory::getCurrentShaderID",1,"ShaderFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ShaderFactory,0))){
    SWIG_fail_ptr("ShaderFactory_getCurrentShaderID",1,SWIGTYPE_p_ShaderFactory);
  }
  
  result = (IDType)((ShaderFactory const *)arg1)->getCurrentShaderID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_ShaderFactory_methods[] = {
    {"getCurrentShaderID", _wrap_ShaderFactory_getCurrentShaderID}, 
    {0,0}
};
static swig_lua_attribute swig_ShaderFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ShaderFactory_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ShaderFactory_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ShaderFactory_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ShaderFactory_bases[] = {0,0};
static const char *swig_ShaderFactory_base_names[] = {"AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *",0};
static swig_lua_class _wrap_class_ShaderFactory = { "ShaderFactory", &SWIGTYPE_p_ShaderFactory,0,0, swig_ShaderFactory_methods, swig_ShaderFactory_attributes, { "ShaderFactory", swig_ShaderFactory_cls_methods, swig_ShaderFactory_cls_attributes, swig_ShaderFactory_cls_constants }, swig_ShaderFactory_bases, swig_ShaderFactory_base_names };

static int _wrap_new_TextOrigin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  TextOrigin *result = 0 ;
  
  SWIG_check_num_args("TextOrigin::TextOrigin",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TextOrigin::TextOrigin",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextOrigin::TextOrigin",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (TextOrigin *)new TextOrigin(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextOrigin,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextOrigin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  TextOrigin *result = 0 ;
  
  SWIG_check_num_args("TextOrigin::TextOrigin",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TextOrigin::TextOrigin",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (TextOrigin *)new TextOrigin(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextOrigin,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextOrigin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TextOrigin *result = 0 ;
  
  SWIG_check_num_args("TextOrigin::TextOrigin",0,0)
  result = (TextOrigin *)new TextOrigin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextOrigin,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextOrigin__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TextOrigin *arg1 = 0 ;
  TextOrigin *result = 0 ;
  
  SWIG_check_num_args("TextOrigin::TextOrigin",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TextOrigin::TextOrigin",1,"TextOrigin const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextOrigin,0))){
    SWIG_fail_ptr("new_TextOrigin",1,SWIGTYPE_p_TextOrigin);
  }
  
  result = (TextOrigin *)new TextOrigin((TextOrigin const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextOrigin,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextOrigin(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TextOrigin__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TextOrigin, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TextOrigin__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TextOrigin__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TextOrigin__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TextOrigin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TextOrigin::TextOrigin(int,int)\n"
    "    TextOrigin::TextOrigin(int)\n"
    "    TextOrigin::TextOrigin()\n"
    "    TextOrigin::TextOrigin(TextOrigin const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TextOrigin_x_set(lua_State* L) {
  int SWIG_arg = 0;
  TextOrigin *arg1 = (TextOrigin *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TextOrigin::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextOrigin::x",1,"TextOrigin *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextOrigin::x",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextOrigin,0))){
    SWIG_fail_ptr("TextOrigin_x_set",1,SWIGTYPE_p_TextOrigin);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextOrigin_x_get(lua_State* L) {
  int SWIG_arg = 0;
  TextOrigin *arg1 = (TextOrigin *) 0 ;
  int result;
  
  SWIG_check_num_args("TextOrigin::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextOrigin::x",1,"TextOrigin *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextOrigin,0))){
    SWIG_fail_ptr("TextOrigin_x_get",1,SWIGTYPE_p_TextOrigin);
  }
  
  result = (int) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextOrigin_y_set(lua_State* L) {
  int SWIG_arg = 0;
  TextOrigin *arg1 = (TextOrigin *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TextOrigin::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextOrigin::y",1,"TextOrigin *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextOrigin::y",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextOrigin,0))){
    SWIG_fail_ptr("TextOrigin_y_set",1,SWIGTYPE_p_TextOrigin);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextOrigin_y_get(lua_State* L) {
  int SWIG_arg = 0;
  TextOrigin *arg1 = (TextOrigin *) 0 ;
  int result;
  
  SWIG_check_num_args("TextOrigin::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextOrigin::y",1,"TextOrigin *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextOrigin,0))){
    SWIG_fail_ptr("TextOrigin_y_get",1,SWIGTYPE_p_TextOrigin);
  }
  
  result = (int) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TextOrigin(void *obj) {
TextOrigin *arg1 = (TextOrigin *) obj;
delete arg1;
}
static swig_lua_method swig_TextOrigin_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_TextOrigin_attributes[] = {
    { "x", _wrap_TextOrigin_x_get, _wrap_TextOrigin_x_set},
    { "y", _wrap_TextOrigin_y_get, _wrap_TextOrigin_y_set},
    {0,0,0}
};
static swig_lua_attribute swig_TextOrigin_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TextOrigin_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_TextOrigin_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_TextOrigin_bases[] = {0};
static const char *swig_TextOrigin_base_names[] = {0};
static swig_lua_class _wrap_class_TextOrigin = { "TextOrigin", &SWIGTYPE_p_TextOrigin,_wrap_new_TextOrigin, swig_delete_TextOrigin, swig_TextOrigin_methods, swig_TextOrigin_attributes, { "TextOrigin", swig_TextOrigin_cls_methods, swig_TextOrigin_cls_attributes, swig_TextOrigin_cls_constants }, swig_TextOrigin_bases, swig_TextOrigin_base_names };

static int _wrap_TextMetrics_xBearing_set(lua_State* L) {
  int SWIG_arg = 0;
  TextMetrics *arg1 = (TextMetrics *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TextMetrics::xBearing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextMetrics::xBearing",1,"TextMetrics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextMetrics::xBearing",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextMetrics,0))){
    SWIG_fail_ptr("TextMetrics_xBearing_set",1,SWIGTYPE_p_TextMetrics);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->xBearing = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextMetrics_xBearing_get(lua_State* L) {
  int SWIG_arg = 0;
  TextMetrics *arg1 = (TextMetrics *) 0 ;
  int result;
  
  SWIG_check_num_args("TextMetrics::xBearing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextMetrics::xBearing",1,"TextMetrics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextMetrics,0))){
    SWIG_fail_ptr("TextMetrics_xBearing_get",1,SWIGTYPE_p_TextMetrics);
  }
  
  result = (int) ((arg1)->xBearing);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextMetrics_yBearing_set(lua_State* L) {
  int SWIG_arg = 0;
  TextMetrics *arg1 = (TextMetrics *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TextMetrics::yBearing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextMetrics::yBearing",1,"TextMetrics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextMetrics::yBearing",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextMetrics,0))){
    SWIG_fail_ptr("TextMetrics_yBearing_set",1,SWIGTYPE_p_TextMetrics);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->yBearing = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextMetrics_yBearing_get(lua_State* L) {
  int SWIG_arg = 0;
  TextMetrics *arg1 = (TextMetrics *) 0 ;
  int result;
  
  SWIG_check_num_args("TextMetrics::yBearing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextMetrics::yBearing",1,"TextMetrics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextMetrics,0))){
    SWIG_fail_ptr("TextMetrics_yBearing_get",1,SWIGTYPE_p_TextMetrics);
  }
  
  result = (int) ((arg1)->yBearing);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextMetrics_width_set(lua_State* L) {
  int SWIG_arg = 0;
  TextMetrics *arg1 = (TextMetrics *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TextMetrics::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextMetrics::width",1,"TextMetrics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextMetrics::width",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextMetrics,0))){
    SWIG_fail_ptr("TextMetrics_width_set",1,SWIGTYPE_p_TextMetrics);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->width = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextMetrics_width_get(lua_State* L) {
  int SWIG_arg = 0;
  TextMetrics *arg1 = (TextMetrics *) 0 ;
  int result;
  
  SWIG_check_num_args("TextMetrics::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextMetrics::width",1,"TextMetrics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextMetrics,0))){
    SWIG_fail_ptr("TextMetrics_width_get",1,SWIGTYPE_p_TextMetrics);
  }
  
  result = (int) ((arg1)->width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextMetrics_height_set(lua_State* L) {
  int SWIG_arg = 0;
  TextMetrics *arg1 = (TextMetrics *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TextMetrics::height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextMetrics::height",1,"TextMetrics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextMetrics::height",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextMetrics,0))){
    SWIG_fail_ptr("TextMetrics_height_set",1,SWIGTYPE_p_TextMetrics);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->height = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextMetrics_height_get(lua_State* L) {
  int SWIG_arg = 0;
  TextMetrics *arg1 = (TextMetrics *) 0 ;
  int result;
  
  SWIG_check_num_args("TextMetrics::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextMetrics::height",1,"TextMetrics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextMetrics,0))){
    SWIG_fail_ptr("TextMetrics_height_get",1,SWIGTYPE_p_TextMetrics);
  }
  
  result = (int) ((arg1)->height);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextMetrics_xAdvance_set(lua_State* L) {
  int SWIG_arg = 0;
  TextMetrics *arg1 = (TextMetrics *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TextMetrics::xAdvance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextMetrics::xAdvance",1,"TextMetrics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextMetrics::xAdvance",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextMetrics,0))){
    SWIG_fail_ptr("TextMetrics_xAdvance_set",1,SWIGTYPE_p_TextMetrics);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->xAdvance = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextMetrics_xAdvance_get(lua_State* L) {
  int SWIG_arg = 0;
  TextMetrics *arg1 = (TextMetrics *) 0 ;
  int result;
  
  SWIG_check_num_args("TextMetrics::xAdvance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextMetrics::xAdvance",1,"TextMetrics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextMetrics,0))){
    SWIG_fail_ptr("TextMetrics_xAdvance_get",1,SWIGTYPE_p_TextMetrics);
  }
  
  result = (int) ((arg1)->xAdvance);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextMetrics_yAdvance_set(lua_State* L) {
  int SWIG_arg = 0;
  TextMetrics *arg1 = (TextMetrics *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TextMetrics::yAdvance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextMetrics::yAdvance",1,"TextMetrics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextMetrics::yAdvance",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextMetrics,0))){
    SWIG_fail_ptr("TextMetrics_yAdvance_set",1,SWIGTYPE_p_TextMetrics);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->yAdvance = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextMetrics_yAdvance_get(lua_State* L) {
  int SWIG_arg = 0;
  TextMetrics *arg1 = (TextMetrics *) 0 ;
  int result;
  
  SWIG_check_num_args("TextMetrics::yAdvance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextMetrics::yAdvance",1,"TextMetrics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextMetrics,0))){
    SWIG_fail_ptr("TextMetrics_yAdvance_get",1,SWIGTYPE_p_TextMetrics);
  }
  
  result = (int) ((arg1)->yAdvance);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextMetrics__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  TextMetrics *result = 0 ;
  
  SWIG_check_num_args("TextMetrics::TextMetrics",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TextMetrics::TextMetrics",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextMetrics::TextMetrics",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextMetrics::TextMetrics",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TextMetrics::TextMetrics",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TextMetrics::TextMetrics",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("TextMetrics::TextMetrics",6,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  result = (TextMetrics *)new TextMetrics(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextMetrics,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextMetrics__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  TextMetrics *result = 0 ;
  
  SWIG_check_num_args("TextMetrics::TextMetrics",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TextMetrics::TextMetrics",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextMetrics::TextMetrics",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextMetrics::TextMetrics",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TextMetrics::TextMetrics",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TextMetrics::TextMetrics",5,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (TextMetrics *)new TextMetrics(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextMetrics,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextMetrics__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TextMetrics *result = 0 ;
  
  SWIG_check_num_args("TextMetrics::TextMetrics",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TextMetrics::TextMetrics",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextMetrics::TextMetrics",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextMetrics::TextMetrics",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TextMetrics::TextMetrics",4,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (TextMetrics *)new TextMetrics(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextMetrics,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextMetrics__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  TextMetrics *result = 0 ;
  
  SWIG_check_num_args("TextMetrics::TextMetrics",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TextMetrics::TextMetrics",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextMetrics::TextMetrics",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextMetrics::TextMetrics",3,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (TextMetrics *)new TextMetrics(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextMetrics,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextMetrics__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  TextMetrics *result = 0 ;
  
  SWIG_check_num_args("TextMetrics::TextMetrics",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TextMetrics::TextMetrics",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextMetrics::TextMetrics",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (TextMetrics *)new TextMetrics(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextMetrics,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextMetrics__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  TextMetrics *result = 0 ;
  
  SWIG_check_num_args("TextMetrics::TextMetrics",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TextMetrics::TextMetrics",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (TextMetrics *)new TextMetrics(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextMetrics,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextMetrics__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  TextMetrics *result = 0 ;
  
  SWIG_check_num_args("TextMetrics::TextMetrics",0,0)
  result = (TextMetrics *)new TextMetrics();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextMetrics,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextMetrics__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  TextMetrics *arg1 = 0 ;
  TextMetrics *result = 0 ;
  
  SWIG_check_num_args("TextMetrics::TextMetrics",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TextMetrics::TextMetrics",1,"TextMetrics const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextMetrics,0))){
    SWIG_fail_ptr("new_TextMetrics",1,SWIGTYPE_p_TextMetrics);
  }
  
  result = (TextMetrics *)new TextMetrics((TextMetrics const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextMetrics,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextMetrics(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TextMetrics__SWIG_6(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TextMetrics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TextMetrics__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TextMetrics__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TextMetrics__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_TextMetrics__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_TextMetrics__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_TextMetrics__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_TextMetrics__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TextMetrics'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TextMetrics::TextMetrics(int,int,int,int,int,int)\n"
    "    TextMetrics::TextMetrics(int,int,int,int,int)\n"
    "    TextMetrics::TextMetrics(int,int,int,int)\n"
    "    TextMetrics::TextMetrics(int,int,int)\n"
    "    TextMetrics::TextMetrics(int,int)\n"
    "    TextMetrics::TextMetrics(int)\n"
    "    TextMetrics::TextMetrics()\n"
    "    TextMetrics::TextMetrics(TextMetrics const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_TextMetrics(void *obj) {
TextMetrics *arg1 = (TextMetrics *) obj;
delete arg1;
}
static swig_lua_method swig_TextMetrics_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_TextMetrics_attributes[] = {
    { "xBearing", _wrap_TextMetrics_xBearing_get, _wrap_TextMetrics_xBearing_set},
    { "yBearing", _wrap_TextMetrics_yBearing_get, _wrap_TextMetrics_yBearing_set},
    { "width", _wrap_TextMetrics_width_get, _wrap_TextMetrics_width_set},
    { "height", _wrap_TextMetrics_height_get, _wrap_TextMetrics_height_set},
    { "xAdvance", _wrap_TextMetrics_xAdvance_get, _wrap_TextMetrics_xAdvance_set},
    { "yAdvance", _wrap_TextMetrics_yAdvance_get, _wrap_TextMetrics_yAdvance_set},
    {0,0,0}
};
static swig_lua_attribute swig_TextMetrics_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TextMetrics_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_TextMetrics_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_TextMetrics_bases[] = {0};
static const char *swig_TextMetrics_base_names[] = {0};
static swig_lua_class _wrap_class_TextMetrics = { "TextMetrics", &SWIGTYPE_p_TextMetrics,_wrap_new_TextMetrics, swig_delete_TextMetrics, swig_TextMetrics_methods, swig_TextMetrics_attributes, { "TextMetrics", swig_TextMetrics_cls_methods, swig_TextMetrics_cls_attributes, swig_TextMetrics_cls_constants }, swig_TextMetrics_bases, swig_TextMetrics_base_names };

static int _wrap_TextInfo_fileName_set(lua_State* L) {
  int SWIG_arg = 0;
  TextInfo *arg1 = (TextInfo *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("TextInfo::fileName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextInfo::fileName",1,"TextInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TextInfo::fileName",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextInfo,0))){
    SWIG_fail_ptr("TextInfo_fileName_set",1,SWIGTYPE_p_TextInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("TextInfo_fileName_set",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->fileName = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextInfo_fileName_get(lua_State* L) {
  int SWIG_arg = 0;
  TextInfo *arg1 = (TextInfo *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TextInfo::fileName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextInfo::fileName",1,"TextInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextInfo,0))){
    SWIG_fail_ptr("TextInfo_fileName_get",1,SWIGTYPE_p_TextInfo);
  }
  
  result =  ((arg1)->fileName);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextInfo_textureFileWidth_set(lua_State* L) {
  int SWIG_arg = 0;
  TextInfo *arg1 = (TextInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("TextInfo::textureFileWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextInfo::textureFileWidth",1,"TextInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextInfo::textureFileWidth",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextInfo,0))){
    SWIG_fail_ptr("TextInfo_textureFileWidth_set",1,SWIGTYPE_p_TextInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->textureFileWidth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextInfo_textureFileWidth_get(lua_State* L) {
  int SWIG_arg = 0;
  TextInfo *arg1 = (TextInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("TextInfo::textureFileWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextInfo::textureFileWidth",1,"TextInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextInfo,0))){
    SWIG_fail_ptr("TextInfo_textureFileWidth_get",1,SWIGTYPE_p_TextInfo);
  }
  
  result = (unsigned int) ((arg1)->textureFileWidth);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextInfo_textureFileHeight_set(lua_State* L) {
  int SWIG_arg = 0;
  TextInfo *arg1 = (TextInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("TextInfo::textureFileHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextInfo::textureFileHeight",1,"TextInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextInfo::textureFileHeight",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextInfo,0))){
    SWIG_fail_ptr("TextInfo_textureFileHeight_set",1,SWIGTYPE_p_TextInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->textureFileHeight = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextInfo_textureFileHeight_get(lua_State* L) {
  int SWIG_arg = 0;
  TextInfo *arg1 = (TextInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("TextInfo::textureFileHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextInfo::textureFileHeight",1,"TextInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextInfo,0))){
    SWIG_fail_ptr("TextInfo_textureFileHeight_get",1,SWIGTYPE_p_TextInfo);
  }
  
  result = (unsigned int) ((arg1)->textureFileHeight);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextInfo_origin_set(lua_State* L) {
  int SWIG_arg = 0;
  TextInfo *arg1 = (TextInfo *) 0 ;
  TextOrigin *arg2 = (TextOrigin *) 0 ;
  
  SWIG_check_num_args("TextInfo::origin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextInfo::origin",1,"TextInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TextInfo::origin",2,"TextOrigin *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextInfo,0))){
    SWIG_fail_ptr("TextInfo_origin_set",1,SWIGTYPE_p_TextInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TextOrigin,0))){
    SWIG_fail_ptr("TextInfo_origin_set",2,SWIGTYPE_p_TextOrigin);
  }
  
  if (arg1) (arg1)->origin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextInfo_origin_get(lua_State* L) {
  int SWIG_arg = 0;
  TextInfo *arg1 = (TextInfo *) 0 ;
  TextOrigin *result = 0 ;
  
  SWIG_check_num_args("TextInfo::origin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextInfo::origin",1,"TextInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextInfo,0))){
    SWIG_fail_ptr("TextInfo_origin_get",1,SWIGTYPE_p_TextInfo);
  }
  
  result = (TextOrigin *)& ((arg1)->origin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextOrigin,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextInfo_metrics_set(lua_State* L) {
  int SWIG_arg = 0;
  TextInfo *arg1 = (TextInfo *) 0 ;
  TextMetrics *arg2 = (TextMetrics *) 0 ;
  
  SWIG_check_num_args("TextInfo::metrics",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextInfo::metrics",1,"TextInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TextInfo::metrics",2,"TextMetrics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextInfo,0))){
    SWIG_fail_ptr("TextInfo_metrics_set",1,SWIGTYPE_p_TextInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TextMetrics,0))){
    SWIG_fail_ptr("TextInfo_metrics_set",2,SWIGTYPE_p_TextMetrics);
  }
  
  if (arg1) (arg1)->metrics = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextInfo_metrics_get(lua_State* L) {
  int SWIG_arg = 0;
  TextInfo *arg1 = (TextInfo *) 0 ;
  TextMetrics *result = 0 ;
  
  SWIG_check_num_args("TextInfo::metrics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextInfo::metrics",1,"TextInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextInfo,0))){
    SWIG_fail_ptr("TextInfo_metrics_get",1,SWIGTYPE_p_TextInfo);
  }
  
  result = (TextMetrics *)& ((arg1)->metrics);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextMetrics,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  int arg11 ;
  std::string *argp1 ;
  TextInfo *result = 0 ;
  
  SWIG_check_num_args("TextInfo::TextInfo",11,11)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TextInfo::TextInfo",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextInfo::TextInfo",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextInfo::TextInfo",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TextInfo::TextInfo",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TextInfo::TextInfo",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("TextInfo::TextInfo",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("TextInfo::TextInfo",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("TextInfo::TextInfo",8,"int");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("TextInfo::TextInfo",9,"int");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("TextInfo::TextInfo",10,"int");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("TextInfo::TextInfo",11,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_TextInfo",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  arg9 = (int)lua_tonumber(L, 9);
  arg10 = (int)lua_tonumber(L, 10);
  arg11 = (int)lua_tonumber(L, 11);
  result = (TextInfo *)new TextInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  std::string *argp1 ;
  TextInfo *result = 0 ;
  
  SWIG_check_num_args("TextInfo::TextInfo",10,10)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TextInfo::TextInfo",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextInfo::TextInfo",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextInfo::TextInfo",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TextInfo::TextInfo",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TextInfo::TextInfo",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("TextInfo::TextInfo",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("TextInfo::TextInfo",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("TextInfo::TextInfo",8,"int");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("TextInfo::TextInfo",9,"int");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("TextInfo::TextInfo",10,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_TextInfo",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  arg9 = (int)lua_tonumber(L, 9);
  arg10 = (int)lua_tonumber(L, 10);
  result = (TextInfo *)new TextInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  std::string *argp1 ;
  TextInfo *result = 0 ;
  
  SWIG_check_num_args("TextInfo::TextInfo",9,9)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TextInfo::TextInfo",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextInfo::TextInfo",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextInfo::TextInfo",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TextInfo::TextInfo",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TextInfo::TextInfo",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("TextInfo::TextInfo",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("TextInfo::TextInfo",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("TextInfo::TextInfo",8,"int");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("TextInfo::TextInfo",9,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_TextInfo",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  arg9 = (int)lua_tonumber(L, 9);
  result = (TextInfo *)new TextInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  std::string *argp1 ;
  TextInfo *result = 0 ;
  
  SWIG_check_num_args("TextInfo::TextInfo",8,8)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TextInfo::TextInfo",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextInfo::TextInfo",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextInfo::TextInfo",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TextInfo::TextInfo",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TextInfo::TextInfo",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("TextInfo::TextInfo",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("TextInfo::TextInfo",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("TextInfo::TextInfo",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_TextInfo",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  result = (TextInfo *)new TextInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextInfo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  std::string *argp1 ;
  TextInfo *result = 0 ;
  
  SWIG_check_num_args("TextInfo::TextInfo",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TextInfo::TextInfo",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextInfo::TextInfo",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextInfo::TextInfo",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TextInfo::TextInfo",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TextInfo::TextInfo",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("TextInfo::TextInfo",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("TextInfo::TextInfo",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_TextInfo",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  result = (TextInfo *)new TextInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextInfo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  std::string *argp1 ;
  TextInfo *result = 0 ;
  
  SWIG_check_num_args("TextInfo::TextInfo",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TextInfo::TextInfo",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextInfo::TextInfo",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextInfo::TextInfo",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TextInfo::TextInfo",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TextInfo::TextInfo",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("TextInfo::TextInfo",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_TextInfo",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  result = (TextInfo *)new TextInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextInfo__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int arg4 ;
  int arg5 ;
  std::string *argp1 ;
  TextInfo *result = 0 ;
  
  SWIG_check_num_args("TextInfo::TextInfo",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TextInfo::TextInfo",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextInfo::TextInfo",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextInfo::TextInfo",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TextInfo::TextInfo",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TextInfo::TextInfo",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_TextInfo",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (TextInfo *)new TextInfo(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextInfo__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int arg4 ;
  std::string *argp1 ;
  TextInfo *result = 0 ;
  
  SWIG_check_num_args("TextInfo::TextInfo",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TextInfo::TextInfo",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextInfo::TextInfo",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextInfo::TextInfo",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TextInfo::TextInfo",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_TextInfo",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (TextInfo *)new TextInfo(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextInfo__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::string *argp1 ;
  TextInfo *result = 0 ;
  
  SWIG_check_num_args("TextInfo::TextInfo",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TextInfo::TextInfo",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextInfo::TextInfo",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TextInfo::TextInfo",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_TextInfo",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (TextInfo *)new TextInfo(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextInfo__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  std::string *argp1 ;
  TextInfo *result = 0 ;
  
  SWIG_check_num_args("TextInfo::TextInfo",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TextInfo::TextInfo",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextInfo::TextInfo",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_TextInfo",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (TextInfo *)new TextInfo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextInfo__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string *argp1 ;
  TextInfo *result = 0 ;
  
  SWIG_check_num_args("TextInfo::TextInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TextInfo::TextInfo",1,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_TextInfo",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  result = (TextInfo *)new TextInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextInfo__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  TextInfo *result = 0 ;
  
  SWIG_check_num_args("TextInfo::TextInfo",0,0)
  result = (TextInfo *)new TextInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextInfo__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  TextInfo *arg1 = 0 ;
  TextInfo *result = 0 ;
  
  SWIG_check_num_args("TextInfo::TextInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TextInfo::TextInfo",1,"TextInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextInfo,0))){
    SWIG_fail_ptr("new_TextInfo",1,SWIGTYPE_p_TextInfo);
  }
  
  result = (TextInfo *)new TextInfo((TextInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextInfo(lua_State* L) {
  int argc;
  int argv[12]={
    1,2,3,4,5,6,7,8,9,10,11,12
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TextInfo__SWIG_11(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TextInfo__SWIG_10(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TextInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TextInfo__SWIG_12(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TextInfo__SWIG_9(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_TextInfo__SWIG_8(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_TextInfo__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_TextInfo__SWIG_6(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_TextInfo__SWIG_5(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_new_TextInfo__SWIG_4(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_new_TextInfo__SWIG_3(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_new_TextInfo__SWIG_2(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_new_TextInfo__SWIG_1(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          return _wrap_new_TextInfo__SWIG_0(L);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TextInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TextInfo::TextInfo(std::string,unsigned int,unsigned int,int,int,int,int,int,int,int,int)\n"
    "    TextInfo::TextInfo(std::string,unsigned int,unsigned int,int,int,int,int,int,int,int)\n"
    "    TextInfo::TextInfo(std::string,unsigned int,unsigned int,int,int,int,int,int,int)\n"
    "    TextInfo::TextInfo(std::string,unsigned int,unsigned int,int,int,int,int,int)\n"
    "    TextInfo::TextInfo(std::string,unsigned int,unsigned int,int,int,int,int)\n"
    "    TextInfo::TextInfo(std::string,unsigned int,unsigned int,int,int,int)\n"
    "    TextInfo::TextInfo(std::string,unsigned int,unsigned int,int,int)\n"
    "    TextInfo::TextInfo(std::string,unsigned int,unsigned int,int)\n"
    "    TextInfo::TextInfo(std::string,unsigned int,unsigned int)\n"
    "    TextInfo::TextInfo(std::string,unsigned int)\n"
    "    TextInfo::TextInfo(std::string)\n"
    "    TextInfo::TextInfo()\n"
    "    TextInfo::TextInfo(TextInfo const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_TextInfo(void *obj) {
TextInfo *arg1 = (TextInfo *) obj;
delete arg1;
}
static swig_lua_method swig_TextInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_TextInfo_attributes[] = {
    { "fileName", _wrap_TextInfo_fileName_get, _wrap_TextInfo_fileName_set},
    { "textureFileWidth", _wrap_TextInfo_textureFileWidth_get, _wrap_TextInfo_textureFileWidth_set},
    { "textureFileHeight", _wrap_TextInfo_textureFileHeight_get, _wrap_TextInfo_textureFileHeight_set},
    { "origin", _wrap_TextInfo_origin_get, _wrap_TextInfo_origin_set},
    { "metrics", _wrap_TextInfo_metrics_get, _wrap_TextInfo_metrics_set},
    {0,0,0}
};
static swig_lua_attribute swig_TextInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TextInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_TextInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_TextInfo_bases[] = {0};
static const char *swig_TextInfo_base_names[] = {0};
static swig_lua_class _wrap_class_TextInfo = { "TextInfo", &SWIGTYPE_p_TextInfo,_wrap_new_TextInfo, swig_delete_TextInfo, swig_TextInfo_methods, swig_TextInfo_attributes, { "TextInfo", swig_TextInfo_cls_methods, swig_TextInfo_cls_attributes, swig_TextInfo_cls_constants }, swig_TextInfo_bases, swig_TextInfo_base_names };

static int _wrap_BaseTextViewInfo_m_shaderFactoryID_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewInfo *arg1 = (BaseTextViewInfo *) 0 ;
  IDType arg2 ;
  
  SWIG_check_num_args("BaseTextViewInfo::m_shaderFactoryID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewInfo::m_shaderFactoryID",1,"BaseTextViewInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseTextViewInfo::m_shaderFactoryID",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewInfo,0))){
    SWIG_fail_ptr("BaseTextViewInfo_m_shaderFactoryID_set",1,SWIGTYPE_p_BaseTextViewInfo);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_shaderFactoryID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextViewInfo_m_shaderFactoryID_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewInfo *arg1 = (BaseTextViewInfo *) 0 ;
  IDType result;
  
  SWIG_check_num_args("BaseTextViewInfo::m_shaderFactoryID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewInfo::m_shaderFactoryID",1,"BaseTextViewInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewInfo,0))){
    SWIG_fail_ptr("BaseTextViewInfo_m_shaderFactoryID_get",1,SWIGTYPE_p_BaseTextViewInfo);
  }
  
  result = (IDType) ((arg1)->m_shaderFactoryID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseTextViewInfo(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  BaseTextViewInfo *result = 0 ;
  
  SWIG_check_num_args("BaseTextViewInfo::BaseTextViewInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseTextViewInfo::BaseTextViewInfo",1,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  result = (BaseTextViewInfo *)new BaseTextViewInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseTextViewInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseTextViewInfo(void *obj) {
BaseTextViewInfo *arg1 = (BaseTextViewInfo *) obj;
delete arg1;
}
static swig_lua_method swig_BaseTextViewInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_BaseTextViewInfo_attributes[] = {
    { "m_shaderFactoryID", _wrap_BaseTextViewInfo_m_shaderFactoryID_get, _wrap_BaseTextViewInfo_m_shaderFactoryID_set},
    {0,0,0}
};
static swig_lua_attribute swig_BaseTextViewInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BaseTextViewInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BaseTextViewInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BaseTextViewInfo_bases[] = {0};
static const char *swig_BaseTextViewInfo_base_names[] = {0};
static swig_lua_class _wrap_class_BaseTextViewInfo = { "BaseTextViewInfo", &SWIGTYPE_p_BaseTextViewInfo,_wrap_new_BaseTextViewInfo, swig_delete_BaseTextViewInfo, swig_BaseTextViewInfo_methods, swig_BaseTextViewInfo_attributes, { "BaseTextViewInfo", swig_BaseTextViewInfo_cls_methods, swig_BaseTextViewInfo_cls_attributes, swig_BaseTextViewInfo_cls_constants }, swig_BaseTextViewInfo_bases, swig_BaseTextViewInfo_base_names };

static int _wrap_new_BaseSpriteViewInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  BaseSpriteViewInfo *result = 0 ;
  
  SWIG_check_num_args("BaseSpriteViewInfo::BaseSpriteViewInfo",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",6,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  result = (BaseSpriteViewInfo *)new BaseSpriteViewInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseSpriteViewInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseSpriteViewInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  BaseSpriteViewInfo *result = 0 ;
  
  SWIG_check_num_args("BaseSpriteViewInfo::BaseSpriteViewInfo",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",5,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (BaseSpriteViewInfo *)new BaseSpriteViewInfo(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseSpriteViewInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseSpriteViewInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  BaseSpriteViewInfo *result = 0 ;
  
  SWIG_check_num_args("BaseSpriteViewInfo::BaseSpriteViewInfo",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",4,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (BaseSpriteViewInfo *)new BaseSpriteViewInfo(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseSpriteViewInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseSpriteViewInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  float arg3 ;
  BaseSpriteViewInfo *result = 0 ;
  
  SWIG_check_num_args("BaseSpriteViewInfo::BaseSpriteViewInfo",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",3,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (BaseSpriteViewInfo *)new BaseSpriteViewInfo(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseSpriteViewInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseSpriteViewInfo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  BaseSpriteViewInfo *result = 0 ;
  
  SWIG_check_num_args("BaseSpriteViewInfo::BaseSpriteViewInfo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (BaseSpriteViewInfo *)new BaseSpriteViewInfo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseSpriteViewInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseSpriteViewInfo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  BaseSpriteViewInfo *result = 0 ;
  
  SWIG_check_num_args("BaseSpriteViewInfo::BaseSpriteViewInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::BaseSpriteViewInfo",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (BaseSpriteViewInfo *)new BaseSpriteViewInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseSpriteViewInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseSpriteViewInfo__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  BaseSpriteViewInfo *result = 0 ;
  
  SWIG_check_num_args("BaseSpriteViewInfo::BaseSpriteViewInfo",0,0)
  result = (BaseSpriteViewInfo *)new BaseSpriteViewInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseSpriteViewInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseSpriteViewInfo(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BaseSpriteViewInfo__SWIG_6(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BaseSpriteViewInfo__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_BaseSpriteViewInfo__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_BaseSpriteViewInfo__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_BaseSpriteViewInfo__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_BaseSpriteViewInfo__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_BaseSpriteViewInfo__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BaseSpriteViewInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    BaseSpriteViewInfo::BaseSpriteViewInfo(int,int,float,float,float,float)\n"
    "    BaseSpriteViewInfo::BaseSpriteViewInfo(int,int,float,float,float)\n"
    "    BaseSpriteViewInfo::BaseSpriteViewInfo(int,int,float,float)\n"
    "    BaseSpriteViewInfo::BaseSpriteViewInfo(int,int,float)\n"
    "    BaseSpriteViewInfo::BaseSpriteViewInfo(int,int)\n"
    "    BaseSpriteViewInfo::BaseSpriteViewInfo(int)\n"
    "    BaseSpriteViewInfo::BaseSpriteViewInfo()\n");
  lua_error(L);return 0;
}


static int _wrap_BaseSpriteViewInfo_setWidth(lua_State* L) {
  int SWIG_arg = 0;
  BaseSpriteViewInfo *arg1 = (BaseSpriteViewInfo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("BaseSpriteViewInfo::setWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::setWidth",1,"BaseSpriteViewInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseSpriteViewInfo::setWidth",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseSpriteViewInfo,0))){
    SWIG_fail_ptr("BaseSpriteViewInfo_setWidth",1,SWIGTYPE_p_BaseSpriteViewInfo);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpriteViewInfo_setHeight(lua_State* L) {
  int SWIG_arg = 0;
  BaseSpriteViewInfo *arg1 = (BaseSpriteViewInfo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("BaseSpriteViewInfo::setHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::setHeight",1,"BaseSpriteViewInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseSpriteViewInfo::setHeight",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseSpriteViewInfo,0))){
    SWIG_fail_ptr("BaseSpriteViewInfo_setHeight",1,SWIGTYPE_p_BaseSpriteViewInfo);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpriteViewInfo_setXOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseSpriteViewInfo *arg1 = (BaseSpriteViewInfo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("BaseSpriteViewInfo::setXOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::setXOffset",1,"BaseSpriteViewInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseSpriteViewInfo::setXOffset",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseSpriteViewInfo,0))){
    SWIG_fail_ptr("BaseSpriteViewInfo_setXOffset",1,SWIGTYPE_p_BaseSpriteViewInfo);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setXOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpriteViewInfo_setYOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseSpriteViewInfo *arg1 = (BaseSpriteViewInfo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("BaseSpriteViewInfo::setYOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::setYOffset",1,"BaseSpriteViewInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseSpriteViewInfo::setYOffset",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseSpriteViewInfo,0))){
    SWIG_fail_ptr("BaseSpriteViewInfo_setYOffset",1,SWIGTYPE_p_BaseSpriteViewInfo);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setYOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpriteViewInfo_getWidth(lua_State* L) {
  int SWIG_arg = 0;
  BaseSpriteViewInfo *arg1 = (BaseSpriteViewInfo *) 0 ;
  float result;
  
  SWIG_check_num_args("BaseSpriteViewInfo::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::getWidth",1,"BaseSpriteViewInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseSpriteViewInfo,0))){
    SWIG_fail_ptr("BaseSpriteViewInfo_getWidth",1,SWIGTYPE_p_BaseSpriteViewInfo);
  }
  
  result = (float)((BaseSpriteViewInfo const *)arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpriteViewInfo_getHeight(lua_State* L) {
  int SWIG_arg = 0;
  BaseSpriteViewInfo *arg1 = (BaseSpriteViewInfo *) 0 ;
  float result;
  
  SWIG_check_num_args("BaseSpriteViewInfo::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::getHeight",1,"BaseSpriteViewInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseSpriteViewInfo,0))){
    SWIG_fail_ptr("BaseSpriteViewInfo_getHeight",1,SWIGTYPE_p_BaseSpriteViewInfo);
  }
  
  result = (float)((BaseSpriteViewInfo const *)arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpriteViewInfo_getXOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseSpriteViewInfo *arg1 = (BaseSpriteViewInfo *) 0 ;
  float result;
  
  SWIG_check_num_args("BaseSpriteViewInfo::getXOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::getXOffset",1,"BaseSpriteViewInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseSpriteViewInfo,0))){
    SWIG_fail_ptr("BaseSpriteViewInfo_getXOffset",1,SWIGTYPE_p_BaseSpriteViewInfo);
  }
  
  result = (float)((BaseSpriteViewInfo const *)arg1)->getXOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpriteViewInfo_getYOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseSpriteViewInfo *arg1 = (BaseSpriteViewInfo *) 0 ;
  float result;
  
  SWIG_check_num_args("BaseSpriteViewInfo::getYOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::getYOffset",1,"BaseSpriteViewInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseSpriteViewInfo,0))){
    SWIG_fail_ptr("BaseSpriteViewInfo_getYOffset",1,SWIGTYPE_p_BaseSpriteViewInfo);
  }
  
  result = (float)((BaseSpriteViewInfo const *)arg1)->getYOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpriteViewInfo_getLeftTextureOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseSpriteViewInfo *arg1 = (BaseSpriteViewInfo *) 0 ;
  float result;
  
  SWIG_check_num_args("BaseSpriteViewInfo::getLeftTextureOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::getLeftTextureOffset",1,"BaseSpriteViewInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseSpriteViewInfo,0))){
    SWIG_fail_ptr("BaseSpriteViewInfo_getLeftTextureOffset",1,SWIGTYPE_p_BaseSpriteViewInfo);
  }
  
  result = (float)((BaseSpriteViewInfo const *)arg1)->getLeftTextureOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpriteViewInfo_getRightTextureOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseSpriteViewInfo *arg1 = (BaseSpriteViewInfo *) 0 ;
  float result;
  
  SWIG_check_num_args("BaseSpriteViewInfo::getRightTextureOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::getRightTextureOffset",1,"BaseSpriteViewInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseSpriteViewInfo,0))){
    SWIG_fail_ptr("BaseSpriteViewInfo_getRightTextureOffset",1,SWIGTYPE_p_BaseSpriteViewInfo);
  }
  
  result = (float)((BaseSpriteViewInfo const *)arg1)->getRightTextureOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpriteViewInfo_getTopTextureOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseSpriteViewInfo *arg1 = (BaseSpriteViewInfo *) 0 ;
  float result;
  
  SWIG_check_num_args("BaseSpriteViewInfo::getTopTextureOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::getTopTextureOffset",1,"BaseSpriteViewInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseSpriteViewInfo,0))){
    SWIG_fail_ptr("BaseSpriteViewInfo_getTopTextureOffset",1,SWIGTYPE_p_BaseSpriteViewInfo);
  }
  
  result = (float)((BaseSpriteViewInfo const *)arg1)->getTopTextureOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpriteViewInfo_getBottomTextureOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseSpriteViewInfo *arg1 = (BaseSpriteViewInfo *) 0 ;
  float result;
  
  SWIG_check_num_args("BaseSpriteViewInfo::getBottomTextureOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::getBottomTextureOffset",1,"BaseSpriteViewInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseSpriteViewInfo,0))){
    SWIG_fail_ptr("BaseSpriteViewInfo_getBottomTextureOffset",1,SWIGTYPE_p_BaseSpriteViewInfo);
  }
  
  result = (float)((BaseSpriteViewInfo const *)arg1)->getBottomTextureOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpriteViewInfo_getTextureWidth(lua_State* L) {
  int SWIG_arg = 0;
  BaseSpriteViewInfo *arg1 = (BaseSpriteViewInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("BaseSpriteViewInfo::getTextureWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::getTextureWidth",1,"BaseSpriteViewInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseSpriteViewInfo,0))){
    SWIG_fail_ptr("BaseSpriteViewInfo_getTextureWidth",1,SWIGTYPE_p_BaseSpriteViewInfo);
  }
  
  result = (int)((BaseSpriteViewInfo const *)arg1)->getTextureWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpriteViewInfo_getTextureHeight(lua_State* L) {
  int SWIG_arg = 0;
  BaseSpriteViewInfo *arg1 = (BaseSpriteViewInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("BaseSpriteViewInfo::getTextureHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::getTextureHeight",1,"BaseSpriteViewInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseSpriteViewInfo,0))){
    SWIG_fail_ptr("BaseSpriteViewInfo_getTextureHeight",1,SWIGTYPE_p_BaseSpriteViewInfo);
  }
  
  result = (int)((BaseSpriteViewInfo const *)arg1)->getTextureHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpriteViewInfo_setTextureWidth(lua_State* L) {
  int SWIG_arg = 0;
  BaseSpriteViewInfo *arg1 = (BaseSpriteViewInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("BaseSpriteViewInfo::setTextureWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::setTextureWidth",1,"BaseSpriteViewInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseSpriteViewInfo::setTextureWidth",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseSpriteViewInfo,0))){
    SWIG_fail_ptr("BaseSpriteViewInfo_setTextureWidth",1,SWIGTYPE_p_BaseSpriteViewInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setTextureWidth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseSpriteViewInfo_setTextureHeight(lua_State* L) {
  int SWIG_arg = 0;
  BaseSpriteViewInfo *arg1 = (BaseSpriteViewInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("BaseSpriteViewInfo::setTextureHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseSpriteViewInfo::setTextureHeight",1,"BaseSpriteViewInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseSpriteViewInfo::setTextureHeight",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseSpriteViewInfo,0))){
    SWIG_fail_ptr("BaseSpriteViewInfo_setTextureHeight",1,SWIGTYPE_p_BaseSpriteViewInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setTextureHeight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseSpriteViewInfo(void *obj) {
BaseSpriteViewInfo *arg1 = (BaseSpriteViewInfo *) obj;
delete arg1;
}
static swig_lua_method swig_BaseSpriteViewInfo_methods[] = {
    {"setWidth", _wrap_BaseSpriteViewInfo_setWidth}, 
    {"setHeight", _wrap_BaseSpriteViewInfo_setHeight}, 
    {"setXOffset", _wrap_BaseSpriteViewInfo_setXOffset}, 
    {"setYOffset", _wrap_BaseSpriteViewInfo_setYOffset}, 
    {"getWidth", _wrap_BaseSpriteViewInfo_getWidth}, 
    {"getHeight", _wrap_BaseSpriteViewInfo_getHeight}, 
    {"getXOffset", _wrap_BaseSpriteViewInfo_getXOffset}, 
    {"getYOffset", _wrap_BaseSpriteViewInfo_getYOffset}, 
    {"getLeftTextureOffset", _wrap_BaseSpriteViewInfo_getLeftTextureOffset}, 
    {"getRightTextureOffset", _wrap_BaseSpriteViewInfo_getRightTextureOffset}, 
    {"getTopTextureOffset", _wrap_BaseSpriteViewInfo_getTopTextureOffset}, 
    {"getBottomTextureOffset", _wrap_BaseSpriteViewInfo_getBottomTextureOffset}, 
    {"getTextureWidth", _wrap_BaseSpriteViewInfo_getTextureWidth}, 
    {"getTextureHeight", _wrap_BaseSpriteViewInfo_getTextureHeight}, 
    {"setTextureWidth", _wrap_BaseSpriteViewInfo_setTextureWidth}, 
    {"setTextureHeight", _wrap_BaseSpriteViewInfo_setTextureHeight}, 
    {0,0}
};
static swig_lua_attribute swig_BaseSpriteViewInfo_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_BaseSpriteViewInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BaseSpriteViewInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BaseSpriteViewInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BaseSpriteViewInfo_bases[] = {0};
static const char *swig_BaseSpriteViewInfo_base_names[] = {0};
static swig_lua_class _wrap_class_BaseSpriteViewInfo = { "BaseSpriteViewInfo", &SWIGTYPE_p_BaseSpriteViewInfo,_wrap_new_BaseSpriteViewInfo, swig_delete_BaseSpriteViewInfo, swig_BaseSpriteViewInfo_methods, swig_BaseSpriteViewInfo_attributes, { "BaseSpriteViewInfo", swig_BaseSpriteViewInfo_cls_methods, swig_BaseSpriteViewInfo_cls_attributes, swig_BaseSpriteViewInfo_cls_constants }, swig_BaseSpriteViewInfo_bases, swig_BaseSpriteViewInfo_base_names };

static int _wrap_BaseViewObjectInfo_m_viewObjectName_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseViewObjectInfo *arg1 = (BaseViewObjectInfo *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("BaseViewObjectInfo::m_viewObjectName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseViewObjectInfo::m_viewObjectName",1,"BaseViewObjectInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseViewObjectInfo::m_viewObjectName",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseViewObjectInfo,0))){
    SWIG_fail_ptr("BaseViewObjectInfo_m_viewObjectName_set",1,SWIGTYPE_p_BaseViewObjectInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("BaseViewObjectInfo_m_viewObjectName_set",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->m_viewObjectName = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseViewObjectInfo_m_viewObjectName_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseViewObjectInfo *arg1 = (BaseViewObjectInfo *) 0 ;
  std::string result;
  
  SWIG_check_num_args("BaseViewObjectInfo::m_viewObjectName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseViewObjectInfo::m_viewObjectName",1,"BaseViewObjectInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseViewObjectInfo,0))){
    SWIG_fail_ptr("BaseViewObjectInfo_m_viewObjectName_get",1,SWIGTYPE_p_BaseViewObjectInfo);
  }
  
  result =  ((arg1)->m_viewObjectName);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseViewObjectInfo_m_textureFactoryIDs_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseViewObjectInfo *arg1 = (BaseViewObjectInfo *) 0 ;
  IDType *arg2 ;
  
  SWIG_check_num_args("BaseViewObjectInfo::m_textureFactoryIDs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseViewObjectInfo::m_textureFactoryIDs",1,"BaseViewObjectInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseViewObjectInfo::m_textureFactoryIDs",2,"IDType [32]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseViewObjectInfo,0))){
    SWIG_fail_ptr("BaseViewObjectInfo_m_textureFactoryIDs_set",1,SWIGTYPE_p_BaseViewObjectInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("BaseViewObjectInfo_m_textureFactoryIDs_set",2,SWIGTYPE_p_long_long);
  }
  
  {
    size_t ii;
    IDType *b = (IDType *) arg1->m_textureFactoryIDs;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((IDType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseViewObjectInfo_m_textureFactoryIDs_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseViewObjectInfo *arg1 = (BaseViewObjectInfo *) 0 ;
  IDType *result = 0 ;
  
  SWIG_check_num_args("BaseViewObjectInfo::m_textureFactoryIDs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseViewObjectInfo::m_textureFactoryIDs",1,"BaseViewObjectInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseViewObjectInfo,0))){
    SWIG_fail_ptr("BaseViewObjectInfo_m_textureFactoryIDs_get",1,SWIGTYPE_p_BaseViewObjectInfo);
  }
  
  result = (IDType *)(IDType *) ((arg1)->m_textureFactoryIDs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseViewObjectInfo_m_textureBehaviorFactoryIDs_set(lua_State* L) {
  int SWIG_arg = 0;
  BaseViewObjectInfo *arg1 = (BaseViewObjectInfo *) 0 ;
  IDType *arg2 ;
  
  SWIG_check_num_args("BaseViewObjectInfo::m_textureBehaviorFactoryIDs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseViewObjectInfo::m_textureBehaviorFactoryIDs",1,"BaseViewObjectInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseViewObjectInfo::m_textureBehaviorFactoryIDs",2,"IDType [32]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseViewObjectInfo,0))){
    SWIG_fail_ptr("BaseViewObjectInfo_m_textureBehaviorFactoryIDs_set",1,SWIGTYPE_p_BaseViewObjectInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("BaseViewObjectInfo_m_textureBehaviorFactoryIDs_set",2,SWIGTYPE_p_long_long);
  }
  
  {
    size_t ii;
    IDType *b = (IDType *) arg1->m_textureBehaviorFactoryIDs;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((IDType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseViewObjectInfo_m_textureBehaviorFactoryIDs_get(lua_State* L) {
  int SWIG_arg = 0;
  BaseViewObjectInfo *arg1 = (BaseViewObjectInfo *) 0 ;
  IDType *result = 0 ;
  
  SWIG_check_num_args("BaseViewObjectInfo::m_textureBehaviorFactoryIDs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseViewObjectInfo::m_textureBehaviorFactoryIDs",1,"BaseViewObjectInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseViewObjectInfo,0))){
    SWIG_fail_ptr("BaseViewObjectInfo_m_textureBehaviorFactoryIDs_get",1,SWIGTYPE_p_BaseViewObjectInfo);
  }
  
  result = (IDType *)(IDType *) ((arg1)->m_textureBehaviorFactoryIDs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseViewObjectInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  std::string arg2 ;
  IDType *arg3 = (IDType *) 0 ;
  unsigned int arg4 ;
  IDType *arg5 = (IDType *) 0 ;
  unsigned int arg6 ;
  std::string *argp2 ;
  BaseViewObjectInfo *result = 0 ;
  
  SWIG_check_num_args("BaseViewObjectInfo::BaseViewObjectInfo",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",1,"IDType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",2,"std::string");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",3,"IDType *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",4,"unsigned int const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",5,"IDType *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",6,"unsigned int const");
  arg1 = (IDType)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_BaseViewObjectInfo",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("new_BaseViewObjectInfo",3,SWIGTYPE_p_long_long);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int const)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("new_BaseViewObjectInfo",5,SWIGTYPE_p_long_long);
  }
  
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int const)lua_tonumber(L, 6);
  result = (BaseViewObjectInfo *)new BaseViewObjectInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseViewObjectInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseViewObjectInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  std::string arg2 ;
  IDType *arg3 = (IDType *) 0 ;
  unsigned int arg4 ;
  IDType *arg5 = (IDType *) 0 ;
  std::string *argp2 ;
  BaseViewObjectInfo *result = 0 ;
  
  SWIG_check_num_args("BaseViewObjectInfo::BaseViewObjectInfo",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",1,"IDType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",2,"std::string");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",3,"IDType *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",4,"unsigned int const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",5,"IDType *");
  arg1 = (IDType)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_BaseViewObjectInfo",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("new_BaseViewObjectInfo",3,SWIGTYPE_p_long_long);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int const)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("new_BaseViewObjectInfo",5,SWIGTYPE_p_long_long);
  }
  
  result = (BaseViewObjectInfo *)new BaseViewObjectInfo(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseViewObjectInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseViewObjectInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  std::string arg2 ;
  IDType *arg3 = (IDType *) 0 ;
  unsigned int arg4 ;
  std::string *argp2 ;
  BaseViewObjectInfo *result = 0 ;
  
  SWIG_check_num_args("BaseViewObjectInfo::BaseViewObjectInfo",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",1,"IDType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",2,"std::string");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",3,"IDType *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",4,"unsigned int const");
  arg1 = (IDType)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_BaseViewObjectInfo",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("new_BaseViewObjectInfo",3,SWIGTYPE_p_long_long);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int const)lua_tonumber(L, 4);
  result = (BaseViewObjectInfo *)new BaseViewObjectInfo(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseViewObjectInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseViewObjectInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  std::string arg2 ;
  IDType *arg3 = (IDType *) 0 ;
  std::string *argp2 ;
  BaseViewObjectInfo *result = 0 ;
  
  SWIG_check_num_args("BaseViewObjectInfo::BaseViewObjectInfo",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",1,"IDType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",2,"std::string");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",3,"IDType *");
  arg1 = (IDType)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_BaseViewObjectInfo",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("new_BaseViewObjectInfo",3,SWIGTYPE_p_long_long);
  }
  
  result = (BaseViewObjectInfo *)new BaseViewObjectInfo(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseViewObjectInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseViewObjectInfo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  std::string arg2 ;
  std::string *argp2 ;
  BaseViewObjectInfo *result = 0 ;
  
  SWIG_check_num_args("BaseViewObjectInfo::BaseViewObjectInfo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",1,"IDType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",2,"std::string");
  arg1 = (IDType)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_BaseViewObjectInfo",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  result = (BaseViewObjectInfo *)new BaseViewObjectInfo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseViewObjectInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseViewObjectInfo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  IDType arg1 ;
  BaseViewObjectInfo *result = 0 ;
  
  SWIG_check_num_args("BaseViewObjectInfo::BaseViewObjectInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",1,"IDType");
  arg1 = (IDType)lua_tonumber(L, 1);
  result = (BaseViewObjectInfo *)new BaseViewObjectInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseViewObjectInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseViewObjectInfo__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  BaseViewObjectInfo *result = 0 ;
  
  SWIG_check_num_args("BaseViewObjectInfo::BaseViewObjectInfo",0,0)
  result = (BaseViewObjectInfo *)new BaseViewObjectInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseViewObjectInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseViewObjectInfo__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  BaseViewObjectInfo *arg1 = 0 ;
  BaseViewObjectInfo *result = 0 ;
  
  SWIG_check_num_args("BaseViewObjectInfo::BaseViewObjectInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("BaseViewObjectInfo::BaseViewObjectInfo",1,"BaseViewObjectInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseViewObjectInfo,0))){
    SWIG_fail_ptr("new_BaseViewObjectInfo",1,SWIGTYPE_p_BaseViewObjectInfo);
  }
  
  result = (BaseViewObjectInfo *)new BaseViewObjectInfo((BaseViewObjectInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseViewObjectInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseViewObjectInfo(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BaseViewObjectInfo__SWIG_6(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseViewObjectInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BaseViewObjectInfo__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BaseViewObjectInfo__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_BaseViewObjectInfo__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long_long, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_BaseViewObjectInfo__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long_long, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_BaseViewObjectInfo__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long_long, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_long_long, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_new_BaseViewObjectInfo__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long_long, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_long_long, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_BaseViewObjectInfo__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BaseViewObjectInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    BaseViewObjectInfo::BaseViewObjectInfo(IDType,std::string,IDType *,unsigned int const,IDType *,unsigned int const)\n"
    "    BaseViewObjectInfo::BaseViewObjectInfo(IDType,std::string,IDType *,unsigned int const,IDType *)\n"
    "    BaseViewObjectInfo::BaseViewObjectInfo(IDType,std::string,IDType *,unsigned int const)\n"
    "    BaseViewObjectInfo::BaseViewObjectInfo(IDType,std::string,IDType *)\n"
    "    BaseViewObjectInfo::BaseViewObjectInfo(IDType,std::string)\n"
    "    BaseViewObjectInfo::BaseViewObjectInfo(IDType)\n"
    "    BaseViewObjectInfo::BaseViewObjectInfo()\n"
    "    BaseViewObjectInfo::BaseViewObjectInfo(BaseViewObjectInfo const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_BaseViewObjectInfo(void *obj) {
BaseViewObjectInfo *arg1 = (BaseViewObjectInfo *) obj;
delete arg1;
}
static swig_lua_method swig_BaseViewObjectInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_BaseViewObjectInfo_attributes[] = {
    { "m_viewObjectName", _wrap_BaseViewObjectInfo_m_viewObjectName_get, _wrap_BaseViewObjectInfo_m_viewObjectName_set},
    { "m_textureFactoryIDs", _wrap_BaseViewObjectInfo_m_textureFactoryIDs_get, _wrap_BaseViewObjectInfo_m_textureFactoryIDs_set},
    { "m_textureBehaviorFactoryIDs", _wrap_BaseViewObjectInfo_m_textureBehaviorFactoryIDs_get, _wrap_BaseViewObjectInfo_m_textureBehaviorFactoryIDs_set},
    {0,0,0}
};
static swig_lua_attribute swig_BaseViewObjectInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BaseViewObjectInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BaseViewObjectInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BaseViewObjectInfo_bases[] = {0};
static const char *swig_BaseViewObjectInfo_base_names[] = {0};
static swig_lua_class _wrap_class_BaseViewObjectInfo = { "BaseViewObjectInfo", &SWIGTYPE_p_BaseViewObjectInfo,_wrap_new_BaseViewObjectInfo, swig_delete_BaseViewObjectInfo, swig_BaseViewObjectInfo_methods, swig_BaseViewObjectInfo_attributes, { "BaseViewObjectInfo", swig_BaseViewObjectInfo_cls_methods, swig_BaseViewObjectInfo_cls_attributes, swig_BaseViewObjectInfo_cls_constants }, swig_BaseViewObjectInfo_bases, swig_BaseViewObjectInfo_base_names };

static int _wrap_c_dMINDETECTIONBOXLENGTH_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("c_dMINDETECTIONBOXLENGTH",0,0)
  result = (double)(double)c_dMINDETECTIONBOXLENGTH;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_calculate(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::calculate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::calculate",1,"BaseEntitySteeringBehavior *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseEntitySteeringBehavior::calculate",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_calculate",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->calculate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_debugDraw(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::debugDraw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::debugDraw",1,"BaseEntitySteeringBehavior *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseEntitySteeringBehavior::debugDraw",2,"btIDebugDraw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_debugDraw",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_debugDraw",2,SWIGTYPE_p_btIDebugDraw);
  }
  
  (arg1)->debugDraw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getForwardComponent(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getForwardComponent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getForwardComponent",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getForwardComponent",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (btScalar)(arg1)->getForwardComponent();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getSideComponent(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getSideComponent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getSideComponent",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getSideComponent",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (btScalar)(arg1)->getSideComponent();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getLinearFactor(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getLinearFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getLinearFactor",1,"BaseEntitySteeringBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getLinearFactor",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (btVector3 *) &((BaseEntitySteeringBehavior const *)arg1)->getLinearFactor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_setLinearFactor(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::setLinearFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::setLinearFactor",1,"BaseEntitySteeringBehavior *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseEntitySteeringBehavior::setLinearFactor",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setLinearFactor",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setLinearFactor",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setLinearFactor((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getLinearImpulse(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getLinearImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getLinearImpulse",1,"BaseEntitySteeringBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getLinearImpulse",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (btVector3 *) &((BaseEntitySteeringBehavior const *)arg1)->getLinearImpulse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getAngularImpulse(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getAngularImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getAngularImpulse",1,"BaseEntitySteeringBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getAngularImpulse",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (btVector3 *) &((BaseEntitySteeringBehavior const *)arg1)->getAngularImpulse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_setDirectLinearImpulse(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::setDirectLinearImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::setDirectLinearImpulse",1,"BaseEntitySteeringBehavior *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseEntitySteeringBehavior::setDirectLinearImpulse",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setDirectLinearImpulse",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setDirectLinearImpulse",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setDirectLinearImpulse((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_setDirectAngularImpulse(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::setDirectAngularImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::setDirectAngularImpulse",1,"BaseEntitySteeringBehavior *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseEntitySteeringBehavior::setDirectAngularImpulse",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setDirectAngularImpulse",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setDirectAngularImpulse",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setDirectAngularImpulse((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getDirectLinearImpulse(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getDirectLinearImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getDirectLinearImpulse",1,"BaseEntitySteeringBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getDirectLinearImpulse",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (btVector3 *) &((BaseEntitySteeringBehavior const *)arg1)->getDirectLinearImpulse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getDirectAngularImpulse(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getDirectAngularImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getDirectAngularImpulse",1,"BaseEntitySteeringBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getDirectAngularImpulse",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (btVector3 *) &((BaseEntitySteeringBehavior const *)arg1)->getDirectAngularImpulse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getDirectLinearDamping(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getDirectLinearDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getDirectLinearDamping",1,"BaseEntitySteeringBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getDirectLinearDamping",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (btScalar)((BaseEntitySteeringBehavior const *)arg1)->getDirectLinearDamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getDirectAngularDamping(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getDirectAngularDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getDirectAngularDamping",1,"BaseEntitySteeringBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getDirectAngularDamping",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (btScalar)((BaseEntitySteeringBehavior const *)arg1)->getDirectAngularDamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_setDirectImpulseDamping(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::setDirectImpulseDamping",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::setDirectImpulseDamping",1,"BaseEntitySteeringBehavior *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseEntitySteeringBehavior::setDirectImpulseDamping",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseEntitySteeringBehavior::setDirectImpulseDamping",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setDirectImpulseDamping",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->setDirectImpulseDamping(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_applyDirectDamping(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::applyDirectDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::applyDirectDamping",1,"BaseEntitySteeringBehavior *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseEntitySteeringBehavior::applyDirectDamping",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_applyDirectDamping",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->applyDirectDamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getSteeringBehaviorInfo(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  SteeringBehaviorInfo *result = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getSteeringBehaviorInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getSteeringBehaviorInfo",1,"BaseEntitySteeringBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getSteeringBehaviorInfo",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (SteeringBehaviorInfo *) &((BaseEntitySteeringBehavior const *)arg1)->getSteeringBehaviorInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SteeringBehaviorInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_FleeOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::FleeOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::FleeOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_FleeOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->FleeOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_setSeekOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::setSeekOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::setSeekOn",1,"BaseEntitySteeringBehavior *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseEntitySteeringBehavior::setSeekOn",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setSeekOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setSeekOn",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setSeekOn((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getSeekPosition(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getSeekPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getSeekPosition",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getSeekPosition",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (btVector3 *) &(arg1)->getSeekPosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_setArriveOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::setArriveOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::setArriveOn",1,"BaseEntitySteeringBehavior *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseEntitySteeringBehavior::setArriveOn",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setArriveOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setArriveOn",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setArriveOn((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getArrivePosition(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getArrivePosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getArrivePosition",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getArrivePosition",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (btVector3 *) &(arg1)->getArrivePosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_setWanderOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::setWanderOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::setWanderOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setWanderOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->setWanderOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_setPursuitOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  RigidEntity *arg2 = (RigidEntity *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::setPursuitOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::setPursuitOn",1,"BaseEntitySteeringBehavior *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseEntitySteeringBehavior::setPursuitOn",2,"RigidEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setPursuitOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setPursuitOn",2,SWIGTYPE_p_RigidEntity);
  }
  
  (arg1)->setPursuitOn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getPursuitTarget(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  RigidEntity *result = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getPursuitTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getPursuitTarget",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getPursuitTarget",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (RigidEntity *)(arg1)->getPursuitTarget();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RigidEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_setEvadeOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  RigidEntity *arg2 = (RigidEntity *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::setEvadeOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::setEvadeOn",1,"BaseEntitySteeringBehavior *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseEntitySteeringBehavior::setEvadeOn",2,"RigidEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setEvadeOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setEvadeOn",2,SWIGTYPE_p_RigidEntity);
  }
  
  (arg1)->setEvadeOn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getEvadeTarget(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  RigidEntity *result = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getEvadeTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getEvadeTarget",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getEvadeTarget",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (RigidEntity *)(arg1)->getEvadeTarget();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RigidEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_setFollowPathOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  Path *arg2 = (Path *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::setFollowPathOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::setFollowPathOn",1,"BaseEntitySteeringBehavior *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseEntitySteeringBehavior::setFollowPathOn",2,"Path *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setFollowPathOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setFollowPathOn",2,SWIGTYPE_p_Path);
  }
  
  (arg1)->setFollowPathOn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_setPath(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  Path *arg2 = (Path *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::setPath",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::setPath",1,"BaseEntitySteeringBehavior *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseEntitySteeringBehavior::setPath",2,"Path *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setPath",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setPath",2,SWIGTYPE_p_Path);
  }
  
  (arg1)->setPath(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getPath__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  Path *result = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getPath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getPath",1,"BaseEntitySteeringBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getPath",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (Path *)((BaseEntitySteeringBehavior const *)arg1)->getPath();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Path,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getPath__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  Path *result = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getPath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getPath",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getPath",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (Path *)(arg1)->getPath();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Path,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getPath(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseEntitySteeringBehavior, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BaseEntitySteeringBehavior_getPath__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseEntitySteeringBehavior, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BaseEntitySteeringBehavior_getPath__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BaseEntitySteeringBehavior_getPath'\n"
    "  Possible C/C++ prototypes are:\n"
    "    BaseEntitySteeringBehavior::getPath() const\n"
    "    BaseEntitySteeringBehavior::getPath()\n");
  lua_error(L);return 0;
}


static int _wrap_BaseEntitySteeringBehavior_CohesionOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::CohesionOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::CohesionOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_CohesionOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->CohesionOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_SeparationOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::SeparationOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::SeparationOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_SeparationOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->SeparationOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_AlignmentOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::AlignmentOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::AlignmentOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_AlignmentOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->AlignmentOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_ObstacleAvoidanceOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::ObstacleAvoidanceOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::ObstacleAvoidanceOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_ObstacleAvoidanceOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->ObstacleAvoidanceOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_WallAvoidanceOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::WallAvoidanceOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::WallAvoidanceOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_WallAvoidanceOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->WallAvoidanceOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_InterposeOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  RigidEntity *arg2 = (RigidEntity *) 0 ;
  RigidEntity *arg3 = (RigidEntity *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::InterposeOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::InterposeOn",1,"BaseEntitySteeringBehavior *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseEntitySteeringBehavior::InterposeOn",2,"RigidEntity *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("BaseEntitySteeringBehavior::InterposeOn",3,"RigidEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_InterposeOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_InterposeOn",2,SWIGTYPE_p_RigidEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_InterposeOn",3,SWIGTYPE_p_RigidEntity);
  }
  
  (arg1)->InterposeOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_HideOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  RigidEntity *arg2 = (RigidEntity *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::HideOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::HideOn",1,"BaseEntitySteeringBehavior *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseEntitySteeringBehavior::HideOn",2,"RigidEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_HideOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_HideOn",2,SWIGTYPE_p_RigidEntity);
  }
  
  (arg1)->HideOn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_setOffsetPursuitOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  RigidEntity *arg2 = (RigidEntity *) 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::setOffsetPursuitOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::setOffsetPursuitOn",1,"BaseEntitySteeringBehavior *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseEntitySteeringBehavior::setOffsetPursuitOn",2,"RigidEntity *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("BaseEntitySteeringBehavior::setOffsetPursuitOn",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setOffsetPursuitOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setOffsetPursuitOn",2,SWIGTYPE_p_RigidEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_setOffsetPursuitOn",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setOffsetPursuitOn(arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getOffsetPursuitTarget(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  RigidEntity *result = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getOffsetPursuitTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getOffsetPursuitTarget",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getOffsetPursuitTarget",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (RigidEntity *)(arg1)->getOffsetPursuitTarget();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RigidEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_getOffsetPursuitOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::getOffsetPursuitOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::getOffsetPursuitOffset",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_getOffsetPursuitOffset",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (btVector3 *) &(arg1)->getOffsetPursuitOffset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_FlockingOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::FlockingOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::FlockingOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_FlockingOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->FlockingOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_FleeOff(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::FleeOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::FleeOff",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_FleeOff",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->FleeOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_SeekOff(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::SeekOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::SeekOff",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_SeekOff",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->SeekOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_ArriveOff(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::ArriveOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::ArriveOff",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_ArriveOff",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->ArriveOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_WanderOff(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::WanderOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::WanderOff",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_WanderOff",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->WanderOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_PursuitOff(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::PursuitOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::PursuitOff",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_PursuitOff",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->PursuitOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_EvadeOff(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::EvadeOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::EvadeOff",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_EvadeOff",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->EvadeOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_CohesionOff(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::CohesionOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::CohesionOff",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_CohesionOff",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->CohesionOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_SeparationOff(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::SeparationOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::SeparationOff",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_SeparationOff",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->SeparationOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_AlignmentOff(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::AlignmentOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::AlignmentOff",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_AlignmentOff",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->AlignmentOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_ObstacleAvoidanceOff(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::ObstacleAvoidanceOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::ObstacleAvoidanceOff",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_ObstacleAvoidanceOff",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->ObstacleAvoidanceOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_WallAvoidanceOff(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::WallAvoidanceOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::WallAvoidanceOff",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_WallAvoidanceOff",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->WallAvoidanceOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_FollowPathOff(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::FollowPathOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::FollowPathOff",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_FollowPathOff",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->FollowPathOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_InterposeOff(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::InterposeOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::InterposeOff",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_InterposeOff",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->InterposeOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_HideOff(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::HideOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::HideOff",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_HideOff",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->HideOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_OffsetPursuitOff(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::OffsetPursuitOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::OffsetPursuitOff",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_OffsetPursuitOff",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->OffsetPursuitOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_FlockingOff(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::FlockingOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::FlockingOff",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_FlockingOff",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  (arg1)->FlockingOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_isFleeOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::isFleeOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::isFleeOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_isFleeOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (bool)(arg1)->isFleeOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_isSeekOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::isSeekOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::isSeekOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_isSeekOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (bool)(arg1)->isSeekOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_isArriveOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::isArriveOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::isArriveOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_isArriveOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (bool)(arg1)->isArriveOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_isWanderOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::isWanderOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::isWanderOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_isWanderOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (bool)(arg1)->isWanderOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_isPursuitOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::isPursuitOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::isPursuitOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_isPursuitOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (bool)(arg1)->isPursuitOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_isEvadeOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::isEvadeOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::isEvadeOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_isEvadeOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (bool)(arg1)->isEvadeOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_isCohesionOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::isCohesionOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::isCohesionOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_isCohesionOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (bool)(arg1)->isCohesionOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_isSeparationOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::isSeparationOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::isSeparationOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_isSeparationOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (bool)(arg1)->isSeparationOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_isAlignmentOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::isAlignmentOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::isAlignmentOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_isAlignmentOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (bool)(arg1)->isAlignmentOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_isObstacleAvoidanceOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::isObstacleAvoidanceOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::isObstacleAvoidanceOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_isObstacleAvoidanceOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (bool)(arg1)->isObstacleAvoidanceOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_isWallAvoidanceOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::isWallAvoidanceOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::isWallAvoidanceOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_isWallAvoidanceOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (bool)(arg1)->isWallAvoidanceOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_isFollowPathOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::isFollowPathOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::isFollowPathOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_isFollowPathOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (bool)(arg1)->isFollowPathOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_isInterposeOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::isInterposeOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::isInterposeOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_isInterposeOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (bool)(arg1)->isInterposeOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_isHideOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::isHideOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::isHideOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_isHideOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (bool)(arg1)->isHideOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_isOffsetPursuitOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::isOffsetPursuitOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::isOffsetPursuitOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_isOffsetPursuitOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (bool)(arg1)->isOffsetPursuitOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntitySteeringBehavior_isFlockOn(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntitySteeringBehavior::isFlockOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntitySteeringBehavior::isFlockOn",1,"BaseEntitySteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntitySteeringBehavior,0))){
    SWIG_fail_ptr("BaseEntitySteeringBehavior_isFlockOn",1,SWIGTYPE_p_BaseEntitySteeringBehavior);
  }
  
  result = (bool)(arg1)->isFlockOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseEntitySteeringBehavior(void *obj) {
BaseEntitySteeringBehavior *arg1 = (BaseEntitySteeringBehavior *) obj;
delete arg1;
}
static swig_lua_method swig_BaseEntitySteeringBehavior_methods[] = {
    {"calculate", _wrap_BaseEntitySteeringBehavior_calculate}, 
    {"debugDraw", _wrap_BaseEntitySteeringBehavior_debugDraw}, 
    {"getForwardComponent", _wrap_BaseEntitySteeringBehavior_getForwardComponent}, 
    {"getSideComponent", _wrap_BaseEntitySteeringBehavior_getSideComponent}, 
    {"getLinearFactor", _wrap_BaseEntitySteeringBehavior_getLinearFactor}, 
    {"setLinearFactor", _wrap_BaseEntitySteeringBehavior_setLinearFactor}, 
    {"getLinearImpulse", _wrap_BaseEntitySteeringBehavior_getLinearImpulse}, 
    {"getAngularImpulse", _wrap_BaseEntitySteeringBehavior_getAngularImpulse}, 
    {"setDirectLinearImpulse", _wrap_BaseEntitySteeringBehavior_setDirectLinearImpulse}, 
    {"setDirectAngularImpulse", _wrap_BaseEntitySteeringBehavior_setDirectAngularImpulse}, 
    {"getDirectLinearImpulse", _wrap_BaseEntitySteeringBehavior_getDirectLinearImpulse}, 
    {"getDirectAngularImpulse", _wrap_BaseEntitySteeringBehavior_getDirectAngularImpulse}, 
    {"getDirectLinearDamping", _wrap_BaseEntitySteeringBehavior_getDirectLinearDamping}, 
    {"getDirectAngularDamping", _wrap_BaseEntitySteeringBehavior_getDirectAngularDamping}, 
    {"setDirectImpulseDamping", _wrap_BaseEntitySteeringBehavior_setDirectImpulseDamping}, 
    {"applyDirectDamping", _wrap_BaseEntitySteeringBehavior_applyDirectDamping}, 
    {"getSteeringBehaviorInfo", _wrap_BaseEntitySteeringBehavior_getSteeringBehaviorInfo}, 
    {"FleeOn", _wrap_BaseEntitySteeringBehavior_FleeOn}, 
    {"setSeekOn", _wrap_BaseEntitySteeringBehavior_setSeekOn}, 
    {"getSeekPosition", _wrap_BaseEntitySteeringBehavior_getSeekPosition}, 
    {"setArriveOn", _wrap_BaseEntitySteeringBehavior_setArriveOn}, 
    {"getArrivePosition", _wrap_BaseEntitySteeringBehavior_getArrivePosition}, 
    {"setWanderOn", _wrap_BaseEntitySteeringBehavior_setWanderOn}, 
    {"setPursuitOn", _wrap_BaseEntitySteeringBehavior_setPursuitOn}, 
    {"getPursuitTarget", _wrap_BaseEntitySteeringBehavior_getPursuitTarget}, 
    {"setEvadeOn", _wrap_BaseEntitySteeringBehavior_setEvadeOn}, 
    {"getEvadeTarget", _wrap_BaseEntitySteeringBehavior_getEvadeTarget}, 
    {"setFollowPathOn", _wrap_BaseEntitySteeringBehavior_setFollowPathOn}, 
    {"setPath", _wrap_BaseEntitySteeringBehavior_setPath}, 
    {"getPath", _wrap_BaseEntitySteeringBehavior_getPath}, 
    {"CohesionOn", _wrap_BaseEntitySteeringBehavior_CohesionOn}, 
    {"SeparationOn", _wrap_BaseEntitySteeringBehavior_SeparationOn}, 
    {"AlignmentOn", _wrap_BaseEntitySteeringBehavior_AlignmentOn}, 
    {"ObstacleAvoidanceOn", _wrap_BaseEntitySteeringBehavior_ObstacleAvoidanceOn}, 
    {"WallAvoidanceOn", _wrap_BaseEntitySteeringBehavior_WallAvoidanceOn}, 
    {"InterposeOn", _wrap_BaseEntitySteeringBehavior_InterposeOn}, 
    {"HideOn", _wrap_BaseEntitySteeringBehavior_HideOn}, 
    {"setOffsetPursuitOn", _wrap_BaseEntitySteeringBehavior_setOffsetPursuitOn}, 
    {"getOffsetPursuitTarget", _wrap_BaseEntitySteeringBehavior_getOffsetPursuitTarget}, 
    {"getOffsetPursuitOffset", _wrap_BaseEntitySteeringBehavior_getOffsetPursuitOffset}, 
    {"FlockingOn", _wrap_BaseEntitySteeringBehavior_FlockingOn}, 
    {"FleeOff", _wrap_BaseEntitySteeringBehavior_FleeOff}, 
    {"SeekOff", _wrap_BaseEntitySteeringBehavior_SeekOff}, 
    {"ArriveOff", _wrap_BaseEntitySteeringBehavior_ArriveOff}, 
    {"WanderOff", _wrap_BaseEntitySteeringBehavior_WanderOff}, 
    {"PursuitOff", _wrap_BaseEntitySteeringBehavior_PursuitOff}, 
    {"EvadeOff", _wrap_BaseEntitySteeringBehavior_EvadeOff}, 
    {"CohesionOff", _wrap_BaseEntitySteeringBehavior_CohesionOff}, 
    {"SeparationOff", _wrap_BaseEntitySteeringBehavior_SeparationOff}, 
    {"AlignmentOff", _wrap_BaseEntitySteeringBehavior_AlignmentOff}, 
    {"ObstacleAvoidanceOff", _wrap_BaseEntitySteeringBehavior_ObstacleAvoidanceOff}, 
    {"WallAvoidanceOff", _wrap_BaseEntitySteeringBehavior_WallAvoidanceOff}, 
    {"FollowPathOff", _wrap_BaseEntitySteeringBehavior_FollowPathOff}, 
    {"InterposeOff", _wrap_BaseEntitySteeringBehavior_InterposeOff}, 
    {"HideOff", _wrap_BaseEntitySteeringBehavior_HideOff}, 
    {"OffsetPursuitOff", _wrap_BaseEntitySteeringBehavior_OffsetPursuitOff}, 
    {"FlockingOff", _wrap_BaseEntitySteeringBehavior_FlockingOff}, 
    {"isFleeOn", _wrap_BaseEntitySteeringBehavior_isFleeOn}, 
    {"isSeekOn", _wrap_BaseEntitySteeringBehavior_isSeekOn}, 
    {"isArriveOn", _wrap_BaseEntitySteeringBehavior_isArriveOn}, 
    {"isWanderOn", _wrap_BaseEntitySteeringBehavior_isWanderOn}, 
    {"isPursuitOn", _wrap_BaseEntitySteeringBehavior_isPursuitOn}, 
    {"isEvadeOn", _wrap_BaseEntitySteeringBehavior_isEvadeOn}, 
    {"isCohesionOn", _wrap_BaseEntitySteeringBehavior_isCohesionOn}, 
    {"isSeparationOn", _wrap_BaseEntitySteeringBehavior_isSeparationOn}, 
    {"isAlignmentOn", _wrap_BaseEntitySteeringBehavior_isAlignmentOn}, 
    {"isObstacleAvoidanceOn", _wrap_BaseEntitySteeringBehavior_isObstacleAvoidanceOn}, 
    {"isWallAvoidanceOn", _wrap_BaseEntitySteeringBehavior_isWallAvoidanceOn}, 
    {"isFollowPathOn", _wrap_BaseEntitySteeringBehavior_isFollowPathOn}, 
    {"isInterposeOn", _wrap_BaseEntitySteeringBehavior_isInterposeOn}, 
    {"isHideOn", _wrap_BaseEntitySteeringBehavior_isHideOn}, 
    {"isOffsetPursuitOn", _wrap_BaseEntitySteeringBehavior_isOffsetPursuitOn}, 
    {"isFlockOn", _wrap_BaseEntitySteeringBehavior_isFlockOn}, 
    {0,0}
};
static swig_lua_attribute swig_BaseEntitySteeringBehavior_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_BaseEntitySteeringBehavior_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BaseEntitySteeringBehavior_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BaseEntitySteeringBehavior_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BaseEntitySteeringBehavior_bases[] = {0,0};
static const char *swig_BaseEntitySteeringBehavior_base_names[] = {"AbstractBehavior< SteeringEntity > *",0};
static swig_lua_class _wrap_class_BaseEntitySteeringBehavior = { "BaseEntitySteeringBehavior", &SWIGTYPE_p_BaseEntitySteeringBehavior,0, swig_delete_BaseEntitySteeringBehavior, swig_BaseEntitySteeringBehavior_methods, swig_BaseEntitySteeringBehavior_attributes, { "BaseEntitySteeringBehavior", swig_BaseEntitySteeringBehavior_cls_methods, swig_BaseEntitySteeringBehavior_cls_attributes, swig_BaseEntitySteeringBehavior_cls_constants }, swig_BaseEntitySteeringBehavior_bases, swig_BaseEntitySteeringBehavior_base_names };

static int _wrap_new_BaseCollisionFilterBehavior(lua_State* L) {
  int SWIG_arg = 0;
  CollisionFilterBehaviorInfo *arg1 = 0 ;
  BaseCollisionFilterBehavior *result = 0 ;
  
  SWIG_check_num_args("BaseCollisionFilterBehavior::BaseCollisionFilterBehavior",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("BaseCollisionFilterBehavior::BaseCollisionFilterBehavior",1,"CollisionFilterBehaviorInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CollisionFilterBehaviorInfo,0))){
    SWIG_fail_ptr("new_BaseCollisionFilterBehavior",1,SWIGTYPE_p_CollisionFilterBehaviorInfo);
  }
  
  result = (BaseCollisionFilterBehavior *)new BaseCollisionFilterBehavior((CollisionFilterBehaviorInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCollisionFilterBehavior,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCollisionFilterBehavior_shouldCollide(lua_State* L) {
  int SWIG_arg = 0;
  BaseCollisionFilterBehavior *arg1 = (BaseCollisionFilterBehavior *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseCollisionFilterBehavior::shouldCollide",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCollisionFilterBehavior::shouldCollide",1,"BaseCollisionFilterBehavior const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseCollisionFilterBehavior::shouldCollide",2,"BaseEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCollisionFilterBehavior,0))){
    SWIG_fail_ptr("BaseCollisionFilterBehavior_shouldCollide",1,SWIGTYPE_p_BaseCollisionFilterBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("BaseCollisionFilterBehavior_shouldCollide",2,SWIGTYPE_p_BaseEntity);
  }
  
  result = (bool)((BaseCollisionFilterBehavior const *)arg1)->shouldCollide((BaseEntity const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCollisionFilterBehavior_getCollideType(lua_State* L) {
  int SWIG_arg = 0;
  BaseCollisionFilterBehavior *arg1 = (BaseCollisionFilterBehavior *) 0 ;
  CollisionFilterBehaviorTypes result;
  
  SWIG_check_num_args("BaseCollisionFilterBehavior::getCollideType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCollisionFilterBehavior::getCollideType",1,"BaseCollisionFilterBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCollisionFilterBehavior,0))){
    SWIG_fail_ptr("BaseCollisionFilterBehavior_getCollideType",1,SWIGTYPE_p_BaseCollisionFilterBehavior);
  }
  
  result = (CollisionFilterBehaviorTypes)((BaseCollisionFilterBehavior const *)arg1)->getCollideType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseCollisionFilterBehavior(void *obj) {
BaseCollisionFilterBehavior *arg1 = (BaseCollisionFilterBehavior *) obj;
delete arg1;
}
static swig_lua_method swig_BaseCollisionFilterBehavior_methods[] = {
    {"shouldCollide", _wrap_BaseCollisionFilterBehavior_shouldCollide}, 
    {"getCollideType", _wrap_BaseCollisionFilterBehavior_getCollideType}, 
    {0,0}
};
static swig_lua_attribute swig_BaseCollisionFilterBehavior_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_BaseCollisionFilterBehavior_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BaseCollisionFilterBehavior_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BaseCollisionFilterBehavior_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BaseCollisionFilterBehavior_bases[] = {0,0};
static const char *swig_BaseCollisionFilterBehavior_base_names[] = {"AbstractBehavior< BaseEntity > *",0};
static swig_lua_class _wrap_class_BaseCollisionFilterBehavior = { "BaseCollisionFilterBehavior", &SWIGTYPE_p_BaseCollisionFilterBehavior,_wrap_new_BaseCollisionFilterBehavior, swig_delete_BaseCollisionFilterBehavior, swig_BaseCollisionFilterBehavior_methods, swig_BaseCollisionFilterBehavior_attributes, { "BaseCollisionFilterBehavior", swig_BaseCollisionFilterBehavior_cls_methods, swig_BaseCollisionFilterBehavior_cls_attributes, swig_BaseCollisionFilterBehavior_cls_constants }, swig_BaseCollisionFilterBehavior_bases, swig_BaseCollisionFilterBehavior_base_names };

static int _wrap_BaseCollisionResponseBehavior_getOtherType(lua_State* L) {
  int SWIG_arg = 0;
  BaseCollisionResponseBehavior *arg1 = (BaseCollisionResponseBehavior *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  CollisionFilterBehaviorTypes result;
  
  SWIG_check_num_args("BaseCollisionResponseBehavior::getOtherType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCollisionResponseBehavior::getOtherType",1,"BaseCollisionResponseBehavior const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseCollisionResponseBehavior::getOtherType",2,"BaseEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCollisionResponseBehavior,0))){
    SWIG_fail_ptr("BaseCollisionResponseBehavior_getOtherType",1,SWIGTYPE_p_BaseCollisionResponseBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("BaseCollisionResponseBehavior_getOtherType",2,SWIGTYPE_p_BaseEntity);
  }
  
  result = (CollisionFilterBehaviorTypes)((BaseCollisionResponseBehavior const *)arg1)->getOtherType((BaseEntity const *)arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCollisionResponseBehavior_respond__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  BaseCollisionResponseBehavior *arg1 = (BaseCollisionResponseBehavior *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  btManifoldPoint *arg3 = 0 ;
  
  SWIG_check_num_args("BaseCollisionResponseBehavior::respond",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCollisionResponseBehavior::respond",1,"BaseCollisionResponseBehavior *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseCollisionResponseBehavior::respond",2,"BaseEntity *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("BaseCollisionResponseBehavior::respond",3,"btManifoldPoint const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCollisionResponseBehavior,0))){
    SWIG_fail_ptr("BaseCollisionResponseBehavior_respond",1,SWIGTYPE_p_BaseCollisionResponseBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("BaseCollisionResponseBehavior_respond",2,SWIGTYPE_p_BaseEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("BaseCollisionResponseBehavior_respond",3,SWIGTYPE_p_btManifoldPoint);
  }
  
  (arg1)->respond(arg2,(btManifoldPoint const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCollisionResponseBehavior_respond__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  BaseCollisionResponseBehavior *arg1 = (BaseCollisionResponseBehavior *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  
  SWIG_check_num_args("BaseCollisionResponseBehavior::respond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCollisionResponseBehavior::respond",1,"BaseCollisionResponseBehavior *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseCollisionResponseBehavior::respond",2,"BaseEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCollisionResponseBehavior,0))){
    SWIG_fail_ptr("BaseCollisionResponseBehavior_respond",1,SWIGTYPE_p_BaseCollisionResponseBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("BaseCollisionResponseBehavior_respond",2,SWIGTYPE_p_BaseEntity);
  }
  
  (arg1)->respond(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseCollisionResponseBehavior_respond(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseCollisionResponseBehavior, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseEntity, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BaseCollisionResponseBehavior_respond__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseCollisionResponseBehavior, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseEntity, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btManifoldPoint, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BaseCollisionResponseBehavior_respond__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BaseCollisionResponseBehavior_respond'\n"
    "  Possible C/C++ prototypes are:\n"
    "    BaseCollisionResponseBehavior::respond(BaseEntity *,btManifoldPoint const &)\n"
    "    BaseCollisionResponseBehavior::respond(BaseEntity *)\n");
  lua_error(L);return 0;
}


static int _wrap_BaseCollisionResponseBehavior_reset(lua_State* L) {
  int SWIG_arg = 0;
  BaseCollisionResponseBehavior *arg1 = (BaseCollisionResponseBehavior *) 0 ;
  
  SWIG_check_num_args("BaseCollisionResponseBehavior::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseCollisionResponseBehavior::reset",1,"BaseCollisionResponseBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseCollisionResponseBehavior,0))){
    SWIG_fail_ptr("BaseCollisionResponseBehavior_reset",1,SWIGTYPE_p_BaseCollisionResponseBehavior);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseCollisionResponseBehavior(void *obj) {
BaseCollisionResponseBehavior *arg1 = (BaseCollisionResponseBehavior *) obj;
delete arg1;
}
static swig_lua_method swig_BaseCollisionResponseBehavior_methods[] = {
    {"getOtherType", _wrap_BaseCollisionResponseBehavior_getOtherType}, 
    {"respond", _wrap_BaseCollisionResponseBehavior_respond}, 
    {"reset", _wrap_BaseCollisionResponseBehavior_reset}, 
    {0,0}
};
static swig_lua_attribute swig_BaseCollisionResponseBehavior_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_BaseCollisionResponseBehavior_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BaseCollisionResponseBehavior_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BaseCollisionResponseBehavior_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BaseCollisionResponseBehavior_bases[] = {0,0};
static const char *swig_BaseCollisionResponseBehavior_base_names[] = {"AbstractBehavior< BaseEntity > *",0};
static swig_lua_class _wrap_class_BaseCollisionResponseBehavior = { "BaseCollisionResponseBehavior", &SWIGTYPE_p_BaseCollisionResponseBehavior,0, swig_delete_BaseCollisionResponseBehavior, swig_BaseCollisionResponseBehavior_methods, swig_BaseCollisionResponseBehavior_attributes, { "BaseCollisionResponseBehavior", swig_BaseCollisionResponseBehavior_cls_methods, swig_BaseCollisionResponseBehavior_cls_attributes, swig_BaseCollisionResponseBehavior_cls_constants }, swig_BaseCollisionResponseBehavior_bases, swig_BaseCollisionResponseBehavior_base_names };

static int _wrap_BaseEntityAnimationController_update(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityAnimationController *arg1 = (BaseEntityAnimationController *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("BaseEntityAnimationController::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityAnimationController::update",1,"BaseEntityAnimationController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseEntityAnimationController::update",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityAnimationController,0))){
    SWIG_fail_ptr("BaseEntityAnimationController_update",1,SWIGTYPE_p_BaseEntityAnimationController);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntityAnimationController_getAnimationControllerInfo(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityAnimationController *arg1 = (BaseEntityAnimationController *) 0 ;
  AnimationControllerInfo *result = 0 ;
  
  SWIG_check_num_args("BaseEntityAnimationController::getAnimationControllerInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityAnimationController::getAnimationControllerInfo",1,"BaseEntityAnimationController const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityAnimationController,0))){
    SWIG_fail_ptr("BaseEntityAnimationController_getAnimationControllerInfo",1,SWIGTYPE_p_BaseEntityAnimationController);
  }
  
  result = (AnimationControllerInfo *) &((BaseEntityAnimationController const *)arg1)->getAnimationControllerInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AnimationControllerInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseEntityAnimationController(void *obj) {
BaseEntityAnimationController *arg1 = (BaseEntityAnimationController *) obj;
delete arg1;
}
static swig_lua_method swig_BaseEntityAnimationController_methods[] = {
    {"update", _wrap_BaseEntityAnimationController_update}, 
    {"getAnimationControllerInfo", _wrap_BaseEntityAnimationController_getAnimationControllerInfo}, 
    {0,0}
};
static swig_lua_attribute swig_BaseEntityAnimationController_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_BaseEntityAnimationController_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BaseEntityAnimationController_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BaseEntityAnimationController_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BaseEntityAnimationController_bases[] = {0,0};
static const char *swig_BaseEntityAnimationController_base_names[] = {"AbstractBehavior< BaseEntity > *",0};
static swig_lua_class _wrap_class_BaseEntityAnimationController = { "BaseEntityAnimationController", &SWIGTYPE_p_BaseEntityAnimationController,0, swig_delete_BaseEntityAnimationController, swig_BaseEntityAnimationController_methods, swig_BaseEntityAnimationController_attributes, { "BaseEntityAnimationController", swig_BaseEntityAnimationController_cls_methods, swig_BaseEntityAnimationController_cls_attributes, swig_BaseEntityAnimationController_cls_constants }, swig_BaseEntityAnimationController_bases, swig_BaseEntityAnimationController_base_names };

static int _wrap_new_ParticleAttributeTransform(lua_State* L) {
  int SWIG_arg = 0;
  ParticleAttributeTransform *result = 0 ;
  
  SWIG_check_num_args("ParticleAttributeTransform::ParticleAttributeTransform",0,0)
  result = (ParticleAttributeTransform *)new ParticleAttributeTransform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleAttributeTransform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleAttributeTransform_m_Particles_set(lua_State* L) {
  int SWIG_arg = 0;
  ParticleAttributeTransform *arg1 = (ParticleAttributeTransform *) 0 ;
  btAlignedObjectArray< BaseEntity * > *arg2 = (btAlignedObjectArray< BaseEntity * > *) 0 ;
  
  SWIG_check_num_args("ParticleAttributeTransform::m_Particles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleAttributeTransform::m_Particles",1,"ParticleAttributeTransform *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ParticleAttributeTransform::m_Particles",2,"btAlignedObjectArray< BaseEntity * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleAttributeTransform,0))){
    SWIG_fail_ptr("ParticleAttributeTransform_m_Particles_set",1,SWIGTYPE_p_ParticleAttributeTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_BaseEntity_p_t,0))){
    SWIG_fail_ptr("ParticleAttributeTransform_m_Particles_set",2,SWIGTYPE_p_btAlignedObjectArrayT_BaseEntity_p_t);
  }
  
  if (arg1) (arg1)->m_Particles = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleAttributeTransform_m_Particles_get(lua_State* L) {
  int SWIG_arg = 0;
  ParticleAttributeTransform *arg1 = (ParticleAttributeTransform *) 0 ;
  btAlignedObjectArray< BaseEntity * > *result = 0 ;
  
  SWIG_check_num_args("ParticleAttributeTransform::m_Particles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleAttributeTransform::m_Particles",1,"ParticleAttributeTransform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleAttributeTransform,0))){
    SWIG_fail_ptr("ParticleAttributeTransform_m_Particles_get",1,SWIGTYPE_p_ParticleAttributeTransform);
  }
  
  result = (btAlignedObjectArray< BaseEntity * > *)& ((arg1)->m_Particles);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_BaseEntity_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleAttributeTransform___call__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ParticleAttributeTransform *arg1 = (ParticleAttributeTransform *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("ParticleAttributeTransform::operator ()",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleAttributeTransform::operator ()",1,"ParticleAttributeTransform const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ParticleAttributeTransform::operator ()",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ParticleAttributeTransform::operator ()",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ParticleAttributeTransform::operator ()",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleAttributeTransform,0))){
    SWIG_fail_ptr("ParticleAttributeTransform___call",1,SWIGTYPE_p_ParticleAttributeTransform);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("ParticleAttributeTransform___call",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("ParticleAttributeTransform___call",4,SWIGTYPE_p_btVector3);
  }
  
  ((ParticleAttributeTransform const *)arg1)->operator ()(arg2,*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleAttributeTransform___call__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ParticleAttributeTransform *arg1 = (ParticleAttributeTransform *) 0 ;
  int arg2 ;
  btVector4 *arg3 = 0 ;
  btVector4 *arg4 = 0 ;
  
  SWIG_check_num_args("ParticleAttributeTransform::operator ()",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleAttributeTransform::operator ()",1,"ParticleAttributeTransform const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ParticleAttributeTransform::operator ()",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ParticleAttributeTransform::operator ()",3,"btVector4 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ParticleAttributeTransform::operator ()",4,"btVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleAttributeTransform,0))){
    SWIG_fail_ptr("ParticleAttributeTransform___call",1,SWIGTYPE_p_ParticleAttributeTransform);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector4,0))){
    SWIG_fail_ptr("ParticleAttributeTransform___call",3,SWIGTYPE_p_btVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector4,0))){
    SWIG_fail_ptr("ParticleAttributeTransform___call",4,SWIGTYPE_p_btVector4);
  }
  
  ((ParticleAttributeTransform const *)arg1)->operator ()(arg2,*arg3,(btVector4 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleAttributeTransform___call(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleAttributeTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector4, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector4, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ParticleAttributeTransform___call__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleAttributeTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ParticleAttributeTransform___call__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ParticleAttributeTransform___call'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ParticleAttributeTransform::operator ()(int,btVector3 &,btVector3 const &) const\n"
    "    ParticleAttributeTransform::operator ()(int,btVector4 &,btVector4 const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_ParticleAttributeTransform(void *obj) {
ParticleAttributeTransform *arg1 = (ParticleAttributeTransform *) obj;
delete arg1;
}
static swig_lua_method swig_ParticleAttributeTransform_methods[] = {
    {"__call", _wrap_ParticleAttributeTransform___call}, 
    {0,0}
};
static swig_lua_attribute swig_ParticleAttributeTransform_attributes[] = {
    { "m_Particles", _wrap_ParticleAttributeTransform_m_Particles_get, _wrap_ParticleAttributeTransform_m_Particles_set},
    {0,0,0}
};
static swig_lua_attribute swig_ParticleAttributeTransform_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleAttributeTransform_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ParticleAttributeTransform_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ParticleAttributeTransform_bases[] = {0};
static const char *swig_ParticleAttributeTransform_base_names[] = {0};
static swig_lua_class _wrap_class_ParticleAttributeTransform = { "ParticleAttributeTransform", &SWIGTYPE_p_ParticleAttributeTransform,_wrap_new_ParticleAttributeTransform, swig_delete_ParticleAttributeTransform, swig_ParticleAttributeTransform_methods, swig_ParticleAttributeTransform_attributes, { "ParticleAttributeTransform", swig_ParticleAttributeTransform_cls_methods, swig_ParticleAttributeTransform_cls_attributes, swig_ParticleAttributeTransform_cls_constants }, swig_ParticleAttributeTransform_bases, swig_ParticleAttributeTransform_base_names };

static int _wrap_BaseParticleEmitterBehavior___call(lua_State* L) {
  int SWIG_arg = 0;
  BaseParticleEmitterBehavior *arg1 = (BaseParticleEmitterBehavior *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("BaseParticleEmitterBehavior::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseParticleEmitterBehavior::operator ()",1,"BaseParticleEmitterBehavior *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseParticleEmitterBehavior::operator ()",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("BaseParticleEmitterBehavior::operator ()",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseParticleEmitterBehavior,0))){
    SWIG_fail_ptr("BaseParticleEmitterBehavior___call",1,SWIGTYPE_p_BaseParticleEmitterBehavior);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("BaseParticleEmitterBehavior___call",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->operator ()(arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseParticleEmitterBehavior_load(lua_State* L) {
  int SWIG_arg = 0;
  BaseParticleEmitterBehavior *arg1 = (BaseParticleEmitterBehavior *) 0 ;
  
  SWIG_check_num_args("BaseParticleEmitterBehavior::load",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseParticleEmitterBehavior::load",1,"BaseParticleEmitterBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseParticleEmitterBehavior,0))){
    SWIG_fail_ptr("BaseParticleEmitterBehavior_load",1,SWIGTYPE_p_BaseParticleEmitterBehavior);
  }
  
  (arg1)->load();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseParticleEmitterBehavior_updateAction(lua_State* L) {
  int SWIG_arg = 0;
  BaseParticleEmitterBehavior *arg1 = (BaseParticleEmitterBehavior *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("BaseParticleEmitterBehavior::updateAction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseParticleEmitterBehavior::updateAction",1,"BaseParticleEmitterBehavior *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseParticleEmitterBehavior::updateAction",2,"btCollisionWorld *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseParticleEmitterBehavior::updateAction",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseParticleEmitterBehavior,0))){
    SWIG_fail_ptr("BaseParticleEmitterBehavior_updateAction",1,SWIGTYPE_p_BaseParticleEmitterBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("BaseParticleEmitterBehavior_updateAction",2,SWIGTYPE_p_btCollisionWorld);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->updateAction(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseParticleEmitterBehavior_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  BaseParticleEmitterBehavior *arg1 = (BaseParticleEmitterBehavior *) 0 ;
  BaseCamera *arg2 = (BaseCamera *) 0 ;
  
  SWIG_check_num_args("BaseParticleEmitterBehavior::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseParticleEmitterBehavior::render",1,"BaseParticleEmitterBehavior *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseParticleEmitterBehavior::render",2,"BaseCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseParticleEmitterBehavior,0))){
    SWIG_fail_ptr("BaseParticleEmitterBehavior_render",1,SWIGTYPE_p_BaseParticleEmitterBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("BaseParticleEmitterBehavior_render",2,SWIGTYPE_p_BaseCamera);
  }
  
  (arg1)->render(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseParticleEmitterBehavior_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  BaseParticleEmitterBehavior *arg1 = (BaseParticleEmitterBehavior *) 0 ;
  
  SWIG_check_num_args("BaseParticleEmitterBehavior::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseParticleEmitterBehavior::render",1,"BaseParticleEmitterBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseParticleEmitterBehavior,0))){
    SWIG_fail_ptr("BaseParticleEmitterBehavior_render",1,SWIGTYPE_p_BaseParticleEmitterBehavior);
  }
  
  (arg1)->render();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseParticleEmitterBehavior_render(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseParticleEmitterBehavior, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BaseParticleEmitterBehavior_render__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseParticleEmitterBehavior, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseCamera, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BaseParticleEmitterBehavior_render__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BaseParticleEmitterBehavior_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    BaseParticleEmitterBehavior::render(BaseCamera *)\n"
    "    BaseParticleEmitterBehavior::render()\n");
  lua_error(L);return 0;
}


static int _wrap_BaseParticleEmitterBehavior_debugDraw(lua_State* L) {
  int SWIG_arg = 0;
  BaseParticleEmitterBehavior *arg1 = (BaseParticleEmitterBehavior *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  SWIG_check_num_args("BaseParticleEmitterBehavior::debugDraw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseParticleEmitterBehavior::debugDraw",1,"BaseParticleEmitterBehavior *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseParticleEmitterBehavior::debugDraw",2,"btIDebugDraw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseParticleEmitterBehavior,0))){
    SWIG_fail_ptr("BaseParticleEmitterBehavior_debugDraw",1,SWIGTYPE_p_BaseParticleEmitterBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("BaseParticleEmitterBehavior_debugDraw",2,SWIGTYPE_p_btIDebugDraw);
  }
  
  (arg1)->debugDraw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseParticleEmitterBehavior(lua_State* L) {
  int SWIG_arg = 0;
  ParticleEmitterBehaviorInfo *arg1 = 0 ;
  BaseParticleEmitterBehavior *result = 0 ;
  
  SWIG_check_num_args("BaseParticleEmitterBehavior::BaseParticleEmitterBehavior",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("BaseParticleEmitterBehavior::BaseParticleEmitterBehavior",1,"ParticleEmitterBehaviorInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleEmitterBehaviorInfo,0))){
    SWIG_fail_ptr("new_BaseParticleEmitterBehavior",1,SWIGTYPE_p_ParticleEmitterBehaviorInfo);
  }
  
  result = (BaseParticleEmitterBehavior *)new BaseParticleEmitterBehavior((ParticleEmitterBehaviorInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseParticleEmitterBehavior,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseParticleEmitterBehavior(void *obj) {
BaseParticleEmitterBehavior *arg1 = (BaseParticleEmitterBehavior *) obj;
delete arg1;
}
static swig_lua_method swig_BaseParticleEmitterBehavior_methods[] = {
    {"__call", _wrap_BaseParticleEmitterBehavior___call}, 
    {"load", _wrap_BaseParticleEmitterBehavior_load}, 
    {"updateAction", _wrap_BaseParticleEmitterBehavior_updateAction}, 
    {"render", _wrap_BaseParticleEmitterBehavior_render}, 
    {"debugDraw", _wrap_BaseParticleEmitterBehavior_debugDraw}, 
    {0,0}
};
static swig_lua_attribute swig_BaseParticleEmitterBehavior_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_BaseParticleEmitterBehavior_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BaseParticleEmitterBehavior_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BaseParticleEmitterBehavior_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BaseParticleEmitterBehavior_bases[] = {0,0};
static const char *swig_BaseParticleEmitterBehavior_base_names[] = {"AbstractBehavior< BaseEntity > *",0};
static swig_lua_class _wrap_class_BaseParticleEmitterBehavior = { "BaseParticleEmitterBehavior", &SWIGTYPE_p_BaseParticleEmitterBehavior,_wrap_new_BaseParticleEmitterBehavior, swig_delete_BaseParticleEmitterBehavior, swig_BaseParticleEmitterBehavior_methods, swig_BaseParticleEmitterBehavior_attributes, { "BaseParticleEmitterBehavior", swig_BaseParticleEmitterBehavior_cls_methods, swig_BaseParticleEmitterBehavior_cls_attributes, swig_BaseParticleEmitterBehavior_cls_constants }, swig_BaseParticleEmitterBehavior_bases, swig_BaseParticleEmitterBehavior_base_names };

static int _wrap_BaseTextureBehavior___call__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  int arg2 ;
  btVector2 *arg3 = 0 ;
  btVector2 *arg4 = 0 ;
  
  SWIG_check_num_args("BaseTextureBehavior::operator ()",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::operator ()",1,"BaseTextureBehavior *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseTextureBehavior::operator ()",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("BaseTextureBehavior::operator ()",3,"btVector2 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("BaseTextureBehavior::operator ()",4,"btVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior___call",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector2,0))){
    SWIG_fail_ptr("BaseTextureBehavior___call",3,SWIGTYPE_p_btVector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector2,0))){
    SWIG_fail_ptr("BaseTextureBehavior___call",4,SWIGTYPE_p_btVector2);
  }
  
  (arg1)->operator ()(arg2,*arg3,(btVector2 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior___call__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  int arg2 ;
  btVector2 *arg3 = 0 ;
  
  SWIG_check_num_args("BaseTextureBehavior::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::operator ()",1,"BaseTextureBehavior *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseTextureBehavior::operator ()",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("BaseTextureBehavior::operator ()",3,"btVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior___call",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector2,0))){
    SWIG_fail_ptr("BaseTextureBehavior___call",3,SWIGTYPE_p_btVector2);
  }
  
  (arg1)->operator ()(arg2,(btVector2 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior___call(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseTextureBehavior, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector2, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BaseTextureBehavior___call__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseTextureBehavior, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector2, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector2, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BaseTextureBehavior___call__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BaseTextureBehavior___call'\n"
    "  Possible C/C++ prototypes are:\n"
    "    BaseTextureBehavior::operator ()(int,btVector2 &,btVector2 const &)\n"
    "    BaseTextureBehavior::operator ()(int,btVector2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BaseTextureBehavior_load(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  
  SWIG_check_num_args("BaseTextureBehavior::load",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::load",1,"BaseTextureBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_load",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  (arg1)->load();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_updateAction(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("BaseTextureBehavior::updateAction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::updateAction",1,"BaseTextureBehavior *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseTextureBehavior::updateAction",2,"btCollisionWorld *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseTextureBehavior::updateAction",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_updateAction",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("BaseTextureBehavior_updateAction",2,SWIGTYPE_p_btCollisionWorld);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->updateAction(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_debugDraw(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  SWIG_check_num_args("BaseTextureBehavior::debugDraw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::debugDraw",1,"BaseTextureBehavior *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseTextureBehavior::debugDraw",2,"btIDebugDraw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_debugDraw",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("BaseTextureBehavior_debugDraw",2,SWIGTYPE_p_btIDebugDraw);
  }
  
  (arg1)->debugDraw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BaseTextureBehavior(lua_State* L) {
  int SWIG_arg = 0;
  TextureBehaviorInfo *arg1 = 0 ;
  BaseTextureBehavior *result = 0 ;
  
  SWIG_check_num_args("BaseTextureBehavior::BaseTextureBehavior",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("BaseTextureBehavior::BaseTextureBehavior",1,"TextureBehaviorInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureBehaviorInfo,0))){
    SWIG_fail_ptr("new_BaseTextureBehavior",1,SWIGTYPE_p_TextureBehaviorInfo);
  }
  
  result = (BaseTextureBehavior *)new BaseTextureBehavior((TextureBehaviorInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseTextureBehavior,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_setWidthOfSubTexture(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("BaseTextureBehavior::setWidthOfSubTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::setWidthOfSubTexture",1,"BaseTextureBehavior *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseTextureBehavior::setWidthOfSubTexture",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_setWidthOfSubTexture",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  (arg1)->setWidthOfSubTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_setHeightOfSubTexture(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("BaseTextureBehavior::setHeightOfSubTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::setHeightOfSubTexture",1,"BaseTextureBehavior *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseTextureBehavior::setHeightOfSubTexture",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_setHeightOfSubTexture",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  (arg1)->setHeightOfSubTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_setXOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("BaseTextureBehavior::setXOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::setXOffset",1,"BaseTextureBehavior *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseTextureBehavior::setXOffset",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_setXOffset",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  (arg1)->setXOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_setYOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("BaseTextureBehavior::setYOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::setYOffset",1,"BaseTextureBehavior *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseTextureBehavior::setYOffset",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_setYOffset",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  (arg1)->setYOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_getWidthOfSubTexture(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("BaseTextureBehavior::getWidthOfSubTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::getWidthOfSubTexture",1,"BaseTextureBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_getWidthOfSubTexture",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  result = (unsigned int)((BaseTextureBehavior const *)arg1)->getWidthOfSubTexture();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_getHeightOfSubTexture(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("BaseTextureBehavior::getHeightOfSubTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::getHeightOfSubTexture",1,"BaseTextureBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_getHeightOfSubTexture",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  result = (unsigned int)((BaseTextureBehavior const *)arg1)->getHeightOfSubTexture();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_getXOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("BaseTextureBehavior::getXOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::getXOffset",1,"BaseTextureBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_getXOffset",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  result = (unsigned int)((BaseTextureBehavior const *)arg1)->getXOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_getYOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("BaseTextureBehavior::getYOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::getYOffset",1,"BaseTextureBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_getYOffset",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  result = (unsigned int)((BaseTextureBehavior const *)arg1)->getYOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_getLeftOfSubTextureOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  float result;
  
  SWIG_check_num_args("BaseTextureBehavior::getLeftOfSubTextureOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::getLeftOfSubTextureOffset",1,"BaseTextureBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_getLeftOfSubTextureOffset",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  result = (float)((BaseTextureBehavior const *)arg1)->getLeftOfSubTextureOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_getRightOfSubTextureOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  float result;
  
  SWIG_check_num_args("BaseTextureBehavior::getRightOfSubTextureOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::getRightOfSubTextureOffset",1,"BaseTextureBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_getRightOfSubTextureOffset",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  result = (float)((BaseTextureBehavior const *)arg1)->getRightOfSubTextureOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_getTopOfSubTextureOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  float result;
  
  SWIG_check_num_args("BaseTextureBehavior::getTopOfSubTextureOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::getTopOfSubTextureOffset",1,"BaseTextureBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_getTopOfSubTextureOffset",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  result = (float)((BaseTextureBehavior const *)arg1)->getTopOfSubTextureOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_getBottomOfSubTextureOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  float result;
  
  SWIG_check_num_args("BaseTextureBehavior::getBottomOfSubTextureOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::getBottomOfSubTextureOffset",1,"BaseTextureBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_getBottomOfSubTextureOffset",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  result = (float)((BaseTextureBehavior const *)arg1)->getBottomOfSubTextureOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_getWidthOfTexture(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("BaseTextureBehavior::getWidthOfTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::getWidthOfTexture",1,"BaseTextureBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_getWidthOfTexture",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  result = (unsigned int)((BaseTextureBehavior const *)arg1)->getWidthOfTexture();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_getHeightOfTexture(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("BaseTextureBehavior::getHeightOfTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::getHeightOfTexture",1,"BaseTextureBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_getHeightOfTexture",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  result = (unsigned int)((BaseTextureBehavior const *)arg1)->getHeightOfTexture();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_setWidthOfTexture(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("BaseTextureBehavior::setWidthOfTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::setWidthOfTexture",1,"BaseTextureBehavior *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseTextureBehavior::setWidthOfTexture",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_setWidthOfTexture",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setWidthOfTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_setHeightOfTexture(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("BaseTextureBehavior::setHeightOfTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::setHeightOfTexture",1,"BaseTextureBehavior *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseTextureBehavior::setHeightOfTexture",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_setHeightOfTexture",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setHeightOfTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_setTextureOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("BaseTextureBehavior::setTextureOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::setTextureOffset",1,"BaseTextureBehavior *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseTextureBehavior::setTextureOffset",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_setTextureOffset",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  (arg1)->setTextureOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextureBehavior_getTextureOffset(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextureBehavior *arg1 = (BaseTextureBehavior *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("BaseTextureBehavior::getTextureOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextureBehavior::getTextureOffset",1,"BaseTextureBehavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextureBehavior,0))){
    SWIG_fail_ptr("BaseTextureBehavior_getTextureOffset",1,SWIGTYPE_p_BaseTextureBehavior);
  }
  
  result = (unsigned int)((BaseTextureBehavior const *)arg1)->getTextureOffset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseTextureBehavior(void *obj) {
BaseTextureBehavior *arg1 = (BaseTextureBehavior *) obj;
delete arg1;
}
static swig_lua_method swig_BaseTextureBehavior_methods[] = {
    {"__call", _wrap_BaseTextureBehavior___call}, 
    {"load", _wrap_BaseTextureBehavior_load}, 
    {"updateAction", _wrap_BaseTextureBehavior_updateAction}, 
    {"debugDraw", _wrap_BaseTextureBehavior_debugDraw}, 
    {"setWidthOfSubTexture", _wrap_BaseTextureBehavior_setWidthOfSubTexture}, 
    {"setHeightOfSubTexture", _wrap_BaseTextureBehavior_setHeightOfSubTexture}, 
    {"setXOffset", _wrap_BaseTextureBehavior_setXOffset}, 
    {"setYOffset", _wrap_BaseTextureBehavior_setYOffset}, 
    {"getWidthOfSubTexture", _wrap_BaseTextureBehavior_getWidthOfSubTexture}, 
    {"getHeightOfSubTexture", _wrap_BaseTextureBehavior_getHeightOfSubTexture}, 
    {"getXOffset", _wrap_BaseTextureBehavior_getXOffset}, 
    {"getYOffset", _wrap_BaseTextureBehavior_getYOffset}, 
    {"getLeftOfSubTextureOffset", _wrap_BaseTextureBehavior_getLeftOfSubTextureOffset}, 
    {"getRightOfSubTextureOffset", _wrap_BaseTextureBehavior_getRightOfSubTextureOffset}, 
    {"getTopOfSubTextureOffset", _wrap_BaseTextureBehavior_getTopOfSubTextureOffset}, 
    {"getBottomOfSubTextureOffset", _wrap_BaseTextureBehavior_getBottomOfSubTextureOffset}, 
    {"getWidthOfTexture", _wrap_BaseTextureBehavior_getWidthOfTexture}, 
    {"getHeightOfTexture", _wrap_BaseTextureBehavior_getHeightOfTexture}, 
    {"setWidthOfTexture", _wrap_BaseTextureBehavior_setWidthOfTexture}, 
    {"setHeightOfTexture", _wrap_BaseTextureBehavior_setHeightOfTexture}, 
    {"setTextureOffset", _wrap_BaseTextureBehavior_setTextureOffset}, 
    {"getTextureOffset", _wrap_BaseTextureBehavior_getTextureOffset}, 
    {0,0}
};
static swig_lua_attribute swig_BaseTextureBehavior_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_BaseTextureBehavior_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BaseTextureBehavior_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BaseTextureBehavior_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BaseTextureBehavior_bases[] = {0,0};
static const char *swig_BaseTextureBehavior_base_names[] = {"AbstractBehavior< BaseViewObject > *",0};
static swig_lua_class _wrap_class_BaseTextureBehavior = { "BaseTextureBehavior", &SWIGTYPE_p_BaseTextureBehavior,_wrap_new_BaseTextureBehavior, swig_delete_BaseTextureBehavior, swig_BaseTextureBehavior_methods, swig_BaseTextureBehavior_attributes, { "BaseTextureBehavior", swig_BaseTextureBehavior_cls_methods, swig_BaseTextureBehavior_cls_attributes, swig_BaseTextureBehavior_cls_constants }, swig_BaseTextureBehavior_bases, swig_BaseTextureBehavior_base_names };

static int _wrap_new_BaseUpdateBehavior(lua_State* L) {
  int SWIG_arg = 0;
  UpdateBehaviorInfo *arg1 = 0 ;
  BaseUpdateBehavior *result = 0 ;
  
  SWIG_check_num_args("BaseUpdateBehavior::BaseUpdateBehavior",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("BaseUpdateBehavior::BaseUpdateBehavior",1,"UpdateBehaviorInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UpdateBehaviorInfo,0))){
    SWIG_fail_ptr("new_BaseUpdateBehavior",1,SWIGTYPE_p_UpdateBehaviorInfo);
  }
  
  result = (BaseUpdateBehavior *)new BaseUpdateBehavior((UpdateBehaviorInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseUpdateBehavior,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseUpdateBehavior_update(lua_State* L) {
  int SWIG_arg = 0;
  BaseUpdateBehavior *arg1 = (BaseUpdateBehavior *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("BaseUpdateBehavior::update",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseUpdateBehavior::update",1,"BaseUpdateBehavior *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseUpdateBehavior::update",2,"btCollisionWorld *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseUpdateBehavior::update",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseUpdateBehavior,0))){
    SWIG_fail_ptr("BaseUpdateBehavior_update",1,SWIGTYPE_p_BaseUpdateBehavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("BaseUpdateBehavior_update",2,SWIGTYPE_p_btCollisionWorld);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->update(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseUpdateBehavior(void *obj) {
BaseUpdateBehavior *arg1 = (BaseUpdateBehavior *) obj;
delete arg1;
}
static swig_lua_method swig_BaseUpdateBehavior_methods[] = {
    {"update", _wrap_BaseUpdateBehavior_update}, 
    {0,0}
};
static swig_lua_attribute swig_BaseUpdateBehavior_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_BaseUpdateBehavior_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BaseUpdateBehavior_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BaseUpdateBehavior_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BaseUpdateBehavior_bases[] = {0,0};
static const char *swig_BaseUpdateBehavior_base_names[] = {"AbstractBehavior< BaseEntity > *",0};
static swig_lua_class _wrap_class_BaseUpdateBehavior = { "BaseUpdateBehavior", &SWIGTYPE_p_BaseUpdateBehavior,_wrap_new_BaseUpdateBehavior, swig_delete_BaseUpdateBehavior, swig_BaseUpdateBehavior_methods, swig_BaseUpdateBehavior_attributes, { "BaseUpdateBehavior", swig_BaseUpdateBehavior_cls_methods, swig_BaseUpdateBehavior_cls_attributes, swig_BaseUpdateBehavior_cls_constants }, swig_BaseUpdateBehavior_bases, swig_BaseUpdateBehavior_base_names };

static int _wrap_new_TimerInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TimerType arg1 ;
  TimerInfo *result = 0 ;
  
  SWIG_check_num_args("TimerInfo::TimerInfo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TimerInfo::TimerInfo",1,"TimerType");
  arg1 = (TimerType)(int)lua_tonumber(L, 1);
  result = (TimerInfo *)new TimerInfo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TimerInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TimerInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TimerInfo *result = 0 ;
  
  SWIG_check_num_args("TimerInfo::TimerInfo",0,0)
  result = (TimerInfo *)new TimerInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TimerInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TimerInfo(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TimerInfo__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TimerInfo__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TimerInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TimerInfo::TimerInfo(TimerType)\n"
    "    TimerInfo::TimerInfo()\n");
  lua_error(L);return 0;
}


static int _wrap_TimerInfo_m_timerType_set(lua_State* L) {
  int SWIG_arg = 0;
  TimerInfo *arg1 = (TimerInfo *) 0 ;
  TimerType arg2 ;
  
  SWIG_check_num_args("TimerInfo::m_timerType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TimerInfo::m_timerType",1,"TimerInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TimerInfo::m_timerType",2,"TimerType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TimerInfo,0))){
    SWIG_fail_ptr("TimerInfo_m_timerType_set",1,SWIGTYPE_p_TimerInfo);
  }
  
  arg2 = (TimerType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_timerType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimerInfo_m_timerType_get(lua_State* L) {
  int SWIG_arg = 0;
  TimerInfo *arg1 = (TimerInfo *) 0 ;
  TimerType result;
  
  SWIG_check_num_args("TimerInfo::m_timerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TimerInfo::m_timerType",1,"TimerInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TimerInfo,0))){
    SWIG_fail_ptr("TimerInfo_m_timerType_get",1,SWIGTYPE_p_TimerInfo);
  }
  
  result = (TimerType) ((arg1)->m_timerType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TimerInfo(void *obj) {
TimerInfo *arg1 = (TimerInfo *) obj;
delete arg1;
}
static swig_lua_method swig_TimerInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_TimerInfo_attributes[] = {
    { "m_timerType", _wrap_TimerInfo_m_timerType_get, _wrap_TimerInfo_m_timerType_set},
    {0,0,0}
};
static swig_lua_attribute swig_TimerInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TimerInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_TimerInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_TimerInfo_bases[] = {0};
static const char *swig_TimerInfo_base_names[] = {0};
static swig_lua_class _wrap_class_TimerInfo = { "TimerInfo", &SWIGTYPE_p_TimerInfo,_wrap_new_TimerInfo, swig_delete_TimerInfo, swig_TimerInfo_methods, swig_TimerInfo_attributes, { "TimerInfo", swig_TimerInfo_cls_methods, swig_TimerInfo_cls_attributes, swig_TimerInfo_cls_constants }, swig_TimerInfo_bases, swig_TimerInfo_base_names };

static int _wrap_BaseTimer_toString(lua_State* L) {
  int SWIG_arg = 0;
  BaseTimer *arg1 = (BaseTimer *) 0 ;
  std::string result;
  
  SWIG_check_num_args("BaseTimer::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTimer::toString",1,"BaseTimer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTimer,0))){
    SWIG_fail_ptr("BaseTimer_toString",1,SWIGTYPE_p_BaseTimer);
  }
  
  result = ((BaseTimer const *)arg1)->toString();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTimer_getMilliseconds(lua_State* L) {
  int SWIG_arg = 0;
  BaseTimer *arg1 = (BaseTimer *) 0 ;
  long result;
  
  SWIG_check_num_args("BaseTimer::getMilliseconds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTimer::getMilliseconds",1,"BaseTimer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTimer,0))){
    SWIG_fail_ptr("BaseTimer_getMilliseconds",1,SWIGTYPE_p_BaseTimer);
  }
  
  result = (long)((BaseTimer const *)arg1)->getMilliseconds();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTimer_setMilliseconds(lua_State* L) {
  int SWIG_arg = 0;
  BaseTimer *arg1 = (BaseTimer *) 0 ;
  long arg2 ;
  
  SWIG_check_num_args("BaseTimer::setMilliseconds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTimer::setMilliseconds",1,"BaseTimer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BaseTimer::setMilliseconds",2,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTimer,0))){
    SWIG_fail_ptr("BaseTimer_setMilliseconds",1,SWIGTYPE_p_BaseTimer);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  (arg1)->setMilliseconds(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_BaseTimer_methods[] = {
    {"toString", _wrap_BaseTimer_toString}, 
    {"getMilliseconds", _wrap_BaseTimer_getMilliseconds}, 
    {"setMilliseconds", _wrap_BaseTimer_setMilliseconds}, 
    {0,0}
};
static swig_lua_attribute swig_BaseTimer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_BaseTimer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BaseTimer_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BaseTimer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BaseTimer_bases[] = {0};
static const char *swig_BaseTimer_base_names[] = {0};
static swig_lua_class _wrap_class_BaseTimer = { "BaseTimer", &SWIGTYPE_p_BaseTimer,0,0, swig_BaseTimer_methods, swig_BaseTimer_attributes, { "BaseTimer", swig_BaseTimer_cls_methods, swig_BaseTimer_cls_attributes, swig_BaseTimer_cls_constants }, swig_BaseTimer_bases, swig_BaseTimer_base_names };

static int _wrap_Timer_start(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  long arg2 ;
  
  SWIG_check_num_args("Timer::start",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::start",1,"Timer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Timer::start",2,"long const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_start",1,SWIGTYPE_p_Timer);
  }
  
  arg2 = (long const)lua_tonumber(L, 2);
  (arg1)->start(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_enablePause__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Timer::enablePause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::enablePause",1,"Timer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Timer::enablePause",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_enablePause",1,SWIGTYPE_p_Timer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enablePause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_enablePause__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  
  SWIG_check_num_args("Timer::enablePause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::enablePause",1,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_enablePause",1,SWIGTYPE_p_Timer);
  }
  
  (arg1)->enablePause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_enablePause(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Timer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Timer_enablePause__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Timer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Timer_enablePause__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Timer_enablePause'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Timer::enablePause(bool const)\n"
    "    Timer::enablePause()\n");
  lua_error(L);return 0;
}


static int _wrap_Timer_isPaused(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  SWIG_check_num_args("Timer::isPaused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::isPaused",1,"Timer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_isPaused",1,SWIGTYPE_p_Timer);
  }
  
  result = (bool)((Timer const *)arg1)->isPaused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_isFinished(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  SWIG_check_num_args("Timer::isFinished",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::isFinished",1,"Timer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_isFinished",1,SWIGTYPE_p_Timer);
  }
  
  result = (bool)((Timer const *)arg1)->isFinished();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_toString(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Timer::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::toString",1,"Timer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_toString",1,SWIGTYPE_p_Timer);
  }
  
  result = ((Timer const *)arg1)->toString();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_Timer_methods[] = {
    {"start", _wrap_Timer_start}, 
    {"enablePause", _wrap_Timer_enablePause}, 
    {"isPaused", _wrap_Timer_isPaused}, 
    {"isFinished", _wrap_Timer_isFinished}, 
    {"toString", _wrap_Timer_toString}, 
    {0,0}
};
static swig_lua_attribute swig_Timer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Timer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Timer_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Timer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Timer_bases[] = {0,0};
static const char *swig_Timer_base_names[] = {"BaseTimer *",0};
static swig_lua_class _wrap_class_Timer = { "Timer", &SWIGTYPE_p_Timer,0,0, swig_Timer_methods, swig_Timer_attributes, { "Timer", swig_Timer_cls_methods, swig_Timer_cls_attributes, swig_Timer_cls_constants }, swig_Timer_bases, swig_Timer_base_names };

static swig_lua_method swig_Clock_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Clock_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Clock_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Clock_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Clock_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Clock_bases[] = {0,0};
static const char *swig_Clock_base_names[] = {"BaseTimer *",0};
static swig_lua_class _wrap_class_Clock = { "Clock", &SWIGTYPE_p_Clock,0,0, swig_Clock_methods, swig_Clock_attributes, { "Clock", swig_Clock_cls_methods, swig_Clock_cls_attributes, swig_Clock_cls_constants }, swig_Clock_bases, swig_Clock_base_names };

static int _wrap_StopWatch_start(lua_State* L) {
  int SWIG_arg = 0;
  StopWatch *arg1 = (StopWatch *) 0 ;
  bool result;
  
  SWIG_check_num_args("StopWatch::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StopWatch::start",1,"StopWatch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StopWatch,0))){
    SWIG_fail_ptr("StopWatch_start",1,SWIGTYPE_p_StopWatch);
  }
  
  result = (bool)(arg1)->start();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StopWatch_stop(lua_State* L) {
  int SWIG_arg = 0;
  StopWatch *arg1 = (StopWatch *) 0 ;
  bool result;
  
  SWIG_check_num_args("StopWatch::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StopWatch::stop",1,"StopWatch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StopWatch,0))){
    SWIG_fail_ptr("StopWatch_stop",1,SWIGTYPE_p_StopWatch);
  }
  
  result = (bool)(arg1)->stop();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StopWatch_isStopped(lua_State* L) {
  int SWIG_arg = 0;
  StopWatch *arg1 = (StopWatch *) 0 ;
  bool result;
  
  SWIG_check_num_args("StopWatch::isStopped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StopWatch::isStopped",1,"StopWatch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StopWatch,0))){
    SWIG_fail_ptr("StopWatch_isStopped",1,SWIGTYPE_p_StopWatch);
  }
  
  result = (bool)((StopWatch const *)arg1)->isStopped();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StopWatch_reset(lua_State* L) {
  int SWIG_arg = 0;
  StopWatch *arg1 = (StopWatch *) 0 ;
  bool result;
  
  SWIG_check_num_args("StopWatch::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StopWatch::reset",1,"StopWatch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StopWatch,0))){
    SWIG_fail_ptr("StopWatch_reset",1,SWIGTYPE_p_StopWatch);
  }
  
  result = (bool)(arg1)->reset();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StopWatch_lap(lua_State* L) {
  int SWIG_arg = 0;
  StopWatch *arg1 = (StopWatch *) 0 ;
  long *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("StopWatch::lap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StopWatch::lap",1,"StopWatch *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("StopWatch::lap",2,"long &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StopWatch,0))){
    SWIG_fail_ptr("StopWatch_lap",1,SWIGTYPE_p_StopWatch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("StopWatch_lap",2,SWIGTYPE_p_long);
  }
  
  result = (bool)(arg1)->lap(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StopWatch_toString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  StopWatch *arg1 = (StopWatch *) 0 ;
  std::string result;
  
  SWIG_check_num_args("StopWatch::toString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StopWatch::toString",1,"StopWatch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StopWatch,0))){
    SWIG_fail_ptr("StopWatch_toString",1,SWIGTYPE_p_StopWatch);
  }
  
  result = ((StopWatch const *)arg1)->toString();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StopWatch_toString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  StopWatch *arg1 = (StopWatch *) 0 ;
  size_t arg2 ;
  std::string result;
  
  SWIG_check_num_args("StopWatch::toString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StopWatch::toString",1,"StopWatch const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("StopWatch::toString",2,"size_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_StopWatch,0))){
    SWIG_fail_ptr("StopWatch_toString",1,SWIGTYPE_p_StopWatch);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t const)lua_tonumber(L, 2);
  result = ((StopWatch const *)arg1)->toString(arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StopWatch_toString(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StopWatch, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_StopWatch_toString__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_StopWatch, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StopWatch_toString__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StopWatch_toString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    StopWatch::toString() const\n"
    "    StopWatch::toString(size_t const) const\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_StopWatch_methods[] = {
    {"start", _wrap_StopWatch_start}, 
    {"stop", _wrap_StopWatch_stop}, 
    {"isStopped", _wrap_StopWatch_isStopped}, 
    {"reset", _wrap_StopWatch_reset}, 
    {"lap", _wrap_StopWatch_lap}, 
    {"toString", _wrap_StopWatch_toString}, 
    {0,0}
};
static swig_lua_attribute swig_StopWatch_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_StopWatch_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StopWatch_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_StopWatch_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_StopWatch_bases[] = {0,0};
static const char *swig_StopWatch_base_names[] = {"BaseTimer *",0};
static swig_lua_class _wrap_class_StopWatch = { "StopWatch", &SWIGTYPE_p_StopWatch,0,0, swig_StopWatch_methods, swig_StopWatch_attributes, { "StopWatch", swig_StopWatch_cls_methods, swig_StopWatch_cls_attributes, swig_StopWatch_cls_constants }, swig_StopWatch_bases, swig_StopWatch_base_names };

static int _wrap_FrameCounter_update(lua_State* L) {
  int SWIG_arg = 0;
  FrameCounter *arg1 = (FrameCounter *) 0 ;
  NSTimeInterval arg2 ;
  NSTimeInterval *argp2 ;
  
  SWIG_check_num_args("FrameCounter::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FrameCounter::update",1,"FrameCounter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FrameCounter::update",2,"NSTimeInterval");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FrameCounter,0))){
    SWIG_fail_ptr("FrameCounter_update",1,SWIGTYPE_p_FrameCounter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_NSTimeInterval,0))){
    SWIG_fail_ptr("FrameCounter_update",2,SWIGTYPE_p_NSTimeInterval);
  }
  arg2 = *argp2;
  
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameCounter_getCurrentTime(lua_State* L) {
  int SWIG_arg = 0;
  FrameCounter *arg1 = (FrameCounter *) 0 ;
  NSTimeInterval result;
  
  SWIG_check_num_args("FrameCounter::getCurrentTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FrameCounter::getCurrentTime",1,"FrameCounter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FrameCounter,0))){
    SWIG_fail_ptr("FrameCounter_getCurrentTime",1,SWIGTYPE_p_FrameCounter);
  }
  
  result = ((FrameCounter const *)arg1)->getCurrentTime();
  {
    NSTimeInterval * resultptr = new NSTimeInterval((const NSTimeInterval &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NSTimeInterval,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameCounter_getCurrentDiffTime(lua_State* L) {
  int SWIG_arg = 0;
  FrameCounter *arg1 = (FrameCounter *) 0 ;
  NSTimeInterval result;
  
  SWIG_check_num_args("FrameCounter::getCurrentDiffTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FrameCounter::getCurrentDiffTime",1,"FrameCounter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FrameCounter,0))){
    SWIG_fail_ptr("FrameCounter_getCurrentDiffTime",1,SWIGTYPE_p_FrameCounter);
  }
  
  result = ((FrameCounter const *)arg1)->getCurrentDiffTime();
  {
    NSTimeInterval * resultptr = new NSTimeInterval((const NSTimeInterval &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NSTimeInterval,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameCounter_reset(lua_State* L) {
  int SWIG_arg = 0;
  FrameCounter *arg1 = (FrameCounter *) 0 ;
  
  SWIG_check_num_args("FrameCounter::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FrameCounter::reset",1,"FrameCounter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FrameCounter,0))){
    SWIG_fail_ptr("FrameCounter_reset",1,SWIGTYPE_p_FrameCounter);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameCounter_start(lua_State* L) {
  int SWIG_arg = 0;
  FrameCounter *arg1 = (FrameCounter *) 0 ;
  
  SWIG_check_num_args("FrameCounter::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FrameCounter::start",1,"FrameCounter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FrameCounter,0))){
    SWIG_fail_ptr("FrameCounter_start",1,SWIGTYPE_p_FrameCounter);
  }
  
  (arg1)->start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameCounter_framesElapsedSinceStartCalled(lua_State* L) {
  int SWIG_arg = 0;
  FrameCounter *arg1 = (FrameCounter *) 0 ;
  NSInteger result;
  
  SWIG_check_num_args("FrameCounter::framesElapsedSinceStartCalled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FrameCounter::framesElapsedSinceStartCalled",1,"FrameCounter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FrameCounter,0))){
    SWIG_fail_ptr("FrameCounter_framesElapsedSinceStartCalled",1,SWIGTYPE_p_FrameCounter);
  }
  
  result = ((FrameCounter const *)arg1)->framesElapsedSinceStartCalled();
  {
    NSInteger * resultptr = new NSInteger((const NSInteger &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NSInteger,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameCounter_setPreferredFramesPerSecond(lua_State* L) {
  int SWIG_arg = 0;
  FrameCounter *arg1 = (FrameCounter *) 0 ;
  NSInteger arg2 ;
  NSInteger *argp2 ;
  
  SWIG_check_num_args("FrameCounter::setPreferredFramesPerSecond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FrameCounter::setPreferredFramesPerSecond",1,"FrameCounter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FrameCounter::setPreferredFramesPerSecond",2,"NSInteger");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FrameCounter,0))){
    SWIG_fail_ptr("FrameCounter_setPreferredFramesPerSecond",1,SWIGTYPE_p_FrameCounter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_NSInteger,0))){
    SWIG_fail_ptr("FrameCounter_setPreferredFramesPerSecond",2,SWIGTYPE_p_NSInteger);
  }
  arg2 = *argp2;
  
  (arg1)->setPreferredFramesPerSecond(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameCounter_getPreferredFramesPerSecond(lua_State* L) {
  int SWIG_arg = 0;
  FrameCounter *arg1 = (FrameCounter *) 0 ;
  int result;
  
  SWIG_check_num_args("FrameCounter::getPreferredFramesPerSecond",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FrameCounter::getPreferredFramesPerSecond",1,"FrameCounter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FrameCounter,0))){
    SWIG_fail_ptr("FrameCounter_getPreferredFramesPerSecond",1,SWIGTYPE_p_FrameCounter);
  }
  
  result = (int)((FrameCounter const *)arg1)->getPreferredFramesPerSecond();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FrameCounter(void *obj) {
FrameCounter *arg1 = (FrameCounter *) obj;
delete arg1;
}
static swig_lua_method swig_FrameCounter_methods[] = {
    {"update", _wrap_FrameCounter_update}, 
    {"getCurrentTime", _wrap_FrameCounter_getCurrentTime}, 
    {"getCurrentDiffTime", _wrap_FrameCounter_getCurrentDiffTime}, 
    {"reset", _wrap_FrameCounter_reset}, 
    {"start", _wrap_FrameCounter_start}, 
    {"framesElapsedSinceStartCalled", _wrap_FrameCounter_framesElapsedSinceStartCalled}, 
    {"setPreferredFramesPerSecond", _wrap_FrameCounter_setPreferredFramesPerSecond}, 
    {"getPreferredFramesPerSecond", _wrap_FrameCounter_getPreferredFramesPerSecond}, 
    {0,0}
};
static swig_lua_attribute swig_FrameCounter_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_FrameCounter_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FrameCounter_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_FrameCounter_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_FrameCounter_bases[] = {0,0};
static const char *swig_FrameCounter_base_names[] = {"AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *",0};
static swig_lua_class _wrap_class_FrameCounter = { "FrameCounter", &SWIGTYPE_p_FrameCounter,0, swig_delete_FrameCounter, swig_FrameCounter_methods, swig_FrameCounter_attributes, { "FrameCounter", swig_FrameCounter_cls_methods, swig_FrameCounter_cls_attributes, swig_FrameCounter_cls_constants }, swig_FrameCounter_bases, swig_FrameCounter_base_names };

static int _wrap_Telegram_Sender_set(lua_State* L) {
  int SWIG_arg = 0;
  Telegram *arg1 = (Telegram *) 0 ;
  IDType arg2 ;
  
  SWIG_check_num_args("Telegram::Sender",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Telegram::Sender",1,"Telegram *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Telegram::Sender",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Telegram,0))){
    SWIG_fail_ptr("Telegram_Sender_set",1,SWIGTYPE_p_Telegram);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Sender = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Telegram_Sender_get(lua_State* L) {
  int SWIG_arg = 0;
  Telegram *arg1 = (Telegram *) 0 ;
  IDType result;
  
  SWIG_check_num_args("Telegram::Sender",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Telegram::Sender",1,"Telegram *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Telegram,0))){
    SWIG_fail_ptr("Telegram_Sender_get",1,SWIGTYPE_p_Telegram);
  }
  
  result = (IDType) ((arg1)->Sender);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Telegram_Receiver_set(lua_State* L) {
  int SWIG_arg = 0;
  Telegram *arg1 = (Telegram *) 0 ;
  IDType arg2 ;
  
  SWIG_check_num_args("Telegram::Receiver",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Telegram::Receiver",1,"Telegram *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Telegram::Receiver",2,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Telegram,0))){
    SWIG_fail_ptr("Telegram_Receiver_set",1,SWIGTYPE_p_Telegram);
  }
  
  arg2 = (IDType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Receiver = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Telegram_Receiver_get(lua_State* L) {
  int SWIG_arg = 0;
  Telegram *arg1 = (Telegram *) 0 ;
  IDType result;
  
  SWIG_check_num_args("Telegram::Receiver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Telegram::Receiver",1,"Telegram *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Telegram,0))){
    SWIG_fail_ptr("Telegram_Receiver_get",1,SWIGTYPE_p_Telegram);
  }
  
  result = (IDType) ((arg1)->Receiver);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Telegram_Msg_set(lua_State* L) {
  int SWIG_arg = 0;
  Telegram *arg1 = (Telegram *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Telegram::Msg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Telegram::Msg",1,"Telegram *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Telegram::Msg",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Telegram,0))){
    SWIG_fail_ptr("Telegram_Msg_set",1,SWIGTYPE_p_Telegram);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->Msg = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Telegram_Msg_get(lua_State* L) {
  int SWIG_arg = 0;
  Telegram *arg1 = (Telegram *) 0 ;
  int result;
  
  SWIG_check_num_args("Telegram::Msg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Telegram::Msg",1,"Telegram *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Telegram,0))){
    SWIG_fail_ptr("Telegram_Msg_get",1,SWIGTYPE_p_Telegram);
  }
  
  result = (int) ((arg1)->Msg);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Telegram_DispatchTime_set(lua_State* L) {
  int SWIG_arg = 0;
  Telegram *arg1 = (Telegram *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Telegram::DispatchTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Telegram::DispatchTime",1,"Telegram *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Telegram::DispatchTime",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Telegram,0))){
    SWIG_fail_ptr("Telegram_DispatchTime_set",1,SWIGTYPE_p_Telegram);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->DispatchTime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Telegram_DispatchTime_get(lua_State* L) {
  int SWIG_arg = 0;
  Telegram *arg1 = (Telegram *) 0 ;
  double result;
  
  SWIG_check_num_args("Telegram::DispatchTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Telegram::DispatchTime",1,"Telegram *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Telegram,0))){
    SWIG_fail_ptr("Telegram_DispatchTime_get",1,SWIGTYPE_p_Telegram);
  }
  
  result = (double) ((arg1)->DispatchTime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Telegram_ExtraInfo_set(lua_State* L) {
  int SWIG_arg = 0;
  Telegram *arg1 = (Telegram *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("Telegram::ExtraInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Telegram::ExtraInfo",1,"Telegram *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Telegram::ExtraInfo",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Telegram,0))){
    SWIG_fail_ptr("Telegram_ExtraInfo_set",1,SWIGTYPE_p_Telegram);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Telegram_ExtraInfo_set");
  if (arg1) (arg1)->ExtraInfo = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Telegram_ExtraInfo_get(lua_State* L) {
  int SWIG_arg = 0;
  Telegram *arg1 = (Telegram *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Telegram::ExtraInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Telegram::ExtraInfo",1,"Telegram *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Telegram,0))){
    SWIG_fail_ptr("Telegram_ExtraInfo_get",1,SWIGTYPE_p_Telegram);
  }
  
  result = (void *) ((arg1)->ExtraInfo);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Telegram__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Telegram *result = 0 ;
  
  SWIG_check_num_args("Telegram::Telegram",0,0)
  result = (Telegram *)new Telegram();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Telegram,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Telegram__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  Telegram *result = 0 ;
  
  SWIG_check_num_args("Telegram::Telegram",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Telegram::Telegram",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Telegram::Telegram",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Telegram::Telegram",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Telegram::Telegram",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Telegram::Telegram",5,"void *");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"new_Telegram");
  result = (Telegram *)new Telegram(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Telegram,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Telegram__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  IDType arg2 ;
  IDType arg3 ;
  int arg4 ;
  Telegram *result = 0 ;
  
  SWIG_check_num_args("Telegram::Telegram",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Telegram::Telegram",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Telegram::Telegram",2,"IDType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Telegram::Telegram",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Telegram::Telegram",4,"int");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (IDType)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (Telegram *)new Telegram(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Telegram,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Telegram(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Telegram__SWIG_0(L);
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Telegram__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_new_Telegram__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Telegram'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Telegram::Telegram()\n"
    "    Telegram::Telegram(double,IDType,IDType,int,void *)\n"
    "    Telegram::Telegram(double,IDType,IDType,int)\n");
  lua_error(L);return 0;
}


static void swig_delete_Telegram(void *obj) {
Telegram *arg1 = (Telegram *) obj;
delete arg1;
}
static swig_lua_method swig_Telegram_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Telegram_attributes[] = {
    { "Sender", _wrap_Telegram_Sender_get, _wrap_Telegram_Sender_set},
    { "Receiver", _wrap_Telegram_Receiver_get, _wrap_Telegram_Receiver_set},
    { "Msg", _wrap_Telegram_Msg_get, _wrap_Telegram_Msg_set},
    { "DispatchTime", _wrap_Telegram_DispatchTime_get, _wrap_Telegram_DispatchTime_set},
    { "ExtraInfo", _wrap_Telegram_ExtraInfo_get, _wrap_Telegram_ExtraInfo_set},
    {0,0,0}
};
static swig_lua_attribute swig_Telegram_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Telegram_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Telegram_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Telegram_bases[] = {0};
static const char *swig_Telegram_base_names[] = {0};
static swig_lua_class _wrap_class_Telegram = { "Telegram", &SWIGTYPE_p_Telegram,_wrap_new_Telegram, swig_delete_Telegram, swig_Telegram_methods, swig_Telegram_attributes, { "Telegram", swig_Telegram_cls_methods, swig_Telegram_cls_attributes, swig_Telegram_cls_constants }, swig_Telegram_bases, swig_Telegram_base_names };

static int _wrap_SmallestDelay_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SmallestDelay",0,0)
  result = (double)(double)SmallestDelay;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cMazeNodeNames_get(lua_State* L) {
  int SWIG_arg = 0;
  char **result = 0 ;
  
  SWIG_check_num_args("cMazeNodeNames",0,0)
  result = (char **)(char **)cMazeNodeNames;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeCreator_CreateNew(lua_State* L) {
  int SWIG_arg = 0;
  MazeCreator *arg1 = (MazeCreator *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  MazeRenderType arg4 ;
  unsigned int arg5 ;
  MazeGeneric *result = 0 ;
  
  SWIG_check_num_args("MazeCreator::CreateNew",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeCreator::CreateNew",1,"MazeCreator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MazeCreator::CreateNew",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MazeCreator::CreateNew",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("MazeCreator::CreateNew",4,"MazeRenderType const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("MazeCreator::CreateNew",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeCreator,0))){
    SWIG_fail_ptr("MazeCreator_CreateNew",1,SWIGTYPE_p_MazeCreator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (MazeRenderType const)(int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (MazeGeneric *)(arg1)->CreateNew(arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MazeGeneric,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_MazeCreator_methods[] = {
    {"CreateNew", _wrap_MazeCreator_CreateNew}, 
    {0,0}
};
static swig_lua_attribute swig_MazeCreator_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_MazeCreator_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MazeCreator_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_MazeCreator_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_MazeCreator_bases[] = {0,0};
static const char *swig_MazeCreator_base_names[] = {"AbstractSingleton< MazeCreator > *",0};
static swig_lua_class _wrap_class_MazeCreator = { "MazeCreator", &SWIGTYPE_p_MazeCreator,0,0, swig_MazeCreator_methods, swig_MazeCreator_attributes, { "MazeCreator", swig_MazeCreator_cls_methods, swig_MazeCreator_cls_attributes, swig_MazeCreator_cls_constants }, swig_MazeCreator_bases, swig_MazeCreator_base_names };

static int _wrap_new_MazeGeneric__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  MazeGeneric *result = 0 ;
  
  SWIG_check_num_args("MazeGeneric::MazeGeneric",0,0)
  result = (MazeGeneric *)new MazeGeneric();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MazeGeneric,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MazeGeneric__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  MazeGeneric *arg1 = 0 ;
  MazeGeneric *result = 0 ;
  
  SWIG_check_num_args("MazeGeneric::MazeGeneric",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("MazeGeneric::MazeGeneric",1,"MazeGeneric const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeGeneric,0))){
    SWIG_fail_ptr("new_MazeGeneric",1,SWIGTYPE_p_MazeGeneric);
  }
  
  result = (MazeGeneric *)new MazeGeneric((MazeGeneric const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MazeGeneric,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MazeGeneric(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MazeGeneric__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MazeGeneric, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MazeGeneric__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MazeGeneric'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MazeGeneric::MazeGeneric()\n"
    "    MazeGeneric::MazeGeneric(MazeGeneric const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MazeGeneric_GetRenderType(lua_State* L) {
  int SWIG_arg = 0;
  MazeGeneric *arg1 = (MazeGeneric *) 0 ;
  MazeRenderType result;
  
  SWIG_check_num_args("MazeGeneric::GetRenderType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeGeneric::GetRenderType",1,"MazeGeneric const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeGeneric,0))){
    SWIG_fail_ptr("MazeGeneric_GetRenderType",1,SWIGTYPE_p_MazeGeneric);
  }
  
  result = (MazeRenderType)((MazeGeneric const *)arg1)->GetRenderType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeGeneric_CreateMaze__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  MazeGeneric *arg1 = (MazeGeneric *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("MazeGeneric::CreateMaze",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeGeneric::CreateMaze",1,"MazeGeneric *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MazeGeneric::CreateMaze",2,"unsigned int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MazeGeneric::CreateMaze",3,"unsigned int const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("MazeGeneric::CreateMaze",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeGeneric,0))){
    SWIG_fail_ptr("MazeGeneric_CreateMaze",1,SWIGTYPE_p_MazeGeneric);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int const)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->CreateMaze(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeGeneric_CreateMaze__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  MazeGeneric *arg1 = (MazeGeneric *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("MazeGeneric::CreateMaze",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeGeneric::CreateMaze",1,"MazeGeneric *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MazeGeneric::CreateMaze",2,"unsigned int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MazeGeneric::CreateMaze",3,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeGeneric,0))){
    SWIG_fail_ptr("MazeGeneric_CreateMaze",1,SWIGTYPE_p_MazeGeneric);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int const)lua_tonumber(L, 3);
  (arg1)->CreateMaze(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeGeneric_CreateMaze(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MazeGeneric, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MazeGeneric_CreateMaze__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MazeGeneric, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MazeGeneric_CreateMaze__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MazeGeneric_CreateMaze'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MazeGeneric::CreateMaze(unsigned int const,unsigned int const,unsigned int)\n"
    "    MazeGeneric::CreateMaze(unsigned int const,unsigned int const)\n");
  lua_error(L);return 0;
}


static int _wrap_MazeGeneric_GetMazeNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  MazeGeneric *arg1 = (MazeGeneric *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  MazeNode *result = 0 ;
  
  SWIG_check_num_args("MazeGeneric::GetMazeNode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeGeneric::GetMazeNode",1,"MazeGeneric *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MazeGeneric::GetMazeNode",2,"unsigned int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MazeGeneric::GetMazeNode",3,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeGeneric,0))){
    SWIG_fail_ptr("MazeGeneric_GetMazeNode",1,SWIGTYPE_p_MazeGeneric);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int const)lua_tonumber(L, 3);
  result = (MazeNode *)(arg1)->GetMazeNode(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MazeNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeGeneric_GetMazeNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  MazeGeneric *arg1 = (MazeGeneric *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  MazeNode *result = 0 ;
  
  SWIG_check_num_args("MazeGeneric::GetMazeNode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeGeneric::GetMazeNode",1,"MazeGeneric const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MazeGeneric::GetMazeNode",2,"unsigned int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MazeGeneric::GetMazeNode",3,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeGeneric,0))){
    SWIG_fail_ptr("MazeGeneric_GetMazeNode",1,SWIGTYPE_p_MazeGeneric);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int const)lua_tonumber(L, 3);
  result = (MazeNode *)((MazeGeneric const *)arg1)->GetMazeNode(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MazeNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeGeneric_GetMazeNode(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MazeGeneric, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MazeGeneric_GetMazeNode__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MazeGeneric, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MazeGeneric_GetMazeNode__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MazeGeneric_GetMazeNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MazeGeneric::GetMazeNode(unsigned int const,unsigned int const)\n"
    "    MazeGeneric::GetMazeNode(unsigned int const,unsigned int const) const\n");
  lua_error(L);return 0;
}


static int _wrap_MazeGeneric_GetNumRows(lua_State* L) {
  int SWIG_arg = 0;
  MazeGeneric *arg1 = (MazeGeneric *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("MazeGeneric::GetNumRows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeGeneric::GetNumRows",1,"MazeGeneric const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeGeneric,0))){
    SWIG_fail_ptr("MazeGeneric_GetNumRows",1,SWIGTYPE_p_MazeGeneric);
  }
  
  result = (unsigned int)((MazeGeneric const *)arg1)->GetNumRows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeGeneric_GetNumColumns(lua_State* L) {
  int SWIG_arg = 0;
  MazeGeneric *arg1 = (MazeGeneric *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("MazeGeneric::GetNumColumns",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeGeneric::GetNumColumns",1,"MazeGeneric const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeGeneric,0))){
    SWIG_fail_ptr("MazeGeneric_GetNumColumns",1,SWIGTYPE_p_MazeGeneric);
  }
  
  result = (unsigned int)((MazeGeneric const *)arg1)->GetNumColumns();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeGeneric_GetSeed(lua_State* L) {
  int SWIG_arg = 0;
  MazeGeneric *arg1 = (MazeGeneric *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("MazeGeneric::GetSeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeGeneric::GetSeed",1,"MazeGeneric const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeGeneric,0))){
    SWIG_fail_ptr("MazeGeneric_GetSeed",1,SWIGTYPE_p_MazeGeneric);
  }
  
  result = (unsigned int)((MazeGeneric const *)arg1)->GetSeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeGeneric_Draw(lua_State* L) {
  int SWIG_arg = 0;
  MazeGeneric *arg1 = (MazeGeneric *) 0 ;
  
  SWIG_check_num_args("MazeGeneric::Draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeGeneric::Draw",1,"MazeGeneric *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeGeneric,0))){
    SWIG_fail_ptr("MazeGeneric_Draw",1,SWIGTYPE_p_MazeGeneric);
  }
  
  (arg1)->Draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeGeneric_SolveMaze(lua_State* L) {
  int SWIG_arg = 0;
  MazeGeneric *arg1 = (MazeGeneric *) 0 ;
  
  SWIG_check_num_args("MazeGeneric::SolveMaze",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeGeneric::SolveMaze",1,"MazeGeneric *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeGeneric,0))){
    SWIG_fail_ptr("MazeGeneric_SolveMaze",1,SWIGTYPE_p_MazeGeneric);
  }
  
  (arg1)->SolveMaze();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeGeneric_UnSolveMaze(lua_State* L) {
  int SWIG_arg = 0;
  MazeGeneric *arg1 = (MazeGeneric *) 0 ;
  
  SWIG_check_num_args("MazeGeneric::UnSolveMaze",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeGeneric::UnSolveMaze",1,"MazeGeneric *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeGeneric,0))){
    SWIG_fail_ptr("MazeGeneric_UnSolveMaze",1,SWIGTYPE_p_MazeGeneric);
  }
  
  (arg1)->UnSolveMaze();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeGeneric_getBeginningCoord(lua_State* L) {
  int SWIG_arg = 0;
  MazeGeneric *arg1 = (MazeGeneric *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  
  SWIG_check_num_args("MazeGeneric::getBeginningCoord",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeGeneric::getBeginningCoord",1,"MazeGeneric const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("MazeGeneric::getBeginningCoord",2,"unsigned int &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("MazeGeneric::getBeginningCoord",3,"unsigned int &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeGeneric,0))){
    SWIG_fail_ptr("MazeGeneric_getBeginningCoord",1,SWIGTYPE_p_MazeGeneric);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("MazeGeneric_getBeginningCoord",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("MazeGeneric_getBeginningCoord",3,SWIGTYPE_p_unsigned_int);
  }
  
  ((MazeGeneric const *)arg1)->getBeginningCoord(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeGeneric_getEndCoord(lua_State* L) {
  int SWIG_arg = 0;
  MazeGeneric *arg1 = (MazeGeneric *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  
  SWIG_check_num_args("MazeGeneric::getEndCoord",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeGeneric::getEndCoord",1,"MazeGeneric const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("MazeGeneric::getEndCoord",2,"unsigned int &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("MazeGeneric::getEndCoord",3,"unsigned int &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeGeneric,0))){
    SWIG_fail_ptr("MazeGeneric_getEndCoord",1,SWIGTYPE_p_MazeGeneric);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("MazeGeneric_getEndCoord",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("MazeGeneric_getEndCoord",3,SWIGTYPE_p_unsigned_int);
  }
  
  ((MazeGeneric const *)arg1)->getEndCoord(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MazeGeneric(void *obj) {
MazeGeneric *arg1 = (MazeGeneric *) obj;
delete arg1;
}
static swig_lua_method swig_MazeGeneric_methods[] = {
    {"GetRenderType", _wrap_MazeGeneric_GetRenderType}, 
    {"CreateMaze", _wrap_MazeGeneric_CreateMaze}, 
    {"GetMazeNode", _wrap_MazeGeneric_GetMazeNode}, 
    {"GetNumRows", _wrap_MazeGeneric_GetNumRows}, 
    {"GetNumColumns", _wrap_MazeGeneric_GetNumColumns}, 
    {"GetSeed", _wrap_MazeGeneric_GetSeed}, 
    {"Draw", _wrap_MazeGeneric_Draw}, 
    {"SolveMaze", _wrap_MazeGeneric_SolveMaze}, 
    {"UnSolveMaze", _wrap_MazeGeneric_UnSolveMaze}, 
    {"getBeginningCoord", _wrap_MazeGeneric_getBeginningCoord}, 
    {"getEndCoord", _wrap_MazeGeneric_getEndCoord}, 
    {0,0}
};
static swig_lua_attribute swig_MazeGeneric_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_MazeGeneric_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MazeGeneric_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_MazeGeneric_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_MazeGeneric_bases[] = {0};
static const char *swig_MazeGeneric_base_names[] = {0};
static swig_lua_class _wrap_class_MazeGeneric = { "MazeGeneric", &SWIGTYPE_p_MazeGeneric,_wrap_new_MazeGeneric, swig_delete_MazeGeneric, swig_MazeGeneric_methods, swig_MazeGeneric_attributes, { "MazeGeneric", swig_MazeGeneric_cls_methods, swig_MazeGeneric_cls_attributes, swig_MazeGeneric_cls_constants }, swig_MazeGeneric_bases, swig_MazeGeneric_base_names };

static int _wrap_new_MazeHTML(lua_State* L) {
  int SWIG_arg = 0;
  MazeHTML *result = 0 ;
  
  SWIG_check_num_args("MazeHTML::MazeHTML",0,0)
  result = (MazeHTML *)new MazeHTML();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MazeHTML,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeHTML_Draw(lua_State* L) {
  int SWIG_arg = 0;
  MazeHTML *arg1 = (MazeHTML *) 0 ;
  
  SWIG_check_num_args("MazeHTML::Draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeHTML::Draw",1,"MazeHTML *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeHTML,0))){
    SWIG_fail_ptr("MazeHTML_Draw",1,SWIGTYPE_p_MazeHTML);
  }
  
  (arg1)->Draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeHTML_getHTMLText(lua_State* L) {
  int SWIG_arg = 0;
  MazeHTML *arg1 = (MazeHTML *) 0 ;
  std::string result;
  
  SWIG_check_num_args("MazeHTML::getHTMLText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeHTML::getHTMLText",1,"MazeHTML *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeHTML,0))){
    SWIG_fail_ptr("MazeHTML_getHTMLText",1,SWIGTYPE_p_MazeHTML);
  }
  
  result = (arg1)->getHTMLText();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeHTML_writeContent(lua_State* L) {
  int SWIG_arg = 0;
  MazeHTML *arg1 = (MazeHTML *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("MazeHTML::writeContent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeHTML::writeContent",1,"MazeHTML *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("MazeHTML::writeContent",2,"std::string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeHTML,0))){
    SWIG_fail_ptr("MazeHTML_writeContent",1,SWIGTYPE_p_MazeHTML);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("MazeHTML_writeContent",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  (arg1)->writeContent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazeHTML_displayContent(lua_State* L) {
  int SWIG_arg = 0;
  MazeHTML *arg1 = (MazeHTML *) 0 ;
  
  SWIG_check_num_args("MazeHTML::displayContent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazeHTML::displayContent",1,"MazeHTML *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazeHTML,0))){
    SWIG_fail_ptr("MazeHTML_displayContent",1,SWIGTYPE_p_MazeHTML);
  }
  
  (arg1)->displayContent();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MazeHTML(void *obj) {
MazeHTML *arg1 = (MazeHTML *) obj;
delete arg1;
}
static swig_lua_method swig_MazeHTML_methods[] = {
    {"Draw", _wrap_MazeHTML_Draw}, 
    {"getHTMLText", _wrap_MazeHTML_getHTMLText}, 
    {"writeContent", _wrap_MazeHTML_writeContent}, 
    {"displayContent", _wrap_MazeHTML_displayContent}, 
    {0,0}
};
static swig_lua_attribute swig_MazeHTML_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_MazeHTML_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MazeHTML_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_MazeHTML_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_MazeHTML_bases[] = {0,0};
static const char *swig_MazeHTML_base_names[] = {"MazeGeneric *",0};
static swig_lua_class _wrap_class_MazeHTML = { "MazeHTML", &SWIGTYPE_p_MazeHTML,_wrap_new_MazeHTML, swig_delete_MazeHTML, swig_MazeHTML_methods, swig_MazeHTML_attributes, { "MazeHTML", swig_MazeHTML_cls_methods, swig_MazeHTML_cls_attributes, swig_MazeHTML_cls_constants }, swig_MazeHTML_bases, swig_MazeHTML_base_names };

static int _wrap_new_TextureMazeCreator(lua_State* L) {
  int SWIG_arg = 0;
  TextureMazeCreator *result = 0 ;
  
  SWIG_check_num_args("TextureMazeCreator::TextureMazeCreator",0,0)
  result = (TextureMazeCreator *)new TextureMazeCreator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextureMazeCreator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureMazeCreator_Draw(lua_State* L) {
  int SWIG_arg = 0;
  TextureMazeCreator *arg1 = (TextureMazeCreator *) 0 ;
  
  SWIG_check_num_args("TextureMazeCreator::Draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureMazeCreator::Draw",1,"TextureMazeCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureMazeCreator,0))){
    SWIG_fail_ptr("TextureMazeCreator_Draw",1,SWIGTYPE_p_TextureMazeCreator);
  }
  
  (arg1)->Draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureMazeCreator_DrawCurrentPosition(lua_State* L) {
  int SWIG_arg = 0;
  TextureMazeCreator *arg1 = (TextureMazeCreator *) 0 ;
  btVector2 *arg2 = 0 ;
  
  SWIG_check_num_args("TextureMazeCreator::DrawCurrentPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureMazeCreator::DrawCurrentPosition",1,"TextureMazeCreator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TextureMazeCreator::DrawCurrentPosition",2,"btVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureMazeCreator,0))){
    SWIG_fail_ptr("TextureMazeCreator_DrawCurrentPosition",1,SWIGTYPE_p_TextureMazeCreator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector2,0))){
    SWIG_fail_ptr("TextureMazeCreator_DrawCurrentPosition",2,SWIGTYPE_p_btVector2);
  }
  
  (arg1)->DrawCurrentPosition((btVector2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureMazeCreator_setStartPosition(lua_State* L) {
  int SWIG_arg = 0;
  TextureMazeCreator *arg1 = (TextureMazeCreator *) 0 ;
  btVector2 *arg2 = 0 ;
  
  SWIG_check_num_args("TextureMazeCreator::setStartPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureMazeCreator::setStartPosition",1,"TextureMazeCreator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TextureMazeCreator::setStartPosition",2,"btVector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureMazeCreator,0))){
    SWIG_fail_ptr("TextureMazeCreator_setStartPosition",1,SWIGTYPE_p_TextureMazeCreator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector2,0))){
    SWIG_fail_ptr("TextureMazeCreator_setStartPosition",2,SWIGTYPE_p_btVector2);
  }
  
  (arg1)->setStartPosition((btVector2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureMazeCreator_setMeshMazeTileHalfExtends(lua_State* L) {
  int SWIG_arg = 0;
  TextureMazeCreator *arg1 = (TextureMazeCreator *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("TextureMazeCreator::setMeshMazeTileHalfExtends",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureMazeCreator::setMeshMazeTileHalfExtends",1,"TextureMazeCreator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TextureMazeCreator::setMeshMazeTileHalfExtends",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureMazeCreator,0))){
    SWIG_fail_ptr("TextureMazeCreator_setMeshMazeTileHalfExtends",1,SWIGTYPE_p_TextureMazeCreator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TextureMazeCreator_setMeshMazeTileHalfExtends",2,SWIGTYPE_p_btVector3);
  }
  
  ((TextureMazeCreator const *)arg1)->setMeshMazeTileHalfExtends((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureMazeCreator_setMeshMazeBoardHalfExtends(lua_State* L) {
  int SWIG_arg = 0;
  TextureMazeCreator *arg1 = (TextureMazeCreator *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("TextureMazeCreator::setMeshMazeBoardHalfExtends",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureMazeCreator::setMeshMazeBoardHalfExtends",1,"TextureMazeCreator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TextureMazeCreator::setMeshMazeBoardHalfExtends",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureMazeCreator,0))){
    SWIG_fail_ptr("TextureMazeCreator_setMeshMazeBoardHalfExtends",1,SWIGTYPE_p_TextureMazeCreator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TextureMazeCreator_setMeshMazeBoardHalfExtends",2,SWIGTYPE_p_btVector3);
  }
  
  ((TextureMazeCreator const *)arg1)->setMeshMazeBoardHalfExtends((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureMazeCreator_getMiniMapScale(lua_State* L) {
  int SWIG_arg = 0;
  TextureMazeCreator *arg1 = (TextureMazeCreator *) 0 ;
  float result;
  
  SWIG_check_num_args("TextureMazeCreator::getMiniMapScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureMazeCreator::getMiniMapScale",1,"TextureMazeCreator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureMazeCreator,0))){
    SWIG_fail_ptr("TextureMazeCreator_getMiniMapScale",1,SWIGTYPE_p_TextureMazeCreator);
  }
  
  result = (float)((TextureMazeCreator const *)arg1)->getMiniMapScale();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureMazeCreator_getMazeImageFileEditor(lua_State* L) {
  int SWIG_arg = 0;
  TextureMazeCreator *arg1 = (TextureMazeCreator *) 0 ;
  ImageFileEditor *result = 0 ;
  
  SWIG_check_num_args("TextureMazeCreator::getMazeImageFileEditor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureMazeCreator::getMazeImageFileEditor",1,"TextureMazeCreator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureMazeCreator,0))){
    SWIG_fail_ptr("TextureMazeCreator_getMazeImageFileEditor",1,SWIGTYPE_p_TextureMazeCreator);
  }
  
  result = (ImageFileEditor *)((TextureMazeCreator const *)arg1)->getMazeImageFileEditor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImageFileEditor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureMazeCreator_getBallImageFileEditor(lua_State* L) {
  int SWIG_arg = 0;
  TextureMazeCreator *arg1 = (TextureMazeCreator *) 0 ;
  ImageFileEditor *result = 0 ;
  
  SWIG_check_num_args("TextureMazeCreator::getBallImageFileEditor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureMazeCreator::getBallImageFileEditor",1,"TextureMazeCreator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureMazeCreator,0))){
    SWIG_fail_ptr("TextureMazeCreator_getBallImageFileEditor",1,SWIGTYPE_p_TextureMazeCreator);
  }
  
  result = (ImageFileEditor *)((TextureMazeCreator const *)arg1)->getBallImageFileEditor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ImageFileEditor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureMazeCreator_getBoardDimensions(lua_State* L) {
  int SWIG_arg = 0;
  TextureMazeCreator *arg1 = (TextureMazeCreator *) 0 ;
  btVector2 result;
  
  SWIG_check_num_args("TextureMazeCreator::getBoardDimensions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextureMazeCreator::getBoardDimensions",1,"TextureMazeCreator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextureMazeCreator,0))){
    SWIG_fail_ptr("TextureMazeCreator_getBoardDimensions",1,SWIGTYPE_p_TextureMazeCreator);
  }
  
  result = ((TextureMazeCreator const *)arg1)->getBoardDimensions();
  {
    btVector2 * resultptr = new btVector2((const btVector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TextureMazeCreator(void *obj) {
TextureMazeCreator *arg1 = (TextureMazeCreator *) obj;
delete arg1;
}
static swig_lua_method swig_TextureMazeCreator_methods[] = {
    {"Draw", _wrap_TextureMazeCreator_Draw}, 
    {"DrawCurrentPosition", _wrap_TextureMazeCreator_DrawCurrentPosition}, 
    {"setStartPosition", _wrap_TextureMazeCreator_setStartPosition}, 
    {"setMeshMazeTileHalfExtends", _wrap_TextureMazeCreator_setMeshMazeTileHalfExtends}, 
    {"setMeshMazeBoardHalfExtends", _wrap_TextureMazeCreator_setMeshMazeBoardHalfExtends}, 
    {"getMiniMapScale", _wrap_TextureMazeCreator_getMiniMapScale}, 
    {"getMazeImageFileEditor", _wrap_TextureMazeCreator_getMazeImageFileEditor}, 
    {"getBallImageFileEditor", _wrap_TextureMazeCreator_getBallImageFileEditor}, 
    {"getBoardDimensions", _wrap_TextureMazeCreator_getBoardDimensions}, 
    {0,0}
};
static swig_lua_attribute swig_TextureMazeCreator_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_TextureMazeCreator_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TextureMazeCreator_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_TextureMazeCreator_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_TextureMazeCreator_bases[] = {0,0};
static const char *swig_TextureMazeCreator_base_names[] = {"MazeGeneric *",0};
static swig_lua_class _wrap_class_TextureMazeCreator = { "TextureMazeCreator", &SWIGTYPE_p_TextureMazeCreator,_wrap_new_TextureMazeCreator, swig_delete_TextureMazeCreator, swig_TextureMazeCreator_methods, swig_TextureMazeCreator_attributes, { "TextureMazeCreator", swig_TextureMazeCreator_cls_methods, swig_TextureMazeCreator_cls_attributes, swig_TextureMazeCreator_cls_constants }, swig_TextureMazeCreator_bases, swig_TextureMazeCreator_base_names };

static int _wrap_new_MazePNG(lua_State* L) {
  int SWIG_arg = 0;
  MazePNG *result = 0 ;
  
  SWIG_check_num_args("MazePNG::MazePNG",0,0)
  result = (MazePNG *)new MazePNG();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MazePNG,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MazePNG_Draw(lua_State* L) {
  int SWIG_arg = 0;
  MazePNG *arg1 = (MazePNG *) 0 ;
  
  SWIG_check_num_args("MazePNG::Draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MazePNG::Draw",1,"MazePNG *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MazePNG,0))){
    SWIG_fail_ptr("MazePNG_Draw",1,SWIGTYPE_p_MazePNG);
  }
  
  (arg1)->Draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MazePNG(void *obj) {
MazePNG *arg1 = (MazePNG *) obj;
delete arg1;
}
static swig_lua_method swig_MazePNG_methods[] = {
    {"Draw", _wrap_MazePNG_Draw}, 
    {0,0}
};
static swig_lua_attribute swig_MazePNG_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_MazePNG_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MazePNG_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_MazePNG_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_MazePNG_bases[] = {0,0};
static const char *swig_MazePNG_base_names[] = {"MazeGeneric *",0};
static swig_lua_class _wrap_class_MazePNG = { "MazePNG", &SWIGTYPE_p_MazePNG,_wrap_new_MazePNG, swig_delete_MazePNG, swig_MazePNG_methods, swig_MazePNG_attributes, { "MazePNG", swig_MazePNG_cls_methods, swig_MazePNG_cls_attributes, swig_MazePNG_cls_constants }, swig_MazePNG_bases, swig_MazePNG_base_names };

static int _wrap_new_MeshMazeCreator(lua_State* L) {
  int SWIG_arg = 0;
  MeshMazeCreator *result = 0 ;
  
  SWIG_check_num_args("MeshMazeCreator::MeshMazeCreator",0,0)
  result = (MeshMazeCreator *)new MeshMazeCreator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MeshMazeCreator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshMazeCreator_DrawMaze__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  MeshMazeCreator *arg1 = (MeshMazeCreator *) 0 ;
  std::string *arg2 = 0 ;
  IDType arg3 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("MeshMazeCreator::DrawMaze",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MeshMazeCreator::DrawMaze",1,"MeshMazeCreator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("MeshMazeCreator::DrawMaze",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MeshMazeCreator::DrawMaze",3,"IDType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("MeshMazeCreator::DrawMaze",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MeshMazeCreator,0))){
    SWIG_fail_ptr("MeshMazeCreator_DrawMaze",1,SWIGTYPE_p_MeshMazeCreator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("MeshMazeCreator_DrawMaze",2,SWIGTYPE_p_std__string);
  }
  
  arg3 = (IDType)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("MeshMazeCreator_DrawMaze",4,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->DrawMaze((std::string const &)*arg2,arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshMazeCreator_DrawMaze__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  MeshMazeCreator *arg1 = (MeshMazeCreator *) 0 ;
  std::string *arg2 = 0 ;
  IDType arg3 ;
  
  SWIG_check_num_args("MeshMazeCreator::DrawMaze",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MeshMazeCreator::DrawMaze",1,"MeshMazeCreator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("MeshMazeCreator::DrawMaze",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MeshMazeCreator::DrawMaze",3,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MeshMazeCreator,0))){
    SWIG_fail_ptr("MeshMazeCreator_DrawMaze",1,SWIGTYPE_p_MeshMazeCreator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("MeshMazeCreator_DrawMaze",2,SWIGTYPE_p_std__string);
  }
  
  arg3 = (IDType)lua_tonumber(L, 3);
  (arg1)->DrawMaze((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshMazeCreator_DrawMaze(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MeshMazeCreator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MeshMazeCreator_DrawMaze__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MeshMazeCreator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_MeshMazeCreator_DrawMaze__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MeshMazeCreator_DrawMaze'\n"
    "  Possible C/C++ prototypes are:\n"
    "    MeshMazeCreator::DrawMaze(std::string const &,IDType,btVector3 const &)\n"
    "    MeshMazeCreator::DrawMaze(std::string const &,IDType)\n");
  lua_error(L);return 0;
}


static int _wrap_MeshMazeCreator_getOriginOfTile(lua_State* L) {
  int SWIG_arg = 0;
  MeshMazeCreator *arg1 = (MeshMazeCreator *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  btVector3 result;
  
  SWIG_check_num_args("MeshMazeCreator::getOriginOfTile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MeshMazeCreator::getOriginOfTile",1,"MeshMazeCreator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MeshMazeCreator::getOriginOfTile",2,"unsigned int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MeshMazeCreator::getOriginOfTile",3,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MeshMazeCreator,0))){
    SWIG_fail_ptr("MeshMazeCreator_getOriginOfTile",1,SWIGTYPE_p_MeshMazeCreator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int const)lua_tonumber(L, 3);
  result = ((MeshMazeCreator const *)arg1)->getOriginOfTile(arg2,arg3);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshMazeCreator_getMaze(lua_State* L) {
  int SWIG_arg = 0;
  MeshMazeCreator *arg1 = (MeshMazeCreator *) 0 ;
  RigidEntity *result = 0 ;
  
  SWIG_check_num_args("MeshMazeCreator::getMaze",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MeshMazeCreator::getMaze",1,"MeshMazeCreator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MeshMazeCreator,0))){
    SWIG_fail_ptr("MeshMazeCreator_getMaze",1,SWIGTYPE_p_MeshMazeCreator);
  }
  
  result = (RigidEntity *)((MeshMazeCreator const *)arg1)->getMaze();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RigidEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshMazeCreator_getViewObjectID(lua_State* L) {
  int SWIG_arg = 0;
  MeshMazeCreator *arg1 = (MeshMazeCreator *) 0 ;
  IDType result;
  
  SWIG_check_num_args("MeshMazeCreator::getViewObjectID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MeshMazeCreator::getViewObjectID",1,"MeshMazeCreator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MeshMazeCreator,0))){
    SWIG_fail_ptr("MeshMazeCreator_getViewObjectID",1,SWIGTYPE_p_MeshMazeCreator);
  }
  
  result = (IDType)((MeshMazeCreator const *)arg1)->getViewObjectID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshMazeCreator_getTileHalfExtends(lua_State* L) {
  int SWIG_arg = 0;
  MeshMazeCreator *arg1 = (MeshMazeCreator *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("MeshMazeCreator::getTileHalfExtends",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MeshMazeCreator::getTileHalfExtends",1,"MeshMazeCreator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MeshMazeCreator,0))){
    SWIG_fail_ptr("MeshMazeCreator_getTileHalfExtends",1,SWIGTYPE_p_MeshMazeCreator);
  }
  
  result = (btVector3 *) &((MeshMazeCreator const *)arg1)->getTileHalfExtends();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshMazeCreator_getBoardHalfExtends(lua_State* L) {
  int SWIG_arg = 0;
  MeshMazeCreator *arg1 = (MeshMazeCreator *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("MeshMazeCreator::getBoardHalfExtends",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MeshMazeCreator::getBoardHalfExtends",1,"MeshMazeCreator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MeshMazeCreator,0))){
    SWIG_fail_ptr("MeshMazeCreator_getBoardHalfExtends",1,SWIGTYPE_p_MeshMazeCreator);
  }
  
  result = (btVector3 *) &((MeshMazeCreator const *)arg1)->getBoardHalfExtends();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MeshMazeCreator(void *obj) {
MeshMazeCreator *arg1 = (MeshMazeCreator *) obj;
delete arg1;
}
static swig_lua_method swig_MeshMazeCreator_methods[] = {
    {"DrawMaze", _wrap_MeshMazeCreator_DrawMaze}, 
    {"getOriginOfTile", _wrap_MeshMazeCreator_getOriginOfTile}, 
    {"getMaze", _wrap_MeshMazeCreator_getMaze}, 
    {"getViewObjectID", _wrap_MeshMazeCreator_getViewObjectID}, 
    {"getTileHalfExtends", _wrap_MeshMazeCreator_getTileHalfExtends}, 
    {"getBoardHalfExtends", _wrap_MeshMazeCreator_getBoardHalfExtends}, 
    {0,0}
};
static swig_lua_attribute swig_MeshMazeCreator_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_MeshMazeCreator_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MeshMazeCreator_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_MeshMazeCreator_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_MeshMazeCreator_bases[] = {0,0};
static const char *swig_MeshMazeCreator_base_names[] = {"MazeGeneric *",0};
static swig_lua_class _wrap_class_MeshMazeCreator = { "MeshMazeCreator", &SWIGTYPE_p_MeshMazeCreator,_wrap_new_MeshMazeCreator, swig_delete_MeshMazeCreator, swig_MeshMazeCreator_methods, swig_MeshMazeCreator_attributes, { "MeshMazeCreator", swig_MeshMazeCreator_cls_methods, swig_MeshMazeCreator_cls_attributes, swig_MeshMazeCreator_cls_constants }, swig_MeshMazeCreator_bases, swig_MeshMazeCreator_base_names };

static int _wrap_OcclusionBuffer_initialized_set(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("OcclusionBuffer::initialized",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::initialized",1,"OcclusionBuffer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("OcclusionBuffer::initialized",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_initialized_set",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->initialized = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_initialized_get(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  bool result;
  
  SWIG_check_num_args("OcclusionBuffer::initialized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::initialized",1,"OcclusionBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_initialized_get",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  result = (bool) ((arg1)->initialized);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_buffer_set(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btAlignedObjectArray< btScalar > *arg2 = (btAlignedObjectArray< btScalar > *) 0 ;
  
  SWIG_check_num_args("OcclusionBuffer::buffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::buffer",1,"OcclusionBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OcclusionBuffer::buffer",2,"btAlignedObjectArray< btScalar > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_buffer_set",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_float_t,0))){
    SWIG_fail_ptr("OcclusionBuffer_buffer_set",2,SWIGTYPE_p_btAlignedObjectArrayT_float_t);
  }
  
  if (arg1) (arg1)->buffer = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_buffer_get(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btAlignedObjectArray< btScalar > *result = 0 ;
  
  SWIG_check_num_args("OcclusionBuffer::buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::buffer",1,"OcclusionBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_buffer_get",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  result = (btAlignedObjectArray< btScalar > *)& ((arg1)->buffer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_sizes_set(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  int *arg2 ;
  
  SWIG_check_num_args("OcclusionBuffer::sizes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::sizes",1,"OcclusionBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OcclusionBuffer::sizes",2,"int [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_sizes_set",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("OcclusionBuffer_sizes_set",2,SWIGTYPE_p_int);
  }
  
  {
    size_t ii;
    int *b = (int *) arg1->sizes;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_sizes_get(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("OcclusionBuffer::sizes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::sizes",1,"OcclusionBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_sizes_get",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  result = (int *)(int *) ((arg1)->sizes);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_scales_set(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btScalar *arg2 ;
  
  SWIG_check_num_args("OcclusionBuffer::scales",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::scales",1,"OcclusionBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OcclusionBuffer::scales",2,"btScalar [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_scales_set",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OcclusionBuffer_scales_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    btScalar *b = (btScalar *) arg1->scales;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btScalar *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_scales_get(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("OcclusionBuffer::scales",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::scales",1,"OcclusionBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_scales_get",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  result = (btScalar *)(btScalar *) ((arg1)->scales);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_offsets_set(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btScalar *arg2 ;
  
  SWIG_check_num_args("OcclusionBuffer::offsets",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::offsets",1,"OcclusionBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OcclusionBuffer::offsets",2,"btScalar [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_offsets_set",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OcclusionBuffer_offsets_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    btScalar *b = (btScalar *) arg1->offsets;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btScalar *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_offsets_get(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("OcclusionBuffer::offsets",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::offsets",1,"OcclusionBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_offsets_get",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  result = (btScalar *)(btScalar *) ((arg1)->offsets);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_wtrs_set(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btScalar *arg2 ;
  
  SWIG_check_num_args("OcclusionBuffer::wtrs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::wtrs",1,"OcclusionBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OcclusionBuffer::wtrs",2,"btScalar [16]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_wtrs_set",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OcclusionBuffer_wtrs_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    btScalar *b = (btScalar *) arg1->wtrs;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((btScalar *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_wtrs_get(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btScalar *result = 0 ;
  
  SWIG_check_num_args("OcclusionBuffer::wtrs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::wtrs",1,"OcclusionBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_wtrs_get",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  result = (btScalar *)(btScalar *) ((arg1)->wtrs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_eye_set(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("OcclusionBuffer::eye",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::eye",1,"OcclusionBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OcclusionBuffer::eye",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_eye_set",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_eye_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->eye = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_eye_get(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("OcclusionBuffer::eye",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::eye",1,"OcclusionBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_eye_get",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  result = (btVector3 *)& ((arg1)->eye);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_neardist_set(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("OcclusionBuffer::neardist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::neardist",1,"OcclusionBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OcclusionBuffer::neardist",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_neardist_set",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_neardist_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->neardist = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_neardist_get(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("OcclusionBuffer::neardist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::neardist",1,"OcclusionBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_neardist_get",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  result = (btVector3 *)& ((arg1)->neardist);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_ocarea_set(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("OcclusionBuffer::ocarea",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::ocarea",1,"OcclusionBuffer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OcclusionBuffer::ocarea",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_ocarea_set",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->ocarea = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_ocarea_get(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("OcclusionBuffer::ocarea",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::ocarea",1,"OcclusionBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_ocarea_get",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  result = (btScalar) ((arg1)->ocarea);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_qrarea_set(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("OcclusionBuffer::qrarea",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::qrarea",1,"OcclusionBuffer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OcclusionBuffer::qrarea",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_qrarea_set",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->qrarea = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_qrarea_get(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("OcclusionBuffer::qrarea",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::qrarea",1,"OcclusionBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_qrarea_get",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  result = (btScalar) ((arg1)->qrarea);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OcclusionBuffer(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *result = 0 ;
  
  SWIG_check_num_args("OcclusionBuffer::OcclusionBuffer",0,0)
  result = (OcclusionBuffer *)new OcclusionBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OcclusionBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_setup(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("OcclusionBuffer::setup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::setup",1,"OcclusionBuffer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OcclusionBuffer::setup",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OcclusionBuffer::setup",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_setup",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setup(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_clear(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  
  SWIG_check_num_args("OcclusionBuffer::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::clear",1,"OcclusionBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_clear",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_initialize(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  
  SWIG_check_num_args("OcclusionBuffer::initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::initialize",1,"OcclusionBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_initialize",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  (arg1)->initialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_transform(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector4 result;
  
  SWIG_check_num_args("OcclusionBuffer::transform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::transform",1,"OcclusionBuffer const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OcclusionBuffer::transform",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_transform",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_transform",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((OcclusionBuffer const *)arg1)->transform((btVector3 const &)*arg2);
  {
    btVector4 * resultptr = new btVector4((const btVector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_project(lua_State* L) {
  int SWIG_arg = 0;
  btVector4 *arg1 = (btVector4 *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("OcclusionBuffer::project",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::project",1,"btVector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OcclusionBuffer::project",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector4,0))){
    SWIG_fail_ptr("OcclusionBuffer_project",1,SWIGTYPE_p_btVector4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)OcclusionBuffer::project(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_appendOccluder__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("OcclusionBuffer::appendOccluder",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::appendOccluder",1,"OcclusionBuffer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OcclusionBuffer::appendOccluder",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OcclusionBuffer::appendOccluder",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("OcclusionBuffer::appendOccluder",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_appendOccluder",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_appendOccluder",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_appendOccluder",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_appendOccluder",4,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->appendOccluder((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_appendOccluder__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  SWIG_check_num_args("OcclusionBuffer::appendOccluder",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::appendOccluder",1,"OcclusionBuffer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OcclusionBuffer::appendOccluder",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OcclusionBuffer::appendOccluder",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("OcclusionBuffer::appendOccluder",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("OcclusionBuffer::appendOccluder",5,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_appendOccluder",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_appendOccluder",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_appendOccluder",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_appendOccluder",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_appendOccluder",5,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->appendOccluder((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_appendOccluder__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("OcclusionBuffer::appendOccluder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::appendOccluder",1,"OcclusionBuffer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OcclusionBuffer::appendOccluder",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OcclusionBuffer::appendOccluder",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_appendOccluder",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_appendOccluder",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_appendOccluder",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->appendOccluder((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_appendOccluder__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btVector3 *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  SWIG_check_num_args("OcclusionBuffer::appendOccluder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::appendOccluder",1,"OcclusionBuffer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OcclusionBuffer::appendOccluder",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OcclusionBuffer::appendOccluder",3,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_appendOccluder",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_appendOccluder",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("OcclusionBuffer_appendOccluder",3,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->appendOccluder((btVector3 const &)*arg2,(btTransform const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_appendOccluder(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OcclusionBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OcclusionBuffer_appendOccluder__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OcclusionBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OcclusionBuffer_appendOccluder__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OcclusionBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_OcclusionBuffer_appendOccluder__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OcclusionBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_OcclusionBuffer_appendOccluder__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OcclusionBuffer_appendOccluder'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OcclusionBuffer::appendOccluder(btVector3 const &,btVector3 const &,btVector3 const &)\n"
    "    OcclusionBuffer::appendOccluder(btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &)\n"
    "    OcclusionBuffer::appendOccluder(btVector3 const &,btVector3 const &)\n"
    "    OcclusionBuffer::appendOccluder(btVector3 const &,btTransform const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OcclusionBuffer_queryOccluder__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("OcclusionBuffer::queryOccluder",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::queryOccluder",1,"OcclusionBuffer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OcclusionBuffer::queryOccluder",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OcclusionBuffer::queryOccluder",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("OcclusionBuffer::queryOccluder",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_queryOccluder",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_queryOccluder",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_queryOccluder",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_queryOccluder",4,SWIGTYPE_p_btVector3);
  }
  
  result = (bool)(arg1)->queryOccluder((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_queryOccluder__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("OcclusionBuffer::queryOccluder",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::queryOccluder",1,"OcclusionBuffer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OcclusionBuffer::queryOccluder",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OcclusionBuffer::queryOccluder",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("OcclusionBuffer::queryOccluder",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("OcclusionBuffer::queryOccluder",5,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_queryOccluder",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_queryOccluder",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_queryOccluder",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_queryOccluder",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_queryOccluder",5,SWIGTYPE_p_btVector3);
  }
  
  result = (bool)(arg1)->queryOccluder((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_queryOccluder__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OcclusionBuffer *arg1 = (OcclusionBuffer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("OcclusionBuffer::queryOccluder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OcclusionBuffer::queryOccluder",1,"OcclusionBuffer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("OcclusionBuffer::queryOccluder",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("OcclusionBuffer::queryOccluder",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("OcclusionBuffer_queryOccluder",1,SWIGTYPE_p_OcclusionBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_queryOccluder",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("OcclusionBuffer_queryOccluder",3,SWIGTYPE_p_btVector3);
  }
  
  result = (bool)(arg1)->queryOccluder((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OcclusionBuffer_queryOccluder(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OcclusionBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OcclusionBuffer_queryOccluder__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OcclusionBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_OcclusionBuffer_queryOccluder__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OcclusionBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_OcclusionBuffer_queryOccluder__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OcclusionBuffer_queryOccluder'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OcclusionBuffer::queryOccluder(btVector3 const &,btVector3 const &,btVector3 const &)\n"
    "    OcclusionBuffer::queryOccluder(btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &)\n"
    "    OcclusionBuffer::queryOccluder(btVector3 const &,btVector3 const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_OcclusionBuffer(void *obj) {
OcclusionBuffer *arg1 = (OcclusionBuffer *) obj;
delete arg1;
}
static swig_lua_method swig_OcclusionBuffer_methods[] = {
    {"setup", _wrap_OcclusionBuffer_setup}, 
    {"clear", _wrap_OcclusionBuffer_clear}, 
    {"initialize", _wrap_OcclusionBuffer_initialize}, 
    {"transform", _wrap_OcclusionBuffer_transform}, 
    {"appendOccluder", _wrap_OcclusionBuffer_appendOccluder}, 
    {"queryOccluder", _wrap_OcclusionBuffer_queryOccluder}, 
    {0,0}
};
static swig_lua_attribute swig_OcclusionBuffer_attributes[] = {
    { "initialized", _wrap_OcclusionBuffer_initialized_get, _wrap_OcclusionBuffer_initialized_set},
    { "buffer", _wrap_OcclusionBuffer_buffer_get, _wrap_OcclusionBuffer_buffer_set},
    { "sizes", _wrap_OcclusionBuffer_sizes_get, _wrap_OcclusionBuffer_sizes_set},
    { "scales", _wrap_OcclusionBuffer_scales_get, _wrap_OcclusionBuffer_scales_set},
    { "offsets", _wrap_OcclusionBuffer_offsets_get, _wrap_OcclusionBuffer_offsets_set},
    { "wtrs", _wrap_OcclusionBuffer_wtrs_get, _wrap_OcclusionBuffer_wtrs_set},
    { "eye", _wrap_OcclusionBuffer_eye_get, _wrap_OcclusionBuffer_eye_set},
    { "neardist", _wrap_OcclusionBuffer_neardist_get, _wrap_OcclusionBuffer_neardist_set},
    { "ocarea", _wrap_OcclusionBuffer_ocarea_get, _wrap_OcclusionBuffer_ocarea_set},
    { "qrarea", _wrap_OcclusionBuffer_qrarea_get, _wrap_OcclusionBuffer_qrarea_set},
    {0,0,0}
};
static swig_lua_attribute swig_OcclusionBuffer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OcclusionBuffer_cls_methods[] = {
    {"project", _wrap_OcclusionBuffer_project}, 
    {0,0}
};
static swig_lua_const_info swig_OcclusionBuffer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_OcclusionBuffer_bases[] = {0};
static const char *swig_OcclusionBuffer_base_names[] = {0};
static swig_lua_class _wrap_class_OcclusionBuffer = { "OcclusionBuffer", &SWIGTYPE_p_OcclusionBuffer,_wrap_new_OcclusionBuffer, swig_delete_OcclusionBuffer, swig_OcclusionBuffer_methods, swig_OcclusionBuffer_attributes, { "OcclusionBuffer", swig_OcclusionBuffer_cls_methods, swig_OcclusionBuffer_cls_attributes, swig_OcclusionBuffer_cls_constants }, swig_OcclusionBuffer_bases, swig_OcclusionBuffer_base_names };

static int _wrap_new_SceneRenderer(lua_State* L) {
  int SWIG_arg = 0;
  SceneRenderer *result = 0 ;
  
  SWIG_check_num_args("SceneRenderer::SceneRenderer",0,0)
  result = (SceneRenderer *)new SceneRenderer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SceneRenderer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRenderer_Descent(lua_State* L) {
  int SWIG_arg = 0;
  SceneRenderer *arg1 = (SceneRenderer *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("SceneRenderer::Descent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SceneRenderer::Descent",1,"SceneRenderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SceneRenderer::Descent",2,"btDbvtNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SceneRenderer,0))){
    SWIG_fail_ptr("SceneRenderer_Descent",1,SWIGTYPE_p_SceneRenderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDbvtNode,0))){
    SWIG_fail_ptr("SceneRenderer_Descent",2,SWIGTYPE_p_btDbvtNode);
  }
  
  result = (bool)(arg1)->Descent((btDbvtNode const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRenderer_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SceneRenderer *arg1 = (SceneRenderer *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("SceneRenderer::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SceneRenderer::Process",1,"SceneRenderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SceneRenderer::Process",2,"btDbvtNode const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SceneRenderer::Process",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SceneRenderer,0))){
    SWIG_fail_ptr("SceneRenderer_Process",1,SWIGTYPE_p_SceneRenderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDbvtNode,0))){
    SWIG_fail_ptr("SceneRenderer_Process",2,SWIGTYPE_p_btDbvtNode);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->Process((btDbvtNode const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRenderer_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SceneRenderer *arg1 = (SceneRenderer *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  SWIG_check_num_args("SceneRenderer::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SceneRenderer::Process",1,"SceneRenderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SceneRenderer::Process",2,"btDbvtNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SceneRenderer,0))){
    SWIG_fail_ptr("SceneRenderer_Process",1,SWIGTYPE_p_SceneRenderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDbvtNode,0))){
    SWIG_fail_ptr("SceneRenderer_Process",2,SWIGTYPE_p_btDbvtNode);
  }
  
  (arg1)->Process((btDbvtNode const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRenderer_Process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SceneRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btDbvtNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneRenderer_Process__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SceneRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btDbvtNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SceneRenderer_Process__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SceneRenderer_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SceneRenderer::Process(btDbvtNode const *,btScalar)\n"
    "    SceneRenderer::Process(btDbvtNode const *)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneRenderer_getOcclusionBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SceneRenderer *arg1 = (SceneRenderer *) 0 ;
  OcclusionBuffer *result = 0 ;
  
  SWIG_check_num_args("SceneRenderer::getOcclusionBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SceneRenderer::getOcclusionBuffer",1,"SceneRenderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SceneRenderer,0))){
    SWIG_fail_ptr("SceneRenderer_getOcclusionBuffer",1,SWIGTYPE_p_SceneRenderer);
  }
  
  result = (OcclusionBuffer *)(arg1)->getOcclusionBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OcclusionBuffer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRenderer_getOcclusionBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SceneRenderer *arg1 = (SceneRenderer *) 0 ;
  OcclusionBuffer *result = 0 ;
  
  SWIG_check_num_args("SceneRenderer::getOcclusionBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SceneRenderer::getOcclusionBuffer",1,"SceneRenderer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SceneRenderer,0))){
    SWIG_fail_ptr("SceneRenderer_getOcclusionBuffer",1,SWIGTYPE_p_SceneRenderer);
  }
  
  result = (OcclusionBuffer *)((SceneRenderer const *)arg1)->getOcclusionBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OcclusionBuffer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRenderer_getOcclusionBuffer(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SceneRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SceneRenderer_getOcclusionBuffer__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SceneRenderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SceneRenderer_getOcclusionBuffer__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SceneRenderer_getOcclusionBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SceneRenderer::getOcclusionBuffer()\n"
    "    SceneRenderer::getOcclusionBuffer() const\n");
  lua_error(L);return 0;
}


static int _wrap_SceneRenderer_setOcclusionBuffer(lua_State* L) {
  int SWIG_arg = 0;
  SceneRenderer *arg1 = (SceneRenderer *) 0 ;
  OcclusionBuffer *arg2 = (OcclusionBuffer *) 0 ;
  
  SWIG_check_num_args("SceneRenderer::setOcclusionBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SceneRenderer::setOcclusionBuffer",1,"SceneRenderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SceneRenderer::setOcclusionBuffer",2,"OcclusionBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SceneRenderer,0))){
    SWIG_fail_ptr("SceneRenderer_setOcclusionBuffer",1,SWIGTYPE_p_SceneRenderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OcclusionBuffer,0))){
    SWIG_fail_ptr("SceneRenderer_setOcclusionBuffer",2,SWIGTYPE_p_OcclusionBuffer);
  }
  
  (arg1)->setOcclusionBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRenderer_getNumObjectsDrawn(lua_State* L) {
  int SWIG_arg = 0;
  SceneRenderer *arg1 = (SceneRenderer *) 0 ;
  int result;
  
  SWIG_check_num_args("SceneRenderer::getNumObjectsDrawn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SceneRenderer::getNumObjectsDrawn",1,"SceneRenderer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SceneRenderer,0))){
    SWIG_fail_ptr("SceneRenderer_getNumObjectsDrawn",1,SWIGTYPE_p_SceneRenderer);
  }
  
  result = (int)((SceneRenderer const *)arg1)->getNumObjectsDrawn();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRenderer_render(lua_State* L) {
  int SWIG_arg = 0;
  SceneRenderer *arg1 = (SceneRenderer *) 0 ;
  
  SWIG_check_num_args("SceneRenderer::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SceneRenderer::render",1,"SceneRenderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SceneRenderer,0))){
    SWIG_fail_ptr("SceneRenderer_render",1,SWIGTYPE_p_SceneRenderer);
  }
  
  (arg1)->render();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SceneRenderer(void *obj) {
SceneRenderer *arg1 = (SceneRenderer *) obj;
delete arg1;
}
static swig_lua_method swig_SceneRenderer_methods[] = {
    {"Descent", _wrap_SceneRenderer_Descent}, 
    {"Process", _wrap_SceneRenderer_Process}, 
    {"getOcclusionBuffer", _wrap_SceneRenderer_getOcclusionBuffer}, 
    {"setOcclusionBuffer", _wrap_SceneRenderer_setOcclusionBuffer}, 
    {"getNumObjectsDrawn", _wrap_SceneRenderer_getNumObjectsDrawn}, 
    {"render", _wrap_SceneRenderer_render}, 
    {0,0}
};
static swig_lua_attribute swig_SceneRenderer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_SceneRenderer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SceneRenderer_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_SceneRenderer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_SceneRenderer_bases[] = {0};
static const char *swig_SceneRenderer_base_names[] = {0};
static swig_lua_class _wrap_class_SceneRenderer = { "SceneRenderer", &SWIGTYPE_p_SceneRenderer,_wrap_new_SceneRenderer, swig_delete_SceneRenderer, swig_SceneRenderer_methods, swig_SceneRenderer_attributes, { "SceneRenderer", swig_SceneRenderer_cls_methods, swig_SceneRenderer_cls_attributes, swig_SceneRenderer_cls_constants }, swig_SceneRenderer_bases, swig_SceneRenderer_base_names };

static int _wrap_btGjkEpaSolver2_StackSizeRequirement(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("btGjkEpaSolver2::StackSizeRequirement",0,0)
  result = (int)btGjkEpaSolver2::StackSizeRequirement();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkEpaSolver2_Distance(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btConvexShape *arg3 = (btConvexShape *) 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btGjkEpaSolver2::sResults *arg6 = 0 ;
  bool result;
  
  SWIG_check_num_args("btGjkEpaSolver2::Distance",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkEpaSolver2::Distance",1,"btConvexShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGjkEpaSolver2::Distance",2,"btTransform const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btGjkEpaSolver2::Distance",3,"btConvexShape const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btGjkEpaSolver2::Distance",4,"btTransform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btGjkEpaSolver2::Distance",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btGjkEpaSolver2::Distance",6,"btGjkEpaSolver2::sResults &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Distance",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Distance",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Distance",3,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Distance",4,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Distance",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btGjkEpaSolver2__sResults,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Distance",6,SWIGTYPE_p_btGjkEpaSolver2__sResults);
  }
  
  result = (bool)btGjkEpaSolver2::Distance((btConvexShape const *)arg1,(btTransform const &)*arg2,(btConvexShape const *)arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,*arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkEpaSolver2_Penetration__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btConvexShape *arg3 = (btConvexShape *) 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btGjkEpaSolver2::sResults *arg6 = 0 ;
  bool arg7 ;
  bool result;
  
  SWIG_check_num_args("btGjkEpaSolver2::Penetration",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkEpaSolver2::Penetration",1,"btConvexShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGjkEpaSolver2::Penetration",2,"btTransform const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btGjkEpaSolver2::Penetration",3,"btConvexShape const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btGjkEpaSolver2::Penetration",4,"btTransform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btGjkEpaSolver2::Penetration",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btGjkEpaSolver2::Penetration",6,"btGjkEpaSolver2::sResults &");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("btGjkEpaSolver2::Penetration",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Penetration",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Penetration",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Penetration",3,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Penetration",4,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Penetration",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btGjkEpaSolver2__sResults,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Penetration",6,SWIGTYPE_p_btGjkEpaSolver2__sResults);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (bool)btGjkEpaSolver2::Penetration((btConvexShape const *)arg1,(btTransform const &)*arg2,(btConvexShape const *)arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,*arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkEpaSolver2_Penetration__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btConvexShape *arg3 = (btConvexShape *) 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btGjkEpaSolver2::sResults *arg6 = 0 ;
  bool result;
  
  SWIG_check_num_args("btGjkEpaSolver2::Penetration",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkEpaSolver2::Penetration",1,"btConvexShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGjkEpaSolver2::Penetration",2,"btTransform const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btGjkEpaSolver2::Penetration",3,"btConvexShape const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btGjkEpaSolver2::Penetration",4,"btTransform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btGjkEpaSolver2::Penetration",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btGjkEpaSolver2::Penetration",6,"btGjkEpaSolver2::sResults &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Penetration",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Penetration",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Penetration",3,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Penetration",4,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Penetration",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btGjkEpaSolver2__sResults,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_Penetration",6,SWIGTYPE_p_btGjkEpaSolver2__sResults);
  }
  
  result = (bool)btGjkEpaSolver2::Penetration((btConvexShape const *)arg1,(btTransform const &)*arg2,(btConvexShape const *)arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,*arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkEpaSolver2_Penetration(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btConvexShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btConvexShape, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_btGjkEpaSolver2__sResults, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_btGjkEpaSolver2_Penetration__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btConvexShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btConvexShape, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_btGjkEpaSolver2__sResults, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_btGjkEpaSolver2_Penetration__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btGjkEpaSolver2_Penetration'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btGjkEpaSolver2::Penetration(btConvexShape const *,btTransform const &,btConvexShape const *,btTransform const &,btVector3 const &,btGjkEpaSolver2::sResults &,bool)\n"
    "    btGjkEpaSolver2::Penetration(btConvexShape const *,btTransform const &,btConvexShape const *,btTransform const &,btVector3 const &,btGjkEpaSolver2::sResults &)\n");
  lua_error(L);return 0;
}


static int _wrap_btGjkEpaSolver2_SignedDistance__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btScalar arg2 ;
  btConvexShape *arg3 = (btConvexShape *) 0 ;
  btTransform *arg4 = 0 ;
  btGjkEpaSolver2::sResults *arg5 = 0 ;
  btScalar result;
  
  SWIG_check_num_args("btGjkEpaSolver2::SignedDistance",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btGjkEpaSolver2::SignedDistance",1,"btVector3 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGjkEpaSolver2::SignedDistance",2,"btScalar");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btGjkEpaSolver2::SignedDistance",3,"btConvexShape const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btGjkEpaSolver2::SignedDistance",4,"btTransform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btGjkEpaSolver2::SignedDistance",5,"btGjkEpaSolver2::sResults &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_SignedDistance",1,SWIGTYPE_p_btVector3);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_SignedDistance",3,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_SignedDistance",4,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btGjkEpaSolver2__sResults,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_SignedDistance",5,SWIGTYPE_p_btGjkEpaSolver2__sResults);
  }
  
  result = (btScalar)btGjkEpaSolver2::SignedDistance((btVector3 const &)*arg1,arg2,(btConvexShape const *)arg3,(btTransform const &)*arg4,*arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkEpaSolver2_SignedDistance__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btConvexShape *arg3 = (btConvexShape *) 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btGjkEpaSolver2::sResults *arg6 = 0 ;
  bool result;
  
  SWIG_check_num_args("btGjkEpaSolver2::SignedDistance",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGjkEpaSolver2::SignedDistance",1,"btConvexShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGjkEpaSolver2::SignedDistance",2,"btTransform const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btGjkEpaSolver2::SignedDistance",3,"btConvexShape const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btGjkEpaSolver2::SignedDistance",4,"btTransform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btGjkEpaSolver2::SignedDistance",5,"btVector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btGjkEpaSolver2::SignedDistance",6,"btGjkEpaSolver2::sResults &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_SignedDistance",1,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_SignedDistance",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_SignedDistance",3,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_SignedDistance",4,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_SignedDistance",5,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btGjkEpaSolver2__sResults,0))){
    SWIG_fail_ptr("btGjkEpaSolver2_SignedDistance",6,SWIGTYPE_p_btGjkEpaSolver2__sResults);
  }
  
  result = (bool)btGjkEpaSolver2::SignedDistance((btConvexShape const *)arg1,(btTransform const &)*arg2,(btConvexShape const *)arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,*arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGjkEpaSolver2_SignedDistance(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btConvexShape, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btGjkEpaSolver2__sResults, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_btGjkEpaSolver2_SignedDistance__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btConvexShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btConvexShape, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_btGjkEpaSolver2__sResults, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_btGjkEpaSolver2_SignedDistance__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btGjkEpaSolver2_SignedDistance'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btGjkEpaSolver2::SignedDistance(btVector3 const &,btScalar,btConvexShape const *,btTransform const &,btGjkEpaSolver2::sResults &)\n"
    "    btGjkEpaSolver2::SignedDistance(btConvexShape const *,btTransform const &,btConvexShape const *,btTransform const &,btVector3 const &,btGjkEpaSolver2::sResults &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_btGjkEpaSolver2(lua_State* L) {
  int SWIG_arg = 0;
  btGjkEpaSolver2 *result = 0 ;
  
  SWIG_check_num_args("btGjkEpaSolver2::btGjkEpaSolver2",0,0)
  result = (btGjkEpaSolver2 *)new btGjkEpaSolver2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGjkEpaSolver2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btGjkEpaSolver2(void *obj) {
btGjkEpaSolver2 *arg1 = (btGjkEpaSolver2 *) obj;
delete arg1;
}
static swig_lua_method swig_btGjkEpaSolver2_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btGjkEpaSolver2_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btGjkEpaSolver2_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btGjkEpaSolver2_cls_methods[] = {
    {"StackSizeRequirement", _wrap_btGjkEpaSolver2_StackSizeRequirement}, 
    {"Distance", _wrap_btGjkEpaSolver2_Distance}, 
    {"Penetration", _wrap_btGjkEpaSolver2_Penetration}, 
    {"SignedDistance", _wrap_btGjkEpaSolver2_SignedDistance}, 
    {0,0}
};
static swig_lua_const_info swig_btGjkEpaSolver2_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btGjkEpaSolver2_bases[] = {0};
static const char *swig_btGjkEpaSolver2_base_names[] = {0};
static swig_lua_class _wrap_class_btGjkEpaSolver2 = { "btGjkEpaSolver2", &SWIGTYPE_p_btGjkEpaSolver2,_wrap_new_btGjkEpaSolver2, swig_delete_btGjkEpaSolver2, swig_btGjkEpaSolver2_methods, swig_btGjkEpaSolver2_attributes, { "btGjkEpaSolver2", swig_btGjkEpaSolver2_cls_methods, swig_btGjkEpaSolver2_cls_attributes, swig_btGjkEpaSolver2_cls_constants }, swig_btGjkEpaSolver2_bases, swig_btGjkEpaSolver2_base_names };

static int _wrap_btSoftBodyWorldInfo_air_density_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSoftBodyWorldInfo::air_density",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBodyWorldInfo::air_density",1,"btSoftBodyWorldInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBodyWorldInfo::air_density",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_air_density_set",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->air_density = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBodyWorldInfo_air_density_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSoftBodyWorldInfo::air_density",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBodyWorldInfo::air_density",1,"btSoftBodyWorldInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_air_density_get",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  result = (btScalar) ((arg1)->air_density);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBodyWorldInfo_water_density_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSoftBodyWorldInfo::water_density",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBodyWorldInfo::water_density",1,"btSoftBodyWorldInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBodyWorldInfo::water_density",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_water_density_set",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->water_density = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBodyWorldInfo_water_density_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSoftBodyWorldInfo::water_density",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBodyWorldInfo::water_density",1,"btSoftBodyWorldInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_water_density_get",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  result = (btScalar) ((arg1)->water_density);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBodyWorldInfo_water_offset_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSoftBodyWorldInfo::water_offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBodyWorldInfo::water_offset",1,"btSoftBodyWorldInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBodyWorldInfo::water_offset",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_water_offset_set",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->water_offset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBodyWorldInfo_water_offset_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSoftBodyWorldInfo::water_offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBodyWorldInfo::water_offset",1,"btSoftBodyWorldInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_water_offset_get",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  result = (btScalar) ((arg1)->water_offset);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBodyWorldInfo_water_normal_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSoftBodyWorldInfo::water_normal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBodyWorldInfo::water_normal",1,"btSoftBodyWorldInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBodyWorldInfo::water_normal",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_water_normal_set",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_water_normal_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->water_normal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBodyWorldInfo_water_normal_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSoftBodyWorldInfo::water_normal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBodyWorldInfo::water_normal",1,"btSoftBodyWorldInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_water_normal_get",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  result = (btVector3 *)& ((arg1)->water_normal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBodyWorldInfo_m_broadphase_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  
  SWIG_check_num_args("btSoftBodyWorldInfo::m_broadphase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBodyWorldInfo::m_broadphase",1,"btSoftBodyWorldInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBodyWorldInfo::m_broadphase",2,"btBroadphaseInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_m_broadphase_set",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseInterface,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_m_broadphase_set",2,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  if (arg1) (arg1)->m_broadphase = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBodyWorldInfo_m_broadphase_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btBroadphaseInterface *result = 0 ;
  
  SWIG_check_num_args("btSoftBodyWorldInfo::m_broadphase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBodyWorldInfo::m_broadphase",1,"btSoftBodyWorldInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_m_broadphase_get",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  result = (btBroadphaseInterface *) ((arg1)->m_broadphase);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphaseInterface,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBodyWorldInfo_m_dispatcher_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btSoftBodyWorldInfo::m_dispatcher",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBodyWorldInfo::m_dispatcher",1,"btSoftBodyWorldInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBodyWorldInfo::m_dispatcher",2,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_m_dispatcher_set",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDispatcher,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_m_dispatcher_set",2,SWIGTYPE_p_btDispatcher);
  }
  
  if (arg1) (arg1)->m_dispatcher = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBodyWorldInfo_m_dispatcher_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btDispatcher *result = 0 ;
  
  SWIG_check_num_args("btSoftBodyWorldInfo::m_dispatcher",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBodyWorldInfo::m_dispatcher",1,"btSoftBodyWorldInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_m_dispatcher_get",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  result = (btDispatcher *) ((arg1)->m_dispatcher);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDispatcher,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBodyWorldInfo_m_gravity_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSoftBodyWorldInfo::m_gravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBodyWorldInfo::m_gravity",1,"btSoftBodyWorldInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBodyWorldInfo::m_gravity",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_m_gravity_set",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_m_gravity_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_gravity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBodyWorldInfo_m_gravity_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSoftBodyWorldInfo::m_gravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBodyWorldInfo::m_gravity",1,"btSoftBodyWorldInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_m_gravity_get",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  result = (btVector3 *)& ((arg1)->m_gravity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBodyWorldInfo_m_sparsesdf_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btSparseSdf< 3 > *arg2 = (btSparseSdf< 3 > *) 0 ;
  
  SWIG_check_num_args("btSoftBodyWorldInfo::m_sparsesdf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBodyWorldInfo::m_sparsesdf",1,"btSoftBodyWorldInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBodyWorldInfo::m_sparsesdf",2,"btSparseSdf< 3 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_m_sparsesdf_set",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSparseSdfT_3_t,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_m_sparsesdf_set",2,SWIGTYPE_p_btSparseSdfT_3_t);
  }
  
  if (arg1) (arg1)->m_sparsesdf = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBodyWorldInfo_m_sparsesdf_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btSparseSdf< 3 > *result = 0 ;
  
  SWIG_check_num_args("btSoftBodyWorldInfo::m_sparsesdf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBodyWorldInfo::m_sparsesdf",1,"btSoftBodyWorldInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("btSoftBodyWorldInfo_m_sparsesdf_get",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  result = (btSparseSdf< 3 > *)& ((arg1)->m_sparsesdf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSparseSdfT_3_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btSoftBodyWorldInfo(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *result = 0 ;
  
  SWIG_check_num_args("btSoftBodyWorldInfo::btSoftBodyWorldInfo",0,0)
  result = (btSoftBodyWorldInfo *)new btSoftBodyWorldInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBodyWorldInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSoftBodyWorldInfo(void *obj) {
btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) obj;
delete arg1;
}
static swig_lua_method swig_btSoftBodyWorldInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btSoftBodyWorldInfo_attributes[] = {
    { "air_density", _wrap_btSoftBodyWorldInfo_air_density_get, _wrap_btSoftBodyWorldInfo_air_density_set},
    { "water_density", _wrap_btSoftBodyWorldInfo_water_density_get, _wrap_btSoftBodyWorldInfo_water_density_set},
    { "water_offset", _wrap_btSoftBodyWorldInfo_water_offset_get, _wrap_btSoftBodyWorldInfo_water_offset_set},
    { "water_normal", _wrap_btSoftBodyWorldInfo_water_normal_get, _wrap_btSoftBodyWorldInfo_water_normal_set},
    { "m_broadphase", _wrap_btSoftBodyWorldInfo_m_broadphase_get, _wrap_btSoftBodyWorldInfo_m_broadphase_set},
    { "m_dispatcher", _wrap_btSoftBodyWorldInfo_m_dispatcher_get, _wrap_btSoftBodyWorldInfo_m_dispatcher_set},
    { "m_gravity", _wrap_btSoftBodyWorldInfo_m_gravity_get, _wrap_btSoftBodyWorldInfo_m_gravity_set},
    { "m_sparsesdf", _wrap_btSoftBodyWorldInfo_m_sparsesdf_get, _wrap_btSoftBodyWorldInfo_m_sparsesdf_set},
    {0,0,0}
};
static swig_lua_attribute swig_btSoftBodyWorldInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSoftBodyWorldInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btSoftBodyWorldInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSoftBodyWorldInfo_bases[] = {0};
static const char *swig_btSoftBodyWorldInfo_base_names[] = {0};
static swig_lua_class _wrap_class_btSoftBodyWorldInfo = { "btSoftBodyWorldInfo", &SWIGTYPE_p_btSoftBodyWorldInfo,_wrap_new_btSoftBodyWorldInfo, swig_delete_btSoftBodyWorldInfo, swig_btSoftBodyWorldInfo_methods, swig_btSoftBodyWorldInfo_attributes, { "btSoftBodyWorldInfo", swig_btSoftBodyWorldInfo_cls_methods, swig_btSoftBodyWorldInfo_cls_attributes, swig_btSoftBodyWorldInfo_cls_constants }, swig_btSoftBodyWorldInfo_bases, swig_btSoftBodyWorldInfo_base_names };

static int _wrap_btSoftBody_m_collisionDisabledObjects_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btAlignedObjectArray< btCollisionObject const * > *arg2 = (btAlignedObjectArray< btCollisionObject const * > *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_collisionDisabledObjects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_collisionDisabledObjects",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_collisionDisabledObjects",2,"btAlignedObjectArray< btCollisionObject const * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_collisionDisabledObjects_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_const_p_t,0))){
    SWIG_fail_ptr("btSoftBody_m_collisionDisabledObjects_set",2,SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_const_p_t);
  }
  
  if (arg1) (arg1)->m_collisionDisabledObjects = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_collisionDisabledObjects_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btAlignedObjectArray< btCollisionObject const * > *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_collisionDisabledObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_collisionDisabledObjects",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_collisionDisabledObjects_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btAlignedObjectArray< btCollisionObject const * > *)& ((arg1)->m_collisionDisabledObjects);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_const_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_softBodySolver_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBodySolver *arg2 = (btSoftBodySolver *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_softBodySolver",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_softBodySolver",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_softBodySolver",2,"btSoftBodySolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_softBodySolver_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBodySolver,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btSoftBody_m_softBodySolver_set",2,SWIGTYPE_p_btSoftBodySolver);
  }
  
  if (arg1) (arg1)->m_softBodySolver = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_softBodySolver_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBodySolver *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_softBodySolver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_softBodySolver",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_softBodySolver_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBodySolver *) ((arg1)->m_softBodySolver);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBodySolver,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_cfg_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::Config *arg2 = (btSoftBody::Config *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_cfg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_cfg",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_cfg",2,"btSoftBody::Config *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_cfg_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__Config,0))){
    SWIG_fail_ptr("btSoftBody_m_cfg_set",2,SWIGTYPE_p_btSoftBody__Config);
  }
  
  if (arg1) (arg1)->m_cfg = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_cfg_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::Config *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_cfg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_cfg",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_cfg_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBody::Config *)& ((arg1)->m_cfg);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBody__Config,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_sst_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::SolverState *arg2 = (btSoftBody::SolverState *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_sst",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_sst",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_sst",2,"btSoftBody::SolverState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_sst_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__SolverState,0))){
    SWIG_fail_ptr("btSoftBody_m_sst_set",2,SWIGTYPE_p_btSoftBody__SolverState);
  }
  
  if (arg1) (arg1)->m_sst = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_sst_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::SolverState *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_sst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_sst",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_sst_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBody::SolverState *)& ((arg1)->m_sst);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBody__SolverState,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_pose_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::Pose *arg2 = (btSoftBody::Pose *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_pose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_pose",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_pose",2,"btSoftBody::Pose *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_pose_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__Pose,0))){
    SWIG_fail_ptr("btSoftBody_m_pose_set",2,SWIGTYPE_p_btSoftBody__Pose);
  }
  
  if (arg1) (arg1)->m_pose = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_pose_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::Pose *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_pose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_pose",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_pose_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBody::Pose *)& ((arg1)->m_pose);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBody__Pose,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_tag_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_tag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_tag",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_tag",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_tag_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btSoftBody_m_tag_set");
  if (arg1) (arg1)->m_tag = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_tag_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_tag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_tag",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_tag_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (void *) ((arg1)->m_tag);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_worldInfo_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBodyWorldInfo *arg2 = (btSoftBodyWorldInfo *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_worldInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_worldInfo",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_worldInfo",2,"btSoftBodyWorldInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_worldInfo_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBodyWorldInfo,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btSoftBody_m_worldInfo_set",2,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  if (arg1) (arg1)->m_worldInfo = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_worldInfo_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBodyWorldInfo *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_worldInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_worldInfo",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_worldInfo_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBodyWorldInfo *) ((arg1)->m_worldInfo);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBodyWorldInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_notes_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tNoteArray *arg2 = (btSoftBody::tNoteArray *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_notes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_notes",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_notes",2,"btSoftBody::tNoteArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_notes_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Note_t,0))){
    SWIG_fail_ptr("btSoftBody_m_notes_set",2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Note_t);
  }
  
  if (arg1) (arg1)->m_notes = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_notes_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tNoteArray *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_notes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_notes",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_notes_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBody::tNoteArray *)& ((arg1)->m_notes);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Note_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_nodes_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tNodeArray *arg2 = (btSoftBody::tNodeArray *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_nodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_nodes",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_nodes",2,"btSoftBody::tNodeArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_nodes_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Node_t,0))){
    SWIG_fail_ptr("btSoftBody_m_nodes_set",2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Node_t);
  }
  
  if (arg1) (arg1)->m_nodes = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_nodes_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tNodeArray *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_nodes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_nodes",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_nodes_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBody::tNodeArray *)& ((arg1)->m_nodes);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Node_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_links_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tLinkArray *arg2 = (btSoftBody::tLinkArray *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_links",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_links",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_links",2,"btSoftBody::tLinkArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_links_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Link_t,0))){
    SWIG_fail_ptr("btSoftBody_m_links_set",2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Link_t);
  }
  
  if (arg1) (arg1)->m_links = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_links_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tLinkArray *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_links",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_links",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_links_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBody::tLinkArray *)& ((arg1)->m_links);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Link_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_faces_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tFaceArray *arg2 = (btSoftBody::tFaceArray *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_faces",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_faces",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_faces",2,"btSoftBody::tFaceArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_faces_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Face_t,0))){
    SWIG_fail_ptr("btSoftBody_m_faces_set",2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Face_t);
  }
  
  if (arg1) (arg1)->m_faces = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_faces_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tFaceArray *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_faces",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_faces",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_faces_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBody::tFaceArray *)& ((arg1)->m_faces);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Face_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_tetras_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tTetraArray *arg2 = (btSoftBody::tTetraArray *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_tetras",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_tetras",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_tetras",2,"btSoftBody::tTetraArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_tetras_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Tetra_t,0))){
    SWIG_fail_ptr("btSoftBody_m_tetras_set",2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Tetra_t);
  }
  
  if (arg1) (arg1)->m_tetras = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_tetras_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tTetraArray *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_tetras",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_tetras",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_tetras_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBody::tTetraArray *)& ((arg1)->m_tetras);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Tetra_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_anchors_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tAnchorArray *arg2 = (btSoftBody::tAnchorArray *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_anchors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_anchors",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_anchors",2,"btSoftBody::tAnchorArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_anchors_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Anchor_t,0))){
    SWIG_fail_ptr("btSoftBody_m_anchors_set",2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Anchor_t);
  }
  
  if (arg1) (arg1)->m_anchors = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_anchors_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tAnchorArray *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_anchors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_anchors",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_anchors_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBody::tAnchorArray *)& ((arg1)->m_anchors);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Anchor_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_rcontacts_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tRContactArray *arg2 = (btSoftBody::tRContactArray *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_rcontacts",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_rcontacts",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_rcontacts",2,"btSoftBody::tRContactArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_rcontacts_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__RContact_t,0))){
    SWIG_fail_ptr("btSoftBody_m_rcontacts_set",2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__RContact_t);
  }
  
  if (arg1) (arg1)->m_rcontacts = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_rcontacts_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tRContactArray *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_rcontacts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_rcontacts",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_rcontacts_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBody::tRContactArray *)& ((arg1)->m_rcontacts);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__RContact_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_scontacts_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tSContactArray *arg2 = (btSoftBody::tSContactArray *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_scontacts",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_scontacts",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_scontacts",2,"btSoftBody::tSContactArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_scontacts_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__SContact_t,0))){
    SWIG_fail_ptr("btSoftBody_m_scontacts_set",2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__SContact_t);
  }
  
  if (arg1) (arg1)->m_scontacts = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_scontacts_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tSContactArray *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_scontacts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_scontacts",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_scontacts_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBody::tSContactArray *)& ((arg1)->m_scontacts);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__SContact_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_joints_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tJointArray *arg2 = (btSoftBody::tJointArray *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_joints",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_joints",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_joints",2,"btSoftBody::tJointArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_joints_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Joint_p_t,0))){
    SWIG_fail_ptr("btSoftBody_m_joints_set",2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Joint_p_t);
  }
  
  if (arg1) (arg1)->m_joints = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_joints_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tJointArray *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_joints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_joints",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_joints_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBody::tJointArray *)& ((arg1)->m_joints);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Joint_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_materials_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tMaterialArray *arg2 = (btSoftBody::tMaterialArray *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_materials",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_materials",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_materials",2,"btSoftBody::tMaterialArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_materials_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Material_p_t,0))){
    SWIG_fail_ptr("btSoftBody_m_materials_set",2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Material_p_t);
  }
  
  if (arg1) (arg1)->m_materials = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_materials_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tMaterialArray *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_materials",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_materials",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_materials_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBody::tMaterialArray *)& ((arg1)->m_materials);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Material_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_timeacc_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSoftBody::m_timeacc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_timeacc",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::m_timeacc",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_timeacc_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_timeacc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_timeacc_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSoftBody::m_timeacc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_timeacc",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_timeacc_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btScalar) ((arg1)->m_timeacc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_bounds_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 ;
  
  SWIG_check_num_args("btSoftBody::m_bounds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_bounds",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_bounds",2,"btVector3 [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_bounds_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_m_bounds_set",2,SWIGTYPE_p_btVector3);
  }
  
  {
    size_t ii;
    btVector3 *b = (btVector3 *) arg1->m_bounds;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btVector3 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_bounds_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_bounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_bounds",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_bounds_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btVector3 *)(btVector3 *) ((arg1)->m_bounds);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_bUpdateRtCst_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btSoftBody::m_bUpdateRtCst",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_bUpdateRtCst",1,"btSoftBody *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btSoftBody::m_bUpdateRtCst",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_bUpdateRtCst_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->m_bUpdateRtCst = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_bUpdateRtCst_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  bool result;
  
  SWIG_check_num_args("btSoftBody::m_bUpdateRtCst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_bUpdateRtCst",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_bUpdateRtCst_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (bool) ((arg1)->m_bUpdateRtCst);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_ndbvt_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btDbvt *arg2 = (btDbvt *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_ndbvt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_ndbvt",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_ndbvt",2,"btDbvt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_ndbvt_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDbvt,0))){
    SWIG_fail_ptr("btSoftBody_m_ndbvt_set",2,SWIGTYPE_p_btDbvt);
  }
  
  if (arg1) (arg1)->m_ndbvt = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_ndbvt_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btDbvt *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_ndbvt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_ndbvt",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_ndbvt_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btDbvt *)& ((arg1)->m_ndbvt);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDbvt,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_fdbvt_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btDbvt *arg2 = (btDbvt *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_fdbvt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_fdbvt",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_fdbvt",2,"btDbvt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_fdbvt_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDbvt,0))){
    SWIG_fail_ptr("btSoftBody_m_fdbvt_set",2,SWIGTYPE_p_btDbvt);
  }
  
  if (arg1) (arg1)->m_fdbvt = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_fdbvt_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btDbvt *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_fdbvt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_fdbvt",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_fdbvt_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btDbvt *)& ((arg1)->m_fdbvt);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDbvt,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_cdbvt_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btDbvt *arg2 = (btDbvt *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_cdbvt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_cdbvt",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_cdbvt",2,"btDbvt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_cdbvt_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btDbvt,0))){
    SWIG_fail_ptr("btSoftBody_m_cdbvt_set",2,SWIGTYPE_p_btDbvt);
  }
  
  if (arg1) (arg1)->m_cdbvt = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_cdbvt_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btDbvt *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_cdbvt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_cdbvt",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_cdbvt_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btDbvt *)& ((arg1)->m_cdbvt);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btDbvt,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_clusters_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tClusterArray *arg2 = (btSoftBody::tClusterArray *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_clusters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_clusters",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_clusters",2,"btSoftBody::tClusterArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_clusters_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t,0))){
    SWIG_fail_ptr("btSoftBody_m_clusters_set",2,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t);
  }
  
  if (arg1) (arg1)->m_clusters = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_clusters_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tClusterArray *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_clusters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_clusters",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_clusters_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBody::tClusterArray *)& ((arg1)->m_clusters);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_clusterConnectivity_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btAlignedObjectArray< bool > *arg2 = (btAlignedObjectArray< bool > *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_clusterConnectivity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_clusterConnectivity",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_clusterConnectivity",2,"btAlignedObjectArray< bool > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_clusterConnectivity_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_bool_t,0))){
    SWIG_fail_ptr("btSoftBody_m_clusterConnectivity_set",2,SWIGTYPE_p_btAlignedObjectArrayT_bool_t);
  }
  
  if (arg1) (arg1)->m_clusterConnectivity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_clusterConnectivity_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btAlignedObjectArray< bool > *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_clusterConnectivity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_clusterConnectivity",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_clusterConnectivity_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btAlignedObjectArray< bool > *)& ((arg1)->m_clusterConnectivity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_bool_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_initialWorldTransform_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_initialWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_initialWorldTransform",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_initialWorldTransform",2,"btTransform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_initialWorldTransform_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btSoftBody_m_initialWorldTransform_set",2,SWIGTYPE_p_btTransform);
  }
  
  if (arg1) (arg1)->m_initialWorldTransform = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_initialWorldTransform_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_initialWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_initialWorldTransform",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_initialWorldTransform_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btTransform *)& ((arg1)->m_initialWorldTransform);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_windVelocity_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_windVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_windVelocity",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_windVelocity",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_windVelocity_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_m_windVelocity_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_windVelocity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_windVelocity_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_windVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_windVelocity",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_windVelocity_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btVector3 *)& ((arg1)->m_windVelocity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_restLengthScale_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSoftBody::m_restLengthScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_restLengthScale",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::m_restLengthScale",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_restLengthScale_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_restLengthScale = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_restLengthScale_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSoftBody::m_restLengthScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_restLengthScale",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_restLengthScale_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btScalar) ((arg1)->m_restLengthScale);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btSoftBody__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  int arg2 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  btScalar *arg4 = (btScalar *) 0 ;
  btSoftBody *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::btSoftBody",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::btSoftBody",1,"btSoftBodyWorldInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::btSoftBody",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::btSoftBody",3,"btVector3 const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btSoftBody::btSoftBody",4,"btScalar const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("new_btSoftBody",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_btSoftBody",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_btSoftBody",4,SWIGTYPE_p_float);
  }
  
  result = (btSoftBody *)new btSoftBody(arg1,arg2,(btVector3 const *)arg3,(btScalar const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btSoftBody__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btSoftBody *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::btSoftBody",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::btSoftBody",1,"btSoftBodyWorldInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyWorldInfo,0))){
    SWIG_fail_ptr("new_btSoftBody",1,SWIGTYPE_p_btSoftBodyWorldInfo);
  }
  
  result = (btSoftBody *)new btSoftBody(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBody,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btSoftBody(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBodyWorldInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_btSoftBody__SWIG_1(L);
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBodyWorldInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_btSoftBody__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btSoftBody'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::btSoftBody(btSoftBodyWorldInfo *,int,btVector3 const *,btScalar const *)\n"
    "    btSoftBody::btSoftBody(btSoftBodyWorldInfo *)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_initDefaults(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::initDefaults",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::initDefaults",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_initDefaults",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->initDefaults();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_userIndexMapping_set(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btAlignedObjectArray< int > *arg2 = (btAlignedObjectArray< int > *) 0 ;
  
  SWIG_check_num_args("btSoftBody::m_userIndexMapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_userIndexMapping",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::m_userIndexMapping",2,"btAlignedObjectArray< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_userIndexMapping_set",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_int_t,0))){
    SWIG_fail_ptr("btSoftBody_m_userIndexMapping_set",2,SWIGTYPE_p_btAlignedObjectArrayT_int_t);
  }
  
  if (arg1) (arg1)->m_userIndexMapping = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_m_userIndexMapping_get(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btAlignedObjectArray< int > *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::m_userIndexMapping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::m_userIndexMapping",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_m_userIndexMapping_get",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btAlignedObjectArray< int > *)& ((arg1)->m_userIndexMapping);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_getWorldInfo(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBodyWorldInfo *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::getWorldInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::getWorldInfo",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_getWorldInfo",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBodyWorldInfo *)(arg1)->getWorldInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBodyWorldInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_setCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  SWIG_check_num_args("btSoftBody::setCollisionShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::setCollisionShape",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::setCollisionShape",2,"btCollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_setCollisionShape",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btSoftBody_setCollisionShape",2,SWIGTYPE_p_btCollisionShape);
  }
  
  (arg1)->setCollisionShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_checkLink__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("btSoftBody::checkLink",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::checkLink",1,"btSoftBody const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::checkLink",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::checkLink",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_checkLink",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)((btSoftBody const *)arg1)->checkLink(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_checkLink__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::Node *arg2 = (btSoftBody::Node *) 0 ;
  btSoftBody::Node *arg3 = (btSoftBody::Node *) 0 ;
  bool result;
  
  SWIG_check_num_args("btSoftBody::checkLink",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::checkLink",1,"btSoftBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::checkLink",2,"btSoftBody::Node const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::checkLink",3,"btSoftBody::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_checkLink",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_checkLink",2,SWIGTYPE_p_btSoftBody__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_checkLink",3,SWIGTYPE_p_btSoftBody__Node);
  }
  
  result = (bool)((btSoftBody const *)arg1)->checkLink((btSoftBody::Node const *)arg2,(btSoftBody::Node const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_checkLink(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btSoftBody_checkLink__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btSoftBody_checkLink__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_checkLink'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::checkLink(int,int) const\n"
    "    btSoftBody::checkLink(btSoftBody::Node const *,btSoftBody::Node const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_checkFace(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("btSoftBody::checkFace",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::checkFace",1,"btSoftBody const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::checkFace",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::checkFace",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSoftBody::checkFace",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_checkFace",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)((btSoftBody const *)arg1)->checkFace(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendMaterial(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::Material *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::appendMaterial",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendMaterial",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendMaterial",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBody::Material *)(arg1)->appendMaterial();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBody__Material,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendNote__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector4 *arg4 = 0 ;
  btSoftBody::Node *arg5 = (btSoftBody::Node *) 0 ;
  btSoftBody::Node *arg6 = (btSoftBody::Node *) 0 ;
  btSoftBody::Node *arg7 = (btSoftBody::Node *) 0 ;
  btSoftBody::Node *arg8 = (btSoftBody::Node *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendNote",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendNote",1,"btSoftBody *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btSoftBody::appendNote",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::appendNote",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSoftBody::appendNote",4,"btVector4 const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btSoftBody::appendNote",5,"btSoftBody::Node *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("btSoftBody::appendNote",6,"btSoftBody::Node *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("btSoftBody::appendNote",7,"btSoftBody::Node *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("btSoftBody::appendNote",8,"btSoftBody::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector4,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",4,SWIGTYPE_p_btVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",5,SWIGTYPE_p_btSoftBody__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",6,SWIGTYPE_p_btSoftBody__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",7,SWIGTYPE_p_btSoftBody__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",8,SWIGTYPE_p_btSoftBody__Node);
  }
  
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3,(btVector4 const &)*arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendNote__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector4 *arg4 = 0 ;
  btSoftBody::Node *arg5 = (btSoftBody::Node *) 0 ;
  btSoftBody::Node *arg6 = (btSoftBody::Node *) 0 ;
  btSoftBody::Node *arg7 = (btSoftBody::Node *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendNote",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendNote",1,"btSoftBody *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btSoftBody::appendNote",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::appendNote",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSoftBody::appendNote",4,"btVector4 const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btSoftBody::appendNote",5,"btSoftBody::Node *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("btSoftBody::appendNote",6,"btSoftBody::Node *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("btSoftBody::appendNote",7,"btSoftBody::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector4,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",4,SWIGTYPE_p_btVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",5,SWIGTYPE_p_btSoftBody__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",6,SWIGTYPE_p_btSoftBody__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",7,SWIGTYPE_p_btSoftBody__Node);
  }
  
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3,(btVector4 const &)*arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendNote__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector4 *arg4 = 0 ;
  btSoftBody::Node *arg5 = (btSoftBody::Node *) 0 ;
  btSoftBody::Node *arg6 = (btSoftBody::Node *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendNote",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendNote",1,"btSoftBody *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btSoftBody::appendNote",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::appendNote",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSoftBody::appendNote",4,"btVector4 const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btSoftBody::appendNote",5,"btSoftBody::Node *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("btSoftBody::appendNote",6,"btSoftBody::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector4,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",4,SWIGTYPE_p_btVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",5,SWIGTYPE_p_btSoftBody__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",6,SWIGTYPE_p_btSoftBody__Node);
  }
  
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3,(btVector4 const &)*arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendNote__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector4 *arg4 = 0 ;
  btSoftBody::Node *arg5 = (btSoftBody::Node *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendNote",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendNote",1,"btSoftBody *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btSoftBody::appendNote",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::appendNote",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSoftBody::appendNote",4,"btVector4 const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btSoftBody::appendNote",5,"btSoftBody::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector4,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",4,SWIGTYPE_p_btVector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",5,SWIGTYPE_p_btSoftBody__Node);
  }
  
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3,(btVector4 const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendNote__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector4 *arg4 = 0 ;
  
  SWIG_check_num_args("btSoftBody::appendNote",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendNote",1,"btSoftBody *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btSoftBody::appendNote",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::appendNote",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSoftBody::appendNote",4,"btVector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector4,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",4,SWIGTYPE_p_btVector4);
  }
  
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3,(btVector4 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendNote__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btSoftBody::appendNote",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendNote",1,"btSoftBody *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btSoftBody::appendNote",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::appendNote",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendNote__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  btSoftBody::Node *arg4 = (btSoftBody::Node *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendNote",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendNote",1,"btSoftBody *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btSoftBody::appendNote",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::appendNote",3,"btVector3 const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btSoftBody::appendNote",4,"btSoftBody::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",4,SWIGTYPE_p_btSoftBody__Node);
  }
  
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendNote__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  btSoftBody::Link *arg4 = (btSoftBody::Link *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendNote",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendNote",1,"btSoftBody *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btSoftBody::appendNote",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::appendNote",3,"btVector3 const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btSoftBody::appendNote",4,"btSoftBody::Link *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btSoftBody__Link,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",4,SWIGTYPE_p_btSoftBody__Link);
  }
  
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendNote__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  btSoftBody::Face *arg4 = (btSoftBody::Face *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendNote",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendNote",1,"btSoftBody *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("btSoftBody::appendNote",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::appendNote",3,"btVector3 const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btSoftBody::appendNote",4,"btSoftBody::Face *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btSoftBody__Face,0))){
    SWIG_fail_ptr("btSoftBody_appendNote",4,SWIGTYPE_p_btSoftBody__Face);
  }
  
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendNote(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btSoftBody_appendNote__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector4, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btSoftBody_appendNote__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btSoftBody_appendNote__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btSoftBody__Link, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btSoftBody_appendNote__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btSoftBody__Face, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btSoftBody_appendNote__SWIG_8(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector4, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_btSoftBody_appendNote__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector4, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_btSoftBody_appendNote__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector4, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_btSoftBody_appendNote__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector4, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (SWIG_isptrtype(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_btSoftBody_appendNote__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_appendNote'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::appendNote(char const *,btVector3 const &,btVector4 const &,btSoftBody::Node *,btSoftBody::Node *,btSoftBody::Node *,btSoftBody::Node *)\n"
    "    btSoftBody::appendNote(char const *,btVector3 const &,btVector4 const &,btSoftBody::Node *,btSoftBody::Node *,btSoftBody::Node *)\n"
    "    btSoftBody::appendNote(char const *,btVector3 const &,btVector4 const &,btSoftBody::Node *,btSoftBody::Node *)\n"
    "    btSoftBody::appendNote(char const *,btVector3 const &,btVector4 const &,btSoftBody::Node *)\n"
    "    btSoftBody::appendNote(char const *,btVector3 const &,btVector4 const &)\n"
    "    btSoftBody::appendNote(char const *,btVector3 const &)\n"
    "    btSoftBody::appendNote(char const *,btVector3 const &,btSoftBody::Node *)\n"
    "    btSoftBody::appendNote(char const *,btVector3 const &,btSoftBody::Link *)\n"
    "    btSoftBody::appendNote(char const *,btVector3 const &,btSoftBody::Face *)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_appendNode(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btSoftBody::appendNode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendNode",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::appendNode",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::appendNode",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendNode",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_appendNode",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->appendNode((btVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendLink__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btSoftBody::Material *arg3 = (btSoftBody::Material *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendLink",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendLink",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendLink",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::appendLink",3,"btSoftBody::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSoftBody__Material,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",3,SWIGTYPE_p_btSoftBody__Material);
  }
  
  (arg1)->appendLink(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendLink__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btSoftBody::appendLink",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendLink",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendLink",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->appendLink(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendLink__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendLink",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendLink",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->appendLink();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendLink__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  btSoftBody::Material *arg4 = (btSoftBody::Material *) 0 ;
  bool arg5 ;
  
  SWIG_check_num_args("btSoftBody::appendLink",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendLink",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendLink",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::appendLink",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btSoftBody::appendLink",4,"btSoftBody::Material *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("btSoftBody::appendLink",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btSoftBody__Material,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",4,SWIGTYPE_p_btSoftBody__Material);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->appendLink(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendLink__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  btSoftBody::Material *arg4 = (btSoftBody::Material *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendLink",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendLink",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendLink",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::appendLink",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btSoftBody::appendLink",4,"btSoftBody::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btSoftBody__Material,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",4,SWIGTYPE_p_btSoftBody__Material);
  }
  
  (arg1)->appendLink(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendLink__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("btSoftBody::appendLink",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendLink",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendLink",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::appendLink",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->appendLink(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendLink__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::Node *arg2 = (btSoftBody::Node *) 0 ;
  btSoftBody::Node *arg3 = (btSoftBody::Node *) 0 ;
  btSoftBody::Material *arg4 = (btSoftBody::Material *) 0 ;
  bool arg5 ;
  
  SWIG_check_num_args("btSoftBody::appendLink",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendLink",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::appendLink",2,"btSoftBody::Node *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::appendLink",3,"btSoftBody::Node *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btSoftBody::appendLink",4,"btSoftBody::Material *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("btSoftBody::appendLink",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",2,SWIGTYPE_p_btSoftBody__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",3,SWIGTYPE_p_btSoftBody__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btSoftBody__Material,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",4,SWIGTYPE_p_btSoftBody__Material);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->appendLink(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendLink__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::Node *arg2 = (btSoftBody::Node *) 0 ;
  btSoftBody::Node *arg3 = (btSoftBody::Node *) 0 ;
  btSoftBody::Material *arg4 = (btSoftBody::Material *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendLink",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendLink",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::appendLink",2,"btSoftBody::Node *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::appendLink",3,"btSoftBody::Node *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btSoftBody::appendLink",4,"btSoftBody::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",2,SWIGTYPE_p_btSoftBody__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",3,SWIGTYPE_p_btSoftBody__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btSoftBody__Material,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",4,SWIGTYPE_p_btSoftBody__Material);
  }
  
  (arg1)->appendLink(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendLink__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::Node *arg2 = (btSoftBody::Node *) 0 ;
  btSoftBody::Node *arg3 = (btSoftBody::Node *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendLink",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendLink",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::appendLink",2,"btSoftBody::Node *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::appendLink",3,"btSoftBody::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",2,SWIGTYPE_p_btSoftBody__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_appendLink",3,SWIGTYPE_p_btSoftBody__Node);
  }
  
  (arg1)->appendLink(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendLink(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSoftBody_appendLink__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btSoftBody_appendLink__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btSoftBody_appendLink__SWIG_8(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btSoftBody__Material, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btSoftBody_appendLink__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btSoftBody_appendLink__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btSoftBody__Material, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btSoftBody_appendLink__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btSoftBody__Material, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btSoftBody_appendLink__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btSoftBody__Material, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_btSoftBody_appendLink__SWIG_6(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btSoftBody__Material, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_btSoftBody_appendLink__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_appendLink'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::appendLink(int,btSoftBody::Material *)\n"
    "    btSoftBody::appendLink(int)\n"
    "    btSoftBody::appendLink()\n"
    "    btSoftBody::appendLink(int,int,btSoftBody::Material *,bool)\n"
    "    btSoftBody::appendLink(int,int,btSoftBody::Material *)\n"
    "    btSoftBody::appendLink(int,int)\n"
    "    btSoftBody::appendLink(btSoftBody::Node *,btSoftBody::Node *,btSoftBody::Material *,bool)\n"
    "    btSoftBody::appendLink(btSoftBody::Node *,btSoftBody::Node *,btSoftBody::Material *)\n"
    "    btSoftBody::appendLink(btSoftBody::Node *,btSoftBody::Node *)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_appendFace__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btSoftBody::Material *arg3 = (btSoftBody::Material *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendFace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendFace",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendFace",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::appendFace",3,"btSoftBody::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendFace",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSoftBody__Material,0))){
    SWIG_fail_ptr("btSoftBody_appendFace",3,SWIGTYPE_p_btSoftBody__Material);
  }
  
  (arg1)->appendFace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendFace__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btSoftBody::appendFace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendFace",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendFace",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendFace",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->appendFace(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendFace__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendFace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendFace",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendFace",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->appendFace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendFace__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  btSoftBody::Material *arg5 = (btSoftBody::Material *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendFace",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendFace",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendFace",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::appendFace",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSoftBody::appendFace",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btSoftBody::appendFace",5,"btSoftBody::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendFace",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btSoftBody__Material,0))){
    SWIG_fail_ptr("btSoftBody_appendFace",5,SWIGTYPE_p_btSoftBody__Material);
  }
  
  (arg1)->appendFace(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendFace__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("btSoftBody::appendFace",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendFace",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendFace",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::appendFace",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSoftBody::appendFace",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendFace",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->appendFace(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendFace(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSoftBody_appendFace__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btSoftBody_appendFace__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btSoftBody__Material, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btSoftBody_appendFace__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btSoftBody_appendFace__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btSoftBody__Material, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_btSoftBody_appendFace__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_appendFace'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::appendFace(int,btSoftBody::Material *)\n"
    "    btSoftBody::appendFace(int)\n"
    "    btSoftBody::appendFace()\n"
    "    btSoftBody::appendFace(int,int,int,btSoftBody::Material *)\n"
    "    btSoftBody::appendFace(int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_appendTetra__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btSoftBody::Material *arg3 = (btSoftBody::Material *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendTetra",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendTetra",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendTetra",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::appendTetra",3,"btSoftBody::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendTetra",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSoftBody__Material,0))){
    SWIG_fail_ptr("btSoftBody_appendTetra",3,SWIGTYPE_p_btSoftBody__Material);
  }
  
  (arg1)->appendTetra(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendTetra__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  btSoftBody::Material *arg6 = (btSoftBody::Material *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendTetra",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendTetra",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendTetra",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::appendTetra",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSoftBody::appendTetra",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btSoftBody::appendTetra",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("btSoftBody::appendTetra",6,"btSoftBody::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendTetra",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btSoftBody__Material,0))){
    SWIG_fail_ptr("btSoftBody_appendTetra",6,SWIGTYPE_p_btSoftBody__Material);
  }
  
  (arg1)->appendTetra(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendTetra__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("btSoftBody::appendTetra",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendTetra",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendTetra",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::appendTetra",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSoftBody::appendTetra",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btSoftBody::appendTetra",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendTetra",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->appendTetra(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendTetra(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btSoftBody__Material, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btSoftBody_appendTetra__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_btSoftBody_appendTetra__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_btSoftBody__Material, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_btSoftBody_appendTetra__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_appendTetra'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::appendTetra(int,btSoftBody::Material *)\n"
    "    btSoftBody::appendTetra(int,int,int,int,btSoftBody::Material *)\n"
    "    btSoftBody::appendTetra(int,int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_appendAnchor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btRigidBody *arg3 = (btRigidBody *) 0 ;
  bool arg4 ;
  btScalar arg5 ;
  
  SWIG_check_num_args("btSoftBody::appendAnchor",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendAnchor",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendAnchor",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::appendAnchor",3,"btRigidBody *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("btSoftBody::appendAnchor",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("btSoftBody::appendAnchor",5,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendAnchor",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btSoftBody_appendAnchor",3,SWIGTYPE_p_btRigidBody);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (btScalar)lua_tonumber(L, 5);
  (arg1)->appendAnchor(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendAnchor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btRigidBody *arg3 = (btRigidBody *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("btSoftBody::appendAnchor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendAnchor",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendAnchor",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::appendAnchor",3,"btRigidBody *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("btSoftBody::appendAnchor",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendAnchor",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btSoftBody_appendAnchor",3,SWIGTYPE_p_btRigidBody);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->appendAnchor(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendAnchor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btRigidBody *arg3 = (btRigidBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendAnchor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendAnchor",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendAnchor",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::appendAnchor",3,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendAnchor",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btSoftBody_appendAnchor",3,SWIGTYPE_p_btRigidBody);
  }
  
  (arg1)->appendAnchor(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendAnchor__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btRigidBody *arg3 = (btRigidBody *) 0 ;
  btVector3 *arg4 = 0 ;
  bool arg5 ;
  btScalar arg6 ;
  
  SWIG_check_num_args("btSoftBody::appendAnchor",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendAnchor",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendAnchor",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::appendAnchor",3,"btRigidBody *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSoftBody::appendAnchor",4,"btVector3 const &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("btSoftBody::appendAnchor",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btSoftBody::appendAnchor",6,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendAnchor",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btSoftBody_appendAnchor",3,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_appendAnchor",4,SWIGTYPE_p_btVector3);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (btScalar)lua_tonumber(L, 6);
  (arg1)->appendAnchor(arg2,arg3,(btVector3 const &)*arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendAnchor__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btRigidBody *arg3 = (btRigidBody *) 0 ;
  btVector3 *arg4 = 0 ;
  bool arg5 ;
  
  SWIG_check_num_args("btSoftBody::appendAnchor",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendAnchor",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendAnchor",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::appendAnchor",3,"btRigidBody *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSoftBody::appendAnchor",4,"btVector3 const &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("btSoftBody::appendAnchor",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendAnchor",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btSoftBody_appendAnchor",3,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_appendAnchor",4,SWIGTYPE_p_btVector3);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->appendAnchor(arg2,arg3,(btVector3 const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendAnchor__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btRigidBody *arg3 = (btRigidBody *) 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("btSoftBody::appendAnchor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendAnchor",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::appendAnchor",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::appendAnchor",3,"btRigidBody *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSoftBody::appendAnchor",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendAnchor",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("btSoftBody_appendAnchor",3,SWIGTYPE_p_btRigidBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_appendAnchor",4,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->appendAnchor(arg2,arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendAnchor(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btSoftBody_appendAnchor__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btSoftBody_appendAnchor__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_btSoftBody_appendAnchor__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_btSoftBody_appendAnchor__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_btSoftBody_appendAnchor__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btRigidBody, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_btSoftBody_appendAnchor__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_appendAnchor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::appendAnchor(int,btRigidBody *,bool,btScalar)\n"
    "    btSoftBody::appendAnchor(int,btRigidBody *,bool)\n"
    "    btSoftBody::appendAnchor(int,btRigidBody *)\n"
    "    btSoftBody::appendAnchor(int,btRigidBody *,btVector3 const &,bool,btScalar)\n"
    "    btSoftBody::appendAnchor(int,btRigidBody *,btVector3 const &,bool)\n"
    "    btSoftBody::appendAnchor(int,btRigidBody *,btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_appendLinearJoint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::LJoint::Specs *arg2 = 0 ;
  btSoftBody::Cluster *arg3 = (btSoftBody::Cluster *) 0 ;
  btSoftBody::Body arg4 ;
  btSoftBody::Body *argp4 ;
  
  SWIG_check_num_args("btSoftBody::appendLinearJoint",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendLinearJoint",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::appendLinearJoint",2,"btSoftBody::LJoint::Specs const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::appendLinearJoint",3,"btSoftBody::Cluster *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSoftBody::appendLinearJoint",4,"btSoftBody::Body");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendLinearJoint",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__LJoint__Specs,0))){
    SWIG_fail_ptr("btSoftBody_appendLinearJoint",2,SWIGTYPE_p_btSoftBody__LJoint__Specs);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSoftBody__Cluster,0))){
    SWIG_fail_ptr("btSoftBody_appendLinearJoint",3,SWIGTYPE_p_btSoftBody__Cluster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_btSoftBody__Body,0))){
    SWIG_fail_ptr("btSoftBody_appendLinearJoint",4,SWIGTYPE_p_btSoftBody__Body);
  }
  arg4 = *argp4;
  
  (arg1)->appendLinearJoint((btSoftBody::LJoint::Specs const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendLinearJoint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::LJoint::Specs *arg2 = 0 ;
  btSoftBody::Body arg3 ;
  btSoftBody::Body *argp3 ;
  
  SWIG_check_num_args("btSoftBody::appendLinearJoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendLinearJoint",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::appendLinearJoint",2,"btSoftBody::LJoint::Specs const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::appendLinearJoint",3,"btSoftBody::Body");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendLinearJoint",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__LJoint__Specs,0))){
    SWIG_fail_ptr("btSoftBody_appendLinearJoint",2,SWIGTYPE_p_btSoftBody__LJoint__Specs);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_btSoftBody__Body,0))){
    SWIG_fail_ptr("btSoftBody_appendLinearJoint",3,SWIGTYPE_p_btSoftBody__Body);
  }
  arg3 = *argp3;
  
  (arg1)->appendLinearJoint((btSoftBody::LJoint::Specs const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendLinearJoint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::LJoint::Specs *arg2 = 0 ;
  
  SWIG_check_num_args("btSoftBody::appendLinearJoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendLinearJoint",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::appendLinearJoint",2,"btSoftBody::LJoint::Specs const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendLinearJoint",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__LJoint__Specs,0))){
    SWIG_fail_ptr("btSoftBody_appendLinearJoint",2,SWIGTYPE_p_btSoftBody__LJoint__Specs);
  }
  
  (arg1)->appendLinearJoint((btSoftBody::LJoint::Specs const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendLinearJoint__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::LJoint::Specs *arg2 = 0 ;
  btSoftBody *arg3 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendLinearJoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendLinearJoint",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::appendLinearJoint",2,"btSoftBody::LJoint::Specs const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::appendLinearJoint",3,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendLinearJoint",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__LJoint__Specs,0))){
    SWIG_fail_ptr("btSoftBody_appendLinearJoint",2,SWIGTYPE_p_btSoftBody__LJoint__Specs);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendLinearJoint",3,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->appendLinearJoint((btSoftBody::LJoint::Specs const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendLinearJoint(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSoftBody__LJoint__Specs, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btSoftBody_appendLinearJoint__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSoftBody__LJoint__Specs, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btSoftBody__Body, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btSoftBody_appendLinearJoint__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSoftBody__LJoint__Specs, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btSoftBody_appendLinearJoint__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSoftBody__LJoint__Specs, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btSoftBody__Cluster, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btSoftBody__Body, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btSoftBody_appendLinearJoint__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_appendLinearJoint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::appendLinearJoint(btSoftBody::LJoint::Specs const &,btSoftBody::Cluster *,btSoftBody::Body)\n"
    "    btSoftBody::appendLinearJoint(btSoftBody::LJoint::Specs const &,btSoftBody::Body)\n"
    "    btSoftBody::appendLinearJoint(btSoftBody::LJoint::Specs const &)\n"
    "    btSoftBody::appendLinearJoint(btSoftBody::LJoint::Specs const &,btSoftBody *)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_appendAngularJoint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::AJoint::Specs *arg2 = 0 ;
  btSoftBody::Cluster *arg3 = (btSoftBody::Cluster *) 0 ;
  btSoftBody::Body arg4 ;
  btSoftBody::Body *argp4 ;
  
  SWIG_check_num_args("btSoftBody::appendAngularJoint",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendAngularJoint",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::appendAngularJoint",2,"btSoftBody::AJoint::Specs const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::appendAngularJoint",3,"btSoftBody::Cluster *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSoftBody::appendAngularJoint",4,"btSoftBody::Body");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendAngularJoint",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__AJoint__Specs,0))){
    SWIG_fail_ptr("btSoftBody_appendAngularJoint",2,SWIGTYPE_p_btSoftBody__AJoint__Specs);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSoftBody__Cluster,0))){
    SWIG_fail_ptr("btSoftBody_appendAngularJoint",3,SWIGTYPE_p_btSoftBody__Cluster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_btSoftBody__Body,0))){
    SWIG_fail_ptr("btSoftBody_appendAngularJoint",4,SWIGTYPE_p_btSoftBody__Body);
  }
  arg4 = *argp4;
  
  (arg1)->appendAngularJoint((btSoftBody::AJoint::Specs const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendAngularJoint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::AJoint::Specs *arg2 = 0 ;
  btSoftBody::Body arg3 ;
  btSoftBody::Body *argp3 ;
  
  SWIG_check_num_args("btSoftBody::appendAngularJoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendAngularJoint",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::appendAngularJoint",2,"btSoftBody::AJoint::Specs const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::appendAngularJoint",3,"btSoftBody::Body");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendAngularJoint",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__AJoint__Specs,0))){
    SWIG_fail_ptr("btSoftBody_appendAngularJoint",2,SWIGTYPE_p_btSoftBody__AJoint__Specs);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_btSoftBody__Body,0))){
    SWIG_fail_ptr("btSoftBody_appendAngularJoint",3,SWIGTYPE_p_btSoftBody__Body);
  }
  arg3 = *argp3;
  
  (arg1)->appendAngularJoint((btSoftBody::AJoint::Specs const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendAngularJoint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::AJoint::Specs *arg2 = 0 ;
  
  SWIG_check_num_args("btSoftBody::appendAngularJoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendAngularJoint",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::appendAngularJoint",2,"btSoftBody::AJoint::Specs const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendAngularJoint",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__AJoint__Specs,0))){
    SWIG_fail_ptr("btSoftBody_appendAngularJoint",2,SWIGTYPE_p_btSoftBody__AJoint__Specs);
  }
  
  (arg1)->appendAngularJoint((btSoftBody::AJoint::Specs const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendAngularJoint__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::AJoint::Specs *arg2 = 0 ;
  btSoftBody *arg3 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::appendAngularJoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::appendAngularJoint",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::appendAngularJoint",2,"btSoftBody::AJoint::Specs const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::appendAngularJoint",3,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendAngularJoint",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__AJoint__Specs,0))){
    SWIG_fail_ptr("btSoftBody_appendAngularJoint",2,SWIGTYPE_p_btSoftBody__AJoint__Specs);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_appendAngularJoint",3,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->appendAngularJoint((btSoftBody::AJoint::Specs const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_appendAngularJoint(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSoftBody__AJoint__Specs, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btSoftBody_appendAngularJoint__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSoftBody__AJoint__Specs, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btSoftBody__Body, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btSoftBody_appendAngularJoint__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSoftBody__AJoint__Specs, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btSoftBody_appendAngularJoint__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSoftBody__AJoint__Specs, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btSoftBody__Cluster, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btSoftBody__Body, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btSoftBody_appendAngularJoint__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_appendAngularJoint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::appendAngularJoint(btSoftBody::AJoint::Specs const &,btSoftBody::Cluster *,btSoftBody::Body)\n"
    "    btSoftBody::appendAngularJoint(btSoftBody::AJoint::Specs const &,btSoftBody::Body)\n"
    "    btSoftBody::appendAngularJoint(btSoftBody::AJoint::Specs const &)\n"
    "    btSoftBody::appendAngularJoint(btSoftBody::AJoint::Specs const &,btSoftBody *)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_addForce__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btSoftBody::addForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::addForce",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::addForce",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_addForce",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_addForce",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->addForce((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_addForce__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("btSoftBody::addForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::addForce",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::addForce",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::addForce",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_addForce",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_addForce",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->addForce((btVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_addForce(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btSoftBody_addForce__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btSoftBody_addForce__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_addForce'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::addForce(btVector3 const &)\n"
    "    btSoftBody::addForce(btVector3 const &,int)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_addAeroForceToNode(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("btSoftBody::addAeroForceToNode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::addAeroForceToNode",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::addAeroForceToNode",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::addAeroForceToNode",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_addAeroForceToNode",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_addAeroForceToNode",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->addAeroForceToNode((btVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_addAeroForceToFace(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("btSoftBody::addAeroForceToFace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::addAeroForceToFace",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::addAeroForceToFace",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::addAeroForceToFace",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_addAeroForceToFace",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_addAeroForceToFace",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->addAeroForceToFace((btVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_addVelocity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btSoftBody::addVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::addVelocity",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::addVelocity",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_addVelocity",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_addVelocity",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->addVelocity((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_setVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btSoftBody::setVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::setVelocity",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::setVelocity",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_setVelocity",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_setVelocity",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setVelocity((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_addVelocity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("btSoftBody::addVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::addVelocity",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::addVelocity",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::addVelocity",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_addVelocity",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_addVelocity",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->addVelocity((btVector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_addVelocity(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btSoftBody_addVelocity__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btSoftBody_addVelocity__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_addVelocity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::addVelocity(btVector3 const &)\n"
    "    btSoftBody::addVelocity(btVector3 const &,int)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_setMass(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btSoftBody::setMass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::setMass",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::setMass",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::setMass",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_setMass",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->setMass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_getMass(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btScalar result;
  
  SWIG_check_num_args("btSoftBody::getMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::getMass",1,"btSoftBody const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::getMass",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_getMass",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btScalar)((btSoftBody const *)arg1)->getMass(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_getTotalMass(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSoftBody::getTotalMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::getTotalMass",1,"btSoftBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_getTotalMass",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btScalar)((btSoftBody const *)arg1)->getTotalMass();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_setTotalMass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("btSoftBody::setTotalMass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::setTotalMass",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::setTotalMass",2,"btScalar");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("btSoftBody::setTotalMass",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_setTotalMass",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setTotalMass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_setTotalMass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSoftBody::setTotalMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::setTotalMass",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::setTotalMass",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_setTotalMass",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setTotalMass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_setTotalMass(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btSoftBody_setTotalMass__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_btSoftBody_setTotalMass__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_setTotalMass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::setTotalMass(btScalar,bool)\n"
    "    btSoftBody::setTotalMass(btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_setTotalDensity(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSoftBody::setTotalDensity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::setTotalDensity",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::setTotalDensity",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_setTotalDensity",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setTotalDensity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_setVolumeMass(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSoftBody::setVolumeMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::setVolumeMass",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::setVolumeMass",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_setVolumeMass",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setVolumeMass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_setVolumeDensity(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSoftBody::setVolumeDensity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::setVolumeDensity",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::setVolumeDensity",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_setVolumeDensity",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setVolumeDensity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_transform(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("btSoftBody::transform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::transform",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::transform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_transform",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btSoftBody_transform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->transform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_translate(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btSoftBody::translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::translate",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::translate",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_translate",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_translate",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->translate((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_rotate(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("btSoftBody::rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::rotate",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::rotate",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_rotate",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("btSoftBody_rotate",2,SWIGTYPE_p_btQuaternion);
  }
  
  (arg1)->rotate((btQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_scale(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btSoftBody::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::scale",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::scale",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_scale",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_scale",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->scale((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_getRestLengthScale(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSoftBody::getRestLengthScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::getRestLengthScale",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_getRestLengthScale",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btScalar)(arg1)->getRestLengthScale();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_setRestLengthScale(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSoftBody::setRestLengthScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::setRestLengthScale",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::setRestLengthScale",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_setRestLengthScale",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->setRestLengthScale(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_setPose(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("btSoftBody::setPose",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::setPose",1,"btSoftBody *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btSoftBody::setPose",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("btSoftBody::setPose",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_setPose",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setPose(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_resetLinkRestLengths(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::resetLinkRestLengths",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::resetLinkRestLengths",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_resetLinkRestLengths",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->resetLinkRestLengths();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_getVolume(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("btSoftBody::getVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::getVolume",1,"btSoftBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_getVolume",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btScalar)((btSoftBody const *)arg1)->getVolume();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_clusterCount(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int result;
  
  SWIG_check_num_args("btSoftBody::clusterCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::clusterCount",1,"btSoftBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_clusterCount",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (int)((btSoftBody const *)arg1)->clusterCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_clusterCom__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody::Cluster *arg1 = (btSoftBody::Cluster *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btSoftBody::clusterCom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::clusterCom",1,"btSoftBody::Cluster const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody__Cluster,0))){
    SWIG_fail_ptr("btSoftBody_clusterCom",1,SWIGTYPE_p_btSoftBody__Cluster);
  }
  
  result = btSoftBody::clusterCom((btSoftBody::Cluster const *)arg1);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_clusterCom__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btVector3 result;
  
  SWIG_check_num_args("btSoftBody::clusterCom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::clusterCom",1,"btSoftBody const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::clusterCom",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_clusterCom",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((btSoftBody const *)arg1)->clusterCom(arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_clusterCom(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody__Cluster, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSoftBody_clusterCom__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btSoftBody_clusterCom__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_clusterCom'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::clusterCom(btSoftBody::Cluster const *)\n"
    "    btSoftBody::clusterCom(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_clusterVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody::Cluster *arg1 = (btSoftBody::Cluster *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btSoftBody::clusterVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::clusterVelocity",1,"btSoftBody::Cluster const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::clusterVelocity",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody__Cluster,0))){
    SWIG_fail_ptr("btSoftBody_clusterVelocity",1,SWIGTYPE_p_btSoftBody__Cluster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_clusterVelocity",2,SWIGTYPE_p_btVector3);
  }
  
  result = btSoftBody::clusterVelocity((btSoftBody::Cluster const *)arg1,(btVector3 const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_clusterVImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody::Cluster *arg1 = (btSoftBody::Cluster *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btSoftBody::clusterVImpulse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::clusterVImpulse",1,"btSoftBody::Cluster *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::clusterVImpulse",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::clusterVImpulse",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody__Cluster,0))){
    SWIG_fail_ptr("btSoftBody_clusterVImpulse",1,SWIGTYPE_p_btSoftBody__Cluster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_clusterVImpulse",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_clusterVImpulse",3,SWIGTYPE_p_btVector3);
  }
  
  btSoftBody::clusterVImpulse(arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_clusterDImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody::Cluster *arg1 = (btSoftBody::Cluster *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btSoftBody::clusterDImpulse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::clusterDImpulse",1,"btSoftBody::Cluster *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::clusterDImpulse",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::clusterDImpulse",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody__Cluster,0))){
    SWIG_fail_ptr("btSoftBody_clusterDImpulse",1,SWIGTYPE_p_btSoftBody__Cluster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_clusterDImpulse",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_clusterDImpulse",3,SWIGTYPE_p_btVector3);
  }
  
  btSoftBody::clusterDImpulse(arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_clusterImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody::Cluster *arg1 = (btSoftBody::Cluster *) 0 ;
  btVector3 *arg2 = 0 ;
  btSoftBody::Impulse *arg3 = 0 ;
  
  SWIG_check_num_args("btSoftBody::clusterImpulse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::clusterImpulse",1,"btSoftBody::Cluster *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::clusterImpulse",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::clusterImpulse",3,"btSoftBody::Impulse const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody__Cluster,0))){
    SWIG_fail_ptr("btSoftBody_clusterImpulse",1,SWIGTYPE_p_btSoftBody__Cluster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_clusterImpulse",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSoftBody__Impulse,0))){
    SWIG_fail_ptr("btSoftBody_clusterImpulse",3,SWIGTYPE_p_btSoftBody__Impulse);
  }
  
  btSoftBody::clusterImpulse(arg1,(btVector3 const &)*arg2,(btSoftBody::Impulse const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_clusterVAImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody::Cluster *arg1 = (btSoftBody::Cluster *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btSoftBody::clusterVAImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::clusterVAImpulse",1,"btSoftBody::Cluster *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::clusterVAImpulse",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody__Cluster,0))){
    SWIG_fail_ptr("btSoftBody_clusterVAImpulse",1,SWIGTYPE_p_btSoftBody__Cluster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_clusterVAImpulse",2,SWIGTYPE_p_btVector3);
  }
  
  btSoftBody::clusterVAImpulse(arg1,(btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_clusterDAImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody::Cluster *arg1 = (btSoftBody::Cluster *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btSoftBody::clusterDAImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::clusterDAImpulse",1,"btSoftBody::Cluster *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::clusterDAImpulse",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody__Cluster,0))){
    SWIG_fail_ptr("btSoftBody_clusterDAImpulse",1,SWIGTYPE_p_btSoftBody__Cluster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_clusterDAImpulse",2,SWIGTYPE_p_btVector3);
  }
  
  btSoftBody::clusterDAImpulse(arg1,(btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_clusterAImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody::Cluster *arg1 = (btSoftBody::Cluster *) 0 ;
  btSoftBody::Impulse *arg2 = 0 ;
  
  SWIG_check_num_args("btSoftBody::clusterAImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::clusterAImpulse",1,"btSoftBody::Cluster *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::clusterAImpulse",2,"btSoftBody::Impulse const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody__Cluster,0))){
    SWIG_fail_ptr("btSoftBody_clusterAImpulse",1,SWIGTYPE_p_btSoftBody__Cluster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__Impulse,0))){
    SWIG_fail_ptr("btSoftBody_clusterAImpulse",2,SWIGTYPE_p_btSoftBody__Impulse);
  }
  
  btSoftBody::clusterAImpulse(arg1,(btSoftBody::Impulse const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_clusterDCImpulse(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody::Cluster *arg1 = (btSoftBody::Cluster *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btSoftBody::clusterDCImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::clusterDCImpulse",1,"btSoftBody::Cluster *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::clusterDCImpulse",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody__Cluster,0))){
    SWIG_fail_ptr("btSoftBody_clusterDCImpulse",1,SWIGTYPE_p_btSoftBody__Cluster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_clusterDCImpulse",2,SWIGTYPE_p_btVector3);
  }
  
  btSoftBody::clusterDCImpulse(arg1,(btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_generateBendingConstraints__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btSoftBody::Material *arg3 = (btSoftBody::Material *) 0 ;
  int result;
  
  SWIG_check_num_args("btSoftBody::generateBendingConstraints",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::generateBendingConstraints",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::generateBendingConstraints",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::generateBendingConstraints",3,"btSoftBody::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_generateBendingConstraints",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSoftBody__Material,0))){
    SWIG_fail_ptr("btSoftBody_generateBendingConstraints",3,SWIGTYPE_p_btSoftBody__Material);
  }
  
  result = (int)(arg1)->generateBendingConstraints(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_generateBendingConstraints__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("btSoftBody::generateBendingConstraints",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::generateBendingConstraints",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::generateBendingConstraints",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_generateBendingConstraints",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->generateBendingConstraints(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_generateBendingConstraints(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btSoftBody_generateBendingConstraints__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btSoftBody__Material, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btSoftBody_generateBendingConstraints__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_generateBendingConstraints'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::generateBendingConstraints(int,btSoftBody::Material *)\n"
    "    btSoftBody::generateBendingConstraints(int)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_randomizeConstraints(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::randomizeConstraints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::randomizeConstraints",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_randomizeConstraints",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->randomizeConstraints();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_releaseCluster(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btSoftBody::releaseCluster",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::releaseCluster",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::releaseCluster",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_releaseCluster",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->releaseCluster(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_releaseClusters(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::releaseClusters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::releaseClusters",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_releaseClusters",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->releaseClusters();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_generateClusters__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("btSoftBody::generateClusters",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::generateClusters",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::generateClusters",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::generateClusters",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_generateClusters",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->generateClusters(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_generateClusters__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("btSoftBody::generateClusters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::generateClusters",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::generateClusters",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_generateClusters",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->generateClusters(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_generateClusters(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btSoftBody_generateClusters__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btSoftBody_generateClusters__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_generateClusters'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::generateClusters(int,int)\n"
    "    btSoftBody::generateClusters(int)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_refine(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::ImplicitFn *arg2 = (btSoftBody::ImplicitFn *) 0 ;
  btScalar arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("btSoftBody::refine",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::refine",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::refine",2,"btSoftBody::ImplicitFn *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::refine",3,"btScalar");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("btSoftBody::refine",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_refine",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__ImplicitFn,0))){
    SWIG_fail_ptr("btSoftBody_refine",2,SWIGTYPE_p_btSoftBody__ImplicitFn);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->refine(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_cutLink__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar arg4 ;
  bool result;
  
  SWIG_check_num_args("btSoftBody::cutLink",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::cutLink",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::cutLink",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::cutLink",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSoftBody::cutLink",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_cutLink",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (btScalar)lua_tonumber(L, 4);
  result = (bool)(arg1)->cutLink(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_cutLink__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::Node *arg2 = (btSoftBody::Node *) 0 ;
  btSoftBody::Node *arg3 = (btSoftBody::Node *) 0 ;
  btScalar arg4 ;
  bool result;
  
  SWIG_check_num_args("btSoftBody::cutLink",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::cutLink",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::cutLink",2,"btSoftBody::Node const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::cutLink",3,"btSoftBody::Node const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSoftBody::cutLink",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_cutLink",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_cutLink",2,SWIGTYPE_p_btSoftBody__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSoftBody__Node,0))){
    SWIG_fail_ptr("btSoftBody_cutLink",3,SWIGTYPE_p_btSoftBody__Node);
  }
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  result = (bool)(arg1)->cutLink((btSoftBody::Node const *)arg2,(btSoftBody::Node const *)arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_cutLink(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btSoftBody__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btSoftBody_cutLink__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btSoftBody_cutLink__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_cutLink'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::cutLink(int,int,btScalar)\n"
    "    btSoftBody::cutLink(btSoftBody::Node const *,btSoftBody::Node const *,btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_rayTest__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btSoftBody::sRayCast *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("btSoftBody::rayTest",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::rayTest",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::rayTest",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::rayTest",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSoftBody::rayTest",4,"btSoftBody::sRayCast &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_rayTest",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_rayTest",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_rayTest",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btSoftBody__sRayCast,0))){
    SWIG_fail_ptr("btSoftBody_rayTest",4,SWIGTYPE_p_btSoftBody__sRayCast);
  }
  
  result = (bool)(arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_setSolver(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::eSolverPresets::_ arg2 ;
  btSoftBody::eSolverPresets::_ *argp2 ;
  
  SWIG_check_num_args("btSoftBody::setSolver",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::setSolver",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::setSolver",2,"btSoftBody::eSolverPresets::_");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_setSolver",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_btSoftBody__eSolverPresets___,0))){
    SWIG_fail_ptr("btSoftBody_setSolver",2,SWIGTYPE_p_btSoftBody__eSolverPresets___);
  }
  arg2 = *argp2;
  
  (arg1)->setSolver(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_predictMotion(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSoftBody::predictMotion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::predictMotion",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::predictMotion",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_predictMotion",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->predictMotion(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_solveConstraints(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::solveConstraints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::solveConstraints",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_solveConstraints",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->solveConstraints();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_staticSolve(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btSoftBody::staticSolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::staticSolve",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::staticSolve",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_staticSolve",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->staticSolve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_solveCommonConstraints(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody **arg1 = (btSoftBody **) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("btSoftBody::solveCommonConstraints",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::solveCommonConstraints",1,"btSoftBody **");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::solveCommonConstraints",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::solveCommonConstraints",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_solveCommonConstraints",1,SWIGTYPE_p_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  btSoftBody::solveCommonConstraints(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_solveClusters__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btAlignedObjectArray< btSoftBody * > *arg1 = 0 ;
  
  SWIG_check_num_args("btSoftBody::solveClusters",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btSoftBody::solveClusters",1,"btAlignedObjectArray< btSoftBody * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t,0))){
    SWIG_fail_ptr("btSoftBody_solveClusters",1,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t);
  }
  
  btSoftBody::solveClusters((btAlignedObjectArray< btSoftBody * > const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_integrateMotion(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::integrateMotion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::integrateMotion",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_integrateMotion",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->integrateMotion();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_defaultCollisionHandler__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  
  SWIG_check_num_args("btSoftBody::defaultCollisionHandler",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::defaultCollisionHandler",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::defaultCollisionHandler",2,"btCollisionObjectWrapper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_defaultCollisionHandler",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btSoftBody_defaultCollisionHandler",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  (arg1)->defaultCollisionHandler((btCollisionObjectWrapper const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_defaultCollisionHandler__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody *arg2 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::defaultCollisionHandler",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::defaultCollisionHandler",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::defaultCollisionHandler",2,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_defaultCollisionHandler",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_defaultCollisionHandler",2,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->defaultCollisionHandler(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_defaultCollisionHandler(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btCollisionObjectWrapper, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btSoftBody_defaultCollisionHandler__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btSoftBody_defaultCollisionHandler__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_defaultCollisionHandler'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::defaultCollisionHandler(btCollisionObjectWrapper const *)\n"
    "    btSoftBody::defaultCollisionHandler(btSoftBody *)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_setWindVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("btSoftBody::setWindVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::setWindVelocity",1,"btSoftBody *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::setWindVelocity",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_setWindVelocity",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_setWindVelocity",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setWindVelocity((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_getWindVelocity(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::getWindVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::getWindVelocity",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_getWindVelocity",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btVector3 *) &(arg1)->getWindVelocity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_setSoftBodySolver(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBodySolver *arg2 = (btSoftBodySolver *) 0 ;
  
  SWIG_check_num_args("btSoftBody::setSoftBodySolver",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::setSoftBodySolver",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::setSoftBodySolver",2,"btSoftBodySolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_setSoftBodySolver",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBodySolver,0))){
    SWIG_fail_ptr("btSoftBody_setSoftBodySolver",2,SWIGTYPE_p_btSoftBodySolver);
  }
  
  (arg1)->setSoftBodySolver(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_getSoftBodySolver__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBodySolver *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::getSoftBodySolver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::getSoftBodySolver",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_getSoftBodySolver",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBodySolver *)(arg1)->getSoftBodySolver();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBodySolver,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_getSoftBodySolver__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBodySolver *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::getSoftBodySolver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::getSoftBodySolver",1,"btSoftBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_getSoftBodySolver",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (btSoftBodySolver *)((btSoftBody const *)arg1)->getSoftBodySolver();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBodySolver,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_getSoftBodySolver(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSoftBody_getSoftBodySolver__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSoftBody_getSoftBodySolver__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_getSoftBodySolver'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::getSoftBodySolver()\n"
    "    btSoftBody::getSoftBodySolver() const\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_upcast__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btSoftBody *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::upcast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::upcast",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btSoftBody_upcast",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btSoftBody *)btSoftBody::upcast((btCollisionObject const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_upcast__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btSoftBody *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::upcast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::upcast",1,"btCollisionObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btSoftBody_upcast",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btSoftBody *)btSoftBody::upcast(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_upcast(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSoftBody_upcast__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSoftBody_upcast__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_upcast'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::upcast(btCollisionObject const *)\n"
    "    btSoftBody::upcast(btCollisionObject *)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_getAabb(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("btSoftBody::getAabb",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::getAabb",1,"btSoftBody const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::getAabb",2,"btVector3 &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::getAabb",3,"btVector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_getAabb",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_getAabb",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_getAabb",3,SWIGTYPE_p_btVector3);
  }
  
  ((btSoftBody const *)arg1)->getAabb(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_pointersToIndices(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::pointersToIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::pointersToIndices",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_pointersToIndices",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->pointersToIndices();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_indicesToPointers__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int *arg2 = (int *) 0 ;
  
  SWIG_check_num_args("btSoftBody::indicesToPointers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::indicesToPointers",1,"btSoftBody *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::indicesToPointers",2,"int const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_indicesToPointers",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btSoftBody_indicesToPointers",2,SWIGTYPE_p_int);
  }
  
  (arg1)->indicesToPointers((int const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_indicesToPointers__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::indicesToPointers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::indicesToPointers",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_indicesToPointers",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->indicesToPointers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_indicesToPointers(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSoftBody_indicesToPointers__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btSoftBody_indicesToPointers__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_indicesToPointers'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::indicesToPointers(int const *)\n"
    "    btSoftBody::indicesToPointers()\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_rayTest__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btSoftBody::eFeature::_ *arg5 = 0 ;
  int *arg6 = 0 ;
  bool arg7 ;
  int result;
  
  SWIG_check_num_args("btSoftBody::rayTest",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::rayTest",1,"btSoftBody const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftBody::rayTest",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::rayTest",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSoftBody::rayTest",4,"btScalar &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btSoftBody::rayTest",5,"btSoftBody::eFeature::_ &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btSoftBody::rayTest",6,"int &");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("btSoftBody::rayTest",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_rayTest",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_rayTest",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_rayTest",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("btSoftBody_rayTest",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btSoftBody__eFeature___,0))){
    SWIG_fail_ptr("btSoftBody_rayTest",5,SWIGTYPE_p_btSoftBody__eFeature___);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("btSoftBody_rayTest",6,SWIGTYPE_p_int);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (int)((btSoftBody const *)arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5,*arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_rayTest(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btSoftBody__sRayCast, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btSoftBody_rayTest__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btSoftBody__eFeature___, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_btSoftBody_rayTest__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_rayTest'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::rayTest(btVector3 const &,btVector3 const &,btSoftBody::sRayCast &)\n"
    "    btSoftBody::rayTest(btVector3 const &,btVector3 const &,btScalar &,btSoftBody::eFeature::_ &,int &,bool) const\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_initializeFaceTree(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::initializeFaceTree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::initializeFaceTree",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_initializeFaceTree",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->initializeFaceTree();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_evaluateCom(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("btSoftBody::evaluateCom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::evaluateCom",1,"btSoftBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_evaluateCom",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = ((btSoftBody const *)arg1)->evaluateCom();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_checkContact(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  btSoftBody::sCti *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("btSoftBody::checkContact",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::checkContact",1,"btSoftBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::checkContact",2,"btCollisionObjectWrapper const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftBody::checkContact",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSoftBody::checkContact",4,"btScalar");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btSoftBody::checkContact",5,"btSoftBody::sCti &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_checkContact",1,SWIGTYPE_p_btSoftBody);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObjectWrapper,0))){
    SWIG_fail_ptr("btSoftBody_checkContact",2,SWIGTYPE_p_btCollisionObjectWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftBody_checkContact",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btSoftBody__sCti,0))){
    SWIG_fail_ptr("btSoftBody_checkContact",5,SWIGTYPE_p_btSoftBody__sCti);
  }
  
  result = (bool)((btSoftBody const *)arg1)->checkContact((btCollisionObjectWrapper const *)arg2,(btVector3 const &)*arg3,arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_updateNormals(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::updateNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::updateNormals",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_updateNormals",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->updateNormals();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_updateBounds(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::updateBounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::updateBounds",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_updateBounds",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->updateBounds();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_updatePose(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::updatePose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::updatePose",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_updatePose",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->updatePose();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_updateConstants(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::updateConstants",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::updateConstants",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_updateConstants",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->updateConstants();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_updateLinkConstants(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::updateLinkConstants",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::updateLinkConstants",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_updateLinkConstants",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->updateLinkConstants();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_updateArea__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btSoftBody::updateArea",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::updateArea",1,"btSoftBody *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btSoftBody::updateArea",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_updateArea",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->updateArea(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_updateArea__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::updateArea",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::updateArea",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_updateArea",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->updateArea();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_updateArea(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSoftBody_updateArea__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_btSoftBody_updateArea__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_updateArea'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::updateArea(bool)\n"
    "    btSoftBody::updateArea()\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_initializeClusters(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::initializeClusters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::initializeClusters",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_initializeClusters",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->initializeClusters();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_updateClusters(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::updateClusters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::updateClusters",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_updateClusters",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->updateClusters();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_cleanupClusters(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::cleanupClusters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::cleanupClusters",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_cleanupClusters",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->cleanupClusters();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_prepareClusters(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btSoftBody::prepareClusters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::prepareClusters",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::prepareClusters",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_prepareClusters",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->prepareClusters(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_solveClusters__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSoftBody::solveClusters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::solveClusters",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::solveClusters",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_solveClusters",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->solveClusters(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_solveClusters(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSoftBody_solveClusters__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btSoftBody_solveClusters__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_solveClusters'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::solveClusters(btAlignedObjectArray< btSoftBody * > const &)\n"
    "    btSoftBody::solveClusters(btScalar)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_applyClusters(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("btSoftBody::applyClusters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::applyClusters",1,"btSoftBody *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("btSoftBody::applyClusters",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_applyClusters",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->applyClusters(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_dampClusters(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::dampClusters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::dampClusters",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_dampClusters",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->dampClusters();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_applyForces(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftBody::applyForces",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::applyForces",1,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_applyForces",1,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->applyForces();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_PSolve_Anchors(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btSoftBody::PSolve_Anchors",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::PSolve_Anchors",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::PSolve_Anchors",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::PSolve_Anchors",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_PSolve_Anchors",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  btSoftBody::PSolve_Anchors(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_PSolve_RContacts(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btSoftBody::PSolve_RContacts",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::PSolve_RContacts",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::PSolve_RContacts",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::PSolve_RContacts",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_PSolve_RContacts",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  btSoftBody::PSolve_RContacts(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_PSolve_SContacts(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btSoftBody::PSolve_SContacts",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::PSolve_SContacts",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::PSolve_SContacts",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::PSolve_SContacts",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_PSolve_SContacts",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  btSoftBody::PSolve_SContacts(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_PSolve_Links(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("btSoftBody::PSolve_Links",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::PSolve_Links",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::PSolve_Links",2,"btScalar");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBody::PSolve_Links",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_PSolve_Links",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  arg3 = (btScalar)lua_tonumber(L, 3);
  btSoftBody::PSolve_Links(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_VSolve_Links(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("btSoftBody::VSolve_Links",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::VSolve_Links",1,"btSoftBody *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBody::VSolve_Links",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_VSolve_Links",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  btSoftBody::VSolve_Links(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_getSolver__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody::ePSolver::_ arg1 ;
  btSoftBody::ePSolver::_ *argp1 ;
  btSoftBody::psolver_t result;
  
  SWIG_check_num_args("btSoftBody::getSolver",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btSoftBody::getSolver",1,"btSoftBody::ePSolver::_");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_btSoftBody__ePSolver___,0))){
    SWIG_fail_ptr("btSoftBody_getSolver",1,SWIGTYPE_p_btSoftBody__ePSolver___);
  }
  arg1 = *argp1;
  
  result = (btSoftBody::psolver_t)btSoftBody::getSolver(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_btSoftBody_float_float__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_getSolver__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody::eVSolver::_ arg1 ;
  btSoftBody::eVSolver::_ *argp1 ;
  btSoftBody::vsolver_t result;
  
  SWIG_check_num_args("btSoftBody::getSolver",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btSoftBody::getSolver",1,"btSoftBody::eVSolver::_");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_btSoftBody__eVSolver___,0))){
    SWIG_fail_ptr("btSoftBody_getSolver",1,SWIGTYPE_p_btSoftBody__eVSolver___);
  }
  arg1 = *argp1;
  
  result = (btSoftBody::vsolver_t)btSoftBody::getSolver(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_btSoftBody_float__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_getSolver(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody__ePSolver___, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSoftBody_getSolver__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftBody__eVSolver___, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSoftBody_getSolver__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftBody_getSolver'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBody::getSolver(btSoftBody::ePSolver::_)\n"
    "    btSoftBody::getSolver(btSoftBody::eVSolver::_)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBody_calculateSerializeBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int result;
  
  SWIG_check_num_args("btSoftBody::calculateSerializeBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::calculateSerializeBufferSize",1,"btSoftBody const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_calculateSerializeBufferSize",1,SWIGTYPE_p_btSoftBody);
  }
  
  result = (int)((btSoftBody const *)arg1)->calculateSerializeBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftBody_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("btSoftBody::serialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBody::serialize",1,"btSoftBody const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftBody::serialize",2,"void *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftBody::serialize",3,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftBody_serialize",1,SWIGTYPE_p_btSoftBody);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"btSoftBody_serialize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btSoftBody_serialize",3,SWIGTYPE_p_btSerializer);
  }
  
  result = (char *)((btSoftBody const *)arg1)->serialize(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSoftBody(void *obj) {
btSoftBody *arg1 = (btSoftBody *) obj;
delete arg1;
}
static swig_lua_method swig_btSoftBody_methods[] = {
    {"initDefaults", _wrap_btSoftBody_initDefaults}, 
    {"getWorldInfo", _wrap_btSoftBody_getWorldInfo}, 
    {"setCollisionShape", _wrap_btSoftBody_setCollisionShape}, 
    {"checkLink", _wrap_btSoftBody_checkLink}, 
    {"checkFace", _wrap_btSoftBody_checkFace}, 
    {"appendMaterial", _wrap_btSoftBody_appendMaterial}, 
    {"appendNote", _wrap_btSoftBody_appendNote}, 
    {"appendNode", _wrap_btSoftBody_appendNode}, 
    {"appendLink", _wrap_btSoftBody_appendLink}, 
    {"appendFace", _wrap_btSoftBody_appendFace}, 
    {"appendTetra", _wrap_btSoftBody_appendTetra}, 
    {"appendAnchor", _wrap_btSoftBody_appendAnchor}, 
    {"appendLinearJoint", _wrap_btSoftBody_appendLinearJoint}, 
    {"appendAngularJoint", _wrap_btSoftBody_appendAngularJoint}, 
    {"addForce", _wrap_btSoftBody_addForce}, 
    {"addAeroForceToNode", _wrap_btSoftBody_addAeroForceToNode}, 
    {"addAeroForceToFace", _wrap_btSoftBody_addAeroForceToFace}, 
    {"setVelocity", _wrap_btSoftBody_setVelocity}, 
    {"addVelocity", _wrap_btSoftBody_addVelocity}, 
    {"setMass", _wrap_btSoftBody_setMass}, 
    {"getMass", _wrap_btSoftBody_getMass}, 
    {"getTotalMass", _wrap_btSoftBody_getTotalMass}, 
    {"setTotalMass", _wrap_btSoftBody_setTotalMass}, 
    {"setTotalDensity", _wrap_btSoftBody_setTotalDensity}, 
    {"setVolumeMass", _wrap_btSoftBody_setVolumeMass}, 
    {"setVolumeDensity", _wrap_btSoftBody_setVolumeDensity}, 
    {"transform", _wrap_btSoftBody_transform}, 
    {"translate", _wrap_btSoftBody_translate}, 
    {"rotate", _wrap_btSoftBody_rotate}, 
    {"scale", _wrap_btSoftBody_scale}, 
    {"getRestLengthScale", _wrap_btSoftBody_getRestLengthScale}, 
    {"setRestLengthScale", _wrap_btSoftBody_setRestLengthScale}, 
    {"setPose", _wrap_btSoftBody_setPose}, 
    {"resetLinkRestLengths", _wrap_btSoftBody_resetLinkRestLengths}, 
    {"getVolume", _wrap_btSoftBody_getVolume}, 
    {"clusterCount", _wrap_btSoftBody_clusterCount}, 
    {"clusterCom", _wrap_btSoftBody_clusterCom}, 
    {"generateBendingConstraints", _wrap_btSoftBody_generateBendingConstraints}, 
    {"randomizeConstraints", _wrap_btSoftBody_randomizeConstraints}, 
    {"releaseCluster", _wrap_btSoftBody_releaseCluster}, 
    {"releaseClusters", _wrap_btSoftBody_releaseClusters}, 
    {"generateClusters", _wrap_btSoftBody_generateClusters}, 
    {"refine", _wrap_btSoftBody_refine}, 
    {"cutLink", _wrap_btSoftBody_cutLink}, 
    {"setSolver", _wrap_btSoftBody_setSolver}, 
    {"predictMotion", _wrap_btSoftBody_predictMotion}, 
    {"solveConstraints", _wrap_btSoftBody_solveConstraints}, 
    {"staticSolve", _wrap_btSoftBody_staticSolve}, 
    {"integrateMotion", _wrap_btSoftBody_integrateMotion}, 
    {"defaultCollisionHandler", _wrap_btSoftBody_defaultCollisionHandler}, 
    {"setWindVelocity", _wrap_btSoftBody_setWindVelocity}, 
    {"getWindVelocity", _wrap_btSoftBody_getWindVelocity}, 
    {"setSoftBodySolver", _wrap_btSoftBody_setSoftBodySolver}, 
    {"getSoftBodySolver", _wrap_btSoftBody_getSoftBodySolver}, 
    {"getAabb", _wrap_btSoftBody_getAabb}, 
    {"pointersToIndices", _wrap_btSoftBody_pointersToIndices}, 
    {"indicesToPointers", _wrap_btSoftBody_indicesToPointers}, 
    {"rayTest", _wrap_btSoftBody_rayTest}, 
    {"initializeFaceTree", _wrap_btSoftBody_initializeFaceTree}, 
    {"evaluateCom", _wrap_btSoftBody_evaluateCom}, 
    {"checkContact", _wrap_btSoftBody_checkContact}, 
    {"updateNormals", _wrap_btSoftBody_updateNormals}, 
    {"updateBounds", _wrap_btSoftBody_updateBounds}, 
    {"updatePose", _wrap_btSoftBody_updatePose}, 
    {"updateConstants", _wrap_btSoftBody_updateConstants}, 
    {"updateLinkConstants", _wrap_btSoftBody_updateLinkConstants}, 
    {"updateArea", _wrap_btSoftBody_updateArea}, 
    {"initializeClusters", _wrap_btSoftBody_initializeClusters}, 
    {"updateClusters", _wrap_btSoftBody_updateClusters}, 
    {"cleanupClusters", _wrap_btSoftBody_cleanupClusters}, 
    {"prepareClusters", _wrap_btSoftBody_prepareClusters}, 
    {"solveClusters", _wrap_btSoftBody_solveClusters}, 
    {"applyClusters", _wrap_btSoftBody_applyClusters}, 
    {"dampClusters", _wrap_btSoftBody_dampClusters}, 
    {"applyForces", _wrap_btSoftBody_applyForces}, 
    {"calculateSerializeBufferSize", _wrap_btSoftBody_calculateSerializeBufferSize}, 
    {"serialize", _wrap_btSoftBody_serialize}, 
    {0,0}
};
static swig_lua_attribute swig_btSoftBody_attributes[] = {
    { "m_collisionDisabledObjects", _wrap_btSoftBody_m_collisionDisabledObjects_get, _wrap_btSoftBody_m_collisionDisabledObjects_set},
    { "m_softBodySolver", _wrap_btSoftBody_m_softBodySolver_get, _wrap_btSoftBody_m_softBodySolver_set},
    { "m_cfg", _wrap_btSoftBody_m_cfg_get, _wrap_btSoftBody_m_cfg_set},
    { "m_sst", _wrap_btSoftBody_m_sst_get, _wrap_btSoftBody_m_sst_set},
    { "m_pose", _wrap_btSoftBody_m_pose_get, _wrap_btSoftBody_m_pose_set},
    { "m_tag", _wrap_btSoftBody_m_tag_get, _wrap_btSoftBody_m_tag_set},
    { "m_worldInfo", _wrap_btSoftBody_m_worldInfo_get, _wrap_btSoftBody_m_worldInfo_set},
    { "m_notes", _wrap_btSoftBody_m_notes_get, _wrap_btSoftBody_m_notes_set},
    { "m_nodes", _wrap_btSoftBody_m_nodes_get, _wrap_btSoftBody_m_nodes_set},
    { "m_links", _wrap_btSoftBody_m_links_get, _wrap_btSoftBody_m_links_set},
    { "m_faces", _wrap_btSoftBody_m_faces_get, _wrap_btSoftBody_m_faces_set},
    { "m_tetras", _wrap_btSoftBody_m_tetras_get, _wrap_btSoftBody_m_tetras_set},
    { "m_anchors", _wrap_btSoftBody_m_anchors_get, _wrap_btSoftBody_m_anchors_set},
    { "m_rcontacts", _wrap_btSoftBody_m_rcontacts_get, _wrap_btSoftBody_m_rcontacts_set},
    { "m_scontacts", _wrap_btSoftBody_m_scontacts_get, _wrap_btSoftBody_m_scontacts_set},
    { "m_joints", _wrap_btSoftBody_m_joints_get, _wrap_btSoftBody_m_joints_set},
    { "m_materials", _wrap_btSoftBody_m_materials_get, _wrap_btSoftBody_m_materials_set},
    { "m_timeacc", _wrap_btSoftBody_m_timeacc_get, _wrap_btSoftBody_m_timeacc_set},
    { "m_bounds", _wrap_btSoftBody_m_bounds_get, _wrap_btSoftBody_m_bounds_set},
    { "m_bUpdateRtCst", _wrap_btSoftBody_m_bUpdateRtCst_get, _wrap_btSoftBody_m_bUpdateRtCst_set},
    { "m_ndbvt", _wrap_btSoftBody_m_ndbvt_get, _wrap_btSoftBody_m_ndbvt_set},
    { "m_fdbvt", _wrap_btSoftBody_m_fdbvt_get, _wrap_btSoftBody_m_fdbvt_set},
    { "m_cdbvt", _wrap_btSoftBody_m_cdbvt_get, _wrap_btSoftBody_m_cdbvt_set},
    { "m_clusters", _wrap_btSoftBody_m_clusters_get, _wrap_btSoftBody_m_clusters_set},
    { "m_clusterConnectivity", _wrap_btSoftBody_m_clusterConnectivity_get, _wrap_btSoftBody_m_clusterConnectivity_set},
    { "m_initialWorldTransform", _wrap_btSoftBody_m_initialWorldTransform_get, _wrap_btSoftBody_m_initialWorldTransform_set},
    { "m_windVelocity", _wrap_btSoftBody_m_windVelocity_get, _wrap_btSoftBody_m_windVelocity_set},
    { "m_restLengthScale", _wrap_btSoftBody_m_restLengthScale_get, _wrap_btSoftBody_m_restLengthScale_set},
    { "m_userIndexMapping", _wrap_btSoftBody_m_userIndexMapping_get, _wrap_btSoftBody_m_userIndexMapping_set},
    {0,0,0}
};
static swig_lua_attribute swig_btSoftBody_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSoftBody_cls_methods[] = {
    {"clusterVelocity", _wrap_btSoftBody_clusterVelocity}, 
    {"clusterVImpulse", _wrap_btSoftBody_clusterVImpulse}, 
    {"clusterDImpulse", _wrap_btSoftBody_clusterDImpulse}, 
    {"clusterImpulse", _wrap_btSoftBody_clusterImpulse}, 
    {"clusterVAImpulse", _wrap_btSoftBody_clusterVAImpulse}, 
    {"clusterDAImpulse", _wrap_btSoftBody_clusterDAImpulse}, 
    {"clusterAImpulse", _wrap_btSoftBody_clusterAImpulse}, 
    {"clusterDCImpulse", _wrap_btSoftBody_clusterDCImpulse}, 
    {"solveCommonConstraints", _wrap_btSoftBody_solveCommonConstraints}, 
    {"upcast", _wrap_btSoftBody_upcast}, 
    {"PSolve_Anchors", _wrap_btSoftBody_PSolve_Anchors}, 
    {"PSolve_RContacts", _wrap_btSoftBody_PSolve_RContacts}, 
    {"PSolve_SContacts", _wrap_btSoftBody_PSolve_SContacts}, 
    {"PSolve_Links", _wrap_btSoftBody_PSolve_Links}, 
    {"VSolve_Links", _wrap_btSoftBody_VSolve_Links}, 
    {"getSolver", _wrap_btSoftBody_getSolver}, 
    {0,0}
};
static swig_lua_const_info swig_btSoftBody_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSoftBody_bases[] = {0};
static const char *swig_btSoftBody_base_names[] = {0};
static swig_lua_class _wrap_class_btSoftBody = { "btSoftBody", &SWIGTYPE_p_btSoftBody,_wrap_new_btSoftBody, swig_delete_btSoftBody, swig_btSoftBody_methods, swig_btSoftBody_attributes, { "btSoftBody", swig_btSoftBody_cls_methods, swig_btSoftBody_cls_attributes, swig_btSoftBody_cls_constants }, swig_btSoftBody_bases, swig_btSoftBody_base_names };

static int _wrap_new_btSoftRigidDynamicsWorld__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  btConstraintSolver *arg3 = (btConstraintSolver *) 0 ;
  btCollisionConfiguration *arg4 = (btCollisionConfiguration *) 0 ;
  btSoftBodySolver *arg5 = (btSoftBodySolver *) 0 ;
  btSoftRigidDynamicsWorld *result = 0 ;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::btSoftRigidDynamicsWorld",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::btSoftRigidDynamicsWorld",1,"btDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftRigidDynamicsWorld::btSoftRigidDynamicsWorld",2,"btBroadphaseInterface *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftRigidDynamicsWorld::btSoftRigidDynamicsWorld",3,"btConstraintSolver *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btSoftRigidDynamicsWorld::btSoftRigidDynamicsWorld",4,"btCollisionConfiguration *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("btSoftRigidDynamicsWorld::btSoftRigidDynamicsWorld",5,"btSoftBodySolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("new_btSoftRigidDynamicsWorld",1,SWIGTYPE_p_btDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("new_btSoftRigidDynamicsWorld",2,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btConstraintSolver,0))){
    SWIG_fail_ptr("new_btSoftRigidDynamicsWorld",3,SWIGTYPE_p_btConstraintSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btCollisionConfiguration,0))){
    SWIG_fail_ptr("new_btSoftRigidDynamicsWorld",4,SWIGTYPE_p_btCollisionConfiguration);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btSoftBodySolver,0))){
    SWIG_fail_ptr("new_btSoftRigidDynamicsWorld",5,SWIGTYPE_p_btSoftBodySolver);
  }
  
  result = (btSoftRigidDynamicsWorld *)new btSoftRigidDynamicsWorld(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftRigidDynamicsWorld,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btSoftRigidDynamicsWorld__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  btConstraintSolver *arg3 = (btConstraintSolver *) 0 ;
  btCollisionConfiguration *arg4 = (btCollisionConfiguration *) 0 ;
  btSoftRigidDynamicsWorld *result = 0 ;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::btSoftRigidDynamicsWorld",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::btSoftRigidDynamicsWorld",1,"btDispatcher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftRigidDynamicsWorld::btSoftRigidDynamicsWorld",2,"btBroadphaseInterface *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftRigidDynamicsWorld::btSoftRigidDynamicsWorld",3,"btConstraintSolver *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btSoftRigidDynamicsWorld::btSoftRigidDynamicsWorld",4,"btCollisionConfiguration *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("new_btSoftRigidDynamicsWorld",1,SWIGTYPE_p_btDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseInterface,0))){
    SWIG_fail_ptr("new_btSoftRigidDynamicsWorld",2,SWIGTYPE_p_btBroadphaseInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btConstraintSolver,0))){
    SWIG_fail_ptr("new_btSoftRigidDynamicsWorld",3,SWIGTYPE_p_btConstraintSolver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btCollisionConfiguration,0))){
    SWIG_fail_ptr("new_btSoftRigidDynamicsWorld",4,SWIGTYPE_p_btCollisionConfiguration);
  }
  
  result = (btSoftRigidDynamicsWorld *)new btSoftRigidDynamicsWorld(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftRigidDynamicsWorld,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btSoftRigidDynamicsWorld(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDispatcher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btBroadphaseInterface, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btConstraintSolver, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btCollisionConfiguration, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_btSoftRigidDynamicsWorld__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDispatcher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btBroadphaseInterface, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btConstraintSolver, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btCollisionConfiguration, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btSoftBodySolver, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_new_btSoftRigidDynamicsWorld__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btSoftRigidDynamicsWorld'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftRigidDynamicsWorld::btSoftRigidDynamicsWorld(btDispatcher *,btBroadphaseInterface *,btConstraintSolver *,btCollisionConfiguration *,btSoftBodySolver *)\n"
    "    btSoftRigidDynamicsWorld::btSoftRigidDynamicsWorld(btDispatcher *,btBroadphaseInterface *,btConstraintSolver *,btCollisionConfiguration *)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftRigidDynamicsWorld_debugDrawWorld(lua_State* L) {
  int SWIG_arg = 0;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::debugDrawWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::debugDrawWorld",1,"btSoftRigidDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftRigidDynamicsWorld,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_debugDrawWorld",1,SWIGTYPE_p_btSoftRigidDynamicsWorld);
  }
  
  (arg1)->debugDrawWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftRigidDynamicsWorld_addSoftBody__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btSoftBody *arg2 = (btSoftBody *) 0 ;
  short arg3 ;
  short arg4 ;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::addSoftBody",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::addSoftBody",1,"btSoftRigidDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftRigidDynamicsWorld::addSoftBody",2,"btSoftBody *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftRigidDynamicsWorld::addSoftBody",3,"short");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("btSoftRigidDynamicsWorld::addSoftBody",4,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftRigidDynamicsWorld,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_addSoftBody",1,SWIGTYPE_p_btSoftRigidDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_addSoftBody",2,SWIGTYPE_p_btSoftBody);
  }
  
  arg3 = (short)lua_tonumber(L, 3);
  arg4 = (short)lua_tonumber(L, 4);
  (arg1)->addSoftBody(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftRigidDynamicsWorld_addSoftBody__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btSoftBody *arg2 = (btSoftBody *) 0 ;
  short arg3 ;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::addSoftBody",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::addSoftBody",1,"btSoftRigidDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftRigidDynamicsWorld::addSoftBody",2,"btSoftBody *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftRigidDynamicsWorld::addSoftBody",3,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftRigidDynamicsWorld,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_addSoftBody",1,SWIGTYPE_p_btSoftRigidDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_addSoftBody",2,SWIGTYPE_p_btSoftBody);
  }
  
  arg3 = (short)lua_tonumber(L, 3);
  (arg1)->addSoftBody(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftRigidDynamicsWorld_addSoftBody__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btSoftBody *arg2 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::addSoftBody",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::addSoftBody",1,"btSoftRigidDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftRigidDynamicsWorld::addSoftBody",2,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftRigidDynamicsWorld,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_addSoftBody",1,SWIGTYPE_p_btSoftRigidDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_addSoftBody",2,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->addSoftBody(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftRigidDynamicsWorld_addSoftBody(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftRigidDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btSoftRigidDynamicsWorld_addSoftBody__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftRigidDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_btSoftRigidDynamicsWorld_addSoftBody__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftRigidDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSoftBody, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_btSoftRigidDynamicsWorld_addSoftBody__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftRigidDynamicsWorld_addSoftBody'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftRigidDynamicsWorld::addSoftBody(btSoftBody *,short,short)\n"
    "    btSoftRigidDynamicsWorld::addSoftBody(btSoftBody *,short)\n"
    "    btSoftRigidDynamicsWorld::addSoftBody(btSoftBody *)\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftRigidDynamicsWorld_removeSoftBody(lua_State* L) {
  int SWIG_arg = 0;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btSoftBody *arg2 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::removeSoftBody",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::removeSoftBody",1,"btSoftRigidDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftRigidDynamicsWorld::removeSoftBody",2,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftRigidDynamicsWorld,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_removeSoftBody",1,SWIGTYPE_p_btSoftRigidDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_removeSoftBody",2,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->removeSoftBody(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftRigidDynamicsWorld_removeCollisionObject(lua_State* L) {
  int SWIG_arg = 0;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::removeCollisionObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::removeCollisionObject",1,"btSoftRigidDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftRigidDynamicsWorld::removeCollisionObject",2,"btCollisionObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftRigidDynamicsWorld,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_removeCollisionObject",1,SWIGTYPE_p_btSoftRigidDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_removeCollisionObject",2,SWIGTYPE_p_btCollisionObject);
  }
  
  (arg1)->removeCollisionObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftRigidDynamicsWorld_getDrawFlags(lua_State* L) {
  int SWIG_arg = 0;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  int result;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::getDrawFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::getDrawFlags",1,"btSoftRigidDynamicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftRigidDynamicsWorld,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_getDrawFlags",1,SWIGTYPE_p_btSoftRigidDynamicsWorld);
  }
  
  result = (int)((btSoftRigidDynamicsWorld const *)arg1)->getDrawFlags();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftRigidDynamicsWorld_setDrawFlags(lua_State* L) {
  int SWIG_arg = 0;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::setDrawFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::setDrawFlags",1,"btSoftRigidDynamicsWorld *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftRigidDynamicsWorld::setDrawFlags",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftRigidDynamicsWorld,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_setDrawFlags",1,SWIGTYPE_p_btSoftRigidDynamicsWorld);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDrawFlags(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftRigidDynamicsWorld_getWorldInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btSoftBodyWorldInfo *result = 0 ;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::getWorldInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::getWorldInfo",1,"btSoftRigidDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftRigidDynamicsWorld,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_getWorldInfo",1,SWIGTYPE_p_btSoftRigidDynamicsWorld);
  }
  
  result = (btSoftBodyWorldInfo *) &(arg1)->getWorldInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBodyWorldInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftRigidDynamicsWorld_getWorldInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btSoftBodyWorldInfo *result = 0 ;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::getWorldInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::getWorldInfo",1,"btSoftRigidDynamicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftRigidDynamicsWorld,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_getWorldInfo",1,SWIGTYPE_p_btSoftRigidDynamicsWorld);
  }
  
  result = (btSoftBodyWorldInfo *) &((btSoftRigidDynamicsWorld const *)arg1)->getWorldInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBodyWorldInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftRigidDynamicsWorld_getWorldInfo(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftRigidDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSoftRigidDynamicsWorld_getWorldInfo__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftRigidDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSoftRigidDynamicsWorld_getWorldInfo__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftRigidDynamicsWorld_getWorldInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftRigidDynamicsWorld::getWorldInfo()\n"
    "    btSoftRigidDynamicsWorld::getWorldInfo() const\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftRigidDynamicsWorld_getWorldType(lua_State* L) {
  int SWIG_arg = 0;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btDynamicsWorldType result;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::getWorldType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::getWorldType",1,"btSoftRigidDynamicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftRigidDynamicsWorld,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_getWorldType",1,SWIGTYPE_p_btSoftRigidDynamicsWorld);
  }
  
  result = (btDynamicsWorldType)((btSoftRigidDynamicsWorld const *)arg1)->getWorldType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftRigidDynamicsWorld_getSoftBodyArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btSoftBodyArray *result = 0 ;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::getSoftBodyArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::getSoftBodyArray",1,"btSoftRigidDynamicsWorld *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftRigidDynamicsWorld,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_getSoftBodyArray",1,SWIGTYPE_p_btSoftRigidDynamicsWorld);
  }
  
  result = (btSoftBodyArray *) &(arg1)->getSoftBodyArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftRigidDynamicsWorld_getSoftBodyArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btSoftBodyArray *result = 0 ;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::getSoftBodyArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::getSoftBodyArray",1,"btSoftRigidDynamicsWorld const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftRigidDynamicsWorld,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_getSoftBodyArray",1,SWIGTYPE_p_btSoftRigidDynamicsWorld);
  }
  
  result = (btSoftBodyArray *) &((btSoftRigidDynamicsWorld const *)arg1)->getSoftBodyArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftRigidDynamicsWorld_getSoftBodyArray(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftRigidDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSoftRigidDynamicsWorld_getSoftBodyArray__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btSoftRigidDynamicsWorld, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btSoftRigidDynamicsWorld_getSoftBodyArray__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btSoftRigidDynamicsWorld_getSoftBodyArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftRigidDynamicsWorld::getSoftBodyArray()\n"
    "    btSoftRigidDynamicsWorld::getSoftBodyArray() const\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftRigidDynamicsWorld_rayTest(lua_State* L) {
  int SWIG_arg = 0;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btCollisionWorld::RayResultCallback *arg4 = 0 ;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::rayTest",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::rayTest",1,"btSoftRigidDynamicsWorld const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftRigidDynamicsWorld::rayTest",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btSoftRigidDynamicsWorld::rayTest",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btSoftRigidDynamicsWorld::rayTest",4,"btCollisionWorld::RayResultCallback &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftRigidDynamicsWorld,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_rayTest",1,SWIGTYPE_p_btSoftRigidDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_rayTest",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_rayTest",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btCollisionWorld__RayResultCallback,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_rayTest",4,SWIGTYPE_p_btCollisionWorld__RayResultCallback);
  }
  
  ((btSoftRigidDynamicsWorld const *)arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftRigidDynamicsWorld_rayTestSingle(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btCollisionShape *arg4 = (btCollisionShape *) 0 ;
  btTransform *arg5 = 0 ;
  btCollisionWorld::RayResultCallback *arg6 = 0 ;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::rayTestSingle",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::rayTestSingle",1,"btTransform const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btSoftRigidDynamicsWorld::rayTestSingle",2,"btTransform const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btSoftRigidDynamicsWorld::rayTestSingle",3,"btCollisionObject *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btSoftRigidDynamicsWorld::rayTestSingle",4,"btCollisionShape const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btSoftRigidDynamicsWorld::rayTestSingle",5,"btTransform const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("btSoftRigidDynamicsWorld::rayTestSingle",6,"btCollisionWorld::RayResultCallback &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_rayTestSingle",1,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_rayTestSingle",2,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_rayTestSingle",3,SWIGTYPE_p_btCollisionObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_rayTestSingle",4,SWIGTYPE_p_btCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_rayTestSingle",5,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btCollisionWorld__RayResultCallback,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_rayTestSingle",6,SWIGTYPE_p_btCollisionWorld__RayResultCallback);
  }
  
  btSoftRigidDynamicsWorld::rayTestSingle((btTransform const &)*arg1,(btTransform const &)*arg2,arg3,(btCollisionShape const *)arg4,(btTransform const &)*arg5,*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btSoftRigidDynamicsWorld_serialize(lua_State* L) {
  int SWIG_arg = 0;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  SWIG_check_num_args("btSoftRigidDynamicsWorld::serialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftRigidDynamicsWorld::serialize",1,"btSoftRigidDynamicsWorld *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btSoftRigidDynamicsWorld::serialize",2,"btSerializer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftRigidDynamicsWorld,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_serialize",1,SWIGTYPE_p_btSoftRigidDynamicsWorld);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSerializer,0))){
    SWIG_fail_ptr("btSoftRigidDynamicsWorld_serialize",2,SWIGTYPE_p_btSerializer);
  }
  
  (arg1)->serialize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSoftRigidDynamicsWorld(void *obj) {
btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) obj;
delete arg1;
}
static swig_lua_method swig_btSoftRigidDynamicsWorld_methods[] = {
    {"debugDrawWorld", _wrap_btSoftRigidDynamicsWorld_debugDrawWorld}, 
    {"addSoftBody", _wrap_btSoftRigidDynamicsWorld_addSoftBody}, 
    {"removeSoftBody", _wrap_btSoftRigidDynamicsWorld_removeSoftBody}, 
    {"removeCollisionObject", _wrap_btSoftRigidDynamicsWorld_removeCollisionObject}, 
    {"getDrawFlags", _wrap_btSoftRigidDynamicsWorld_getDrawFlags}, 
    {"setDrawFlags", _wrap_btSoftRigidDynamicsWorld_setDrawFlags}, 
    {"getWorldInfo", _wrap_btSoftRigidDynamicsWorld_getWorldInfo}, 
    {"getWorldType", _wrap_btSoftRigidDynamicsWorld_getWorldType}, 
    {"getSoftBodyArray", _wrap_btSoftRigidDynamicsWorld_getSoftBodyArray}, 
    {"rayTest", _wrap_btSoftRigidDynamicsWorld_rayTest}, 
    {"serialize", _wrap_btSoftRigidDynamicsWorld_serialize}, 
    {0,0}
};
static swig_lua_attribute swig_btSoftRigidDynamicsWorld_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btSoftRigidDynamicsWorld_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSoftRigidDynamicsWorld_cls_methods[] = {
    {"rayTestSingle", _wrap_btSoftRigidDynamicsWorld_rayTestSingle}, 
    {0,0}
};
static swig_lua_const_info swig_btSoftRigidDynamicsWorld_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSoftRigidDynamicsWorld_bases[] = {0};
static const char *swig_btSoftRigidDynamicsWorld_base_names[] = {0};
static swig_lua_class _wrap_class_btSoftRigidDynamicsWorld = { "btSoftRigidDynamicsWorld", &SWIGTYPE_p_btSoftRigidDynamicsWorld,_wrap_new_btSoftRigidDynamicsWorld, swig_delete_btSoftRigidDynamicsWorld, swig_btSoftRigidDynamicsWorld_methods, swig_btSoftRigidDynamicsWorld_attributes, { "btSoftRigidDynamicsWorld", swig_btSoftRigidDynamicsWorld_cls_methods, swig_btSoftRigidDynamicsWorld_cls_attributes, swig_btSoftRigidDynamicsWorld_cls_constants }, swig_btSoftRigidDynamicsWorld_bases, swig_btSoftRigidDynamicsWorld_base_names };

static int _wrap_new_btSoftBodyRigidBodyCollisionConfiguration__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btDefaultCollisionConstructionInfo *arg1 = 0 ;
  btSoftBodyRigidBodyCollisionConfiguration *result = 0 ;
  
  SWIG_check_num_args("btSoftBodyRigidBodyCollisionConfiguration::btSoftBodyRigidBodyCollisionConfiguration",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("btSoftBodyRigidBodyCollisionConfiguration::btSoftBodyRigidBodyCollisionConfiguration",1,"btDefaultCollisionConstructionInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btDefaultCollisionConstructionInfo,0))){
    SWIG_fail_ptr("new_btSoftBodyRigidBodyCollisionConfiguration",1,SWIGTYPE_p_btDefaultCollisionConstructionInfo);
  }
  
  result = (btSoftBodyRigidBodyCollisionConfiguration *)new btSoftBodyRigidBodyCollisionConfiguration((btDefaultCollisionConstructionInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBodyRigidBodyCollisionConfiguration,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btSoftBodyRigidBodyCollisionConfiguration__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyRigidBodyCollisionConfiguration *result = 0 ;
  
  SWIG_check_num_args("btSoftBodyRigidBodyCollisionConfiguration::btSoftBodyRigidBodyCollisionConfiguration",0,0)
  result = (btSoftBodyRigidBodyCollisionConfiguration *)new btSoftBodyRigidBodyCollisionConfiguration();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBodyRigidBodyCollisionConfiguration,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btSoftBodyRigidBodyCollisionConfiguration(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_btSoftBodyRigidBodyCollisionConfiguration__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btDefaultCollisionConstructionInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_btSoftBodyRigidBodyCollisionConfiguration__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_btSoftBodyRigidBodyCollisionConfiguration'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btSoftBodyRigidBodyCollisionConfiguration::btSoftBodyRigidBodyCollisionConfiguration(btDefaultCollisionConstructionInfo const &)\n"
    "    btSoftBodyRigidBodyCollisionConfiguration::btSoftBodyRigidBodyCollisionConfiguration()\n");
  lua_error(L);return 0;
}


static int _wrap_btSoftBodyRigidBodyCollisionConfiguration_getCollisionAlgorithmCreateFunc(lua_State* L) {
  int SWIG_arg = 0;
  btSoftBodyRigidBodyCollisionConfiguration *arg1 = (btSoftBodyRigidBodyCollisionConfiguration *) 0 ;
  int arg2 ;
  int arg3 ;
  btCollisionAlgorithmCreateFunc *result = 0 ;
  
  SWIG_check_num_args("btSoftBodyRigidBodyCollisionConfiguration::getCollisionAlgorithmCreateFunc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btSoftBodyRigidBodyCollisionConfiguration::getCollisionAlgorithmCreateFunc",1,"btSoftBodyRigidBodyCollisionConfiguration *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btSoftBodyRigidBodyCollisionConfiguration::getCollisionAlgorithmCreateFunc",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("btSoftBodyRigidBodyCollisionConfiguration::getCollisionAlgorithmCreateFunc",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btSoftBodyRigidBodyCollisionConfiguration,0))){
    SWIG_fail_ptr("btSoftBodyRigidBodyCollisionConfiguration_getCollisionAlgorithmCreateFunc",1,SWIGTYPE_p_btSoftBodyRigidBodyCollisionConfiguration);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (btCollisionAlgorithmCreateFunc *)(arg1)->getCollisionAlgorithmCreateFunc(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionAlgorithmCreateFunc,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btSoftBodyRigidBodyCollisionConfiguration(void *obj) {
btSoftBodyRigidBodyCollisionConfiguration *arg1 = (btSoftBodyRigidBodyCollisionConfiguration *) obj;
delete arg1;
}
static swig_lua_method swig_btSoftBodyRigidBodyCollisionConfiguration_methods[] = {
    {"getCollisionAlgorithmCreateFunc", _wrap_btSoftBodyRigidBodyCollisionConfiguration_getCollisionAlgorithmCreateFunc}, 
    {0,0}
};
static swig_lua_attribute swig_btSoftBodyRigidBodyCollisionConfiguration_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btSoftBodyRigidBodyCollisionConfiguration_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btSoftBodyRigidBodyCollisionConfiguration_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btSoftBodyRigidBodyCollisionConfiguration_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btSoftBodyRigidBodyCollisionConfiguration_bases[] = {0};
static const char *swig_btSoftBodyRigidBodyCollisionConfiguration_base_names[] = {0};
static swig_lua_class _wrap_class_btSoftBodyRigidBodyCollisionConfiguration = { "btSoftBodyRigidBodyCollisionConfiguration", &SWIGTYPE_p_btSoftBodyRigidBodyCollisionConfiguration,_wrap_new_btSoftBodyRigidBodyCollisionConfiguration, swig_delete_btSoftBodyRigidBodyCollisionConfiguration, swig_btSoftBodyRigidBodyCollisionConfiguration_methods, swig_btSoftBodyRigidBodyCollisionConfiguration_attributes, { "btSoftBodyRigidBodyCollisionConfiguration", swig_btSoftBodyRigidBodyCollisionConfiguration_cls_methods, swig_btSoftBodyRigidBodyCollisionConfiguration_cls_attributes, swig_btSoftBodyRigidBodyCollisionConfiguration_cls_constants }, swig_btSoftBodyRigidBodyCollisionConfiguration_bases, swig_btSoftBodyRigidBodyCollisionConfiguration_base_names };

static int _wrap_new_btGhostObject(lua_State* L) {
  int SWIG_arg = 0;
  btGhostObject *result = 0 ;
  
  SWIG_check_num_args("btGhostObject::btGhostObject",0,0)
  result = (btGhostObject *)new btGhostObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGhostObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostObject_convexSweepTest__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btGhostObject *arg1 = (btGhostObject *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btCollisionWorld::ConvexResultCallback *arg5 = 0 ;
  btScalar arg6 ;
  
  SWIG_check_num_args("btGhostObject::convexSweepTest",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGhostObject::convexSweepTest",1,"btGhostObject const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGhostObject::convexSweepTest",2,"btConvexShape const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btGhostObject::convexSweepTest",3,"btTransform const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btGhostObject::convexSweepTest",4,"btTransform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btGhostObject::convexSweepTest",5,"btCollisionWorld::ConvexResultCallback &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("btGhostObject::convexSweepTest",6,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGhostObject,0))){
    SWIG_fail_ptr("btGhostObject_convexSweepTest",1,SWIGTYPE_p_btGhostObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btGhostObject_convexSweepTest",2,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGhostObject_convexSweepTest",3,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGhostObject_convexSweepTest",4,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btCollisionWorld__ConvexResultCallback,0))){
    SWIG_fail_ptr("btGhostObject_convexSweepTest",5,SWIGTYPE_p_btCollisionWorld__ConvexResultCallback);
  }
  
  arg6 = (btScalar)lua_tonumber(L, 6);
  ((btGhostObject const *)arg1)->convexSweepTest((btConvexShape const *)arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,*arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostObject_convexSweepTest__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btGhostObject *arg1 = (btGhostObject *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btCollisionWorld::ConvexResultCallback *arg5 = 0 ;
  
  SWIG_check_num_args("btGhostObject::convexSweepTest",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGhostObject::convexSweepTest",1,"btGhostObject const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGhostObject::convexSweepTest",2,"btConvexShape const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btGhostObject::convexSweepTest",3,"btTransform const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btGhostObject::convexSweepTest",4,"btTransform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("btGhostObject::convexSweepTest",5,"btCollisionWorld::ConvexResultCallback &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGhostObject,0))){
    SWIG_fail_ptr("btGhostObject_convexSweepTest",1,SWIGTYPE_p_btGhostObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConvexShape,0))){
    SWIG_fail_ptr("btGhostObject_convexSweepTest",2,SWIGTYPE_p_btConvexShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGhostObject_convexSweepTest",3,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btGhostObject_convexSweepTest",4,SWIGTYPE_p_btTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btCollisionWorld__ConvexResultCallback,0))){
    SWIG_fail_ptr("btGhostObject_convexSweepTest",5,SWIGTYPE_p_btCollisionWorld__ConvexResultCallback);
  }
  
  ((btGhostObject const *)arg1)->convexSweepTest((btConvexShape const *)arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostObject_convexSweepTest(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGhostObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btConvexShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btCollisionWorld__ConvexResultCallback, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_btGhostObject_convexSweepTest__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGhostObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btConvexShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btCollisionWorld__ConvexResultCallback, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_btGhostObject_convexSweepTest__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btGhostObject_convexSweepTest'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btGhostObject::convexSweepTest(btConvexShape const *,btTransform const &,btTransform const &,btCollisionWorld::ConvexResultCallback &,btScalar) const\n"
    "    btGhostObject::convexSweepTest(btConvexShape const *,btTransform const &,btTransform const &,btCollisionWorld::ConvexResultCallback &) const\n");
  lua_error(L);return 0;
}


static int _wrap_btGhostObject_rayTest(lua_State* L) {
  int SWIG_arg = 0;
  btGhostObject *arg1 = (btGhostObject *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btCollisionWorld::RayResultCallback *arg4 = 0 ;
  
  SWIG_check_num_args("btGhostObject::rayTest",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGhostObject::rayTest",1,"btGhostObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("btGhostObject::rayTest",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("btGhostObject::rayTest",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("btGhostObject::rayTest",4,"btCollisionWorld::RayResultCallback &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGhostObject,0))){
    SWIG_fail_ptr("btGhostObject_rayTest",1,SWIGTYPE_p_btGhostObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGhostObject_rayTest",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btGhostObject_rayTest",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btCollisionWorld__RayResultCallback,0))){
    SWIG_fail_ptr("btGhostObject_rayTest",4,SWIGTYPE_p_btCollisionWorld__RayResultCallback);
  }
  
  ((btGhostObject const *)arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostObject_addOverlappingObjectInternal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btGhostObject *arg1 = (btGhostObject *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  
  SWIG_check_num_args("btGhostObject::addOverlappingObjectInternal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGhostObject::addOverlappingObjectInternal",1,"btGhostObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGhostObject::addOverlappingObjectInternal",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btGhostObject::addOverlappingObjectInternal",3,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGhostObject,0))){
    SWIG_fail_ptr("btGhostObject_addOverlappingObjectInternal",1,SWIGTYPE_p_btGhostObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btGhostObject_addOverlappingObjectInternal",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btGhostObject_addOverlappingObjectInternal",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  (arg1)->addOverlappingObjectInternal(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostObject_addOverlappingObjectInternal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btGhostObject *arg1 = (btGhostObject *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  SWIG_check_num_args("btGhostObject::addOverlappingObjectInternal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGhostObject::addOverlappingObjectInternal",1,"btGhostObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGhostObject::addOverlappingObjectInternal",2,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGhostObject,0))){
    SWIG_fail_ptr("btGhostObject_addOverlappingObjectInternal",1,SWIGTYPE_p_btGhostObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btGhostObject_addOverlappingObjectInternal",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  (arg1)->addOverlappingObjectInternal(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostObject_addOverlappingObjectInternal(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGhostObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btBroadphaseProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btGhostObject_addOverlappingObjectInternal__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGhostObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btBroadphaseProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btBroadphaseProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btGhostObject_addOverlappingObjectInternal__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btGhostObject_addOverlappingObjectInternal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btGhostObject::addOverlappingObjectInternal(btBroadphaseProxy *,btBroadphaseProxy *)\n"
    "    btGhostObject::addOverlappingObjectInternal(btBroadphaseProxy *)\n");
  lua_error(L);return 0;
}


static int _wrap_btGhostObject_removeOverlappingObjectInternal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btGhostObject *arg1 = (btGhostObject *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  btBroadphaseProxy *arg4 = (btBroadphaseProxy *) 0 ;
  
  SWIG_check_num_args("btGhostObject::removeOverlappingObjectInternal",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGhostObject::removeOverlappingObjectInternal",1,"btGhostObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGhostObject::removeOverlappingObjectInternal",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btGhostObject::removeOverlappingObjectInternal",3,"btDispatcher *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btGhostObject::removeOverlappingObjectInternal",4,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGhostObject,0))){
    SWIG_fail_ptr("btGhostObject_removeOverlappingObjectInternal",1,SWIGTYPE_p_btGhostObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btGhostObject_removeOverlappingObjectInternal",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btGhostObject_removeOverlappingObjectInternal",3,SWIGTYPE_p_btDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btGhostObject_removeOverlappingObjectInternal",4,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  (arg1)->removeOverlappingObjectInternal(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostObject_removeOverlappingObjectInternal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btGhostObject *arg1 = (btGhostObject *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btGhostObject::removeOverlappingObjectInternal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGhostObject::removeOverlappingObjectInternal",1,"btGhostObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGhostObject::removeOverlappingObjectInternal",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btGhostObject::removeOverlappingObjectInternal",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGhostObject,0))){
    SWIG_fail_ptr("btGhostObject_removeOverlappingObjectInternal",1,SWIGTYPE_p_btGhostObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btGhostObject_removeOverlappingObjectInternal",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btGhostObject_removeOverlappingObjectInternal",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->removeOverlappingObjectInternal(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostObject_removeOverlappingObjectInternal(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGhostObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btBroadphaseProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btDispatcher, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btGhostObject_removeOverlappingObjectInternal__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGhostObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btBroadphaseProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btDispatcher, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btBroadphaseProxy, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btGhostObject_removeOverlappingObjectInternal__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btGhostObject_removeOverlappingObjectInternal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btGhostObject::removeOverlappingObjectInternal(btBroadphaseProxy *,btDispatcher *,btBroadphaseProxy *)\n"
    "    btGhostObject::removeOverlappingObjectInternal(btBroadphaseProxy *,btDispatcher *)\n");
  lua_error(L);return 0;
}


static int _wrap_btGhostObject_getNumOverlappingObjects(lua_State* L) {
  int SWIG_arg = 0;
  btGhostObject *arg1 = (btGhostObject *) 0 ;
  int result;
  
  SWIG_check_num_args("btGhostObject::getNumOverlappingObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGhostObject::getNumOverlappingObjects",1,"btGhostObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGhostObject,0))){
    SWIG_fail_ptr("btGhostObject_getNumOverlappingObjects",1,SWIGTYPE_p_btGhostObject);
  }
  
  result = (int)((btGhostObject const *)arg1)->getNumOverlappingObjects();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostObject_getOverlappingObject__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btGhostObject *arg1 = (btGhostObject *) 0 ;
  int arg2 ;
  btCollisionObject *result = 0 ;
  
  SWIG_check_num_args("btGhostObject::getOverlappingObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGhostObject::getOverlappingObject",1,"btGhostObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGhostObject::getOverlappingObject",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGhostObject,0))){
    SWIG_fail_ptr("btGhostObject_getOverlappingObject",1,SWIGTYPE_p_btGhostObject);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btCollisionObject *)(arg1)->getOverlappingObject(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostObject_getOverlappingObject__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btGhostObject *arg1 = (btGhostObject *) 0 ;
  int arg2 ;
  btCollisionObject *result = 0 ;
  
  SWIG_check_num_args("btGhostObject::getOverlappingObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGhostObject::getOverlappingObject",1,"btGhostObject const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("btGhostObject::getOverlappingObject",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGhostObject,0))){
    SWIG_fail_ptr("btGhostObject_getOverlappingObject",1,SWIGTYPE_p_btGhostObject);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (btCollisionObject *)((btGhostObject const *)arg1)->getOverlappingObject(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostObject_getOverlappingObject(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGhostObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btGhostObject_getOverlappingObject__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGhostObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_btGhostObject_getOverlappingObject__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btGhostObject_getOverlappingObject'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btGhostObject::getOverlappingObject(int)\n"
    "    btGhostObject::getOverlappingObject(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_btGhostObject_getOverlappingPairs__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btGhostObject *arg1 = (btGhostObject *) 0 ;
  btAlignedObjectArray< btCollisionObject * > *result = 0 ;
  
  SWIG_check_num_args("btGhostObject::getOverlappingPairs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGhostObject::getOverlappingPairs",1,"btGhostObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGhostObject,0))){
    SWIG_fail_ptr("btGhostObject_getOverlappingPairs",1,SWIGTYPE_p_btGhostObject);
  }
  
  result = (btAlignedObjectArray< btCollisionObject * > *) &(arg1)->getOverlappingPairs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostObject_getOverlappingPairs__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btGhostObject *arg1 = (btGhostObject *) 0 ;
  SwigValueWrapper< btAlignedObjectArray< btCollisionObject * > > result;
  
  SWIG_check_num_args("btGhostObject::getOverlappingPairs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGhostObject::getOverlappingPairs",1,"btGhostObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGhostObject,0))){
    SWIG_fail_ptr("btGhostObject_getOverlappingPairs",1,SWIGTYPE_p_btGhostObject);
  }
  
  result = ((btGhostObject const *)arg1)->getOverlappingPairs();
  {
    btAlignedObjectArray< btCollisionObject * > * resultptr = new btAlignedObjectArray< btCollisionObject * >((const btAlignedObjectArray< btCollisionObject * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObject_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostObject_getOverlappingPairs(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGhostObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btGhostObject_getOverlappingPairs__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btGhostObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btGhostObject_getOverlappingPairs__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btGhostObject_getOverlappingPairs'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btGhostObject::getOverlappingPairs()\n"
    "    btGhostObject::getOverlappingPairs() const\n");
  lua_error(L);return 0;
}


static int _wrap_btGhostObject_upcast__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btGhostObject *result = 0 ;
  
  SWIG_check_num_args("btGhostObject::upcast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGhostObject::upcast",1,"btCollisionObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btGhostObject_upcast",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btGhostObject *)btGhostObject::upcast((btCollisionObject const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGhostObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostObject_upcast__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btGhostObject *result = 0 ;
  
  SWIG_check_num_args("btGhostObject::upcast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGhostObject::upcast",1,"btCollisionObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btCollisionObject,0))){
    SWIG_fail_ptr("btGhostObject_upcast",1,SWIGTYPE_p_btCollisionObject);
  }
  
  result = (btGhostObject *)btGhostObject::upcast(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGhostObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostObject_upcast(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btGhostObject_upcast__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btCollisionObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btGhostObject_upcast__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btGhostObject_upcast'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btGhostObject::upcast(btCollisionObject const *)\n"
    "    btGhostObject::upcast(btCollisionObject *)\n");
  lua_error(L);return 0;
}


static void swig_delete_btGhostObject(void *obj) {
btGhostObject *arg1 = (btGhostObject *) obj;
delete arg1;
}
static swig_lua_method swig_btGhostObject_methods[] = {
    {"convexSweepTest", _wrap_btGhostObject_convexSweepTest}, 
    {"rayTest", _wrap_btGhostObject_rayTest}, 
    {"addOverlappingObjectInternal", _wrap_btGhostObject_addOverlappingObjectInternal}, 
    {"removeOverlappingObjectInternal", _wrap_btGhostObject_removeOverlappingObjectInternal}, 
    {"getNumOverlappingObjects", _wrap_btGhostObject_getNumOverlappingObjects}, 
    {"getOverlappingObject", _wrap_btGhostObject_getOverlappingObject}, 
    {"getOverlappingPairs", _wrap_btGhostObject_getOverlappingPairs}, 
    {0,0}
};
static swig_lua_attribute swig_btGhostObject_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btGhostObject_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btGhostObject_cls_methods[] = {
    {"upcast", _wrap_btGhostObject_upcast}, 
    {0,0}
};
static swig_lua_const_info swig_btGhostObject_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btGhostObject_bases[] = {0};
static const char *swig_btGhostObject_base_names[] = {0};
static swig_lua_class _wrap_class_btGhostObject = { "btGhostObject", &SWIGTYPE_p_btGhostObject,_wrap_new_btGhostObject, swig_delete_btGhostObject, swig_btGhostObject_methods, swig_btGhostObject_attributes, { "btGhostObject", swig_btGhostObject_cls_methods, swig_btGhostObject_cls_attributes, swig_btGhostObject_cls_constants }, swig_btGhostObject_bases, swig_btGhostObject_base_names };

static int _wrap_new_btPairCachingGhostObject(lua_State* L) {
  int SWIG_arg = 0;
  btPairCachingGhostObject *result = 0 ;
  
  SWIG_check_num_args("btPairCachingGhostObject::btPairCachingGhostObject",0,0)
  result = (btPairCachingGhostObject *)new btPairCachingGhostObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPairCachingGhostObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPairCachingGhostObject_addOverlappingObjectInternal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btPairCachingGhostObject *arg1 = (btPairCachingGhostObject *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  
  SWIG_check_num_args("btPairCachingGhostObject::addOverlappingObjectInternal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPairCachingGhostObject::addOverlappingObjectInternal",1,"btPairCachingGhostObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPairCachingGhostObject::addOverlappingObjectInternal",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btPairCachingGhostObject::addOverlappingObjectInternal",3,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPairCachingGhostObject,0))){
    SWIG_fail_ptr("btPairCachingGhostObject_addOverlappingObjectInternal",1,SWIGTYPE_p_btPairCachingGhostObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btPairCachingGhostObject_addOverlappingObjectInternal",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btPairCachingGhostObject_addOverlappingObjectInternal",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  (arg1)->addOverlappingObjectInternal(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPairCachingGhostObject_addOverlappingObjectInternal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btPairCachingGhostObject *arg1 = (btPairCachingGhostObject *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  SWIG_check_num_args("btPairCachingGhostObject::addOverlappingObjectInternal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPairCachingGhostObject::addOverlappingObjectInternal",1,"btPairCachingGhostObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPairCachingGhostObject::addOverlappingObjectInternal",2,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPairCachingGhostObject,0))){
    SWIG_fail_ptr("btPairCachingGhostObject_addOverlappingObjectInternal",1,SWIGTYPE_p_btPairCachingGhostObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btPairCachingGhostObject_addOverlappingObjectInternal",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  (arg1)->addOverlappingObjectInternal(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPairCachingGhostObject_addOverlappingObjectInternal(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btPairCachingGhostObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btBroadphaseProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_btPairCachingGhostObject_addOverlappingObjectInternal__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btPairCachingGhostObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btBroadphaseProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btBroadphaseProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btPairCachingGhostObject_addOverlappingObjectInternal__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btPairCachingGhostObject_addOverlappingObjectInternal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btPairCachingGhostObject::addOverlappingObjectInternal(btBroadphaseProxy *,btBroadphaseProxy *)\n"
    "    btPairCachingGhostObject::addOverlappingObjectInternal(btBroadphaseProxy *)\n");
  lua_error(L);return 0;
}


static int _wrap_btPairCachingGhostObject_removeOverlappingObjectInternal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btPairCachingGhostObject *arg1 = (btPairCachingGhostObject *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  btBroadphaseProxy *arg4 = (btBroadphaseProxy *) 0 ;
  
  SWIG_check_num_args("btPairCachingGhostObject::removeOverlappingObjectInternal",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPairCachingGhostObject::removeOverlappingObjectInternal",1,"btPairCachingGhostObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPairCachingGhostObject::removeOverlappingObjectInternal",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btPairCachingGhostObject::removeOverlappingObjectInternal",3,"btDispatcher *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btPairCachingGhostObject::removeOverlappingObjectInternal",4,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPairCachingGhostObject,0))){
    SWIG_fail_ptr("btPairCachingGhostObject_removeOverlappingObjectInternal",1,SWIGTYPE_p_btPairCachingGhostObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btPairCachingGhostObject_removeOverlappingObjectInternal",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btPairCachingGhostObject_removeOverlappingObjectInternal",3,SWIGTYPE_p_btDispatcher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btPairCachingGhostObject_removeOverlappingObjectInternal",4,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  (arg1)->removeOverlappingObjectInternal(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPairCachingGhostObject_removeOverlappingObjectInternal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btPairCachingGhostObject *arg1 = (btPairCachingGhostObject *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btPairCachingGhostObject::removeOverlappingObjectInternal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPairCachingGhostObject::removeOverlappingObjectInternal",1,"btPairCachingGhostObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btPairCachingGhostObject::removeOverlappingObjectInternal",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btPairCachingGhostObject::removeOverlappingObjectInternal",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPairCachingGhostObject,0))){
    SWIG_fail_ptr("btPairCachingGhostObject_removeOverlappingObjectInternal",1,SWIGTYPE_p_btPairCachingGhostObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btPairCachingGhostObject_removeOverlappingObjectInternal",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btPairCachingGhostObject_removeOverlappingObjectInternal",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->removeOverlappingObjectInternal(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btPairCachingGhostObject_removeOverlappingObjectInternal(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btPairCachingGhostObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btBroadphaseProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btDispatcher, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_btPairCachingGhostObject_removeOverlappingObjectInternal__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btPairCachingGhostObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btBroadphaseProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btDispatcher, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btBroadphaseProxy, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_btPairCachingGhostObject_removeOverlappingObjectInternal__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btPairCachingGhostObject_removeOverlappingObjectInternal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    btPairCachingGhostObject::removeOverlappingObjectInternal(btBroadphaseProxy *,btDispatcher *,btBroadphaseProxy *)\n"
    "    btPairCachingGhostObject::removeOverlappingObjectInternal(btBroadphaseProxy *,btDispatcher *)\n");
  lua_error(L);return 0;
}


static int _wrap_btPairCachingGhostObject_getOverlappingPairCache(lua_State* L) {
  int SWIG_arg = 0;
  btPairCachingGhostObject *arg1 = (btPairCachingGhostObject *) 0 ;
  btHashedOverlappingPairCache *result = 0 ;
  
  SWIG_check_num_args("btPairCachingGhostObject::getOverlappingPairCache",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btPairCachingGhostObject::getOverlappingPairCache",1,"btPairCachingGhostObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btPairCachingGhostObject,0))){
    SWIG_fail_ptr("btPairCachingGhostObject_getOverlappingPairCache",1,SWIGTYPE_p_btPairCachingGhostObject);
  }
  
  result = (btHashedOverlappingPairCache *)(arg1)->getOverlappingPairCache();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btHashedOverlappingPairCache,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btPairCachingGhostObject(void *obj) {
btPairCachingGhostObject *arg1 = (btPairCachingGhostObject *) obj;
delete arg1;
}
static swig_lua_method swig_btPairCachingGhostObject_methods[] = {
    {"addOverlappingObjectInternal", _wrap_btPairCachingGhostObject_addOverlappingObjectInternal}, 
    {"removeOverlappingObjectInternal", _wrap_btPairCachingGhostObject_removeOverlappingObjectInternal}, 
    {"getOverlappingPairCache", _wrap_btPairCachingGhostObject_getOverlappingPairCache}, 
    {0,0}
};
static swig_lua_attribute swig_btPairCachingGhostObject_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btPairCachingGhostObject_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btPairCachingGhostObject_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btPairCachingGhostObject_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btPairCachingGhostObject_bases[] = {0,0};
static const char *swig_btPairCachingGhostObject_base_names[] = {"btGhostObject *",0};
static swig_lua_class _wrap_class_btPairCachingGhostObject = { "btPairCachingGhostObject", &SWIGTYPE_p_btPairCachingGhostObject,_wrap_new_btPairCachingGhostObject, swig_delete_btPairCachingGhostObject, swig_btPairCachingGhostObject_methods, swig_btPairCachingGhostObject_attributes, { "btPairCachingGhostObject", swig_btPairCachingGhostObject_cls_methods, swig_btPairCachingGhostObject_cls_attributes, swig_btPairCachingGhostObject_cls_constants }, swig_btPairCachingGhostObject_bases, swig_btPairCachingGhostObject_base_names };

static int _wrap_new_btGhostPairCallback(lua_State* L) {
  int SWIG_arg = 0;
  btGhostPairCallback *result = 0 ;
  
  SWIG_check_num_args("btGhostPairCallback::btGhostPairCallback",0,0)
  result = (btGhostPairCallback *)new btGhostPairCallback();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btGhostPairCallback,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostPairCallback_addOverlappingPair(lua_State* L) {
  int SWIG_arg = 0;
  btGhostPairCallback *arg1 = (btGhostPairCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  SWIG_check_num_args("btGhostPairCallback::addOverlappingPair",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGhostPairCallback::addOverlappingPair",1,"btGhostPairCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGhostPairCallback::addOverlappingPair",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btGhostPairCallback::addOverlappingPair",3,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGhostPairCallback,0))){
    SWIG_fail_ptr("btGhostPairCallback_addOverlappingPair",1,SWIGTYPE_p_btGhostPairCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btGhostPairCallback_addOverlappingPair",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btGhostPairCallback_addOverlappingPair",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (btBroadphasePair *)(arg1)->addOverlappingPair(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBroadphasePair,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostPairCallback_removeOverlappingPair(lua_State* L) {
  int SWIG_arg = 0;
  btGhostPairCallback *arg1 = (btGhostPairCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("btGhostPairCallback::removeOverlappingPair",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGhostPairCallback::removeOverlappingPair",1,"btGhostPairCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGhostPairCallback::removeOverlappingPair",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btGhostPairCallback::removeOverlappingPair",3,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("btGhostPairCallback::removeOverlappingPair",4,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGhostPairCallback,0))){
    SWIG_fail_ptr("btGhostPairCallback_removeOverlappingPair",1,SWIGTYPE_p_btGhostPairCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btGhostPairCallback_removeOverlappingPair",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btGhostPairCallback_removeOverlappingPair",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btGhostPairCallback_removeOverlappingPair",4,SWIGTYPE_p_btDispatcher);
  }
  
  result = (void *)(arg1)->removeOverlappingPair(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btGhostPairCallback_removeOverlappingPairsContainingProxy(lua_State* L) {
  int SWIG_arg = 0;
  btGhostPairCallback *arg1 = (btGhostPairCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  SWIG_check_num_args("btGhostPairCallback::removeOverlappingPairsContainingProxy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btGhostPairCallback::removeOverlappingPairsContainingProxy",1,"btGhostPairCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btGhostPairCallback::removeOverlappingPairsContainingProxy",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("btGhostPairCallback::removeOverlappingPairsContainingProxy",3,"btDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btGhostPairCallback,0))){
    SWIG_fail_ptr("btGhostPairCallback_removeOverlappingPairsContainingProxy",1,SWIGTYPE_p_btGhostPairCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("btGhostPairCallback_removeOverlappingPairsContainingProxy",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btDispatcher,0))){
    SWIG_fail_ptr("btGhostPairCallback_removeOverlappingPairsContainingProxy",3,SWIGTYPE_p_btDispatcher);
  }
  
  (arg1)->removeOverlappingPairsContainingProxy(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btGhostPairCallback(void *obj) {
btGhostPairCallback *arg1 = (btGhostPairCallback *) obj;
delete arg1;
}
static swig_lua_method swig_btGhostPairCallback_methods[] = {
    {"addOverlappingPair", _wrap_btGhostPairCallback_addOverlappingPair}, 
    {"removeOverlappingPair", _wrap_btGhostPairCallback_removeOverlappingPair}, 
    {"removeOverlappingPairsContainingProxy", _wrap_btGhostPairCallback_removeOverlappingPairsContainingProxy}, 
    {0,0}
};
static swig_lua_attribute swig_btGhostPairCallback_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_btGhostPairCallback_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btGhostPairCallback_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btGhostPairCallback_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btGhostPairCallback_bases[] = {0};
static const char *swig_btGhostPairCallback_base_names[] = {0};
static swig_lua_class _wrap_class_btGhostPairCallback = { "btGhostPairCallback", &SWIGTYPE_p_btGhostPairCallback,_wrap_new_btGhostPairCallback, swig_delete_btGhostPairCallback, swig_btGhostPairCallback_methods, swig_btGhostPairCallback_attributes, { "btGhostPairCallback", swig_btGhostPairCallback_cls_methods, swig_btGhostPairCallback_cls_attributes, swig_btGhostPairCallback_cls_constants }, swig_btGhostPairCallback_bases, swig_btGhostPairCallback_base_names };

static int _wrap_btRigidBodyForceWrapper_pRigidBody_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyForceWrapper *arg1 = (btRigidBodyForceWrapper *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  SWIG_check_num_args("btRigidBodyForceWrapper::pRigidBody",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyForceWrapper::pRigidBody",1,"btRigidBodyForceWrapper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyForceWrapper::pRigidBody",2,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyForceWrapper,0))){
    SWIG_fail_ptr("btRigidBodyForceWrapper_pRigidBody_set",1,SWIGTYPE_p_btRigidBodyForceWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("btRigidBodyForceWrapper_pRigidBody_set",2,SWIGTYPE_p_btRigidBody);
  }
  
  if (arg1) (arg1)->pRigidBody = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyForceWrapper_pRigidBody_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyForceWrapper *arg1 = (btRigidBodyForceWrapper *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyForceWrapper::pRigidBody",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyForceWrapper::pRigidBody",1,"btRigidBodyForceWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyForceWrapper,0))){
    SWIG_fail_ptr("btRigidBodyForceWrapper_pRigidBody_get",1,SWIGTYPE_p_btRigidBodyForceWrapper);
  }
  
  result = (btRigidBody *) ((arg1)->pRigidBody);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyForceWrapper_m_LinearForce_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyForceWrapper *arg1 = (btRigidBodyForceWrapper *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btRigidBodyForceWrapper::m_LinearForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyForceWrapper::m_LinearForce",1,"btRigidBodyForceWrapper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyForceWrapper::m_LinearForce",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyForceWrapper,0))){
    SWIG_fail_ptr("btRigidBodyForceWrapper_m_LinearForce_set",1,SWIGTYPE_p_btRigidBodyForceWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBodyForceWrapper_m_LinearForce_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_LinearForce = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyForceWrapper_m_LinearForce_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyForceWrapper *arg1 = (btRigidBodyForceWrapper *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyForceWrapper::m_LinearForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyForceWrapper::m_LinearForce",1,"btRigidBodyForceWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyForceWrapper,0))){
    SWIG_fail_ptr("btRigidBodyForceWrapper_m_LinearForce_get",1,SWIGTYPE_p_btRigidBodyForceWrapper);
  }
  
  result = (btVector3 *)& ((arg1)->m_LinearForce);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyForceWrapper_m_AngularForce_set(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyForceWrapper *arg1 = (btRigidBodyForceWrapper *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("btRigidBodyForceWrapper::m_AngularForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyForceWrapper::m_AngularForce",1,"btRigidBodyForceWrapper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("btRigidBodyForceWrapper::m_AngularForce",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyForceWrapper,0))){
    SWIG_fail_ptr("btRigidBodyForceWrapper_m_AngularForce_set",1,SWIGTYPE_p_btRigidBodyForceWrapper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btRigidBodyForceWrapper_m_AngularForce_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->m_AngularForce = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btRigidBodyForceWrapper_m_AngularForce_get(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyForceWrapper *arg1 = (btRigidBodyForceWrapper *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyForceWrapper::m_AngularForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("btRigidBodyForceWrapper::m_AngularForce",1,"btRigidBodyForceWrapper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btRigidBodyForceWrapper,0))){
    SWIG_fail_ptr("btRigidBodyForceWrapper_m_AngularForce_get",1,SWIGTYPE_p_btRigidBodyForceWrapper);
  }
  
  result = (btVector3 *)& ((arg1)->m_AngularForce);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_btRigidBodyForceWrapper(lua_State* L) {
  int SWIG_arg = 0;
  btRigidBodyForceWrapper *result = 0 ;
  
  SWIG_check_num_args("btRigidBodyForceWrapper::btRigidBodyForceWrapper",0,0)
  result = (btRigidBodyForceWrapper *)new btRigidBodyForceWrapper();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBodyForceWrapper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_btRigidBodyForceWrapper(void *obj) {
btRigidBodyForceWrapper *arg1 = (btRigidBodyForceWrapper *) obj;
delete arg1;
}
static swig_lua_method swig_btRigidBodyForceWrapper_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_btRigidBodyForceWrapper_attributes[] = {
    { "pRigidBody", _wrap_btRigidBodyForceWrapper_pRigidBody_get, _wrap_btRigidBodyForceWrapper_pRigidBody_set},
    { "m_LinearForce", _wrap_btRigidBodyForceWrapper_m_LinearForce_get, _wrap_btRigidBodyForceWrapper_m_LinearForce_set},
    { "m_AngularForce", _wrap_btRigidBodyForceWrapper_m_AngularForce_get, _wrap_btRigidBodyForceWrapper_m_AngularForce_set},
    {0,0,0}
};
static swig_lua_attribute swig_btRigidBodyForceWrapper_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_btRigidBodyForceWrapper_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_btRigidBodyForceWrapper_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_btRigidBodyForceWrapper_bases[] = {0};
static const char *swig_btRigidBodyForceWrapper_base_names[] = {0};
static swig_lua_class _wrap_class_btRigidBodyForceWrapper = { "btRigidBodyForceWrapper", &SWIGTYPE_p_btRigidBodyForceWrapper,_wrap_new_btRigidBodyForceWrapper, swig_delete_btRigidBodyForceWrapper, swig_btRigidBodyForceWrapper_methods, swig_btRigidBodyForceWrapper_attributes, { "btRigidBodyForceWrapper", swig_btRigidBodyForceWrapper_cls_methods, swig_btRigidBodyForceWrapper_cls_attributes, swig_btRigidBodyForceWrapper_cls_constants }, swig_btRigidBodyForceWrapper_bases, swig_btRigidBodyForceWrapper_base_names };

static int _wrap_WorldPhysicsInfo_gravity_set(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysicsInfo *arg1 = (WorldPhysicsInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("WorldPhysicsInfo::gravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysicsInfo::gravity",1,"WorldPhysicsInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WorldPhysicsInfo::gravity",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysicsInfo,0))){
    SWIG_fail_ptr("WorldPhysicsInfo_gravity_set",1,SWIGTYPE_p_WorldPhysicsInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("WorldPhysicsInfo_gravity_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->gravity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysicsInfo_gravity_get(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysicsInfo *arg1 = (WorldPhysicsInfo *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("WorldPhysicsInfo::gravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysicsInfo::gravity",1,"WorldPhysicsInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysicsInfo,0))){
    SWIG_fail_ptr("WorldPhysicsInfo_gravity_get",1,SWIGTYPE_p_WorldPhysicsInfo);
  }
  
  result = (btVector3 *)& ((arg1)->gravity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysicsInfo_worldAabbMin_set(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysicsInfo *arg1 = (WorldPhysicsInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("WorldPhysicsInfo::worldAabbMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysicsInfo::worldAabbMin",1,"WorldPhysicsInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WorldPhysicsInfo::worldAabbMin",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysicsInfo,0))){
    SWIG_fail_ptr("WorldPhysicsInfo_worldAabbMin_set",1,SWIGTYPE_p_WorldPhysicsInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("WorldPhysicsInfo_worldAabbMin_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->worldAabbMin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysicsInfo_worldAabbMin_get(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysicsInfo *arg1 = (WorldPhysicsInfo *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("WorldPhysicsInfo::worldAabbMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysicsInfo::worldAabbMin",1,"WorldPhysicsInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysicsInfo,0))){
    SWIG_fail_ptr("WorldPhysicsInfo_worldAabbMin_get",1,SWIGTYPE_p_WorldPhysicsInfo);
  }
  
  result = (btVector3 *)& ((arg1)->worldAabbMin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysicsInfo_worldAabbMax_set(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysicsInfo *arg1 = (WorldPhysicsInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  SWIG_check_num_args("WorldPhysicsInfo::worldAabbMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysicsInfo::worldAabbMax",1,"WorldPhysicsInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WorldPhysicsInfo::worldAabbMax",2,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysicsInfo,0))){
    SWIG_fail_ptr("WorldPhysicsInfo_worldAabbMax_set",1,SWIGTYPE_p_WorldPhysicsInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("WorldPhysicsInfo_worldAabbMax_set",2,SWIGTYPE_p_btVector3);
  }
  
  if (arg1) (arg1)->worldAabbMax = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysicsInfo_worldAabbMax_get(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysicsInfo *arg1 = (WorldPhysicsInfo *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("WorldPhysicsInfo::worldAabbMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysicsInfo::worldAabbMax",1,"WorldPhysicsInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysicsInfo,0))){
    SWIG_fail_ptr("WorldPhysicsInfo_worldAabbMax_get",1,SWIGTYPE_p_WorldPhysicsInfo);
  }
  
  result = (btVector3 *)& ((arg1)->worldAabbMax);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WorldPhysicsInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  WorldPhysicsInfo *result = 0 ;
  
  SWIG_check_num_args("WorldPhysicsInfo::WorldPhysicsInfo",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WorldPhysicsInfo::WorldPhysicsInfo",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("WorldPhysicsInfo::WorldPhysicsInfo",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("WorldPhysicsInfo::WorldPhysicsInfo",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_WorldPhysicsInfo",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_WorldPhysicsInfo",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_WorldPhysicsInfo",3,SWIGTYPE_p_btVector3);
  }
  
  result = (WorldPhysicsInfo *)new WorldPhysicsInfo((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WorldPhysicsInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WorldPhysicsInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  WorldPhysicsInfo *result = 0 ;
  
  SWIG_check_num_args("WorldPhysicsInfo::WorldPhysicsInfo",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WorldPhysicsInfo::WorldPhysicsInfo",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("WorldPhysicsInfo::WorldPhysicsInfo",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_WorldPhysicsInfo",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_WorldPhysicsInfo",2,SWIGTYPE_p_btVector3);
  }
  
  result = (WorldPhysicsInfo *)new WorldPhysicsInfo((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WorldPhysicsInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WorldPhysicsInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  WorldPhysicsInfo *result = 0 ;
  
  SWIG_check_num_args("WorldPhysicsInfo::WorldPhysicsInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WorldPhysicsInfo::WorldPhysicsInfo",1,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_WorldPhysicsInfo",1,SWIGTYPE_p_btVector3);
  }
  
  result = (WorldPhysicsInfo *)new WorldPhysicsInfo((btVector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WorldPhysicsInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WorldPhysicsInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysicsInfo *result = 0 ;
  
  SWIG_check_num_args("WorldPhysicsInfo::WorldPhysicsInfo",0,0)
  result = (WorldPhysicsInfo *)new WorldPhysicsInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WorldPhysicsInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WorldPhysicsInfo(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_WorldPhysicsInfo__SWIG_3(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_WorldPhysicsInfo__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_WorldPhysicsInfo__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_WorldPhysicsInfo__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_WorldPhysicsInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    WorldPhysicsInfo::WorldPhysicsInfo(btVector3 const &,btVector3 const &,btVector3 const &)\n"
    "    WorldPhysicsInfo::WorldPhysicsInfo(btVector3 const &,btVector3 const &)\n"
    "    WorldPhysicsInfo::WorldPhysicsInfo(btVector3 const &)\n"
    "    WorldPhysicsInfo::WorldPhysicsInfo()\n");
  lua_error(L);return 0;
}


static void swig_delete_WorldPhysicsInfo(void *obj) {
WorldPhysicsInfo *arg1 = (WorldPhysicsInfo *) obj;
delete arg1;
}
static swig_lua_method swig_WorldPhysicsInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_WorldPhysicsInfo_attributes[] = {
    { "gravity", _wrap_WorldPhysicsInfo_gravity_get, _wrap_WorldPhysicsInfo_gravity_set},
    { "worldAabbMin", _wrap_WorldPhysicsInfo_worldAabbMin_get, _wrap_WorldPhysicsInfo_worldAabbMin_set},
    { "worldAabbMax", _wrap_WorldPhysicsInfo_worldAabbMax_get, _wrap_WorldPhysicsInfo_worldAabbMax_set},
    {0,0,0}
};
static swig_lua_attribute swig_WorldPhysicsInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WorldPhysicsInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_WorldPhysicsInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_WorldPhysicsInfo_bases[] = {0};
static const char *swig_WorldPhysicsInfo_base_names[] = {0};
static swig_lua_class _wrap_class_WorldPhysicsInfo = { "WorldPhysicsInfo", &SWIGTYPE_p_WorldPhysicsInfo,_wrap_new_WorldPhysicsInfo, swig_delete_WorldPhysicsInfo, swig_WorldPhysicsInfo_methods, swig_WorldPhysicsInfo_attributes, { "WorldPhysicsInfo", swig_WorldPhysicsInfo_cls_methods, swig_WorldPhysicsInfo_cls_attributes, swig_WorldPhysicsInfo_cls_constants }, swig_WorldPhysicsInfo_bases, swig_WorldPhysicsInfo_base_names };

static int _wrap_new_CustomFilterCallback(lua_State* L) {
  int SWIG_arg = 0;
  CustomFilterCallback *result = 0 ;
  
  SWIG_check_num_args("CustomFilterCallback::CustomFilterCallback",0,0)
  result = (CustomFilterCallback *)new CustomFilterCallback();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CustomFilterCallback,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CustomFilterCallback_needBroadphaseCollision(lua_State* L) {
  int SWIG_arg = 0;
  CustomFilterCallback *arg1 = (CustomFilterCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  SWIG_check_num_args("CustomFilterCallback::needBroadphaseCollision",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CustomFilterCallback::needBroadphaseCollision",1,"CustomFilterCallback const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CustomFilterCallback::needBroadphaseCollision",2,"btBroadphaseProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CustomFilterCallback::needBroadphaseCollision",3,"btBroadphaseProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CustomFilterCallback,0))){
    SWIG_fail_ptr("CustomFilterCallback_needBroadphaseCollision",1,SWIGTYPE_p_CustomFilterCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("CustomFilterCallback_needBroadphaseCollision",2,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btBroadphaseProxy,0))){
    SWIG_fail_ptr("CustomFilterCallback_needBroadphaseCollision",3,SWIGTYPE_p_btBroadphaseProxy);
  }
  
  result = (bool)((CustomFilterCallback const *)arg1)->needBroadphaseCollision(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CustomFilterCallback(void *obj) {
CustomFilterCallback *arg1 = (CustomFilterCallback *) obj;
delete arg1;
}
static swig_lua_method swig_CustomFilterCallback_methods[] = {
    {"needBroadphaseCollision", _wrap_CustomFilterCallback_needBroadphaseCollision}, 
    {0,0}
};
static swig_lua_attribute swig_CustomFilterCallback_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_CustomFilterCallback_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CustomFilterCallback_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_CustomFilterCallback_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_CustomFilterCallback_bases[] = {0};
static const char *swig_CustomFilterCallback_base_names[] = {0};
static swig_lua_class _wrap_class_CustomFilterCallback = { "CustomFilterCallback", &SWIGTYPE_p_CustomFilterCallback,_wrap_new_CustomFilterCallback, swig_delete_CustomFilterCallback, swig_CustomFilterCallback_methods, swig_CustomFilterCallback_attributes, { "CustomFilterCallback", swig_CustomFilterCallback_cls_methods, swig_CustomFilterCallback_cls_attributes, swig_CustomFilterCallback_cls_constants }, swig_CustomFilterCallback_bases, swig_CustomFilterCallback_base_names };

static int _wrap_WorldPhysics_createInstance__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysicsInfo *arg1 = 0 ;
  
  SWIG_check_num_args("WorldPhysics::createInstance",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WorldPhysics::createInstance",1,"WorldPhysicsInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysicsInfo,0))){
    SWIG_fail_ptr("WorldPhysics_createInstance",1,SWIGTYPE_p_WorldPhysicsInfo);
  }
  
  WorldPhysics::createInstance((WorldPhysicsInfo const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_createInstance__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("WorldPhysics::createInstance",0,0)
  WorldPhysics::createInstance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_createInstance(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_WorldPhysics_createInstance__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_WorldPhysicsInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_WorldPhysics_createInstance__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldPhysics_createInstance'\n"
    "  Possible C/C++ prototypes are:\n"
    "    WorldPhysics::createInstance(WorldPhysicsInfo const &)\n"
    "    WorldPhysics::createInstance()\n");
  lua_error(L);return 0;
}


static int _wrap_WorldPhysics_getInstance(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *result = 0 ;
  
  SWIG_check_num_args("WorldPhysics::getInstance",0,0)
  result = (WorldPhysics *)WorldPhysics::getInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WorldPhysics,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_destroyInstance(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("WorldPhysics::destroyInstance",0,0)
  WorldPhysics::destroyInstance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_update(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  
  SWIG_check_num_args("WorldPhysics::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::update",1,"WorldPhysics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_update",1,SWIGTYPE_p_WorldPhysics);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_render(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  
  SWIG_check_num_args("WorldPhysics::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::render",1,"WorldPhysics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_render",1,SWIGTYPE_p_WorldPhysics);
  }
  
  (arg1)->render();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_initDebugDrawWorld(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  
  SWIG_check_num_args("WorldPhysics::initDebugDrawWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::initDebugDrawWorld",1,"WorldPhysics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_initDebugDrawWorld",1,SWIGTYPE_p_WorldPhysics);
  }
  
  (arg1)->initDebugDrawWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_debugDrawWorld(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  
  SWIG_check_num_args("WorldPhysics::debugDrawWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::debugDrawWorld",1,"WorldPhysics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_debugDrawWorld",1,SWIGTYPE_p_WorldPhysics);
  }
  
  (arg1)->debugDrawWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_isActionObject(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("WorldPhysics::isActionObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::isActionObject",1,"WorldPhysics *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WorldPhysics::isActionObject",2,"BaseEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_isActionObject",1,SWIGTYPE_p_WorldPhysics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("WorldPhysics_isActionObject",2,SWIGTYPE_p_BaseEntity);
  }
  
  result = (bool)(arg1)->isActionObject(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_addActionObject(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  SWIG_check_num_args("WorldPhysics::addActionObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::addActionObject",1,"WorldPhysics *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WorldPhysics::addActionObject",2,"btActionInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_addActionObject",1,SWIGTYPE_p_WorldPhysics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btActionInterface,0))){
    SWIG_fail_ptr("WorldPhysics_addActionObject",2,SWIGTYPE_p_btActionInterface);
  }
  
  (arg1)->addActionObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_removeActionObject(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  SWIG_check_num_args("WorldPhysics::removeActionObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::removeActionObject",1,"WorldPhysics *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WorldPhysics::removeActionObject",2,"btActionInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_removeActionObject",1,SWIGTYPE_p_WorldPhysics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btActionInterface,0))){
    SWIG_fail_ptr("WorldPhysics_removeActionObject",2,SWIGTYPE_p_btActionInterface);
  }
  
  (arg1)->removeActionObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_addRigidBody(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  RigidEntity *arg2 = (RigidEntity *) 0 ;
  btTransform *arg3 = 0 ;
  btScalar arg4 ;
  IDType arg5 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("WorldPhysics::addRigidBody",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::addRigidBody",1,"WorldPhysics *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WorldPhysics::addRigidBody",2,"RigidEntity *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("WorldPhysics::addRigidBody",3,"btTransform const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("WorldPhysics::addRigidBody",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("WorldPhysics::addRigidBody",5,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_addRigidBody",1,SWIGTYPE_p_WorldPhysics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RigidEntity,0))){
    SWIG_fail_ptr("WorldPhysics_addRigidBody",2,SWIGTYPE_p_RigidEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("WorldPhysics_addRigidBody",3,SWIGTYPE_p_btTransform);
  }
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (IDType)lua_tonumber(L, 5);
  result = (btRigidBody *)(arg1)->addRigidBody(arg2,(btTransform const &)*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_removeRigidBody(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  SWIG_check_num_args("WorldPhysics::removeRigidBody",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::removeRigidBody",1,"WorldPhysics *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WorldPhysics::removeRigidBody",2,"btRigidBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_removeRigidBody",1,SWIGTYPE_p_WorldPhysics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btRigidBody,0))){
    SWIG_fail_ptr("WorldPhysics_removeRigidBody",2,SWIGTYPE_p_btRigidBody);
  }
  
  (arg1)->removeRigidBody(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_addGhostObject(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  GhostEntity *arg2 = (GhostEntity *) 0 ;
  IDType arg3 ;
  btPairCachingGhostObject *result = 0 ;
  
  SWIG_check_num_args("WorldPhysics::addGhostObject",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::addGhostObject",1,"WorldPhysics *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WorldPhysics::addGhostObject",2,"GhostEntity *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("WorldPhysics::addGhostObject",3,"IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_addGhostObject",1,SWIGTYPE_p_WorldPhysics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GhostEntity,0))){
    SWIG_fail_ptr("WorldPhysics_addGhostObject",2,SWIGTYPE_p_GhostEntity);
  }
  
  arg3 = (IDType)lua_tonumber(L, 3);
  result = (btPairCachingGhostObject *)(arg1)->addGhostObject(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPairCachingGhostObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_removeGhostObject(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  btPairCachingGhostObject *arg2 = (btPairCachingGhostObject *) 0 ;
  
  SWIG_check_num_args("WorldPhysics::removeGhostObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::removeGhostObject",1,"WorldPhysics *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WorldPhysics::removeGhostObject",2,"btPairCachingGhostObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_removeGhostObject",1,SWIGTYPE_p_WorldPhysics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btPairCachingGhostObject,0))){
    SWIG_fail_ptr("WorldPhysics_removeGhostObject",2,SWIGTYPE_p_btPairCachingGhostObject);
  }
  
  (arg1)->removeGhostObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_ghostObjectCollisionTest(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  
  SWIG_check_num_args("WorldPhysics::ghostObjectCollisionTest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::ghostObjectCollisionTest",1,"WorldPhysics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_ghostObjectCollisionTest",1,SWIGTYPE_p_WorldPhysics);
  }
  
  (arg1)->ghostObjectCollisionTest();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_applyWorldForces(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  
  SWIG_check_num_args("WorldPhysics::applyWorldForces",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::applyWorldForces",1,"WorldPhysics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_applyWorldForces",1,SWIGTYPE_p_WorldPhysics);
  }
  
  (arg1)->applyWorldForces();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_addSoftBody(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  SoftEntity *arg2 = (SoftEntity *) 0 ;
  btTransform *arg3 = 0 ;
  btScalar arg4 ;
  btSoftBody *result = 0 ;
  
  SWIG_check_num_args("WorldPhysics::addSoftBody",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::addSoftBody",1,"WorldPhysics *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WorldPhysics::addSoftBody",2,"SoftEntity *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("WorldPhysics::addSoftBody",3,"btTransform const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("WorldPhysics::addSoftBody",4,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_addSoftBody",1,SWIGTYPE_p_WorldPhysics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoftEntity,0))){
    SWIG_fail_ptr("WorldPhysics_addSoftBody",2,SWIGTYPE_p_SoftEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("WorldPhysics_addSoftBody",3,SWIGTYPE_p_btTransform);
  }
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  result = (btSoftBody *)(arg1)->addSoftBody(arg2,(btTransform const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_removeSoftBody(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  btSoftBody *arg2 = (btSoftBody *) 0 ;
  
  SWIG_check_num_args("WorldPhysics::removeSoftBody",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::removeSoftBody",1,"WorldPhysics *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WorldPhysics::removeSoftBody",2,"btSoftBody *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_removeSoftBody",1,SWIGTYPE_p_WorldPhysics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBody,0))){
    SWIG_fail_ptr("WorldPhysics_removeSoftBody",2,SWIGTYPE_p_btSoftBody);
  }
  
  (arg1)->removeSoftBody(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_setGravity(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("WorldPhysics::setGravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::setGravity",1,"WorldPhysics *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("WorldPhysics::setGravity",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_setGravity",1,SWIGTYPE_p_WorldPhysics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("WorldPhysics_setGravity",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setGravity((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_getFrictionAbs(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("WorldPhysics::getFrictionAbs",0,0)
  result = (float)WorldPhysics::getFrictionAbs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_enableContinuousCollisionDetection__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("WorldPhysics::enableContinuousCollisionDetection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::enableContinuousCollisionDetection",1,"WorldPhysics *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("WorldPhysics::enableContinuousCollisionDetection",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_enableContinuousCollisionDetection",1,SWIGTYPE_p_WorldPhysics);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableContinuousCollisionDetection(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_enableContinuousCollisionDetection__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  
  SWIG_check_num_args("WorldPhysics::enableContinuousCollisionDetection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::enableContinuousCollisionDetection",1,"WorldPhysics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_enableContinuousCollisionDetection",1,SWIGTYPE_p_WorldPhysics);
  }
  
  (arg1)->enableContinuousCollisionDetection();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldPhysics_enableContinuousCollisionDetection(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_WorldPhysics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_WorldPhysics_enableContinuousCollisionDetection__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_WorldPhysics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_WorldPhysics_enableContinuousCollisionDetection__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldPhysics_enableContinuousCollisionDetection'\n"
    "  Possible C/C++ prototypes are:\n"
    "    WorldPhysics::enableContinuousCollisionDetection(bool)\n"
    "    WorldPhysics::enableContinuousCollisionDetection()\n");
  lua_error(L);return 0;
}


static int _wrap_WorldPhysics_isContinuousCollisionDetectionEnabled(lua_State* L) {
  int SWIG_arg = 0;
  WorldPhysics *arg1 = (WorldPhysics *) 0 ;
  bool result;
  
  SWIG_check_num_args("WorldPhysics::isContinuousCollisionDetectionEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WorldPhysics::isContinuousCollisionDetectionEnabled",1,"WorldPhysics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WorldPhysics,0))){
    SWIG_fail_ptr("WorldPhysics_isContinuousCollisionDetectionEnabled",1,SWIGTYPE_p_WorldPhysics);
  }
  
  result = (bool)((WorldPhysics const *)arg1)->isContinuousCollisionDetectionEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_WorldPhysics_methods[] = {
    {"update", _wrap_WorldPhysics_update}, 
    {"render", _wrap_WorldPhysics_render}, 
    {"initDebugDrawWorld", _wrap_WorldPhysics_initDebugDrawWorld}, 
    {"debugDrawWorld", _wrap_WorldPhysics_debugDrawWorld}, 
    {"isActionObject", _wrap_WorldPhysics_isActionObject}, 
    {"addActionObject", _wrap_WorldPhysics_addActionObject}, 
    {"removeActionObject", _wrap_WorldPhysics_removeActionObject}, 
    {"addRigidBody", _wrap_WorldPhysics_addRigidBody}, 
    {"removeRigidBody", _wrap_WorldPhysics_removeRigidBody}, 
    {"addGhostObject", _wrap_WorldPhysics_addGhostObject}, 
    {"removeGhostObject", _wrap_WorldPhysics_removeGhostObject}, 
    {"ghostObjectCollisionTest", _wrap_WorldPhysics_ghostObjectCollisionTest}, 
    {"applyWorldForces", _wrap_WorldPhysics_applyWorldForces}, 
    {"addSoftBody", _wrap_WorldPhysics_addSoftBody}, 
    {"removeSoftBody", _wrap_WorldPhysics_removeSoftBody}, 
    {"setGravity", _wrap_WorldPhysics_setGravity}, 
    {"enableContinuousCollisionDetection", _wrap_WorldPhysics_enableContinuousCollisionDetection}, 
    {"isContinuousCollisionDetectionEnabled", _wrap_WorldPhysics_isContinuousCollisionDetectionEnabled}, 
    {0,0}
};
static swig_lua_attribute swig_WorldPhysics_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_WorldPhysics_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WorldPhysics_cls_methods[] = {
    {"createInstance", _wrap_WorldPhysics_createInstance}, 
    {"getInstance", _wrap_WorldPhysics_getInstance}, 
    {"destroyInstance", _wrap_WorldPhysics_destroyInstance}, 
    {"getFrictionAbs", _wrap_WorldPhysics_getFrictionAbs}, 
    {0,0}
};
static swig_lua_const_info swig_WorldPhysics_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_WorldPhysics_bases[] = {0};
static const char *swig_WorldPhysics_base_names[] = {0};
static swig_lua_class _wrap_class_WorldPhysics = { "WorldPhysics", &SWIGTYPE_p_WorldPhysics,0,0, swig_WorldPhysics_methods, swig_WorldPhysics_attributes, { "WorldPhysics", swig_WorldPhysics_cls_methods, swig_WorldPhysics_cls_attributes, swig_WorldPhysics_cls_constants }, swig_WorldPhysics_bases, swig_WorldPhysics_base_names };

static int _wrap_randomInteger(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("randomInteger",0,0)
  result = (int)randomInteger();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randomIntegerRange(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("randomIntegerRange",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("randomIntegerRange",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("randomIntegerRange",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)randomIntegerRange(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randomScalar(lua_State* L) {
  int SWIG_arg = 0;
  btScalar result;
  
  SWIG_check_num_args("randomScalar",0,0)
  result = (btScalar)randomScalar();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randomScalarInRange(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar result;
  
  SWIG_check_num_args("randomScalarInRange",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("randomScalarInRange",1,"btScalar");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("randomScalarInRange",2,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  arg2 = (btScalar)lua_tonumber(L, 2);
  result = (btScalar)randomScalarInRange(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randomBool(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("randomBool",0,0)
  result = (bool)randomBool();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randomScalarClamped(lua_State* L) {
  int SWIG_arg = 0;
  btScalar result;
  
  SWIG_check_num_args("randomScalarClamped",0,0)
  result = (btScalar)randomScalarClamped();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RADIANS_TO_DEGREES(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar result;
  
  SWIG_check_num_args("RADIANS_TO_DEGREES",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RADIANS_TO_DEGREES",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (btScalar)RADIANS_TO_DEGREES(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DEGREES_TO_RADIANS(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar result;
  
  SWIG_check_num_args("DEGREES_TO_RADIANS",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DEGREES_TO_RADIANS",1,"btScalar");
  arg1 = (btScalar)lua_tonumber(L, 1);
  result = (btScalar)DEGREES_TO_RADIANS(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_g_vYawAxis_get(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("g_vYawAxis",0,0)
  result = (btVector3 *)&g_vYawAxis;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_g_vRollAxis_get(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("g_vRollAxis",0,0)
  result = (btVector3 *)&g_vRollAxis;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_g_vPitchAxis_get(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("g_vPitchAxis",0,0)
  result = (btVector3 *)&g_vPitchAxis;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_g_vSideVector_get(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("g_vSideVector",0,0)
  result = (btVector3 *)&g_vSideVector;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_g_vUpVector_get(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("g_vUpVector",0,0)
  result = (btVector3 *)&g_vUpVector;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_g_vHeadingVector_get(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("g_vHeadingVector",0,0)
  result = (btVector3 *)&g_vHeadingVector;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_planeLineIntersection(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = (btVector3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("planeLineIntersection",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("planeLineIntersection",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("planeLineIntersection",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("planeLineIntersection",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("planeLineIntersection",4,"btVector3 const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("planeLineIntersection",5,"btVector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("planeLineIntersection",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("planeLineIntersection",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("planeLineIntersection",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("planeLineIntersection",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("planeLineIntersection",5,SWIGTYPE_p_btVector3);
  }
  
  result = (bool)planeLineIntersection((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pointToWorldSpace(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("pointToWorldSpace",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("pointToWorldSpace",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pointToWorldSpace",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("pointToWorldSpace",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("pointToWorldSpace",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("pointToWorldSpace",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("pointToWorldSpace",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("pointToWorldSpace",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("pointToWorldSpace",4,SWIGTYPE_p_btVector3);
  }
  
  result = pointToWorldSpace((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getGLKMatrix4(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = 0 ;
  GLKMatrix4 result;
  
  SWIG_check_num_args("getGLKMatrix4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("getGLKMatrix4",1,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("getGLKMatrix4",1,SWIGTYPE_p_btTransform);
  }
  
  result = getGLKMatrix4((btTransform const &)*arg1);
  {
    GLKMatrix4 * resultptr = new GLKMatrix4((const GLKMatrix4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLKMatrix4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getbtTransform(lua_State* L) {
  int SWIG_arg = 0;
  GLKMatrix4 *arg1 = 0 ;
  btTransform result;
  
  SWIG_check_num_args("getbtTransform",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("getbtTransform",1,"GLKMatrix4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GLKMatrix4,0))){
    SWIG_fail_ptr("getbtTransform",1,SWIGTYPE_p_GLKMatrix4);
  }
  
  result = getbtTransform((GLKMatrix4 const &)*arg1);
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fixAngle(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btScalar result;
  
  SWIG_check_num_args("fixAngle",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fixAngle",1,"btScalar const");
  arg1 = (btScalar const)lua_tonumber(L, 1);
  result = (btScalar)fixAngle(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fixVector3(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("fixVector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("fixVector3",1,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("fixVector3",1,SWIGTYPE_p_btVector3);
  }
  
  result = fixVector3((btVector3 const &)*arg1);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VERTEX_SHADER_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("VERTEX_SHADER",0,0)
  result = (char *)(char *)VERTEX_SHADER;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FRAGMENT_SHADER_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("FRAGMENT_SHADER",0,0)
  result = (char *)(char *)FRAGMENT_SHADER;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CHARLEN_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("DebugString::CHARLEN",0,0)
  result = (int)(int)DebugString::CHARLEN;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  
  SWIG_check_num_args("DebugString::log",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DebugString::log",1,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("log",1,SWIGTYPE_p_std__string);
  }
  
  DebugString::log((std::string const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_boolStr(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  std::string result;
  
  SWIG_check_num_args("DebugString::boolStr",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("DebugString::boolStr",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  result = DebugString::boolStr(arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVectorStr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  bool arg2 ;
  std::string result;
  
  SWIG_check_num_args("DebugString::btVectorStr",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DebugString::btVectorStr",1,"btVector3 const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("DebugString::btVectorStr",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVectorStr",1,SWIGTYPE_p_btVector3);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = DebugString::btVectorStr((btVector3 const &)*arg1,arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVectorStr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  std::string result;
  
  SWIG_check_num_args("DebugString::btVectorStr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DebugString::btVectorStr",1,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("btVectorStr",1,SWIGTYPE_p_btVector3);
  }
  
  result = DebugString::btVectorStr((btVector3 const &)*arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btVectorStr(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_btVectorStr__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_btVectorStr__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'btVectorStr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DebugString::btVectorStr(btVector3 const &,bool const)\n"
    "    DebugString::btVectorStr(btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_btScalarStr(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  std::string result;
  
  SWIG_check_num_args("DebugString::btScalarStr",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DebugString::btScalarStr",1,"btScalar const");
  arg1 = (btScalar const)lua_tonumber(L, 1);
  result = DebugString::btScalarStr(arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLKMatrix3Str(lua_State* L) {
  int SWIG_arg = 0;
  GLKMatrix3 arg1 ;
  GLKMatrix3 *argp1 ;
  std::string result;
  
  SWIG_check_num_args("DebugString::GLKMatrix3Str",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DebugString::GLKMatrix3Str",1,"GLKMatrix3 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_GLKMatrix3,0))){
    SWIG_fail_ptr("GLKMatrix3Str",1,SWIGTYPE_p_GLKMatrix3);
  }
  arg1 = *argp1;
  
  result = DebugString::GLKMatrix3Str(arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLKMatrix4Str(lua_State* L) {
  int SWIG_arg = 0;
  GLKMatrix4 arg1 ;
  GLKMatrix4 *argp1 ;
  std::string result;
  
  SWIG_check_num_args("DebugString::GLKMatrix4Str",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DebugString::GLKMatrix4Str",1,"GLKMatrix4 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_GLKMatrix4,0))){
    SWIG_fail_ptr("GLKMatrix4Str",1,SWIGTYPE_p_GLKMatrix4);
  }
  arg1 = *argp1;
  
  result = DebugString::GLKMatrix4Str(arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btMatrix3x3Str(lua_State* L) {
  int SWIG_arg = 0;
  btMatrix3x3 *arg1 = 0 ;
  std::string result;
  
  SWIG_check_num_args("DebugString::btMatrix3x3Str",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DebugString::btMatrix3x3Str",1,"btMatrix3x3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btMatrix3x3,0))){
    SWIG_fail_ptr("btMatrix3x3Str",1,SWIGTYPE_p_btMatrix3x3);
  }
  
  result = DebugString::btMatrix3x3Str((btMatrix3x3 const &)*arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btTransformStr(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = 0 ;
  std::string result;
  
  SWIG_check_num_args("DebugString::btTransformStr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DebugString::btTransformStr",1,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("btTransformStr",1,SWIGTYPE_p_btTransform);
  }
  
  result = DebugString::btTransformStr((btTransform const &)*arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_btManifoldPointStr(lua_State* L) {
  int SWIG_arg = 0;
  btManifoldPoint *arg1 = 0 ;
  std::string result;
  
  SWIG_check_num_args("DebugString::btManifoldPointStr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DebugString::btManifoldPointStr",1,"btManifoldPoint const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btManifoldPoint,0))){
    SWIG_fail_ptr("btManifoldPointStr",1,SWIGTYPE_p_btManifoldPoint);
  }
  
  result = DebugString::btManifoldPointStr((btManifoldPoint const &)*arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createPitchRotation(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btQuaternion result;
  
  SWIG_check_num_args("createPitchRotation",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("createPitchRotation",1,"btScalar const");
  arg1 = (btScalar const)lua_tonumber(L, 1);
  result = createPitchRotation(arg1);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createYawRotation(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btQuaternion result;
  
  SWIG_check_num_args("createYawRotation",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("createYawRotation",1,"btScalar const");
  arg1 = (btScalar const)lua_tonumber(L, 1);
  result = createYawRotation(arg1);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createRollRotation(lua_State* L) {
  int SWIG_arg = 0;
  btScalar arg1 ;
  btQuaternion result;
  
  SWIG_check_num_args("createRollRotation",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("createRollRotation",1,"btScalar const");
  arg1 = (btScalar const)lua_tonumber(L, 1);
  result = createRollRotation(arg1);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriNormal(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("TriNormal",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TriNormal",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TriNormal",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TriNormal",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TriNormal",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TriNormal",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("TriNormal",3,SWIGTYPE_p_btVector3);
  }
  
  result = TriNormal((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ltrim(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("ltrim",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ltrim",1,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ltrim",1,SWIGTYPE_p_std__string);
  }
  
  result = (std::string *) &ltrim(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rtrim(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("rtrim",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("rtrim",1,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("rtrim",1,SWIGTYPE_p_std__string);
  }
  
  result = (std::string *) &rtrim(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_trim(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("trim",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("trim",1,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("trim",1,SWIGTYPE_p_std__string);
  }
  
  result = (std::string *) &trim(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_deCasteljauPoint(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  btAlignedObjectArray< btVector3 > *arg4 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("deCasteljauPoint",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("deCasteljauPoint",1,"int const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("deCasteljauPoint",2,"int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("deCasteljauPoint",3,"double const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("deCasteljauPoint",4,"btAlignedObjectArray< btVector3 > const &");
  arg1 = (int const)lua_tonumber(L, 1);
  arg2 = (int const)lua_tonumber(L, 2);
  arg3 = (double const)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t,0))){
    SWIG_fail_ptr("deCasteljauPoint",4,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t);
  }
  
  result = deCasteljauPoint(arg1,arg2,arg3,(btAlignedObjectArray< btVector3 > const &)*arg4);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calculateBezierPoint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  btAlignedObjectArray< btVector3 > *arg2 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("calculateBezierPoint",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("calculateBezierPoint",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("calculateBezierPoint",2,"btAlignedObjectArray< btVector3 > const &");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t,0))){
    SWIG_fail_ptr("calculateBezierPoint",2,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t);
  }
  
  result = calculateBezierPoint(arg1,(btAlignedObjectArray< btVector3 > const &)*arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calculateBezierPoint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("calculateBezierPoint",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("calculateBezierPoint",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("calculateBezierPoint",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("calculateBezierPoint",3,"btVector3 const &");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("calculateBezierPoint",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("calculateBezierPoint",3,SWIGTYPE_p_btVector3);
  }
  
  result = calculateBezierPoint(arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calculateBezierPoint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("calculateBezierPoint",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("calculateBezierPoint",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("calculateBezierPoint",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("calculateBezierPoint",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("calculateBezierPoint",4,"btVector3 const &");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("calculateBezierPoint",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("calculateBezierPoint",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("calculateBezierPoint",4,SWIGTYPE_p_btVector3);
  }
  
  result = calculateBezierPoint(arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calculateBezierPoint__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 result;
  
  SWIG_check_num_args("calculateBezierPoint",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("calculateBezierPoint",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("calculateBezierPoint",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("calculateBezierPoint",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("calculateBezierPoint",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("calculateBezierPoint",5,"btVector3 const &");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("calculateBezierPoint",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("calculateBezierPoint",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("calculateBezierPoint",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("calculateBezierPoint",5,SWIGTYPE_p_btVector3);
  }
  
  result = calculateBezierPoint(arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_calculateBezierPoint(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_calculateBezierPoint__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_calculateBezierPoint__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_calculateBezierPoint__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_calculateBezierPoint__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'calculateBezierPoint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    calculateBezierPoint(float,btAlignedObjectArray< btVector3 > const &)\n"
    "    calculateBezierPoint(float,btVector3 const &,btVector3 const &)\n"
    "    calculateBezierPoint(float,btVector3 const &,btVector3 const &,btVector3 const &)\n"
    "    calculateBezierPoint(float,btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap__check_gl_error(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("_check_gl_error",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("_check_gl_error",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("_check_gl_error",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("_check_gl_error",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  _check_gl_error((char const *)arg1,arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WeightedSteeringBehavior(lua_State* L) {
  int SWIG_arg = 0;
  WeightedSteeringBehaviorInfo *arg1 = 0 ;
  WeightedSteeringBehavior *result = 0 ;
  
  SWIG_check_num_args("WeightedSteeringBehavior::WeightedSteeringBehavior",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("WeightedSteeringBehavior::WeightedSteeringBehavior",1,"WeightedSteeringBehaviorInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WeightedSteeringBehaviorInfo,0))){
    SWIG_fail_ptr("new_WeightedSteeringBehavior",1,SWIGTYPE_p_WeightedSteeringBehaviorInfo);
  }
  
  result = (WeightedSteeringBehavior *)new WeightedSteeringBehavior((WeightedSteeringBehaviorInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WeightedSteeringBehavior,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WeightedSteeringBehavior_sumLinearSteering(lua_State* L) {
  int SWIG_arg = 0;
  WeightedSteeringBehavior *arg1 = (WeightedSteeringBehavior *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("WeightedSteeringBehavior::sumLinearSteering",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WeightedSteeringBehavior::sumLinearSteering",1,"WeightedSteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WeightedSteeringBehavior,0))){
    SWIG_fail_ptr("WeightedSteeringBehavior_sumLinearSteering",1,SWIGTYPE_p_WeightedSteeringBehavior);
  }
  
  result = (arg1)->sumLinearSteering();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WeightedSteeringBehavior_sumAngularSteering(lua_State* L) {
  int SWIG_arg = 0;
  WeightedSteeringBehavior *arg1 = (WeightedSteeringBehavior *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("WeightedSteeringBehavior::sumAngularSteering",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WeightedSteeringBehavior::sumAngularSteering",1,"WeightedSteeringBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WeightedSteeringBehavior,0))){
    SWIG_fail_ptr("WeightedSteeringBehavior_sumAngularSteering",1,SWIGTYPE_p_WeightedSteeringBehavior);
  }
  
  result = (arg1)->sumAngularSteering();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WeightedSteeringBehavior(void *obj) {
WeightedSteeringBehavior *arg1 = (WeightedSteeringBehavior *) obj;
delete arg1;
}
static swig_lua_method swig_WeightedSteeringBehavior_methods[] = {
    {"sumLinearSteering", _wrap_WeightedSteeringBehavior_sumLinearSteering}, 
    {"sumAngularSteering", _wrap_WeightedSteeringBehavior_sumAngularSteering}, 
    {0,0}
};
static swig_lua_attribute swig_WeightedSteeringBehavior_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_WeightedSteeringBehavior_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WeightedSteeringBehavior_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_WeightedSteeringBehavior_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_WeightedSteeringBehavior_bases[] = {0,0};
static const char *swig_WeightedSteeringBehavior_base_names[] = {"BaseEntitySteeringBehavior *",0};
static swig_lua_class _wrap_class_WeightedSteeringBehavior = { "WeightedSteeringBehavior", &SWIGTYPE_p_WeightedSteeringBehavior,_wrap_new_WeightedSteeringBehavior, swig_delete_WeightedSteeringBehavior, swig_WeightedSteeringBehavior_methods, swig_WeightedSteeringBehavior_attributes, { "WeightedSteeringBehavior", swig_WeightedSteeringBehavior_cls_methods, swig_WeightedSteeringBehavior_cls_attributes, swig_WeightedSteeringBehavior_cls_constants }, swig_WeightedSteeringBehavior_bases, swig_WeightedSteeringBehavior_base_names };

static int _wrap_Path_getWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  btTransform *result = 0 ;
  
  SWIG_check_num_args("Path::getWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::getWorldTransform",1,"Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_getWorldTransform",1,SWIGTYPE_p_Path);
  }
  
  result = (btTransform *) &((Path const *)arg1)->getWorldTransform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTransform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_setWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("Path::setWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::setWorldTransform",1,"Path *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Path::setWorldTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_setWorldTransform",1,SWIGTYPE_p_Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("Path_setWorldTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_getOrigin(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("Path::getOrigin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::getOrigin",1,"Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_getOrigin",1,SWIGTYPE_p_Path);
  }
  
  result = (btVector3 *) &((Path const *)arg1)->getOrigin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_setOrigin(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Path::setOrigin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::setOrigin",1,"Path *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Path::setOrigin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_setOrigin",1,SWIGTYPE_p_Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Path_setOrigin",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setOrigin((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_attachToEntity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  unsigned int arg3 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("Path::attachToEntity",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::attachToEntity",1,"Path *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Path::attachToEntity",2,"BaseEntity *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Path::attachToEntity",3,"unsigned int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Path::attachToEntity",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_attachToEntity",1,SWIGTYPE_p_Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("Path_attachToEntity",2,SWIGTYPE_p_BaseEntity);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Path_attachToEntity",4,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->attachToEntity(arg2,arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_attachToEntity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Path::attachToEntity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::attachToEntity",1,"Path *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Path::attachToEntity",2,"BaseEntity *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Path::attachToEntity",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_attachToEntity",1,SWIGTYPE_p_Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("Path_attachToEntity",2,SWIGTYPE_p_BaseEntity);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->attachToEntity(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_attachToEntity(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Path, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseEntity, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Path_attachToEntity__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Path, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_BaseEntity, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Path_attachToEntity__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_attachToEntity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Path::attachToEntity(BaseEntity *,unsigned int,btVector3 const &)\n"
    "    Path::attachToEntity(BaseEntity *,unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_Path_unAttachFromEntity(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  
  SWIG_check_num_args("Path::unAttachFromEntity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::unAttachFromEntity",1,"Path *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_unAttachFromEntity",1,SWIGTYPE_p_Path);
  }
  
  (arg1)->unAttachFromEntity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("Path::getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::getRotation",1,"Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_getRotation",1,SWIGTYPE_p_Path);
  }
  
  result = ((Path const *)arg1)->getRotation();
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Path::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::setRotation",1,"Path *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Path::setRotation",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_setRotation",1,SWIGTYPE_p_Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("Path_setRotation",2,SWIGTYPE_p_btQuaternion);
  }
  
  (arg1)->setRotation((btQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_getScale(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("Path::getScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::getScale",1,"Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_getScale",1,SWIGTYPE_p_Path);
  }
  
  result = (btVector3 *) &((Path const *)arg1)->getScale();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_setScale(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Path::setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::setScale",1,"Path *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Path::setScale",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_setScale",1,SWIGTYPE_p_Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Path_setScale",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setScale((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_updateAction(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("Path::updateAction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::updateAction",1,"Path *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Path::updateAction",2,"btCollisionWorld *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Path::updateAction",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_updateAction",1,SWIGTYPE_p_Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("Path_updateAction",2,SWIGTYPE_p_btCollisionWorld);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->updateAction(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_debugDraw(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  SWIG_check_num_args("Path::debugDraw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::debugDraw",1,"Path *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Path::debugDraw",2,"btIDebugDraw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_debugDraw",1,SWIGTYPE_p_Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("Path_debugDraw",2,SWIGTYPE_p_btIDebugDraw);
  }
  
  (arg1)->debugDraw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Path(lua_State* L) {
  int SWIG_arg = 0;
  PathInfo *arg1 = 0 ;
  Path *result = 0 ;
  
  SWIG_check_num_args("Path::Path",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Path::Path",1,"PathInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PathInfo,0))){
    SWIG_fail_ptr("new_Path",1,SWIGTYPE_p_PathInfo);
  }
  
  result = (Path *)new Path((PathInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Path,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_getWayPoint(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  unsigned int arg2 ;
  btVector3 result;
  
  SWIG_check_num_args("Path::getWayPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::getWayPoint",1,"Path const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Path::getWayPoint",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_getWayPoint",1,SWIGTYPE_p_Path);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  result = ((Path const *)arg1)->getWayPoint(arg2);
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_getNumberOfWayPoints(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Path::getNumberOfWayPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::getNumberOfWayPoints",1,"Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_getNumberOfWayPoints",1,SWIGTYPE_p_Path);
  }
  
  result = (unsigned int)((Path const *)arg1)->getNumberOfWayPoints();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_getCurrentWaypoint(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("Path::getCurrentWaypoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::getCurrentWaypoint",1,"Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_getCurrentWaypoint",1,SWIGTYPE_p_Path);
  }
  
  result = ((Path const *)arg1)->getCurrentWaypoint();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_isFinished(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  bool result;
  
  SWIG_check_num_args("Path::isFinished",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::isFinished",1,"Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_isFinished",1,SWIGTYPE_p_Path);
  }
  
  result = (bool)((Path const *)arg1)->isFinished();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_setNextWaypoint(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  bool result;
  
  SWIG_check_num_args("Path::setNextWaypoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::setNextWaypoint",1,"Path *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_setNextWaypoint",1,SWIGTYPE_p_Path);
  }
  
  result = (bool)(arg1)->setNextWaypoint();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_isLooped(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  bool result;
  
  SWIG_check_num_args("Path::isLooped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::isLooped",1,"Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_isLooped",1,SWIGTYPE_p_Path);
  }
  
  result = (bool)((Path const *)arg1)->isLooped();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_enableLoop__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Path::enableLoop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::enableLoop",1,"Path *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Path::enableLoop",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_enableLoop",1,SWIGTYPE_p_Path);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableLoop(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_enableLoop__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  
  SWIG_check_num_args("Path::enableLoop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::enableLoop",1,"Path *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_enableLoop",1,SWIGTYPE_p_Path);
  }
  
  (arg1)->enableLoop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_enableLoop(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Path, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Path_enableLoop__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Path, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Path_enableLoop__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_enableLoop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Path::enableLoop(bool)\n"
    "    Path::enableLoop()\n");
  lua_error(L);return 0;
}


static int _wrap_Path_setLoopType(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  LoopType_e arg2 ;
  
  SWIG_check_num_args("Path::setLoopType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::setLoopType",1,"Path *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Path::setLoopType",2,"LoopType_e const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_setLoopType",1,SWIGTYPE_p_Path);
  }
  
  arg2 = (LoopType_e const)(int)lua_tonumber(L, 2);
  (arg1)->setLoopType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_getLoopType(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  LoopType_e result;
  
  SWIG_check_num_args("Path::getLoopType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::getLoopType",1,"Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_getLoopType",1,SWIGTYPE_p_Path);
  }
  
  result = (LoopType_e)((Path const *)arg1)->getLoopType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_reverse(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  
  SWIG_check_num_args("Path::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::reverse",1,"Path *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_reverse",1,SWIGTYPE_p_Path);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_setPathIncrement(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  PathIncrement_e arg2 ;
  
  SWIG_check_num_args("Path::setPathIncrement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::setPathIncrement",1,"Path *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Path::setPathIncrement",2,"PathIncrement_e const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_setPathIncrement",1,SWIGTYPE_p_Path);
  }
  
  arg2 = (PathIncrement_e const)(int)lua_tonumber(L, 2);
  (arg1)->setPathIncrement(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_getPathIncrement(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  PathIncrement_e result;
  
  SWIG_check_num_args("Path::getPathIncrement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::getPathIncrement",1,"Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_getPathIncrement",1,SWIGTYPE_p_Path);
  }
  
  result = (PathIncrement_e)((Path const *)arg1)->getPathIncrement();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_setPath(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("Path::setPath",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::setPath",1,"Path *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Path::setPath",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_setPath",1,SWIGTYPE_p_Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Path_setPath",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->setPath((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_getPath(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  btAlignedObjectArray< btVector3 > *result = 0 ;
  
  SWIG_check_num_args("Path::getPath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::getPath",1,"Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_getPath",1,SWIGTYPE_p_Path);
  }
  
  result = (btAlignedObjectArray< btVector3 > *) &((Path const *)arg1)->getPath();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_getAverageDistanceBetweenPoints(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  btScalar result;
  
  SWIG_check_num_args("Path::getAverageDistanceBetweenPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::getAverageDistanceBetweenPoints",1,"Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_getAverageDistanceBetweenPoints",1,SWIGTYPE_p_Path);
  }
  
  result = (btScalar)((Path const *)arg1)->getAverageDistanceBetweenPoints();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_enableAutomaticIncrement__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Path::enableAutomaticIncrement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::enableAutomaticIncrement",1,"Path *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Path::enableAutomaticIncrement",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_enableAutomaticIncrement",1,SWIGTYPE_p_Path);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableAutomaticIncrement(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_enableAutomaticIncrement__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  
  SWIG_check_num_args("Path::enableAutomaticIncrement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::enableAutomaticIncrement",1,"Path *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_enableAutomaticIncrement",1,SWIGTYPE_p_Path);
  }
  
  (arg1)->enableAutomaticIncrement();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_enableAutomaticIncrement(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Path, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Path_enableAutomaticIncrement__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Path, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Path_enableAutomaticIncrement__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_enableAutomaticIncrement'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Path::enableAutomaticIncrement(bool)\n"
    "    Path::enableAutomaticIncrement()\n");
  lua_error(L);return 0;
}


static int _wrap_Path_isAutomaticIncrement(lua_State* L) {
  int SWIG_arg = 0;
  Path *arg1 = (Path *) 0 ;
  bool result;
  
  SWIG_check_num_args("Path::isAutomaticIncrement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Path::isAutomaticIncrement",1,"Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Path,0))){
    SWIG_fail_ptr("Path_isAutomaticIncrement",1,SWIGTYPE_p_Path);
  }
  
  result = (bool)((Path const *)arg1)->isAutomaticIncrement();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Path(void *obj) {
Path *arg1 = (Path *) obj;
delete arg1;
}
static swig_lua_method swig_Path_methods[] = {
    {"getWorldTransform", _wrap_Path_getWorldTransform}, 
    {"setWorldTransform", _wrap_Path_setWorldTransform}, 
    {"getOrigin", _wrap_Path_getOrigin}, 
    {"setOrigin", _wrap_Path_setOrigin}, 
    {"attachToEntity", _wrap_Path_attachToEntity}, 
    {"unAttachFromEntity", _wrap_Path_unAttachFromEntity}, 
    {"getRotation", _wrap_Path_getRotation}, 
    {"setRotation", _wrap_Path_setRotation}, 
    {"getScale", _wrap_Path_getScale}, 
    {"setScale", _wrap_Path_setScale}, 
    {"updateAction", _wrap_Path_updateAction}, 
    {"debugDraw", _wrap_Path_debugDraw}, 
    {"getWayPoint", _wrap_Path_getWayPoint}, 
    {"getNumberOfWayPoints", _wrap_Path_getNumberOfWayPoints}, 
    {"getCurrentWaypoint", _wrap_Path_getCurrentWaypoint}, 
    {"isFinished", _wrap_Path_isFinished}, 
    {"setNextWaypoint", _wrap_Path_setNextWaypoint}, 
    {"isLooped", _wrap_Path_isLooped}, 
    {"enableLoop", _wrap_Path_enableLoop}, 
    {"setLoopType", _wrap_Path_setLoopType}, 
    {"getLoopType", _wrap_Path_getLoopType}, 
    {"reverse", _wrap_Path_reverse}, 
    {"setPathIncrement", _wrap_Path_setPathIncrement}, 
    {"getPathIncrement", _wrap_Path_getPathIncrement}, 
    {"setPath", _wrap_Path_setPath}, 
    {"getPath", _wrap_Path_getPath}, 
    {"getAverageDistanceBetweenPoints", _wrap_Path_getAverageDistanceBetweenPoints}, 
    {"enableAutomaticIncrement", _wrap_Path_enableAutomaticIncrement}, 
    {"isAutomaticIncrement", _wrap_Path_isAutomaticIncrement}, 
    {0,0}
};
static swig_lua_attribute swig_Path_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Path_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Path_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Path_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Path_bases[] = {0};
static const char *swig_Path_base_names[] = {0};
static swig_lua_class _wrap_class_Path = { "Path", &SWIGTYPE_p_Path,_wrap_new_Path, swig_delete_Path, swig_Path_methods, swig_Path_attributes, { "Path", swig_Path_cls_methods, swig_Path_cls_attributes, swig_Path_cls_constants }, swig_Path_bases, swig_Path_base_names };

static int _wrap_new_AnimationController2DTest(lua_State* L) {
  int SWIG_arg = 0;
  AnimationControllerInfo *arg1 = 0 ;
  AnimationController2DTest *result = 0 ;
  
  SWIG_check_num_args("AnimationController2DTest::AnimationController2DTest",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("AnimationController2DTest::AnimationController2DTest",1,"AnimationControllerInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnimationControllerInfo,0))){
    SWIG_fail_ptr("new_AnimationController2DTest",1,SWIGTYPE_p_AnimationControllerInfo);
  }
  
  result = (AnimationController2DTest *)new AnimationController2DTest((AnimationControllerInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AnimationController2DTest,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimationController2DTest_update(lua_State* L) {
  int SWIG_arg = 0;
  AnimationController2DTest *arg1 = (AnimationController2DTest *) 0 ;
  btScalar arg2 ;
  
  SWIG_check_num_args("AnimationController2DTest::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AnimationController2DTest::update",1,"AnimationController2DTest *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("AnimationController2DTest::update",2,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AnimationController2DTest,0))){
    SWIG_fail_ptr("AnimationController2DTest_update",1,SWIGTYPE_p_AnimationController2DTest);
  }
  
  arg2 = (btScalar)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AnimationController2DTest(void *obj) {
AnimationController2DTest *arg1 = (AnimationController2DTest *) obj;
delete arg1;
}
static swig_lua_method swig_AnimationController2DTest_methods[] = {
    {"update", _wrap_AnimationController2DTest_update}, 
    {0,0}
};
static swig_lua_attribute swig_AnimationController2DTest_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_AnimationController2DTest_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AnimationController2DTest_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_AnimationController2DTest_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_AnimationController2DTest_bases[] = {0,0};
static const char *swig_AnimationController2DTest_base_names[] = {"BaseEntityAnimationController *",0};
static swig_lua_class _wrap_class_AnimationController2DTest = { "AnimationController2DTest", &SWIGTYPE_p_AnimationController2DTest,_wrap_new_AnimationController2DTest, swig_delete_AnimationController2DTest, swig_AnimationController2DTest_methods, swig_AnimationController2DTest_attributes, { "AnimationController2DTest", swig_AnimationController2DTest_cls_methods, swig_AnimationController2DTest_cls_attributes, swig_AnimationController2DTest_cls_constants }, swig_AnimationController2DTest_bases, swig_AnimationController2DTest_base_names };

static int _wrap_SEND_MSG_IMMEDIATELY_get(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("SEND_MSG_IMMEDIATELY",0,0)
  result = (double)(double)SEND_MSG_IMMEDIATELY;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NO_ADDITIONAL_INFO_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("NO_ADDITIONAL_INFO",0,0)
  result = (int)(int)NO_ADDITIONAL_INFO;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SENDER_ID_IRRELEVANT_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("SENDER_ID_IRRELEVANT",0,0)
  result = (int)(int)SENDER_ID_IRRELEVANT;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MessageDispatcher_dispatchMsg(lua_State* L) {
  int SWIG_arg = 0;
  MessageDispatcher *arg1 = (MessageDispatcher *) 0 ;
  double arg2 ;
  IDType arg3 ;
  IDType arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  
  SWIG_check_num_args("MessageDispatcher::dispatchMsg",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MessageDispatcher::dispatchMsg",1,"MessageDispatcher *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MessageDispatcher::dispatchMsg",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MessageDispatcher::dispatchMsg",3,"IDType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("MessageDispatcher::dispatchMsg",4,"IDType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("MessageDispatcher::dispatchMsg",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("MessageDispatcher::dispatchMsg",6,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MessageDispatcher,0))){
    SWIG_fail_ptr("MessageDispatcher_dispatchMsg",1,SWIGTYPE_p_MessageDispatcher);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (IDType)lua_tonumber(L, 3);
  arg4 = (IDType)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"MessageDispatcher_dispatchMsg");
  (arg1)->dispatchMsg(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MessageDispatcher_dispatchDelayedMessages(lua_State* L) {
  int SWIG_arg = 0;
  MessageDispatcher *arg1 = (MessageDispatcher *) 0 ;
  
  SWIG_check_num_args("MessageDispatcher::dispatchDelayedMessages",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MessageDispatcher::dispatchDelayedMessages",1,"MessageDispatcher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MessageDispatcher,0))){
    SWIG_fail_ptr("MessageDispatcher_dispatchDelayedMessages",1,SWIGTYPE_p_MessageDispatcher);
  }
  
  (arg1)->dispatchDelayedMessages();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MessageDispatcher(void *obj) {
MessageDispatcher *arg1 = (MessageDispatcher *) obj;
delete arg1;
}
static swig_lua_method swig_MessageDispatcher_methods[] = {
    {"dispatchMsg", _wrap_MessageDispatcher_dispatchMsg}, 
    {"dispatchDelayedMessages", _wrap_MessageDispatcher_dispatchDelayedMessages}, 
    {0,0}
};
static swig_lua_attribute swig_MessageDispatcher_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_MessageDispatcher_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MessageDispatcher_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_MessageDispatcher_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_MessageDispatcher_bases[] = {0,0};
static const char *swig_MessageDispatcher_base_names[] = {"AbstractSingleton< MessageDispatcher > *",0};
static swig_lua_class _wrap_class_MessageDispatcher = { "MessageDispatcher", &SWIGTYPE_p_MessageDispatcher,0, swig_delete_MessageDispatcher, swig_MessageDispatcher_methods, swig_MessageDispatcher_attributes, { "MessageDispatcher", swig_MessageDispatcher_cls_methods, swig_MessageDispatcher_cls_attributes, swig_MessageDispatcher_cls_constants }, swig_MessageDispatcher_bases, swig_MessageDispatcher_base_names };

static int _wrap_BaseGameState_enter(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("BaseGameState::enter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::enter",1,"BaseGameState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseGameState::enter",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_enter",1,SWIGTYPE_p_BaseGameState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BaseGameState_enter");
  (arg1)->enter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_update(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  void *arg2 = (void *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("BaseGameState::update",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::update",1,"BaseGameState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseGameState::update",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseGameState::update",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_update",1,SWIGTYPE_p_BaseGameState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BaseGameState_update");
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->update(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_render(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  
  SWIG_check_num_args("BaseGameState::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::render",1,"BaseGameState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_render",1,SWIGTYPE_p_BaseGameState);
  }
  
  (arg1)->render();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_exit(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("BaseGameState::exit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::exit",1,"BaseGameState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseGameState::exit",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_exit",1,SWIGTYPE_p_BaseGameState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BaseGameState_exit");
  (arg1)->exit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_onMessage(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  void *arg2 = (void *) 0 ;
  Telegram *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("BaseGameState::onMessage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::onMessage",1,"BaseGameState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseGameState::onMessage",2,"void *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("BaseGameState::onMessage",3,"Telegram const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_onMessage",1,SWIGTYPE_p_BaseGameState);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BaseGameState_onMessage");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Telegram,0))){
    SWIG_fail_ptr("BaseGameState_onMessage",3,SWIGTYPE_p_Telegram);
  }
  
  result = (bool)(arg1)->onMessage(arg2,(Telegram const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_touchRespond(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  DeviceTouch *arg2 = 0 ;
  
  SWIG_check_num_args("BaseGameState::touchRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::touchRespond",1,"BaseGameState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseGameState::touchRespond",2,"DeviceTouch const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_touchRespond",1,SWIGTYPE_p_BaseGameState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceTouch,0))){
    SWIG_fail_ptr("BaseGameState_touchRespond",2,SWIGTYPE_p_DeviceTouch);
  }
  
  (arg1)->touchRespond((DeviceTouch const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_tapGestureRespond(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  DeviceTapGesture *arg2 = 0 ;
  
  SWIG_check_num_args("BaseGameState::tapGestureRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::tapGestureRespond",1,"BaseGameState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseGameState::tapGestureRespond",2,"DeviceTapGesture const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_tapGestureRespond",1,SWIGTYPE_p_BaseGameState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceTapGesture,0))){
    SWIG_fail_ptr("BaseGameState_tapGestureRespond",2,SWIGTYPE_p_DeviceTapGesture);
  }
  
  (arg1)->tapGestureRespond((DeviceTapGesture const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_pinchGestureRespond(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  DevicePinchGesture *arg2 = 0 ;
  
  SWIG_check_num_args("BaseGameState::pinchGestureRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::pinchGestureRespond",1,"BaseGameState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseGameState::pinchGestureRespond",2,"DevicePinchGesture const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_pinchGestureRespond",1,SWIGTYPE_p_BaseGameState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DevicePinchGesture,0))){
    SWIG_fail_ptr("BaseGameState_pinchGestureRespond",2,SWIGTYPE_p_DevicePinchGesture);
  }
  
  (arg1)->pinchGestureRespond((DevicePinchGesture const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_panGestureRespond(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  DevicePanGesture *arg2 = 0 ;
  
  SWIG_check_num_args("BaseGameState::panGestureRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::panGestureRespond",1,"BaseGameState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseGameState::panGestureRespond",2,"DevicePanGesture const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_panGestureRespond",1,SWIGTYPE_p_BaseGameState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DevicePanGesture,0))){
    SWIG_fail_ptr("BaseGameState_panGestureRespond",2,SWIGTYPE_p_DevicePanGesture);
  }
  
  (arg1)->panGestureRespond((DevicePanGesture const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_swipeGestureRespond(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  DeviceSwipeGesture *arg2 = 0 ;
  
  SWIG_check_num_args("BaseGameState::swipeGestureRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::swipeGestureRespond",1,"BaseGameState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseGameState::swipeGestureRespond",2,"DeviceSwipeGesture const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_swipeGestureRespond",1,SWIGTYPE_p_BaseGameState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceSwipeGesture,0))){
    SWIG_fail_ptr("BaseGameState_swipeGestureRespond",2,SWIGTYPE_p_DeviceSwipeGesture);
  }
  
  (arg1)->swipeGestureRespond((DeviceSwipeGesture const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_rotationGestureRespond(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  DeviceRotationGesture *arg2 = 0 ;
  
  SWIG_check_num_args("BaseGameState::rotationGestureRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::rotationGestureRespond",1,"BaseGameState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseGameState::rotationGestureRespond",2,"DeviceRotationGesture const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_rotationGestureRespond",1,SWIGTYPE_p_BaseGameState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceRotationGesture,0))){
    SWIG_fail_ptr("BaseGameState_rotationGestureRespond",2,SWIGTYPE_p_DeviceRotationGesture);
  }
  
  (arg1)->rotationGestureRespond((DeviceRotationGesture const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_longPressGestureRespond(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  DeviceLongPressGesture *arg2 = 0 ;
  
  SWIG_check_num_args("BaseGameState::longPressGestureRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::longPressGestureRespond",1,"BaseGameState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseGameState::longPressGestureRespond",2,"DeviceLongPressGesture const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_longPressGestureRespond",1,SWIGTYPE_p_BaseGameState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceLongPressGesture,0))){
    SWIG_fail_ptr("BaseGameState_longPressGestureRespond",2,SWIGTYPE_p_DeviceLongPressGesture);
  }
  
  (arg1)->longPressGestureRespond((DeviceLongPressGesture const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_accelerometerRespond(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  DeviceAccelerometer *arg2 = 0 ;
  
  SWIG_check_num_args("BaseGameState::accelerometerRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::accelerometerRespond",1,"BaseGameState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseGameState::accelerometerRespond",2,"DeviceAccelerometer const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_accelerometerRespond",1,SWIGTYPE_p_BaseGameState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceAccelerometer,0))){
    SWIG_fail_ptr("BaseGameState_accelerometerRespond",2,SWIGTYPE_p_DeviceAccelerometer);
  }
  
  (arg1)->accelerometerRespond((DeviceAccelerometer const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_motionRespond(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  DeviceMotion *arg2 = 0 ;
  
  SWIG_check_num_args("BaseGameState::motionRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::motionRespond",1,"BaseGameState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseGameState::motionRespond",2,"DeviceMotion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_motionRespond",1,SWIGTYPE_p_BaseGameState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceMotion,0))){
    SWIG_fail_ptr("BaseGameState_motionRespond",2,SWIGTYPE_p_DeviceMotion);
  }
  
  (arg1)->motionRespond((DeviceMotion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_gyroRespond(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  DeviceGyro *arg2 = 0 ;
  
  SWIG_check_num_args("BaseGameState::gyroRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::gyroRespond",1,"BaseGameState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseGameState::gyroRespond",2,"DeviceGyro const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_gyroRespond",1,SWIGTYPE_p_BaseGameState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceGyro,0))){
    SWIG_fail_ptr("BaseGameState_gyroRespond",2,SWIGTYPE_p_DeviceGyro);
  }
  
  (arg1)->gyroRespond((DeviceGyro const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_magnetometerRespond(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  DeviceMagnetometer *arg2 = 0 ;
  
  SWIG_check_num_args("BaseGameState::magnetometerRespond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::magnetometerRespond",1,"BaseGameState *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseGameState::magnetometerRespond",2,"DeviceMagnetometer const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_magnetometerRespond",1,SWIGTYPE_p_BaseGameState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DeviceMagnetometer,0))){
    SWIG_fail_ptr("BaseGameState_magnetometerRespond",2,SWIGTYPE_p_DeviceMagnetometer);
  }
  
  (arg1)->magnetometerRespond((DeviceMagnetometer const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_enablePause__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("BaseGameState::enablePause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::enablePause",1,"BaseGameState *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("BaseGameState::enablePause",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_enablePause",1,SWIGTYPE_p_BaseGameState);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enablePause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_enablePause__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  
  SWIG_check_num_args("BaseGameState::enablePause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::enablePause",1,"BaseGameState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_enablePause",1,SWIGTYPE_p_BaseGameState);
  }
  
  (arg1)->enablePause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_enablePause(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseGameState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BaseGameState_enablePause__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseGameState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BaseGameState_enablePause__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BaseGameState_enablePause'\n"
    "  Possible C/C++ prototypes are:\n"
    "    BaseGameState::enablePause(bool)\n"
    "    BaseGameState::enablePause()\n");
  lua_error(L);return 0;
}


static int _wrap_BaseGameState_allowPause__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("BaseGameState::allowPause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::allowPause",1,"BaseGameState *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("BaseGameState::allowPause",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_allowPause",1,SWIGTYPE_p_BaseGameState);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->allowPause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_allowPause__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  
  SWIG_check_num_args("BaseGameState::allowPause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::allowPause",1,"BaseGameState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_allowPause",1,SWIGTYPE_p_BaseGameState);
  }
  
  (arg1)->allowPause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_allowPause(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseGameState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BaseGameState_allowPause__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_BaseGameState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BaseGameState_allowPause__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BaseGameState_allowPause'\n"
    "  Possible C/C++ prototypes are:\n"
    "    BaseGameState::allowPause(bool)\n"
    "    BaseGameState::allowPause()\n");
  lua_error(L);return 0;
}


static int _wrap_BaseGameState_isPauseAllowed(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseGameState::isPauseAllowed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::isPauseAllowed",1,"BaseGameState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_isPauseAllowed",1,SWIGTYPE_p_BaseGameState);
  }
  
  result = (bool)((BaseGameState const *)arg1)->isPauseAllowed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_isPaused(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseGameState::isPaused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::isPaused",1,"BaseGameState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_isPaused",1,SWIGTYPE_p_BaseGameState);
  }
  
  result = (bool)((BaseGameState const *)arg1)->isPaused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_quit(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  
  SWIG_check_num_args("BaseGameState::quit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::quit",1,"BaseGameState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_quit",1,SWIGTYPE_p_BaseGameState);
  }
  
  (arg1)->quit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_didQuit(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseGameState::didQuit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::didQuit",1,"BaseGameState const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_didQuit",1,SWIGTYPE_p_BaseGameState);
  }
  
  result = (bool)((BaseGameState const *)arg1)->didQuit();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_saveDefaultData(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  
  SWIG_check_num_args("BaseGameState::saveDefaultData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::saveDefaultData",1,"BaseGameState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_saveDefaultData",1,SWIGTYPE_p_BaseGameState);
  }
  
  (arg1)->saveDefaultData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseGameState_loadDefaultData(lua_State* L) {
  int SWIG_arg = 0;
  BaseGameState *arg1 = (BaseGameState *) 0 ;
  
  SWIG_check_num_args("BaseGameState::loadDefaultData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseGameState::loadDefaultData",1,"BaseGameState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseGameState,0))){
    SWIG_fail_ptr("BaseGameState_loadDefaultData",1,SWIGTYPE_p_BaseGameState);
  }
  
  (arg1)->loadDefaultData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseGameState(void *obj) {
BaseGameState *arg1 = (BaseGameState *) obj;
delete arg1;
}
static swig_lua_method swig_BaseGameState_methods[] = {
    {"enter", _wrap_BaseGameState_enter}, 
    {"update", _wrap_BaseGameState_update}, 
    {"render", _wrap_BaseGameState_render}, 
    {"exit", _wrap_BaseGameState_exit}, 
    {"onMessage", _wrap_BaseGameState_onMessage}, 
    {"touchRespond", _wrap_BaseGameState_touchRespond}, 
    {"tapGestureRespond", _wrap_BaseGameState_tapGestureRespond}, 
    {"pinchGestureRespond", _wrap_BaseGameState_pinchGestureRespond}, 
    {"panGestureRespond", _wrap_BaseGameState_panGestureRespond}, 
    {"swipeGestureRespond", _wrap_BaseGameState_swipeGestureRespond}, 
    {"rotationGestureRespond", _wrap_BaseGameState_rotationGestureRespond}, 
    {"longPressGestureRespond", _wrap_BaseGameState_longPressGestureRespond}, 
    {"accelerometerRespond", _wrap_BaseGameState_accelerometerRespond}, 
    {"motionRespond", _wrap_BaseGameState_motionRespond}, 
    {"gyroRespond", _wrap_BaseGameState_gyroRespond}, 
    {"magnetometerRespond", _wrap_BaseGameState_magnetometerRespond}, 
    {"enablePause", _wrap_BaseGameState_enablePause}, 
    {"allowPause", _wrap_BaseGameState_allowPause}, 
    {"isPauseAllowed", _wrap_BaseGameState_isPauseAllowed}, 
    {"isPaused", _wrap_BaseGameState_isPaused}, 
    {"quit", _wrap_BaseGameState_quit}, 
    {"didQuit", _wrap_BaseGameState_didQuit}, 
    {"saveDefaultData", _wrap_BaseGameState_saveDefaultData}, 
    {"loadDefaultData", _wrap_BaseGameState_loadDefaultData}, 
    {0,0}
};
static swig_lua_attribute swig_BaseGameState_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_BaseGameState_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BaseGameState_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BaseGameState_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BaseGameState_bases[] = {0,0};
static const char *swig_BaseGameState_base_names[] = {"AbstractState< void > *",0};
static swig_lua_class _wrap_class_BaseGameState = { "BaseGameState", &SWIGTYPE_p_BaseGameState,0, swig_delete_BaseGameState, swig_BaseGameState_methods, swig_BaseGameState_attributes, { "BaseGameState", swig_BaseGameState_cls_methods, swig_BaseGameState_cls_attributes, swig_BaseGameState_cls_constants }, swig_BaseGameState_bases, swig_BaseGameState_base_names };

static int _wrap_new_VertexTransform(lua_State* L) {
  int SWIG_arg = 0;
  VertexTransform *result = 0 ;
  
  SWIG_check_num_args("VertexTransform::VertexTransform",0,0)
  result = (VertexTransform *)new VertexTransform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_VertexTransform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VertexTransform_m_Vertices_set(lua_State* L) {
  int SWIG_arg = 0;
  VertexTransform *arg1 = (VertexTransform *) 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = (btAlignedObjectArray< btVector3 > *) 0 ;
  
  SWIG_check_num_args("VertexTransform::m_Vertices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VertexTransform::m_Vertices",1,"VertexTransform *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VertexTransform::m_Vertices",2,"btAlignedObjectArray< btVector3 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VertexTransform,0))){
    SWIG_fail_ptr("VertexTransform_m_Vertices_set",1,SWIGTYPE_p_VertexTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t,0))){
    SWIG_fail_ptr("VertexTransform_m_Vertices_set",2,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t);
  }
  
  if (arg1) (arg1)->m_Vertices = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VertexTransform_m_Vertices_get(lua_State* L) {
  int SWIG_arg = 0;
  VertexTransform *arg1 = (VertexTransform *) 0 ;
  btAlignedObjectArray< btVector3 > *result = 0 ;
  
  SWIG_check_num_args("VertexTransform::m_Vertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VertexTransform::m_Vertices",1,"VertexTransform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VertexTransform,0))){
    SWIG_fail_ptr("VertexTransform_m_Vertices_get",1,SWIGTYPE_p_VertexTransform);
  }
  
  result = (btAlignedObjectArray< btVector3 > *)& ((arg1)->m_Vertices);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btAlignedObjectArrayT_btVector3_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VertexTransform_pTextInfo_set(lua_State* L) {
  int SWIG_arg = 0;
  VertexTransform *arg1 = (VertexTransform *) 0 ;
  TextInfo *arg2 = (TextInfo *) 0 ;
  
  SWIG_check_num_args("VertexTransform::pTextInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VertexTransform::pTextInfo",1,"VertexTransform *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VertexTransform::pTextInfo",2,"TextInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VertexTransform,0))){
    SWIG_fail_ptr("VertexTransform_pTextInfo_set",1,SWIGTYPE_p_VertexTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TextInfo,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("VertexTransform_pTextInfo_set",2,SWIGTYPE_p_TextInfo);
  }
  
  if (arg1) (arg1)->pTextInfo = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VertexTransform_pTextInfo_get(lua_State* L) {
  int SWIG_arg = 0;
  VertexTransform *arg1 = (VertexTransform *) 0 ;
  TextInfo *result = 0 ;
  
  SWIG_check_num_args("VertexTransform::pTextInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VertexTransform::pTextInfo",1,"VertexTransform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VertexTransform,0))){
    SWIG_fail_ptr("VertexTransform_pTextInfo_get",1,SWIGTYPE_p_VertexTransform);
  }
  
  result = (TextInfo *) ((arg1)->pTextInfo);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VertexTransform_getTextInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  VertexTransform *arg1 = (VertexTransform *) 0 ;
  TextInfo *result = 0 ;
  
  SWIG_check_num_args("VertexTransform::getTextInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VertexTransform::getTextInfo",1,"VertexTransform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VertexTransform,0))){
    SWIG_fail_ptr("VertexTransform_getTextInfo",1,SWIGTYPE_p_VertexTransform);
  }
  
  result = (TextInfo *)((VertexTransform const *)arg1)->getTextInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VertexTransform_getTextInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  VertexTransform *arg1 = (VertexTransform *) 0 ;
  TextInfo *result = 0 ;
  
  SWIG_check_num_args("VertexTransform::getTextInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VertexTransform::getTextInfo",1,"VertexTransform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VertexTransform,0))){
    SWIG_fail_ptr("VertexTransform_getTextInfo",1,SWIGTYPE_p_VertexTransform);
  }
  
  result = (TextInfo *)(arg1)->getTextInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VertexTransform_getTextInfo(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VertexTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_VertexTransform_getTextInfo__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VertexTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_VertexTransform_getTextInfo__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VertexTransform_getTextInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    VertexTransform::getTextInfo() const\n"
    "    VertexTransform::getTextInfo()\n");
  lua_error(L);return 0;
}


static int _wrap_VertexTransform_setTextInfo(lua_State* L) {
  int SWIG_arg = 0;
  VertexTransform *arg1 = (VertexTransform *) 0 ;
  TextInfo *arg2 = (TextInfo *) 0 ;
  
  SWIG_check_num_args("VertexTransform::setTextInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VertexTransform::setTextInfo",1,"VertexTransform *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VertexTransform::setTextInfo",2,"TextInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VertexTransform,0))){
    SWIG_fail_ptr("VertexTransform_setTextInfo",1,SWIGTYPE_p_VertexTransform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TextInfo,0))){
    SWIG_fail_ptr("VertexTransform_setTextInfo",2,SWIGTYPE_p_TextInfo);
  }
  
  (arg1)->setTextInfo(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VertexTransform___call__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  VertexTransform *arg1 = (VertexTransform *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("VertexTransform::operator ()",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VertexTransform::operator ()",1,"VertexTransform const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VertexTransform::operator ()",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("VertexTransform::operator ()",3,"btVector3 &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("VertexTransform::operator ()",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VertexTransform,0))){
    SWIG_fail_ptr("VertexTransform___call",1,SWIGTYPE_p_VertexTransform);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("VertexTransform___call",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("VertexTransform___call",4,SWIGTYPE_p_btVector3);
  }
  
  ((VertexTransform const *)arg1)->operator ()(arg2,*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VertexTransform___call__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  VertexTransform *arg1 = (VertexTransform *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  SWIG_check_num_args("VertexTransform::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VertexTransform::operator ()",1,"VertexTransform *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VertexTransform::operator ()",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("VertexTransform::operator ()",3,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VertexTransform,0))){
    SWIG_fail_ptr("VertexTransform___call",1,SWIGTYPE_p_VertexTransform);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("VertexTransform___call",3,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->operator ()(arg2,(btVector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VertexTransform___call(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VertexTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_VertexTransform___call__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_VertexTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_VertexTransform___call__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VertexTransform___call'\n"
    "  Possible C/C++ prototypes are:\n"
    "    VertexTransform::operator ()(int,btVector3 &,btVector3 const &) const\n"
    "    VertexTransform::operator ()(int,btVector3 const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_VertexTransform(void *obj) {
VertexTransform *arg1 = (VertexTransform *) obj;
delete arg1;
}
static swig_lua_method swig_VertexTransform_methods[] = {
    {"getTextInfo", _wrap_VertexTransform_getTextInfo}, 
    {"setTextInfo", _wrap_VertexTransform_setTextInfo}, 
    {"__call", _wrap_VertexTransform___call}, 
    {0,0}
};
static swig_lua_attribute swig_VertexTransform_attributes[] = {
    { "m_Vertices", _wrap_VertexTransform_m_Vertices_get, _wrap_VertexTransform_m_Vertices_set},
    { "pTextInfo", _wrap_VertexTransform_pTextInfo_get, _wrap_VertexTransform_pTextInfo_set},
    {0,0,0}
};
static swig_lua_attribute swig_VertexTransform_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VertexTransform_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_VertexTransform_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_VertexTransform_bases[] = {0};
static const char *swig_VertexTransform_base_names[] = {0};
static swig_lua_class _wrap_class_VertexTransform = { "VertexTransform", &SWIGTYPE_p_VertexTransform,_wrap_new_VertexTransform, swig_delete_VertexTransform, swig_VertexTransform_methods, swig_VertexTransform_attributes, { "VertexTransform", swig_VertexTransform_cls_methods, swig_VertexTransform_cls_attributes, swig_VertexTransform_cls_constants }, swig_VertexTransform_bases, swig_VertexTransform_base_names };

static int _wrap_new_BaseTextViewObject(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewInfo *arg1 = 0 ;
  BaseTextViewObject *result = 0 ;
  
  SWIG_check_num_args("BaseTextViewObject::BaseTextViewObject",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("BaseTextViewObject::BaseTextViewObject",1,"BaseTextViewInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewInfo,0))){
    SWIG_fail_ptr("new_BaseTextViewObject",1,SWIGTYPE_p_BaseTextViewInfo);
  }
  
  result = (BaseTextViewObject *)new BaseTextViewObject((BaseTextViewInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseTextViewObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextViewObject_updateAction(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewObject *arg1 = (BaseTextViewObject *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("BaseTextViewObject::updateAction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewObject::updateAction",1,"BaseTextViewObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseTextViewObject::updateAction",2,"btCollisionWorld *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseTextViewObject::updateAction",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewObject,0))){
    SWIG_fail_ptr("BaseTextViewObject_updateAction",1,SWIGTYPE_p_BaseTextViewObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCollisionWorld,0))){
    SWIG_fail_ptr("BaseTextViewObject_updateAction",2,SWIGTYPE_p_btCollisionWorld);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->updateAction(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextViewObject_debugDraw(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewObject *arg1 = (BaseTextViewObject *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  SWIG_check_num_args("BaseTextViewObject::debugDraw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewObject::debugDraw",1,"BaseTextViewObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseTextViewObject::debugDraw",2,"btIDebugDraw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewObject,0))){
    SWIG_fail_ptr("BaseTextViewObject_debugDraw",1,SWIGTYPE_p_BaseTextViewObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btIDebugDraw,0))){
    SWIG_fail_ptr("BaseTextViewObject_debugDraw",2,SWIGTYPE_p_btIDebugDraw);
  }
  
  (arg1)->debugDraw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextViewObject_isHidden(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewObject *arg1 = (BaseTextViewObject *) 0 ;
  bool result;
  
  SWIG_check_num_args("BaseTextViewObject::isHidden",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewObject::isHidden",1,"BaseTextViewObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewObject,0))){
    SWIG_fail_ptr("BaseTextViewObject_isHidden",1,SWIGTYPE_p_BaseTextViewObject);
  }
  
  result = (bool)((BaseTextViewObject const *)arg1)->isHidden();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextViewObject_show(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewObject *arg1 = (BaseTextViewObject *) 0 ;
  
  SWIG_check_num_args("BaseTextViewObject::show",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewObject::show",1,"BaseTextViewObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewObject,0))){
    SWIG_fail_ptr("BaseTextViewObject_show",1,SWIGTYPE_p_BaseTextViewObject);
  }
  
  (arg1)->show();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextViewObject_hide(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewObject *arg1 = (BaseTextViewObject *) 0 ;
  
  SWIG_check_num_args("BaseTextViewObject::hide",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewObject::hide",1,"BaseTextViewObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewObject,0))){
    SWIG_fail_ptr("BaseTextViewObject_hide",1,SWIGTYPE_p_BaseTextViewObject);
  }
  
  (arg1)->hide();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextViewObject_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewObject *arg1 = (BaseTextViewObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("BaseTextViewObject::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewObject::setPosition",1,"BaseTextViewObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseTextViewObject::setPosition",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewObject,0))){
    SWIG_fail_ptr("BaseTextViewObject_setPosition",1,SWIGTYPE_p_BaseTextViewObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("BaseTextViewObject_setPosition",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setPosition((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextViewObject_setOrigin(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewObject *arg1 = (BaseTextViewObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("BaseTextViewObject::setOrigin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewObject::setOrigin",1,"BaseTextViewObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseTextViewObject::setOrigin",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewObject,0))){
    SWIG_fail_ptr("BaseTextViewObject_setOrigin",1,SWIGTYPE_p_BaseTextViewObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("BaseTextViewObject_setOrigin",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->setOrigin((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextViewObject_getOrigin(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewObject *arg1 = (BaseTextViewObject *) 0 ;
  btVector3 *result = 0 ;
  
  SWIG_check_num_args("BaseTextViewObject::getOrigin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewObject::getOrigin",1,"BaseTextViewObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewObject,0))){
    SWIG_fail_ptr("BaseTextViewObject_getOrigin",1,SWIGTYPE_p_BaseTextViewObject);
  }
  
  result = (btVector3 *) &((BaseTextViewObject const *)arg1)->getOrigin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btVector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextViewObject_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewObject *arg1 = (BaseTextViewObject *) 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("BaseTextViewObject::getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewObject::getRotation",1,"BaseTextViewObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewObject,0))){
    SWIG_fail_ptr("BaseTextViewObject_getRotation",1,SWIGTYPE_p_BaseTextViewObject);
  }
  
  result = ((BaseTextViewObject const *)arg1)->getRotation();
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextViewObject_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewObject *arg1 = (BaseTextViewObject *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("BaseTextViewObject::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewObject::setRotation",1,"BaseTextViewObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseTextViewObject::setRotation",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewObject,0))){
    SWIG_fail_ptr("BaseTextViewObject_setRotation",1,SWIGTYPE_p_BaseTextViewObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("BaseTextViewObject_setRotation",2,SWIGTYPE_p_btQuaternion);
  }
  
  (arg1)->setRotation((btQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextViewObject_getWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewObject *arg1 = (BaseTextViewObject *) 0 ;
  btTransform result;
  
  SWIG_check_num_args("BaseTextViewObject::getWorldTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewObject::getWorldTransform",1,"BaseTextViewObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewObject,0))){
    SWIG_fail_ptr("BaseTextViewObject_getWorldTransform",1,SWIGTYPE_p_BaseTextViewObject);
  }
  
  result = ((BaseTextViewObject const *)arg1)->getWorldTransform();
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextViewObject_setWorldTransform(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewObject *arg1 = (BaseTextViewObject *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("BaseTextViewObject::setWorldTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewObject::setWorldTransform",1,"BaseTextViewObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseTextViewObject::setWorldTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewObject,0))){
    SWIG_fail_ptr("BaseTextViewObject_setWorldTransform",1,SWIGTYPE_p_BaseTextViewObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("BaseTextViewObject_setWorldTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->setWorldTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextViewObject_setTextKey(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewObject *arg1 = (BaseTextViewObject *) 0 ;
  std::string *arg2 = 0 ;
  LocalizedTextViewObjectType arg3 ;
  
  SWIG_check_num_args("BaseTextViewObject::setTextKey",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewObject::setTextKey",1,"BaseTextViewObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("BaseTextViewObject::setTextKey",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseTextViewObject::setTextKey",3,"LocalizedTextViewObjectType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewObject,0))){
    SWIG_fail_ptr("BaseTextViewObject_setTextKey",1,SWIGTYPE_p_BaseTextViewObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("BaseTextViewObject_setTextKey",2,SWIGTYPE_p_std__string);
  }
  
  arg3 = (LocalizedTextViewObjectType)(int)lua_tonumber(L, 3);
  (arg1)->setTextKey((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextViewObject_getTextKey(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewObject *arg1 = (BaseTextViewObject *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("BaseTextViewObject::getTextKey",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewObject::getTextKey",1,"BaseTextViewObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewObject,0))){
    SWIG_fail_ptr("BaseTextViewObject_getTextKey",1,SWIGTYPE_p_BaseTextViewObject);
  }
  
  result = (std::string *) &((BaseTextViewObject const *)arg1)->getTextKey();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextViewObject_render(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewObject *arg1 = (BaseTextViewObject *) 0 ;
  
  SWIG_check_num_args("BaseTextViewObject::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewObject::render",1,"BaseTextViewObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewObject,0))){
    SWIG_fail_ptr("BaseTextViewObject_render",1,SWIGTYPE_p_BaseTextViewObject);
  }
  
  (arg1)->render();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseTextViewObject_getTextInfo(lua_State* L) {
  int SWIG_arg = 0;
  BaseTextViewObject *arg1 = (BaseTextViewObject *) 0 ;
  TextInfo *result = 0 ;
  
  SWIG_check_num_args("BaseTextViewObject::getTextInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseTextViewObject::getTextInfo",1,"BaseTextViewObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseTextViewObject,0))){
    SWIG_fail_ptr("BaseTextViewObject_getTextInfo",1,SWIGTYPE_p_BaseTextViewObject);
  }
  
  result = (TextInfo *)((BaseTextViewObject const *)arg1)->getTextInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseTextViewObject(void *obj) {
BaseTextViewObject *arg1 = (BaseTextViewObject *) obj;
delete arg1;
}
static swig_lua_method swig_BaseTextViewObject_methods[] = {
    {"updateAction", _wrap_BaseTextViewObject_updateAction}, 
    {"debugDraw", _wrap_BaseTextViewObject_debugDraw}, 
    {"isHidden", _wrap_BaseTextViewObject_isHidden}, 
    {"show", _wrap_BaseTextViewObject_show}, 
    {"hide", _wrap_BaseTextViewObject_hide}, 
    {"setPosition", _wrap_BaseTextViewObject_setPosition}, 
    {"setOrigin", _wrap_BaseTextViewObject_setOrigin}, 
    {"getOrigin", _wrap_BaseTextViewObject_getOrigin}, 
    {"getRotation", _wrap_BaseTextViewObject_getRotation}, 
    {"setRotation", _wrap_BaseTextViewObject_setRotation}, 
    {"getWorldTransform", _wrap_BaseTextViewObject_getWorldTransform}, 
    {"setWorldTransform", _wrap_BaseTextViewObject_setWorldTransform}, 
    {"setTextKey", _wrap_BaseTextViewObject_setTextKey}, 
    {"getTextKey", _wrap_BaseTextViewObject_getTextKey}, 
    {"render", _wrap_BaseTextViewObject_render}, 
    {"getTextInfo", _wrap_BaseTextViewObject_getTextInfo}, 
    {0,0}
};
static swig_lua_attribute swig_BaseTextViewObject_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_BaseTextViewObject_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BaseTextViewObject_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BaseTextViewObject_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BaseTextViewObject_bases[] = {0};
static const char *swig_BaseTextViewObject_base_names[] = {0};
static swig_lua_class _wrap_class_BaseTextViewObject = { "BaseTextViewObject", &SWIGTYPE_p_BaseTextViewObject,_wrap_new_BaseTextViewObject, swig_delete_BaseTextViewObject, swig_BaseTextViewObject_methods, swig_BaseTextViewObject_attributes, { "BaseTextViewObject", swig_BaseTextViewObject_cls_methods, swig_BaseTextViewObject_cls_attributes, swig_BaseTextViewObject_cls_constants }, swig_BaseTextViewObject_bases, swig_BaseTextViewObject_base_names };

static int _wrap_LocalizedTextViewObjectStruct_type_set(lua_State* L) {
  int SWIG_arg = 0;
  LocalizedTextViewObjectStruct *arg1 = (LocalizedTextViewObjectStruct *) 0 ;
  LocalizedTextViewObjectType arg2 ;
  
  SWIG_check_num_args("LocalizedTextViewObjectStruct::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocalizedTextViewObjectStruct::type",1,"LocalizedTextViewObjectStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LocalizedTextViewObjectStruct::type",2,"LocalizedTextViewObjectType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocalizedTextViewObjectStruct,0))){
    SWIG_fail_ptr("LocalizedTextViewObjectStruct_type_set",1,SWIGTYPE_p_LocalizedTextViewObjectStruct);
  }
  
  arg2 = (LocalizedTextViewObjectType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocalizedTextViewObjectStruct_type_get(lua_State* L) {
  int SWIG_arg = 0;
  LocalizedTextViewObjectStruct *arg1 = (LocalizedTextViewObjectStruct *) 0 ;
  LocalizedTextViewObjectType result;
  
  SWIG_check_num_args("LocalizedTextViewObjectStruct::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocalizedTextViewObjectStruct::type",1,"LocalizedTextViewObjectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocalizedTextViewObjectStruct,0))){
    SWIG_fail_ptr("LocalizedTextViewObjectStruct_type_get",1,SWIGTYPE_p_LocalizedTextViewObjectStruct);
  }
  
  result = (LocalizedTextViewObjectType) ((arg1)->type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocalizedTextViewObjectStruct_font_name_set(lua_State* L) {
  int SWIG_arg = 0;
  LocalizedTextViewObjectStruct *arg1 = (LocalizedTextViewObjectStruct *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("LocalizedTextViewObjectStruct::font_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocalizedTextViewObjectStruct::font_name",1,"LocalizedTextViewObjectStruct *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LocalizedTextViewObjectStruct::font_name",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocalizedTextViewObjectStruct,0))){
    SWIG_fail_ptr("LocalizedTextViewObjectStruct_font_name_set",1,SWIGTYPE_p_LocalizedTextViewObjectStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("LocalizedTextViewObjectStruct_font_name_set",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->font_name = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocalizedTextViewObjectStruct_font_name_get(lua_State* L) {
  int SWIG_arg = 0;
  LocalizedTextViewObjectStruct *arg1 = (LocalizedTextViewObjectStruct *) 0 ;
  std::string result;
  
  SWIG_check_num_args("LocalizedTextViewObjectStruct::font_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocalizedTextViewObjectStruct::font_name",1,"LocalizedTextViewObjectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocalizedTextViewObjectStruct,0))){
    SWIG_fail_ptr("LocalizedTextViewObjectStruct_font_name_get",1,SWIGTYPE_p_LocalizedTextViewObjectStruct);
  }
  
  result =  ((arg1)->font_name);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocalizedTextViewObjectStruct_font_size_set(lua_State* L) {
  int SWIG_arg = 0;
  LocalizedTextViewObjectStruct *arg1 = (LocalizedTextViewObjectStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("LocalizedTextViewObjectStruct::font_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocalizedTextViewObjectStruct::font_size",1,"LocalizedTextViewObjectStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LocalizedTextViewObjectStruct::font_size",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocalizedTextViewObjectStruct,0))){
    SWIG_fail_ptr("LocalizedTextViewObjectStruct_font_size_set",1,SWIGTYPE_p_LocalizedTextViewObjectStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->font_size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocalizedTextViewObjectStruct_font_size_get(lua_State* L) {
  int SWIG_arg = 0;
  LocalizedTextViewObjectStruct *arg1 = (LocalizedTextViewObjectStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("LocalizedTextViewObjectStruct::font_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocalizedTextViewObjectStruct::font_size",1,"LocalizedTextViewObjectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocalizedTextViewObjectStruct,0))){
    SWIG_fail_ptr("LocalizedTextViewObjectStruct_font_size_get",1,SWIGTYPE_p_LocalizedTextViewObjectStruct);
  }
  
  result = (int) ((arg1)->font_size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LocalizedTextViewObjectStruct(lua_State* L) {
  int SWIG_arg = 0;
  LocalizedTextViewObjectStruct *result = 0 ;
  
  SWIG_check_num_args("LocalizedTextViewObjectStruct::LocalizedTextViewObjectStruct",0,0)
  result = (LocalizedTextViewObjectStruct *)new LocalizedTextViewObjectStruct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LocalizedTextViewObjectStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LocalizedTextViewObjectStruct(void *obj) {
LocalizedTextViewObjectStruct *arg1 = (LocalizedTextViewObjectStruct *) obj;
delete arg1;
}
static swig_lua_method swig_LocalizedTextViewObjectStruct_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_LocalizedTextViewObjectStruct_attributes[] = {
    { "type", _wrap_LocalizedTextViewObjectStruct_type_get, _wrap_LocalizedTextViewObjectStruct_type_set},
    { "font_name", _wrap_LocalizedTextViewObjectStruct_font_name_get, _wrap_LocalizedTextViewObjectStruct_font_name_set},
    { "font_size", _wrap_LocalizedTextViewObjectStruct_font_size_get, _wrap_LocalizedTextViewObjectStruct_font_size_set},
    {0,0,0}
};
static swig_lua_attribute swig_LocalizedTextViewObjectStruct_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LocalizedTextViewObjectStruct_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LocalizedTextViewObjectStruct_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LocalizedTextViewObjectStruct_bases[] = {0};
static const char *swig_LocalizedTextViewObjectStruct_base_names[] = {0};
static swig_lua_class _wrap_class_LocalizedTextViewObjectStruct = { "LocalizedTextViewObjectStruct", &SWIGTYPE_p_LocalizedTextViewObjectStruct,_wrap_new_LocalizedTextViewObjectStruct, swig_delete_LocalizedTextViewObjectStruct, swig_LocalizedTextViewObjectStruct_methods, swig_LocalizedTextViewObjectStruct_attributes, { "LocalizedTextViewObjectStruct", swig_LocalizedTextViewObjectStruct_cls_methods, swig_LocalizedTextViewObjectStruct_cls_attributes, swig_LocalizedTextViewObjectStruct_cls_constants }, swig_LocalizedTextViewObjectStruct_bases, swig_LocalizedTextViewObjectStruct_base_names };

static int _wrap_g_LocalizedTextViewObjectStructData_get(lua_State* L) {
  int SWIG_arg = 0;
  LocalizedTextViewObjectStruct *result = 0 ;
  
  SWIG_check_num_args("g_LocalizedTextViewObjectStructData",0,0)
  result = (LocalizedTextViewObjectStruct *)(LocalizedTextViewObjectStruct *)g_LocalizedTextViewObjectStructData;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LocalizedTextViewObjectStruct,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextViewObjectStruct_type_set(lua_State* L) {
  int SWIG_arg = 0;
  TextViewObjectStruct *arg1 = (TextViewObjectStruct *) 0 ;
  TextViewObjectType arg2 ;
  
  SWIG_check_num_args("TextViewObjectStruct::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextViewObjectStruct::type",1,"TextViewObjectStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextViewObjectStruct::type",2,"TextViewObjectType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextViewObjectStruct,0))){
    SWIG_fail_ptr("TextViewObjectStruct_type_set",1,SWIGTYPE_p_TextViewObjectStruct);
  }
  
  arg2 = (TextViewObjectType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextViewObjectStruct_type_get(lua_State* L) {
  int SWIG_arg = 0;
  TextViewObjectStruct *arg1 = (TextViewObjectStruct *) 0 ;
  TextViewObjectType result;
  
  SWIG_check_num_args("TextViewObjectStruct::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextViewObjectStruct::type",1,"TextViewObjectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextViewObjectStruct,0))){
    SWIG_fail_ptr("TextViewObjectStruct_type_get",1,SWIGTYPE_p_TextViewObjectStruct);
  }
  
  result = (TextViewObjectType) ((arg1)->type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextViewObjectStruct_font_name_set(lua_State* L) {
  int SWIG_arg = 0;
  TextViewObjectStruct *arg1 = (TextViewObjectStruct *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("TextViewObjectStruct::font_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextViewObjectStruct::font_name",1,"TextViewObjectStruct *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TextViewObjectStruct::font_name",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextViewObjectStruct,0))){
    SWIG_fail_ptr("TextViewObjectStruct_font_name_set",1,SWIGTYPE_p_TextViewObjectStruct);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("TextViewObjectStruct_font_name_set",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->font_name = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextViewObjectStruct_font_name_get(lua_State* L) {
  int SWIG_arg = 0;
  TextViewObjectStruct *arg1 = (TextViewObjectStruct *) 0 ;
  std::string result;
  
  SWIG_check_num_args("TextViewObjectStruct::font_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextViewObjectStruct::font_name",1,"TextViewObjectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextViewObjectStruct,0))){
    SWIG_fail_ptr("TextViewObjectStruct_font_name_get",1,SWIGTYPE_p_TextViewObjectStruct);
  }
  
  result =  ((arg1)->font_name);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextViewObjectStruct_font_size_set(lua_State* L) {
  int SWIG_arg = 0;
  TextViewObjectStruct *arg1 = (TextViewObjectStruct *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TextViewObjectStruct::font_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextViewObjectStruct::font_size",1,"TextViewObjectStruct *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TextViewObjectStruct::font_size",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextViewObjectStruct,0))){
    SWIG_fail_ptr("TextViewObjectStruct_font_size_set",1,SWIGTYPE_p_TextViewObjectStruct);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->font_size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextViewObjectStruct_font_size_get(lua_State* L) {
  int SWIG_arg = 0;
  TextViewObjectStruct *arg1 = (TextViewObjectStruct *) 0 ;
  int result;
  
  SWIG_check_num_args("TextViewObjectStruct::font_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TextViewObjectStruct::font_size",1,"TextViewObjectStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TextViewObjectStruct,0))){
    SWIG_fail_ptr("TextViewObjectStruct_font_size_get",1,SWIGTYPE_p_TextViewObjectStruct);
  }
  
  result = (int) ((arg1)->font_size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TextViewObjectStruct(lua_State* L) {
  int SWIG_arg = 0;
  TextViewObjectStruct *result = 0 ;
  
  SWIG_check_num_args("TextViewObjectStruct::TextViewObjectStruct",0,0)
  result = (TextViewObjectStruct *)new TextViewObjectStruct();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextViewObjectStruct,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TextViewObjectStruct(void *obj) {
TextViewObjectStruct *arg1 = (TextViewObjectStruct *) obj;
delete arg1;
}
static swig_lua_method swig_TextViewObjectStruct_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_TextViewObjectStruct_attributes[] = {
    { "type", _wrap_TextViewObjectStruct_type_get, _wrap_TextViewObjectStruct_type_set},
    { "font_name", _wrap_TextViewObjectStruct_font_name_get, _wrap_TextViewObjectStruct_font_name_set},
    { "font_size", _wrap_TextViewObjectStruct_font_size_get, _wrap_TextViewObjectStruct_font_size_set},
    {0,0,0}
};
static swig_lua_attribute swig_TextViewObjectStruct_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TextViewObjectStruct_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_TextViewObjectStruct_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_TextViewObjectStruct_bases[] = {0};
static const char *swig_TextViewObjectStruct_base_names[] = {0};
static swig_lua_class _wrap_class_TextViewObjectStruct = { "TextViewObjectStruct", &SWIGTYPE_p_TextViewObjectStruct,_wrap_new_TextViewObjectStruct, swig_delete_TextViewObjectStruct, swig_TextViewObjectStruct_methods, swig_TextViewObjectStruct_attributes, { "TextViewObjectStruct", swig_TextViewObjectStruct_cls_methods, swig_TextViewObjectStruct_cls_attributes, swig_TextViewObjectStruct_cls_constants }, swig_TextViewObjectStruct_bases, swig_TextViewObjectStruct_base_names };

static int _wrap_g_TextViewObjectStructData_get(lua_State* L) {
  int SWIG_arg = 0;
  TextViewObjectStruct *result = 0 ;
  
  SWIG_check_num_args("g_TextViewObjectStructData",0,0)
  result = (TextViewObjectStruct *)(TextViewObjectStruct *)g_TextViewObjectStructData;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextViewObjectStruct,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaVM_init(lua_State* L) {
  int SWIG_arg = 0;
  LuaVM *arg1 = (LuaVM *) 0 ;
  
  SWIG_check_num_args("LuaVM::init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaVM::init",1,"LuaVM *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaVM,0))){
    SWIG_fail_ptr("LuaVM_init",1,SWIGTYPE_p_LuaVM);
  }
  
  (arg1)->init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaVM_execute(lua_State* L) {
  int SWIG_arg = 0;
  LuaVM *arg1 = (LuaVM *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("LuaVM::execute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaVM::execute",1,"LuaVM *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LuaVM::execute",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaVM,0))){
    SWIG_fail_ptr("LuaVM_execute",1,SWIGTYPE_p_LuaVM);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->execute((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaVM_unInit(lua_State* L) {
  int SWIG_arg = 0;
  LuaVM *arg1 = (LuaVM *) 0 ;
  
  SWIG_check_num_args("LuaVM::unInit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaVM::unInit",1,"LuaVM *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaVM,0))){
    SWIG_fail_ptr("LuaVM_unInit",1,SWIGTYPE_p_LuaVM);
  }
  
  (arg1)->unInit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaVM_reset(lua_State* L) {
  int SWIG_arg = 0;
  LuaVM *arg1 = (LuaVM *) 0 ;
  
  SWIG_check_num_args("LuaVM::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaVM::reset",1,"LuaVM *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaVM,0))){
    SWIG_fail_ptr("LuaVM_reset",1,SWIGTYPE_p_LuaVM);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaVM_loadFile(lua_State* L) {
  int SWIG_arg = 0;
  LuaVM *arg1 = (LuaVM *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("LuaVM::loadFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaVM::loadFile",1,"LuaVM *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaVM::loadFile",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaVM,0))){
    SWIG_fail_ptr("LuaVM_loadFile",1,SWIGTYPE_p_LuaVM);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("LuaVM_loadFile",2,SWIGTYPE_p_std__string);
  }
  
  result = (bool)(arg1)->loadFile((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaVM_loadString(lua_State* L) {
  int SWIG_arg = 0;
  LuaVM *arg1 = (LuaVM *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("LuaVM::loadString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaVM::loadString",1,"LuaVM *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaVM::loadString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaVM,0))){
    SWIG_fail_ptr("LuaVM_loadString",1,SWIGTYPE_p_LuaVM);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("LuaVM_loadString",2,SWIGTYPE_p_std__string);
  }
  
  result = (bool)(arg1)->loadString((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_LuaVM_methods[] = {
    {"init", _wrap_LuaVM_init}, 
    {"execute", _wrap_LuaVM_execute}, 
    {"unInit", _wrap_LuaVM_unInit}, 
    {"reset", _wrap_LuaVM_reset}, 
    {"loadFile", _wrap_LuaVM_loadFile}, 
    {"loadString", _wrap_LuaVM_loadString}, 
    {0,0}
};
static swig_lua_attribute swig_LuaVM_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_LuaVM_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaVM_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LuaVM_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LuaVM_bases[] = {0,0};
static const char *swig_LuaVM_base_names[] = {"AbstractSingleton< LuaVM > *",0};
static swig_lua_class _wrap_class_LuaVM = { "LuaVM", &SWIGTYPE_p_LuaVM,0,0, swig_LuaVM_methods, swig_LuaVM_attributes, { "LuaVM", swig_LuaVM_cls_methods, swig_LuaVM_cls_attributes, swig_LuaVM_cls_constants }, swig_LuaVM_bases, swig_LuaVM_base_names };

static int _wrap_GLDebugDrawer_setShaderFactoryID(lua_State* L) {
  int SWIG_arg = 0;
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  IDType arg2 ;
  
  SWIG_check_num_args("GLDebugDrawer::setShaderFactoryID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GLDebugDrawer::setShaderFactoryID",1,"GLDebugDrawer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GLDebugDrawer::setShaderFactoryID",2,"IDType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GLDebugDrawer,0))){
    SWIG_fail_ptr("GLDebugDrawer_setShaderFactoryID",1,SWIGTYPE_p_GLDebugDrawer);
  }
  
  arg2 = (IDType const)lua_tonumber(L, 2);
  (arg1)->setShaderFactoryID(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLDebugDrawer_setOrthoCamera(lua_State* L) {
  int SWIG_arg = 0;
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  
  SWIG_check_num_args("GLDebugDrawer::setOrthoCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GLDebugDrawer::setOrthoCamera",1,"GLDebugDrawer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GLDebugDrawer,0))){
    SWIG_fail_ptr("GLDebugDrawer_setOrthoCamera",1,SWIGTYPE_p_GLDebugDrawer);
  }
  
  (arg1)->setOrthoCamera();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLDebugDrawer_setProjectionCamera(lua_State* L) {
  int SWIG_arg = 0;
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  
  SWIG_check_num_args("GLDebugDrawer::setProjectionCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GLDebugDrawer::setProjectionCamera",1,"GLDebugDrawer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GLDebugDrawer,0))){
    SWIG_fail_ptr("GLDebugDrawer_setProjectionCamera",1,SWIGTYPE_p_GLDebugDrawer);
  }
  
  (arg1)->setProjectionCamera();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLDebugDrawer_getCurrentCamera(lua_State* L) {
  int SWIG_arg = 0;
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  BaseCamera *result = 0 ;
  
  SWIG_check_num_args("GLDebugDrawer::getCurrentCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GLDebugDrawer::getCurrentCamera",1,"GLDebugDrawer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GLDebugDrawer,0))){
    SWIG_fail_ptr("GLDebugDrawer_getCurrentCamera",1,SWIGTYPE_p_GLDebugDrawer);
  }
  
  result = (BaseCamera *)(arg1)->getCurrentCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseCamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLDebugDrawer_setCurrentCamera(lua_State* L) {
  int SWIG_arg = 0;
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  BaseCamera *arg2 = (BaseCamera *) 0 ;
  
  SWIG_check_num_args("GLDebugDrawer::setCurrentCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GLDebugDrawer::setCurrentCamera",1,"GLDebugDrawer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GLDebugDrawer::setCurrentCamera",2,"BaseCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GLDebugDrawer,0))){
    SWIG_fail_ptr("GLDebugDrawer_setCurrentCamera",1,SWIGTYPE_p_GLDebugDrawer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseCamera,0))){
    SWIG_fail_ptr("GLDebugDrawer_setCurrentCamera",2,SWIGTYPE_p_BaseCamera);
  }
  
  (arg1)->setCurrentCamera(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLDebugDrawer(lua_State* L) {
  int SWIG_arg = 0;
  GLDebugDrawer *result = 0 ;
  
  SWIG_check_num_args("GLDebugDrawer::GLDebugDrawer",0,0)
  result = (GLDebugDrawer *)new GLDebugDrawer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GLDebugDrawer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLDebugDrawer_drawLine__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  SWIG_check_num_args("GLDebugDrawer::drawLine",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GLDebugDrawer::drawLine",1,"GLDebugDrawer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("GLDebugDrawer::drawLine",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("GLDebugDrawer::drawLine",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("GLDebugDrawer::drawLine",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("GLDebugDrawer::drawLine",5,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GLDebugDrawer,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawLine",1,SWIGTYPE_p_GLDebugDrawer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawLine",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawLine",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawLine",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawLine",5,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->drawLine((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLDebugDrawer_drawLine__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("GLDebugDrawer::drawLine",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GLDebugDrawer::drawLine",1,"GLDebugDrawer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("GLDebugDrawer::drawLine",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("GLDebugDrawer::drawLine",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("GLDebugDrawer::drawLine",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GLDebugDrawer,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawLine",1,SWIGTYPE_p_GLDebugDrawer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawLine",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawLine",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawLine",4,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->drawLine((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLDebugDrawer_drawLine(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GLDebugDrawer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_GLDebugDrawer_drawLine__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GLDebugDrawer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_GLDebugDrawer_drawLine__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GLDebugDrawer_drawLine'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GLDebugDrawer::drawLine(btVector3 const &,btVector3 const &,btVector3 const &,btVector3 const &)\n"
    "    GLDebugDrawer::drawLine(btVector3 const &,btVector3 const &,btVector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GLDebugDrawer_drawSphere(lua_State* L) {
  int SWIG_arg = 0;
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btVector3 *arg4 = 0 ;
  
  SWIG_check_num_args("GLDebugDrawer::drawSphere",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GLDebugDrawer::drawSphere",1,"GLDebugDrawer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("GLDebugDrawer::drawSphere",2,"btVector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GLDebugDrawer::drawSphere",3,"btScalar");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("GLDebugDrawer::drawSphere",4,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GLDebugDrawer,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawSphere",1,SWIGTYPE_p_GLDebugDrawer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawSphere",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawSphere",4,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->drawSphere((btVector3 const &)*arg2,arg3,(btVector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLDebugDrawer_drawBox(lua_State* L) {
  int SWIG_arg = 0;
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  
  SWIG_check_num_args("GLDebugDrawer::drawBox",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GLDebugDrawer::drawBox",1,"GLDebugDrawer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("GLDebugDrawer::drawBox",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("GLDebugDrawer::drawBox",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("GLDebugDrawer::drawBox",4,"btVector3 const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("GLDebugDrawer::drawBox",5,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GLDebugDrawer,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawBox",1,SWIGTYPE_p_GLDebugDrawer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawBox",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawBox",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawBox",4,SWIGTYPE_p_btVector3);
  }
  
  arg5 = (btScalar)lua_tonumber(L, 5);
  (arg1)->drawBox((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLDebugDrawer_drawTriangle(lua_State* L) {
  int SWIG_arg = 0;
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btScalar arg6 ;
  
  SWIG_check_num_args("GLDebugDrawer::drawTriangle",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GLDebugDrawer::drawTriangle",1,"GLDebugDrawer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("GLDebugDrawer::drawTriangle",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("GLDebugDrawer::drawTriangle",3,"btVector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("GLDebugDrawer::drawTriangle",4,"btVector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("GLDebugDrawer::drawTriangle",5,"btVector3 const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("GLDebugDrawer::drawTriangle",6,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GLDebugDrawer,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawTriangle",1,SWIGTYPE_p_GLDebugDrawer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawTriangle",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawTriangle",3,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawTriangle",4,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawTriangle",5,SWIGTYPE_p_btVector3);
  }
  
  arg6 = (btScalar)lua_tonumber(L, 6);
  (arg1)->drawTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLDebugDrawer_drawContactPoint(lua_State* L) {
  int SWIG_arg = 0;
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  int arg5 ;
  btVector3 *arg6 = 0 ;
  
  SWIG_check_num_args("GLDebugDrawer::drawContactPoint",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GLDebugDrawer::drawContactPoint",1,"GLDebugDrawer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("GLDebugDrawer::drawContactPoint",2,"btVector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("GLDebugDrawer::drawContactPoint",3,"btVector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("GLDebugDrawer::drawContactPoint",4,"btScalar");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("GLDebugDrawer::drawContactPoint",5,"int");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("GLDebugDrawer::drawContactPoint",6,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GLDebugDrawer,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawContactPoint",1,SWIGTYPE_p_GLDebugDrawer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawContactPoint",2,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawContactPoint",3,SWIGTYPE_p_btVector3);
  }
  
  arg4 = (btScalar)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_drawContactPoint",6,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->drawContactPoint((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,(btVector3 const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLDebugDrawer_reportErrorWarning(lua_State* L) {
  int SWIG_arg = 0;
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("GLDebugDrawer::reportErrorWarning",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GLDebugDrawer::reportErrorWarning",1,"GLDebugDrawer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("GLDebugDrawer::reportErrorWarning",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GLDebugDrawer,0))){
    SWIG_fail_ptr("GLDebugDrawer_reportErrorWarning",1,SWIGTYPE_p_GLDebugDrawer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->reportErrorWarning((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLDebugDrawer_draw3dText(lua_State* L) {
  int SWIG_arg = 0;
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  btVector3 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("GLDebugDrawer::draw3dText",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GLDebugDrawer::draw3dText",1,"GLDebugDrawer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("GLDebugDrawer::draw3dText",2,"btVector3 const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("GLDebugDrawer::draw3dText",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GLDebugDrawer,0))){
    SWIG_fail_ptr("GLDebugDrawer_draw3dText",1,SWIGTYPE_p_GLDebugDrawer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("GLDebugDrawer_draw3dText",2,SWIGTYPE_p_btVector3);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->draw3dText((btVector3 const &)*arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLDebugDrawer_setDebugMode(lua_State* L) {
  int SWIG_arg = 0;
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("GLDebugDrawer::setDebugMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GLDebugDrawer::setDebugMode",1,"GLDebugDrawer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GLDebugDrawer::setDebugMode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GLDebugDrawer,0))){
    SWIG_fail_ptr("GLDebugDrawer_setDebugMode",1,SWIGTYPE_p_GLDebugDrawer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDebugMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLDebugDrawer_getDebugMode(lua_State* L) {
  int SWIG_arg = 0;
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  int result;
  
  SWIG_check_num_args("GLDebugDrawer::getDebugMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GLDebugDrawer::getDebugMode",1,"GLDebugDrawer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GLDebugDrawer,0))){
    SWIG_fail_ptr("GLDebugDrawer_getDebugMode",1,SWIGTYPE_p_GLDebugDrawer);
  }
  
  result = (int)((GLDebugDrawer const *)arg1)->getDebugMode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GLDebugDrawer(void *obj) {
GLDebugDrawer *arg1 = (GLDebugDrawer *) obj;
delete arg1;
}
static swig_lua_method swig_GLDebugDrawer_methods[] = {
    {"setShaderFactoryID", _wrap_GLDebugDrawer_setShaderFactoryID}, 
    {"setOrthoCamera", _wrap_GLDebugDrawer_setOrthoCamera}, 
    {"setProjectionCamera", _wrap_GLDebugDrawer_setProjectionCamera}, 
    {"getCurrentCamera", _wrap_GLDebugDrawer_getCurrentCamera}, 
    {"setCurrentCamera", _wrap_GLDebugDrawer_setCurrentCamera}, 
    {"drawLine", _wrap_GLDebugDrawer_drawLine}, 
    {"drawSphere", _wrap_GLDebugDrawer_drawSphere}, 
    {"drawBox", _wrap_GLDebugDrawer_drawBox}, 
    {"drawTriangle", _wrap_GLDebugDrawer_drawTriangle}, 
    {"drawContactPoint", _wrap_GLDebugDrawer_drawContactPoint}, 
    {"reportErrorWarning", _wrap_GLDebugDrawer_reportErrorWarning}, 
    {"draw3dText", _wrap_GLDebugDrawer_draw3dText}, 
    {"setDebugMode", _wrap_GLDebugDrawer_setDebugMode}, 
    {"getDebugMode", _wrap_GLDebugDrawer_getDebugMode}, 
    {0,0}
};
static swig_lua_attribute swig_GLDebugDrawer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_GLDebugDrawer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GLDebugDrawer_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_GLDebugDrawer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_GLDebugDrawer_bases[] = {0,0};
static const char *swig_GLDebugDrawer_base_names[] = {"AbstractSingleton< GLDebugDrawer > *",0};
static swig_lua_class _wrap_class_GLDebugDrawer = { "GLDebugDrawer", &SWIGTYPE_p_GLDebugDrawer,_wrap_new_GLDebugDrawer, swig_delete_GLDebugDrawer, swig_GLDebugDrawer_methods, swig_GLDebugDrawer_attributes, { "GLDebugDrawer", swig_GLDebugDrawer_cls_methods, swig_GLDebugDrawer_cls_attributes, swig_GLDebugDrawer_cls_constants }, swig_GLDebugDrawer_bases, swig_GLDebugDrawer_base_names };

static int _wrap_new_BaseEntityState(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityState *result = 0 ;
  
  SWIG_check_num_args("BaseEntityState::BaseEntityState",0,0)
  result = (BaseEntityState *)new BaseEntityState();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BaseEntityState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntityState_enter(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityState *arg1 = (BaseEntityState *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  
  SWIG_check_num_args("BaseEntityState::enter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityState::enter",1,"BaseEntityState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseEntityState::enter",2,"BaseEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityState,0))){
    SWIG_fail_ptr("BaseEntityState_enter",1,SWIGTYPE_p_BaseEntityState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("BaseEntityState_enter",2,SWIGTYPE_p_BaseEntity);
  }
  
  (arg1)->enter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntityState_update(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityState *arg1 = (BaseEntityState *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  btScalar arg3 ;
  
  SWIG_check_num_args("BaseEntityState::update",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityState::update",1,"BaseEntityState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseEntityState::update",2,"BaseEntity *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("BaseEntityState::update",3,"btScalar");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityState,0))){
    SWIG_fail_ptr("BaseEntityState_update",1,SWIGTYPE_p_BaseEntityState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("BaseEntityState_update",2,SWIGTYPE_p_BaseEntity);
  }
  
  arg3 = (btScalar)lua_tonumber(L, 3);
  (arg1)->update(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntityState_exit(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityState *arg1 = (BaseEntityState *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  
  SWIG_check_num_args("BaseEntityState::exit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityState::exit",1,"BaseEntityState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseEntityState::exit",2,"BaseEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityState,0))){
    SWIG_fail_ptr("BaseEntityState_exit",1,SWIGTYPE_p_BaseEntityState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("BaseEntityState_exit",2,SWIGTYPE_p_BaseEntity);
  }
  
  (arg1)->exit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BaseEntityState_onMessage(lua_State* L) {
  int SWIG_arg = 0;
  BaseEntityState *arg1 = (BaseEntityState *) 0 ;
  BaseEntity *arg2 = (BaseEntity *) 0 ;
  Telegram *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("BaseEntityState::onMessage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BaseEntityState::onMessage",1,"BaseEntityState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BaseEntityState::onMessage",2,"BaseEntity *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("BaseEntityState::onMessage",3,"Telegram const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BaseEntityState,0))){
    SWIG_fail_ptr("BaseEntityState_onMessage",1,SWIGTYPE_p_BaseEntityState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BaseEntity,0))){
    SWIG_fail_ptr("BaseEntityState_onMessage",2,SWIGTYPE_p_BaseEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Telegram,0))){
    SWIG_fail_ptr("BaseEntityState_onMessage",3,SWIGTYPE_p_Telegram);
  }
  
  result = (bool)(arg1)->onMessage(arg2,(Telegram const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BaseEntityState(void *obj) {
BaseEntityState *arg1 = (BaseEntityState *) obj;
delete arg1;
}
static swig_lua_method swig_BaseEntityState_methods[] = {
    {"enter", _wrap_BaseEntityState_enter}, 
    {"update", _wrap_BaseEntityState_update}, 
    {"exit", _wrap_BaseEntityState_exit}, 
    {"onMessage", _wrap_BaseEntityState_onMessage}, 
    {0,0}
};
static swig_lua_attribute swig_BaseEntityState_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_BaseEntityState_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BaseEntityState_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_BaseEntityState_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_BaseEntityState_bases[] = {0,0};
static const char *swig_BaseEntityState_base_names[] = {"AbstractState< BaseEntity > *",0};
static swig_lua_class _wrap_class_BaseEntityState = { "BaseEntityState", &SWIGTYPE_p_BaseEntityState,_wrap_new_BaseEntityState, swig_delete_BaseEntityState, swig_BaseEntityState_methods, swig_BaseEntityState_attributes, { "BaseEntityState", swig_BaseEntityState_cls_methods, swig_BaseEntityState_cls_attributes, swig_BaseEntityState_cls_constants }, swig_BaseEntityState_bases, swig_BaseEntityState_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_Reg swig_commands[] = {
    { "MazeCreator_Singleton_createInstance", _wrap_MazeCreator_Singleton_createInstance},
    { "MazeCreator_Singleton_destroyInstance", _wrap_MazeCreator_Singleton_destroyInstance},
    { "MazeCreator_Singleton_getInstance", _wrap_MazeCreator_Singleton_getInstance},
    { "MazeCreator_Singleton_hasInstance", _wrap_MazeCreator_Singleton_hasInstance},
    { "MessageDispatcher_Singleton_createInstance", _wrap_MessageDispatcher_Singleton_createInstance},
    { "MessageDispatcher_Singleton_destroyInstance", _wrap_MessageDispatcher_Singleton_destroyInstance},
    { "MessageDispatcher_Singleton_getInstance", _wrap_MessageDispatcher_Singleton_getInstance},
    { "MessageDispatcher_Singleton_hasInstance", _wrap_MessageDispatcher_Singleton_hasInstance},
    { "LuaVM_Singleton_createInstance", _wrap_LuaVM_Singleton_createInstance},
    { "LuaVM_Singleton_destroyInstance", _wrap_LuaVM_Singleton_destroyInstance},
    { "LuaVM_Singleton_getInstance", _wrap_LuaVM_Singleton_getInstance},
    { "LuaVM_Singleton_hasInstance", _wrap_LuaVM_Singleton_hasInstance},
    { "GLDebugDrawer_Singleton_createInstance", _wrap_GLDebugDrawer_Singleton_createInstance},
    { "GLDebugDrawer_Singleton_destroyInstance", _wrap_GLDebugDrawer_Singleton_destroyInstance},
    { "GLDebugDrawer_Singleton_getInstance", _wrap_GLDebugDrawer_Singleton_getInstance},
    { "GLDebugDrawer_Singleton_hasInstance", _wrap_GLDebugDrawer_Singleton_hasInstance},
    { "BaseCamera_createCollisionShape", _wrap_BaseCamera_createCollisionShape},
    { "CameraFactory_updateScreenDimensions", _wrap_CameraFactory_updateScreenDimensions},
    { "CameraFactory_getScreenWidth", _wrap_CameraFactory_getScreenWidth},
    { "CameraFactory_getScreenHeight", _wrap_CameraFactory_getScreenHeight},
    { "CameraFactory_getAspectRatio", _wrap_CameraFactory_getAspectRatio},
    { "CollisionShapeFactory_createShape", _wrap_CollisionShapeFactory_createShape},
    { "OcclusionBuffer_project", _wrap_OcclusionBuffer_project},
    { "btGjkEpaSolver2_StackSizeRequirement", _wrap_btGjkEpaSolver2_StackSizeRequirement},
    { "btGjkEpaSolver2_Distance", _wrap_btGjkEpaSolver2_Distance},
    { "btGjkEpaSolver2_Penetration",_wrap_btGjkEpaSolver2_Penetration},
    { "btGjkEpaSolver2_SignedDistance",_wrap_btGjkEpaSolver2_SignedDistance},
    { "btSoftBody_clusterVelocity", _wrap_btSoftBody_clusterVelocity},
    { "btSoftBody_clusterVImpulse", _wrap_btSoftBody_clusterVImpulse},
    { "btSoftBody_clusterDImpulse", _wrap_btSoftBody_clusterDImpulse},
    { "btSoftBody_clusterImpulse", _wrap_btSoftBody_clusterImpulse},
    { "btSoftBody_clusterVAImpulse", _wrap_btSoftBody_clusterVAImpulse},
    { "btSoftBody_clusterDAImpulse", _wrap_btSoftBody_clusterDAImpulse},
    { "btSoftBody_clusterAImpulse", _wrap_btSoftBody_clusterAImpulse},
    { "btSoftBody_clusterDCImpulse", _wrap_btSoftBody_clusterDCImpulse},
    { "btSoftBody_solveCommonConstraints", _wrap_btSoftBody_solveCommonConstraints},
    { "btSoftBody_upcast",_wrap_btSoftBody_upcast},
    { "btSoftBody_PSolve_Anchors", _wrap_btSoftBody_PSolve_Anchors},
    { "btSoftBody_PSolve_RContacts", _wrap_btSoftBody_PSolve_RContacts},
    { "btSoftBody_PSolve_SContacts", _wrap_btSoftBody_PSolve_SContacts},
    { "btSoftBody_PSolve_Links", _wrap_btSoftBody_PSolve_Links},
    { "btSoftBody_VSolve_Links", _wrap_btSoftBody_VSolve_Links},
    { "btSoftBody_getSolver",_wrap_btSoftBody_getSolver},
    { "btSoftRigidDynamicsWorld_rayTestSingle", _wrap_btSoftRigidDynamicsWorld_rayTestSingle},
    { "btGhostObject_upcast",_wrap_btGhostObject_upcast},
    { "WorldPhysics_createInstance",_wrap_WorldPhysics_createInstance},
    { "WorldPhysics_getInstance", _wrap_WorldPhysics_getInstance},
    { "WorldPhysics_destroyInstance", _wrap_WorldPhysics_destroyInstance},
    { "WorldPhysics_getFrictionAbs", _wrap_WorldPhysics_getFrictionAbs},
    { "randomInteger", _wrap_randomInteger},
    { "randomIntegerRange", _wrap_randomIntegerRange},
    { "randomScalar", _wrap_randomScalar},
    { "randomScalarInRange", _wrap_randomScalarInRange},
    { "randomBool", _wrap_randomBool},
    { "randomScalarClamped", _wrap_randomScalarClamped},
    { "RADIANS_TO_DEGREES", _wrap_RADIANS_TO_DEGREES},
    { "DEGREES_TO_RADIANS", _wrap_DEGREES_TO_RADIANS},
    { "planeLineIntersection", _wrap_planeLineIntersection},
    { "pointToWorldSpace", _wrap_pointToWorldSpace},
    { "getGLKMatrix4", _wrap_getGLKMatrix4},
    { "getbtTransform", _wrap_getbtTransform},
    { "fixAngle", _wrap_fixAngle},
    { "fixVector3", _wrap_fixVector3},
    { "log", _wrap_log},
    { "boolStr", _wrap_boolStr},
    { "btVectorStr",_wrap_btVectorStr},
    { "btScalarStr", _wrap_btScalarStr},
    { "GLKMatrix3Str", _wrap_GLKMatrix3Str},
    { "GLKMatrix4Str", _wrap_GLKMatrix4Str},
    { "btMatrix3x3Str", _wrap_btMatrix3x3Str},
    { "btTransformStr", _wrap_btTransformStr},
    { "btManifoldPointStr", _wrap_btManifoldPointStr},
    { "createPitchRotation", _wrap_createPitchRotation},
    { "createYawRotation", _wrap_createYawRotation},
    { "createRollRotation", _wrap_createRollRotation},
    { "TriNormal", _wrap_TriNormal},
    { "ltrim", _wrap_ltrim},
    { "rtrim", _wrap_rtrim},
    { "trim", _wrap_trim},
    { "deCasteljauPoint", _wrap_deCasteljauPoint},
    { "calculateBezierPoint",_wrap_calculateBezierPoint},
    { "_check_gl_error", _wrap__check_gl_error},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "deviceMotion", _wrap_deviceMotion_get, _wrap_deviceMotion_set },
    { "JIMBO", _wrap_JIMBO_get, _wrap_JIMBO_set },
    { "CollisionShapeFactory_s_ConvexMargin", _wrap_CollisionShapeFactory_s_ConvexMargin_get, SWIG_Lua_set_immutable },
    { "c_dMINDETECTIONBOXLENGTH", _wrap_c_dMINDETECTIONBOXLENGTH_get, SWIG_Lua_set_immutable },
    { "SmallestDelay", _wrap_SmallestDelay_get, SWIG_Lua_set_immutable },
    { "cMazeNodeNames", _wrap_cMazeNodeNames_get, SWIG_Lua_set_immutable },
    { "g_vYawAxis", _wrap_g_vYawAxis_get, SWIG_Lua_set_immutable },
    { "g_vRollAxis", _wrap_g_vRollAxis_get, SWIG_Lua_set_immutable },
    { "g_vPitchAxis", _wrap_g_vPitchAxis_get, SWIG_Lua_set_immutable },
    { "g_vSideVector", _wrap_g_vSideVector_get, SWIG_Lua_set_immutable },
    { "g_vUpVector", _wrap_g_vUpVector_get, SWIG_Lua_set_immutable },
    { "g_vHeadingVector", _wrap_g_vHeadingVector_get, SWIG_Lua_set_immutable },
    { "VERTEX_SHADER", _wrap_VERTEX_SHADER_get, SWIG_Lua_set_immutable },
    { "FRAGMENT_SHADER", _wrap_FRAGMENT_SHADER_get, SWIG_Lua_set_immutable },
    { "CHARLEN", _wrap_CHARLEN_get, SWIG_Lua_set_immutable },
    { "SEND_MSG_IMMEDIATELY", _wrap_SEND_MSG_IMMEDIATELY_get, SWIG_Lua_set_immutable },
    { "NO_ADDITIONAL_INFO", _wrap_NO_ADDITIONAL_INFO_get, SWIG_Lua_set_immutable },
    { "SENDER_ID_IRRELEVANT", _wrap_SENDER_ID_IRRELEVANT_get, SWIG_Lua_set_immutable },
    { "g_LocalizedTextViewObjectStructData", _wrap_g_LocalizedTextViewObjectStructData_get, SWIG_Lua_set_immutable },
    { "g_TextViewObjectStructData", _wrap_g_TextViewObjectStructData_get, SWIG_Lua_set_immutable },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("DeviceSwipeDirectionNONE", DeviceSwipeDirectionNONE)},
    {SWIG_LUA_CONSTTAB_INT("DeviceSwipeDirectionRight", DeviceSwipeDirectionRight)},
    {SWIG_LUA_CONSTTAB_INT("DeviceSwipeDirectionLeft", DeviceSwipeDirectionLeft)},
    {SWIG_LUA_CONSTTAB_INT("DeviceSwipeDirectionUp", DeviceSwipeDirectionUp)},
    {SWIG_LUA_CONSTTAB_INT("DeviceSwipeDirectionDown", DeviceSwipeDirectionDown)},
    {SWIG_LUA_CONSTTAB_INT("DeviceSwipeDirectionUpRight", DeviceSwipeDirectionUpRight)},
    {SWIG_LUA_CONSTTAB_INT("DeviceSwipeDirectionUpLeft", DeviceSwipeDirectionUpLeft)},
    {SWIG_LUA_CONSTTAB_INT("DeviceSwipeDirectionDownRight", DeviceSwipeDirectionDownRight)},
    {SWIG_LUA_CONSTTAB_INT("DeviceSwipeDirectionDownLeft", DeviceSwipeDirectionDownLeft)},
    {SWIG_LUA_CONSTTAB_INT("DeviceTouchPhaseBegan", DeviceTouchPhaseBegan)},
    {SWIG_LUA_CONSTTAB_INT("DeviceTouchPhaseMoved", DeviceTouchPhaseMoved)},
    {SWIG_LUA_CONSTTAB_INT("DeviceTouchPhaseStationary", DeviceTouchPhaseStationary)},
    {SWIG_LUA_CONSTTAB_INT("DeviceTouchPhaseEnded", DeviceTouchPhaseEnded)},
    {SWIG_LUA_CONSTTAB_INT("DeviceTouchPhaseCancelled", DeviceTouchPhaseCancelled)},
    {SWIG_LUA_CONSTTAB_INT("DeviceGestureStatePossible", DeviceGestureStatePossible)},
    {SWIG_LUA_CONSTTAB_INT("DeviceGestureStateBegan", DeviceGestureStateBegan)},
    {SWIG_LUA_CONSTTAB_INT("DeviceGestureStateChanged", DeviceGestureStateChanged)},
    {SWIG_LUA_CONSTTAB_INT("DeviceGestureStateEnded", DeviceGestureStateEnded)},
    {SWIG_LUA_CONSTTAB_INT("DeviceGestureStateCancelled", DeviceGestureStateCancelled)},
    {SWIG_LUA_CONSTTAB_INT("DeviceGestureStateFailed", DeviceGestureStateFailed)},
    {SWIG_LUA_CONSTTAB_INT("DeviceGestureStateRecognized", DeviceGestureStateRecognized)},
    {SWIG_LUA_CONSTTAB_INT("EntityTypes_NONE", EntityTypes_NONE)},
    {SWIG_LUA_CONSTTAB_INT("EntityTypes_BaseEntity", EntityTypes_BaseEntity)},
    {SWIG_LUA_CONSTTAB_INT("EntityTypes_RigidEntity", EntityTypes_RigidEntity)},
    {SWIG_LUA_CONSTTAB_INT("EntityTypes_SteeringEntity", EntityTypes_SteeringEntity)},
    {SWIG_LUA_CONSTTAB_INT("EntityTypes_GhostEntity", EntityTypes_GhostEntity)},
    {SWIG_LUA_CONSTTAB_INT("EntityTypes_SoftEntity", EntityTypes_SoftEntity)},
    {SWIG_LUA_CONSTTAB_INT("EntityTypes_MAX", EntityTypes_MAX)},
    {SWIG_LUA_CONSTTAB_INT("AnimationControllerTypes_NONE", AnimationControllerTypes_NONE)},
    {SWIG_LUA_CONSTTAB_INT("AnimationControllerTypes_2DTEST", AnimationControllerTypes_2DTEST)},
    {SWIG_LUA_CONSTTAB_INT("AnimationControllerTypes_MAX", AnimationControllerTypes_MAX)},
    {SWIG_LUA_CONSTTAB_INT("CameraTypes_NONE", CameraTypes_NONE)},
    {SWIG_LUA_CONSTTAB_INT("CameraTypes_Entity", CameraTypes_Entity)},
    {SWIG_LUA_CONSTTAB_INT("CameraTypes_PhysicsEntity", CameraTypes_PhysicsEntity)},
    {SWIG_LUA_CONSTTAB_INT("CameraTypes_SteeringEntity", CameraTypes_SteeringEntity)},
    {SWIG_LUA_CONSTTAB_INT("CameraTypes_MAX", CameraTypes_MAX)},
    {SWIG_LUA_CONSTTAB_INT("StateMachineTypes_NONE", StateMachineTypes_NONE)},
    {SWIG_LUA_CONSTTAB_INT("StateMachineTypes_TEMP", StateMachineTypes_TEMP)},
    {SWIG_LUA_CONSTTAB_INT("StateMachineTypes_MAX", StateMachineTypes_MAX)},
    {SWIG_LUA_CONSTTAB_INT("SteeringBehaviorTypes_NONE", SteeringBehaviorTypes_NONE)},
    {SWIG_LUA_CONSTTAB_INT("SteeringBehaviorTypes_Weighted", SteeringBehaviorTypes_Weighted)},
    {SWIG_LUA_CONSTTAB_INT("SteeringBehaviorTypes_MAX", SteeringBehaviorTypes_MAX)},
    {SWIG_LUA_CONSTTAB_INT("UpdateBehaviorTypes_NONE", UpdateBehaviorTypes_NONE)},
    {SWIG_LUA_CONSTTAB_INT("UpdateBehaviorTypes_Base", UpdateBehaviorTypes_Base)},
    {SWIG_LUA_CONSTTAB_INT("UpdateBehaviorTypes_Player", UpdateBehaviorTypes_Player)},
    {SWIG_LUA_CONSTTAB_INT("UpdateBehaviorTypes_Object", UpdateBehaviorTypes_Object)},
    {SWIG_LUA_CONSTTAB_INT("UpdateBehaviorTypes_MAX", UpdateBehaviorTypes_MAX)},
    {SWIG_LUA_CONSTTAB_INT("CollisionFilterBehaviorTypes_NONE", CollisionFilterBehaviorTypes_NONE)},
    {SWIG_LUA_CONSTTAB_INT("CollisionFilterBehaviorTypes_Base", CollisionFilterBehaviorTypes_Base)},
    {SWIG_LUA_CONSTTAB_INT("CollisionFilterBehaviorTypes_FinishLevel", CollisionFilterBehaviorTypes_FinishLevel)},
    {SWIG_LUA_CONSTTAB_INT("CollisionFilterBehaviorTypes_Player", CollisionFilterBehaviorTypes_Player)},
    {SWIG_LUA_CONSTTAB_INT("CollisionFilterBehaviorTypes_MazePickup", CollisionFilterBehaviorTypes_MazePickup)},
    {SWIG_LUA_CONSTTAB_INT("CollisionFilterBehaviorTypes_GGJObject", CollisionFilterBehaviorTypes_GGJObject)},
    {SWIG_LUA_CONSTTAB_INT("CollisionFilterBehaviorTypes_GGJPlayer", CollisionFilterBehaviorTypes_GGJPlayer)},
    {SWIG_LUA_CONSTTAB_INT("CollisionFilterBehaviorTypes_GGJCone", CollisionFilterBehaviorTypes_GGJCone)},
    {SWIG_LUA_CONSTTAB_INT("CollisionFilterBehaviorTypes_GGJPlane", CollisionFilterBehaviorTypes_GGJPlane)},
    {SWIG_LUA_CONSTTAB_INT("CollisionFilterBehaviorTypes_MAX", CollisionFilterBehaviorTypes_MAX)},
    {SWIG_LUA_CONSTTAB_INT("CollisionResponseBehaviorTypes_NONE", CollisionResponseBehaviorTypes_NONE)},
    {SWIG_LUA_CONSTTAB_INT("CollisionResponseBehaviorTypes_Base", CollisionResponseBehaviorTypes_Base)},
    {SWIG_LUA_CONSTTAB_INT("CollisionResponseBehaviorTypes_FinishLevel", CollisionResponseBehaviorTypes_FinishLevel)},
    {SWIG_LUA_CONSTTAB_INT("CollisionResponseBehaviorTypes_MazePickup", CollisionResponseBehaviorTypes_MazePickup)},
    {SWIG_LUA_CONSTTAB_INT("CollisionResponseBehaviorTypes_Player", CollisionResponseBehaviorTypes_Player)},
    {SWIG_LUA_CONSTTAB_INT("CollisionResponseBehaviorTypes_SwitchToEvade", CollisionResponseBehaviorTypes_SwitchToEvade)},
    {SWIG_LUA_CONSTTAB_INT("CollisionResponseBehaviorTypes_GGJPursue", CollisionResponseBehaviorTypes_GGJPursue)},
    {SWIG_LUA_CONSTTAB_INT("CollisionResponseBehaviorTypes_GGJEvade", CollisionResponseBehaviorTypes_GGJEvade)},
    {SWIG_LUA_CONSTTAB_INT("CollisionResponseBehaviorTypes_GGJDying", CollisionResponseBehaviorTypes_GGJDying)},
    {SWIG_LUA_CONSTTAB_INT("CollisionResponseBehaviorTypes_MAX", CollisionResponseBehaviorTypes_MAX)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShapeType_NONE", CollisionShapeType_NONE)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShapeType_Cube", CollisionShapeType_Cube)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShapeType_Sphere", CollisionShapeType_Sphere)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShapeType_ConeX", CollisionShapeType_ConeX)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShapeType_ConeY", CollisionShapeType_ConeY)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShapeType_ConeZ", CollisionShapeType_ConeZ)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShapeType_TriangleMesh", CollisionShapeType_TriangleMesh)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShapeType_CapsuleX", CollisionShapeType_CapsuleX)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShapeType_CapsuleY", CollisionShapeType_CapsuleY)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShapeType_CapsuleZ", CollisionShapeType_CapsuleZ)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShapeType_CylinderX", CollisionShapeType_CylinderX)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShapeType_CylinderY", CollisionShapeType_CylinderY)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShapeType_CylinderZ", CollisionShapeType_CylinderZ)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShapeType_ConvexHull", CollisionShapeType_ConvexHull)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShapeType_Box2d", CollisionShapeType_Box2d)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShapeType_StaticPlane", CollisionShapeType_StaticPlane)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShapeType_MAX", CollisionShapeType_MAX)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_NONE", BehaviorType_NONE)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_Seek", BehaviorType_Seek)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_Flee", BehaviorType_Flee)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_Arrive", BehaviorType_Arrive)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_Wander", BehaviorType_Wander)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_Evade", BehaviorType_Evade)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_Interpose", BehaviorType_Interpose)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_Hide", BehaviorType_Hide)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_ObstacleAvoidance", BehaviorType_ObstacleAvoidance)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_WallAvoidance", BehaviorType_WallAvoidance)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_FollowPath", BehaviorType_FollowPath)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_Pursuit", BehaviorType_Pursuit)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_OffsetPursuit", BehaviorType_OffsetPursuit)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_Cohesion", BehaviorType_Cohesion)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_Separation", BehaviorType_Separation)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_Alignment", BehaviorType_Alignment)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_Flock", BehaviorType_Flock)},
    {SWIG_LUA_CONSTTAB_INT("BehaviorType_MAX", BehaviorType_MAX)},
    {SWIG_LUA_CONSTTAB_INT("Deceleration_Slow", Deceleration_Slow)},
    {SWIG_LUA_CONSTTAB_INT("Deceleration_Normal", Deceleration_Normal)},
    {SWIG_LUA_CONSTTAB_INT("Deceleration_Fast", Deceleration_Fast)},
    {SWIG_LUA_CONSTTAB_INT("TimerType_NONE", TimerType_NONE)},
    {SWIG_LUA_CONSTTAB_INT("TimerType_Timer", TimerType_Timer)},
    {SWIG_LUA_CONSTTAB_INT("TimerType_Clock", TimerType_Clock)},
    {SWIG_LUA_CONSTTAB_INT("TimerType_StopWatch", TimerType_StopWatch)},
    {SWIG_LUA_CONSTTAB_INT("TimerType_MAX", TimerType_MAX)},
    {SWIG_LUA_CONSTTAB_INT("MazeRenderType_NONE", MazeRenderType_NONE)},
    {SWIG_LUA_CONSTTAB_INT("MazeRenderType_GENERIC", MazeRenderType_GENERIC)},
    {SWIG_LUA_CONSTTAB_INT("MazeRenderType_HTML", MazeRenderType_HTML)},
    {SWIG_LUA_CONSTTAB_INT("MazeRenderType_Mesh", MazeRenderType_Mesh)},
    {SWIG_LUA_CONSTTAB_INT("MazeRenderType_PNG", MazeRenderType_PNG)},
    {SWIG_LUA_CONSTTAB_INT("MazeRenderType_Texture", MazeRenderType_Texture)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeWall_NONE", MazeNodeWall_NONE)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeWall_NORTH", MazeNodeWall_NORTH)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeWall_EAST", MazeNodeWall_EAST)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeWall_SOUTH", MazeNodeWall_SOUTH)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeWall_WEST", MazeNodeWall_WEST)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeWall_MAX", MazeNodeWall_MAX)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeType_0000", MazeNodeType_0000)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeType_0001", MazeNodeType_0001)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeType_0010", MazeNodeType_0010)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeType_0011", MazeNodeType_0011)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeType_0100", MazeNodeType_0100)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeType_0101", MazeNodeType_0101)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeType_0110", MazeNodeType_0110)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeType_0111", MazeNodeType_0111)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeType_1000", MazeNodeType_1000)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeType_1001", MazeNodeType_1001)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeType_1010", MazeNodeType_1010)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeType_1011", MazeNodeType_1011)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeType_1100", MazeNodeType_1100)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeType_1101", MazeNodeType_1101)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeType_1110", MazeNodeType_1110)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeType_1111", MazeNodeType_1111)},
    {SWIG_LUA_CONSTTAB_INT("MazeNodeType_Amount", MazeNodeType_Amount)},
    {SWIG_LUA_CONSTTAB_STRING("btSoftBodyDataName", "btSoftBodyFloatData")},
    {SWIG_LUA_CONSTTAB_INT("LoopType_Cylindrical", LoopType_Cylindrical)},
    {SWIG_LUA_CONSTTAB_INT("LoopType_Linear", LoopType_Linear)},
    {SWIG_LUA_CONSTTAB_INT("PathIncrement_Negative", PathIncrement_Negative)},
    {SWIG_LUA_CONSTTAB_INT("PathIncrement_None", PathIncrement_None)},
    {SWIG_LUA_CONSTTAB_INT("PathIncrement_Positive", PathIncrement_Positive)},
    {SWIG_LUA_CONSTTAB_INT("LocalizedTextViewObjectType_NONE", LocalizedTextViewObjectType_NONE)},
    {SWIG_LUA_CONSTTAB_INT("LocalizedTextViewObjectType_Ariel_8pt", LocalizedTextViewObjectType_Ariel_8pt)},
    {SWIG_LUA_CONSTTAB_INT("LocalizedTextViewObjectType_Helvetica_72pt", LocalizedTextViewObjectType_Helvetica_72pt)},
    {SWIG_LUA_CONSTTAB_INT("LocalizedTextViewObjectType_Helvetica_8pt", LocalizedTextViewObjectType_Helvetica_8pt)},
    {SWIG_LUA_CONSTTAB_INT("LocalizedTextViewObjectType_Helvetica_32pt", LocalizedTextViewObjectType_Helvetica_32pt)},
    {SWIG_LUA_CONSTTAB_INT("LocalizedTextViewObjectType_Helvetica_64pt", LocalizedTextViewObjectType_Helvetica_64pt)},
    {SWIG_LUA_CONSTTAB_INT("LocalizedTextViewObjectType_Helvetica_128pt", LocalizedTextViewObjectType_Helvetica_128pt)},
    {SWIG_LUA_CONSTTAB_INT("LocalizedTextViewObjectType_Monaco_32pt", LocalizedTextViewObjectType_Monaco_32pt)},
    {SWIG_LUA_CONSTTAB_INT("LocalizedTextViewObjectType_MAX", LocalizedTextViewObjectType_MAX)},
    {SWIG_LUA_CONSTTAB_INT("TextViewObjectType_NONE", TextViewObjectType_NONE)},
    {SWIG_LUA_CONSTTAB_INT("TextViewObjectType_Helvetica_72pt", TextViewObjectType_Helvetica_72pt)},
    {SWIG_LUA_CONSTTAB_INT("TextViewObjectType_MAX", TextViewObjectType_MAX)},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_BaseTextureBehaviorTo_p_AbstractBehaviorT_BaseViewObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractBehavior< BaseViewObject > *)  ((BaseTextureBehavior *) x));
}
static void *_p_BaseEntityStateTo_p_AbstractStateT_BaseEntity_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractState< BaseEntity > *)  ((BaseEntityState *) x));
}
static void *_p_BaseEntityAnimationControllerTo_p_AbstractBehaviorT_BaseEntity_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractBehavior< BaseEntity > *)  ((BaseEntityAnimationController *) x));
}
static void *_p_BaseCollisionFilterBehaviorTo_p_AbstractBehaviorT_BaseEntity_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractBehavior< BaseEntity > *)  ((BaseCollisionFilterBehavior *) x));
}
static void *_p_BaseCollisionResponseBehaviorTo_p_AbstractBehaviorT_BaseEntity_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractBehavior< BaseEntity > *)  ((BaseCollisionResponseBehavior *) x));
}
static void *_p_BaseParticleEmitterBehaviorTo_p_AbstractBehaviorT_BaseEntity_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractBehavior< BaseEntity > *)  ((BaseParticleEmitterBehavior *) x));
}
static void *_p_BaseUpdateBehaviorTo_p_AbstractBehaviorT_BaseEntity_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractBehavior< BaseEntity > *)  ((BaseUpdateBehavior *) x));
}
static void *_p_AnimationController2DTestTo_p_AbstractBehaviorT_BaseEntity_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractBehavior< BaseEntity > *) (BaseEntityAnimationController *) ((AnimationController2DTest *) x));
}
static void *_p_BaseEntitySteeringBehaviorTo_p_AbstractBehaviorT_SteeringEntity_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractBehavior< SteeringEntity > *)  ((BaseEntitySteeringBehavior *) x));
}
static void *_p_WeightedSteeringBehaviorTo_p_AbstractBehaviorT_SteeringEntity_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractBehavior< SteeringEntity > *) (BaseEntitySteeringBehavior *) ((WeightedSteeringBehavior *) x));
}
static void *_p_CustomFilterCallbackTo_p_btOverlapFilterCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btOverlapFilterCallback *)  ((CustomFilterCallback *) x));
}
static void *_p_btOverlappingPairCacheTo_p_btOverlappingPairCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btOverlappingPairCallback *)  ((btOverlappingPairCache *) x));
}
static void *_p_btHashedOverlappingPairCacheTo_p_btOverlappingPairCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btOverlappingPairCallback *) (btOverlappingPairCache *) ((btHashedOverlappingPairCache *) x));
}
static void *_p_btSortedOverlappingPairCacheTo_p_btOverlappingPairCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btOverlappingPairCallback *) (btOverlappingPairCache *) ((btSortedOverlappingPairCache *) x));
}
static void *_p_btNullPairCacheTo_p_btOverlappingPairCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btOverlappingPairCallback *) (btOverlappingPairCache *) ((btNullPairCache *) x));
}
static void *_p_btGhostPairCallbackTo_p_btOverlappingPairCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btOverlappingPairCallback *)  ((btGhostPairCallback *) x));
}
static void *_p_btSimpleBroadphaseTo_p_btBroadphaseInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btBroadphaseInterface *)  ((btSimpleBroadphase *) x));
}
static void *_p_btDbvtBroadphaseTo_p_btBroadphaseInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btBroadphaseInterface *)  ((btDbvtBroadphase *) x));
}
static void *_p_btMultiSapBroadphaseTo_p_btBroadphaseInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btBroadphaseInterface *)  ((btMultiSapBroadphase *) x));
}
static void *_p_BaseTextureBehaviorTo_p_btActionInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActionInterface *)  ((BaseTextureBehavior *) x));
}
static void *_p_BaseParticleEmitterBehaviorTo_p_btActionInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActionInterface *)  ((BaseParticleEmitterBehavior *) x));
}
static void *_p_BaseCameraTo_p_btActionInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActionInterface *)  ((BaseCamera *) x));
}
static void *_p_btRaycastVehicleTo_p_btActionInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActionInterface *)  ((btRaycastVehicle *) x));
}
static void *_p_CameraSteeringEntityTo_p_btActionInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActionInterface *) (BaseCamera *) ((CameraSteeringEntity *) x));
}
static void *_p_CameraPhysicsEntityTo_p_btActionInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActionInterface *) (BaseCamera *) ((CameraPhysicsEntity *) x));
}
static void *_p_CameraEntityTo_p_btActionInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActionInterface *) (BaseCamera *) ((CameraEntity *) x));
}
static void *_p_SteeringEntityTo_p_btActionInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActionInterface *) (BaseEntity *)(RigidEntity *) ((SteeringEntity *) x));
}
static void *_p_BaseEntityTo_p_btActionInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActionInterface *)  ((BaseEntity *) x));
}
static void *_p_PathTo_p_btActionInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActionInterface *)  ((Path *) x));
}
static void *_p_SoftEntityTo_p_btActionInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActionInterface *) (BaseEntity *) ((SoftEntity *) x));
}
static void *_p_RigidEntityTo_p_btActionInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActionInterface *) (BaseEntity *) ((RigidEntity *) x));
}
static void *_p_GhostEntityTo_p_btActionInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActionInterface *) (BaseEntity *) ((GhostEntity *) x));
}
static void *_p_BaseTextViewObjectTo_p_btActionInterface(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btActionInterface *)  ((BaseTextViewObject *) x));
}
static void *_p_btPairCachingGhostObjectTo_p_btGhostObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btGhostObject *)  ((btPairCachingGhostObject *) x));
}
static void *_p_btRigidBodyTo_p_btCollisionObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionObject *)  ((btRigidBody *) x));
}
static void *_p_btGhostObjectTo_p_btCollisionObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionObject *)  ((btGhostObject *) x));
}
static void *_p_btPairCachingGhostObjectTo_p_btCollisionObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionObject *) (btGhostObject *) ((btPairCachingGhostObject *) x));
}
static void *_p_btSoftBodyTo_p_btCollisionObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionObject *)  ((btSoftBody *) x));
}
static void *_p_btVector4To_p_btVector3(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btVector3 *)  ((btVector4 *) x));
}
static void *_p_ClockTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *) (BaseTimer *) ((Clock *) x));
}
static void *_p_BaseCollisionResponseBehaviorTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *)  ((BaseCollisionResponseBehavior *) x));
}
static void *_p_BaseCollisionFilterBehaviorTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *)  ((BaseCollisionFilterBehavior *) x));
}
static void *_p_BaseEntitySteeringBehaviorTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *)  ((BaseEntitySteeringBehavior *) x));
}
static void *_p_BaseParticleEmitterBehaviorTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *)  ((BaseParticleEmitterBehavior *) x));
}
static void *_p_BaseTextureBehaviorTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *)  ((BaseTextureBehavior *) x));
}
static void *_p_BaseUpdateBehaviorTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *)  ((BaseUpdateBehavior *) x));
}
static void *_p_WeightedSteeringBehaviorTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *) (BaseEntitySteeringBehavior *) ((WeightedSteeringBehavior *) x));
}
static void *_p_TimerTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *) (BaseTimer *) ((Timer *) x));
}
static void *_p_BaseCameraTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *)  ((BaseCamera *) x));
}
static void *_p_BaseGameStateTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *)  ((BaseGameState *) x));
}
static void *_p_BaseEntityStateTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *)  ((BaseEntityState *) x));
}
static void *_p_AnimationController2DTestTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *) (BaseEntityAnimationController *) ((AnimationController2DTest *) x));
}
static void *_p_CameraSteeringEntityTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *) (BaseCamera *) ((CameraSteeringEntity *) x));
}
static void *_p_CameraPhysicsEntityTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *) (BaseCamera *) ((CameraPhysicsEntity *) x));
}
static void *_p_CameraEntityTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *) (BaseCamera *) ((CameraEntity *) x));
}
static void *_p_SteeringEntityTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *) (BaseEntity *)(RigidEntity *) ((SteeringEntity *) x));
}
static void *_p_BaseEntityTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *)  ((BaseEntity *) x));
}
static void *_p_SoftEntityTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *) (BaseEntity *) ((SoftEntity *) x));
}
static void *_p_RigidEntityTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *) (BaseEntity *) ((RigidEntity *) x));
}
static void *_p_GhostEntityTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *) (BaseEntity *) ((GhostEntity *) x));
}
static void *_p_BaseTimerTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *)  ((BaseTimer *) x));
}
static void *_p_BaseEntityAnimationControllerTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *)  ((BaseEntityAnimationController *) x));
}
static void *_p_BaseTextViewObjectTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *)  ((BaseTextViewObject *) x));
}
static void *_p_ShaderProgramHandleWrapperTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *)  ((ShaderProgramHandleWrapper *) x));
}
static void *_p_btCollisionShapeWrapperTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *)  ((btCollisionShapeWrapper *) x));
}
static void *_p_StopWatchTo_p_AbstractFactoryObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactoryObject *) (BaseTimer *) ((StopWatch *) x));
}
static void *_p_MazeCreatorTo_p_AbstractSingletonT_MazeCreator_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< MazeCreator > *)  ((MazeCreator *) x));
}
static void *_p_MessageDispatcherTo_p_AbstractSingletonT_MessageDispatcher_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< MessageDispatcher > *)  ((MessageDispatcher *) x));
}
static void *_p_CameraEntityInfoTo_p_BaseCameraInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseCameraInfo *)  ((CameraEntityInfo *) x));
}
static void *_p_CameraPhysicsEntityInfoTo_p_BaseCameraInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseCameraInfo *)  ((CameraPhysicsEntityInfo *) x));
}
static void *_p_CameraSteeringEntityInfoTo_p_BaseCameraInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseCameraInfo *)  ((CameraSteeringEntityInfo *) x));
}
static void *_p_SteeringBehaviorFactoryTo_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *)  ((SteeringBehaviorFactory *) x));
}
static void *_p_EntityStateMachineFactoryTo_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *)  ((EntityStateMachineFactory *) x));
}
static void *_p_DeviceMotionTo_p_DeviceInputTime(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DeviceInputTime *)  ((DeviceMotion *) x));
}
static void *_p_DeviceTouchTo_p_DeviceInputTime(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DeviceInputTime *)  ((DeviceTouch *) x));
}
static void *_p_DeviceAccelerometerTo_p_DeviceInputTime(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DeviceInputTime *)  ((DeviceAccelerometer *) x));
}
static void *_p_DeviceGyroTo_p_DeviceInputTime(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DeviceInputTime *)  ((DeviceGyro *) x));
}
static void *_p_DeviceMagnetometerTo_p_DeviceInputTime(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DeviceInputTime *)  ((DeviceMagnetometer *) x));
}
static void *_p_btCollisionDispatcherTo_p_btDispatcher(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btDispatcher *)  ((btCollisionDispatcher *) x));
}
static void *_p_CollisionShapeFactoryTo_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *)  ((CollisionShapeFactory *) x));
}
static void *_p_GLDebugDrawerTo_p_btIDebugDraw(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btIDebugDraw *)  ((GLDebugDrawer *) x));
}
static void *_p_EntityFactoryTo_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *)  ((EntityFactory *) x));
}
static void *_p_CameraFactoryTo_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *)  ((CameraFactory *) x));
}
static void *_p_btSequentialImpulseConstraintSolverTo_p_btConstraintSolver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConstraintSolver *)  ((btSequentialImpulseConstraintSolver *) x));
}
static void *_p_DeviceTapGestureTo_p_DeviceGesture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DeviceGesture *)  ((DeviceTapGesture *) x));
}
static void *_p_DevicePinchGestureTo_p_DeviceGesture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DeviceGesture *)  ((DevicePinchGesture *) x));
}
static void *_p_DevicePanGestureTo_p_DeviceGesture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DeviceGesture *)  ((DevicePanGesture *) x));
}
static void *_p_DeviceSwipeGestureTo_p_DeviceGesture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DeviceGesture *)  ((DeviceSwipeGesture *) x));
}
static void *_p_DeviceRotationGestureTo_p_DeviceGesture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DeviceGesture *)  ((DeviceRotationGesture *) x));
}
static void *_p_DeviceLongPressGestureTo_p_DeviceGesture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DeviceGesture *)  ((DeviceLongPressGesture *) x));
}
static void *_p_btDynamicsWorldTo_p_btCollisionWorld(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionWorld *)  ((btDynamicsWorld *) x));
}
static void *_p_btDiscreteDynamicsWorldTo_p_btCollisionWorld(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionWorld *) (btDynamicsWorld *) ((btDiscreteDynamicsWorld *) x));
}
static void *_p_btSimpleDynamicsWorldTo_p_btCollisionWorld(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionWorld *) (btDynamicsWorld *) ((btSimpleDynamicsWorld *) x));
}
static void *_p_btSoftRigidDynamicsWorldTo_p_btCollisionWorld(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionWorld *) (btDynamicsWorld *)(btDiscreteDynamicsWorld *) ((btSoftRigidDynamicsWorld *) x));
}
static void *_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_tTo_p_AbstractSingletonT_CollisionResponseBehaviorFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< CollisionResponseBehaviorFactory > *)  ((AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *) x));
}
static void *_p_CollisionResponseBehaviorFactoryTo_p_AbstractSingletonT_CollisionResponseBehaviorFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< CollisionResponseBehaviorFactory > *) (AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *) ((CollisionResponseBehaviorFactory *) x));
}
static void *_p_BaseGameStateTo_p_AbstractStateT_void_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractState< void > *)  ((BaseGameState *) x));
}
static void *_p_TimerTo_p_BaseTimer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseTimer *)  ((Timer *) x));
}
static void *_p_ClockTo_p_BaseTimer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseTimer *)  ((Clock *) x));
}
static void *_p_StopWatchTo_p_BaseTimer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseTimer *)  ((StopWatch *) x));
}
static void *_p_WeightedSteeringBehaviorTo_p_BaseEntitySteeringBehavior(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseEntitySteeringBehavior *)  ((WeightedSteeringBehavior *) x));
}
static void *_p_AnimationController2DTestTo_p_BaseEntityAnimationController(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseEntityAnimationController *)  ((AnimationController2DTest *) x));
}
static void *_p_btDefaultCollisionConfigurationTo_p_btCollisionConfiguration(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionConfiguration *)  ((btDefaultCollisionConfiguration *) x));
}
static void *_p_btSoftBodyRigidBodyCollisionConfigurationTo_p_btCollisionConfiguration(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionConfiguration *) (btDefaultCollisionConfiguration *) ((btSoftBodyRigidBodyCollisionConfiguration *) x));
}
static void *_p_btSoftBodyRigidBodyCollisionConfigurationTo_p_btDefaultCollisionConfiguration(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btDefaultCollisionConfiguration *)  ((btSoftBodyRigidBodyCollisionConfiguration *) x));
}
static void *_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_tTo_p_AbstractSingletonT_UpdateBehaviorFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< UpdateBehaviorFactory > *)  ((AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *) x));
}
static void *_p_UpdateBehaviorFactoryTo_p_AbstractSingletonT_UpdateBehaviorFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< UpdateBehaviorFactory > *) (AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *) ((UpdateBehaviorFactory *) x));
}
static void *_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_tTo_p_AbstractSingletonT_TextViewObjectFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< TextViewObjectFactory > *)  ((AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *) x));
}
static void *_p_TextViewObjectFactoryTo_p_AbstractSingletonT_TextViewObjectFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< TextViewObjectFactory > *) (AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *) ((TextViewObjectFactory *) x));
}
static void *_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_tTo_p_AbstractSingletonT_TextureBehaviorFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< TextureBehaviorFactory > *)  ((AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *) x));
}
static void *_p_TextureBehaviorFactoryTo_p_AbstractSingletonT_TextureBehaviorFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< TextureBehaviorFactory > *) (AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *) ((TextureBehaviorFactory *) x));
}
static void *_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_tTo_p_AbstractSingletonT_SteeringBehaviorFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< SteeringBehaviorFactory > *)  ((AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *) x));
}
static void *_p_SteeringBehaviorFactoryTo_p_AbstractSingletonT_SteeringBehaviorFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< SteeringBehaviorFactory > *) (AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *) ((SteeringBehaviorFactory *) x));
}
static void *_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_tTo_p_AbstractSingletonT_ShaderFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< ShaderFactory > *)  ((AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *) x));
}
static void *_p_ShaderFactoryTo_p_AbstractSingletonT_ShaderFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< ShaderFactory > *) (AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *) ((ShaderFactory *) x));
}
static void *_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_tTo_p_AbstractSingletonT_EntityStateMachineFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< EntityStateMachineFactory > *)  ((AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *) x));
}
static void *_p_EntityStateMachineFactoryTo_p_AbstractSingletonT_EntityStateMachineFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< EntityStateMachineFactory > *) (AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *) ((EntityStateMachineFactory *) x));
}
static void *_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_tTo_p_AbstractSingletonT_CollisionShapeFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< CollisionShapeFactory > *)  ((AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *) x));
}
static void *_p_CollisionShapeFactoryTo_p_AbstractSingletonT_CollisionShapeFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< CollisionShapeFactory > *) (AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *) ((CollisionShapeFactory *) x));
}
static void *_p_CameraFactoryTo_p_AbstractSingletonT_CameraFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< CameraFactory > *) (AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *) ((CameraFactory *) x));
}
static void *_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_tTo_p_AbstractSingletonT_CameraFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< CameraFactory > *)  ((AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *) x));
}
static void *_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_tTo_p_AbstractSingletonT_AnimationControllerFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< AnimationControllerFactory > *)  ((AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *) x));
}
static void *_p_AnimationControllerFactoryTo_p_AbstractSingletonT_AnimationControllerFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< AnimationControllerFactory > *) (AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *) ((AnimationControllerFactory *) x));
}
static void *_p_EntityFactoryTo_p_AbstractSingletonT_EntityFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< EntityFactory > *) (AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *) ((EntityFactory *) x));
}
static void *_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_tTo_p_AbstractSingletonT_EntityFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< EntityFactory > *)  ((AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *) x));
}
static void *_p_btCapsuleShapeZTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btCapsuleShape *) ((btCapsuleShapeZ *) x));
}
static void *_p_btConeShapeZTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btConeShape *) ((btConeShapeZ *) x));
}
static void *_p_btCompoundShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *)  ((btCompoundShape *) x));
}
static void *_p_btConeShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *) ((btConeShape *) x));
}
static void *_p_btCylinderShapeXTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btCylinderShape *) ((btCylinderShapeX *) x));
}
static void *_p_btCapsuleShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *) ((btCapsuleShape *) x));
}
static void *_p_btSphereShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *) ((btSphereShape *) x));
}
static void *_p_btConcaveShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *)  ((btConcaveShape *) x));
}
static void *_p_btStaticPlaneShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConcaveShape *) ((btStaticPlaneShape *) x));
}
static void *_p_btMultiSphereShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btConvexInternalAabbCachingShape *) ((btMultiSphereShape *) x));
}
static void *_p_btConvexInternalShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *) ((btConvexInternalShape *) x));
}
static void *_p_btCylinderShapeZTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btCylinderShape *) ((btCylinderShapeZ *) x));
}
static void *_p_btPolyhedralConvexAabbCachingShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btPolyhedralConvexShape *) ((btPolyhedralConvexAabbCachingShape *) x));
}
static void *_p_btConvexInternalAabbCachingShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *) ((btConvexInternalAabbCachingShape *) x));
}
static void *_p_btUniformScalingShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *) ((btUniformScalingShape *) x));
}
static void *_p_btEmptyShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConcaveShape *) ((btEmptyShape *) x));
}
static void *_p_btBU_Simplex1to4To_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btPolyhedralConvexShape *)(btPolyhedralConvexAabbCachingShape *) ((btBU_Simplex1to4 *) x));
}
static void *_p_btBoxShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btPolyhedralConvexShape *) ((btBoxShape *) x));
}
static void *_p_btPolyhedralConvexShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *) ((btPolyhedralConvexShape *) x));
}
static void *_p_btConvexShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *)  ((btConvexShape *) x));
}
static void *_p_btConvexTriangleMeshShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btPolyhedralConvexShape *)(btPolyhedralConvexAabbCachingShape *) ((btConvexTriangleMeshShape *) x));
}
static void *_p_btTriangleMeshShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConcaveShape *) ((btTriangleMeshShape *) x));
}
static void *_p_btBvhTriangleMeshShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConcaveShape *)(btTriangleMeshShape *) ((btBvhTriangleMeshShape *) x));
}
static void *_p_btScaledBvhTriangleMeshShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConcaveShape *) ((btScaledBvhTriangleMeshShape *) x));
}
static void *_p_btCylinderShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *) ((btCylinderShape *) x));
}
static void *_p_btCapsuleShapeXTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btCapsuleShape *) ((btCapsuleShapeX *) x));
}
static void *_p_btConeShapeXTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btConeShape *) ((btConeShapeX *) x));
}
static void *_p_btConvexHullShapeTo_p_btCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btCollisionShape *) (btConvexShape *)(btConvexInternalShape *)(btPolyhedralConvexShape *)(btPolyhedralConvexAabbCachingShape *) ((btConvexHullShape *) x));
}
static void *_p_btCapsuleShapeZTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btCapsuleShape *) ((btCapsuleShapeZ *) x));
}
static void *_p_btConeShapeZTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btConeShape *) ((btConeShapeZ *) x));
}
static void *_p_btConeShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *) ((btConeShape *) x));
}
static void *_p_btCylinderShapeXTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btCylinderShape *) ((btCylinderShapeX *) x));
}
static void *_p_btCapsuleShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *) ((btCapsuleShape *) x));
}
static void *_p_btSphereShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *) ((btSphereShape *) x));
}
static void *_p_btMultiSphereShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btConvexInternalAabbCachingShape *) ((btMultiSphereShape *) x));
}
static void *_p_btConvexInternalShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *)  ((btConvexInternalShape *) x));
}
static void *_p_btCylinderShapeZTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btCylinderShape *) ((btCylinderShapeZ *) x));
}
static void *_p_btPolyhedralConvexAabbCachingShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btPolyhedralConvexShape *) ((btPolyhedralConvexAabbCachingShape *) x));
}
static void *_p_btConvexInternalAabbCachingShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *) ((btConvexInternalAabbCachingShape *) x));
}
static void *_p_btUniformScalingShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *)  ((btUniformScalingShape *) x));
}
static void *_p_btBU_Simplex1to4To_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btPolyhedralConvexShape *)(btPolyhedralConvexAabbCachingShape *) ((btBU_Simplex1to4 *) x));
}
static void *_p_btBoxShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btPolyhedralConvexShape *) ((btBoxShape *) x));
}
static void *_p_btPolyhedralConvexShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *) ((btPolyhedralConvexShape *) x));
}
static void *_p_btConvexTriangleMeshShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btPolyhedralConvexShape *)(btPolyhedralConvexAabbCachingShape *) ((btConvexTriangleMeshShape *) x));
}
static void *_p_btCylinderShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *) ((btCylinderShape *) x));
}
static void *_p_btConeShapeXTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btConeShape *) ((btConeShapeX *) x));
}
static void *_p_btCapsuleShapeXTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btCapsuleShape *) ((btCapsuleShapeX *) x));
}
static void *_p_btConvexHullShapeTo_p_btConvexShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btConvexShape *) (btConvexInternalShape *)(btPolyhedralConvexShape *)(btPolyhedralConvexAabbCachingShape *) ((btConvexHullShape *) x));
}
static void *_p_UpdateBehaviorFactoryTo_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *)  ((UpdateBehaviorFactory *) x));
}
static void *_p_CollisionFilterBehaviorFactoryTo_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *)  ((CollisionFilterBehaviorFactory *) x));
}
static void *_p_ParticleEmitterBehaviorFactoryTo_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *)  ((ParticleEmitterBehaviorFactory *) x));
}
static void *_p_ShaderFactoryTo_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *)  ((ShaderFactory *) x));
}
static void *_p_btDefaultSerializerTo_p_btSerializer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btSerializer *)  ((btDefaultSerializer *) x));
}
static void *_p_CollisionResponseBehaviorFactoryTo_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *)  ((CollisionResponseBehaviorFactory *) x));
}
static void *_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_tTo_p_AbstractSingletonT_ParticleEmitterBehaviorFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< ParticleEmitterBehaviorFactory > *)  ((AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *) x));
}
static void *_p_ParticleEmitterBehaviorFactoryTo_p_AbstractSingletonT_ParticleEmitterBehaviorFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< ParticleEmitterBehaviorFactory > *) (AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *) ((ParticleEmitterBehaviorFactory *) x));
}
static void *_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_tTo_p_AbstractSingletonT_CollisionFilterBehaviorFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< CollisionFilterBehaviorFactory > *)  ((AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *) x));
}
static void *_p_CollisionFilterBehaviorFactoryTo_p_AbstractSingletonT_CollisionFilterBehaviorFactory_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< CollisionFilterBehaviorFactory > *) (AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *) ((CollisionFilterBehaviorFactory *) x));
}
static void *_p_CameraSteeringEntityInfoTo_p_SteeringEntityInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SteeringEntityInfo *)  ((CameraSteeringEntityInfo *) x));
}
static void *_p_SteeringEntityInfoTo_p_RigidEntityInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RigidEntityInfo *)  ((SteeringEntityInfo *) x));
}
static void *_p_CameraPhysicsEntityInfoTo_p_RigidEntityInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RigidEntityInfo *)  ((CameraPhysicsEntityInfo *) x));
}
static void *_p_CameraSteeringEntityInfoTo_p_RigidEntityInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RigidEntityInfo *) (SteeringEntityInfo *) ((CameraSteeringEntityInfo *) x));
}
static void *_p_RigidEntityInfoTo_p_BaseEntityInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseEntityInfo *)  ((RigidEntityInfo *) x));
}
static void *_p_SoftEntityInfoTo_p_BaseEntityInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseEntityInfo *)  ((SoftEntityInfo *) x));
}
static void *_p_SteeringEntityInfoTo_p_BaseEntityInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseEntityInfo *) (RigidEntityInfo *) ((SteeringEntityInfo *) x));
}
static void *_p_GhostEntityInfoTo_p_BaseEntityInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseEntityInfo *)  ((GhostEntityInfo *) x));
}
static void *_p_CameraEntityInfoTo_p_BaseEntityInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseEntityInfo *)  ((CameraEntityInfo *) x));
}
static void *_p_CameraPhysicsEntityInfoTo_p_BaseEntityInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseEntityInfo *) (RigidEntityInfo *) ((CameraPhysicsEntityInfo *) x));
}
static void *_p_CameraSteeringEntityInfoTo_p_BaseEntityInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseEntityInfo *) (RigidEntityInfo *)(SteeringEntityInfo *) ((CameraSteeringEntityInfo *) x));
}
static void *_p_MazePNGTo_p_MazeGeneric(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MazeGeneric *)  ((MazePNG *) x));
}
static void *_p_MazeHTMLTo_p_MazeGeneric(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MazeGeneric *)  ((MazeHTML *) x));
}
static void *_p_TextureMazeCreatorTo_p_MazeGeneric(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MazeGeneric *)  ((TextureMazeCreator *) x));
}
static void *_p_MeshMazeCreatorTo_p_MazeGeneric(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MazeGeneric *)  ((MeshMazeCreator *) x));
}
static void *_p_LuaVMTo_p_AbstractSingletonT_LuaVM_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< LuaVM > *)  ((LuaVM *) x));
}
static void *_p_CameraEntityTo_p_BaseCamera(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseCamera *)  ((CameraEntity *) x));
}
static void *_p_CameraPhysicsEntityTo_p_BaseCamera(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseCamera *)  ((CameraPhysicsEntity *) x));
}
static void *_p_CameraSteeringEntityTo_p_BaseCamera(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseCamera *)  ((CameraSteeringEntity *) x));
}
static void *_p_btSimpleBroadphaseProxyTo_p_btBroadphaseProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btBroadphaseProxy *)  ((btSimpleBroadphaseProxy *) x));
}
static void *_p_btDbvtProxyTo_p_btBroadphaseProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btBroadphaseProxy *)  ((btDbvtProxy *) x));
}
static void *_p_TextViewObjectFactoryTo_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *)  ((TextViewObjectFactory *) x));
}
static void *_p_TextureBehaviorFactoryTo_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *)  ((TextureBehaviorFactory *) x));
}
static void *_p_WeightedSteeringBehaviorInfoTo_p_SteeringBehaviorInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SteeringBehaviorInfo *)  ((WeightedSteeringBehaviorInfo *) x));
}
static void *_p_FrameCounterTo_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *)  ((FrameCounter *) x));
}
static void *_p_btDiscreteDynamicsWorldTo_p_btDynamicsWorld(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btDynamicsWorld *)  ((btDiscreteDynamicsWorld *) x));
}
static void *_p_btSimpleDynamicsWorldTo_p_btDynamicsWorld(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btDynamicsWorld *)  ((btSimpleDynamicsWorld *) x));
}
static void *_p_btSoftRigidDynamicsWorldTo_p_btDynamicsWorld(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btDynamicsWorld *) (btDiscreteDynamicsWorld *) ((btSoftRigidDynamicsWorld *) x));
}
static void *_p_btSoftRigidDynamicsWorldTo_p_btDiscreteDynamicsWorld(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btDiscreteDynamicsWorld *)  ((btSoftRigidDynamicsWorld *) x));
}
static void *_p_GLDebugDrawerTo_p_AbstractSingletonT_GLDebugDrawer_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractSingleton< GLDebugDrawer > *)  ((GLDebugDrawer *) x));
}
static void *_p_SteeringEntityTo_p_RigidEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RigidEntity *)  ((SteeringEntity *) x));
}
static void *_p_CameraPhysicsEntityTo_p_RigidEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RigidEntity *)  ((CameraPhysicsEntity *) x));
}
static void *_p_CameraSteeringEntityTo_p_RigidEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RigidEntity *) (SteeringEntity *) ((CameraSteeringEntity *) x));
}
static void *_p_GhostEntityTo_p_BaseEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseEntity *)  ((GhostEntity *) x));
}
static void *_p_RigidEntityTo_p_BaseEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseEntity *)  ((RigidEntity *) x));
}
static void *_p_SoftEntityTo_p_BaseEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseEntity *)  ((SoftEntity *) x));
}
static void *_p_SteeringEntityTo_p_BaseEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseEntity *) (RigidEntity *) ((SteeringEntity *) x));
}
static void *_p_CameraEntityTo_p_BaseEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseEntity *)  ((CameraEntity *) x));
}
static void *_p_CameraPhysicsEntityTo_p_BaseEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseEntity *) (RigidEntity *) ((CameraPhysicsEntity *) x));
}
static void *_p_CameraSteeringEntityTo_p_BaseEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BaseEntity *) (RigidEntity *)(SteeringEntity *) ((CameraSteeringEntity *) x));
}
static void *_p_CameraSteeringEntityTo_p_SteeringEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SteeringEntity *)  ((CameraSteeringEntity *) x));
}
static void *_p_AnimationControllerFactoryTo_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *)  ((AnimationControllerFactory *) x));
}
static swig_type_info _swigt__p_AbstractBehaviorT_BaseEntity_t = {"_p_AbstractBehaviorT_BaseEntity_t", "AbstractBehavior< BaseEntity > *", 0, 0, (void*)&_wrap_class_AbstractBehavior_Sl_BaseEntity_Sg_, 0};
static swig_type_info _swigt__p_AbstractBehaviorT_BaseViewObject_t = {"_p_AbstractBehaviorT_BaseViewObject_t", "AbstractBehavior< BaseViewObject > *", 0, 0, (void*)&_wrap_class_AbstractBehavior_Sl_BaseViewObject_Sg_, 0};
static swig_type_info _swigt__p_AbstractBehaviorT_SteeringEntity_t = {"_p_AbstractBehaviorT_SteeringEntity_t", "AbstractBehavior< SteeringEntity > *", 0, 0, (void*)&_wrap_class_AbstractBehavior_Sl_SteeringEntity_Sg_, 0};
static swig_type_info _swigt__p_AbstractFactoryObject = {"_p_AbstractFactoryObject", "AbstractFactoryObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t = {"_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t", "AbstractFactory< AnimationControllerFactory,AnimationControllerInfo,BaseEntityAnimationController > *", 0, 0, (void*)&_wrap_class_AbstractFactory_Sl_AnimationControllerFactory_Sc_AnimationControllerInfo_Sc_BaseEntityAnimationController_Sg_, 0};
static swig_type_info _swigt__p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t = {"_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t", "AbstractFactory< CameraFactory,BaseCameraInfo,BaseCamera > *", 0, 0, (void*)&_wrap_class_AbstractFactory_Sl_CameraFactory_Sc_BaseCameraInfo_Sc_BaseCamera_Sg_, 0};
static swig_type_info _swigt__p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t = {"_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t", "AbstractFactory< CollisionFilterBehaviorFactory,CollisionFilterBehaviorInfo,BaseCollisionFilterBehavior > *", 0, 0, (void*)&_wrap_class_AbstractFactory_Sl_CollisionFilterBehaviorFactory_Sc_CollisionFilterBehaviorInfo_Sc_BaseCollisionFilterBehavior_Sg_, 0};
static swig_type_info _swigt__p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t = {"_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t", "AbstractFactory< CollisionResponseBehaviorFactory,CollisionResponseBehaviorInfo,BaseCollisionResponseBehavior > *", 0, 0, (void*)&_wrap_class_AbstractFactory_Sl_CollisionResponseBehaviorFactory_Sc_CollisionResponseBehaviorInfo_Sc_BaseCollisionResponseBehavior_Sg_, 0};
static swig_type_info _swigt__p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t = {"_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t", "AbstractFactory< CollisionShapeFactory,CollisionShapeInfo,btCollisionShapeWrapper > *", 0, 0, (void*)&_wrap_class_AbstractFactory_Sl_CollisionShapeFactory_Sc_CollisionShapeInfo_Sc_btCollisionShapeWrapper_Sg_, 0};
static swig_type_info _swigt__p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t = {"_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t", "AbstractFactory< EntityFactory,BaseEntityInfo,BaseEntity > *", 0, 0, (void*)&_wrap_class_AbstractFactory_Sl_EntityFactory_Sc_BaseEntityInfo_Sc_BaseEntity_Sg_, 0};
static swig_type_info _swigt__p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t = {"_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t", "AbstractFactory< EntityStateMachineFactory,EntityStateMachineInfo,EntityStateMachine > *", 0, 0, (void*)&_wrap_class_AbstractFactory_Sl_EntityStateMachineFactory_Sc_EntityStateMachineInfo_Sc_EntityStateMachine_Sg_, 0};
static swig_type_info _swigt__p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t = {"_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t", "AbstractFactory< FrameCounter,TimerInfo,BaseTimer > *", 0, 0, (void*)&_wrap_class_AbstractFactory_Sl_FrameCounter_Sc_TimerInfo_Sc_BaseTimer_Sg_, 0};
static swig_type_info _swigt__p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t = {"_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t", "AbstractFactory< ParticleEmitterBehaviorFactory,ParticleEmitterBehaviorInfo,BaseParticleEmitterBehavior > *", 0, 0, (void*)&_wrap_class_AbstractFactory_Sl_ParticleEmitterBehaviorFactory_Sc_ParticleEmitterBehaviorInfo_Sc_BaseParticleEmitterBehavior_Sg_, 0};
static swig_type_info _swigt__p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t = {"_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t", "AbstractFactory< ShaderFactory,ShaderFactoryKey,ShaderProgramHandleWrapper > *", 0, 0, (void*)&_wrap_class_AbstractFactory_Sl_ShaderFactory_Sc_ShaderFactoryKey_Sc_ShaderProgramHandleWrapper_Sg_, 0};
static swig_type_info _swigt__p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t = {"_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t", "AbstractFactory< SteeringBehaviorFactory,SteeringBehaviorInfo,BaseEntitySteeringBehavior > *", 0, 0, (void*)&_wrap_class_AbstractFactory_Sl_SteeringBehaviorFactory_Sc_SteeringBehaviorInfo_Sc_BaseEntitySteeringBehavior_Sg_, 0};
static swig_type_info _swigt__p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t = {"_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t", "AbstractFactory< TextViewObjectFactory,BaseTextViewInfo,BaseTextViewObject > *", 0, 0, (void*)&_wrap_class_AbstractFactory_Sl_TextViewObjectFactory_Sc_BaseTextViewInfo_Sc_BaseTextViewObject_Sg_, 0};
static swig_type_info _swigt__p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t = {"_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t", "AbstractFactory< TextureBehaviorFactory,TextureBehaviorInfo,BaseTextureBehavior > *", 0, 0, (void*)&_wrap_class_AbstractFactory_Sl_TextureBehaviorFactory_Sc_TextureBehaviorInfo_Sc_BaseTextureBehavior_Sg_, 0};
static swig_type_info _swigt__p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t = {"_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t", "AbstractFactory< UpdateBehaviorFactory,UpdateBehaviorInfo,BaseUpdateBehavior > *", 0, 0, (void*)&_wrap_class_AbstractFactory_Sl_UpdateBehaviorFactory_Sc_UpdateBehaviorInfo_Sc_BaseUpdateBehavior_Sg_, 0};
static swig_type_info _swigt__p_AbstractSingletonT_AnimationControllerFactory_t = {"_p_AbstractSingletonT_AnimationControllerFactory_t", "AbstractSingleton< AnimationControllerFactory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AbstractSingletonT_CameraFactory_t = {"_p_AbstractSingletonT_CameraFactory_t", "AbstractSingleton< CameraFactory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AbstractSingletonT_CollisionFilterBehaviorFactory_t = {"_p_AbstractSingletonT_CollisionFilterBehaviorFactory_t", "AbstractSingleton< CollisionFilterBehaviorFactory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AbstractSingletonT_CollisionResponseBehaviorFactory_t = {"_p_AbstractSingletonT_CollisionResponseBehaviorFactory_t", "AbstractSingleton< CollisionResponseBehaviorFactory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AbstractSingletonT_CollisionShapeFactory_t = {"_p_AbstractSingletonT_CollisionShapeFactory_t", "AbstractSingleton< CollisionShapeFactory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AbstractSingletonT_EntityFactory_t = {"_p_AbstractSingletonT_EntityFactory_t", "AbstractSingleton< EntityFactory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AbstractSingletonT_EntityStateMachineFactory_t = {"_p_AbstractSingletonT_EntityStateMachineFactory_t", "AbstractSingleton< EntityStateMachineFactory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AbstractSingletonT_GLDebugDrawer_t = {"_p_AbstractSingletonT_GLDebugDrawer_t", "AbstractSingleton< GLDebugDrawer > *", 0, 0, (void*)&_wrap_class_AbstractSingleton_Sl_GLDebugDrawer_Sg_, 0};
static swig_type_info _swigt__p_AbstractSingletonT_LuaVM_t = {"_p_AbstractSingletonT_LuaVM_t", "AbstractSingleton< LuaVM > *", 0, 0, (void*)&_wrap_class_AbstractSingleton_Sl_LuaVM_Sg_, 0};
static swig_type_info _swigt__p_AbstractSingletonT_MazeCreator_t = {"_p_AbstractSingletonT_MazeCreator_t", "AbstractSingleton< MazeCreator > *", 0, 0, (void*)&_wrap_class_AbstractSingleton_Sl_MazeCreator_Sg_, 0};
static swig_type_info _swigt__p_AbstractSingletonT_MessageDispatcher_t = {"_p_AbstractSingletonT_MessageDispatcher_t", "AbstractSingleton< MessageDispatcher > *", 0, 0, (void*)&_wrap_class_AbstractSingleton_Sl_MessageDispatcher_Sg_, 0};
static swig_type_info _swigt__p_AbstractSingletonT_ParticleEmitterBehaviorFactory_t = {"_p_AbstractSingletonT_ParticleEmitterBehaviorFactory_t", "AbstractSingleton< ParticleEmitterBehaviorFactory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AbstractSingletonT_ShaderFactory_t = {"_p_AbstractSingletonT_ShaderFactory_t", "AbstractSingleton< ShaderFactory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AbstractSingletonT_SteeringBehaviorFactory_t = {"_p_AbstractSingletonT_SteeringBehaviorFactory_t", "AbstractSingleton< SteeringBehaviorFactory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AbstractSingletonT_TextViewObjectFactory_t = {"_p_AbstractSingletonT_TextViewObjectFactory_t", "AbstractSingleton< TextViewObjectFactory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AbstractSingletonT_TextureBehaviorFactory_t = {"_p_AbstractSingletonT_TextureBehaviorFactory_t", "AbstractSingleton< TextureBehaviorFactory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AbstractSingletonT_UpdateBehaviorFactory_t = {"_p_AbstractSingletonT_UpdateBehaviorFactory_t", "AbstractSingleton< UpdateBehaviorFactory > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AbstractStateT_BaseEntity_t = {"_p_AbstractStateT_BaseEntity_t", "AbstractState< BaseEntity > *", 0, 0, (void*)&_wrap_class_AbstractState_Sl_BaseEntity_Sg_, 0};
static swig_type_info _swigt__p_AbstractStateT_void_t = {"_p_AbstractStateT_void_t", "AbstractState< void > *", 0, 0, (void*)&_wrap_class_AbstractState_Sl_void_Sg_, 0};
static swig_type_info _swigt__p_AnimationController2DTest = {"_p_AnimationController2DTest", "AnimationController2DTest *", 0, 0, (void*)&_wrap_class_AnimationController2DTest, 0};
static swig_type_info _swigt__p_AnimationControllerFactory = {"_p_AnimationControllerFactory", "AnimationControllerFactory *", 0, 0, (void*)&_wrap_class_AnimationControllerFactory, 0};
static swig_type_info _swigt__p_AnimationControllerInfo = {"_p_AnimationControllerInfo", "AnimationControllerInfo *", 0, 0, (void*)&_wrap_class_AnimationControllerInfo, 0};
static swig_type_info _swigt__p_BaseCamera = {"_p_BaseCamera", "BaseCamera *", 0, 0, (void*)&_wrap_class_BaseCamera, 0};
static swig_type_info _swigt__p_BaseCameraInfo = {"_p_BaseCameraInfo", "BaseCameraInfo *", 0, 0, (void*)&_wrap_class_BaseCameraInfo, 0};
static swig_type_info _swigt__p_BaseCollisionFilterBehavior = {"_p_BaseCollisionFilterBehavior", "BaseCollisionFilterBehavior *", 0, 0, (void*)&_wrap_class_BaseCollisionFilterBehavior, 0};
static swig_type_info _swigt__p_BaseCollisionResponseBehavior = {"_p_BaseCollisionResponseBehavior", "BaseCollisionResponseBehavior *", 0, 0, (void*)&_wrap_class_BaseCollisionResponseBehavior, 0};
static swig_type_info _swigt__p_BaseEntity = {"_p_BaseEntity", "BaseEntity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BaseEntityAnimationController = {"_p_BaseEntityAnimationController", "BaseEntityAnimationController *", 0, 0, (void*)&_wrap_class_BaseEntityAnimationController, 0};
static swig_type_info _swigt__p_BaseEntityInfo = {"_p_BaseEntityInfo", "BaseEntityInfo *", 0, 0, (void*)&_wrap_class_BaseEntityInfo, 0};
static swig_type_info _swigt__p_BaseEntityState = {"_p_BaseEntityState", "BaseEntityState *", 0, 0, (void*)&_wrap_class_BaseEntityState, 0};
static swig_type_info _swigt__p_BaseEntitySteeringBehavior = {"_p_BaseEntitySteeringBehavior", "BaseEntitySteeringBehavior *", 0, 0, (void*)&_wrap_class_BaseEntitySteeringBehavior, 0};
static swig_type_info _swigt__p_BaseGameState = {"_p_BaseGameState", "BaseGameState *", 0, 0, (void*)&_wrap_class_BaseGameState, 0};
static swig_type_info _swigt__p_BaseParticleEmitterBehavior = {"_p_BaseParticleEmitterBehavior", "BaseParticleEmitterBehavior *", 0, 0, (void*)&_wrap_class_BaseParticleEmitterBehavior, 0};
static swig_type_info _swigt__p_BaseSpriteViewInfo = {"_p_BaseSpriteViewInfo", "BaseSpriteViewInfo *", 0, 0, (void*)&_wrap_class_BaseSpriteViewInfo, 0};
static swig_type_info _swigt__p_BaseTextViewInfo = {"_p_BaseTextViewInfo", "BaseTextViewInfo *", 0, 0, (void*)&_wrap_class_BaseTextViewInfo, 0};
static swig_type_info _swigt__p_BaseTextViewObject = {"_p_BaseTextViewObject", "BaseTextViewObject *", 0, 0, (void*)&_wrap_class_BaseTextViewObject, 0};
static swig_type_info _swigt__p_BaseTextureBehavior = {"_p_BaseTextureBehavior", "BaseTextureBehavior *", 0, 0, (void*)&_wrap_class_BaseTextureBehavior, 0};
static swig_type_info _swigt__p_BaseTimer = {"_p_BaseTimer", "BaseTimer *", 0, 0, (void*)&_wrap_class_BaseTimer, 0};
static swig_type_info _swigt__p_BaseUpdateBehavior = {"_p_BaseUpdateBehavior", "BaseUpdateBehavior *", 0, 0, (void*)&_wrap_class_BaseUpdateBehavior, 0};
static swig_type_info _swigt__p_BaseViewObject = {"_p_BaseViewObject", "BaseViewObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BaseViewObjectInfo = {"_p_BaseViewObjectInfo", "BaseViewObjectInfo *", 0, 0, (void*)&_wrap_class_BaseViewObjectInfo, 0};
static swig_type_info _swigt__p_CameraEntity = {"_p_CameraEntity", "CameraEntity *", 0, 0, (void*)&_wrap_class_CameraEntity, 0};
static swig_type_info _swigt__p_CameraEntityInfo = {"_p_CameraEntityInfo", "CameraEntityInfo *", 0, 0, (void*)&_wrap_class_CameraEntityInfo, 0};
static swig_type_info _swigt__p_CameraFactory = {"_p_CameraFactory", "CameraFactory *", 0, 0, (void*)&_wrap_class_CameraFactory, 0};
static swig_type_info _swigt__p_CameraPhysicsEntity = {"_p_CameraPhysicsEntity", "CameraPhysicsEntity *", 0, 0, (void*)&_wrap_class_CameraPhysicsEntity, 0};
static swig_type_info _swigt__p_CameraPhysicsEntityInfo = {"_p_CameraPhysicsEntityInfo", "CameraPhysicsEntityInfo *", 0, 0, (void*)&_wrap_class_CameraPhysicsEntityInfo, 0};
static swig_type_info _swigt__p_CameraSteeringEntity = {"_p_CameraSteeringEntity", "CameraSteeringEntity *", 0, 0, (void*)&_wrap_class_CameraSteeringEntity, 0};
static swig_type_info _swigt__p_CameraSteeringEntityInfo = {"_p_CameraSteeringEntityInfo", "CameraSteeringEntityInfo *", 0, 0, (void*)&_wrap_class_CameraSteeringEntityInfo, 0};
static swig_type_info _swigt__p_Clock = {"_p_Clock", "Clock *", 0, 0, (void*)&_wrap_class_Clock, 0};
static swig_type_info _swigt__p_CollisionFilterBehaviorFactory = {"_p_CollisionFilterBehaviorFactory", "CollisionFilterBehaviorFactory *", 0, 0, (void*)&_wrap_class_CollisionFilterBehaviorFactory, 0};
static swig_type_info _swigt__p_CollisionFilterBehaviorInfo = {"_p_CollisionFilterBehaviorInfo", "CollisionFilterBehaviorInfo *", 0, 0, (void*)&_wrap_class_CollisionFilterBehaviorInfo, 0};
static swig_type_info _swigt__p_CollisionResponseBehaviorFactory = {"_p_CollisionResponseBehaviorFactory", "CollisionResponseBehaviorFactory *", 0, 0, (void*)&_wrap_class_CollisionResponseBehaviorFactory, 0};
static swig_type_info _swigt__p_CollisionResponseBehaviorInfo = {"_p_CollisionResponseBehaviorInfo", "CollisionResponseBehaviorInfo *", 0, 0, (void*)&_wrap_class_CollisionResponseBehaviorInfo, 0};
static swig_type_info _swigt__p_CollisionShapeFactory = {"_p_CollisionShapeFactory", "CollisionShapeFactory *", 0, 0, (void*)&_wrap_class_CollisionShapeFactory, 0};
static swig_type_info _swigt__p_CollisionShapeInfo = {"_p_CollisionShapeInfo", "CollisionShapeInfo *", 0, 0, (void*)&_wrap_class_CollisionShapeInfo, 0};
static swig_type_info _swigt__p_CustomFilterCallback = {"_p_CustomFilterCallback", "CustomFilterCallback *", 0, 0, (void*)&_wrap_class_CustomFilterCallback, 0};
static swig_type_info _swigt__p_DeviceAccelerometer = {"_p_DeviceAccelerometer", "DeviceAccelerometer *", 0, 0, (void*)&_wrap_class_DeviceAccelerometer, 0};
static swig_type_info _swigt__p_DeviceAttitude = {"_p_DeviceAttitude", "DeviceAttitude *", 0, 0, (void*)&_wrap_class_DeviceAttitude, 0};
static swig_type_info _swigt__p_DeviceGesture = {"_p_DeviceGesture", "DeviceGesture *", 0, 0, (void*)&_wrap_class_DeviceGesture, 0};
static swig_type_info _swigt__p_DeviceGyro = {"_p_DeviceGyro", "DeviceGyro *", 0, 0, (void*)&_wrap_class_DeviceGyro, 0};
static swig_type_info _swigt__p_DeviceInput = {"_p_DeviceInput", "DeviceInput *", 0, 0, (void*)&_wrap_class_DeviceInput, 0};
static swig_type_info _swigt__p_DeviceInputTime = {"_p_DeviceInputTime", "DeviceInputTime *", 0, 0, (void*)&_wrap_class_DeviceInputTime, 0};
static swig_type_info _swigt__p_DeviceLongPressGesture = {"_p_DeviceLongPressGesture", "DeviceLongPressGesture *", 0, 0, (void*)&_wrap_class_DeviceLongPressGesture, 0};
static swig_type_info _swigt__p_DeviceMagnetometer = {"_p_DeviceMagnetometer", "DeviceMagnetometer *", 0, 0, (void*)&_wrap_class_DeviceMagnetometer, 0};
static swig_type_info _swigt__p_DeviceMotion = {"_p_DeviceMotion", "DeviceMotion *", 0, 0, (void*)&_wrap_class_DeviceMotion, 0};
static swig_type_info _swigt__p_DevicePanGesture = {"_p_DevicePanGesture", "DevicePanGesture *", 0, 0, (void*)&_wrap_class_DevicePanGesture, 0};
static swig_type_info _swigt__p_DevicePinchGesture = {"_p_DevicePinchGesture", "DevicePinchGesture *", 0, 0, (void*)&_wrap_class_DevicePinchGesture, 0};
static swig_type_info _swigt__p_DeviceRotationGesture = {"_p_DeviceRotationGesture", "DeviceRotationGesture *", 0, 0, (void*)&_wrap_class_DeviceRotationGesture, 0};
static swig_type_info _swigt__p_DeviceSwipeGesture = {"_p_DeviceSwipeGesture", "DeviceSwipeGesture *", 0, 0, (void*)&_wrap_class_DeviceSwipeGesture, 0};
static swig_type_info _swigt__p_DeviceTapGesture = {"_p_DeviceTapGesture", "DeviceTapGesture *", 0, 0, (void*)&_wrap_class_DeviceTapGesture, 0};
static swig_type_info _swigt__p_DeviceTouch = {"_p_DeviceTouch", "DeviceTouch *", 0, 0, (void*)&_wrap_class_DeviceTouch, 0};
static swig_type_info _swigt__p_EntityFactory = {"_p_EntityFactory", "EntityFactory *", 0, 0, (void*)&_wrap_class_EntityFactory, 0};
static swig_type_info _swigt__p_EntityStateMachine = {"_p_EntityStateMachine", "EntityStateMachine *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EntityStateMachineFactory = {"_p_EntityStateMachineFactory", "EntityStateMachineFactory *", 0, 0, (void*)&_wrap_class_EntityStateMachineFactory, 0};
static swig_type_info _swigt__p_EntityStateMachineInfo = {"_p_EntityStateMachineInfo", "EntityStateMachineInfo *", 0, 0, (void*)&_wrap_class_EntityStateMachineInfo, 0};
static swig_type_info _swigt__p_FollowPathInfo = {"_p_FollowPathInfo", "FollowPathInfo *", 0, 0, (void*)&_wrap_class_FollowPathInfo, 0};
static swig_type_info _swigt__p_FrameCounter = {"_p_FrameCounter", "FrameCounter *", 0, 0, (void*)&_wrap_class_FrameCounter, 0};
static swig_type_info _swigt__p_GLDebugDrawer = {"_p_GLDebugDrawer", "GLDebugDrawer *", 0, 0, (void*)&_wrap_class_GLDebugDrawer, 0};
static swig_type_info _swigt__p_GLKMatrix3 = {"_p_GLKMatrix3", "GLKMatrix3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GLKMatrix4 = {"_p_GLKMatrix4", "GLKMatrix4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GLenum = {"_p_GLenum", "GLenum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GLuint = {"_p_GLuint", "GLuint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GhostEntity = {"_p_GhostEntity", "GhostEntity *", 0, 0, (void*)&_wrap_class_GhostEntity, 0};
static swig_type_info _swigt__p_GhostEntityInfo = {"_p_GhostEntityInfo", "GhostEntityInfo *", 0, 0, (void*)&_wrap_class_GhostEntityInfo, 0};
static swig_type_info _swigt__p_ImageFileEditor = {"_p_ImageFileEditor", "ImageFileEditor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LocalizedTextViewObjectStruct = {"_p_LocalizedTextViewObjectStruct", "LocalizedTextViewObjectStruct *", 0, 0, (void*)&_wrap_class_LocalizedTextViewObjectStruct, 0};
static swig_type_info _swigt__p_LuaVM = {"_p_LuaVM", "LuaVM *", 0, 0, (void*)&_wrap_class_LuaVM, 0};
static swig_type_info _swigt__p_MazeCreator = {"_p_MazeCreator", "MazeCreator *", 0, 0, (void*)&_wrap_class_MazeCreator, 0};
static swig_type_info _swigt__p_MazeGeneric = {"_p_MazeGeneric", "MazeGeneric *", 0, 0, (void*)&_wrap_class_MazeGeneric, 0};
static swig_type_info _swigt__p_MazeHTML = {"_p_MazeHTML", "MazeHTML *", 0, 0, (void*)&_wrap_class_MazeHTML, 0};
static swig_type_info _swigt__p_MazeNode = {"_p_MazeNode", "MazeNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MazeNodeType_e = {"_p_MazeNodeType_e", "enum MazeNodeType_e *|MazeNodeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MazeNodeWall_e = {"_p_MazeNodeWall_e", "MazeNodeWall *|enum MazeNodeWall_e *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MazePNG = {"_p_MazePNG", "MazePNG *", 0, 0, (void*)&_wrap_class_MazePNG, 0};
static swig_type_info _swigt__p_MazeRenderType_e = {"_p_MazeRenderType_e", "enum MazeRenderType_e *|MazeRenderType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MeshMazeCreator = {"_p_MeshMazeCreator", "MeshMazeCreator *", 0, 0, (void*)&_wrap_class_MeshMazeCreator, 0};
static swig_type_info _swigt__p_MessageDispatcher = {"_p_MessageDispatcher", "MessageDispatcher *", 0, 0, (void*)&_wrap_class_MessageDispatcher, 0};
static swig_type_info _swigt__p_NSInteger = {"_p_NSInteger", "NSInteger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NSTimeInterval = {"_p_NSTimeInterval", "NSTimeInterval *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OcclusionBuffer = {"_p_OcclusionBuffer", "OcclusionBuffer *", 0, 0, (void*)&_wrap_class_OcclusionBuffer, 0};
static swig_type_info _swigt__p_PHY_ScalarType = {"_p_PHY_ScalarType", "enum PHY_ScalarType *|PHY_ScalarType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ParticleAttributeTransform = {"_p_ParticleAttributeTransform", "ParticleAttributeTransform *", 0, 0, (void*)&_wrap_class_ParticleAttributeTransform, 0};
static swig_type_info _swigt__p_ParticleEmitterBehaviorFactory = {"_p_ParticleEmitterBehaviorFactory", "ParticleEmitterBehaviorFactory *", 0, 0, (void*)&_wrap_class_ParticleEmitterBehaviorFactory, 0};
static swig_type_info _swigt__p_ParticleEmitterBehaviorInfo = {"_p_ParticleEmitterBehaviorInfo", "ParticleEmitterBehaviorInfo *", 0, 0, (void*)&_wrap_class_ParticleEmitterBehaviorInfo, 0};
static swig_type_info _swigt__p_Path = {"_p_Path", "Path *", 0, 0, (void*)&_wrap_class_Path, 0};
static swig_type_info _swigt__p_PathInfo = {"_p_PathInfo", "PathInfo *", 0, 0, (void*)&_wrap_class_PathInfo, 0};
static swig_type_info _swigt__p_RigidEntity = {"_p_RigidEntity", "RigidEntity *", 0, 0, (void*)&_wrap_class_RigidEntity, 0};
static swig_type_info _swigt__p_RigidEntityInfo = {"_p_RigidEntityInfo", "RigidEntityInfo *", 0, 0, (void*)&_wrap_class_RigidEntityInfo, 0};
static swig_type_info _swigt__p_SceneRenderer = {"_p_SceneRenderer", "SceneRenderer *", 0, 0, (void*)&_wrap_class_SceneRenderer, 0};
static swig_type_info _swigt__p_ShaderFactory = {"_p_ShaderFactory", "ShaderFactory *", 0, 0, (void*)&_wrap_class_ShaderFactory, 0};
static swig_type_info _swigt__p_ShaderProgramHandleWrapper = {"_p_ShaderProgramHandleWrapper", "ShaderProgramHandleWrapper *", 0, 0, (void*)&_wrap_class_ShaderProgramHandleWrapper, 0};
static swig_type_info _swigt__p_SoftEntity = {"_p_SoftEntity", "SoftEntity *", 0, 0, (void*)&_wrap_class_SoftEntity, 0};
static swig_type_info _swigt__p_SoftEntityInfo = {"_p_SoftEntityInfo", "SoftEntityInfo *", 0, 0, (void*)&_wrap_class_SoftEntityInfo, 0};
static swig_type_info _swigt__p_SteeringBehaviorFactory = {"_p_SteeringBehaviorFactory", "SteeringBehaviorFactory *", 0, 0, (void*)&_wrap_class_SteeringBehaviorFactory, 0};
static swig_type_info _swigt__p_SteeringBehaviorInfo = {"_p_SteeringBehaviorInfo", "SteeringBehaviorInfo *", 0, 0, (void*)&_wrap_class_SteeringBehaviorInfo, 0};
static swig_type_info _swigt__p_SteeringEntity = {"_p_SteeringEntity", "SteeringEntity *", 0, 0, (void*)&_wrap_class_SteeringEntity, 0};
static swig_type_info _swigt__p_SteeringEntityInfo = {"_p_SteeringEntityInfo", "SteeringEntityInfo *", 0, 0, (void*)&_wrap_class_SteeringEntityInfo, 0};
static swig_type_info _swigt__p_StopWatch = {"_p_StopWatch", "StopWatch *", 0, 0, (void*)&_wrap_class_StopWatch, 0};
static swig_type_info _swigt__p_Telegram = {"_p_Telegram", "Telegram *", 0, 0, (void*)&_wrap_class_Telegram, 0};
static swig_type_info _swigt__p_TextInfo = {"_p_TextInfo", "TextInfo *", 0, 0, (void*)&_wrap_class_TextInfo, 0};
static swig_type_info _swigt__p_TextMetrics = {"_p_TextMetrics", "TextMetrics *", 0, 0, (void*)&_wrap_class_TextMetrics, 0};
static swig_type_info _swigt__p_TextOrigin = {"_p_TextOrigin", "TextOrigin *", 0, 0, (void*)&_wrap_class_TextOrigin, 0};
static swig_type_info _swigt__p_TextViewObjectFactory = {"_p_TextViewObjectFactory", "TextViewObjectFactory *", 0, 0, (void*)&_wrap_class_TextViewObjectFactory, 0};
static swig_type_info _swigt__p_TextViewObjectStruct = {"_p_TextViewObjectStruct", "TextViewObjectStruct *", 0, 0, (void*)&_wrap_class_TextViewObjectStruct, 0};
static swig_type_info _swigt__p_TextureBehaviorFactory = {"_p_TextureBehaviorFactory", "TextureBehaviorFactory *", 0, 0, (void*)&_wrap_class_TextureBehaviorFactory, 0};
static swig_type_info _swigt__p_TextureBehaviorInfo = {"_p_TextureBehaviorInfo", "TextureBehaviorInfo *", 0, 0, (void*)&_wrap_class_TextureBehaviorInfo, 0};
static swig_type_info _swigt__p_TextureMazeCreator = {"_p_TextureMazeCreator", "TextureMazeCreator *", 0, 0, (void*)&_wrap_class_TextureMazeCreator, 0};
static swig_type_info _swigt__p_Timer = {"_p_Timer", "Timer *", 0, 0, (void*)&_wrap_class_Timer, 0};
static swig_type_info _swigt__p_TimerInfo = {"_p_TimerInfo", "TimerInfo *", 0, 0, (void*)&_wrap_class_TimerInfo, 0};
static swig_type_info _swigt__p_UpdateBehaviorFactory = {"_p_UpdateBehaviorFactory", "UpdateBehaviorFactory *", 0, 0, (void*)&_wrap_class_UpdateBehaviorFactory, 0};
static swig_type_info _swigt__p_UpdateBehaviorInfo = {"_p_UpdateBehaviorInfo", "UpdateBehaviorInfo *", 0, 0, (void*)&_wrap_class_UpdateBehaviorInfo, 0};
static swig_type_info _swigt__p_VertexTransform = {"_p_VertexTransform", "VertexTransform *", 0, 0, (void*)&_wrap_class_VertexTransform, 0};
static swig_type_info _swigt__p_WallAvoidanceFunction = {"_p_WallAvoidanceFunction", "WallAvoidanceFunction *", 0, 0, (void*)&_wrap_class_WallAvoidanceFunction, 0};
static swig_type_info _swigt__p_WanderInfo = {"_p_WanderInfo", "WanderInfo *", 0, 0, (void*)&_wrap_class_WanderInfo, 0};
static swig_type_info _swigt__p_WeightedSteeringBehavior = {"_p_WeightedSteeringBehavior", "WeightedSteeringBehavior *", 0, 0, (void*)&_wrap_class_WeightedSteeringBehavior, 0};
static swig_type_info _swigt__p_WeightedSteeringBehaviorInfo = {"_p_WeightedSteeringBehaviorInfo", "WeightedSteeringBehaviorInfo *", 0, 0, (void*)&_wrap_class_WeightedSteeringBehaviorInfo, 0};
static swig_type_info _swigt__p_WorldPhysics = {"_p_WorldPhysics", "WorldPhysics *", 0, 0, (void*)&_wrap_class_WorldPhysics, 0};
static swig_type_info _swigt__p_WorldPhysicsInfo = {"_p_WorldPhysicsInfo", "WorldPhysicsInfo *", 0, 0, (void*)&_wrap_class_WorldPhysicsInfo, 0};
static swig_type_info _swigt__p_btActionInterface = {"_p_btActionInterface", "btActionInterface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btRaycastVehicle = {"_p_btRaycastVehicle", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_BaseCamera_p_t = {"_p_btAlignedObjectArrayT_BaseCamera_p_t", "btAlignedObjectArray< BaseCamera * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_BaseCollisionFilterBehavior_p_t = {"_p_btAlignedObjectArrayT_BaseCollisionFilterBehavior_p_t", "btAlignedObjectArray< BaseCollisionFilterBehavior * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_BaseCollisionResponseBehavior_p_t = {"_p_btAlignedObjectArrayT_BaseCollisionResponseBehavior_p_t", "btAlignedObjectArray< BaseCollisionResponseBehavior * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_BaseEntityAnimationController_p_t = {"_p_btAlignedObjectArrayT_BaseEntityAnimationController_p_t", "btAlignedObjectArray< BaseEntityAnimationController * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_BaseEntitySteeringBehavior_p_t = {"_p_btAlignedObjectArrayT_BaseEntitySteeringBehavior_p_t", "btAlignedObjectArray< BaseEntitySteeringBehavior * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_BaseEntity_p_t = {"_p_btAlignedObjectArrayT_BaseEntity_p_t", "btAlignedObjectArray< BaseEntity * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_BaseParticleEmitterBehavior_p_t = {"_p_btAlignedObjectArrayT_BaseParticleEmitterBehavior_p_t", "btAlignedObjectArray< BaseParticleEmitterBehavior * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_BaseTextViewObject_p_t = {"_p_btAlignedObjectArrayT_BaseTextViewObject_p_t", "btAlignedObjectArray< BaseTextViewObject * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_BaseTextureBehavior_p_t = {"_p_btAlignedObjectArrayT_BaseTextureBehavior_p_t", "btAlignedObjectArray< BaseTextureBehavior * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_BaseTimer_p_t = {"_p_btAlignedObjectArrayT_BaseTimer_p_t", "btAlignedObjectArray< BaseTimer * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_BaseUpdateBehavior_p_t = {"_p_btAlignedObjectArrayT_BaseUpdateBehavior_p_t", "btAlignedObjectArray< BaseUpdateBehavior * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_EntityStateMachine_p_t = {"_p_btAlignedObjectArrayT_EntityStateMachine_p_t", "btAlignedObjectArray< EntityStateMachine * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_ShaderProgramHandleWrapper_p_t = {"_p_btAlignedObjectArrayT_ShaderProgramHandleWrapper_p_t", "btAlignedObjectArray< ShaderProgramHandleWrapper * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_bool_t = {"_p_btAlignedObjectArrayT_bool_t", "btAlignedObjectArray< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btBroadphaseInterface_p_t = {"_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t", "btSapBroadphaseArray *|btAlignedObjectArray< btBroadphaseInterface * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btBroadphasePair_t = {"_p_btAlignedObjectArrayT_btBroadphasePair_t", "btBroadphasePairArray *|btAlignedObjectArray< btBroadphasePair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btBvhSubtreeInfo_t = {"_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t", "BvhSubtreeInfoArray *|btAlignedObjectArray< btBvhSubtreeInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btCollisionObject_const_p_t = {"_p_btAlignedObjectArrayT_btCollisionObject_const_p_t", "btAlignedObjectArray< btCollisionObject const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btCollisionObject_p_t = {"_p_btAlignedObjectArrayT_btCollisionObject_p_t", "btCollisionObjectArray *|btAlignedObjectArray< btCollisionObject * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btCollisionShapeWrapper_p_t = {"_p_btAlignedObjectArrayT_btCollisionShapeWrapper_p_t", "btAlignedObjectArray< btCollisionShapeWrapper * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btDbvtProxy_p_t = {"_p_btAlignedObjectArrayT_btDbvtProxy_p_t", "btDbvtProxyArray *|btAlignedObjectArray< btDbvtProxy * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btIndexedMesh_t = {"_p_btAlignedObjectArrayT_btIndexedMesh_t", "IndexedMeshArray *|btAlignedObjectArray< btIndexedMesh > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btOptimizedBvhNode_t = {"_p_btAlignedObjectArrayT_btOptimizedBvhNode_t", "NodeArray *|btAlignedObjectArray< btOptimizedBvhNode > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btPersistentManifold_p_t = {"_p_btAlignedObjectArrayT_btPersistentManifold_p_t", "btManifoldArray *|btAlignedObjectArray< btPersistentManifold * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btQuantizedBvhNode_t = {"_p_btAlignedObjectArrayT_btQuantizedBvhNode_t", "QuantizedNodeArray *|btAlignedObjectArray< btQuantizedBvhNode > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btSoftBody__Anchor_t = {"_p_btAlignedObjectArrayT_btSoftBody__Anchor_t", "btSoftBody::tAnchorArray *|btAlignedObjectArray< btSoftBody::Anchor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t = {"_p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t", "btSoftBody::tClusterArray *|btAlignedObjectArray< btSoftBody::Cluster * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btSoftBody__Face_t = {"_p_btAlignedObjectArrayT_btSoftBody__Face_t", "btSoftBody::tFaceArray *|btAlignedObjectArray< btSoftBody::Face > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btSoftBody__Joint_p_t = {"_p_btAlignedObjectArrayT_btSoftBody__Joint_p_t", "btSoftBody::tJointArray *|btAlignedObjectArray< btSoftBody::Joint * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btSoftBody__Link_t = {"_p_btAlignedObjectArrayT_btSoftBody__Link_t", "btSoftBody::tLinkArray *|btAlignedObjectArray< btSoftBody::Link > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btSoftBody__Material_p_t = {"_p_btAlignedObjectArrayT_btSoftBody__Material_p_t", "btSoftBody::tMaterialArray *|btAlignedObjectArray< btSoftBody::Material * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btSoftBody__Node_t = {"_p_btAlignedObjectArrayT_btSoftBody__Node_t", "btSoftBody::tNodeArray *|btAlignedObjectArray< btSoftBody::Node > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btSoftBody__Note_t = {"_p_btAlignedObjectArrayT_btSoftBody__Note_t", "btAlignedObjectArray< btSoftBody::Note > *|btSoftBody::tNoteArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btSoftBody__RContact_t = {"_p_btAlignedObjectArrayT_btSoftBody__RContact_t", "btSoftBody::tRContactArray *|btAlignedObjectArray< btSoftBody::RContact > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btSoftBody__SContact_t = {"_p_btAlignedObjectArrayT_btSoftBody__SContact_t", "btSoftBody::tSContactArray *|btAlignedObjectArray< btSoftBody::SContact > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btSoftBody__Tetra_t = {"_p_btAlignedObjectArrayT_btSoftBody__Tetra_t", "btSoftBody::tTetraArray *|btAlignedObjectArray< btSoftBody::Tetra > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btSoftBody_p_t = {"_p_btAlignedObjectArrayT_btSoftBody_p_t", "btSoftBodyArray *|btAlignedObjectArray< btSoftBody * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btSolverConstraint_t = {"_p_btAlignedObjectArrayT_btSolverConstraint_t", "btConstraintArray *|btAlignedObjectArray< btSolverConstraint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_btVector3_t = {"_p_btAlignedObjectArrayT_btVector3_t", "btAlignedObjectArray< btVector3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_float_t = {"_p_btAlignedObjectArrayT_float_t", "btAlignedObjectArray< float > *|btAlignedObjectArray< btScalar > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_int_t = {"_p_btAlignedObjectArrayT_int_t", "btAlignedObjectArray< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btAlignedObjectArrayT_long_long_t = {"_p_btAlignedObjectArrayT_long_long_t", "btAlignedObjectArray< long long > *|btAlignedObjectArray< IDType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btBroadphaseInterface = {"_p_btBroadphaseInterface", "btBroadphaseInterface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSimpleBroadphase = {"_p_btSimpleBroadphase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btDbvtBroadphase = {"_p_btDbvtBroadphase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btMultiSapBroadphase = {"_p_btMultiSapBroadphase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btBroadphasePair = {"_p_btBroadphasePair", "btBroadphasePair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btBroadphaseProxy = {"_p_btBroadphaseProxy", "btBroadphaseProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSimpleBroadphaseProxy = {"_p_btSimpleBroadphaseProxy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btDbvtProxy = {"_p_btDbvtProxy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btCollisionAlgorithmCreateFunc = {"_p_btCollisionAlgorithmCreateFunc", "btCollisionAlgorithmCreateFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btCollisionConfiguration = {"_p_btCollisionConfiguration", "btCollisionConfiguration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btCollisionObject = {"_p_btCollisionObject", "btCollisionObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btCollisionObjectWrapper = {"_p_btCollisionObjectWrapper", "btCollisionObjectWrapper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btCollisionShape = {"_p_btCollisionShape", "btCollisionShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btCompoundShape = {"_p_btCompoundShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btCapsuleShapeZ = {"_p_btCapsuleShapeZ", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btConeShapeZ = {"_p_btConeShapeZ", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btConeShape = {"_p_btConeShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btCylinderShapeX = {"_p_btCylinderShapeX", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btCapsuleShape = {"_p_btCapsuleShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btSphereShape = {"_p_btSphereShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btConcaveShape = {"_p_btConcaveShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btStaticPlaneShape = {"_p_btStaticPlaneShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btMultiSphereShape = {"_p_btMultiSphereShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btConvexInternalShape = {"_p_btConvexInternalShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btCylinderShapeZ = {"_p_btCylinderShapeZ", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btPolyhedralConvexAabbCachingShape = {"_p_btPolyhedralConvexAabbCachingShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btConvexInternalAabbCachingShape = {"_p_btConvexInternalAabbCachingShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btUniformScalingShape = {"_p_btUniformScalingShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btEmptyShape = {"_p_btEmptyShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btBU_Simplex1to4 = {"_p_btBU_Simplex1to4", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btBoxShape = {"_p_btBoxShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btPolyhedralConvexShape = {"_p_btPolyhedralConvexShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btConvexTriangleMeshShape = {"_p_btConvexTriangleMeshShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btTriangleMeshShape = {"_p_btTriangleMeshShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btBvhTriangleMeshShape = {"_p_btBvhTriangleMeshShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btScaledBvhTriangleMeshShape = {"_p_btScaledBvhTriangleMeshShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btCylinderShape = {"_p_btCylinderShape", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btConeShapeX = {"_p_btConeShapeX", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btCapsuleShapeX = {"_p_btCapsuleShapeX", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btCollisionShapeWrapper = {"_p_btCollisionShapeWrapper", "btCollisionShapeWrapper *", 0, 0, (void*)&_wrap_class_btCollisionShapeWrapper, 0};
static swig_type_info _swigt__p_btCollisionWorld = {"_p_btCollisionWorld", "btCollisionWorld *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSimpleDynamicsWorld = {"_p_btSimpleDynamicsWorld", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btCollisionWorld__ConvexResultCallback = {"_p_btCollisionWorld__ConvexResultCallback", "btCollisionWorld::ConvexResultCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btCollisionWorld__RayResultCallback = {"_p_btCollisionWorld__RayResultCallback", "btCollisionWorld::RayResultCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btConstraintRow = {"_p_btConstraintRow", "btConstraintRow *|PfxConstraintRow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btConstraintSolver = {"_p_btConstraintSolver", "btConstraintSolver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSequentialImpulseConstraintSolver = {"_p_btSequentialImpulseConstraintSolver", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btConvexHullShape = {"_p_btConvexHullShape", "btConvexHullShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btConvexShape = {"_p_btConvexShape", "btConvexShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btDbvt = {"_p_btDbvt", "btDbvt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btDbvtAabbMm = {"_p_btDbvtAabbMm", "btDbvtAabbMm *|btDbvtVolume *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btDbvtNode = {"_p_btDbvtNode", "btDbvtNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btDefaultCollisionConfiguration = {"_p_btDefaultCollisionConfiguration", "btDefaultCollisionConfiguration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btDefaultCollisionConstructionInfo = {"_p_btDefaultCollisionConstructionInfo", "btDefaultCollisionConstructionInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btDiscreteDynamicsWorld = {"_p_btDiscreteDynamicsWorld", "btDiscreteDynamicsWorld *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btDispatcher = {"_p_btDispatcher", "btDispatcher *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btCollisionDispatcher = {"_p_btCollisionDispatcher", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btDynamicsWorld = {"_p_btDynamicsWorld", "btDynamicsWorld *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btGhostObject = {"_p_btGhostObject", "btGhostObject *", 0, 0, (void*)&_wrap_class_btGhostObject, 0};
static swig_type_info _swigt__p_btGhostPairCallback = {"_p_btGhostPairCallback", "btGhostPairCallback *", 0, 0, (void*)&_wrap_class_btGhostPairCallback, 0};
static swig_type_info _swigt__p_btGjkEpaSolver2 = {"_p_btGjkEpaSolver2", "btGjkEpaSolver2 *", 0, 0, (void*)&_wrap_class_btGjkEpaSolver2, 0};
static swig_type_info _swigt__p_btGjkEpaSolver2__sResults = {"_p_btGjkEpaSolver2__sResults", "btGjkEpaSolver2::sResults *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btHashMapT_btHashInt_btTriangleInfo_t = {"_p_btHashMapT_btHashInt_btTriangleInfo_t", "btInternalTriangleInfoMap *|btHashMap< btHashInt,btTriangleInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btHashedOverlappingPairCache = {"_p_btHashedOverlappingPairCache", "btHashedOverlappingPairCache *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btIDebugDraw = {"_p_btIDebugDraw", "btIDebugDraw *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btManifoldPoint = {"_p_btManifoldPoint", "btManifoldPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btMatrix3x3 = {"_p_btMatrix3x3", "btMatrix3x3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btOverlapFilterCallback = {"_p_btOverlapFilterCallback", "btOverlapFilterCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btOverlappingPairCallback = {"_p_btOverlappingPairCallback", "btOverlappingPairCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btOverlappingPairCache = {"_p_btOverlappingPairCache", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btSortedOverlappingPairCache = {"_p_btSortedOverlappingPairCache", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btNullPairCache = {"_p_btNullPairCache", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btPairCachingGhostObject = {"_p_btPairCachingGhostObject", "btPairCachingGhostObject *", 0, 0, (void*)&_wrap_class_btPairCachingGhostObject, 0};
static swig_type_info _swigt__p_btQuaternion = {"_p_btQuaternion", "btQuaternion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btRigidBody = {"_p_btRigidBody", "btRigidBody *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btRigidBodyForceWrapper = {"_p_btRigidBodyForceWrapper", "btRigidBodyForceWrapper *", 0, 0, (void*)&_wrap_class_btRigidBodyForceWrapper, 0};
static swig_type_info _swigt__p_btSerializer = {"_p_btSerializer", "btSerializer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btDefaultSerializer = {"_p_btDefaultSerializer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_btSoftBody = {"_p_btSoftBody", "btSoftBody *", 0, 0, (void*)&_wrap_class_btSoftBody, 0};
static swig_type_info _swigt__p_btSoftBodyRigidBodyCollisionConfiguration = {"_p_btSoftBodyRigidBodyCollisionConfiguration", "btSoftBodyRigidBodyCollisionConfiguration *", 0, 0, (void*)&_wrap_class_btSoftBodyRigidBodyCollisionConfiguration, 0};
static swig_type_info _swigt__p_btSoftBodySolver = {"_p_btSoftBodySolver", "btSoftBodySolver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBodyWorldInfo = {"_p_btSoftBodyWorldInfo", "btSoftBodyWorldInfo *", 0, 0, (void*)&_wrap_class_btSoftBodyWorldInfo, 0};
static swig_type_info _swigt__p_btSoftBody__AJoint__Specs = {"_p_btSoftBody__AJoint__Specs", "btSoftBody::AJoint::Specs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__Body = {"_p_btSoftBody__Body", "btSoftBody::Body *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__Cluster = {"_p_btSoftBody__Cluster", "btSoftBody::Cluster *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__Config = {"_p_btSoftBody__Config", "btSoftBody::Config *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__Face = {"_p_btSoftBody__Face", "btSoftBody::Face *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__ImplicitFn = {"_p_btSoftBody__ImplicitFn", "btSoftBody::ImplicitFn *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__Impulse = {"_p_btSoftBody__Impulse", "btSoftBody::Impulse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__LJoint__Specs = {"_p_btSoftBody__LJoint__Specs", "btSoftBody::LJoint::Specs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__Link = {"_p_btSoftBody__Link", "btSoftBody::Link *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__Material = {"_p_btSoftBody__Material", "btSoftBody::Material *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__Node = {"_p_btSoftBody__Node", "btSoftBody::Node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__Pose = {"_p_btSoftBody__Pose", "btSoftBody::Pose *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__SolverState = {"_p_btSoftBody__SolverState", "btSoftBody::SolverState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__eFeature___ = {"_p_btSoftBody__eFeature___", "btSoftBody::eFeature::_ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__ePSolver___ = {"_p_btSoftBody__ePSolver___", "btSoftBody::ePSolver::_ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__eSolverPresets___ = {"_p_btSoftBody__eSolverPresets___", "btSoftBody::eSolverPresets::_ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__eVSolver___ = {"_p_btSoftBody__eVSolver___", "btSoftBody::eVSolver::_ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__sCti = {"_p_btSoftBody__sCti", "btSoftBody::sCti *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody__sRayCast = {"_p_btSoftBody__sRayCast", "btSoftBody::sRayCast *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftRigidDynamicsWorld = {"_p_btSoftRigidDynamicsWorld", "btSoftRigidDynamicsWorld *", 0, 0, (void*)&_wrap_class_btSoftRigidDynamicsWorld, 0};
static swig_type_info _swigt__p_btSparseSdfT_3_t = {"_p_btSparseSdfT_3_t", "btSparseSdf< 3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btTransform = {"_p_btTransform", "btTransform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btVector2 = {"_p_btVector2", "btVector2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btVector3 = {"_p_btVector3", "btVector3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btVector4 = {"_p_btVector4", "btVector4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|s8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_btSoftBody_float__void = {"_p_f_p_btSoftBody_float__void", "void (*)(btSoftBody *,float)|btSoftBody::vsolver_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_btSoftBody_float_float__void = {"_p_f_p_btSoftBody_float_float__void", "void (*)(btSoftBody *,float,float)|btSoftBody::psolver_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__void = {"_p_f_p_void__void", "btAlignedFreeFunc *|btFreeFunc *|void (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_size_t__p_void = {"_p_f_size_t__p_void", "void *(*)(size_t)|btAllocFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_size_t_int__p_void = {"_p_f_size_t_int__p_void", "btAlignedAllocFunc *|void *(*)(size_t,int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|btScalar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "size_type *|int *|s32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "IDType *|long long *|s64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_btSoftBody = {"_p_p_btSoftBody", "btSoftBody **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|s16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_std__string_t = {"_p_std__pairT_std__string_std__string_t", "std::pair< std::string,std::string > *|ShaderFactoryKey *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tAnchorArray = {"_p_tAnchorArray", "tAnchorArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tClusterArray = {"_p_tClusterArray", "tClusterArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tFaceArray = {"_p_tFaceArray", "tFaceArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tJointArray = {"_p_tJointArray", "tJointArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tLeafArray = {"_p_tLeafArray", "tLeafArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tLinkArray = {"_p_tLinkArray", "tLinkArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tMaterialArray = {"_p_tMaterialArray", "tMaterialArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tNodeArray = {"_p_tNodeArray", "tNodeArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tNoteArray = {"_p_tNoteArray", "tNoteArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tPSolverArray = {"_p_tPSolverArray", "tPSolverArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tRContactArray = {"_p_tRContactArray", "tRContactArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tSContactArray = {"_p_tSContactArray", "tSContactArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tScalarArray = {"_p_tScalarArray", "tScalarArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tSoftBodyArray = {"_p_tSoftBodyArray", "tSoftBodyArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tTetraArray = {"_p_tTetraArray", "tTetraArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tVSolverArray = {"_p_tVSolverArray", "tVSolverArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tVector3Array = {"_p_tVector3Array", "tVector3Array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "u8 *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|u32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *|u64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|u16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AbstractBehaviorT_BaseEntity_t,
  &_swigt__p_AbstractBehaviorT_BaseViewObject_t,
  &_swigt__p_AbstractBehaviorT_SteeringEntity_t,
  &_swigt__p_AbstractFactoryObject,
  &_swigt__p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t,
  &_swigt__p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t,
  &_swigt__p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t,
  &_swigt__p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t,
  &_swigt__p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t,
  &_swigt__p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t,
  &_swigt__p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t,
  &_swigt__p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t,
  &_swigt__p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t,
  &_swigt__p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t,
  &_swigt__p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t,
  &_swigt__p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t,
  &_swigt__p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t,
  &_swigt__p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t,
  &_swigt__p_AbstractSingletonT_AnimationControllerFactory_t,
  &_swigt__p_AbstractSingletonT_CameraFactory_t,
  &_swigt__p_AbstractSingletonT_CollisionFilterBehaviorFactory_t,
  &_swigt__p_AbstractSingletonT_CollisionResponseBehaviorFactory_t,
  &_swigt__p_AbstractSingletonT_CollisionShapeFactory_t,
  &_swigt__p_AbstractSingletonT_EntityFactory_t,
  &_swigt__p_AbstractSingletonT_EntityStateMachineFactory_t,
  &_swigt__p_AbstractSingletonT_GLDebugDrawer_t,
  &_swigt__p_AbstractSingletonT_LuaVM_t,
  &_swigt__p_AbstractSingletonT_MazeCreator_t,
  &_swigt__p_AbstractSingletonT_MessageDispatcher_t,
  &_swigt__p_AbstractSingletonT_ParticleEmitterBehaviorFactory_t,
  &_swigt__p_AbstractSingletonT_ShaderFactory_t,
  &_swigt__p_AbstractSingletonT_SteeringBehaviorFactory_t,
  &_swigt__p_AbstractSingletonT_TextViewObjectFactory_t,
  &_swigt__p_AbstractSingletonT_TextureBehaviorFactory_t,
  &_swigt__p_AbstractSingletonT_UpdateBehaviorFactory_t,
  &_swigt__p_AbstractStateT_BaseEntity_t,
  &_swigt__p_AbstractStateT_void_t,
  &_swigt__p_AnimationController2DTest,
  &_swigt__p_AnimationControllerFactory,
  &_swigt__p_AnimationControllerInfo,
  &_swigt__p_BaseCamera,
  &_swigt__p_BaseCameraInfo,
  &_swigt__p_BaseCollisionFilterBehavior,
  &_swigt__p_BaseCollisionResponseBehavior,
  &_swigt__p_BaseEntity,
  &_swigt__p_BaseEntityAnimationController,
  &_swigt__p_BaseEntityInfo,
  &_swigt__p_BaseEntityState,
  &_swigt__p_BaseEntitySteeringBehavior,
  &_swigt__p_BaseGameState,
  &_swigt__p_BaseParticleEmitterBehavior,
  &_swigt__p_BaseSpriteViewInfo,
  &_swigt__p_BaseTextViewInfo,
  &_swigt__p_BaseTextViewObject,
  &_swigt__p_BaseTextureBehavior,
  &_swigt__p_BaseTimer,
  &_swigt__p_BaseUpdateBehavior,
  &_swigt__p_BaseViewObject,
  &_swigt__p_BaseViewObjectInfo,
  &_swigt__p_CameraEntity,
  &_swigt__p_CameraEntityInfo,
  &_swigt__p_CameraFactory,
  &_swigt__p_CameraPhysicsEntity,
  &_swigt__p_CameraPhysicsEntityInfo,
  &_swigt__p_CameraSteeringEntity,
  &_swigt__p_CameraSteeringEntityInfo,
  &_swigt__p_Clock,
  &_swigt__p_CollisionFilterBehaviorFactory,
  &_swigt__p_CollisionFilterBehaviorInfo,
  &_swigt__p_CollisionResponseBehaviorFactory,
  &_swigt__p_CollisionResponseBehaviorInfo,
  &_swigt__p_CollisionShapeFactory,
  &_swigt__p_CollisionShapeInfo,
  &_swigt__p_CustomFilterCallback,
  &_swigt__p_DeviceAccelerometer,
  &_swigt__p_DeviceAttitude,
  &_swigt__p_DeviceGesture,
  &_swigt__p_DeviceGyro,
  &_swigt__p_DeviceInput,
  &_swigt__p_DeviceInputTime,
  &_swigt__p_DeviceLongPressGesture,
  &_swigt__p_DeviceMagnetometer,
  &_swigt__p_DeviceMotion,
  &_swigt__p_DevicePanGesture,
  &_swigt__p_DevicePinchGesture,
  &_swigt__p_DeviceRotationGesture,
  &_swigt__p_DeviceSwipeGesture,
  &_swigt__p_DeviceTapGesture,
  &_swigt__p_DeviceTouch,
  &_swigt__p_EntityFactory,
  &_swigt__p_EntityStateMachine,
  &_swigt__p_EntityStateMachineFactory,
  &_swigt__p_EntityStateMachineInfo,
  &_swigt__p_FollowPathInfo,
  &_swigt__p_FrameCounter,
  &_swigt__p_GLDebugDrawer,
  &_swigt__p_GLKMatrix3,
  &_swigt__p_GLKMatrix4,
  &_swigt__p_GLenum,
  &_swigt__p_GLuint,
  &_swigt__p_GhostEntity,
  &_swigt__p_GhostEntityInfo,
  &_swigt__p_ImageFileEditor,
  &_swigt__p_LocalizedTextViewObjectStruct,
  &_swigt__p_LuaVM,
  &_swigt__p_MazeCreator,
  &_swigt__p_MazeGeneric,
  &_swigt__p_MazeHTML,
  &_swigt__p_MazeNode,
  &_swigt__p_MazeNodeType_e,
  &_swigt__p_MazeNodeWall_e,
  &_swigt__p_MazePNG,
  &_swigt__p_MazeRenderType_e,
  &_swigt__p_MeshMazeCreator,
  &_swigt__p_MessageDispatcher,
  &_swigt__p_NSInteger,
  &_swigt__p_NSTimeInterval,
  &_swigt__p_OcclusionBuffer,
  &_swigt__p_PHY_ScalarType,
  &_swigt__p_ParticleAttributeTransform,
  &_swigt__p_ParticleEmitterBehaviorFactory,
  &_swigt__p_ParticleEmitterBehaviorInfo,
  &_swigt__p_Path,
  &_swigt__p_PathInfo,
  &_swigt__p_RigidEntity,
  &_swigt__p_RigidEntityInfo,
  &_swigt__p_SceneRenderer,
  &_swigt__p_ShaderFactory,
  &_swigt__p_ShaderProgramHandleWrapper,
  &_swigt__p_SoftEntity,
  &_swigt__p_SoftEntityInfo,
  &_swigt__p_SteeringBehaviorFactory,
  &_swigt__p_SteeringBehaviorInfo,
  &_swigt__p_SteeringEntity,
  &_swigt__p_SteeringEntityInfo,
  &_swigt__p_StopWatch,
  &_swigt__p_Telegram,
  &_swigt__p_TextInfo,
  &_swigt__p_TextMetrics,
  &_swigt__p_TextOrigin,
  &_swigt__p_TextViewObjectFactory,
  &_swigt__p_TextViewObjectStruct,
  &_swigt__p_TextureBehaviorFactory,
  &_swigt__p_TextureBehaviorInfo,
  &_swigt__p_TextureMazeCreator,
  &_swigt__p_Timer,
  &_swigt__p_TimerInfo,
  &_swigt__p_UpdateBehaviorFactory,
  &_swigt__p_UpdateBehaviorInfo,
  &_swigt__p_VertexTransform,
  &_swigt__p_WallAvoidanceFunction,
  &_swigt__p_WanderInfo,
  &_swigt__p_WeightedSteeringBehavior,
  &_swigt__p_WeightedSteeringBehaviorInfo,
  &_swigt__p_WorldPhysics,
  &_swigt__p_WorldPhysicsInfo,
  &_swigt__p_btActionInterface,
  &_swigt__p_btAlignedObjectArrayT_BaseCamera_p_t,
  &_swigt__p_btAlignedObjectArrayT_BaseCollisionFilterBehavior_p_t,
  &_swigt__p_btAlignedObjectArrayT_BaseCollisionResponseBehavior_p_t,
  &_swigt__p_btAlignedObjectArrayT_BaseEntityAnimationController_p_t,
  &_swigt__p_btAlignedObjectArrayT_BaseEntitySteeringBehavior_p_t,
  &_swigt__p_btAlignedObjectArrayT_BaseEntity_p_t,
  &_swigt__p_btAlignedObjectArrayT_BaseParticleEmitterBehavior_p_t,
  &_swigt__p_btAlignedObjectArrayT_BaseTextViewObject_p_t,
  &_swigt__p_btAlignedObjectArrayT_BaseTextureBehavior_p_t,
  &_swigt__p_btAlignedObjectArrayT_BaseTimer_p_t,
  &_swigt__p_btAlignedObjectArrayT_BaseUpdateBehavior_p_t,
  &_swigt__p_btAlignedObjectArrayT_EntityStateMachine_p_t,
  &_swigt__p_btAlignedObjectArrayT_ShaderProgramHandleWrapper_p_t,
  &_swigt__p_btAlignedObjectArrayT_bool_t,
  &_swigt__p_btAlignedObjectArrayT_btBroadphaseInterface_p_t,
  &_swigt__p_btAlignedObjectArrayT_btBroadphasePair_t,
  &_swigt__p_btAlignedObjectArrayT_btBvhSubtreeInfo_t,
  &_swigt__p_btAlignedObjectArrayT_btCollisionObject_const_p_t,
  &_swigt__p_btAlignedObjectArrayT_btCollisionObject_p_t,
  &_swigt__p_btAlignedObjectArrayT_btCollisionShapeWrapper_p_t,
  &_swigt__p_btAlignedObjectArrayT_btDbvtProxy_p_t,
  &_swigt__p_btAlignedObjectArrayT_btIndexedMesh_t,
  &_swigt__p_btAlignedObjectArrayT_btOptimizedBvhNode_t,
  &_swigt__p_btAlignedObjectArrayT_btPersistentManifold_p_t,
  &_swigt__p_btAlignedObjectArrayT_btQuantizedBvhNode_t,
  &_swigt__p_btAlignedObjectArrayT_btSoftBody__Anchor_t,
  &_swigt__p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t,
  &_swigt__p_btAlignedObjectArrayT_btSoftBody__Face_t,
  &_swigt__p_btAlignedObjectArrayT_btSoftBody__Joint_p_t,
  &_swigt__p_btAlignedObjectArrayT_btSoftBody__Link_t,
  &_swigt__p_btAlignedObjectArrayT_btSoftBody__Material_p_t,
  &_swigt__p_btAlignedObjectArrayT_btSoftBody__Node_t,
  &_swigt__p_btAlignedObjectArrayT_btSoftBody__Note_t,
  &_swigt__p_btAlignedObjectArrayT_btSoftBody__RContact_t,
  &_swigt__p_btAlignedObjectArrayT_btSoftBody__SContact_t,
  &_swigt__p_btAlignedObjectArrayT_btSoftBody__Tetra_t,
  &_swigt__p_btAlignedObjectArrayT_btSoftBody_p_t,
  &_swigt__p_btAlignedObjectArrayT_btSolverConstraint_t,
  &_swigt__p_btAlignedObjectArrayT_btVector3_t,
  &_swigt__p_btAlignedObjectArrayT_float_t,
  &_swigt__p_btAlignedObjectArrayT_int_t,
  &_swigt__p_btAlignedObjectArrayT_long_long_t,
  &_swigt__p_btBU_Simplex1to4,
  &_swigt__p_btBoxShape,
  &_swigt__p_btBroadphaseInterface,
  &_swigt__p_btBroadphasePair,
  &_swigt__p_btBroadphaseProxy,
  &_swigt__p_btBvhTriangleMeshShape,
  &_swigt__p_btCapsuleShape,
  &_swigt__p_btCapsuleShapeX,
  &_swigt__p_btCapsuleShapeZ,
  &_swigt__p_btCollisionAlgorithmCreateFunc,
  &_swigt__p_btCollisionConfiguration,
  &_swigt__p_btCollisionDispatcher,
  &_swigt__p_btCollisionObject,
  &_swigt__p_btCollisionObjectWrapper,
  &_swigt__p_btCollisionShape,
  &_swigt__p_btCollisionShapeWrapper,
  &_swigt__p_btCollisionWorld,
  &_swigt__p_btCollisionWorld__ConvexResultCallback,
  &_swigt__p_btCollisionWorld__RayResultCallback,
  &_swigt__p_btCompoundShape,
  &_swigt__p_btConcaveShape,
  &_swigt__p_btConeShape,
  &_swigt__p_btConeShapeX,
  &_swigt__p_btConeShapeZ,
  &_swigt__p_btConstraintRow,
  &_swigt__p_btConstraintSolver,
  &_swigt__p_btConvexHullShape,
  &_swigt__p_btConvexInternalAabbCachingShape,
  &_swigt__p_btConvexInternalShape,
  &_swigt__p_btConvexShape,
  &_swigt__p_btConvexTriangleMeshShape,
  &_swigt__p_btCylinderShape,
  &_swigt__p_btCylinderShapeX,
  &_swigt__p_btCylinderShapeZ,
  &_swigt__p_btDbvt,
  &_swigt__p_btDbvtAabbMm,
  &_swigt__p_btDbvtBroadphase,
  &_swigt__p_btDbvtNode,
  &_swigt__p_btDbvtProxy,
  &_swigt__p_btDefaultCollisionConfiguration,
  &_swigt__p_btDefaultCollisionConstructionInfo,
  &_swigt__p_btDefaultSerializer,
  &_swigt__p_btDiscreteDynamicsWorld,
  &_swigt__p_btDispatcher,
  &_swigt__p_btDynamicsWorld,
  &_swigt__p_btEmptyShape,
  &_swigt__p_btGhostObject,
  &_swigt__p_btGhostPairCallback,
  &_swigt__p_btGjkEpaSolver2,
  &_swigt__p_btGjkEpaSolver2__sResults,
  &_swigt__p_btHashMapT_btHashInt_btTriangleInfo_t,
  &_swigt__p_btHashedOverlappingPairCache,
  &_swigt__p_btIDebugDraw,
  &_swigt__p_btManifoldPoint,
  &_swigt__p_btMatrix3x3,
  &_swigt__p_btMultiSapBroadphase,
  &_swigt__p_btMultiSphereShape,
  &_swigt__p_btNullPairCache,
  &_swigt__p_btOverlapFilterCallback,
  &_swigt__p_btOverlappingPairCache,
  &_swigt__p_btOverlappingPairCallback,
  &_swigt__p_btPairCachingGhostObject,
  &_swigt__p_btPolyhedralConvexAabbCachingShape,
  &_swigt__p_btPolyhedralConvexShape,
  &_swigt__p_btQuaternion,
  &_swigt__p_btRaycastVehicle,
  &_swigt__p_btRigidBody,
  &_swigt__p_btRigidBodyForceWrapper,
  &_swigt__p_btScaledBvhTriangleMeshShape,
  &_swigt__p_btSequentialImpulseConstraintSolver,
  &_swigt__p_btSerializer,
  &_swigt__p_btSimpleBroadphase,
  &_swigt__p_btSimpleBroadphaseProxy,
  &_swigt__p_btSimpleDynamicsWorld,
  &_swigt__p_btSoftBody,
  &_swigt__p_btSoftBodyRigidBodyCollisionConfiguration,
  &_swigt__p_btSoftBodySolver,
  &_swigt__p_btSoftBodyWorldInfo,
  &_swigt__p_btSoftBody__AJoint__Specs,
  &_swigt__p_btSoftBody__Body,
  &_swigt__p_btSoftBody__Cluster,
  &_swigt__p_btSoftBody__Config,
  &_swigt__p_btSoftBody__Face,
  &_swigt__p_btSoftBody__ImplicitFn,
  &_swigt__p_btSoftBody__Impulse,
  &_swigt__p_btSoftBody__LJoint__Specs,
  &_swigt__p_btSoftBody__Link,
  &_swigt__p_btSoftBody__Material,
  &_swigt__p_btSoftBody__Node,
  &_swigt__p_btSoftBody__Pose,
  &_swigt__p_btSoftBody__SolverState,
  &_swigt__p_btSoftBody__eFeature___,
  &_swigt__p_btSoftBody__ePSolver___,
  &_swigt__p_btSoftBody__eSolverPresets___,
  &_swigt__p_btSoftBody__eVSolver___,
  &_swigt__p_btSoftBody__sCti,
  &_swigt__p_btSoftBody__sRayCast,
  &_swigt__p_btSoftRigidDynamicsWorld,
  &_swigt__p_btSortedOverlappingPairCache,
  &_swigt__p_btSparseSdfT_3_t,
  &_swigt__p_btSphereShape,
  &_swigt__p_btStaticPlaneShape,
  &_swigt__p_btTransform,
  &_swigt__p_btTriangleMeshShape,
  &_swigt__p_btUniformScalingShape,
  &_swigt__p_btVector2,
  &_swigt__p_btVector3,
  &_swigt__p_btVector4,
  &_swigt__p_char,
  &_swigt__p_f_p_btSoftBody_float__void,
  &_swigt__p_f_p_btSoftBody_float_float__void,
  &_swigt__p_f_p_void__void,
  &_swigt__p_f_size_t__p_void,
  &_swigt__p_f_size_t_int__p_void,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_p_btSoftBody,
  &_swigt__p_p_char,
  &_swigt__p_short,
  &_swigt__p_std__pairT_std__string_std__string_t,
  &_swigt__p_std__string,
  &_swigt__p_tAnchorArray,
  &_swigt__p_tClusterArray,
  &_swigt__p_tFaceArray,
  &_swigt__p_tJointArray,
  &_swigt__p_tLeafArray,
  &_swigt__p_tLinkArray,
  &_swigt__p_tMaterialArray,
  &_swigt__p_tNodeArray,
  &_swigt__p_tNoteArray,
  &_swigt__p_tPSolverArray,
  &_swigt__p_tRContactArray,
  &_swigt__p_tSContactArray,
  &_swigt__p_tScalarArray,
  &_swigt__p_tSoftBodyArray,
  &_swigt__p_tTetraArray,
  &_swigt__p_tVSolverArray,
  &_swigt__p_tVector3Array,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_AbstractBehaviorT_BaseEntity_t[] = {  {&_swigt__p_BaseEntityAnimationController, _p_BaseEntityAnimationControllerTo_p_AbstractBehaviorT_BaseEntity_t, 0, 0},  {&_swigt__p_AnimationController2DTest, _p_AnimationController2DTestTo_p_AbstractBehaviorT_BaseEntity_t, 0, 0},  {&_swigt__p_BaseCollisionFilterBehavior, _p_BaseCollisionFilterBehaviorTo_p_AbstractBehaviorT_BaseEntity_t, 0, 0},  {&_swigt__p_BaseCollisionResponseBehavior, _p_BaseCollisionResponseBehaviorTo_p_AbstractBehaviorT_BaseEntity_t, 0, 0},  {&_swigt__p_BaseParticleEmitterBehavior, _p_BaseParticleEmitterBehaviorTo_p_AbstractBehaviorT_BaseEntity_t, 0, 0},  {&_swigt__p_BaseUpdateBehavior, _p_BaseUpdateBehaviorTo_p_AbstractBehaviorT_BaseEntity_t, 0, 0},  {&_swigt__p_AbstractBehaviorT_BaseEntity_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractBehaviorT_BaseViewObject_t[] = {  {&_swigt__p_BaseTextureBehavior, _p_BaseTextureBehaviorTo_p_AbstractBehaviorT_BaseViewObject_t, 0, 0},  {&_swigt__p_AbstractBehaviorT_BaseViewObject_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractBehaviorT_SteeringEntity_t[] = {  {&_swigt__p_BaseEntitySteeringBehavior, _p_BaseEntitySteeringBehaviorTo_p_AbstractBehaviorT_SteeringEntity_t, 0, 0},  {&_swigt__p_WeightedSteeringBehavior, _p_WeightedSteeringBehaviorTo_p_AbstractBehaviorT_SteeringEntity_t, 0, 0},  {&_swigt__p_AbstractBehaviorT_SteeringEntity_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractFactoryObject[] = {  {&_swigt__p_BaseCollisionResponseBehavior, _p_BaseCollisionResponseBehaviorTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_BaseCollisionFilterBehavior, _p_BaseCollisionFilterBehaviorTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_BaseEntitySteeringBehavior, _p_BaseEntitySteeringBehaviorTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_BaseParticleEmitterBehavior, _p_BaseParticleEmitterBehaviorTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_BaseTextureBehavior, _p_BaseTextureBehaviorTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_BaseUpdateBehavior, _p_BaseUpdateBehaviorTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_WeightedSteeringBehavior, _p_WeightedSteeringBehaviorTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_BaseCamera, _p_BaseCameraTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_BaseGameState, _p_BaseGameStateTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_BaseEntityState, _p_BaseEntityStateTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_AnimationController2DTest, _p_AnimationController2DTestTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_CameraSteeringEntity, _p_CameraSteeringEntityTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_CameraPhysicsEntity, _p_CameraPhysicsEntityTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_CameraEntity, _p_CameraEntityTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_SteeringEntity, _p_SteeringEntityTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_BaseEntity, _p_BaseEntityTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_Clock, _p_ClockTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_GhostEntity, _p_GhostEntityTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_RigidEntity, _p_RigidEntityTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_SoftEntity, _p_SoftEntityTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_BaseTimer, _p_BaseTimerTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_Timer, _p_TimerTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_BaseEntityAnimationController, _p_BaseEntityAnimationControllerTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_AbstractFactoryObject, 0, 0, 0},  {&_swigt__p_BaseTextViewObject, _p_BaseTextViewObjectTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_StopWatch, _p_StopWatchTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_ShaderProgramHandleWrapper, _p_ShaderProgramHandleWrapperTo_p_AbstractFactoryObject, 0, 0},  {&_swigt__p_btCollisionShapeWrapper, _p_btCollisionShapeWrapperTo_p_AbstractFactoryObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t[] = {  {&_swigt__p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t, 0, 0, 0},  {&_swigt__p_AnimationControllerFactory, _p_AnimationControllerFactoryTo_p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t[] = {  {&_swigt__p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t, 0, 0, 0},  {&_swigt__p_CameraFactory, _p_CameraFactoryTo_p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t[] = {  {&_swigt__p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t, 0, 0, 0},  {&_swigt__p_CollisionFilterBehaviorFactory, _p_CollisionFilterBehaviorFactoryTo_p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t[] = {  {&_swigt__p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t, 0, 0, 0},  {&_swigt__p_CollisionResponseBehaviorFactory, _p_CollisionResponseBehaviorFactoryTo_p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t[] = {  {&_swigt__p_CollisionShapeFactory, _p_CollisionShapeFactoryTo_p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t, 0, 0},  {&_swigt__p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t[] = {  {&_swigt__p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t, 0, 0, 0},  {&_swigt__p_EntityFactory, _p_EntityFactoryTo_p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t[] = {  {&_swigt__p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t, 0, 0, 0},  {&_swigt__p_EntityStateMachineFactory, _p_EntityStateMachineFactoryTo_p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t[] = {  {&_swigt__p_FrameCounter, _p_FrameCounterTo_p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t, 0, 0},  {&_swigt__p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t[] = {  {&_swigt__p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t, 0, 0, 0},  {&_swigt__p_ParticleEmitterBehaviorFactory, _p_ParticleEmitterBehaviorFactoryTo_p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t[] = {  {&_swigt__p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t, 0, 0, 0},  {&_swigt__p_ShaderFactory, _p_ShaderFactoryTo_p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t[] = {  {&_swigt__p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t, 0, 0, 0},  {&_swigt__p_SteeringBehaviorFactory, _p_SteeringBehaviorFactoryTo_p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t[] = {  {&_swigt__p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t, 0, 0, 0},  {&_swigt__p_TextViewObjectFactory, _p_TextViewObjectFactoryTo_p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t[] = {  {&_swigt__p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t, 0, 0, 0},  {&_swigt__p_TextureBehaviorFactory, _p_TextureBehaviorFactoryTo_p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t[] = {  {&_swigt__p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t, 0, 0, 0},  {&_swigt__p_UpdateBehaviorFactory, _p_UpdateBehaviorFactoryTo_p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractSingletonT_AnimationControllerFactory_t[] = {  {&_swigt__p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t, _p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_tTo_p_AbstractSingletonT_AnimationControllerFactory_t, 0, 0},  {&_swigt__p_AnimationControllerFactory, _p_AnimationControllerFactoryTo_p_AbstractSingletonT_AnimationControllerFactory_t, 0, 0},  {&_swigt__p_AbstractSingletonT_AnimationControllerFactory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractSingletonT_CameraFactory_t[] = {  {&_swigt__p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t, _p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_tTo_p_AbstractSingletonT_CameraFactory_t, 0, 0},  {&_swigt__p_CameraFactory, _p_CameraFactoryTo_p_AbstractSingletonT_CameraFactory_t, 0, 0},  {&_swigt__p_AbstractSingletonT_CameraFactory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractSingletonT_CollisionFilterBehaviorFactory_t[] = {  {&_swigt__p_AbstractSingletonT_CollisionFilterBehaviorFactory_t, 0, 0, 0},  {&_swigt__p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t, _p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_tTo_p_AbstractSingletonT_CollisionFilterBehaviorFactory_t, 0, 0},  {&_swigt__p_CollisionFilterBehaviorFactory, _p_CollisionFilterBehaviorFactoryTo_p_AbstractSingletonT_CollisionFilterBehaviorFactory_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractSingletonT_CollisionResponseBehaviorFactory_t[] = {  {&_swigt__p_AbstractSingletonT_CollisionResponseBehaviorFactory_t, 0, 0, 0},  {&_swigt__p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t, _p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_tTo_p_AbstractSingletonT_CollisionResponseBehaviorFactory_t, 0, 0},  {&_swigt__p_CollisionResponseBehaviorFactory, _p_CollisionResponseBehaviorFactoryTo_p_AbstractSingletonT_CollisionResponseBehaviorFactory_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractSingletonT_CollisionShapeFactory_t[] = {  {&_swigt__p_CollisionShapeFactory, _p_CollisionShapeFactoryTo_p_AbstractSingletonT_CollisionShapeFactory_t, 0, 0},  {&_swigt__p_AbstractSingletonT_CollisionShapeFactory_t, 0, 0, 0},  {&_swigt__p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t, _p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_tTo_p_AbstractSingletonT_CollisionShapeFactory_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractSingletonT_EntityFactory_t[] = {  {&_swigt__p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t, _p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_tTo_p_AbstractSingletonT_EntityFactory_t, 0, 0},  {&_swigt__p_EntityFactory, _p_EntityFactoryTo_p_AbstractSingletonT_EntityFactory_t, 0, 0},  {&_swigt__p_AbstractSingletonT_EntityFactory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractSingletonT_EntityStateMachineFactory_t[] = {  {&_swigt__p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t, _p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_tTo_p_AbstractSingletonT_EntityStateMachineFactory_t, 0, 0},  {&_swigt__p_EntityStateMachineFactory, _p_EntityStateMachineFactoryTo_p_AbstractSingletonT_EntityStateMachineFactory_t, 0, 0},  {&_swigt__p_AbstractSingletonT_EntityStateMachineFactory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractSingletonT_GLDebugDrawer_t[] = {  {&_swigt__p_AbstractSingletonT_GLDebugDrawer_t, 0, 0, 0},  {&_swigt__p_GLDebugDrawer, _p_GLDebugDrawerTo_p_AbstractSingletonT_GLDebugDrawer_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractSingletonT_LuaVM_t[] = {  {&_swigt__p_AbstractSingletonT_LuaVM_t, 0, 0, 0},  {&_swigt__p_LuaVM, _p_LuaVMTo_p_AbstractSingletonT_LuaVM_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractSingletonT_MazeCreator_t[] = {  {&_swigt__p_MazeCreator, _p_MazeCreatorTo_p_AbstractSingletonT_MazeCreator_t, 0, 0},  {&_swigt__p_AbstractSingletonT_MazeCreator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractSingletonT_MessageDispatcher_t[] = {  {&_swigt__p_AbstractSingletonT_MessageDispatcher_t, 0, 0, 0},  {&_swigt__p_MessageDispatcher, _p_MessageDispatcherTo_p_AbstractSingletonT_MessageDispatcher_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractSingletonT_ParticleEmitterBehaviorFactory_t[] = {  {&_swigt__p_AbstractSingletonT_ParticleEmitterBehaviorFactory_t, 0, 0, 0},  {&_swigt__p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t, _p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_tTo_p_AbstractSingletonT_ParticleEmitterBehaviorFactory_t, 0, 0},  {&_swigt__p_ParticleEmitterBehaviorFactory, _p_ParticleEmitterBehaviorFactoryTo_p_AbstractSingletonT_ParticleEmitterBehaviorFactory_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractSingletonT_ShaderFactory_t[] = {  {&_swigt__p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t, _p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_tTo_p_AbstractSingletonT_ShaderFactory_t, 0, 0},  {&_swigt__p_ShaderFactory, _p_ShaderFactoryTo_p_AbstractSingletonT_ShaderFactory_t, 0, 0},  {&_swigt__p_AbstractSingletonT_ShaderFactory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractSingletonT_SteeringBehaviorFactory_t[] = {  {&_swigt__p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t, _p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_tTo_p_AbstractSingletonT_SteeringBehaviorFactory_t, 0, 0},  {&_swigt__p_SteeringBehaviorFactory, _p_SteeringBehaviorFactoryTo_p_AbstractSingletonT_SteeringBehaviorFactory_t, 0, 0},  {&_swigt__p_AbstractSingletonT_SteeringBehaviorFactory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractSingletonT_TextViewObjectFactory_t[] = {  {&_swigt__p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t, _p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_tTo_p_AbstractSingletonT_TextViewObjectFactory_t, 0, 0},  {&_swigt__p_TextViewObjectFactory, _p_TextViewObjectFactoryTo_p_AbstractSingletonT_TextViewObjectFactory_t, 0, 0},  {&_swigt__p_AbstractSingletonT_TextViewObjectFactory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractSingletonT_TextureBehaviorFactory_t[] = {  {&_swigt__p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t, _p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_tTo_p_AbstractSingletonT_TextureBehaviorFactory_t, 0, 0},  {&_swigt__p_TextureBehaviorFactory, _p_TextureBehaviorFactoryTo_p_AbstractSingletonT_TextureBehaviorFactory_t, 0, 0},  {&_swigt__p_AbstractSingletonT_TextureBehaviorFactory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractSingletonT_UpdateBehaviorFactory_t[] = {  {&_swigt__p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t, _p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_tTo_p_AbstractSingletonT_UpdateBehaviorFactory_t, 0, 0},  {&_swigt__p_UpdateBehaviorFactory, _p_UpdateBehaviorFactoryTo_p_AbstractSingletonT_UpdateBehaviorFactory_t, 0, 0},  {&_swigt__p_AbstractSingletonT_UpdateBehaviorFactory_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractStateT_BaseEntity_t[] = {  {&_swigt__p_BaseEntityState, _p_BaseEntityStateTo_p_AbstractStateT_BaseEntity_t, 0, 0},  {&_swigt__p_AbstractStateT_BaseEntity_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AbstractStateT_void_t[] = {  {&_swigt__p_AbstractStateT_void_t, 0, 0, 0},  {&_swigt__p_BaseGameState, _p_BaseGameStateTo_p_AbstractStateT_void_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AnimationController2DTest[] = {  {&_swigt__p_AnimationController2DTest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AnimationControllerFactory[] = {  {&_swigt__p_AnimationControllerFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AnimationControllerInfo[] = {  {&_swigt__p_AnimationControllerInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseCamera[] = {  {&_swigt__p_CameraEntity, _p_CameraEntityTo_p_BaseCamera, 0, 0},  {&_swigt__p_CameraPhysicsEntity, _p_CameraPhysicsEntityTo_p_BaseCamera, 0, 0},  {&_swigt__p_CameraSteeringEntity, _p_CameraSteeringEntityTo_p_BaseCamera, 0, 0},  {&_swigt__p_BaseCamera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseCameraInfo[] = {  {&_swigt__p_BaseCameraInfo, 0, 0, 0},  {&_swigt__p_CameraEntityInfo, _p_CameraEntityInfoTo_p_BaseCameraInfo, 0, 0},  {&_swigt__p_CameraPhysicsEntityInfo, _p_CameraPhysicsEntityInfoTo_p_BaseCameraInfo, 0, 0},  {&_swigt__p_CameraSteeringEntityInfo, _p_CameraSteeringEntityInfoTo_p_BaseCameraInfo, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseCollisionFilterBehavior[] = {  {&_swigt__p_BaseCollisionFilterBehavior, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseCollisionResponseBehavior[] = {  {&_swigt__p_BaseCollisionResponseBehavior, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseEntity[] = {  {&_swigt__p_GhostEntity, _p_GhostEntityTo_p_BaseEntity, 0, 0},  {&_swigt__p_RigidEntity, _p_RigidEntityTo_p_BaseEntity, 0, 0},  {&_swigt__p_SoftEntity, _p_SoftEntityTo_p_BaseEntity, 0, 0},  {&_swigt__p_BaseEntity, 0, 0, 0},  {&_swigt__p_SteeringEntity, _p_SteeringEntityTo_p_BaseEntity, 0, 0},  {&_swigt__p_CameraSteeringEntity, _p_CameraSteeringEntityTo_p_BaseEntity, 0, 0},  {&_swigt__p_CameraPhysicsEntity, _p_CameraPhysicsEntityTo_p_BaseEntity, 0, 0},  {&_swigt__p_CameraEntity, _p_CameraEntityTo_p_BaseEntity, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseEntityAnimationController[] = {  {&_swigt__p_BaseEntityAnimationController, 0, 0, 0},  {&_swigt__p_AnimationController2DTest, _p_AnimationController2DTestTo_p_BaseEntityAnimationController, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseEntityInfo[] = {  {&_swigt__p_BaseEntityInfo, 0, 0, 0},  {&_swigt__p_RigidEntityInfo, _p_RigidEntityInfoTo_p_BaseEntityInfo, 0, 0},  {&_swigt__p_SteeringEntityInfo, _p_SteeringEntityInfoTo_p_BaseEntityInfo, 0, 0},  {&_swigt__p_CameraSteeringEntityInfo, _p_CameraSteeringEntityInfoTo_p_BaseEntityInfo, 0, 0},  {&_swigt__p_CameraPhysicsEntityInfo, _p_CameraPhysicsEntityInfoTo_p_BaseEntityInfo, 0, 0},  {&_swigt__p_SoftEntityInfo, _p_SoftEntityInfoTo_p_BaseEntityInfo, 0, 0},  {&_swigt__p_GhostEntityInfo, _p_GhostEntityInfoTo_p_BaseEntityInfo, 0, 0},  {&_swigt__p_CameraEntityInfo, _p_CameraEntityInfoTo_p_BaseEntityInfo, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseEntityState[] = {  {&_swigt__p_BaseEntityState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseEntitySteeringBehavior[] = {  {&_swigt__p_BaseEntitySteeringBehavior, 0, 0, 0},  {&_swigt__p_WeightedSteeringBehavior, _p_WeightedSteeringBehaviorTo_p_BaseEntitySteeringBehavior, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseGameState[] = {  {&_swigt__p_BaseGameState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseParticleEmitterBehavior[] = {  {&_swigt__p_BaseParticleEmitterBehavior, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseSpriteViewInfo[] = {  {&_swigt__p_BaseSpriteViewInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseTextViewInfo[] = {  {&_swigt__p_BaseTextViewInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseTextViewObject[] = {  {&_swigt__p_BaseTextViewObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseTextureBehavior[] = {  {&_swigt__p_BaseTextureBehavior, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseTimer[] = {  {&_swigt__p_Timer, _p_TimerTo_p_BaseTimer, 0, 0},  {&_swigt__p_Clock, _p_ClockTo_p_BaseTimer, 0, 0},  {&_swigt__p_BaseTimer, 0, 0, 0},  {&_swigt__p_StopWatch, _p_StopWatchTo_p_BaseTimer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseUpdateBehavior[] = {  {&_swigt__p_BaseUpdateBehavior, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseViewObject[] = {  {&_swigt__p_BaseViewObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BaseViewObjectInfo[] = {  {&_swigt__p_BaseViewObjectInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CameraEntity[] = {  {&_swigt__p_CameraEntity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CameraEntityInfo[] = {  {&_swigt__p_CameraEntityInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CameraFactory[] = {  {&_swigt__p_CameraFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CameraPhysicsEntity[] = {  {&_swigt__p_CameraPhysicsEntity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CameraPhysicsEntityInfo[] = {  {&_swigt__p_CameraPhysicsEntityInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CameraSteeringEntity[] = {  {&_swigt__p_CameraSteeringEntity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CameraSteeringEntityInfo[] = {  {&_swigt__p_CameraSteeringEntityInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Clock[] = {  {&_swigt__p_Clock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollisionFilterBehaviorFactory[] = {  {&_swigt__p_CollisionFilterBehaviorFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollisionFilterBehaviorInfo[] = {  {&_swigt__p_CollisionFilterBehaviorInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollisionResponseBehaviorFactory[] = {  {&_swigt__p_CollisionResponseBehaviorFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollisionResponseBehaviorInfo[] = {  {&_swigt__p_CollisionResponseBehaviorInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollisionShapeFactory[] = {  {&_swigt__p_CollisionShapeFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollisionShapeInfo[] = {  {&_swigt__p_CollisionShapeInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CustomFilterCallback[] = {  {&_swigt__p_CustomFilterCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DeviceAccelerometer[] = {  {&_swigt__p_DeviceAccelerometer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DeviceAttitude[] = {  {&_swigt__p_DeviceAttitude, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DeviceGesture[] = {  {&_swigt__p_DeviceGesture, 0, 0, 0},  {&_swigt__p_DeviceTapGesture, _p_DeviceTapGestureTo_p_DeviceGesture, 0, 0},  {&_swigt__p_DevicePinchGesture, _p_DevicePinchGestureTo_p_DeviceGesture, 0, 0},  {&_swigt__p_DevicePanGesture, _p_DevicePanGestureTo_p_DeviceGesture, 0, 0},  {&_swigt__p_DeviceSwipeGesture, _p_DeviceSwipeGestureTo_p_DeviceGesture, 0, 0},  {&_swigt__p_DeviceRotationGesture, _p_DeviceRotationGestureTo_p_DeviceGesture, 0, 0},  {&_swigt__p_DeviceLongPressGesture, _p_DeviceLongPressGestureTo_p_DeviceGesture, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DeviceGyro[] = {  {&_swigt__p_DeviceGyro, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DeviceInput[] = {  {&_swigt__p_DeviceInput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DeviceInputTime[] = {  {&_swigt__p_DeviceMotion, _p_DeviceMotionTo_p_DeviceInputTime, 0, 0},  {&_swigt__p_DeviceInputTime, 0, 0, 0},  {&_swigt__p_DeviceTouch, _p_DeviceTouchTo_p_DeviceInputTime, 0, 0},  {&_swigt__p_DeviceAccelerometer, _p_DeviceAccelerometerTo_p_DeviceInputTime, 0, 0},  {&_swigt__p_DeviceGyro, _p_DeviceGyroTo_p_DeviceInputTime, 0, 0},  {&_swigt__p_DeviceMagnetometer, _p_DeviceMagnetometerTo_p_DeviceInputTime, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DeviceLongPressGesture[] = {  {&_swigt__p_DeviceLongPressGesture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DeviceMagnetometer[] = {  {&_swigt__p_DeviceMagnetometer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DeviceMotion[] = {  {&_swigt__p_DeviceMotion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DevicePanGesture[] = {  {&_swigt__p_DevicePanGesture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DevicePinchGesture[] = {  {&_swigt__p_DevicePinchGesture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DeviceRotationGesture[] = {  {&_swigt__p_DeviceRotationGesture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DeviceSwipeGesture[] = {  {&_swigt__p_DeviceSwipeGesture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DeviceTapGesture[] = {  {&_swigt__p_DeviceTapGesture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DeviceTouch[] = {  {&_swigt__p_DeviceTouch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EntityFactory[] = {  {&_swigt__p_EntityFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EntityStateMachine[] = {  {&_swigt__p_EntityStateMachine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EntityStateMachineFactory[] = {  {&_swigt__p_EntityStateMachineFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EntityStateMachineInfo[] = {  {&_swigt__p_EntityStateMachineInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FollowPathInfo[] = {  {&_swigt__p_FollowPathInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FrameCounter[] = {  {&_swigt__p_FrameCounter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLDebugDrawer[] = {  {&_swigt__p_GLDebugDrawer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLKMatrix3[] = {  {&_swigt__p_GLKMatrix3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLKMatrix4[] = {  {&_swigt__p_GLKMatrix4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLenum[] = {  {&_swigt__p_GLenum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLuint[] = {  {&_swigt__p_GLuint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GhostEntity[] = {  {&_swigt__p_GhostEntity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GhostEntityInfo[] = {  {&_swigt__p_GhostEntityInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImageFileEditor[] = {  {&_swigt__p_ImageFileEditor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LocalizedTextViewObjectStruct[] = {  {&_swigt__p_LocalizedTextViewObjectStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaVM[] = {  {&_swigt__p_LuaVM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MazeCreator[] = {  {&_swigt__p_MazeCreator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MazeGeneric[] = {  {&_swigt__p_MazePNG, _p_MazePNGTo_p_MazeGeneric, 0, 0},  {&_swigt__p_MazeHTML, _p_MazeHTMLTo_p_MazeGeneric, 0, 0},  {&_swigt__p_MazeGeneric, 0, 0, 0},  {&_swigt__p_TextureMazeCreator, _p_TextureMazeCreatorTo_p_MazeGeneric, 0, 0},  {&_swigt__p_MeshMazeCreator, _p_MeshMazeCreatorTo_p_MazeGeneric, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MazeHTML[] = {  {&_swigt__p_MazeHTML, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MazeNode[] = {  {&_swigt__p_MazeNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MazeNodeType_e[] = {  {&_swigt__p_MazeNodeType_e, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MazeNodeWall_e[] = {  {&_swigt__p_MazeNodeWall_e, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MazePNG[] = {  {&_swigt__p_MazePNG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MazeRenderType_e[] = {  {&_swigt__p_MazeRenderType_e, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MeshMazeCreator[] = {  {&_swigt__p_MeshMazeCreator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MessageDispatcher[] = {  {&_swigt__p_MessageDispatcher, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NSInteger[] = {  {&_swigt__p_NSInteger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NSTimeInterval[] = {  {&_swigt__p_NSTimeInterval, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OcclusionBuffer[] = {  {&_swigt__p_OcclusionBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PHY_ScalarType[] = {  {&_swigt__p_PHY_ScalarType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParticleAttributeTransform[] = {  {&_swigt__p_ParticleAttributeTransform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParticleEmitterBehaviorFactory[] = {  {&_swigt__p_ParticleEmitterBehaviorFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParticleEmitterBehaviorInfo[] = {  {&_swigt__p_ParticleEmitterBehaviorInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Path[] = {  {&_swigt__p_Path, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PathInfo[] = {  {&_swigt__p_PathInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RigidEntity[] = {  {&_swigt__p_RigidEntity, 0, 0, 0},  {&_swigt__p_SteeringEntity, _p_SteeringEntityTo_p_RigidEntity, 0, 0},  {&_swigt__p_CameraSteeringEntity, _p_CameraSteeringEntityTo_p_RigidEntity, 0, 0},  {&_swigt__p_CameraPhysicsEntity, _p_CameraPhysicsEntityTo_p_RigidEntity, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RigidEntityInfo[] = {  {&_swigt__p_RigidEntityInfo, 0, 0, 0},  {&_swigt__p_SteeringEntityInfo, _p_SteeringEntityInfoTo_p_RigidEntityInfo, 0, 0},  {&_swigt__p_CameraSteeringEntityInfo, _p_CameraSteeringEntityInfoTo_p_RigidEntityInfo, 0, 0},  {&_swigt__p_CameraPhysicsEntityInfo, _p_CameraPhysicsEntityInfoTo_p_RigidEntityInfo, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SceneRenderer[] = {  {&_swigt__p_SceneRenderer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ShaderFactory[] = {  {&_swigt__p_ShaderFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ShaderProgramHandleWrapper[] = {  {&_swigt__p_ShaderProgramHandleWrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoftEntity[] = {  {&_swigt__p_SoftEntity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoftEntityInfo[] = {  {&_swigt__p_SoftEntityInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SteeringBehaviorFactory[] = {  {&_swigt__p_SteeringBehaviorFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SteeringBehaviorInfo[] = {  {&_swigt__p_SteeringBehaviorInfo, 0, 0, 0},  {&_swigt__p_WeightedSteeringBehaviorInfo, _p_WeightedSteeringBehaviorInfoTo_p_SteeringBehaviorInfo, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SteeringEntity[] = {  {&_swigt__p_SteeringEntity, 0, 0, 0},  {&_swigt__p_CameraSteeringEntity, _p_CameraSteeringEntityTo_p_SteeringEntity, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SteeringEntityInfo[] = {  {&_swigt__p_SteeringEntityInfo, 0, 0, 0},  {&_swigt__p_CameraSteeringEntityInfo, _p_CameraSteeringEntityInfoTo_p_SteeringEntityInfo, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StopWatch[] = {  {&_swigt__p_StopWatch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Telegram[] = {  {&_swigt__p_Telegram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TextInfo[] = {  {&_swigt__p_TextInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TextMetrics[] = {  {&_swigt__p_TextMetrics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TextOrigin[] = {  {&_swigt__p_TextOrigin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TextViewObjectFactory[] = {  {&_swigt__p_TextViewObjectFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TextViewObjectStruct[] = {  {&_swigt__p_TextViewObjectStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TextureBehaviorFactory[] = {  {&_swigt__p_TextureBehaviorFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TextureBehaviorInfo[] = {  {&_swigt__p_TextureBehaviorInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TextureMazeCreator[] = {  {&_swigt__p_TextureMazeCreator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Timer[] = {  {&_swigt__p_Timer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TimerInfo[] = {  {&_swigt__p_TimerInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UpdateBehaviorFactory[] = {  {&_swigt__p_UpdateBehaviorFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UpdateBehaviorInfo[] = {  {&_swigt__p_UpdateBehaviorInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VertexTransform[] = {  {&_swigt__p_VertexTransform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WallAvoidanceFunction[] = {  {&_swigt__p_WallAvoidanceFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WanderInfo[] = {  {&_swigt__p_WanderInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WeightedSteeringBehavior[] = {  {&_swigt__p_WeightedSteeringBehavior, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WeightedSteeringBehaviorInfo[] = {  {&_swigt__p_WeightedSteeringBehaviorInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WorldPhysics[] = {  {&_swigt__p_WorldPhysics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WorldPhysicsInfo[] = {  {&_swigt__p_WorldPhysicsInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btRaycastVehicle[] = {{&_swigt__p_btRaycastVehicle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btActionInterface[] = {  {&_swigt__p_BaseTextureBehavior, _p_BaseTextureBehaviorTo_p_btActionInterface, 0, 0},  {&_swigt__p_BaseParticleEmitterBehavior, _p_BaseParticleEmitterBehaviorTo_p_btActionInterface, 0, 0},  {&_swigt__p_BaseCamera, _p_BaseCameraTo_p_btActionInterface, 0, 0},  {&_swigt__p_btRaycastVehicle, _p_btRaycastVehicleTo_p_btActionInterface, 0, 0},  {&_swigt__p_SteeringEntity, _p_SteeringEntityTo_p_btActionInterface, 0, 0},  {&_swigt__p_BaseEntity, _p_BaseEntityTo_p_btActionInterface, 0, 0},  {&_swigt__p_CameraSteeringEntity, _p_CameraSteeringEntityTo_p_btActionInterface, 0, 0},  {&_swigt__p_CameraPhysicsEntity, _p_CameraPhysicsEntityTo_p_btActionInterface, 0, 0},  {&_swigt__p_CameraEntity, _p_CameraEntityTo_p_btActionInterface, 0, 0},  {&_swigt__p_SoftEntity, _p_SoftEntityTo_p_btActionInterface, 0, 0},  {&_swigt__p_RigidEntity, _p_RigidEntityTo_p_btActionInterface, 0, 0},  {&_swigt__p_GhostEntity, _p_GhostEntityTo_p_btActionInterface, 0, 0},  {&_swigt__p_btActionInterface, 0, 0, 0},  {&_swigt__p_BaseTextViewObject, _p_BaseTextViewObjectTo_p_btActionInterface, 0, 0},  {&_swigt__p_Path, _p_PathTo_p_btActionInterface, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_BaseCamera_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_BaseCamera_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_BaseCollisionFilterBehavior_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_BaseCollisionFilterBehavior_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_BaseCollisionResponseBehavior_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_BaseCollisionResponseBehavior_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_BaseEntityAnimationController_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_BaseEntityAnimationController_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_BaseEntitySteeringBehavior_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_BaseEntitySteeringBehavior_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_BaseEntity_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_BaseEntity_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_BaseParticleEmitterBehavior_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_BaseParticleEmitterBehavior_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_BaseTextViewObject_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_BaseTextViewObject_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_BaseTextureBehavior_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_BaseTextureBehavior_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_BaseTimer_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_BaseTimer_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_BaseUpdateBehavior_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_BaseUpdateBehavior_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_EntityStateMachine_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_EntityStateMachine_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_ShaderProgramHandleWrapper_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_ShaderProgramHandleWrapper_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_bool_t[] = {  {&_swigt__p_btAlignedObjectArrayT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btBroadphaseInterface_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btBroadphaseInterface_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btBroadphasePair_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btBroadphasePair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btBvhSubtreeInfo_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btBvhSubtreeInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btCollisionObject_const_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btCollisionObject_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btCollisionObject_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btCollisionObject_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btCollisionShapeWrapper_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btCollisionShapeWrapper_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btDbvtProxy_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btDbvtProxy_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btIndexedMesh_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btIndexedMesh_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btOptimizedBvhNode_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btOptimizedBvhNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btPersistentManifold_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btPersistentManifold_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btQuantizedBvhNode_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btQuantizedBvhNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btSoftBody__Anchor_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btSoftBody__Anchor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btSoftBody__Face_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btSoftBody__Face_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btSoftBody__Joint_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btSoftBody__Joint_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btSoftBody__Link_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btSoftBody__Link_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btSoftBody__Material_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btSoftBody__Material_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btSoftBody__Node_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btSoftBody__Node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btSoftBody__Note_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btSoftBody__Note_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btSoftBody__RContact_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btSoftBody__RContact_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btSoftBody__SContact_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btSoftBody__SContact_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btSoftBody__Tetra_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btSoftBody__Tetra_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btSoftBody_p_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btSoftBody_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btSolverConstraint_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btSolverConstraint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_btVector3_t[] = {  {&_swigt__p_btAlignedObjectArrayT_btVector3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_float_t[] = {  {&_swigt__p_btAlignedObjectArrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_int_t[] = {  {&_swigt__p_btAlignedObjectArrayT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btAlignedObjectArrayT_long_long_t[] = {  {&_swigt__p_btAlignedObjectArrayT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSimpleBroadphase[] = {{&_swigt__p_btSimpleBroadphase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDbvtBroadphase[] = {{&_swigt__p_btDbvtBroadphase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btMultiSapBroadphase[] = {{&_swigt__p_btMultiSapBroadphase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBroadphaseInterface[] = {  {&_swigt__p_btBroadphaseInterface, 0, 0, 0},  {&_swigt__p_btSimpleBroadphase, _p_btSimpleBroadphaseTo_p_btBroadphaseInterface, 0, 0},  {&_swigt__p_btDbvtBroadphase, _p_btDbvtBroadphaseTo_p_btBroadphaseInterface, 0, 0},  {&_swigt__p_btMultiSapBroadphase, _p_btMultiSapBroadphaseTo_p_btBroadphaseInterface, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBroadphasePair[] = {  {&_swigt__p_btBroadphasePair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSimpleBroadphaseProxy[] = {{&_swigt__p_btSimpleBroadphaseProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDbvtProxy[] = {{&_swigt__p_btDbvtProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBroadphaseProxy[] = {  {&_swigt__p_btBroadphaseProxy, 0, 0, 0},  {&_swigt__p_btSimpleBroadphaseProxy, _p_btSimpleBroadphaseProxyTo_p_btBroadphaseProxy, 0, 0},  {&_swigt__p_btDbvtProxy, _p_btDbvtProxyTo_p_btBroadphaseProxy, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionAlgorithmCreateFunc[] = {  {&_swigt__p_btCollisionAlgorithmCreateFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionConfiguration[] = {  {&_swigt__p_btCollisionConfiguration, 0, 0, 0},  {&_swigt__p_btDefaultCollisionConfiguration, _p_btDefaultCollisionConfigurationTo_p_btCollisionConfiguration, 0, 0},  {&_swigt__p_btSoftBodyRigidBodyCollisionConfiguration, _p_btSoftBodyRigidBodyCollisionConfigurationTo_p_btCollisionConfiguration, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionObject[] = {  {&_swigt__p_btRigidBody, _p_btRigidBodyTo_p_btCollisionObject, 0, 0},  {&_swigt__p_btCollisionObject, 0, 0, 0},  {&_swigt__p_btGhostObject, _p_btGhostObjectTo_p_btCollisionObject, 0, 0},  {&_swigt__p_btPairCachingGhostObject, _p_btPairCachingGhostObjectTo_p_btCollisionObject, 0, 0},  {&_swigt__p_btSoftBody, _p_btSoftBodyTo_p_btCollisionObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionObjectWrapper[] = {  {&_swigt__p_btCollisionObjectWrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCompoundShape[] = {{&_swigt__p_btCompoundShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCapsuleShapeZ[] = {{&_swigt__p_btCapsuleShapeZ, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConeShapeZ[] = {{&_swigt__p_btConeShapeZ, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConeShape[] = {{&_swigt__p_btConeShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCylinderShapeX[] = {{&_swigt__p_btCylinderShapeX, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCapsuleShape[] = {{&_swigt__p_btCapsuleShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSphereShape[] = {{&_swigt__p_btSphereShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConcaveShape[] = {{&_swigt__p_btConcaveShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btStaticPlaneShape[] = {{&_swigt__p_btStaticPlaneShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btMultiSphereShape[] = {{&_swigt__p_btMultiSphereShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexInternalShape[] = {{&_swigt__p_btConvexInternalShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCylinderShapeZ[] = {{&_swigt__p_btCylinderShapeZ, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btPolyhedralConvexAabbCachingShape[] = {{&_swigt__p_btPolyhedralConvexAabbCachingShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexInternalAabbCachingShape[] = {{&_swigt__p_btConvexInternalAabbCachingShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btUniformScalingShape[] = {{&_swigt__p_btUniformScalingShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btEmptyShape[] = {{&_swigt__p_btEmptyShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBU_Simplex1to4[] = {{&_swigt__p_btBU_Simplex1to4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBoxShape[] = {{&_swigt__p_btBoxShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btPolyhedralConvexShape[] = {{&_swigt__p_btPolyhedralConvexShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexTriangleMeshShape[] = {{&_swigt__p_btConvexTriangleMeshShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTriangleMeshShape[] = {{&_swigt__p_btTriangleMeshShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBvhTriangleMeshShape[] = {{&_swigt__p_btBvhTriangleMeshShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btScaledBvhTriangleMeshShape[] = {{&_swigt__p_btScaledBvhTriangleMeshShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCylinderShape[] = {{&_swigt__p_btCylinderShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConeShapeX[] = {{&_swigt__p_btConeShapeX, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCapsuleShapeX[] = {{&_swigt__p_btCapsuleShapeX, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionShape[] = {  {&_swigt__p_btCompoundShape, _p_btCompoundShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btCapsuleShapeZ, _p_btCapsuleShapeZTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btConeShapeZ, _p_btConeShapeZTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btConeShape, _p_btConeShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btCylinderShapeX, _p_btCylinderShapeXTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btCapsuleShape, _p_btCapsuleShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btSphereShape, _p_btSphereShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btConcaveShape, _p_btConcaveShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btStaticPlaneShape, _p_btStaticPlaneShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btMultiSphereShape, _p_btMultiSphereShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btConvexInternalShape, _p_btConvexInternalShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btCylinderShapeZ, _p_btCylinderShapeZTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btPolyhedralConvexAabbCachingShape, _p_btPolyhedralConvexAabbCachingShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btConvexInternalAabbCachingShape, _p_btConvexInternalAabbCachingShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btUniformScalingShape, _p_btUniformScalingShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btCollisionShape, 0, 0, 0},  {&_swigt__p_btEmptyShape, _p_btEmptyShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btBU_Simplex1to4, _p_btBU_Simplex1to4To_p_btCollisionShape, 0, 0},  {&_swigt__p_btBoxShape, _p_btBoxShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btPolyhedralConvexShape, _p_btPolyhedralConvexShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btConvexShape, _p_btConvexShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btConvexTriangleMeshShape, _p_btConvexTriangleMeshShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btTriangleMeshShape, _p_btTriangleMeshShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btBvhTriangleMeshShape, _p_btBvhTriangleMeshShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btScaledBvhTriangleMeshShape, _p_btScaledBvhTriangleMeshShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btCylinderShape, _p_btCylinderShapeTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btConeShapeX, _p_btConeShapeXTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btCapsuleShapeX, _p_btCapsuleShapeXTo_p_btCollisionShape, 0, 0},  {&_swigt__p_btConvexHullShape, _p_btConvexHullShapeTo_p_btCollisionShape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionShapeWrapper[] = {  {&_swigt__p_btCollisionShapeWrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSimpleDynamicsWorld[] = {{&_swigt__p_btSimpleDynamicsWorld, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionWorld[] = {  {&_swigt__p_btCollisionWorld, 0, 0, 0},  {&_swigt__p_btDynamicsWorld, _p_btDynamicsWorldTo_p_btCollisionWorld, 0, 0},  {&_swigt__p_btDiscreteDynamicsWorld, _p_btDiscreteDynamicsWorldTo_p_btCollisionWorld, 0, 0},  {&_swigt__p_btSoftRigidDynamicsWorld, _p_btSoftRigidDynamicsWorldTo_p_btCollisionWorld, 0, 0},  {&_swigt__p_btSimpleDynamicsWorld, _p_btSimpleDynamicsWorldTo_p_btCollisionWorld, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionWorld__ConvexResultCallback[] = {  {&_swigt__p_btCollisionWorld__ConvexResultCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionWorld__RayResultCallback[] = {  {&_swigt__p_btCollisionWorld__RayResultCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConstraintRow[] = {  {&_swigt__p_btConstraintRow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSequentialImpulseConstraintSolver[] = {{&_swigt__p_btSequentialImpulseConstraintSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConstraintSolver[] = {  {&_swigt__p_btConstraintSolver, 0, 0, 0},  {&_swigt__p_btSequentialImpulseConstraintSolver, _p_btSequentialImpulseConstraintSolverTo_p_btConstraintSolver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexHullShape[] = {  {&_swigt__p_btConvexHullShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexShape[] = {  {&_swigt__p_btCapsuleShapeZ, _p_btCapsuleShapeZTo_p_btConvexShape, 0, 0},  {&_swigt__p_btConeShapeZ, _p_btConeShapeZTo_p_btConvexShape, 0, 0},  {&_swigt__p_btConeShape, _p_btConeShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btCylinderShapeX, _p_btCylinderShapeXTo_p_btConvexShape, 0, 0},  {&_swigt__p_btCapsuleShape, _p_btCapsuleShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btSphereShape, _p_btSphereShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btMultiSphereShape, _p_btMultiSphereShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btConvexInternalShape, _p_btConvexInternalShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btCylinderShapeZ, _p_btCylinderShapeZTo_p_btConvexShape, 0, 0},  {&_swigt__p_btPolyhedralConvexAabbCachingShape, _p_btPolyhedralConvexAabbCachingShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btConvexInternalAabbCachingShape, _p_btConvexInternalAabbCachingShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btUniformScalingShape, _p_btUniformScalingShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btBU_Simplex1to4, _p_btBU_Simplex1to4To_p_btConvexShape, 0, 0},  {&_swigt__p_btConvexShape, 0, 0, 0},  {&_swigt__p_btBoxShape, _p_btBoxShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btPolyhedralConvexShape, _p_btPolyhedralConvexShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btConvexTriangleMeshShape, _p_btConvexTriangleMeshShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btCylinderShape, _p_btCylinderShapeTo_p_btConvexShape, 0, 0},  {&_swigt__p_btConeShapeX, _p_btConeShapeXTo_p_btConvexShape, 0, 0},  {&_swigt__p_btCapsuleShapeX, _p_btCapsuleShapeXTo_p_btConvexShape, 0, 0},  {&_swigt__p_btConvexHullShape, _p_btConvexHullShapeTo_p_btConvexShape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDbvt[] = {  {&_swigt__p_btDbvt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDbvtAabbMm[] = {  {&_swigt__p_btDbvtAabbMm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDbvtNode[] = {  {&_swigt__p_btDbvtNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDefaultCollisionConfiguration[] = {  {&_swigt__p_btDefaultCollisionConfiguration, 0, 0, 0},  {&_swigt__p_btSoftBodyRigidBodyCollisionConfiguration, _p_btSoftBodyRigidBodyCollisionConfigurationTo_p_btDefaultCollisionConfiguration, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDefaultCollisionConstructionInfo[] = {  {&_swigt__p_btDefaultCollisionConstructionInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDiscreteDynamicsWorld[] = {  {&_swigt__p_btDiscreteDynamicsWorld, 0, 0, 0},  {&_swigt__p_btSoftRigidDynamicsWorld, _p_btSoftRigidDynamicsWorldTo_p_btDiscreteDynamicsWorld, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionDispatcher[] = {{&_swigt__p_btCollisionDispatcher, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDispatcher[] = {  {&_swigt__p_btDispatcher, 0, 0, 0},  {&_swigt__p_btCollisionDispatcher, _p_btCollisionDispatcherTo_p_btDispatcher, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDynamicsWorld[] = {  {&_swigt__p_btDynamicsWorld, 0, 0, 0},  {&_swigt__p_btDiscreteDynamicsWorld, _p_btDiscreteDynamicsWorldTo_p_btDynamicsWorld, 0, 0},  {&_swigt__p_btSoftRigidDynamicsWorld, _p_btSoftRigidDynamicsWorldTo_p_btDynamicsWorld, 0, 0},  {&_swigt__p_btSimpleDynamicsWorld, _p_btSimpleDynamicsWorldTo_p_btDynamicsWorld, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btGhostObject[] = {  {&_swigt__p_btGhostObject, 0, 0, 0},  {&_swigt__p_btPairCachingGhostObject, _p_btPairCachingGhostObjectTo_p_btGhostObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btGhostPairCallback[] = {  {&_swigt__p_btGhostPairCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btGjkEpaSolver2[] = {  {&_swigt__p_btGjkEpaSolver2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btGjkEpaSolver2__sResults[] = {  {&_swigt__p_btGjkEpaSolver2__sResults, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btHashMapT_btHashInt_btTriangleInfo_t[] = {  {&_swigt__p_btHashMapT_btHashInt_btTriangleInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btHashedOverlappingPairCache[] = {  {&_swigt__p_btHashedOverlappingPairCache, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btIDebugDraw[] = {  {&_swigt__p_GLDebugDrawer, _p_GLDebugDrawerTo_p_btIDebugDraw, 0, 0},  {&_swigt__p_btIDebugDraw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btManifoldPoint[] = {  {&_swigt__p_btManifoldPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btMatrix3x3[] = {  {&_swigt__p_btMatrix3x3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btOverlapFilterCallback[] = {  {&_swigt__p_btOverlapFilterCallback, 0, 0, 0},  {&_swigt__p_CustomFilterCallback, _p_CustomFilterCallbackTo_p_btOverlapFilterCallback, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btOverlappingPairCache[] = {{&_swigt__p_btOverlappingPairCache, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSortedOverlappingPairCache[] = {{&_swigt__p_btSortedOverlappingPairCache, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btNullPairCache[] = {{&_swigt__p_btNullPairCache, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btOverlappingPairCallback[] = {  {&_swigt__p_btOverlappingPairCache, _p_btOverlappingPairCacheTo_p_btOverlappingPairCallback, 0, 0},  {&_swigt__p_btHashedOverlappingPairCache, _p_btHashedOverlappingPairCacheTo_p_btOverlappingPairCallback, 0, 0},  {&_swigt__p_btSortedOverlappingPairCache, _p_btSortedOverlappingPairCacheTo_p_btOverlappingPairCallback, 0, 0},  {&_swigt__p_btNullPairCache, _p_btNullPairCacheTo_p_btOverlappingPairCallback, 0, 0},  {&_swigt__p_btOverlappingPairCallback, 0, 0, 0},  {&_swigt__p_btGhostPairCallback, _p_btGhostPairCallbackTo_p_btOverlappingPairCallback, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btPairCachingGhostObject[] = {  {&_swigt__p_btPairCachingGhostObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btQuaternion[] = {  {&_swigt__p_btQuaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btRigidBody[] = {  {&_swigt__p_btRigidBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btRigidBodyForceWrapper[] = {  {&_swigt__p_btRigidBodyForceWrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btDefaultSerializer[] = {{&_swigt__p_btDefaultSerializer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSerializer[] = {  {&_swigt__p_btSerializer, 0, 0, 0},  {&_swigt__p_btDefaultSerializer, _p_btDefaultSerializerTo_p_btSerializer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody[] = {  {&_swigt__p_btSoftBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBodyRigidBodyCollisionConfiguration[] = {  {&_swigt__p_btSoftBodyRigidBodyCollisionConfiguration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBodySolver[] = {  {&_swigt__p_btSoftBodySolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBodyWorldInfo[] = {  {&_swigt__p_btSoftBodyWorldInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__AJoint__Specs[] = {  {&_swigt__p_btSoftBody__AJoint__Specs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__Body[] = {  {&_swigt__p_btSoftBody__Body, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__Cluster[] = {  {&_swigt__p_btSoftBody__Cluster, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__Config[] = {  {&_swigt__p_btSoftBody__Config, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__Face[] = {  {&_swigt__p_btSoftBody__Face, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__ImplicitFn[] = {  {&_swigt__p_btSoftBody__ImplicitFn, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__Impulse[] = {  {&_swigt__p_btSoftBody__Impulse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__LJoint__Specs[] = {  {&_swigt__p_btSoftBody__LJoint__Specs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__Link[] = {  {&_swigt__p_btSoftBody__Link, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__Material[] = {  {&_swigt__p_btSoftBody__Material, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__Node[] = {  {&_swigt__p_btSoftBody__Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__Pose[] = {  {&_swigt__p_btSoftBody__Pose, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__SolverState[] = {  {&_swigt__p_btSoftBody__SolverState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__eFeature___[] = {  {&_swigt__p_btSoftBody__eFeature___, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__ePSolver___[] = {  {&_swigt__p_btSoftBody__ePSolver___, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__eSolverPresets___[] = {  {&_swigt__p_btSoftBody__eSolverPresets___, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__eVSolver___[] = {  {&_swigt__p_btSoftBody__eVSolver___, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__sCti[] = {  {&_swigt__p_btSoftBody__sCti, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody__sRayCast[] = {  {&_swigt__p_btSoftBody__sRayCast, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftRigidDynamicsWorld[] = {  {&_swigt__p_btSoftRigidDynamicsWorld, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSparseSdfT_3_t[] = {  {&_swigt__p_btSparseSdfT_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTransform[] = {  {&_swigt__p_btTransform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btVector2[] = {  {&_swigt__p_btVector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btVector3[] = {  {&_swigt__p_btVector4, _p_btVector4To_p_btVector3, 0, 0},  {&_swigt__p_btVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btVector4[] = {  {&_swigt__p_btVector4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_btSoftBody_float__void[] = {  {&_swigt__p_f_p_btSoftBody_float__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_btSoftBody_float_float__void[] = {  {&_swigt__p_f_p_btSoftBody_float_float__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__void[] = {  {&_swigt__p_f_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_size_t__p_void[] = {  {&_swigt__p_f_size_t__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_size_t_int__p_void[] = {  {&_swigt__p_f_size_t_int__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_btSoftBody[] = {  {&_swigt__p_p_btSoftBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_std__string_t[] = {  {&_swigt__p_std__pairT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tAnchorArray[] = {  {&_swigt__p_tAnchorArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tClusterArray[] = {  {&_swigt__p_tClusterArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tFaceArray[] = {  {&_swigt__p_tFaceArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tJointArray[] = {  {&_swigt__p_tJointArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tLeafArray[] = {  {&_swigt__p_tLeafArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tLinkArray[] = {  {&_swigt__p_tLinkArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tMaterialArray[] = {  {&_swigt__p_tMaterialArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tNodeArray[] = {  {&_swigt__p_tNodeArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tNoteArray[] = {  {&_swigt__p_tNoteArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tPSolverArray[] = {  {&_swigt__p_tPSolverArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tRContactArray[] = {  {&_swigt__p_tRContactArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tSContactArray[] = {  {&_swigt__p_tSContactArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tScalarArray[] = {  {&_swigt__p_tScalarArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tSoftBodyArray[] = {  {&_swigt__p_tSoftBodyArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tTetraArray[] = {  {&_swigt__p_tTetraArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tVSolverArray[] = {  {&_swigt__p_tVSolverArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tVector3Array[] = {  {&_swigt__p_tVector3Array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AbstractBehaviorT_BaseEntity_t,
  _swigc__p_AbstractBehaviorT_BaseViewObject_t,
  _swigc__p_AbstractBehaviorT_SteeringEntity_t,
  _swigc__p_AbstractFactoryObject,
  _swigc__p_AbstractFactoryT_AnimationControllerFactory_AnimationControllerInfo_BaseEntityAnimationController_t,
  _swigc__p_AbstractFactoryT_CameraFactory_BaseCameraInfo_BaseCamera_t,
  _swigc__p_AbstractFactoryT_CollisionFilterBehaviorFactory_CollisionFilterBehaviorInfo_BaseCollisionFilterBehavior_t,
  _swigc__p_AbstractFactoryT_CollisionResponseBehaviorFactory_CollisionResponseBehaviorInfo_BaseCollisionResponseBehavior_t,
  _swigc__p_AbstractFactoryT_CollisionShapeFactory_CollisionShapeInfo_btCollisionShapeWrapper_t,
  _swigc__p_AbstractFactoryT_EntityFactory_BaseEntityInfo_BaseEntity_t,
  _swigc__p_AbstractFactoryT_EntityStateMachineFactory_EntityStateMachineInfo_EntityStateMachine_t,
  _swigc__p_AbstractFactoryT_FrameCounter_TimerInfo_BaseTimer_t,
  _swigc__p_AbstractFactoryT_ParticleEmitterBehaviorFactory_ParticleEmitterBehaviorInfo_BaseParticleEmitterBehavior_t,
  _swigc__p_AbstractFactoryT_ShaderFactory_ShaderFactoryKey_ShaderProgramHandleWrapper_t,
  _swigc__p_AbstractFactoryT_SteeringBehaviorFactory_SteeringBehaviorInfo_BaseEntitySteeringBehavior_t,
  _swigc__p_AbstractFactoryT_TextViewObjectFactory_BaseTextViewInfo_BaseTextViewObject_t,
  _swigc__p_AbstractFactoryT_TextureBehaviorFactory_TextureBehaviorInfo_BaseTextureBehavior_t,
  _swigc__p_AbstractFactoryT_UpdateBehaviorFactory_UpdateBehaviorInfo_BaseUpdateBehavior_t,
  _swigc__p_AbstractSingletonT_AnimationControllerFactory_t,
  _swigc__p_AbstractSingletonT_CameraFactory_t,
  _swigc__p_AbstractSingletonT_CollisionFilterBehaviorFactory_t,
  _swigc__p_AbstractSingletonT_CollisionResponseBehaviorFactory_t,
  _swigc__p_AbstractSingletonT_CollisionShapeFactory_t,
  _swigc__p_AbstractSingletonT_EntityFactory_t,
  _swigc__p_AbstractSingletonT_EntityStateMachineFactory_t,
  _swigc__p_AbstractSingletonT_GLDebugDrawer_t,
  _swigc__p_AbstractSingletonT_LuaVM_t,
  _swigc__p_AbstractSingletonT_MazeCreator_t,
  _swigc__p_AbstractSingletonT_MessageDispatcher_t,
  _swigc__p_AbstractSingletonT_ParticleEmitterBehaviorFactory_t,
  _swigc__p_AbstractSingletonT_ShaderFactory_t,
  _swigc__p_AbstractSingletonT_SteeringBehaviorFactory_t,
  _swigc__p_AbstractSingletonT_TextViewObjectFactory_t,
  _swigc__p_AbstractSingletonT_TextureBehaviorFactory_t,
  _swigc__p_AbstractSingletonT_UpdateBehaviorFactory_t,
  _swigc__p_AbstractStateT_BaseEntity_t,
  _swigc__p_AbstractStateT_void_t,
  _swigc__p_AnimationController2DTest,
  _swigc__p_AnimationControllerFactory,
  _swigc__p_AnimationControllerInfo,
  _swigc__p_BaseCamera,
  _swigc__p_BaseCameraInfo,
  _swigc__p_BaseCollisionFilterBehavior,
  _swigc__p_BaseCollisionResponseBehavior,
  _swigc__p_BaseEntity,
  _swigc__p_BaseEntityAnimationController,
  _swigc__p_BaseEntityInfo,
  _swigc__p_BaseEntityState,
  _swigc__p_BaseEntitySteeringBehavior,
  _swigc__p_BaseGameState,
  _swigc__p_BaseParticleEmitterBehavior,
  _swigc__p_BaseSpriteViewInfo,
  _swigc__p_BaseTextViewInfo,
  _swigc__p_BaseTextViewObject,
  _swigc__p_BaseTextureBehavior,
  _swigc__p_BaseTimer,
  _swigc__p_BaseUpdateBehavior,
  _swigc__p_BaseViewObject,
  _swigc__p_BaseViewObjectInfo,
  _swigc__p_CameraEntity,
  _swigc__p_CameraEntityInfo,
  _swigc__p_CameraFactory,
  _swigc__p_CameraPhysicsEntity,
  _swigc__p_CameraPhysicsEntityInfo,
  _swigc__p_CameraSteeringEntity,
  _swigc__p_CameraSteeringEntityInfo,
  _swigc__p_Clock,
  _swigc__p_CollisionFilterBehaviorFactory,
  _swigc__p_CollisionFilterBehaviorInfo,
  _swigc__p_CollisionResponseBehaviorFactory,
  _swigc__p_CollisionResponseBehaviorInfo,
  _swigc__p_CollisionShapeFactory,
  _swigc__p_CollisionShapeInfo,
  _swigc__p_CustomFilterCallback,
  _swigc__p_DeviceAccelerometer,
  _swigc__p_DeviceAttitude,
  _swigc__p_DeviceGesture,
  _swigc__p_DeviceGyro,
  _swigc__p_DeviceInput,
  _swigc__p_DeviceInputTime,
  _swigc__p_DeviceLongPressGesture,
  _swigc__p_DeviceMagnetometer,
  _swigc__p_DeviceMotion,
  _swigc__p_DevicePanGesture,
  _swigc__p_DevicePinchGesture,
  _swigc__p_DeviceRotationGesture,
  _swigc__p_DeviceSwipeGesture,
  _swigc__p_DeviceTapGesture,
  _swigc__p_DeviceTouch,
  _swigc__p_EntityFactory,
  _swigc__p_EntityStateMachine,
  _swigc__p_EntityStateMachineFactory,
  _swigc__p_EntityStateMachineInfo,
  _swigc__p_FollowPathInfo,
  _swigc__p_FrameCounter,
  _swigc__p_GLDebugDrawer,
  _swigc__p_GLKMatrix3,
  _swigc__p_GLKMatrix4,
  _swigc__p_GLenum,
  _swigc__p_GLuint,
  _swigc__p_GhostEntity,
  _swigc__p_GhostEntityInfo,
  _swigc__p_ImageFileEditor,
  _swigc__p_LocalizedTextViewObjectStruct,
  _swigc__p_LuaVM,
  _swigc__p_MazeCreator,
  _swigc__p_MazeGeneric,
  _swigc__p_MazeHTML,
  _swigc__p_MazeNode,
  _swigc__p_MazeNodeType_e,
  _swigc__p_MazeNodeWall_e,
  _swigc__p_MazePNG,
  _swigc__p_MazeRenderType_e,
  _swigc__p_MeshMazeCreator,
  _swigc__p_MessageDispatcher,
  _swigc__p_NSInteger,
  _swigc__p_NSTimeInterval,
  _swigc__p_OcclusionBuffer,
  _swigc__p_PHY_ScalarType,
  _swigc__p_ParticleAttributeTransform,
  _swigc__p_ParticleEmitterBehaviorFactory,
  _swigc__p_ParticleEmitterBehaviorInfo,
  _swigc__p_Path,
  _swigc__p_PathInfo,
  _swigc__p_RigidEntity,
  _swigc__p_RigidEntityInfo,
  _swigc__p_SceneRenderer,
  _swigc__p_ShaderFactory,
  _swigc__p_ShaderProgramHandleWrapper,
  _swigc__p_SoftEntity,
  _swigc__p_SoftEntityInfo,
  _swigc__p_SteeringBehaviorFactory,
  _swigc__p_SteeringBehaviorInfo,
  _swigc__p_SteeringEntity,
  _swigc__p_SteeringEntityInfo,
  _swigc__p_StopWatch,
  _swigc__p_Telegram,
  _swigc__p_TextInfo,
  _swigc__p_TextMetrics,
  _swigc__p_TextOrigin,
  _swigc__p_TextViewObjectFactory,
  _swigc__p_TextViewObjectStruct,
  _swigc__p_TextureBehaviorFactory,
  _swigc__p_TextureBehaviorInfo,
  _swigc__p_TextureMazeCreator,
  _swigc__p_Timer,
  _swigc__p_TimerInfo,
  _swigc__p_UpdateBehaviorFactory,
  _swigc__p_UpdateBehaviorInfo,
  _swigc__p_VertexTransform,
  _swigc__p_WallAvoidanceFunction,
  _swigc__p_WanderInfo,
  _swigc__p_WeightedSteeringBehavior,
  _swigc__p_WeightedSteeringBehaviorInfo,
  _swigc__p_WorldPhysics,
  _swigc__p_WorldPhysicsInfo,
  _swigc__p_btActionInterface,
  _swigc__p_btAlignedObjectArrayT_BaseCamera_p_t,
  _swigc__p_btAlignedObjectArrayT_BaseCollisionFilterBehavior_p_t,
  _swigc__p_btAlignedObjectArrayT_BaseCollisionResponseBehavior_p_t,
  _swigc__p_btAlignedObjectArrayT_BaseEntityAnimationController_p_t,
  _swigc__p_btAlignedObjectArrayT_BaseEntitySteeringBehavior_p_t,
  _swigc__p_btAlignedObjectArrayT_BaseEntity_p_t,
  _swigc__p_btAlignedObjectArrayT_BaseParticleEmitterBehavior_p_t,
  _swigc__p_btAlignedObjectArrayT_BaseTextViewObject_p_t,
  _swigc__p_btAlignedObjectArrayT_BaseTextureBehavior_p_t,
  _swigc__p_btAlignedObjectArrayT_BaseTimer_p_t,
  _swigc__p_btAlignedObjectArrayT_BaseUpdateBehavior_p_t,
  _swigc__p_btAlignedObjectArrayT_EntityStateMachine_p_t,
  _swigc__p_btAlignedObjectArrayT_ShaderProgramHandleWrapper_p_t,
  _swigc__p_btAlignedObjectArrayT_bool_t,
  _swigc__p_btAlignedObjectArrayT_btBroadphaseInterface_p_t,
  _swigc__p_btAlignedObjectArrayT_btBroadphasePair_t,
  _swigc__p_btAlignedObjectArrayT_btBvhSubtreeInfo_t,
  _swigc__p_btAlignedObjectArrayT_btCollisionObject_const_p_t,
  _swigc__p_btAlignedObjectArrayT_btCollisionObject_p_t,
  _swigc__p_btAlignedObjectArrayT_btCollisionShapeWrapper_p_t,
  _swigc__p_btAlignedObjectArrayT_btDbvtProxy_p_t,
  _swigc__p_btAlignedObjectArrayT_btIndexedMesh_t,
  _swigc__p_btAlignedObjectArrayT_btOptimizedBvhNode_t,
  _swigc__p_btAlignedObjectArrayT_btPersistentManifold_p_t,
  _swigc__p_btAlignedObjectArrayT_btQuantizedBvhNode_t,
  _swigc__p_btAlignedObjectArrayT_btSoftBody__Anchor_t,
  _swigc__p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t,
  _swigc__p_btAlignedObjectArrayT_btSoftBody__Face_t,
  _swigc__p_btAlignedObjectArrayT_btSoftBody__Joint_p_t,
  _swigc__p_btAlignedObjectArrayT_btSoftBody__Link_t,
  _swigc__p_btAlignedObjectArrayT_btSoftBody__Material_p_t,
  _swigc__p_btAlignedObjectArrayT_btSoftBody__Node_t,
  _swigc__p_btAlignedObjectArrayT_btSoftBody__Note_t,
  _swigc__p_btAlignedObjectArrayT_btSoftBody__RContact_t,
  _swigc__p_btAlignedObjectArrayT_btSoftBody__SContact_t,
  _swigc__p_btAlignedObjectArrayT_btSoftBody__Tetra_t,
  _swigc__p_btAlignedObjectArrayT_btSoftBody_p_t,
  _swigc__p_btAlignedObjectArrayT_btSolverConstraint_t,
  _swigc__p_btAlignedObjectArrayT_btVector3_t,
  _swigc__p_btAlignedObjectArrayT_float_t,
  _swigc__p_btAlignedObjectArrayT_int_t,
  _swigc__p_btAlignedObjectArrayT_long_long_t,
  _swigc__p_btBU_Simplex1to4,
  _swigc__p_btBoxShape,
  _swigc__p_btBroadphaseInterface,
  _swigc__p_btBroadphasePair,
  _swigc__p_btBroadphaseProxy,
  _swigc__p_btBvhTriangleMeshShape,
  _swigc__p_btCapsuleShape,
  _swigc__p_btCapsuleShapeX,
  _swigc__p_btCapsuleShapeZ,
  _swigc__p_btCollisionAlgorithmCreateFunc,
  _swigc__p_btCollisionConfiguration,
  _swigc__p_btCollisionDispatcher,
  _swigc__p_btCollisionObject,
  _swigc__p_btCollisionObjectWrapper,
  _swigc__p_btCollisionShape,
  _swigc__p_btCollisionShapeWrapper,
  _swigc__p_btCollisionWorld,
  _swigc__p_btCollisionWorld__ConvexResultCallback,
  _swigc__p_btCollisionWorld__RayResultCallback,
  _swigc__p_btCompoundShape,
  _swigc__p_btConcaveShape,
  _swigc__p_btConeShape,
  _swigc__p_btConeShapeX,
  _swigc__p_btConeShapeZ,
  _swigc__p_btConstraintRow,
  _swigc__p_btConstraintSolver,
  _swigc__p_btConvexHullShape,
  _swigc__p_btConvexInternalAabbCachingShape,
  _swigc__p_btConvexInternalShape,
  _swigc__p_btConvexShape,
  _swigc__p_btConvexTriangleMeshShape,
  _swigc__p_btCylinderShape,
  _swigc__p_btCylinderShapeX,
  _swigc__p_btCylinderShapeZ,
  _swigc__p_btDbvt,
  _swigc__p_btDbvtAabbMm,
  _swigc__p_btDbvtBroadphase,
  _swigc__p_btDbvtNode,
  _swigc__p_btDbvtProxy,
  _swigc__p_btDefaultCollisionConfiguration,
  _swigc__p_btDefaultCollisionConstructionInfo,
  _swigc__p_btDefaultSerializer,
  _swigc__p_btDiscreteDynamicsWorld,
  _swigc__p_btDispatcher,
  _swigc__p_btDynamicsWorld,
  _swigc__p_btEmptyShape,
  _swigc__p_btGhostObject,
  _swigc__p_btGhostPairCallback,
  _swigc__p_btGjkEpaSolver2,
  _swigc__p_btGjkEpaSolver2__sResults,
  _swigc__p_btHashMapT_btHashInt_btTriangleInfo_t,
  _swigc__p_btHashedOverlappingPairCache,
  _swigc__p_btIDebugDraw,
  _swigc__p_btManifoldPoint,
  _swigc__p_btMatrix3x3,
  _swigc__p_btMultiSapBroadphase,
  _swigc__p_btMultiSphereShape,
  _swigc__p_btNullPairCache,
  _swigc__p_btOverlapFilterCallback,
  _swigc__p_btOverlappingPairCache,
  _swigc__p_btOverlappingPairCallback,
  _swigc__p_btPairCachingGhostObject,
  _swigc__p_btPolyhedralConvexAabbCachingShape,
  _swigc__p_btPolyhedralConvexShape,
  _swigc__p_btQuaternion,
  _swigc__p_btRaycastVehicle,
  _swigc__p_btRigidBody,
  _swigc__p_btRigidBodyForceWrapper,
  _swigc__p_btScaledBvhTriangleMeshShape,
  _swigc__p_btSequentialImpulseConstraintSolver,
  _swigc__p_btSerializer,
  _swigc__p_btSimpleBroadphase,
  _swigc__p_btSimpleBroadphaseProxy,
  _swigc__p_btSimpleDynamicsWorld,
  _swigc__p_btSoftBody,
  _swigc__p_btSoftBodyRigidBodyCollisionConfiguration,
  _swigc__p_btSoftBodySolver,
  _swigc__p_btSoftBodyWorldInfo,
  _swigc__p_btSoftBody__AJoint__Specs,
  _swigc__p_btSoftBody__Body,
  _swigc__p_btSoftBody__Cluster,
  _swigc__p_btSoftBody__Config,
  _swigc__p_btSoftBody__Face,
  _swigc__p_btSoftBody__ImplicitFn,
  _swigc__p_btSoftBody__Impulse,
  _swigc__p_btSoftBody__LJoint__Specs,
  _swigc__p_btSoftBody__Link,
  _swigc__p_btSoftBody__Material,
  _swigc__p_btSoftBody__Node,
  _swigc__p_btSoftBody__Pose,
  _swigc__p_btSoftBody__SolverState,
  _swigc__p_btSoftBody__eFeature___,
  _swigc__p_btSoftBody__ePSolver___,
  _swigc__p_btSoftBody__eSolverPresets___,
  _swigc__p_btSoftBody__eVSolver___,
  _swigc__p_btSoftBody__sCti,
  _swigc__p_btSoftBody__sRayCast,
  _swigc__p_btSoftRigidDynamicsWorld,
  _swigc__p_btSortedOverlappingPairCache,
  _swigc__p_btSparseSdfT_3_t,
  _swigc__p_btSphereShape,
  _swigc__p_btStaticPlaneShape,
  _swigc__p_btTransform,
  _swigc__p_btTriangleMeshShape,
  _swigc__p_btUniformScalingShape,
  _swigc__p_btVector2,
  _swigc__p_btVector3,
  _swigc__p_btVector4,
  _swigc__p_char,
  _swigc__p_f_p_btSoftBody_float__void,
  _swigc__p_f_p_btSoftBody_float_float__void,
  _swigc__p_f_p_void__void,
  _swigc__p_f_size_t__p_void,
  _swigc__p_f_size_t_int__p_void,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_p_btSoftBody,
  _swigc__p_p_char,
  _swigc__p_short,
  _swigc__p_std__pairT_std__string_std__string_t,
  _swigc__p_std__string,
  _swigc__p_tAnchorArray,
  _swigc__p_tClusterArray,
  _swigc__p_tFaceArray,
  _swigc__p_tJointArray,
  _swigc__p_tLeafArray,
  _swigc__p_tLinkArray,
  _swigc__p_tMaterialArray,
  _swigc__p_tNodeArray,
  _swigc__p_tNoteArray,
  _swigc__p_tPSolverArray,
  _swigc__p_tRContactArray,
  _swigc__p_tSContactArray,
  _swigc__p_tScalarArray,
  _swigc__p_tSoftBodyArray,
  _swigc__p_tTetraArray,
  _swigc__p_tVSolverArray,
  _swigc__p_tVector3Array,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

